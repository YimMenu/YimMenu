name: Comment on pull request
on:
  workflow_run:
    workflows: ['CI']
    types: [completed]
jobs:
  pr_comment:
    if: github.event.workflow_run.event == 'pull_request' && github.event.workflow_run.conclusion == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Get the PR number
        run: |
          # Query the issue search API to get the PR associated with it
          PR_RAW=$(curl 'https://api.github.com/search/issues?q=${{ github.event.workflow_run.head_commit.id }}')
          # Get the event number from the search results, which will be the PR number
          # Filter by PRs only in this repository, as a PR with an identical head commit may be made in another repository (e.g. a fork)
          # Assume the 0th index in the array of found PRs is the correct one (it seems to usually be the latest one)
          PR_NUM=$(echo $PR_RAW | jq '.items | map(select(.repository_url=="https://api.github.com/repos/${{ github.repository }}")) | .[0].number')
          echo "PR_NUM=${PR_NUM}" >> $GITHUB_ENV
      - uses: actions/github-script@v6
        with:
          # This snippet is public-domain, taken from
          # https://github.com/oprypin/nightly.link/blob/master/.github/workflows/pr-comment.yml
          # and modified to allow comments on external PRs (oprypin/nightly.link/pull/38 & #issuecomment-1200506721)
          script: |
            async function upsertComment(owner, repo, issue_number, purpose, body) {
              const {data: comments} = await github.rest.issues.listComments(
                {owner, repo, issue_number});

              const marker = `<!-- bot: ${purpose} -->`;
              body = marker + "\n" + body;

              const existing = comments.filter((c) => c.body.includes(marker));
              if (existing.length > 0) {
                const last = existing[existing.length - 1];
                core.info(`Updating comment ${last.id}`);
                await github.rest.issues.updateComment({
                  owner, repo,
                  body,
                  comment_id: last.id,
                });
              } else {
                core.info(`Creating a comment in issue / PR #${issue_number}`);
                await github.rest.issues.createComment({issue_number, body, owner, repo});
              }
            }

            const {owner, repo} = context.repo;
            const run_id = '${{github.event.workflow_run.id}}';

            const artifacts = await github.paginate(
              github.rest.actions.listWorkflowRunArtifacts, {owner, repo, run_id});
            if (!artifacts.length) {
              return core.error(`No artifacts found`);
            }
            let body = `Download the artifacts for this pull request:\n`;
            for (const art of artifacts) {
              body += `\n* [${art.name}.zip](https://nightly.link/${owner}/${repo}/actions/artifacts/${art.id}.zip)`;
            }

            core.info("Review thread message body:", body);
            await upsertComment(owner, repo, ${{ env.PR_NUM }}, "nightly-link", body);
