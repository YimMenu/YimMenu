#pragma once
#include "wren.hpp"
#include "natives.hpp"

namespace big
{
    static void WREN_SYSTEM_WAIT(WrenVM* vm)
    {
        int ms = (int)wrenGetSlotDouble(vm, 1);

        SYSTEM::WAIT(ms);
    }

    static void WREN_SYSTEM_START_NEW_SCRIPT(WrenVM* vm)
    {
        const char* scriptName = wrenGetSlotString(vm, 1);
        int stackSize = (int)wrenGetSlotDouble(vm, 2);

        int res = SYSTEM::START_NEW_SCRIPT(scriptName, stackSize);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_SYSTEM_START_NEW_SCRIPT_WITH_ARGS(WrenVM* vm)
    {
        const char* scriptName = wrenGetSlotString(vm, 1);
        Any args;
        int argCount = (int)wrenGetSlotDouble(vm, 2);
        int stackSize = (int)wrenGetSlotDouble(vm, 3);

        int res = SYSTEM::START_NEW_SCRIPT_WITH_ARGS(scriptName, &args, argCount, stackSize);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, args);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_SYSTEM_START_NEW_SCRIPT_WITH_NAME_HASH(WrenVM* vm)
    {
        Hash scriptHash = (Hash)wrenGetSlotDouble(vm, 1);
        int stackSize = (int)wrenGetSlotDouble(vm, 2);

        int res = SYSTEM::START_NEW_SCRIPT_WITH_NAME_HASH(scriptHash, stackSize);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_SYSTEM_START_NEW_SCRIPT_WITH_NAME_HASH_AND_ARGS(WrenVM* vm)
    {
        Hash scriptHash = (Hash)wrenGetSlotDouble(vm, 1);
        Any args;
        int argCount = (int)wrenGetSlotDouble(vm, 2);
        int stackSize = (int)wrenGetSlotDouble(vm, 3);

        int res = SYSTEM::START_NEW_SCRIPT_WITH_NAME_HASH_AND_ARGS(scriptHash, &args, argCount, stackSize);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, args);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_SYSTEM_TIMERA(WrenVM* vm)
    {

        int res = SYSTEM::TIMERA();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_SYSTEM_TIMERB(WrenVM* vm)
    {

        int res = SYSTEM::TIMERB();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_SYSTEM_SETTIMERA(WrenVM* vm)
    {
        int value = (int)wrenGetSlotDouble(vm, 1);

        SYSTEM::SETTIMERA(value);
    }

    static void WREN_SYSTEM_SETTIMERB(WrenVM* vm)
    {
        int value = (int)wrenGetSlotDouble(vm, 1);

        SYSTEM::SETTIMERB(value);
    }

    static void WREN_SYSTEM_TIMESTEP(WrenVM* vm)
    {

        float res = SYSTEM::TIMESTEP();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_SYSTEM_SIN(WrenVM* vm)
    {
        float value = (float)wrenGetSlotDouble(vm, 1);

        float res = SYSTEM::SIN(value);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_SYSTEM_COS(WrenVM* vm)
    {
        float value = (float)wrenGetSlotDouble(vm, 1);

        float res = SYSTEM::COS(value);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_SYSTEM_SQRT(WrenVM* vm)
    {
        float value = (float)wrenGetSlotDouble(vm, 1);

        float res = SYSTEM::SQRT(value);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_SYSTEM_POW(WrenVM* vm)
    {
        float base = (float)wrenGetSlotDouble(vm, 1);
        float exponent = (float)wrenGetSlotDouble(vm, 2);

        float res = SYSTEM::POW(base, exponent);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_SYSTEM_LOG10(WrenVM* vm)
    {
        float value = (float)wrenGetSlotDouble(vm, 1);

        float res = SYSTEM::LOG10(value);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_SYSTEM_VMAG(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);

        float res = SYSTEM::VMAG(x, y, z);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_SYSTEM_VMAG2(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);

        float res = SYSTEM::VMAG2(x, y, z);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_SYSTEM_VDIST(WrenVM* vm)
    {
        float x1 = (float)wrenGetSlotDouble(vm, 1);
        float y1 = (float)wrenGetSlotDouble(vm, 2);
        float z1 = (float)wrenGetSlotDouble(vm, 3);
        float x2 = (float)wrenGetSlotDouble(vm, 4);
        float y2 = (float)wrenGetSlotDouble(vm, 5);
        float z2 = (float)wrenGetSlotDouble(vm, 6);

        float res = SYSTEM::VDIST(x1, y1, z1, x2, y2, z2);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_SYSTEM_VDIST2(WrenVM* vm)
    {
        float x1 = (float)wrenGetSlotDouble(vm, 1);
        float y1 = (float)wrenGetSlotDouble(vm, 2);
        float z1 = (float)wrenGetSlotDouble(vm, 3);
        float x2 = (float)wrenGetSlotDouble(vm, 4);
        float y2 = (float)wrenGetSlotDouble(vm, 5);
        float z2 = (float)wrenGetSlotDouble(vm, 6);

        float res = SYSTEM::VDIST2(x1, y1, z1, x2, y2, z2);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_SYSTEM_SHIFT_LEFT(WrenVM* vm)
    {
        int value = (int)wrenGetSlotDouble(vm, 1);
        int bitShift = (int)wrenGetSlotDouble(vm, 2);

        int res = SYSTEM::SHIFT_LEFT(value, bitShift);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_SYSTEM_SHIFT_RIGHT(WrenVM* vm)
    {
        int value = (int)wrenGetSlotDouble(vm, 1);
        int bitShift = (int)wrenGetSlotDouble(vm, 2);

        int res = SYSTEM::SHIFT_RIGHT(value, bitShift);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_SYSTEM_FLOOR(WrenVM* vm)
    {
        float value = (float)wrenGetSlotDouble(vm, 1);

        int res = SYSTEM::FLOOR(value);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_SYSTEM_CEIL(WrenVM* vm)
    {
        float value = (float)wrenGetSlotDouble(vm, 1);

        int res = SYSTEM::CEIL(value);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_SYSTEM_ROUND(WrenVM* vm)
    {
        float value = (float)wrenGetSlotDouble(vm, 1);

        int res = SYSTEM::ROUND(value);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_SYSTEM_TO_FLOAT(WrenVM* vm)
    {
        int value = (int)wrenGetSlotDouble(vm, 1);

        float res = SYSTEM::TO_FLOAT(value);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_SYSTEM_SET_THREAD_PRIORITY(WrenVM* vm)
    {
        int priority = (int)wrenGetSlotDouble(vm, 1);

        SYSTEM::SET_THREAD_PRIORITY(priority);
    }


    static void WREN_APP_APP_DATA_VALID(WrenVM* vm)
    {

        BOOL res = APP::APP_DATA_VALID();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_APP_APP_GET_INT(WrenVM* vm)
    {
        const char* property = wrenGetSlotString(vm, 1);

        int res = APP::APP_GET_INT(property);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_APP_APP_GET_FLOAT(WrenVM* vm)
    {
        const char* property = wrenGetSlotString(vm, 1);

        float res = APP::APP_GET_FLOAT(property);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_APP_APP_GET_STRING(WrenVM* vm)
    {
        const char* property = wrenGetSlotString(vm, 1);

        const char* res = APP::APP_GET_STRING(property);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotString(vm, 0, res);
    }

    static void WREN_APP_APP_SET_INT(WrenVM* vm)
    {
        const char* property = wrenGetSlotString(vm, 1);
        int value = (int)wrenGetSlotDouble(vm, 2);

        APP::APP_SET_INT(property, value);
    }

    static void WREN_APP_APP_SET_FLOAT(WrenVM* vm)
    {
        const char* property = wrenGetSlotString(vm, 1);
        float value = (float)wrenGetSlotDouble(vm, 2);

        APP::APP_SET_FLOAT(property, value);
    }

    static void WREN_APP_APP_SET_STRING(WrenVM* vm)
    {
        const char* property = wrenGetSlotString(vm, 1);
        const char* value = wrenGetSlotString(vm, 2);

        APP::APP_SET_STRING(property, value);
    }

    static void WREN_APP_APP_SET_APP(WrenVM* vm)
    {
        const char* appName = wrenGetSlotString(vm, 1);

        APP::APP_SET_APP(appName);
    }

    static void WREN_APP_APP_SET_BLOCK(WrenVM* vm)
    {
        const char* blockName = wrenGetSlotString(vm, 1);

        APP::APP_SET_BLOCK(blockName);
    }

    static void WREN_APP_APP_CLEAR_BLOCK(WrenVM* vm)
    {

        APP::APP_CLEAR_BLOCK();
    }

    static void WREN_APP_APP_CLOSE_APP(WrenVM* vm)
    {

        APP::APP_CLOSE_APP();
    }

    static void WREN_APP_APP_CLOSE_BLOCK(WrenVM* vm)
    {

        APP::APP_CLOSE_BLOCK();
    }

    static void WREN_APP_APP_HAS_LINKED_SOCIAL_CLUB_ACCOUNT(WrenVM* vm)
    {

        BOOL res = APP::APP_HAS_LINKED_SOCIAL_CLUB_ACCOUNT();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_APP_APP_HAS_SYNCED_DATA(WrenVM* vm)
    {
        const char* appName = wrenGetSlotString(vm, 1);

        BOOL res = APP::APP_HAS_SYNCED_DATA(appName);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_APP_APP_SAVE_DATA(WrenVM* vm)
    {

        APP::APP_SAVE_DATA();
    }

    static void WREN_APP_APP_GET_DELETED_FILE_STATUS(WrenVM* vm)
    {

        int res = APP::APP_GET_DELETED_FILE_STATUS();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_APP_APP_DELETE_APP_DATA(WrenVM* vm)
    {
        const char* appName = wrenGetSlotString(vm, 1);

        BOOL res = APP::APP_DELETE_APP_DATA(appName);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }


    static void WREN_AUDIO_PLAY_PED_RINGTONE(WrenVM* vm)
    {
        const char* ringtoneName = wrenGetSlotString(vm, 1);
        Ped ped = (Ped)wrenGetSlotDouble(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        AUDIO::PLAY_PED_RINGTONE(ringtoneName, ped, p2);
    }

    static void WREN_AUDIO_IS_PED_RINGTONE_PLAYING(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = AUDIO::IS_PED_RINGTONE_PLAYING(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_AUDIO_STOP_PED_RINGTONE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        AUDIO::STOP_PED_RINGTONE(ped);
    }

    static void WREN_AUDIO_IS_MOBILE_PHONE_CALL_ONGOING(WrenVM* vm)
    {

        BOOL res = AUDIO::IS_MOBILE_PHONE_CALL_ONGOING();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_AUDIO_IS_MOBILE_INTERFERENCE_ACTIVE(WrenVM* vm)
    {

        BOOL res = AUDIO::IS_MOBILE_INTERFERENCE_ACTIVE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_AUDIO_CREATE_NEW_SCRIPTED_CONVERSATION(WrenVM* vm)
    {

        AUDIO::CREATE_NEW_SCRIPTED_CONVERSATION();
    }

    static void WREN_AUDIO_ADD_LINE_TO_CONVERSATION(WrenVM* vm)
    {
        int index = (int)wrenGetSlotDouble(vm, 1);
        const char* p1 = wrenGetSlotString(vm, 2);
        const char* p2 = wrenGetSlotString(vm, 3);
        int p3 = (int)wrenGetSlotDouble(vm, 4);
        int p4 = (int)wrenGetSlotDouble(vm, 5);
        BOOL p5 = (BOOL)wrenGetSlotBool(vm, 6);
        BOOL p6 = (BOOL)wrenGetSlotBool(vm, 7);
        BOOL p7 = (BOOL)wrenGetSlotBool(vm, 8);
        BOOL p8 = (BOOL)wrenGetSlotBool(vm, 9);
        int p9 = (int)wrenGetSlotDouble(vm, 10);
        BOOL p10 = (BOOL)wrenGetSlotBool(vm, 11);
        BOOL p11 = (BOOL)wrenGetSlotBool(vm, 12);
        BOOL p12 = (BOOL)wrenGetSlotBool(vm, 13);

        AUDIO::ADD_LINE_TO_CONVERSATION(index, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12);
    }

    static void WREN_AUDIO_ADD_PED_TO_CONVERSATION(WrenVM* vm)
    {
        int index = (int)wrenGetSlotDouble(vm, 1);
        Ped ped = (Ped)wrenGetSlotDouble(vm, 2);
        const char* p2 = wrenGetSlotString(vm, 3);

        AUDIO::ADD_PED_TO_CONVERSATION(index, ped, p2);
    }

    static void WREN_AUDIO_SET_POSITION_FOR_NULL_CONV_PED(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);
        float p2 = (float)wrenGetSlotDouble(vm, 3);
        float p3 = (float)wrenGetSlotDouble(vm, 4);

        AUDIO::SET_POSITION_FOR_NULL_CONV_PED(p0, p1, p2, p3);
    }

    static void WREN_AUDIO_SET_ENTITY_FOR_NULL_CONV_PED(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);
        Entity entity = (Entity)wrenGetSlotDouble(vm, 2);

        AUDIO::SET_ENTITY_FOR_NULL_CONV_PED(p0, entity);
    }

    static void WREN_AUDIO_SET_MICROPHONE_POSITION(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);
        float x1 = (float)wrenGetSlotDouble(vm, 2);
        float y1 = (float)wrenGetSlotDouble(vm, 3);
        float z1 = (float)wrenGetSlotDouble(vm, 4);
        float x2 = (float)wrenGetSlotDouble(vm, 5);
        float y2 = (float)wrenGetSlotDouble(vm, 6);
        float z2 = (float)wrenGetSlotDouble(vm, 7);
        float x3 = (float)wrenGetSlotDouble(vm, 8);
        float y3 = (float)wrenGetSlotDouble(vm, 9);
        float z3 = (float)wrenGetSlotDouble(vm, 10);

        AUDIO::SET_MICROPHONE_POSITION(toggle, x1, y1, z1, x2, y2, z2, x3, y3, z3);
    }

    static void WREN_AUDIO_SET_CONVERSATION_AUDIO_CONTROLLED_BY_ANIM(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        AUDIO::SET_CONVERSATION_AUDIO_CONTROLLED_BY_ANIM(p0);
    }

    static void WREN_AUDIO_SET_CONVERSATION_AUDIO_PLACEHOLDER(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        AUDIO::SET_CONVERSATION_AUDIO_PLACEHOLDER(p0);
    }

    static void WREN_AUDIO_START_SCRIPT_PHONE_CONVERSATION(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        AUDIO::START_SCRIPT_PHONE_CONVERSATION(p0, p1);
    }

    static void WREN_AUDIO_PRELOAD_SCRIPT_PHONE_CONVERSATION(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        AUDIO::PRELOAD_SCRIPT_PHONE_CONVERSATION(p0, p1);
    }

    static void WREN_AUDIO_START_SCRIPT_CONVERSATION(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);
        BOOL p3 = (BOOL)wrenGetSlotBool(vm, 4);

        AUDIO::START_SCRIPT_CONVERSATION(p0, p1, p2, p3);
    }

    static void WREN_AUDIO_PRELOAD_SCRIPT_CONVERSATION(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);
        BOOL p3 = (BOOL)wrenGetSlotBool(vm, 4);

        AUDIO::PRELOAD_SCRIPT_CONVERSATION(p0, p1, p2, p3);
    }

    static void WREN_AUDIO_START_PRELOADED_CONVERSATION(WrenVM* vm)
    {

        AUDIO::START_PRELOADED_CONVERSATION();
    }

    static void WREN_AUDIO_GET_IS_PRELOADED_CONVERSATION_READY(WrenVM* vm)
    {

        BOOL res = AUDIO::GET_IS_PRELOADED_CONVERSATION_READY();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_AUDIO_IS_SCRIPTED_CONVERSATION_ONGOING(WrenVM* vm)
    {

        BOOL res = AUDIO::IS_SCRIPTED_CONVERSATION_ONGOING();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_AUDIO_IS_SCRIPTED_CONVERSATION_LOADED(WrenVM* vm)
    {

        BOOL res = AUDIO::IS_SCRIPTED_CONVERSATION_LOADED();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_AUDIO_GET_CURRENT_SCRIPTED_CONVERSATION_LINE(WrenVM* vm)
    {

        int res = AUDIO::GET_CURRENT_SCRIPTED_CONVERSATION_LINE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_AUDIO_PAUSE_SCRIPTED_CONVERSATION(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        AUDIO::PAUSE_SCRIPTED_CONVERSATION(p0);
    }

    static void WREN_AUDIO_RESTART_SCRIPTED_CONVERSATION(WrenVM* vm)
    {

        AUDIO::RESTART_SCRIPTED_CONVERSATION();
    }

    static void WREN_AUDIO_STOP_SCRIPTED_CONVERSATION(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        int res = AUDIO::STOP_SCRIPTED_CONVERSATION(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_AUDIO_SKIP_TO_NEXT_SCRIPTED_CONVERSATION_LINE(WrenVM* vm)
    {

        AUDIO::SKIP_TO_NEXT_SCRIPTED_CONVERSATION_LINE();
    }

    static void WREN_AUDIO_INTERRUPT_CONVERSATION(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        const char* voiceline = wrenGetSlotString(vm, 2);
        const char* speaker = wrenGetSlotString(vm, 3);

        AUDIO::INTERRUPT_CONVERSATION(ped, voiceline, speaker);
    }

    static void WREN_AUDIO_INTERRUPT_CONVERSATION_AND_PAUSE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        const char* p1 = wrenGetSlotString(vm, 2);
        const char* speaker = wrenGetSlotString(vm, 3);

        AUDIO::INTERRUPT_CONVERSATION_AND_PAUSE(ped, p1, speaker);
    }

    static void WREN_AUDIO_GET_VARIATION_CHOSEN_FOR_SCRIPTED_LINE(WrenVM* vm)
    {
        Any p0;

        Any res = AUDIO::GET_VARIATION_CHOSEN_FOR_SCRIPTED_LINE(&p0);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p0);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_AUDIO_SET_NO_DUCKING_FOR_CONVERSATION(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        AUDIO::SET_NO_DUCKING_FOR_CONVERSATION(p0);
    }

    static void WREN_AUDIO_REGISTER_SCRIPT_WITH_AUDIO(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);

        AUDIO::REGISTER_SCRIPT_WITH_AUDIO(p0);
    }

    static void WREN_AUDIO_UNREGISTER_SCRIPT_WITH_AUDIO(WrenVM* vm)
    {

        AUDIO::UNREGISTER_SCRIPT_WITH_AUDIO();
    }

    static void WREN_AUDIO_REQUEST_MISSION_AUDIO_BANK(WrenVM* vm)
    {
        const char* p0 = wrenGetSlotString(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);

        BOOL res = AUDIO::REQUEST_MISSION_AUDIO_BANK(p0, p1, p2);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_AUDIO_REQUEST_AMBIENT_AUDIO_BANK(WrenVM* vm)
    {
        const char* p0 = wrenGetSlotString(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);

        BOOL res = AUDIO::REQUEST_AMBIENT_AUDIO_BANK(p0, p1, p2);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_AUDIO_REQUEST_SCRIPT_AUDIO_BANK(WrenVM* vm)
    {
        const char* p0 = wrenGetSlotString(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        int p2 = (int)wrenGetSlotDouble(vm, 3);

        BOOL res = AUDIO::REQUEST_SCRIPT_AUDIO_BANK(p0, p1, p2);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_AUDIO_HINT_MISSION_AUDIO_BANK(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);

        Any res = AUDIO::HINT_MISSION_AUDIO_BANK(p0, p1, p2);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_AUDIO_HINT_AMBIENT_AUDIO_BANK(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);

        Any res = AUDIO::HINT_AMBIENT_AUDIO_BANK(p0, p1, p2);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_AUDIO_HINT_SCRIPT_AUDIO_BANK(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);

        Any res = AUDIO::HINT_SCRIPT_AUDIO_BANK(p0, p1, p2);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_AUDIO_RELEASE_MISSION_AUDIO_BANK(WrenVM* vm)
    {

        AUDIO::RELEASE_MISSION_AUDIO_BANK();
    }

    static void WREN_AUDIO_RELEASE_AMBIENT_AUDIO_BANK(WrenVM* vm)
    {

        AUDIO::RELEASE_AMBIENT_AUDIO_BANK();
    }

    static void WREN_AUDIO_RELEASE_NAMED_SCRIPT_AUDIO_BANK(WrenVM* vm)
    {
        const char* audioBank = wrenGetSlotString(vm, 1);

        AUDIO::RELEASE_NAMED_SCRIPT_AUDIO_BANK(audioBank);
    }

    static void WREN_AUDIO_RELEASE_SCRIPT_AUDIO_BANK(WrenVM* vm)
    {

        AUDIO::RELEASE_SCRIPT_AUDIO_BANK();
    }

    static void WREN_AUDIO_UNHINT_AMBIENT_AUDIO_BANK(WrenVM* vm)
    {

        AUDIO::UNHINT_AMBIENT_AUDIO_BANK();
    }

    static void WREN_AUDIO_UNHINT_SCRIPT_AUDIO_BANK(WrenVM* vm)
    {

        AUDIO::UNHINT_SCRIPT_AUDIO_BANK();
    }

    static void WREN_AUDIO_UNHINT_NAMED_SCRIPT_AUDIO_BANK(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        AUDIO::UNHINT_NAMED_SCRIPT_AUDIO_BANK(p0);
    }

    static void WREN_AUDIO_GET_SOUND_ID(WrenVM* vm)
    {

        int res = AUDIO::GET_SOUND_ID();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_AUDIO_RELEASE_SOUND_ID(WrenVM* vm)
    {
        int soundId = (int)wrenGetSlotDouble(vm, 1);

        AUDIO::RELEASE_SOUND_ID(soundId);
    }

    static void WREN_AUDIO_PLAY_SOUND(WrenVM* vm)
    {
        int soundId = (int)wrenGetSlotDouble(vm, 1);
        const char* audioName = wrenGetSlotString(vm, 2);
        const char* audioRef = wrenGetSlotString(vm, 3);
        BOOL p3 = (BOOL)wrenGetSlotBool(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);
        BOOL p5 = (BOOL)wrenGetSlotBool(vm, 6);

        AUDIO::PLAY_SOUND(soundId, audioName, audioRef, p3, p4, p5);
    }

    static void WREN_AUDIO_PLAY_SOUND_FRONTEND(WrenVM* vm)
    {
        int soundId = (int)wrenGetSlotDouble(vm, 1);
        const char* audioName = wrenGetSlotString(vm, 2);
        const char* audioRef = wrenGetSlotString(vm, 3);
        BOOL p3 = (BOOL)wrenGetSlotBool(vm, 4);

        AUDIO::PLAY_SOUND_FRONTEND(soundId, audioName, audioRef, p3);
    }

    static void WREN_AUDIO_PLAY_DEFERRED_SOUND_FRONTEND(WrenVM* vm)
    {
        const char* soundName = wrenGetSlotString(vm, 1);
        const char* soundsetName = wrenGetSlotString(vm, 2);

        AUDIO::PLAY_DEFERRED_SOUND_FRONTEND(soundName, soundsetName);
    }

    static void WREN_AUDIO_PLAY_SOUND_FROM_ENTITY(WrenVM* vm)
    {
        int soundId = (int)wrenGetSlotDouble(vm, 1);
        const char* audioName = wrenGetSlotString(vm, 2);
        Entity entity = (Entity)wrenGetSlotDouble(vm, 3);
        const char* audioRef = wrenGetSlotString(vm, 4);
        BOOL isNetwork = (BOOL)wrenGetSlotBool(vm, 5);
        Any p5 = (Any)wrenGetSlotDouble(vm, 6);

        AUDIO::PLAY_SOUND_FROM_ENTITY(soundId, audioName, entity, audioRef, isNetwork, p5);
    }

    static void WREN_AUDIO_PLAY_SOUND_FROM_ENTITY_HASH(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);
        Any p5 = (Any)wrenGetSlotDouble(vm, 6);

        AUDIO::PLAY_SOUND_FROM_ENTITY_HASH(p0, p1, p2, p3, p4, p5);
    }

    static void WREN_AUDIO_PLAY_SOUND_FROM_COORD(WrenVM* vm)
    {
        int soundId = (int)wrenGetSlotDouble(vm, 1);
        const char* audioName = wrenGetSlotString(vm, 2);
        float x = (float)wrenGetSlotDouble(vm, 3);
        float y = (float)wrenGetSlotDouble(vm, 4);
        float z = (float)wrenGetSlotDouble(vm, 5);
        const char* audioRef = wrenGetSlotString(vm, 6);
        BOOL isNetwork = (BOOL)wrenGetSlotBool(vm, 7);
        int range = (int)wrenGetSlotDouble(vm, 8);
        BOOL p8 = (BOOL)wrenGetSlotBool(vm, 9);

        AUDIO::PLAY_SOUND_FROM_COORD(soundId, audioName, x, y, z, audioRef, isNetwork, range, p8);
    }

    static void WREN_AUDIO_UPDATE_SOUND_COORD(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        AUDIO::UPDATE_SOUND_COORD(p0, p1, p2, p3);
    }

    static void WREN_AUDIO_STOP_SOUND(WrenVM* vm)
    {
        int soundId = (int)wrenGetSlotDouble(vm, 1);

        AUDIO::STOP_SOUND(soundId);
    }

    static void WREN_AUDIO_GET_NETWORK_ID_FROM_SOUND_ID(WrenVM* vm)
    {
        int soundId = (int)wrenGetSlotDouble(vm, 1);

        int res = AUDIO::GET_NETWORK_ID_FROM_SOUND_ID(soundId);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_AUDIO_GET_SOUND_ID_FROM_NETWORK_ID(WrenVM* vm)
    {
        int netId = (int)wrenGetSlotDouble(vm, 1);

        int res = AUDIO::GET_SOUND_ID_FROM_NETWORK_ID(netId);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_AUDIO_SET_VARIABLE_ON_SOUND(WrenVM* vm)
    {
        int soundId = (int)wrenGetSlotDouble(vm, 1);
        Any p1;
        float p2 = (float)wrenGetSlotDouble(vm, 2);

        AUDIO::SET_VARIABLE_ON_SOUND(soundId, &p1, p2);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_AUDIO_SET_VARIABLE_ON_STREAM(WrenVM* vm)
    {
        const char* p0 = wrenGetSlotString(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);

        AUDIO::SET_VARIABLE_ON_STREAM(p0, p1);
    }

    static void WREN_AUDIO_OVERRIDE_UNDERWATER_STREAM(WrenVM* vm)
    {
        Any p0;
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 1);

        AUDIO::OVERRIDE_UNDERWATER_STREAM(&p0, p1);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_AUDIO_SET_VARIABLE_ON_UNDER_WATER_STREAM(WrenVM* vm)
    {
        const char* variableName = wrenGetSlotString(vm, 1);
        float value = (float)wrenGetSlotDouble(vm, 2);

        AUDIO::SET_VARIABLE_ON_UNDER_WATER_STREAM(variableName, value);
    }

    static void WREN_AUDIO_HAS_SOUND_FINISHED(WrenVM* vm)
    {
        int soundId = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = AUDIO::HAS_SOUND_FINISHED(soundId);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_AUDIO_PLAY_PED_AMBIENT_SPEECH_NATIVE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        const char* speechName = wrenGetSlotString(vm, 2);
        const char* speechParam = wrenGetSlotString(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        AUDIO::PLAY_PED_AMBIENT_SPEECH_NATIVE(ped, speechName, speechParam, p3);
    }

    static void WREN_AUDIO_PLAY_PED_AMBIENT_SPEECH_AND_CLONE_NATIVE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        const char* speechName = wrenGetSlotString(vm, 2);
        const char* speechParam = wrenGetSlotString(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        AUDIO::PLAY_PED_AMBIENT_SPEECH_AND_CLONE_NATIVE(ped, speechName, speechParam, p3);
    }

    static void WREN_AUDIO_PLAY_PED_AMBIENT_SPEECH_WITH_VOICE_NATIVE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        const char* speechName = wrenGetSlotString(vm, 2);
        const char* voiceName = wrenGetSlotString(vm, 3);
        const char* speechParam = wrenGetSlotString(vm, 4);
        BOOL p4 = (BOOL)wrenGetSlotBool(vm, 5);

        AUDIO::PLAY_PED_AMBIENT_SPEECH_WITH_VOICE_NATIVE(ped, speechName, voiceName, speechParam, p4);
    }

    static void WREN_AUDIO_PLAY_AMBIENT_SPEECH_FROM_POSITION_NATIVE(WrenVM* vm)
    {
        const char* speechName = wrenGetSlotString(vm, 1);
        const char* voiceName = wrenGetSlotString(vm, 2);
        float x = (float)wrenGetSlotDouble(vm, 3);
        float y = (float)wrenGetSlotDouble(vm, 4);
        float z = (float)wrenGetSlotDouble(vm, 5);
        const char* speechParam = wrenGetSlotString(vm, 6);

        AUDIO::PLAY_AMBIENT_SPEECH_FROM_POSITION_NATIVE(speechName, voiceName, x, y, z, speechParam);
    }

    static void WREN_AUDIO_OVERRIDE_TREVOR_RAGE(WrenVM* vm)
    {
        const char* voiceEffect = wrenGetSlotString(vm, 1);

        AUDIO::OVERRIDE_TREVOR_RAGE(voiceEffect);
    }

    static void WREN_AUDIO_RESET_TREVOR_RAGE(WrenVM* vm)
    {

        AUDIO::RESET_TREVOR_RAGE();
    }

    static void WREN_AUDIO_SET_PLAYER_ANGRY(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        AUDIO::SET_PLAYER_ANGRY(ped, toggle);
    }

    static void WREN_AUDIO_PLAY_PAIN(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int painID = (int)wrenGetSlotDouble(vm, 2);
        int p1 = (int)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        AUDIO::PLAY_PAIN(ped, painID, p1, p3);
    }

    static void WREN_AUDIO_RELEASE_WEAPON_AUDIO(WrenVM* vm)
    {

        AUDIO::RELEASE_WEAPON_AUDIO();
    }

    static void WREN_AUDIO_ACTIVATE_AUDIO_SLOWMO_MODE(WrenVM* vm)
    {
        const char* p0 = wrenGetSlotString(vm, 1);

        AUDIO::ACTIVATE_AUDIO_SLOWMO_MODE(p0);
    }

    static void WREN_AUDIO_DEACTIVATE_AUDIO_SLOWMO_MODE(WrenVM* vm)
    {
        const char* p0 = wrenGetSlotString(vm, 1);

        AUDIO::DEACTIVATE_AUDIO_SLOWMO_MODE(p0);
    }

    static void WREN_AUDIO_SET_AMBIENT_VOICE_NAME(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        const char* name = wrenGetSlotString(vm, 2);

        AUDIO::SET_AMBIENT_VOICE_NAME(ped, name);
    }

    static void WREN_AUDIO_SET_AMBIENT_VOICE_NAME_HASH(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Hash hash = (Hash)wrenGetSlotDouble(vm, 2);

        AUDIO::SET_AMBIENT_VOICE_NAME_HASH(ped, hash);
    }

    static void WREN_AUDIO_GET_AMBIENT_VOICE_NAME_HASH(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        Hash res = AUDIO::GET_AMBIENT_VOICE_NAME_HASH(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_AUDIO_SET_PED_VOICE_FULL(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        AUDIO::SET_PED_VOICE_FULL(ped);
    }

    static void WREN_AUDIO_SET_PED_RACE_AND_VOICE_GROUP(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);

        AUDIO::SET_PED_RACE_AND_VOICE_GROUP(ped, p1, p2);
    }

    static void WREN_AUDIO_SET_PED_VOICE_GROUP(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Hash voiceGroupHash = (Hash)wrenGetSlotDouble(vm, 2);

        AUDIO::SET_PED_VOICE_GROUP(ped, voiceGroupHash);
    }

    static void WREN_AUDIO_SET_PED_VOICE_GROUP_FROM_RACE_TO_PVG(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Hash voiceGroupHash = (Hash)wrenGetSlotDouble(vm, 2);

        AUDIO::SET_PED_VOICE_GROUP_FROM_RACE_TO_PVG(ped, voiceGroupHash);
    }

    static void WREN_AUDIO_SET_PED_GENDER(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        AUDIO::SET_PED_GENDER(ped, p1);
    }

    static void WREN_AUDIO_STOP_CURRENT_PLAYING_SPEECH(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        AUDIO::STOP_CURRENT_PLAYING_SPEECH(ped);
    }

    static void WREN_AUDIO_STOP_CURRENT_PLAYING_AMBIENT_SPEECH(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        AUDIO::STOP_CURRENT_PLAYING_AMBIENT_SPEECH(ped);
    }

    static void WREN_AUDIO_IS_AMBIENT_SPEECH_PLAYING(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = AUDIO::IS_AMBIENT_SPEECH_PLAYING(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_AUDIO_IS_SCRIPTED_SPEECH_PLAYING(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        BOOL res = AUDIO::IS_SCRIPTED_SPEECH_PLAYING(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_AUDIO_IS_ANY_SPEECH_PLAYING(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = AUDIO::IS_ANY_SPEECH_PLAYING(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_AUDIO_IS_ANY_POSITIONAL_SPEECH_PLAYING(WrenVM* vm)
    {

        Any res = AUDIO::IS_ANY_POSITIONAL_SPEECH_PLAYING();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_AUDIO_DOES_CONTEXT_EXIST_FOR_THIS_PED(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        const char* speechName = wrenGetSlotString(vm, 2);
        BOOL unk = (BOOL)wrenGetSlotBool(vm, 3);

        BOOL res = AUDIO::DOES_CONTEXT_EXIST_FOR_THIS_PED(ped, speechName, unk);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_AUDIO_IS_PED_IN_CURRENT_CONVERSATION(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = AUDIO::IS_PED_IN_CURRENT_CONVERSATION(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_AUDIO_SET_PED_IS_DRUNK(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        AUDIO::SET_PED_IS_DRUNK(ped, toggle);
    }

    static void WREN_AUDIO_PLAY_ANIMAL_VOCALIZATION(WrenVM* vm)
    {
        Ped pedHandle = (Ped)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);
        const char* speechName = wrenGetSlotString(vm, 3);

        AUDIO::PLAY_ANIMAL_VOCALIZATION(pedHandle, p1, speechName);
    }

    static void WREN_AUDIO_IS_ANIMAL_VOCALIZATION_PLAYING(WrenVM* vm)
    {
        Ped pedHandle = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = AUDIO::IS_ANIMAL_VOCALIZATION_PLAYING(pedHandle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_AUDIO_SET_ANIMAL_MOOD(WrenVM* vm)
    {
        Ped animal = (Ped)wrenGetSlotDouble(vm, 1);
        int mood = (int)wrenGetSlotDouble(vm, 2);

        AUDIO::SET_ANIMAL_MOOD(animal, mood);
    }

    static void WREN_AUDIO_IS_MOBILE_PHONE_RADIO_ACTIVE(WrenVM* vm)
    {

        BOOL res = AUDIO::IS_MOBILE_PHONE_RADIO_ACTIVE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_AUDIO_SET_MOBILE_PHONE_RADIO_STATE(WrenVM* vm)
    {
        BOOL state = (BOOL)wrenGetSlotBool(vm, 1);

        AUDIO::SET_MOBILE_PHONE_RADIO_STATE(state);
    }

    static void WREN_AUDIO_GET_PLAYER_RADIO_STATION_INDEX(WrenVM* vm)
    {

        int res = AUDIO::GET_PLAYER_RADIO_STATION_INDEX();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_AUDIO_GET_PLAYER_RADIO_STATION_NAME(WrenVM* vm)
    {

        const char* res = AUDIO::GET_PLAYER_RADIO_STATION_NAME();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotString(vm, 0, res);
    }

    static void WREN_AUDIO_GET_RADIO_STATION_NAME(WrenVM* vm)
    {
        int radioStation = (int)wrenGetSlotDouble(vm, 1);

        const char* res = AUDIO::GET_RADIO_STATION_NAME(radioStation);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotString(vm, 0, res);
    }

    static void WREN_AUDIO_GET_PLAYER_RADIO_STATION_GENRE(WrenVM* vm)
    {

        int res = AUDIO::GET_PLAYER_RADIO_STATION_GENRE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_AUDIO_IS_RADIO_RETUNING(WrenVM* vm)
    {

        BOOL res = AUDIO::IS_RADIO_RETUNING();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_AUDIO_IS_RADIO_FADED_OUT(WrenVM* vm)
    {

        BOOL res = AUDIO::IS_RADIO_FADED_OUT();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_AUDIO_SET_RADIO_RETUNE_UP(WrenVM* vm)
    {

        AUDIO::SET_RADIO_RETUNE_UP();
    }

    static void WREN_AUDIO_SET_RADIO_RETUNE_DOWN(WrenVM* vm)
    {

        AUDIO::SET_RADIO_RETUNE_DOWN();
    }

    static void WREN_AUDIO_SET_RADIO_TO_STATION_NAME(WrenVM* vm)
    {
        const char* stationName = wrenGetSlotString(vm, 1);

        AUDIO::SET_RADIO_TO_STATION_NAME(stationName);
    }

    static void WREN_AUDIO_SET_VEH_RADIO_STATION(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        const char* radioStation = wrenGetSlotString(vm, 2);

        AUDIO::SET_VEH_RADIO_STATION(vehicle, radioStation);
    }

    static void WREN_AUDIO_SET_VEH_HAS_NORMAL_RADIO(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        AUDIO::SET_VEH_HAS_NORMAL_RADIO(vehicle);
    }

    static void WREN_AUDIO_IS_VEHICLE_RADIO_ON(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        BOOL res = AUDIO::IS_VEHICLE_RADIO_ON(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_AUDIO_SET_VEH_FORCED_RADIO_THIS_FRAME(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        AUDIO::SET_VEH_FORCED_RADIO_THIS_FRAME(vehicle);
    }

    static void WREN_AUDIO_SET_EMITTER_RADIO_STATION(WrenVM* vm)
    {
        const char* emitterName = wrenGetSlotString(vm, 1);
        const char* radioStation = wrenGetSlotString(vm, 2);

        AUDIO::SET_EMITTER_RADIO_STATION(emitterName, radioStation);
    }

    static void WREN_AUDIO_SET_STATIC_EMITTER_ENABLED(WrenVM* vm)
    {
        const char* emitterName = wrenGetSlotString(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        AUDIO::SET_STATIC_EMITTER_ENABLED(emitterName, toggle);
    }

    static void WREN_AUDIO_LINK_STATIC_EMITTER_TO_ENTITY(WrenVM* vm)
    {
        const char* emitterName = wrenGetSlotString(vm, 1);
        Entity entity = (Entity)wrenGetSlotDouble(vm, 2);

        AUDIO::LINK_STATIC_EMITTER_TO_ENTITY(emitterName, entity);
    }

    static void WREN_AUDIO_SET_RADIO_TO_STATION_INDEX(WrenVM* vm)
    {
        int radioStation = (int)wrenGetSlotDouble(vm, 1);

        AUDIO::SET_RADIO_TO_STATION_INDEX(radioStation);
    }

    static void WREN_AUDIO_SET_FRONTEND_RADIO_ACTIVE(WrenVM* vm)
    {
        BOOL active = (BOOL)wrenGetSlotBool(vm, 1);

        AUDIO::SET_FRONTEND_RADIO_ACTIVE(active);
    }

    static void WREN_AUDIO_UNLOCK_MISSION_NEWS_STORY(WrenVM* vm)
    {
        int newsStory = (int)wrenGetSlotDouble(vm, 1);

        AUDIO::UNLOCK_MISSION_NEWS_STORY(newsStory);
    }

    static void WREN_AUDIO_IS_MISSION_NEWS_STORY_UNLOCKED(WrenVM* vm)
    {
        int newsStory = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = AUDIO::IS_MISSION_NEWS_STORY_UNLOCKED(newsStory);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_AUDIO_GET_AUDIBLE_MUSIC_TRACK_TEXT_ID(WrenVM* vm)
    {

        int res = AUDIO::GET_AUDIBLE_MUSIC_TRACK_TEXT_ID();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_AUDIO_PLAY_END_CREDITS_MUSIC(WrenVM* vm)
    {
        BOOL play = (BOOL)wrenGetSlotBool(vm, 1);

        AUDIO::PLAY_END_CREDITS_MUSIC(play);
    }

    static void WREN_AUDIO_SKIP_RADIO_FORWARD(WrenVM* vm)
    {

        AUDIO::SKIP_RADIO_FORWARD();
    }

    static void WREN_AUDIO_FREEZE_RADIO_STATION(WrenVM* vm)
    {
        const char* radioStation = wrenGetSlotString(vm, 1);

        AUDIO::FREEZE_RADIO_STATION(radioStation);
    }

    static void WREN_AUDIO_UNFREEZE_RADIO_STATION(WrenVM* vm)
    {
        const char* radioStation = wrenGetSlotString(vm, 1);

        AUDIO::UNFREEZE_RADIO_STATION(radioStation);
    }

    static void WREN_AUDIO_SET_RADIO_AUTO_UNFREEZE(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        AUDIO::SET_RADIO_AUTO_UNFREEZE(toggle);
    }

    static void WREN_AUDIO_SET_INITIAL_PLAYER_STATION(WrenVM* vm)
    {
        const char* radioStation = wrenGetSlotString(vm, 1);

        AUDIO::SET_INITIAL_PLAYER_STATION(radioStation);
    }

    static void WREN_AUDIO_SET_USER_RADIO_CONTROL_ENABLED(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        AUDIO::SET_USER_RADIO_CONTROL_ENABLED(toggle);
    }

    static void WREN_AUDIO_SET_RADIO_TRACK(WrenVM* vm)
    {
        const char* radioStation = wrenGetSlotString(vm, 1);
        const char* radioTrack = wrenGetSlotString(vm, 2);

        AUDIO::SET_RADIO_TRACK(radioStation, radioTrack);
    }

    static void WREN_AUDIO_SET_RADIO_TRACK_WITH_START_OFFSET(WrenVM* vm)
    {
        const char* radioStationName = wrenGetSlotString(vm, 1);
        const char* mixName = wrenGetSlotString(vm, 2);
        int p2 = (int)wrenGetSlotDouble(vm, 3);

        AUDIO::SET_RADIO_TRACK_WITH_START_OFFSET(radioStationName, mixName, p2);
    }

    static void WREN_AUDIO_SET_NEXT_RADIO_TRACK(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        AUDIO::SET_NEXT_RADIO_TRACK(p0, p1, p2, p3);
    }

    static void WREN_AUDIO_SET_VEHICLE_RADIO_LOUD(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        AUDIO::SET_VEHICLE_RADIO_LOUD(vehicle, toggle);
    }

    static void WREN_AUDIO_CAN_VEHICLE_RECEIVE_CB_RADIO(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        BOOL res = AUDIO::CAN_VEHICLE_RECEIVE_CB_RADIO(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_AUDIO_SET_MOBILE_RADIO_ENABLED_DURING_GAMEPLAY(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        AUDIO::SET_MOBILE_RADIO_ENABLED_DURING_GAMEPLAY(toggle);
    }

    static void WREN_AUDIO_DOES_PLAYER_VEH_HAVE_RADIO(WrenVM* vm)
    {

        BOOL res = AUDIO::DOES_PLAYER_VEH_HAVE_RADIO();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_AUDIO_IS_PLAYER_VEH_RADIO_ENABLE(WrenVM* vm)
    {

        BOOL res = AUDIO::IS_PLAYER_VEH_RADIO_ENABLE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_AUDIO_SET_VEHICLE_RADIO_ENABLED(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        AUDIO::SET_VEHICLE_RADIO_ENABLED(vehicle, toggle);
    }

    static void WREN_AUDIO_SET_POSITIONED_PLAYER_VEHICLE_RADIO_EMITTER_ENABLED(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        AUDIO::SET_POSITIONED_PLAYER_VEHICLE_RADIO_EMITTER_ENABLED(p0);
    }

    static void WREN_AUDIO_SET_CUSTOM_RADIO_TRACK_LIST(WrenVM* vm)
    {
        const char* radioStation = wrenGetSlotString(vm, 1);
        const char* trackListName = wrenGetSlotString(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        AUDIO::SET_CUSTOM_RADIO_TRACK_LIST(radioStation, trackListName, p2);
    }

    static void WREN_AUDIO_CLEAR_CUSTOM_RADIO_TRACK_LIST(WrenVM* vm)
    {
        const char* radioStation = wrenGetSlotString(vm, 1);

        AUDIO::CLEAR_CUSTOM_RADIO_TRACK_LIST(radioStation);
    }

    static void WREN_AUDIO_GET_NUM_UNLOCKED_RADIO_STATIONS(WrenVM* vm)
    {

        int res = AUDIO::GET_NUM_UNLOCKED_RADIO_STATIONS();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_AUDIO_FIND_RADIO_STATION_INDEX(WrenVM* vm)
    {
        Hash stationNameHash = (Hash)wrenGetSlotDouble(vm, 1);

        int res = AUDIO::FIND_RADIO_STATION_INDEX(stationNameHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_AUDIO_SET_RADIO_STATION_MUSIC_ONLY(WrenVM* vm)
    {
        const char* radioStation = wrenGetSlotString(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        AUDIO::SET_RADIO_STATION_MUSIC_ONLY(radioStation, toggle);
    }

    static void WREN_AUDIO_SET_RADIO_FRONTEND_FADE_TIME(WrenVM* vm)
    {
        float fadeTime = (float)wrenGetSlotDouble(vm, 1);

        AUDIO::SET_RADIO_FRONTEND_FADE_TIME(fadeTime);
    }

    static void WREN_AUDIO_UNLOCK_RADIO_STATION_TRACK_LIST(WrenVM* vm)
    {
        const char* radioStation = wrenGetSlotString(vm, 1);
        const char* trackListName = wrenGetSlotString(vm, 2);

        AUDIO::UNLOCK_RADIO_STATION_TRACK_LIST(radioStation, trackListName);
    }

    static void WREN_AUDIO_LOCK_RADIO_STATION_TRACK_LIST(WrenVM* vm)
    {
        const char* radioStation = wrenGetSlotString(vm, 1);
        const char* trackListName = wrenGetSlotString(vm, 2);

        AUDIO::LOCK_RADIO_STATION_TRACK_LIST(radioStation, trackListName);
    }

    static void WREN_AUDIO_UPDATE_UNLOCKABLE_DJ_RADIO_TRACKS(WrenVM* vm)
    {
        BOOL enableMixes = (BOOL)wrenGetSlotBool(vm, 1);

        AUDIO::UPDATE_UNLOCKABLE_DJ_RADIO_TRACKS(enableMixes);
    }

    static void WREN_AUDIO_LOCK_RADIO_STATION(WrenVM* vm)
    {
        const char* radioStationName = wrenGetSlotString(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        AUDIO::LOCK_RADIO_STATION(radioStationName, toggle);
    }

    static void WREN_AUDIO_SET_RADIO_STATION_AS_FAVOURITE(WrenVM* vm)
    {
        const char* radioStation = wrenGetSlotString(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        AUDIO::SET_RADIO_STATION_AS_FAVOURITE(radioStation, toggle);
    }

    static void WREN_AUDIO_IS_RADIO_STATION_FAVOURITED(WrenVM* vm)
    {
        const char* radioStation = wrenGetSlotString(vm, 1);

        BOOL res = AUDIO::IS_RADIO_STATION_FAVOURITED(radioStation);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_AUDIO_GET_NEXT_AUDIBLE_BEAT(WrenVM* vm)
    {
        float p0;
        float p1;
        int p2;

        BOOL res = AUDIO::GET_NEXT_AUDIBLE_BEAT(&p0, &p1, &p2);

        wrenEnsureSlots(vm, 8);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p0);
        wrenInsertInList(vm, 0, 1, 2);

        wrenSetSlotDouble(vm, 3, p1);
        wrenInsertInList(vm, 0, 2, 3);

        wrenSetSlotDouble(vm, 4, p2);
        wrenInsertInList(vm, 0, 3, 4);

    }

    static void WREN_AUDIO_FORCE_MUSIC_TRACK_LIST(WrenVM* vm)
    {
        const char* radioStation = wrenGetSlotString(vm, 1);
        const char* trackListName = wrenGetSlotString(vm, 2);
        int milliseconds = (int)wrenGetSlotDouble(vm, 3);

        AUDIO::FORCE_MUSIC_TRACK_LIST(radioStation, trackListName, milliseconds);
    }

    static void WREN_AUDIO_GET_CURRENT_TRACK_PLAY_TIME(WrenVM* vm)
    {
        const char* radioStationName = wrenGetSlotString(vm, 1);

        int res = AUDIO::GET_CURRENT_TRACK_PLAY_TIME(radioStationName);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_AUDIO_GET_CURRENT_TRACK_SOUND_NAME(WrenVM* vm)
    {
        const char* radioStationName = wrenGetSlotString(vm, 1);

        Hash res = AUDIO::GET_CURRENT_TRACK_SOUND_NAME(radioStationName);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_AUDIO_SET_VEHICLE_MISSILE_WARNING_ENABLED(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        AUDIO::SET_VEHICLE_MISSILE_WARNING_ENABLED(vehicle, toggle);
    }

    static void WREN_AUDIO_SET_AMBIENT_ZONE_STATE(WrenVM* vm)
    {
        const char* zoneName = wrenGetSlotString(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        AUDIO::SET_AMBIENT_ZONE_STATE(zoneName, p1, p2);
    }

    static void WREN_AUDIO_CLEAR_AMBIENT_ZONE_STATE(WrenVM* vm)
    {
        const char* zoneName = wrenGetSlotString(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        AUDIO::CLEAR_AMBIENT_ZONE_STATE(zoneName, p1);
    }

    static void WREN_AUDIO_SET_AMBIENT_ZONE_LIST_STATE(WrenVM* vm)
    {
        Any p0;
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 1);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 2);

        AUDIO::SET_AMBIENT_ZONE_LIST_STATE(&p0, p1, p2);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_AUDIO_CLEAR_AMBIENT_ZONE_LIST_STATE(WrenVM* vm)
    {
        Any p0;
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 1);

        AUDIO::CLEAR_AMBIENT_ZONE_LIST_STATE(&p0, p1);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_AUDIO_SET_AMBIENT_ZONE_STATE_PERSISTENT(WrenVM* vm)
    {
        const char* ambientZone = wrenGetSlotString(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        AUDIO::SET_AMBIENT_ZONE_STATE_PERSISTENT(ambientZone, p1, p2);
    }

    static void WREN_AUDIO_SET_AMBIENT_ZONE_LIST_STATE_PERSISTENT(WrenVM* vm)
    {
        const char* ambientZone = wrenGetSlotString(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        AUDIO::SET_AMBIENT_ZONE_LIST_STATE_PERSISTENT(ambientZone, p1, p2);
    }

    static void WREN_AUDIO_IS_AMBIENT_ZONE_ENABLED(WrenVM* vm)
    {
        const char* ambientZone = wrenGetSlotString(vm, 1);

        BOOL res = AUDIO::IS_AMBIENT_ZONE_ENABLED(ambientZone);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_AUDIO_REFRESH_CLOSEST_OCEAN_SHORELINE(WrenVM* vm)
    {

        AUDIO::REFRESH_CLOSEST_OCEAN_SHORELINE();
    }

    static void WREN_AUDIO_SET_CUTSCENE_AUDIO_OVERRIDE(WrenVM* vm)
    {
        const char* name = wrenGetSlotString(vm, 1);

        AUDIO::SET_CUTSCENE_AUDIO_OVERRIDE(name);
    }

    static void WREN_AUDIO_SET_VARIABLE_ON_SYNCH_SCENE_AUDIO(WrenVM* vm)
    {
        const char* variableName = wrenGetSlotString(vm, 1);
        float value = (float)wrenGetSlotDouble(vm, 2);

        AUDIO::SET_VARIABLE_ON_SYNCH_SCENE_AUDIO(variableName, value);
    }

    static void WREN_AUDIO_PLAY_POLICE_REPORT(WrenVM* vm)
    {
        const char* name = wrenGetSlotString(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);

        int res = AUDIO::PLAY_POLICE_REPORT(name, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_AUDIO_CANCEL_ALL_POLICE_REPORTS(WrenVM* vm)
    {

        AUDIO::CANCEL_ALL_POLICE_REPORTS();
    }

    static void WREN_AUDIO_BLIP_SIREN(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        AUDIO::BLIP_SIREN(vehicle);
    }

    static void WREN_AUDIO_OVERRIDE_VEH_HORN(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL override = (BOOL)wrenGetSlotBool(vm, 2);
        int hornHash = (int)wrenGetSlotDouble(vm, 3);

        AUDIO::OVERRIDE_VEH_HORN(vehicle, override, hornHash);
    }

    static void WREN_AUDIO_IS_HORN_ACTIVE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        BOOL res = AUDIO::IS_HORN_ACTIVE(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_AUDIO_SET_AGGRESSIVE_HORNS(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        AUDIO::SET_AGGRESSIVE_HORNS(toggle);
    }

    static void WREN_AUDIO_SET_RADIO_POSITION_AUDIO_MUTE(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        AUDIO::SET_RADIO_POSITION_AUDIO_MUTE(p0);
    }

    static void WREN_AUDIO_SET_VEHICLE_CONVERSATIONS_PERSIST(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        AUDIO::SET_VEHICLE_CONVERSATIONS_PERSIST(p0, p1);
    }

    static void WREN_AUDIO_SET_VEHICLE_CONVERSATIONS_PERSIST_NEW(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);

        AUDIO::SET_VEHICLE_CONVERSATIONS_PERSIST_NEW(p0, p1, p2);
    }

    static void WREN_AUDIO_IS_STREAM_PLAYING(WrenVM* vm)
    {

        BOOL res = AUDIO::IS_STREAM_PLAYING();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_AUDIO_GET_STREAM_PLAY_TIME(WrenVM* vm)
    {

        int res = AUDIO::GET_STREAM_PLAY_TIME();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_AUDIO_LOAD_STREAM(WrenVM* vm)
    {
        const char* streamName = wrenGetSlotString(vm, 1);
        const char* soundSet = wrenGetSlotString(vm, 2);

        BOOL res = AUDIO::LOAD_STREAM(streamName, soundSet);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_AUDIO_LOAD_STREAM_WITH_START_OFFSET(WrenVM* vm)
    {
        const char* streamName = wrenGetSlotString(vm, 1);
        int startOffset = (int)wrenGetSlotDouble(vm, 2);
        const char* soundSet = wrenGetSlotString(vm, 3);

        BOOL res = AUDIO::LOAD_STREAM_WITH_START_OFFSET(streamName, startOffset, soundSet);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_AUDIO_PLAY_STREAM_FROM_PED(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        AUDIO::PLAY_STREAM_FROM_PED(ped);
    }

    static void WREN_AUDIO_PLAY_STREAM_FROM_VEHICLE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        AUDIO::PLAY_STREAM_FROM_VEHICLE(vehicle);
    }

    static void WREN_AUDIO_PLAY_STREAM_FROM_OBJECT(WrenVM* vm)
    {
        Object object = (Object)wrenGetSlotDouble(vm, 1);

        AUDIO::PLAY_STREAM_FROM_OBJECT(object);
    }

    static void WREN_AUDIO_PLAY_STREAM_FRONTEND(WrenVM* vm)
    {

        AUDIO::PLAY_STREAM_FRONTEND();
    }

    static void WREN_AUDIO_PLAY_STREAM_FROM_POSITION(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);

        AUDIO::PLAY_STREAM_FROM_POSITION(x, y, z);
    }

    static void WREN_AUDIO_STOP_STREAM(WrenVM* vm)
    {

        AUDIO::STOP_STREAM();
    }

    static void WREN_AUDIO_STOP_PED_SPEAKING(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL shaking = (BOOL)wrenGetSlotBool(vm, 2);

        AUDIO::STOP_PED_SPEAKING(ped, shaking);
    }

    static void WREN_AUDIO_BLOCK_ALL_SPEECH_FROM_PED(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        AUDIO::BLOCK_ALL_SPEECH_FROM_PED(ped, p1, p2);
    }

    static void WREN_AUDIO_STOP_PED_SPEAKING_SYNCED(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        AUDIO::STOP_PED_SPEAKING_SYNCED(p0, p1);
    }

    static void WREN_AUDIO_DISABLE_PED_PAIN_AUDIO(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        AUDIO::DISABLE_PED_PAIN_AUDIO(ped, toggle);
    }

    static void WREN_AUDIO_IS_AMBIENT_SPEECH_DISABLED(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = AUDIO::IS_AMBIENT_SPEECH_DISABLED(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_AUDIO_BLOCK_SPEECH_CONTEXT_GROUP(WrenVM* vm)
    {
        const char* p0 = wrenGetSlotString(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);

        AUDIO::BLOCK_SPEECH_CONTEXT_GROUP(p0, p1);
    }

    static void WREN_AUDIO_UNBLOCK_SPEECH_CONTEXT_GROUP(WrenVM* vm)
    {
        const char* p0 = wrenGetSlotString(vm, 1);

        AUDIO::UNBLOCK_SPEECH_CONTEXT_GROUP(p0);
    }

    static void WREN_AUDIO_SET_SIREN_WITH_NO_DRIVER(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        AUDIO::SET_SIREN_WITH_NO_DRIVER(vehicle, toggle);
    }

    static void WREN_AUDIO_SET_SIREN_BYPASS_MP_DRIVER_CHECK(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        AUDIO::SET_SIREN_BYPASS_MP_DRIVER_CHECK(vehicle, toggle);
    }

    static void WREN_AUDIO_TRIGGER_SIREN_AUDIO(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        AUDIO::TRIGGER_SIREN_AUDIO(vehicle);
    }

    static void WREN_AUDIO_SET_HORN_PERMANENTLY_ON(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        AUDIO::SET_HORN_PERMANENTLY_ON(vehicle);
    }

    static void WREN_AUDIO_SET_HORN_ENABLED(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        AUDIO::SET_HORN_ENABLED(vehicle, toggle);
    }

    static void WREN_AUDIO_SET_AUDIO_VEHICLE_PRIORITY(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        AUDIO::SET_AUDIO_VEHICLE_PRIORITY(vehicle, p1);
    }

    static void WREN_AUDIO_SET_HORN_PERMANENTLY_ON_TIME(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        float time = (float)wrenGetSlotDouble(vm, 2);

        AUDIO::SET_HORN_PERMANENTLY_ON_TIME(vehicle, time);
    }

    static void WREN_AUDIO_USE_SIREN_AS_HORN(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        AUDIO::USE_SIREN_AS_HORN(vehicle, toggle);
    }

    static void WREN_AUDIO_FORCE_USE_AUDIO_GAME_OBJECT(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        const char* audioName = wrenGetSlotString(vm, 2);

        AUDIO::FORCE_USE_AUDIO_GAME_OBJECT(vehicle, audioName);
    }

    static void WREN_AUDIO_PRELOAD_VEHICLE_AUDIO_BANK(WrenVM* vm)
    {
        Hash vehicleModel = (Hash)wrenGetSlotDouble(vm, 1);

        AUDIO::PRELOAD_VEHICLE_AUDIO_BANK(vehicleModel);
    }

    static void WREN_AUDIO_SET_VEHICLE_STARTUP_REV_SOUND(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        const char* p1 = wrenGetSlotString(vm, 2);
        const char* p2 = wrenGetSlotString(vm, 3);

        AUDIO::SET_VEHICLE_STARTUP_REV_SOUND(vehicle, p1, p2);
    }

    static void WREN_AUDIO_RESET_VEHICLE_STARTUP_REV_SOUND(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        AUDIO::RESET_VEHICLE_STARTUP_REV_SOUND(vehicle);
    }

    static void WREN_AUDIO_SET_VEHICLE_FORCE_REVERSE_WARNING(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        AUDIO::SET_VEHICLE_FORCE_REVERSE_WARNING(p0, p1);
    }

    static void WREN_AUDIO_IS_VEHICLE_AUDIBLY_DAMAGED(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        BOOL res = AUDIO::IS_VEHICLE_AUDIBLY_DAMAGED(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_AUDIO_SET_VEHICLE_AUDIO_ENGINE_DAMAGE_FACTOR(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        float damageFactor = (float)wrenGetSlotDouble(vm, 2);

        AUDIO::SET_VEHICLE_AUDIO_ENGINE_DAMAGE_FACTOR(vehicle, damageFactor);
    }

    static void WREN_AUDIO_SET_VEHICLE_AUDIO_BODY_DAMAGE_FACTOR(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        float intensity = (float)wrenGetSlotDouble(vm, 2);

        AUDIO::SET_VEHICLE_AUDIO_BODY_DAMAGE_FACTOR(vehicle, intensity);
    }

    static void WREN_AUDIO_ENABLE_VEHICLE_FANBELT_DAMAGE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        AUDIO::ENABLE_VEHICLE_FANBELT_DAMAGE(vehicle, toggle);
    }

    static void WREN_AUDIO_ENABLE_VEHICLE_EXHAUST_POPS(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        AUDIO::ENABLE_VEHICLE_EXHAUST_POPS(vehicle, toggle);
    }

    static void WREN_AUDIO_SET_VEHICLE_BOOST_ACTIVE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        AUDIO::SET_VEHICLE_BOOST_ACTIVE(vehicle, toggle);
    }

    static void WREN_AUDIO_SET_PLAYER_VEHICLE_ALARM_AUDIO_ACTIVE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        AUDIO::SET_PLAYER_VEHICLE_ALARM_AUDIO_ACTIVE(vehicle, toggle);
    }

    static void WREN_AUDIO_SET_SCRIPT_UPDATE_DOOR_AUDIO(WrenVM* vm)
    {
        Hash doorHash = (Hash)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        AUDIO::SET_SCRIPT_UPDATE_DOOR_AUDIO(doorHash, toggle);
    }

    static void WREN_AUDIO_PLAY_VEHICLE_DOOR_OPEN_SOUND(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int doorId = (int)wrenGetSlotDouble(vm, 2);

        AUDIO::PLAY_VEHICLE_DOOR_OPEN_SOUND(vehicle, doorId);
    }

    static void WREN_AUDIO_PLAY_VEHICLE_DOOR_CLOSE_SOUND(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int doorId = (int)wrenGetSlotDouble(vm, 2);

        AUDIO::PLAY_VEHICLE_DOOR_CLOSE_SOUND(vehicle, doorId);
    }

    static void WREN_AUDIO_ENABLE_STALL_WARNING_SOUNDS(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        AUDIO::ENABLE_STALL_WARNING_SOUNDS(vehicle, toggle);
    }

    static void WREN_AUDIO_IS_GAME_IN_CONTROL_OF_MUSIC(WrenVM* vm)
    {

        BOOL res = AUDIO::IS_GAME_IN_CONTROL_OF_MUSIC();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_AUDIO_SET_GPS_ACTIVE(WrenVM* vm)
    {
        BOOL active = (BOOL)wrenGetSlotBool(vm, 1);

        AUDIO::SET_GPS_ACTIVE(active);
    }

    static void WREN_AUDIO_PLAY_MISSION_COMPLETE_AUDIO(WrenVM* vm)
    {
        const char* audioName = wrenGetSlotString(vm, 1);

        AUDIO::PLAY_MISSION_COMPLETE_AUDIO(audioName);
    }

    static void WREN_AUDIO_IS_MISSION_COMPLETE_PLAYING(WrenVM* vm)
    {

        BOOL res = AUDIO::IS_MISSION_COMPLETE_PLAYING();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_AUDIO_IS_MISSION_COMPLETE_READY_FOR_UI(WrenVM* vm)
    {

        BOOL res = AUDIO::IS_MISSION_COMPLETE_READY_FOR_UI();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_AUDIO_BLOCK_DEATH_JINGLE(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        AUDIO::BLOCK_DEATH_JINGLE(toggle);
    }

    static void WREN_AUDIO_START_AUDIO_SCENE(WrenVM* vm)
    {
        const char* scene = wrenGetSlotString(vm, 1);

        BOOL res = AUDIO::START_AUDIO_SCENE(scene);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_AUDIO_STOP_AUDIO_SCENE(WrenVM* vm)
    {
        const char* scene = wrenGetSlotString(vm, 1);

        AUDIO::STOP_AUDIO_SCENE(scene);
    }

    static void WREN_AUDIO_STOP_AUDIO_SCENES(WrenVM* vm)
    {

        AUDIO::STOP_AUDIO_SCENES();
    }

    static void WREN_AUDIO_IS_AUDIO_SCENE_ACTIVE(WrenVM* vm)
    {
        const char* scene = wrenGetSlotString(vm, 1);

        BOOL res = AUDIO::IS_AUDIO_SCENE_ACTIVE(scene);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_AUDIO_SET_AUDIO_SCENE_VARIABLE(WrenVM* vm)
    {
        const char* scene = wrenGetSlotString(vm, 1);
        const char* variable = wrenGetSlotString(vm, 2);
        float value = (float)wrenGetSlotDouble(vm, 3);

        AUDIO::SET_AUDIO_SCENE_VARIABLE(scene, variable, value);
    }

    static void WREN_AUDIO_SET_AUDIO_SCRIPT_CLEANUP_TIME(WrenVM* vm)
    {
        int time = (int)wrenGetSlotDouble(vm, 1);

        AUDIO::SET_AUDIO_SCRIPT_CLEANUP_TIME(time);
    }

    static void WREN_AUDIO_ADD_ENTITY_TO_AUDIO_MIX_GROUP(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        const char* groupName = wrenGetSlotString(vm, 2);
        float p2 = (float)wrenGetSlotDouble(vm, 3);

        AUDIO::ADD_ENTITY_TO_AUDIO_MIX_GROUP(entity, groupName, p2);
    }

    static void WREN_AUDIO_REMOVE_ENTITY_FROM_AUDIO_MIX_GROUP(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);

        AUDIO::REMOVE_ENTITY_FROM_AUDIO_MIX_GROUP(entity, p1);
    }

    static void WREN_AUDIO_AUDIO_IS_MUSIC_PLAYING(WrenVM* vm)
    {

        BOOL res = AUDIO::AUDIO_IS_MUSIC_PLAYING();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_AUDIO_AUDIO_IS_SCRIPTED_MUSIC_PLAYING(WrenVM* vm)
    {

        Any res = AUDIO::AUDIO_IS_SCRIPTED_MUSIC_PLAYING();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_AUDIO_PREPARE_MUSIC_EVENT(WrenVM* vm)
    {
        const char* eventName = wrenGetSlotString(vm, 1);

        BOOL res = AUDIO::PREPARE_MUSIC_EVENT(eventName);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_AUDIO_CANCEL_MUSIC_EVENT(WrenVM* vm)
    {
        const char* eventName = wrenGetSlotString(vm, 1);

        BOOL res = AUDIO::CANCEL_MUSIC_EVENT(eventName);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_AUDIO_TRIGGER_MUSIC_EVENT(WrenVM* vm)
    {
        const char* eventName = wrenGetSlotString(vm, 1);

        BOOL res = AUDIO::TRIGGER_MUSIC_EVENT(eventName);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_AUDIO_IS_MUSIC_ONESHOT_PLAYING(WrenVM* vm)
    {

        BOOL res = AUDIO::IS_MUSIC_ONESHOT_PLAYING();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_AUDIO_GET_MUSIC_PLAYTIME(WrenVM* vm)
    {

        int res = AUDIO::GET_MUSIC_PLAYTIME();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_AUDIO_SET_GLOBAL_RADIO_SIGNAL_LEVEL(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        AUDIO::SET_GLOBAL_RADIO_SIGNAL_LEVEL(p0);
    }

    static void WREN_AUDIO_RECORD_BROKEN_GLASS(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        float radius = (float)wrenGetSlotDouble(vm, 4);

        AUDIO::RECORD_BROKEN_GLASS(x, y, z, radius);
    }

    static void WREN_AUDIO_CLEAR_ALL_BROKEN_GLASS(WrenVM* vm)
    {

        AUDIO::CLEAR_ALL_BROKEN_GLASS();
    }

    static void WREN_AUDIO_SCRIPT_OVERRIDES_WIND_ELEVATION(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        AUDIO::SCRIPT_OVERRIDES_WIND_ELEVATION(p0, p1);
    }

    static void WREN_AUDIO_SET_PED_WALLA_DENSITY(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);

        AUDIO::SET_PED_WALLA_DENSITY(p0, p1);
    }

    static void WREN_AUDIO_SET_PED_INTERIOR_WALLA_DENSITY(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);

        AUDIO::SET_PED_INTERIOR_WALLA_DENSITY(p0, p1);
    }

    static void WREN_AUDIO_FORCE_PED_PANIC_WALLA(WrenVM* vm)
    {

        AUDIO::FORCE_PED_PANIC_WALLA();
    }

    static void WREN_AUDIO_PREPARE_ALARM(WrenVM* vm)
    {
        const char* alarmName = wrenGetSlotString(vm, 1);

        BOOL res = AUDIO::PREPARE_ALARM(alarmName);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_AUDIO_START_ALARM(WrenVM* vm)
    {
        const char* alarmName = wrenGetSlotString(vm, 1);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 2);

        AUDIO::START_ALARM(alarmName, p2);
    }

    static void WREN_AUDIO_STOP_ALARM(WrenVM* vm)
    {
        const char* alarmName = wrenGetSlotString(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        AUDIO::STOP_ALARM(alarmName, toggle);
    }

    static void WREN_AUDIO_STOP_ALL_ALARMS(WrenVM* vm)
    {
        BOOL stop = (BOOL)wrenGetSlotBool(vm, 1);

        AUDIO::STOP_ALL_ALARMS(stop);
    }

    static void WREN_AUDIO_IS_ALARM_PLAYING(WrenVM* vm)
    {
        const char* alarmName = wrenGetSlotString(vm, 1);

        BOOL res = AUDIO::IS_ALARM_PLAYING(alarmName);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_AUDIO_GET_VEHICLE_DEFAULT_HORN(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        Hash res = AUDIO::GET_VEHICLE_DEFAULT_HORN(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_AUDIO_GET_VEHICLE_DEFAULT_HORN_IGNORE_MODS(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        Hash res = AUDIO::GET_VEHICLE_DEFAULT_HORN_IGNORE_MODS(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_AUDIO_RESET_PED_AUDIO_FLAGS(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        AUDIO::RESET_PED_AUDIO_FLAGS(ped);
    }

    static void WREN_AUDIO_SET_PED_FOOTSTEPS_EVENTS_ENABLED(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        AUDIO::SET_PED_FOOTSTEPS_EVENTS_ENABLED(ped, toggle);
    }

    static void WREN_AUDIO_SET_PED_CLOTH_EVENTS_ENABLED(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        AUDIO::SET_PED_CLOTH_EVENTS_ENABLED(ped, toggle);
    }

    static void WREN_AUDIO_OVERRIDE_PLAYER_GROUND_MATERIAL(WrenVM* vm)
    {
        Hash hash = (Hash)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        AUDIO::OVERRIDE_PLAYER_GROUND_MATERIAL(hash, toggle);
    }

    static void WREN_AUDIO_USE_FOOTSTEP_SCRIPT_SWEETENERS(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        Hash hash = (Hash)wrenGetSlotDouble(vm, 3);

        AUDIO::USE_FOOTSTEP_SCRIPT_SWEETENERS(ped, p1, hash);
    }

    static void WREN_AUDIO_OVERRIDE_MICROPHONE_SETTINGS(WrenVM* vm)
    {
        Hash hash = (Hash)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        AUDIO::OVERRIDE_MICROPHONE_SETTINGS(hash, toggle);
    }

    static void WREN_AUDIO_FREEZE_MICROPHONE(WrenVM* vm)
    {

        AUDIO::FREEZE_MICROPHONE();
    }

    static void WREN_AUDIO_DISTANT_COP_CAR_SIRENS(WrenVM* vm)
    {
        BOOL value = (BOOL)wrenGetSlotBool(vm, 1);

        AUDIO::DISTANT_COP_CAR_SIRENS(value);
    }

    static void WREN_AUDIO_SET_SIREN_CAN_BE_CONTROLLED_BY_AUDIO(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        AUDIO::SET_SIREN_CAN_BE_CONTROLLED_BY_AUDIO(vehicle, p1);
    }

    static void WREN_AUDIO_ENABLE_STUNT_JUMP_AUDIO(WrenVM* vm)
    {

        AUDIO::ENABLE_STUNT_JUMP_AUDIO();
    }

    static void WREN_AUDIO_SET_AUDIO_FLAG(WrenVM* vm)
    {
        const char* flagName = wrenGetSlotString(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        AUDIO::SET_AUDIO_FLAG(flagName, toggle);
    }

    static void WREN_AUDIO_PREPARE_SYNCHRONIZED_AUDIO_EVENT(WrenVM* vm)
    {
        const char* p0 = wrenGetSlotString(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        Any res = AUDIO::PREPARE_SYNCHRONIZED_AUDIO_EVENT(p0, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_AUDIO_PREPARE_SYNCHRONIZED_AUDIO_EVENT_FOR_SCENE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1;

        BOOL res = AUDIO::PREPARE_SYNCHRONIZED_AUDIO_EVENT_FOR_SCENE(p0, &p1);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p1);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_AUDIO_PLAY_SYNCHRONIZED_AUDIO_EVENT(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        BOOL res = AUDIO::PLAY_SYNCHRONIZED_AUDIO_EVENT(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_AUDIO_STOP_SYNCHRONIZED_AUDIO_EVENT(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        BOOL res = AUDIO::STOP_SYNCHRONIZED_AUDIO_EVENT(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_AUDIO_INIT_SYNCH_SCENE_AUDIO_WITH_POSITION(WrenVM* vm)
    {
        Any p0;
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);

        AUDIO::INIT_SYNCH_SCENE_AUDIO_WITH_POSITION(&p0, x, y, z);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_AUDIO_INIT_SYNCH_SCENE_AUDIO_WITH_ENTITY(WrenVM* vm)
    {
        const char* p0 = wrenGetSlotString(vm, 1);
        Entity p1 = (Entity)wrenGetSlotDouble(vm, 2);

        AUDIO::INIT_SYNCH_SCENE_AUDIO_WITH_ENTITY(p0, p1);
    }

    static void WREN_AUDIO_SET_AUDIO_SPECIAL_EFFECT_MODE(WrenVM* vm)
    {
        int mode = (int)wrenGetSlotDouble(vm, 1);

        AUDIO::SET_AUDIO_SPECIAL_EFFECT_MODE(mode);
    }

    static void WREN_AUDIO_SET_PORTAL_SETTINGS_OVERRIDE(WrenVM* vm)
    {
        const char* p0 = wrenGetSlotString(vm, 1);
        const char* p1 = wrenGetSlotString(vm, 2);

        AUDIO::SET_PORTAL_SETTINGS_OVERRIDE(p0, p1);
    }

    static void WREN_AUDIO_REMOVE_PORTAL_SETTINGS_OVERRIDE(WrenVM* vm)
    {
        const char* p0 = wrenGetSlotString(vm, 1);

        AUDIO::REMOVE_PORTAL_SETTINGS_OVERRIDE(p0);
    }

    static void WREN_AUDIO_STOP_SMOKE_GRENADE_EXPLOSION_SOUNDS(WrenVM* vm)
    {

        AUDIO::STOP_SMOKE_GRENADE_EXPLOSION_SOUNDS();
    }

    static void WREN_AUDIO_GET_MUSIC_VOL_SLIDER(WrenVM* vm)
    {

        int res = AUDIO::GET_MUSIC_VOL_SLIDER();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_AUDIO_REQUEST_TENNIS_BANKS(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        AUDIO::REQUEST_TENNIS_BANKS(ped);
    }

    static void WREN_AUDIO_UNREQUEST_TENNIS_BANKS(WrenVM* vm)
    {

        AUDIO::UNREQUEST_TENNIS_BANKS();
    }

    static void WREN_AUDIO_SET_SKIP_MINIGUN_SPIN_UP_AUDIO(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        AUDIO::SET_SKIP_MINIGUN_SPIN_UP_AUDIO(p0);
    }

    static void WREN_AUDIO_STOP_CUTSCENE_AUDIO(WrenVM* vm)
    {

        AUDIO::STOP_CUTSCENE_AUDIO();
    }

    static void WREN_AUDIO_HAS_LOADED_MP_DATA_SET(WrenVM* vm)
    {

        BOOL res = AUDIO::HAS_LOADED_MP_DATA_SET();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_AUDIO_HAS_LOADED_SP_DATA_SET(WrenVM* vm)
    {

        BOOL res = AUDIO::HAS_LOADED_SP_DATA_SET();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_AUDIO_GET_VEHICLE_HORN_SOUND_INDEX(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        int res = AUDIO::GET_VEHICLE_HORN_SOUND_INDEX(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_AUDIO_SET_VEHICLE_HORN_SOUND_INDEX(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int value = (int)wrenGetSlotDouble(vm, 2);

        AUDIO::SET_VEHICLE_HORN_SOUND_INDEX(vehicle, value);
    }


    static void WREN_BRAIN_ADD_SCRIPT_TO_RANDOM_PED(WrenVM* vm)
    {
        const char* name = wrenGetSlotString(vm, 1);
        Hash model = (Hash)wrenGetSlotDouble(vm, 2);
        float p2 = (float)wrenGetSlotDouble(vm, 3);
        float p3 = (float)wrenGetSlotDouble(vm, 4);

        BRAIN::ADD_SCRIPT_TO_RANDOM_PED(name, model, p2, p3);
    }

    static void WREN_BRAIN_REGISTER_OBJECT_SCRIPT_BRAIN(WrenVM* vm)
    {
        const char* scriptName = wrenGetSlotString(vm, 1);
        Hash modelHash = (Hash)wrenGetSlotDouble(vm, 2);
        int p2 = (int)wrenGetSlotDouble(vm, 3);
        float activationRange = (float)wrenGetSlotDouble(vm, 4);
        int p4 = (int)wrenGetSlotDouble(vm, 5);
        int p5 = (int)wrenGetSlotDouble(vm, 6);

        BRAIN::REGISTER_OBJECT_SCRIPT_BRAIN(scriptName, modelHash, p2, activationRange, p4, p5);
    }

    static void WREN_BRAIN_IS_OBJECT_WITHIN_BRAIN_ACTIVATION_RANGE(WrenVM* vm)
    {
        Object object = (Object)wrenGetSlotDouble(vm, 1);

        BOOL res = BRAIN::IS_OBJECT_WITHIN_BRAIN_ACTIVATION_RANGE(object);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_BRAIN_REGISTER_WORLD_POINT_SCRIPT_BRAIN(WrenVM* vm)
    {
        const char* scriptName = wrenGetSlotString(vm, 1);
        float activationRange = (float)wrenGetSlotDouble(vm, 2);
        int p2 = (int)wrenGetSlotDouble(vm, 3);

        BRAIN::REGISTER_WORLD_POINT_SCRIPT_BRAIN(scriptName, activationRange, p2);
    }

    static void WREN_BRAIN_IS_WORLD_POINT_WITHIN_BRAIN_ACTIVATION_RANGE(WrenVM* vm)
    {

        BOOL res = BRAIN::IS_WORLD_POINT_WITHIN_BRAIN_ACTIVATION_RANGE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_BRAIN_ENABLE_SCRIPT_BRAIN_SET(WrenVM* vm)
    {
        int brainSet = (int)wrenGetSlotDouble(vm, 1);

        BRAIN::ENABLE_SCRIPT_BRAIN_SET(brainSet);
    }

    static void WREN_BRAIN_DISABLE_SCRIPT_BRAIN_SET(WrenVM* vm)
    {
        int brainSet = (int)wrenGetSlotDouble(vm, 1);

        BRAIN::DISABLE_SCRIPT_BRAIN_SET(brainSet);
    }

    static void WREN_BRAIN_REACTIVATE_ALL_WORLD_BRAINS_THAT_ARE_WAITING_TILL_OUT_OF_RANGE(WrenVM* vm)
    {

        BRAIN::REACTIVATE_ALL_WORLD_BRAINS_THAT_ARE_WAITING_TILL_OUT_OF_RANGE();
    }

    static void WREN_BRAIN_REACTIVATE_ALL_OBJECT_BRAINS_THAT_ARE_WAITING_TILL_OUT_OF_RANGE(WrenVM* vm)
    {

        BRAIN::REACTIVATE_ALL_OBJECT_BRAINS_THAT_ARE_WAITING_TILL_OUT_OF_RANGE();
    }

    static void WREN_BRAIN_REACTIVATE_NAMED_WORLD_BRAINS_WAITING_TILL_OUT_OF_RANGE(WrenVM* vm)
    {
        const char* scriptName = wrenGetSlotString(vm, 1);

        BRAIN::REACTIVATE_NAMED_WORLD_BRAINS_WAITING_TILL_OUT_OF_RANGE(scriptName);
    }

    static void WREN_BRAIN_REACTIVATE_NAMED_OBJECT_BRAINS_WAITING_TILL_OUT_OF_RANGE(WrenVM* vm)
    {
        const char* scriptName = wrenGetSlotString(vm, 1);

        BRAIN::REACTIVATE_NAMED_OBJECT_BRAINS_WAITING_TILL_OUT_OF_RANGE(scriptName);
    }


    static void WREN_CAM_RENDER_SCRIPT_CAMS(WrenVM* vm)
    {
        BOOL render = (BOOL)wrenGetSlotBool(vm, 1);
        BOOL ease = (BOOL)wrenGetSlotBool(vm, 2);
        int easeTime = (int)wrenGetSlotDouble(vm, 3);
        BOOL p3 = (BOOL)wrenGetSlotBool(vm, 4);
        BOOL p4 = (BOOL)wrenGetSlotBool(vm, 5);
        Any p5 = (Any)wrenGetSlotDouble(vm, 6);

        CAM::RENDER_SCRIPT_CAMS(render, ease, easeTime, p3, p4, p5);
    }

    static void WREN_CAM_STOP_RENDERING_SCRIPT_CAMS_USING_CATCH_UP(WrenVM* vm)
    {
        BOOL render = (BOOL)wrenGetSlotBool(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);
        int p2 = (int)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        CAM::STOP_RENDERING_SCRIPT_CAMS_USING_CATCH_UP(render, p1, p2, p3);
    }

    static void WREN_CAM_CREATE_CAM(WrenVM* vm)
    {
        const char* camName = wrenGetSlotString(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        Cam res = CAM::CREATE_CAM(camName, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_CAM_CREATE_CAM_WITH_PARAMS(WrenVM* vm)
    {
        const char* camName = wrenGetSlotString(vm, 1);
        float posX = (float)wrenGetSlotDouble(vm, 2);
        float posY = (float)wrenGetSlotDouble(vm, 3);
        float posZ = (float)wrenGetSlotDouble(vm, 4);
        float rotX = (float)wrenGetSlotDouble(vm, 5);
        float rotY = (float)wrenGetSlotDouble(vm, 6);
        float rotZ = (float)wrenGetSlotDouble(vm, 7);
        float fov = (float)wrenGetSlotDouble(vm, 8);
        BOOL p8 = (BOOL)wrenGetSlotBool(vm, 9);
        int p9 = (int)wrenGetSlotDouble(vm, 10);

        Cam res = CAM::CREATE_CAM_WITH_PARAMS(camName, posX, posY, posZ, rotX, rotY, rotZ, fov, p8, p9);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_CAM_CREATE_CAMERA(WrenVM* vm)
    {
        Hash camHash = (Hash)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        Cam res = CAM::CREATE_CAMERA(camHash, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_CAM_CREATE_CAMERA_WITH_PARAMS(WrenVM* vm)
    {
        Hash camHash = (Hash)wrenGetSlotDouble(vm, 1);
        float posX = (float)wrenGetSlotDouble(vm, 2);
        float posY = (float)wrenGetSlotDouble(vm, 3);
        float posZ = (float)wrenGetSlotDouble(vm, 4);
        float rotX = (float)wrenGetSlotDouble(vm, 5);
        float rotY = (float)wrenGetSlotDouble(vm, 6);
        float rotZ = (float)wrenGetSlotDouble(vm, 7);
        float fov = (float)wrenGetSlotDouble(vm, 8);
        BOOL p8 = (BOOL)wrenGetSlotBool(vm, 9);
        Any p9 = (Any)wrenGetSlotDouble(vm, 10);

        Cam res = CAM::CREATE_CAMERA_WITH_PARAMS(camHash, posX, posY, posZ, rotX, rotY, rotZ, fov, p8, p9);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_CAM_DESTROY_CAM(WrenVM* vm)
    {
        Cam cam = (Cam)wrenGetSlotDouble(vm, 1);
        BOOL bScriptHostCam = (BOOL)wrenGetSlotBool(vm, 2);

        CAM::DESTROY_CAM(cam, bScriptHostCam);
    }

    static void WREN_CAM_DESTROY_ALL_CAMS(WrenVM* vm)
    {
        BOOL bScriptHostCam = (BOOL)wrenGetSlotBool(vm, 1);

        CAM::DESTROY_ALL_CAMS(bScriptHostCam);
    }

    static void WREN_CAM_DOES_CAM_EXIST(WrenVM* vm)
    {
        Cam cam = (Cam)wrenGetSlotDouble(vm, 1);

        BOOL res = CAM::DOES_CAM_EXIST(cam);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_CAM_SET_CAM_ACTIVE(WrenVM* vm)
    {
        Cam cam = (Cam)wrenGetSlotDouble(vm, 1);
        BOOL active = (BOOL)wrenGetSlotBool(vm, 2);

        CAM::SET_CAM_ACTIVE(cam, active);
    }

    static void WREN_CAM_IS_CAM_ACTIVE(WrenVM* vm)
    {
        Cam cam = (Cam)wrenGetSlotDouble(vm, 1);

        BOOL res = CAM::IS_CAM_ACTIVE(cam);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_CAM_IS_CAM_RENDERING(WrenVM* vm)
    {
        Cam cam = (Cam)wrenGetSlotDouble(vm, 1);

        BOOL res = CAM::IS_CAM_RENDERING(cam);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_CAM_GET_RENDERING_CAM(WrenVM* vm)
    {

        Cam res = CAM::GET_RENDERING_CAM();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_CAM_GET_CAM_COORD(WrenVM* vm)
    {
        Cam cam = (Cam)wrenGetSlotDouble(vm, 1);

        Vector3 res = CAM::GET_CAM_COORD(cam);

        wrenEnsureSlots(vm, 1);

        wrenGetVariable(vm, "natives", "Vector3", 0);
        Vector3* wren_res = (Vector3*)wrenSetSlotNewForeign(vm, 0, 0, sizeof(Vector3));
        wren_res->x = res.x;
        wren_res->y = res.y;
        wren_res->z = res.z;
    }

    static void WREN_CAM_GET_CAM_ROT(WrenVM* vm)
    {
        Cam cam = (Cam)wrenGetSlotDouble(vm, 1);
        int rotationOrder = (int)wrenGetSlotDouble(vm, 2);

        Vector3 res = CAM::GET_CAM_ROT(cam, rotationOrder);

        wrenEnsureSlots(vm, 1);

        wrenGetVariable(vm, "natives", "Vector3", 0);
        Vector3* wren_res = (Vector3*)wrenSetSlotNewForeign(vm, 0, 0, sizeof(Vector3));
        wren_res->x = res.x;
        wren_res->y = res.y;
        wren_res->z = res.z;
    }

    static void WREN_CAM_GET_CAM_FOV(WrenVM* vm)
    {
        Cam cam = (Cam)wrenGetSlotDouble(vm, 1);

        float res = CAM::GET_CAM_FOV(cam);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_CAM_GET_CAM_NEAR_CLIP(WrenVM* vm)
    {
        Cam cam = (Cam)wrenGetSlotDouble(vm, 1);

        float res = CAM::GET_CAM_NEAR_CLIP(cam);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_CAM_GET_CAM_FAR_CLIP(WrenVM* vm)
    {
        Cam cam = (Cam)wrenGetSlotDouble(vm, 1);

        float res = CAM::GET_CAM_FAR_CLIP(cam);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_CAM_GET_CAM_NEAR_DOF(WrenVM* vm)
    {
        Cam cam = (Cam)wrenGetSlotDouble(vm, 1);

        float res = CAM::GET_CAM_NEAR_DOF(cam);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_CAM_GET_CAM_FAR_DOF(WrenVM* vm)
    {
        Cam cam = (Cam)wrenGetSlotDouble(vm, 1);

        float res = CAM::GET_CAM_FAR_DOF(cam);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_CAM_GET_CAM_DOF_STRENGTH(WrenVM* vm)
    {
        Cam cam = (Cam)wrenGetSlotDouble(vm, 1);

        float res = CAM::GET_CAM_DOF_STRENGTH(cam);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_CAM_SET_CAM_PARAMS(WrenVM* vm)
    {
        Cam cam = (Cam)wrenGetSlotDouble(vm, 1);
        float posX = (float)wrenGetSlotDouble(vm, 2);
        float posY = (float)wrenGetSlotDouble(vm, 3);
        float posZ = (float)wrenGetSlotDouble(vm, 4);
        float rotX = (float)wrenGetSlotDouble(vm, 5);
        float rotY = (float)wrenGetSlotDouble(vm, 6);
        float rotZ = (float)wrenGetSlotDouble(vm, 7);
        float fieldOfView = (float)wrenGetSlotDouble(vm, 8);
        Any p8 = (Any)wrenGetSlotDouble(vm, 9);
        int p9 = (int)wrenGetSlotDouble(vm, 10);
        int p10 = (int)wrenGetSlotDouble(vm, 11);
        int p11 = (int)wrenGetSlotDouble(vm, 12);

        CAM::SET_CAM_PARAMS(cam, posX, posY, posZ, rotX, rotY, rotZ, fieldOfView, p8, p9, p10, p11);
    }

    static void WREN_CAM_SET_CAM_COORD(WrenVM* vm)
    {
        Cam cam = (Cam)wrenGetSlotDouble(vm, 1);
        float posX = (float)wrenGetSlotDouble(vm, 2);
        float posY = (float)wrenGetSlotDouble(vm, 3);
        float posZ = (float)wrenGetSlotDouble(vm, 4);

        CAM::SET_CAM_COORD(cam, posX, posY, posZ);
    }

    static void WREN_CAM_SET_CAM_ROT(WrenVM* vm)
    {
        Cam cam = (Cam)wrenGetSlotDouble(vm, 1);
        float rotX = (float)wrenGetSlotDouble(vm, 2);
        float rotY = (float)wrenGetSlotDouble(vm, 3);
        float rotZ = (float)wrenGetSlotDouble(vm, 4);
        int rotationOrder = (int)wrenGetSlotDouble(vm, 5);

        CAM::SET_CAM_ROT(cam, rotX, rotY, rotZ, rotationOrder);
    }

    static void WREN_CAM_SET_CAM_FOV(WrenVM* vm)
    {
        Cam cam = (Cam)wrenGetSlotDouble(vm, 1);
        float fieldOfView = (float)wrenGetSlotDouble(vm, 2);

        CAM::SET_CAM_FOV(cam, fieldOfView);
    }

    static void WREN_CAM_SET_CAM_NEAR_CLIP(WrenVM* vm)
    {
        Cam cam = (Cam)wrenGetSlotDouble(vm, 1);
        float nearClip = (float)wrenGetSlotDouble(vm, 2);

        CAM::SET_CAM_NEAR_CLIP(cam, nearClip);
    }

    static void WREN_CAM_SET_CAM_FAR_CLIP(WrenVM* vm)
    {
        Cam cam = (Cam)wrenGetSlotDouble(vm, 1);
        float farClip = (float)wrenGetSlotDouble(vm, 2);

        CAM::SET_CAM_FAR_CLIP(cam, farClip);
    }

    static void WREN_CAM_FORCE_CAM_FAR_CLIP(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        CAM::FORCE_CAM_FAR_CLIP(p0, p1);
    }

    static void WREN_CAM_SET_CAM_MOTION_BLUR_STRENGTH(WrenVM* vm)
    {
        Cam cam = (Cam)wrenGetSlotDouble(vm, 1);
        float strength = (float)wrenGetSlotDouble(vm, 2);

        CAM::SET_CAM_MOTION_BLUR_STRENGTH(cam, strength);
    }

    static void WREN_CAM_SET_CAM_NEAR_DOF(WrenVM* vm)
    {
        Cam cam = (Cam)wrenGetSlotDouble(vm, 1);
        float nearDOF = (float)wrenGetSlotDouble(vm, 2);

        CAM::SET_CAM_NEAR_DOF(cam, nearDOF);
    }

    static void WREN_CAM_SET_CAM_FAR_DOF(WrenVM* vm)
    {
        Cam cam = (Cam)wrenGetSlotDouble(vm, 1);
        float farDOF = (float)wrenGetSlotDouble(vm, 2);

        CAM::SET_CAM_FAR_DOF(cam, farDOF);
    }

    static void WREN_CAM_SET_CAM_DOF_STRENGTH(WrenVM* vm)
    {
        Cam cam = (Cam)wrenGetSlotDouble(vm, 1);
        float dofStrength = (float)wrenGetSlotDouble(vm, 2);

        CAM::SET_CAM_DOF_STRENGTH(cam, dofStrength);
    }

    static void WREN_CAM_SET_CAM_DOF_PLANES(WrenVM* vm)
    {
        Cam cam = (Cam)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);
        float p2 = (float)wrenGetSlotDouble(vm, 3);
        float p3 = (float)wrenGetSlotDouble(vm, 4);
        float p4 = (float)wrenGetSlotDouble(vm, 5);

        CAM::SET_CAM_DOF_PLANES(cam, p1, p2, p3, p4);
    }

    static void WREN_CAM_SET_CAM_USE_SHALLOW_DOF_MODE(WrenVM* vm)
    {
        Cam cam = (Cam)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        CAM::SET_CAM_USE_SHALLOW_DOF_MODE(cam, toggle);
    }

    static void WREN_CAM_SET_USE_HI_DOF(WrenVM* vm)
    {

        CAM::SET_USE_HI_DOF();
    }

    static void WREN_CAM_SET_USE_HI_DOF_ON_SYNCED_SCENE_THIS_UPDATE(WrenVM* vm)
    {

        CAM::SET_USE_HI_DOF_ON_SYNCED_SCENE_THIS_UPDATE();
    }

    static void WREN_CAM_SET_CAM_DOF_OVERRIDDEN_FOCUS_DISTANCE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);

        CAM::SET_CAM_DOF_OVERRIDDEN_FOCUS_DISTANCE(p0, p1);
    }

    static void WREN_CAM_SET_CAM_DOF_OVERRIDDEN_FOCUS_DISTANCE_BLEND_LEVEL(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);

        CAM::SET_CAM_DOF_OVERRIDDEN_FOCUS_DISTANCE_BLEND_LEVEL(p0, p1);
    }

    static void WREN_CAM_SET_CAM_DOF_FNUMBER_OF_LENS(WrenVM* vm)
    {
        Cam camera = (Cam)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);

        CAM::SET_CAM_DOF_FNUMBER_OF_LENS(camera, p1);
    }

    static void WREN_CAM_SET_CAM_DOF_FOCAL_LENGTH_MULTIPLIER(WrenVM* vm)
    {
        Cam camera = (Cam)wrenGetSlotDouble(vm, 1);
        float multiplier = (float)wrenGetSlotDouble(vm, 2);

        CAM::SET_CAM_DOF_FOCAL_LENGTH_MULTIPLIER(camera, multiplier);
    }

    static void WREN_CAM_SET_CAM_DOF_FOCUS_DISTANCE_BIAS(WrenVM* vm)
    {
        Cam camera = (Cam)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);

        CAM::SET_CAM_DOF_FOCUS_DISTANCE_BIAS(camera, p1);
    }

    static void WREN_CAM_SET_CAM_DOF_MAX_NEAR_IN_FOCUS_DISTANCE(WrenVM* vm)
    {
        Cam camera = (Cam)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);

        CAM::SET_CAM_DOF_MAX_NEAR_IN_FOCUS_DISTANCE(camera, p1);
    }

    static void WREN_CAM_SET_CAM_DOF_MAX_NEAR_IN_FOCUS_DISTANCE_BLEND_LEVEL(WrenVM* vm)
    {
        Cam camera = (Cam)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);

        CAM::SET_CAM_DOF_MAX_NEAR_IN_FOCUS_DISTANCE_BLEND_LEVEL(camera, p1);
    }

    static void WREN_CAM_ATTACH_CAM_TO_ENTITY(WrenVM* vm)
    {
        Cam cam = (Cam)wrenGetSlotDouble(vm, 1);
        Entity entity = (Entity)wrenGetSlotDouble(vm, 2);
        float xOffset = (float)wrenGetSlotDouble(vm, 3);
        float yOffset = (float)wrenGetSlotDouble(vm, 4);
        float zOffset = (float)wrenGetSlotDouble(vm, 5);
        BOOL isRelative = (BOOL)wrenGetSlotBool(vm, 6);

        CAM::ATTACH_CAM_TO_ENTITY(cam, entity, xOffset, yOffset, zOffset, isRelative);
    }

    static void WREN_CAM_ATTACH_CAM_TO_PED_BONE(WrenVM* vm)
    {
        Cam cam = (Cam)wrenGetSlotDouble(vm, 1);
        Ped ped = (Ped)wrenGetSlotDouble(vm, 2);
        int boneIndex = (int)wrenGetSlotDouble(vm, 3);
        float x = (float)wrenGetSlotDouble(vm, 4);
        float y = (float)wrenGetSlotDouble(vm, 5);
        float z = (float)wrenGetSlotDouble(vm, 6);
        BOOL heading = (BOOL)wrenGetSlotBool(vm, 7);

        CAM::ATTACH_CAM_TO_PED_BONE(cam, ped, boneIndex, x, y, z, heading);
    }

    static void WREN_CAM_HARD_ATTACH_CAM_TO_PED_BONE(WrenVM* vm)
    {
        Cam cam = (Cam)wrenGetSlotDouble(vm, 1);
        Ped ped = (Ped)wrenGetSlotDouble(vm, 2);
        int boneIndex = (int)wrenGetSlotDouble(vm, 3);
        float p3 = (float)wrenGetSlotDouble(vm, 4);
        float p4 = (float)wrenGetSlotDouble(vm, 5);
        float p5 = (float)wrenGetSlotDouble(vm, 6);
        float p6 = (float)wrenGetSlotDouble(vm, 7);
        float p7 = (float)wrenGetSlotDouble(vm, 8);
        float p8 = (float)wrenGetSlotDouble(vm, 9);
        BOOL p9 = (BOOL)wrenGetSlotBool(vm, 10);

        CAM::HARD_ATTACH_CAM_TO_PED_BONE(cam, ped, boneIndex, p3, p4, p5, p6, p7, p8, p9);
    }

    static void WREN_CAM_HARD_ATTACH_CAM_TO_ENTITY(WrenVM* vm)
    {
        Cam cam = (Cam)wrenGetSlotDouble(vm, 1);
        Entity entity = (Entity)wrenGetSlotDouble(vm, 2);
        float xRot = (float)wrenGetSlotDouble(vm, 3);
        float yRot = (float)wrenGetSlotDouble(vm, 4);
        float zRot = (float)wrenGetSlotDouble(vm, 5);
        float xOffset = (float)wrenGetSlotDouble(vm, 6);
        float yOffset = (float)wrenGetSlotDouble(vm, 7);
        float zOffset = (float)wrenGetSlotDouble(vm, 8);
        BOOL isRelative = (BOOL)wrenGetSlotBool(vm, 9);

        CAM::HARD_ATTACH_CAM_TO_ENTITY(cam, entity, xRot, yRot, zRot, xOffset, yOffset, zOffset, isRelative);
    }

    static void WREN_CAM_ATTACH_CAM_TO_VEHICLE_BONE(WrenVM* vm)
    {
        Cam cam = (Cam)wrenGetSlotDouble(vm, 1);
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 2);
        int boneIndex = (int)wrenGetSlotDouble(vm, 3);
        BOOL relativeRotation = (BOOL)wrenGetSlotBool(vm, 4);
        float rotX = (float)wrenGetSlotDouble(vm, 5);
        float rotY = (float)wrenGetSlotDouble(vm, 6);
        float rotZ = (float)wrenGetSlotDouble(vm, 7);
        float offsetX = (float)wrenGetSlotDouble(vm, 8);
        float offsetY = (float)wrenGetSlotDouble(vm, 9);
        float offsetZ = (float)wrenGetSlotDouble(vm, 10);
        BOOL fixedDirection = (BOOL)wrenGetSlotBool(vm, 11);

        CAM::ATTACH_CAM_TO_VEHICLE_BONE(cam, vehicle, boneIndex, relativeRotation, rotX, rotY, rotZ, offsetX, offsetY, offsetZ, fixedDirection);
    }

    static void WREN_CAM_DETACH_CAM(WrenVM* vm)
    {
        Cam cam = (Cam)wrenGetSlotDouble(vm, 1);

        CAM::DETACH_CAM(cam);
    }

    static void WREN_CAM_SET_CAM_INHERIT_ROLL_VEHICLE(WrenVM* vm)
    {
        Cam cam = (Cam)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        CAM::SET_CAM_INHERIT_ROLL_VEHICLE(cam, p1);
    }

    static void WREN_CAM_POINT_CAM_AT_COORD(WrenVM* vm)
    {
        Cam cam = (Cam)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);

        CAM::POINT_CAM_AT_COORD(cam, x, y, z);
    }

    static void WREN_CAM_POINT_CAM_AT_ENTITY(WrenVM* vm)
    {
        Cam cam = (Cam)wrenGetSlotDouble(vm, 1);
        Entity entity = (Entity)wrenGetSlotDouble(vm, 2);
        float p2 = (float)wrenGetSlotDouble(vm, 3);
        float p3 = (float)wrenGetSlotDouble(vm, 4);
        float p4 = (float)wrenGetSlotDouble(vm, 5);
        BOOL p5 = (BOOL)wrenGetSlotBool(vm, 6);

        CAM::POINT_CAM_AT_ENTITY(cam, entity, p2, p3, p4, p5);
    }

    static void WREN_CAM_POINT_CAM_AT_PED_BONE(WrenVM* vm)
    {
        Cam cam = (Cam)wrenGetSlotDouble(vm, 1);
        Ped ped = (Ped)wrenGetSlotDouble(vm, 2);
        int boneIndex = (int)wrenGetSlotDouble(vm, 3);
        float x = (float)wrenGetSlotDouble(vm, 4);
        float y = (float)wrenGetSlotDouble(vm, 5);
        float z = (float)wrenGetSlotDouble(vm, 6);
        BOOL p6 = (BOOL)wrenGetSlotBool(vm, 7);

        CAM::POINT_CAM_AT_PED_BONE(cam, ped, boneIndex, x, y, z, p6);
    }

    static void WREN_CAM_STOP_CAM_POINTING(WrenVM* vm)
    {
        Cam cam = (Cam)wrenGetSlotDouble(vm, 1);

        CAM::STOP_CAM_POINTING(cam);
    }

    static void WREN_CAM_SET_CAM_AFFECTS_AIMING(WrenVM* vm)
    {
        Cam cam = (Cam)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        CAM::SET_CAM_AFFECTS_AIMING(cam, toggle);
    }

    static void WREN_CAM_SET_CAM_CONTROLS_MINI_MAP_HEADING(WrenVM* vm)
    {
        Cam cam = (Cam)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        CAM::SET_CAM_CONTROLS_MINI_MAP_HEADING(cam, toggle);
    }

    static void WREN_CAM_SET_CAM_IS_INSIDE_VEHICLE(WrenVM* vm)
    {
        Cam cam = (Cam)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        CAM::SET_CAM_IS_INSIDE_VEHICLE(cam, toggle);
    }

    static void WREN_CAM_ALLOW_MOTION_BLUR_DECAY(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        CAM::ALLOW_MOTION_BLUR_DECAY(p0, p1);
    }

    static void WREN_CAM_SET_CAM_DEBUG_NAME(WrenVM* vm)
    {
        Cam camera = (Cam)wrenGetSlotDouble(vm, 1);
        const char* name = wrenGetSlotString(vm, 2);

        CAM::SET_CAM_DEBUG_NAME(camera, name);
    }

    static void WREN_CAM_GET_DEBUG_CAM(WrenVM* vm)
    {

        Cam res = CAM::GET_DEBUG_CAM();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_CAM_ADD_CAM_SPLINE_NODE(WrenVM* vm)
    {
        Cam camera = (Cam)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);
        float xRot = (float)wrenGetSlotDouble(vm, 5);
        float yRot = (float)wrenGetSlotDouble(vm, 6);
        float zRot = (float)wrenGetSlotDouble(vm, 7);
        int length = (int)wrenGetSlotDouble(vm, 8);
        int smoothingStyle = (int)wrenGetSlotDouble(vm, 9);
        int rotationOrder = (int)wrenGetSlotDouble(vm, 10);

        CAM::ADD_CAM_SPLINE_NODE(camera, x, y, z, xRot, yRot, zRot, length, smoothingStyle, rotationOrder);
    }

    static void WREN_CAM_ADD_CAM_SPLINE_NODE_USING_CAMERA_FRAME(WrenVM* vm)
    {
        Cam cam = (Cam)wrenGetSlotDouble(vm, 1);
        Cam cam2 = (Cam)wrenGetSlotDouble(vm, 2);
        int length = (int)wrenGetSlotDouble(vm, 3);
        int p3 = (int)wrenGetSlotDouble(vm, 4);

        CAM::ADD_CAM_SPLINE_NODE_USING_CAMERA_FRAME(cam, cam2, length, p3);
    }

    static void WREN_CAM_ADD_CAM_SPLINE_NODE_USING_CAMERA(WrenVM* vm)
    {
        Cam cam = (Cam)wrenGetSlotDouble(vm, 1);
        Cam cam2 = (Cam)wrenGetSlotDouble(vm, 2);
        int length = (int)wrenGetSlotDouble(vm, 3);
        int p3 = (int)wrenGetSlotDouble(vm, 4);

        CAM::ADD_CAM_SPLINE_NODE_USING_CAMERA(cam, cam2, length, p3);
    }

    static void WREN_CAM_ADD_CAM_SPLINE_NODE_USING_GAMEPLAY_FRAME(WrenVM* vm)
    {
        Cam cam = (Cam)wrenGetSlotDouble(vm, 1);
        int length = (int)wrenGetSlotDouble(vm, 2);
        int p2 = (int)wrenGetSlotDouble(vm, 3);

        CAM::ADD_CAM_SPLINE_NODE_USING_GAMEPLAY_FRAME(cam, length, p2);
    }

    static void WREN_CAM_SET_CAM_SPLINE_PHASE(WrenVM* vm)
    {
        Cam cam = (Cam)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);

        CAM::SET_CAM_SPLINE_PHASE(cam, p1);
    }

    static void WREN_CAM_GET_CAM_SPLINE_PHASE(WrenVM* vm)
    {
        Cam cam = (Cam)wrenGetSlotDouble(vm, 1);

        float res = CAM::GET_CAM_SPLINE_PHASE(cam);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_CAM_GET_CAM_SPLINE_NODE_PHASE(WrenVM* vm)
    {
        Cam cam = (Cam)wrenGetSlotDouble(vm, 1);

        float res = CAM::GET_CAM_SPLINE_NODE_PHASE(cam);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_CAM_SET_CAM_SPLINE_DURATION(WrenVM* vm)
    {
        Cam cam = (Cam)wrenGetSlotDouble(vm, 1);
        int timeDuration = (int)wrenGetSlotDouble(vm, 2);

        CAM::SET_CAM_SPLINE_DURATION(cam, timeDuration);
    }

    static void WREN_CAM_SET_CAM_SPLINE_SMOOTHING_STYLE(WrenVM* vm)
    {
        Cam cam = (Cam)wrenGetSlotDouble(vm, 1);
        int smoothingStyle = (int)wrenGetSlotDouble(vm, 2);

        CAM::SET_CAM_SPLINE_SMOOTHING_STYLE(cam, smoothingStyle);
    }

    static void WREN_CAM_GET_CAM_SPLINE_NODE_INDEX(WrenVM* vm)
    {
        Cam cam = (Cam)wrenGetSlotDouble(vm, 1);

        int res = CAM::GET_CAM_SPLINE_NODE_INDEX(cam);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_CAM_SET_CAM_SPLINE_NODE_EASE(WrenVM* vm)
    {
        Cam cam = (Cam)wrenGetSlotDouble(vm, 1);
        int easingFunction = (int)wrenGetSlotDouble(vm, 2);
        int p2 = (int)wrenGetSlotDouble(vm, 3);
        float p3 = (float)wrenGetSlotDouble(vm, 4);

        CAM::SET_CAM_SPLINE_NODE_EASE(cam, easingFunction, p2, p3);
    }

    static void WREN_CAM_SET_CAM_SPLINE_NODE_VELOCITY_SCALE(WrenVM* vm)
    {
        Cam cam = (Cam)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);
        float scale = (float)wrenGetSlotDouble(vm, 3);

        CAM::SET_CAM_SPLINE_NODE_VELOCITY_SCALE(cam, p1, scale);
    }

    static void WREN_CAM_OVERRIDE_CAM_SPLINE_VELOCITY(WrenVM* vm)
    {
        Cam cam = (Cam)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);
        float p2 = (float)wrenGetSlotDouble(vm, 3);
        float p3 = (float)wrenGetSlotDouble(vm, 4);

        CAM::OVERRIDE_CAM_SPLINE_VELOCITY(cam, p1, p2, p3);
    }

    static void WREN_CAM_OVERRIDE_CAM_SPLINE_MOTION_BLUR(WrenVM* vm)
    {
        Cam cam = (Cam)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);
        float p2 = (float)wrenGetSlotDouble(vm, 3);
        float p3 = (float)wrenGetSlotDouble(vm, 4);

        CAM::OVERRIDE_CAM_SPLINE_MOTION_BLUR(cam, p1, p2, p3);
    }

    static void WREN_CAM_SET_CAM_SPLINE_NODE_EXTRA_FLAGS(WrenVM* vm)
    {
        Cam cam = (Cam)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);
        int flags = (int)wrenGetSlotDouble(vm, 3);

        CAM::SET_CAM_SPLINE_NODE_EXTRA_FLAGS(cam, p1, flags);
    }

    static void WREN_CAM_IS_CAM_SPLINE_PAUSED(WrenVM* vm)
    {
        Cam cam = (Cam)wrenGetSlotDouble(vm, 1);

        BOOL res = CAM::IS_CAM_SPLINE_PAUSED(cam);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_CAM_SET_CAM_ACTIVE_WITH_INTERP(WrenVM* vm)
    {
        Cam camTo = (Cam)wrenGetSlotDouble(vm, 1);
        Cam camFrom = (Cam)wrenGetSlotDouble(vm, 2);
        int duration = (int)wrenGetSlotDouble(vm, 3);
        int easeLocation = (int)wrenGetSlotDouble(vm, 4);
        int easeRotation = (int)wrenGetSlotDouble(vm, 5);

        CAM::SET_CAM_ACTIVE_WITH_INTERP(camTo, camFrom, duration, easeLocation, easeRotation);
    }

    static void WREN_CAM_IS_CAM_INTERPOLATING(WrenVM* vm)
    {
        Cam cam = (Cam)wrenGetSlotDouble(vm, 1);

        BOOL res = CAM::IS_CAM_INTERPOLATING(cam);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_CAM_SHAKE_CAM(WrenVM* vm)
    {
        Cam cam = (Cam)wrenGetSlotDouble(vm, 1);
        const char* type = wrenGetSlotString(vm, 2);
        float amplitude = (float)wrenGetSlotDouble(vm, 3);

        CAM::SHAKE_CAM(cam, type, amplitude);
    }

    static void WREN_CAM_ANIMATED_SHAKE_CAM(WrenVM* vm)
    {
        Cam cam = (Cam)wrenGetSlotDouble(vm, 1);
        const char* p1 = wrenGetSlotString(vm, 2);
        const char* p2 = wrenGetSlotString(vm, 3);
        const char* p3 = wrenGetSlotString(vm, 4);
        float amplitude = (float)wrenGetSlotDouble(vm, 5);

        CAM::ANIMATED_SHAKE_CAM(cam, p1, p2, p3, amplitude);
    }

    static void WREN_CAM_IS_CAM_SHAKING(WrenVM* vm)
    {
        Cam cam = (Cam)wrenGetSlotDouble(vm, 1);

        BOOL res = CAM::IS_CAM_SHAKING(cam);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_CAM_SET_CAM_SHAKE_AMPLITUDE(WrenVM* vm)
    {
        Cam cam = (Cam)wrenGetSlotDouble(vm, 1);
        float amplitude = (float)wrenGetSlotDouble(vm, 2);

        CAM::SET_CAM_SHAKE_AMPLITUDE(cam, amplitude);
    }

    static void WREN_CAM_STOP_CAM_SHAKING(WrenVM* vm)
    {
        Cam cam = (Cam)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        CAM::STOP_CAM_SHAKING(cam, p1);
    }

    static void WREN_CAM_SHAKE_SCRIPT_GLOBAL(WrenVM* vm)
    {
        const char* p0 = wrenGetSlotString(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);

        CAM::SHAKE_SCRIPT_GLOBAL(p0, p1);
    }

    static void WREN_CAM_ANIMATED_SHAKE_SCRIPT_GLOBAL(WrenVM* vm)
    {
        const char* p0 = wrenGetSlotString(vm, 1);
        const char* p1 = wrenGetSlotString(vm, 2);
        const char* p2 = wrenGetSlotString(vm, 3);
        float p3 = (float)wrenGetSlotDouble(vm, 4);

        CAM::ANIMATED_SHAKE_SCRIPT_GLOBAL(p0, p1, p2, p3);
    }

    static void WREN_CAM_IS_SCRIPT_GLOBAL_SHAKING(WrenVM* vm)
    {

        BOOL res = CAM::IS_SCRIPT_GLOBAL_SHAKING();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_CAM_STOP_SCRIPT_GLOBAL_SHAKING(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        CAM::STOP_SCRIPT_GLOBAL_SHAKING(p0);
    }

    static void WREN_CAM_TRIGGER_VEHICLE_PART_BROKEN_CAMERA_SHAKE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);
        float p2 = (float)wrenGetSlotDouble(vm, 3);

        CAM::TRIGGER_VEHICLE_PART_BROKEN_CAMERA_SHAKE(vehicle, p1, p2);
    }

    static void WREN_CAM_PLAY_CAM_ANIM(WrenVM* vm)
    {
        Cam cam = (Cam)wrenGetSlotDouble(vm, 1);
        const char* animName = wrenGetSlotString(vm, 2);
        const char* animDictionary = wrenGetSlotString(vm, 3);
        float x = (float)wrenGetSlotDouble(vm, 4);
        float y = (float)wrenGetSlotDouble(vm, 5);
        float z = (float)wrenGetSlotDouble(vm, 6);
        float xRot = (float)wrenGetSlotDouble(vm, 7);
        float yRot = (float)wrenGetSlotDouble(vm, 8);
        float zRot = (float)wrenGetSlotDouble(vm, 9);
        BOOL p9 = (BOOL)wrenGetSlotBool(vm, 10);
        int p10 = (int)wrenGetSlotDouble(vm, 11);

        BOOL res = CAM::PLAY_CAM_ANIM(cam, animName, animDictionary, x, y, z, xRot, yRot, zRot, p9, p10);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_CAM_IS_CAM_PLAYING_ANIM(WrenVM* vm)
    {
        Cam cam = (Cam)wrenGetSlotDouble(vm, 1);
        const char* animName = wrenGetSlotString(vm, 2);
        const char* animDictionary = wrenGetSlotString(vm, 3);

        BOOL res = CAM::IS_CAM_PLAYING_ANIM(cam, animName, animDictionary);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_CAM_SET_CAM_ANIM_CURRENT_PHASE(WrenVM* vm)
    {
        Cam cam = (Cam)wrenGetSlotDouble(vm, 1);
        float phase = (float)wrenGetSlotDouble(vm, 2);

        CAM::SET_CAM_ANIM_CURRENT_PHASE(cam, phase);
    }

    static void WREN_CAM_GET_CAM_ANIM_CURRENT_PHASE(WrenVM* vm)
    {
        Cam cam = (Cam)wrenGetSlotDouble(vm, 1);

        float res = CAM::GET_CAM_ANIM_CURRENT_PHASE(cam);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_CAM_PLAY_SYNCHRONIZED_CAM_ANIM(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        const char* animName = wrenGetSlotString(vm, 3);
        const char* animDictionary = wrenGetSlotString(vm, 4);

        BOOL res = CAM::PLAY_SYNCHRONIZED_CAM_ANIM(p0, p1, animName, animDictionary);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_CAM_SET_FLY_CAM_HORIZONTAL_RESPONSE(WrenVM* vm)
    {
        Cam cam = (Cam)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);
        float p2 = (float)wrenGetSlotDouble(vm, 3);
        float p3 = (float)wrenGetSlotDouble(vm, 4);

        CAM::SET_FLY_CAM_HORIZONTAL_RESPONSE(cam, p1, p2, p3);
    }

    static void WREN_CAM_SET_FLY_CAM_VERTICAL_RESPONSE(WrenVM* vm)
    {
        Cam cam = (Cam)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);
        float p2 = (float)wrenGetSlotDouble(vm, 3);
        float p3 = (float)wrenGetSlotDouble(vm, 4);

        CAM::SET_FLY_CAM_VERTICAL_RESPONSE(cam, p1, p2, p3);
    }

    static void WREN_CAM_SET_FLY_CAM_MAX_HEIGHT(WrenVM* vm)
    {
        Cam cam = (Cam)wrenGetSlotDouble(vm, 1);
        float height = (float)wrenGetSlotDouble(vm, 2);

        CAM::SET_FLY_CAM_MAX_HEIGHT(cam, height);
    }

    static void WREN_CAM_SET_FLY_CAM_COORD_AND_CONSTRAIN(WrenVM* vm)
    {
        Cam cam = (Cam)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);

        CAM::SET_FLY_CAM_COORD_AND_CONSTRAIN(cam, x, y, z);
    }

    static void WREN_CAM_SET_FLY_CAM_VERTICAL_CONTROLS_THIS_UPDATE(WrenVM* vm)
    {
        Cam cam = (Cam)wrenGetSlotDouble(vm, 1);

        CAM::SET_FLY_CAM_VERTICAL_CONTROLS_THIS_UPDATE(cam);
    }

    static void WREN_CAM_WAS_FLY_CAM_CONSTRAINED_ON_PREVIOUS_UDPATE(WrenVM* vm)
    {
        Cam cam = (Cam)wrenGetSlotDouble(vm, 1);

        BOOL res = CAM::WAS_FLY_CAM_CONSTRAINED_ON_PREVIOUS_UDPATE(cam);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_CAM_IS_SCREEN_FADED_OUT(WrenVM* vm)
    {

        BOOL res = CAM::IS_SCREEN_FADED_OUT();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_CAM_IS_SCREEN_FADED_IN(WrenVM* vm)
    {

        BOOL res = CAM::IS_SCREEN_FADED_IN();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_CAM_IS_SCREEN_FADING_OUT(WrenVM* vm)
    {

        BOOL res = CAM::IS_SCREEN_FADING_OUT();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_CAM_IS_SCREEN_FADING_IN(WrenVM* vm)
    {

        BOOL res = CAM::IS_SCREEN_FADING_IN();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_CAM_DO_SCREEN_FADE_IN(WrenVM* vm)
    {
        int duration = (int)wrenGetSlotDouble(vm, 1);

        CAM::DO_SCREEN_FADE_IN(duration);
    }

    static void WREN_CAM_DO_SCREEN_FADE_OUT(WrenVM* vm)
    {
        int duration = (int)wrenGetSlotDouble(vm, 1);

        CAM::DO_SCREEN_FADE_OUT(duration);
    }

    static void WREN_CAM_SET_WIDESCREEN_BORDERS(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);

        CAM::SET_WIDESCREEN_BORDERS(p0, p1);
    }

    static void WREN_CAM_ARE_WIDESCREEN_BORDERS_ACTIVE(WrenVM* vm)
    {

        BOOL res = CAM::ARE_WIDESCREEN_BORDERS_ACTIVE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_CAM_GET_GAMEPLAY_CAM_COORD(WrenVM* vm)
    {

        Vector3 res = CAM::GET_GAMEPLAY_CAM_COORD();

        wrenEnsureSlots(vm, 1);

        wrenGetVariable(vm, "natives", "Vector3", 0);
        Vector3* wren_res = (Vector3*)wrenSetSlotNewForeign(vm, 0, 0, sizeof(Vector3));
        wren_res->x = res.x;
        wren_res->y = res.y;
        wren_res->z = res.z;
    }

    static void WREN_CAM_GET_GAMEPLAY_CAM_ROT(WrenVM* vm)
    {
        int rotationOrder = (int)wrenGetSlotDouble(vm, 1);

        Vector3 res = CAM::GET_GAMEPLAY_CAM_ROT(rotationOrder);

        wrenEnsureSlots(vm, 1);

        wrenGetVariable(vm, "natives", "Vector3", 0);
        Vector3* wren_res = (Vector3*)wrenSetSlotNewForeign(vm, 0, 0, sizeof(Vector3));
        wren_res->x = res.x;
        wren_res->y = res.y;
        wren_res->z = res.z;
    }

    static void WREN_CAM_GET_GAMEPLAY_CAM_FOV(WrenVM* vm)
    {

        float res = CAM::GET_GAMEPLAY_CAM_FOV();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_CAM_SET_GAMEPLAY_CAM_MOTION_BLUR_SCALING_THIS_UPDATE(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);

        CAM::SET_GAMEPLAY_CAM_MOTION_BLUR_SCALING_THIS_UPDATE(p0);
    }

    static void WREN_CAM_SET_GAMEPLAY_CAM_MAX_MOTION_BLUR_STRENGTH_THIS_UPDATE(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);

        CAM::SET_GAMEPLAY_CAM_MAX_MOTION_BLUR_STRENGTH_THIS_UPDATE(p0);
    }

    static void WREN_CAM_GET_GAMEPLAY_CAM_RELATIVE_HEADING(WrenVM* vm)
    {

        float res = CAM::GET_GAMEPLAY_CAM_RELATIVE_HEADING();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_CAM_SET_GAMEPLAY_CAM_RELATIVE_HEADING(WrenVM* vm)
    {
        float heading = (float)wrenGetSlotDouble(vm, 1);

        CAM::SET_GAMEPLAY_CAM_RELATIVE_HEADING(heading);
    }

    static void WREN_CAM_GET_GAMEPLAY_CAM_RELATIVE_PITCH(WrenVM* vm)
    {

        float res = CAM::GET_GAMEPLAY_CAM_RELATIVE_PITCH();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_CAM_SET_GAMEPLAY_CAM_RELATIVE_PITCH(WrenVM* vm)
    {
        float angle = (float)wrenGetSlotDouble(vm, 1);
        float scalingFactor = (float)wrenGetSlotDouble(vm, 2);

        CAM::SET_GAMEPLAY_CAM_RELATIVE_PITCH(angle, scalingFactor);
    }

    static void WREN_CAM_RESET_GAMEPLAY_CAM_FULL_ATTACH_PARENT_TRANSFORM_TIMER(WrenVM* vm)
    {

        CAM::RESET_GAMEPLAY_CAM_FULL_ATTACH_PARENT_TRANSFORM_TIMER();
    }

    static void WREN_CAM_FORCE_CAMERA_RELATIVE_HEADING_AND_PITCH(WrenVM* vm)
    {
        float roll = (float)wrenGetSlotDouble(vm, 1);
        float pitch = (float)wrenGetSlotDouble(vm, 2);
        float yaw = (float)wrenGetSlotDouble(vm, 3);

        CAM::FORCE_CAMERA_RELATIVE_HEADING_AND_PITCH(roll, pitch, yaw);
    }

    static void WREN_CAM_FORCE_BONNET_CAMERA_RELATIVE_HEADING_AND_PITCH(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);

        CAM::FORCE_BONNET_CAMERA_RELATIVE_HEADING_AND_PITCH(p0, p1);
    }

    static void WREN_CAM_SET_FIRST_PERSON_SHOOTER_CAMERA_HEADING(WrenVM* vm)
    {
        float yaw = (float)wrenGetSlotDouble(vm, 1);

        CAM::SET_FIRST_PERSON_SHOOTER_CAMERA_HEADING(yaw);
    }

    static void WREN_CAM_SET_FIRST_PERSON_SHOOTER_CAMERA_PITCH(WrenVM* vm)
    {
        float pitch = (float)wrenGetSlotDouble(vm, 1);

        CAM::SET_FIRST_PERSON_SHOOTER_CAMERA_PITCH(pitch);
    }

    static void WREN_CAM_SET_SCRIPTED_CAMERA_IS_FIRST_PERSON_THIS_FRAME(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        CAM::SET_SCRIPTED_CAMERA_IS_FIRST_PERSON_THIS_FRAME(p0);
    }

    static void WREN_CAM_SHAKE_GAMEPLAY_CAM(WrenVM* vm)
    {
        const char* shakeName = wrenGetSlotString(vm, 1);
        float intensity = (float)wrenGetSlotDouble(vm, 2);

        CAM::SHAKE_GAMEPLAY_CAM(shakeName, intensity);
    }

    static void WREN_CAM_IS_GAMEPLAY_CAM_SHAKING(WrenVM* vm)
    {

        BOOL res = CAM::IS_GAMEPLAY_CAM_SHAKING();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_CAM_SET_GAMEPLAY_CAM_SHAKE_AMPLITUDE(WrenVM* vm)
    {
        float amplitude = (float)wrenGetSlotDouble(vm, 1);

        CAM::SET_GAMEPLAY_CAM_SHAKE_AMPLITUDE(amplitude);
    }

    static void WREN_CAM_STOP_GAMEPLAY_CAM_SHAKING(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        CAM::STOP_GAMEPLAY_CAM_SHAKING(p0);
    }

    static void WREN_CAM_SET_GAMEPLAY_CAM_FOLLOW_PED_THIS_UPDATE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        CAM::SET_GAMEPLAY_CAM_FOLLOW_PED_THIS_UPDATE(ped);
    }

    static void WREN_CAM_IS_GAMEPLAY_CAM_RENDERING(WrenVM* vm)
    {

        BOOL res = CAM::IS_GAMEPLAY_CAM_RENDERING();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_CAM_IS_INTERPOLATING_FROM_SCRIPT_CAMS(WrenVM* vm)
    {

        BOOL res = CAM::IS_INTERPOLATING_FROM_SCRIPT_CAMS();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_CAM_IS_INTERPOLATING_TO_SCRIPT_CAMS(WrenVM* vm)
    {

        BOOL res = CAM::IS_INTERPOLATING_TO_SCRIPT_CAMS();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_CAM_SET_GAMEPLAY_CAM_ALTITUDE_FOV_SCALING_STATE(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        CAM::SET_GAMEPLAY_CAM_ALTITUDE_FOV_SCALING_STATE(p0);
    }

    static void WREN_CAM_DISABLE_GAMEPLAY_CAM_ALTITUDE_FOV_SCALING_THIS_UPDATE(WrenVM* vm)
    {

        CAM::DISABLE_GAMEPLAY_CAM_ALTITUDE_FOV_SCALING_THIS_UPDATE();
    }

    static void WREN_CAM_IS_GAMEPLAY_CAM_LOOKING_BEHIND(WrenVM* vm)
    {

        BOOL res = CAM::IS_GAMEPLAY_CAM_LOOKING_BEHIND();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_CAM_SET_GAMEPLAY_CAM_IGNORE_ENTITY_COLLISION_THIS_UPDATE(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        CAM::SET_GAMEPLAY_CAM_IGNORE_ENTITY_COLLISION_THIS_UPDATE(entity);
    }

    static void WREN_CAM_DISABLE_CAM_COLLISION_FOR_OBJECT(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        CAM::DISABLE_CAM_COLLISION_FOR_OBJECT(entity);
    }

    static void WREN_CAM_BYPASS_CAMERA_COLLISION_BUOYANCY_TEST_THIS_UPDATE(WrenVM* vm)
    {

        CAM::BYPASS_CAMERA_COLLISION_BUOYANCY_TEST_THIS_UPDATE();
    }

    static void WREN_CAM_SET_GAMEPLAY_CAM_ENTITY_TO_LIMIT_FOCUS_OVER_BOUNDING_SPHERE_THIS_UPDATE(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        CAM::SET_GAMEPLAY_CAM_ENTITY_TO_LIMIT_FOCUS_OVER_BOUNDING_SPHERE_THIS_UPDATE(entity);
    }

    static void WREN_CAM_DISABLE_FIRST_PERSON_CAMERA_WATER_CLIPPING_TEST_THIS_UPDATE(WrenVM* vm)
    {

        CAM::DISABLE_FIRST_PERSON_CAMERA_WATER_CLIPPING_TEST_THIS_UPDATE();
    }

    static void WREN_CAM_SET_FOLLOW_CAM_IGNORE_ATTACH_PARENT_MOVEMENT_THIS_UPDATE(WrenVM* vm)
    {

        CAM::SET_FOLLOW_CAM_IGNORE_ATTACH_PARENT_MOVEMENT_THIS_UPDATE();
    }

    static void WREN_CAM_IS_SPHERE_VISIBLE(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        float radius = (float)wrenGetSlotDouble(vm, 4);

        BOOL res = CAM::IS_SPHERE_VISIBLE(x, y, z, radius);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_CAM_IS_FOLLOW_PED_CAM_ACTIVE(WrenVM* vm)
    {

        BOOL res = CAM::IS_FOLLOW_PED_CAM_ACTIVE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_CAM_SET_FOLLOW_PED_CAM_THIS_UPDATE(WrenVM* vm)
    {
        const char* camName = wrenGetSlotString(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);

        BOOL res = CAM::SET_FOLLOW_PED_CAM_THIS_UPDATE(camName, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_CAM_USE_SCRIPT_CAM_FOR_AMBIENT_POPULATION_ORIGIN_THIS_FRAME(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        CAM::USE_SCRIPT_CAM_FOR_AMBIENT_POPULATION_ORIGIN_THIS_FRAME(p0, p1);
    }

    static void WREN_CAM_SET_FOLLOW_PED_CAM_LADDER_ALIGN_THIS_UPDATE(WrenVM* vm)
    {

        CAM::SET_FOLLOW_PED_CAM_LADDER_ALIGN_THIS_UPDATE();
    }

    static void WREN_CAM_SET_THIRD_PERSON_CAM_RELATIVE_HEADING_LIMITS_THIS_UPDATE(WrenVM* vm)
    {
        float minimum = (float)wrenGetSlotDouble(vm, 1);
        float maximum = (float)wrenGetSlotDouble(vm, 2);

        CAM::SET_THIRD_PERSON_CAM_RELATIVE_HEADING_LIMITS_THIS_UPDATE(minimum, maximum);
    }

    static void WREN_CAM_SET_THIRD_PERSON_CAM_RELATIVE_PITCH_LIMITS_THIS_UPDATE(WrenVM* vm)
    {
        float minimum = (float)wrenGetSlotDouble(vm, 1);
        float maximum = (float)wrenGetSlotDouble(vm, 2);

        CAM::SET_THIRD_PERSON_CAM_RELATIVE_PITCH_LIMITS_THIS_UPDATE(minimum, maximum);
    }

    static void WREN_CAM_SET_THIRD_PERSON_CAM_ORBIT_DISTANCE_LIMITS_THIS_UPDATE(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);
        float distance = (float)wrenGetSlotDouble(vm, 2);

        CAM::SET_THIRD_PERSON_CAM_ORBIT_DISTANCE_LIMITS_THIS_UPDATE(p0, distance);
    }

    static void WREN_CAM_SET_IN_VEHICLE_CAM_STATE_THIS_UPDATE(WrenVM* vm)
    {
        Vehicle p0 = (Vehicle)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);

        CAM::SET_IN_VEHICLE_CAM_STATE_THIS_UPDATE(p0, p1);
    }

    static void WREN_CAM_DISABLE_ON_FOOT_FIRST_PERSON_VIEW_THIS_UPDATE(WrenVM* vm)
    {

        CAM::DISABLE_ON_FOOT_FIRST_PERSON_VIEW_THIS_UPDATE();
    }

    static void WREN_CAM_DISABLE_FIRST_PERSON_FLASH_EFFECT_THIS_UPDATE(WrenVM* vm)
    {

        CAM::DISABLE_FIRST_PERSON_FLASH_EFFECT_THIS_UPDATE();
    }

    static void WREN_CAM_BLOCK_FIRST_PERSON_ORIENTATION_RESET_THIS_UPDATE(WrenVM* vm)
    {

        CAM::BLOCK_FIRST_PERSON_ORIENTATION_RESET_THIS_UPDATE();
    }

    static void WREN_CAM_GET_FOLLOW_PED_CAM_ZOOM_LEVEL(WrenVM* vm)
    {

        int res = CAM::GET_FOLLOW_PED_CAM_ZOOM_LEVEL();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_CAM_GET_FOLLOW_PED_CAM_VIEW_MODE(WrenVM* vm)
    {

        int res = CAM::GET_FOLLOW_PED_CAM_VIEW_MODE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_CAM_SET_FOLLOW_PED_CAM_VIEW_MODE(WrenVM* vm)
    {
        int viewMode = (int)wrenGetSlotDouble(vm, 1);

        CAM::SET_FOLLOW_PED_CAM_VIEW_MODE(viewMode);
    }

    static void WREN_CAM_IS_FOLLOW_VEHICLE_CAM_ACTIVE(WrenVM* vm)
    {

        BOOL res = CAM::IS_FOLLOW_VEHICLE_CAM_ACTIVE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_CAM_SET_FOLLOW_VEHICLE_CAM_HIGH_ANGLE_MODE_THIS_UPDATE(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        CAM::SET_FOLLOW_VEHICLE_CAM_HIGH_ANGLE_MODE_THIS_UPDATE(p0);
    }

    static void WREN_CAM_SET_FOLLOW_VEHICLE_CAM_HIGH_ANGLE_MODE_EVERY_UPDATE(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        CAM::SET_FOLLOW_VEHICLE_CAM_HIGH_ANGLE_MODE_EVERY_UPDATE(p0, p1);
    }

    static void WREN_CAM_SET_TABLE_GAMES_CAMERA_THIS_UPDATE(WrenVM* vm)
    {
        Hash hash = (Hash)wrenGetSlotDouble(vm, 1);

        BOOL res = CAM::SET_TABLE_GAMES_CAMERA_THIS_UPDATE(hash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_CAM_GET_FOLLOW_VEHICLE_CAM_ZOOM_LEVEL(WrenVM* vm)
    {

        int res = CAM::GET_FOLLOW_VEHICLE_CAM_ZOOM_LEVEL();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_CAM_SET_FOLLOW_VEHICLE_CAM_ZOOM_LEVEL(WrenVM* vm)
    {
        int zoomLevel = (int)wrenGetSlotDouble(vm, 1);

        CAM::SET_FOLLOW_VEHICLE_CAM_ZOOM_LEVEL(zoomLevel);
    }

    static void WREN_CAM_GET_FOLLOW_VEHICLE_CAM_VIEW_MODE(WrenVM* vm)
    {

        int res = CAM::GET_FOLLOW_VEHICLE_CAM_VIEW_MODE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_CAM_SET_FOLLOW_VEHICLE_CAM_VIEW_MODE(WrenVM* vm)
    {
        int viewMode = (int)wrenGetSlotDouble(vm, 1);

        CAM::SET_FOLLOW_VEHICLE_CAM_VIEW_MODE(viewMode);
    }

    static void WREN_CAM_GET_CAM_VIEW_MODE_FOR_CONTEXT(WrenVM* vm)
    {
        int context = (int)wrenGetSlotDouble(vm, 1);

        int res = CAM::GET_CAM_VIEW_MODE_FOR_CONTEXT(context);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_CAM_SET_CAM_VIEW_MODE_FOR_CONTEXT(WrenVM* vm)
    {
        int context = (int)wrenGetSlotDouble(vm, 1);
        int viewMode = (int)wrenGetSlotDouble(vm, 2);

        CAM::SET_CAM_VIEW_MODE_FOR_CONTEXT(context, viewMode);
    }

    static void WREN_CAM_GET_CAM_ACTIVE_VIEW_MODE_CONTEXT(WrenVM* vm)
    {

        int res = CAM::GET_CAM_ACTIVE_VIEW_MODE_CONTEXT();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_CAM_USE_VEHICLE_CAM_STUNT_SETTINGS_THIS_UPDATE(WrenVM* vm)
    {

        CAM::USE_VEHICLE_CAM_STUNT_SETTINGS_THIS_UPDATE();
    }

    static void WREN_CAM_USE_DEDICATED_STUNT_CAMERA_THIS_UPDATE(WrenVM* vm)
    {
        const char* camName = wrenGetSlotString(vm, 1);

        CAM::USE_DEDICATED_STUNT_CAMERA_THIS_UPDATE(camName);
    }

    static void WREN_CAM_FORCE_VEHICLE_CAM_STUNT_SETTINGS_THIS_UPDATE(WrenVM* vm)
    {

        CAM::FORCE_VEHICLE_CAM_STUNT_SETTINGS_THIS_UPDATE();
    }

    static void WREN_CAM_SET_FOLLOW_VEHICLE_CAM_SEAT_THIS_UPDATE(WrenVM* vm)
    {
        int seatIndex = (int)wrenGetSlotDouble(vm, 1);

        CAM::SET_FOLLOW_VEHICLE_CAM_SEAT_THIS_UPDATE(seatIndex);
    }

    static void WREN_CAM_IS_AIM_CAM_ACTIVE(WrenVM* vm)
    {

        BOOL res = CAM::IS_AIM_CAM_ACTIVE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_CAM_IS_AIM_CAM_ACTIVE_IN_ACCURATE_MODE(WrenVM* vm)
    {

        BOOL res = CAM::IS_AIM_CAM_ACTIVE_IN_ACCURATE_MODE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_CAM_IS_FIRST_PERSON_AIM_CAM_ACTIVE(WrenVM* vm)
    {

        BOOL res = CAM::IS_FIRST_PERSON_AIM_CAM_ACTIVE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_CAM_DISABLE_AIM_CAM_THIS_UPDATE(WrenVM* vm)
    {

        CAM::DISABLE_AIM_CAM_THIS_UPDATE();
    }

    static void WREN_CAM_GET_FIRST_PERSON_AIM_CAM_ZOOM_FACTOR(WrenVM* vm)
    {

        float res = CAM::GET_FIRST_PERSON_AIM_CAM_ZOOM_FACTOR();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_CAM_SET_FIRST_PERSON_AIM_CAM_ZOOM_FACTOR(WrenVM* vm)
    {
        float zoomFactor = (float)wrenGetSlotDouble(vm, 1);

        CAM::SET_FIRST_PERSON_AIM_CAM_ZOOM_FACTOR(zoomFactor);
    }

    static void WREN_CAM_SET_FIRST_PERSON_AIM_CAM_ZOOM_FACTOR_LIMITS_THIS_UPDATE(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);

        CAM::SET_FIRST_PERSON_AIM_CAM_ZOOM_FACTOR_LIMITS_THIS_UPDATE(p0, p1);
    }

    static void WREN_CAM_SET_FIRST_PERSON_AIM_CAM_RELATIVE_HEADING_LIMITS_THIS_UPDATE(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);

        CAM::SET_FIRST_PERSON_AIM_CAM_RELATIVE_HEADING_LIMITS_THIS_UPDATE(p0, p1);
    }

    static void WREN_CAM_SET_FIRST_PERSON_AIM_CAM_RELATIVE_PITCH_LIMITS_THIS_UPDATE(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);

        CAM::SET_FIRST_PERSON_AIM_CAM_RELATIVE_PITCH_LIMITS_THIS_UPDATE(p0, p1);
    }

    static void WREN_CAM_SET_FIRST_PERSON_AIM_CAM_NEAR_CLIP_THIS_UPDATE(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);

        CAM::SET_FIRST_PERSON_AIM_CAM_NEAR_CLIP_THIS_UPDATE(p0);
    }

    static void WREN_CAM_SET_THIRD_PERSON_AIM_CAM_NEAR_CLIP_THIS_UPDATE(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);

        CAM::SET_THIRD_PERSON_AIM_CAM_NEAR_CLIP_THIS_UPDATE(p0);
    }

    static void WREN_CAM_SET_ALLOW_CUSTOM_VEHICLE_DRIVE_BY_CAM_THIS_UPDATE(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        CAM::SET_ALLOW_CUSTOM_VEHICLE_DRIVE_BY_CAM_THIS_UPDATE(p0);
    }

    static void WREN_CAM_FORCE_TIGHTSPACE_CUSTOM_FRAMING_THIS_UPDATE(WrenVM* vm)
    {

        CAM::FORCE_TIGHTSPACE_CUSTOM_FRAMING_THIS_UPDATE();
    }

    static void WREN_CAM_GET_FINAL_RENDERED_CAM_COORD(WrenVM* vm)
    {

        Vector3 res = CAM::GET_FINAL_RENDERED_CAM_COORD();

        wrenEnsureSlots(vm, 1);

        wrenGetVariable(vm, "natives", "Vector3", 0);
        Vector3* wren_res = (Vector3*)wrenSetSlotNewForeign(vm, 0, 0, sizeof(Vector3));
        wren_res->x = res.x;
        wren_res->y = res.y;
        wren_res->z = res.z;
    }

    static void WREN_CAM_GET_FINAL_RENDERED_CAM_ROT(WrenVM* vm)
    {
        int rotationOrder = (int)wrenGetSlotDouble(vm, 1);

        Vector3 res = CAM::GET_FINAL_RENDERED_CAM_ROT(rotationOrder);

        wrenEnsureSlots(vm, 1);

        wrenGetVariable(vm, "natives", "Vector3", 0);
        Vector3* wren_res = (Vector3*)wrenSetSlotNewForeign(vm, 0, 0, sizeof(Vector3));
        wren_res->x = res.x;
        wren_res->y = res.y;
        wren_res->z = res.z;
    }

    static void WREN_CAM_GET_FINAL_RENDERED_REMOTE_PLAYER_CAM_ROT(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        int rotationOrder = (int)wrenGetSlotDouble(vm, 2);

        Vector3 res = CAM::GET_FINAL_RENDERED_REMOTE_PLAYER_CAM_ROT(player, rotationOrder);

        wrenEnsureSlots(vm, 1);

        wrenGetVariable(vm, "natives", "Vector3", 0);
        Vector3* wren_res = (Vector3*)wrenSetSlotNewForeign(vm, 0, 0, sizeof(Vector3));
        wren_res->x = res.x;
        wren_res->y = res.y;
        wren_res->z = res.z;
    }

    static void WREN_CAM_GET_FINAL_RENDERED_CAM_FOV(WrenVM* vm)
    {

        float res = CAM::GET_FINAL_RENDERED_CAM_FOV();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_CAM_GET_FINAL_RENDERED_REMOTE_PLAYER_CAM_FOV(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        float res = CAM::GET_FINAL_RENDERED_REMOTE_PLAYER_CAM_FOV(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_CAM_GET_FINAL_RENDERED_CAM_NEAR_CLIP(WrenVM* vm)
    {

        float res = CAM::GET_FINAL_RENDERED_CAM_NEAR_CLIP();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_CAM_GET_FINAL_RENDERED_CAM_FAR_CLIP(WrenVM* vm)
    {

        float res = CAM::GET_FINAL_RENDERED_CAM_FAR_CLIP();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_CAM_GET_FINAL_RENDERED_CAM_NEAR_DOF(WrenVM* vm)
    {

        float res = CAM::GET_FINAL_RENDERED_CAM_NEAR_DOF();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_CAM_GET_FINAL_RENDERED_CAM_FAR_DOF(WrenVM* vm)
    {

        float res = CAM::GET_FINAL_RENDERED_CAM_FAR_DOF();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_CAM_GET_FINAL_RENDERED_CAM_MOTION_BLUR_STRENGTH(WrenVM* vm)
    {

        float res = CAM::GET_FINAL_RENDERED_CAM_MOTION_BLUR_STRENGTH();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_CAM_SET_GAMEPLAY_COORD_HINT(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        int duration = (int)wrenGetSlotDouble(vm, 4);
        int blendOutDuration = (int)wrenGetSlotDouble(vm, 5);
        int blendInDuration = (int)wrenGetSlotDouble(vm, 6);
        int unk = (int)wrenGetSlotDouble(vm, 7);

        CAM::SET_GAMEPLAY_COORD_HINT(x, y, z, duration, blendOutDuration, blendInDuration, unk);
    }

    static void WREN_CAM_SET_GAMEPLAY_PED_HINT(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float x1 = (float)wrenGetSlotDouble(vm, 2);
        float y1 = (float)wrenGetSlotDouble(vm, 3);
        float z1 = (float)wrenGetSlotDouble(vm, 4);
        BOOL p4 = (BOOL)wrenGetSlotBool(vm, 5);
        int duration = (int)wrenGetSlotDouble(vm, 6);
        int blendOutDuration = (int)wrenGetSlotDouble(vm, 7);
        int blendInDuration = (int)wrenGetSlotDouble(vm, 8);

        CAM::SET_GAMEPLAY_PED_HINT(ped, x1, y1, z1, p4, duration, blendOutDuration, blendInDuration);
    }

    static void WREN_CAM_SET_GAMEPLAY_VEHICLE_HINT(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        float offsetX = (float)wrenGetSlotDouble(vm, 2);
        float offsetY = (float)wrenGetSlotDouble(vm, 3);
        float offsetZ = (float)wrenGetSlotDouble(vm, 4);
        BOOL p4 = (BOOL)wrenGetSlotBool(vm, 5);
        int time = (int)wrenGetSlotDouble(vm, 6);
        int easeInTime = (int)wrenGetSlotDouble(vm, 7);
        int easeOutTime = (int)wrenGetSlotDouble(vm, 8);

        CAM::SET_GAMEPLAY_VEHICLE_HINT(vehicle, offsetX, offsetY, offsetZ, p4, time, easeInTime, easeOutTime);
    }

    static void WREN_CAM_SET_GAMEPLAY_OBJECT_HINT(WrenVM* vm)
    {
        Object object = (Object)wrenGetSlotDouble(vm, 1);
        float xOffset = (float)wrenGetSlotDouble(vm, 2);
        float yOffset = (float)wrenGetSlotDouble(vm, 3);
        float zOffset = (float)wrenGetSlotDouble(vm, 4);
        BOOL p4 = (BOOL)wrenGetSlotBool(vm, 5);
        int time = (int)wrenGetSlotDouble(vm, 6);
        int easeInTime = (int)wrenGetSlotDouble(vm, 7);
        int easeOutTime = (int)wrenGetSlotDouble(vm, 8);

        CAM::SET_GAMEPLAY_OBJECT_HINT(object, xOffset, yOffset, zOffset, p4, time, easeInTime, easeOutTime);
    }

    static void WREN_CAM_SET_GAMEPLAY_ENTITY_HINT(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        float xOffset = (float)wrenGetSlotDouble(vm, 2);
        float yOffset = (float)wrenGetSlotDouble(vm, 3);
        float zOffset = (float)wrenGetSlotDouble(vm, 4);
        BOOL p4 = (BOOL)wrenGetSlotBool(vm, 5);
        int time = (int)wrenGetSlotDouble(vm, 6);
        int easeInTime = (int)wrenGetSlotDouble(vm, 7);
        int easeOutTime = (int)wrenGetSlotDouble(vm, 8);
        int p8 = (int)wrenGetSlotDouble(vm, 9);

        CAM::SET_GAMEPLAY_ENTITY_HINT(entity, xOffset, yOffset, zOffset, p4, time, easeInTime, easeOutTime, p8);
    }

    static void WREN_CAM_IS_GAMEPLAY_HINT_ACTIVE(WrenVM* vm)
    {

        BOOL res = CAM::IS_GAMEPLAY_HINT_ACTIVE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_CAM_STOP_GAMEPLAY_HINT(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        CAM::STOP_GAMEPLAY_HINT(p0);
    }

    static void WREN_CAM_STOP_GAMEPLAY_HINT_BEING_CANCELLED_THIS_UPDATE(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        CAM::STOP_GAMEPLAY_HINT_BEING_CANCELLED_THIS_UPDATE(p0);
    }

    static void WREN_CAM_STOP_CODE_GAMEPLAY_HINT(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        CAM::STOP_CODE_GAMEPLAY_HINT(p0);
    }

    static void WREN_CAM_IS_CODE_GAMEPLAY_HINT_ACTIVE(WrenVM* vm)
    {

        Any res = CAM::IS_CODE_GAMEPLAY_HINT_ACTIVE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_CAM_SET_GAMEPLAY_HINT_FOV(WrenVM* vm)
    {
        float FOV = (float)wrenGetSlotDouble(vm, 1);

        CAM::SET_GAMEPLAY_HINT_FOV(FOV);
    }

    static void WREN_CAM_SET_GAMEPLAY_HINT_FOLLOW_DISTANCE_SCALAR(WrenVM* vm)
    {
        float value = (float)wrenGetSlotDouble(vm, 1);

        CAM::SET_GAMEPLAY_HINT_FOLLOW_DISTANCE_SCALAR(value);
    }

    static void WREN_CAM_SET_GAMEPLAY_HINT_BASE_ORBIT_PITCH_OFFSET(WrenVM* vm)
    {
        float value = (float)wrenGetSlotDouble(vm, 1);

        CAM::SET_GAMEPLAY_HINT_BASE_ORBIT_PITCH_OFFSET(value);
    }

    static void WREN_CAM_SET_GAMEPLAY_HINT_CAMERA_RELATIVE_SIDE_OFFSET(WrenVM* vm)
    {
        float xOffset = (float)wrenGetSlotDouble(vm, 1);

        CAM::SET_GAMEPLAY_HINT_CAMERA_RELATIVE_SIDE_OFFSET(xOffset);
    }

    static void WREN_CAM_SET_GAMEPLAY_HINT_CAMERA_RELATIVE_VERTICAL_OFFSET(WrenVM* vm)
    {
        float yOffset = (float)wrenGetSlotDouble(vm, 1);

        CAM::SET_GAMEPLAY_HINT_CAMERA_RELATIVE_VERTICAL_OFFSET(yOffset);
    }

    static void WREN_CAM_SET_GAMEPLAY_HINT_CAMERA_BLEND_TO_FOLLOW_PED_MEDIUM_VIEW_MODE(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        CAM::SET_GAMEPLAY_HINT_CAMERA_BLEND_TO_FOLLOW_PED_MEDIUM_VIEW_MODE(toggle);
    }

    static void WREN_CAM_SET_CINEMATIC_BUTTON_ACTIVE(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        CAM::SET_CINEMATIC_BUTTON_ACTIVE(p0);
    }

    static void WREN_CAM_IS_CINEMATIC_CAM_RENDERING(WrenVM* vm)
    {

        BOOL res = CAM::IS_CINEMATIC_CAM_RENDERING();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_CAM_SHAKE_CINEMATIC_CAM(WrenVM* vm)
    {
        const char* p0 = wrenGetSlotString(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);

        CAM::SHAKE_CINEMATIC_CAM(p0, p1);
    }

    static void WREN_CAM_IS_CINEMATIC_CAM_SHAKING(WrenVM* vm)
    {

        BOOL res = CAM::IS_CINEMATIC_CAM_SHAKING();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_CAM_SET_CINEMATIC_CAM_SHAKE_AMPLITUDE(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);

        CAM::SET_CINEMATIC_CAM_SHAKE_AMPLITUDE(p0);
    }

    static void WREN_CAM_STOP_CINEMATIC_CAM_SHAKING(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        CAM::STOP_CINEMATIC_CAM_SHAKING(p0);
    }

    static void WREN_CAM_DISABLE_CINEMATIC_BONNET_CAMERA_THIS_UPDATE(WrenVM* vm)
    {

        CAM::DISABLE_CINEMATIC_BONNET_CAMERA_THIS_UPDATE();
    }

    static void WREN_CAM_DISABLE_CINEMATIC_VEHICLE_IDLE_MODE_THIS_UPDATE(WrenVM* vm)
    {

        CAM::DISABLE_CINEMATIC_VEHICLE_IDLE_MODE_THIS_UPDATE();
    }

    static void WREN_CAM_INVALIDATE_CINEMATIC_VEHICLE_IDLE_MODE(WrenVM* vm)
    {

        CAM::INVALIDATE_CINEMATIC_VEHICLE_IDLE_MODE();
    }

    static void WREN_CAM_INVALIDATE_IDLE_CAM(WrenVM* vm)
    {

        CAM::INVALIDATE_IDLE_CAM();
    }

    static void WREN_CAM_IS_CINEMATIC_IDLE_CAM_RENDERING(WrenVM* vm)
    {

        BOOL res = CAM::IS_CINEMATIC_IDLE_CAM_RENDERING();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_CAM_IS_CINEMATIC_FIRST_PERSON_VEHICLE_INTERIOR_CAM_RENDERING(WrenVM* vm)
    {

        BOOL res = CAM::IS_CINEMATIC_FIRST_PERSON_VEHICLE_INTERIOR_CAM_RENDERING();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_CAM_CREATE_CINEMATIC_SHOT(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Entity entity = (Entity)wrenGetSlotDouble(vm, 4);

        CAM::CREATE_CINEMATIC_SHOT(p0, p1, p2, entity);
    }

    static void WREN_CAM_IS_CINEMATIC_SHOT_ACTIVE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        BOOL res = CAM::IS_CINEMATIC_SHOT_ACTIVE(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_CAM_STOP_CINEMATIC_SHOT(WrenVM* vm)
    {
        Hash p0 = (Hash)wrenGetSlotDouble(vm, 1);

        CAM::STOP_CINEMATIC_SHOT(p0);
    }

    static void WREN_CAM_FORCE_CINEMATIC_RENDERING_THIS_UPDATE(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        CAM::FORCE_CINEMATIC_RENDERING_THIS_UPDATE(p0);
    }

    static void WREN_CAM_SET_CINEMATIC_NEWS_CHANNEL_ACTIVE_THIS_UPDATE(WrenVM* vm)
    {

        CAM::SET_CINEMATIC_NEWS_CHANNEL_ACTIVE_THIS_UPDATE();
    }

    static void WREN_CAM_SET_CINEMATIC_MODE_ACTIVE(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        CAM::SET_CINEMATIC_MODE_ACTIVE(toggle);
    }

    static void WREN_CAM_IS_IN_VEHICLE_MOBILE_PHONE_CAMERA_RENDERING(WrenVM* vm)
    {

        Any res = CAM::IS_IN_VEHICLE_MOBILE_PHONE_CAMERA_RENDERING();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_CAM_DISABLE_CINEMATIC_SLOW_MO_THIS_UPDATE(WrenVM* vm)
    {

        Any res = CAM::DISABLE_CINEMATIC_SLOW_MO_THIS_UPDATE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_CAM_IS_BONNET_CINEMATIC_CAM_RENDERING(WrenVM* vm)
    {

        BOOL res = CAM::IS_BONNET_CINEMATIC_CAM_RENDERING();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_CAM_IS_CINEMATIC_CAM_INPUT_ACTIVE(WrenVM* vm)
    {

        BOOL res = CAM::IS_CINEMATIC_CAM_INPUT_ACTIVE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_CAM_IGNORE_MENU_PREFERENCE_FOR_BONNET_CAMERA_THIS_UPDATE(WrenVM* vm)
    {

        CAM::IGNORE_MENU_PREFERENCE_FOR_BONNET_CAMERA_THIS_UPDATE();
    }

    static void WREN_CAM_BYPASS_CUTSCENE_CAM_RENDERING_THIS_UPDATE(WrenVM* vm)
    {

        CAM::BYPASS_CUTSCENE_CAM_RENDERING_THIS_UPDATE();
    }

    static void WREN_CAM_STOP_CUTSCENE_CAM_SHAKING(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        CAM::STOP_CUTSCENE_CAM_SHAKING(p0);
    }

    static void WREN_CAM_SET_CUTSCENE_CAM_FAR_CLIP_THIS_UPDATE(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);

        CAM::SET_CUTSCENE_CAM_FAR_CLIP_THIS_UPDATE(p0);
    }

    static void WREN_CAM_GET_FOCUS_PED_ON_SCREEN(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);
        float p2 = (float)wrenGetSlotDouble(vm, 3);
        float p3 = (float)wrenGetSlotDouble(vm, 4);
        float p4 = (float)wrenGetSlotDouble(vm, 5);
        float p5 = (float)wrenGetSlotDouble(vm, 6);
        float p6 = (float)wrenGetSlotDouble(vm, 7);
        int p7 = (int)wrenGetSlotDouble(vm, 8);
        int p8 = (int)wrenGetSlotDouble(vm, 9);

        Ped res = CAM::GET_FOCUS_PED_ON_SCREEN(p0, p1, p2, p3, p4, p5, p6, p7, p8);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_CAM_DISABLE_NEAR_CLIP_SCAN_THIS_UPDATE(WrenVM* vm)
    {

        CAM::DISABLE_NEAR_CLIP_SCAN_THIS_UPDATE();
    }

    static void WREN_CAM_SET_CAM_DEATH_FAIL_EFFECT_STATE(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);

        CAM::SET_CAM_DEATH_FAIL_EFFECT_STATE(p0);
    }

    static void WREN_CAM_SET_FIRST_PERSON_FLASH_EFFECT_TYPE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        CAM::SET_FIRST_PERSON_FLASH_EFFECT_TYPE(p0);
    }

    static void WREN_CAM_SET_FIRST_PERSON_FLASH_EFFECT_VEHICLE_MODEL_NAME(WrenVM* vm)
    {
        const char* vehicleName = wrenGetSlotString(vm, 1);

        CAM::SET_FIRST_PERSON_FLASH_EFFECT_VEHICLE_MODEL_NAME(vehicleName);
    }

    static void WREN_CAM_SET_FIRST_PERSON_FLASH_EFFECT_VEHICLE_MODEL_HASH(WrenVM* vm)
    {
        Hash vehicleModel = (Hash)wrenGetSlotDouble(vm, 1);

        CAM::SET_FIRST_PERSON_FLASH_EFFECT_VEHICLE_MODEL_HASH(vehicleModel);
    }

    static void WREN_CAM_IS_ALLOWED_INDEPENDENT_CAMERA_MODES(WrenVM* vm)
    {

        Any res = CAM::IS_ALLOWED_INDEPENDENT_CAMERA_MODES();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_CAM_CAMERA_PREVENT_COLLISION_SETTINGS_FOR_TRIPLEHEAD_IN_INTERIORS_THIS_UPDATE(WrenVM* vm)
    {

        CAM::CAMERA_PREVENT_COLLISION_SETTINGS_FOR_TRIPLEHEAD_IN_INTERIORS_THIS_UPDATE();
    }

    static void WREN_CAM_REPLAY_GET_MAX_DISTANCE_ALLOWED_FROM_PLAYER(WrenVM* vm)
    {

        float res = CAM::REPLAY_GET_MAX_DISTANCE_ALLOWED_FROM_PLAYER();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }


    static void WREN_CLOCK_SET_CLOCK_TIME(WrenVM* vm)
    {
        int hour = (int)wrenGetSlotDouble(vm, 1);
        int minute = (int)wrenGetSlotDouble(vm, 2);
        int second = (int)wrenGetSlotDouble(vm, 3);

        CLOCK::SET_CLOCK_TIME(hour, minute, second);
    }

    static void WREN_CLOCK_PAUSE_CLOCK(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        CLOCK::PAUSE_CLOCK(toggle);
    }

    static void WREN_CLOCK_ADVANCE_CLOCK_TIME_TO(WrenVM* vm)
    {
        int hour = (int)wrenGetSlotDouble(vm, 1);
        int minute = (int)wrenGetSlotDouble(vm, 2);
        int second = (int)wrenGetSlotDouble(vm, 3);

        CLOCK::ADVANCE_CLOCK_TIME_TO(hour, minute, second);
    }

    static void WREN_CLOCK_ADD_TO_CLOCK_TIME(WrenVM* vm)
    {
        int hours = (int)wrenGetSlotDouble(vm, 1);
        int minutes = (int)wrenGetSlotDouble(vm, 2);
        int seconds = (int)wrenGetSlotDouble(vm, 3);

        CLOCK::ADD_TO_CLOCK_TIME(hours, minutes, seconds);
    }

    static void WREN_CLOCK_GET_CLOCK_HOURS(WrenVM* vm)
    {

        int res = CLOCK::GET_CLOCK_HOURS();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_CLOCK_GET_CLOCK_MINUTES(WrenVM* vm)
    {

        int res = CLOCK::GET_CLOCK_MINUTES();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_CLOCK_GET_CLOCK_SECONDS(WrenVM* vm)
    {

        int res = CLOCK::GET_CLOCK_SECONDS();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_CLOCK_SET_CLOCK_DATE(WrenVM* vm)
    {
        int day = (int)wrenGetSlotDouble(vm, 1);
        int month = (int)wrenGetSlotDouble(vm, 2);
        int year = (int)wrenGetSlotDouble(vm, 3);

        CLOCK::SET_CLOCK_DATE(day, month, year);
    }

    static void WREN_CLOCK_GET_CLOCK_DAY_OF_WEEK(WrenVM* vm)
    {

        int res = CLOCK::GET_CLOCK_DAY_OF_WEEK();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_CLOCK_GET_CLOCK_DAY_OF_MONTH(WrenVM* vm)
    {

        int res = CLOCK::GET_CLOCK_DAY_OF_MONTH();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_CLOCK_GET_CLOCK_MONTH(WrenVM* vm)
    {

        int res = CLOCK::GET_CLOCK_MONTH();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_CLOCK_GET_CLOCK_YEAR(WrenVM* vm)
    {

        int res = CLOCK::GET_CLOCK_YEAR();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_CLOCK_GET_MILLISECONDS_PER_GAME_MINUTE(WrenVM* vm)
    {

        int res = CLOCK::GET_MILLISECONDS_PER_GAME_MINUTE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_CLOCK_GET_POSIX_TIME(WrenVM* vm)
    {
        int year;
        int month;
        int day;
        int hour;
        int minute;
        int second;

        CLOCK::GET_POSIX_TIME(&year, &month, &day, &hour, &minute, &second);

        wrenEnsureSlots(vm, 12);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, year);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, month);
        wrenInsertInList(vm, 0, 1, 2);

        wrenSetSlotDouble(vm, 3, day);
        wrenInsertInList(vm, 0, 2, 3);

        wrenSetSlotDouble(vm, 4, hour);
        wrenInsertInList(vm, 0, 3, 4);

        wrenSetSlotDouble(vm, 5, minute);
        wrenInsertInList(vm, 0, 4, 5);

        wrenSetSlotDouble(vm, 6, second);
        wrenInsertInList(vm, 0, 5, 6);

    }

    static void WREN_CLOCK_GET_UTC_TIME(WrenVM* vm)
    {
        int year;
        int month;
        int day;
        int hour;
        int minute;
        int second;

        CLOCK::GET_UTC_TIME(&year, &month, &day, &hour, &minute, &second);

        wrenEnsureSlots(vm, 12);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, year);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, month);
        wrenInsertInList(vm, 0, 1, 2);

        wrenSetSlotDouble(vm, 3, day);
        wrenInsertInList(vm, 0, 2, 3);

        wrenSetSlotDouble(vm, 4, hour);
        wrenInsertInList(vm, 0, 3, 4);

        wrenSetSlotDouble(vm, 5, minute);
        wrenInsertInList(vm, 0, 4, 5);

        wrenSetSlotDouble(vm, 6, second);
        wrenInsertInList(vm, 0, 5, 6);

    }

    static void WREN_CLOCK_GET_LOCAL_TIME(WrenVM* vm)
    {
        int year;
        int month;
        int day;
        int hour;
        int minute;
        int second;

        CLOCK::GET_LOCAL_TIME(&year, &month, &day, &hour, &minute, &second);

        wrenEnsureSlots(vm, 12);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, year);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, month);
        wrenInsertInList(vm, 0, 1, 2);

        wrenSetSlotDouble(vm, 3, day);
        wrenInsertInList(vm, 0, 2, 3);

        wrenSetSlotDouble(vm, 4, hour);
        wrenInsertInList(vm, 0, 3, 4);

        wrenSetSlotDouble(vm, 5, minute);
        wrenInsertInList(vm, 0, 4, 5);

        wrenSetSlotDouble(vm, 6, second);
        wrenInsertInList(vm, 0, 5, 6);

    }


    static void WREN_CUTSCENE_REQUEST_CUTSCENE(WrenVM* vm)
    {
        const char* cutsceneName = wrenGetSlotString(vm, 1);
        int flags = (int)wrenGetSlotDouble(vm, 2);

        CUTSCENE::REQUEST_CUTSCENE(cutsceneName, flags);
    }

    static void WREN_CUTSCENE_REQUEST_CUTSCENE_WITH_PLAYBACK_LIST(WrenVM* vm)
    {
        const char* cutsceneName = wrenGetSlotString(vm, 1);
        int playbackFlags = (int)wrenGetSlotDouble(vm, 2);
        int flags = (int)wrenGetSlotDouble(vm, 3);

        CUTSCENE::REQUEST_CUTSCENE_WITH_PLAYBACK_LIST(cutsceneName, playbackFlags, flags);
    }

    static void WREN_CUTSCENE_REMOVE_CUTSCENE(WrenVM* vm)
    {

        CUTSCENE::REMOVE_CUTSCENE();
    }

    static void WREN_CUTSCENE_HAS_CUTSCENE_LOADED(WrenVM* vm)
    {

        BOOL res = CUTSCENE::HAS_CUTSCENE_LOADED();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_CUTSCENE_HAS_THIS_CUTSCENE_LOADED(WrenVM* vm)
    {
        const char* cutsceneName = wrenGetSlotString(vm, 1);

        BOOL res = CUTSCENE::HAS_THIS_CUTSCENE_LOADED(cutsceneName);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_CUTSCENE_SET_SCRIPT_CAN_START_CUTSCENE(WrenVM* vm)
    {
        int threadId = (int)wrenGetSlotDouble(vm, 1);

        CUTSCENE::SET_SCRIPT_CAN_START_CUTSCENE(threadId);
    }

    static void WREN_CUTSCENE_CAN_REQUEST_ASSETS_FOR_CUTSCENE_ENTITY(WrenVM* vm)
    {

        BOOL res = CUTSCENE::CAN_REQUEST_ASSETS_FOR_CUTSCENE_ENTITY();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_CUTSCENE_IS_CUTSCENE_PLAYBACK_FLAG_SET(WrenVM* vm)
    {
        int flag = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = CUTSCENE::IS_CUTSCENE_PLAYBACK_FLAG_SET(flag);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_CUTSCENE_SET_CUTSCENE_ENTITY_STREAMING_FLAGS(WrenVM* vm)
    {
        const char* cutsceneEntName = wrenGetSlotString(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);
        int p2 = (int)wrenGetSlotDouble(vm, 3);

        CUTSCENE::SET_CUTSCENE_ENTITY_STREAMING_FLAGS(cutsceneEntName, p1, p2);
    }

    static void WREN_CUTSCENE_REQUEST_CUT_FILE(WrenVM* vm)
    {
        const char* cutsceneName = wrenGetSlotString(vm, 1);

        CUTSCENE::REQUEST_CUT_FILE(cutsceneName);
    }

    static void WREN_CUTSCENE_HAS_CUT_FILE_LOADED(WrenVM* vm)
    {
        const char* cutsceneName = wrenGetSlotString(vm, 1);

        BOOL res = CUTSCENE::HAS_CUT_FILE_LOADED(cutsceneName);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_CUTSCENE_REMOVE_CUT_FILE(WrenVM* vm)
    {
        const char* cutsceneName = wrenGetSlotString(vm, 1);

        CUTSCENE::REMOVE_CUT_FILE(cutsceneName);
    }

    static void WREN_CUTSCENE_GET_CUT_FILE_CONCAT_COUNT(WrenVM* vm)
    {
        const char* cutsceneName = wrenGetSlotString(vm, 1);

        int res = CUTSCENE::GET_CUT_FILE_CONCAT_COUNT(cutsceneName);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_CUTSCENE_START_CUTSCENE(WrenVM* vm)
    {
        int flags = (int)wrenGetSlotDouble(vm, 1);

        CUTSCENE::START_CUTSCENE(flags);
    }

    static void WREN_CUTSCENE_START_CUTSCENE_AT_COORDS(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        int flags = (int)wrenGetSlotDouble(vm, 4);

        CUTSCENE::START_CUTSCENE_AT_COORDS(x, y, z, flags);
    }

    static void WREN_CUTSCENE_STOP_CUTSCENE(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        CUTSCENE::STOP_CUTSCENE(p0);
    }

    static void WREN_CUTSCENE_STOP_CUTSCENE_IMMEDIATELY(WrenVM* vm)
    {

        CUTSCENE::STOP_CUTSCENE_IMMEDIATELY();
    }

    static void WREN_CUTSCENE_SET_CUTSCENE_ORIGIN(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        float p3 = (float)wrenGetSlotDouble(vm, 4);
        int p4 = (int)wrenGetSlotDouble(vm, 5);

        CUTSCENE::SET_CUTSCENE_ORIGIN(x, y, z, p3, p4);
    }

    static void WREN_CUTSCENE_SET_CUTSCENE_ORIGIN_AND_ORIENTATION(WrenVM* vm)
    {
        float x1 = (float)wrenGetSlotDouble(vm, 1);
        float y1 = (float)wrenGetSlotDouble(vm, 2);
        float z1 = (float)wrenGetSlotDouble(vm, 3);
        float x2 = (float)wrenGetSlotDouble(vm, 4);
        float y2 = (float)wrenGetSlotDouble(vm, 5);
        float z2 = (float)wrenGetSlotDouble(vm, 6);
        int p6 = (int)wrenGetSlotDouble(vm, 7);

        CUTSCENE::SET_CUTSCENE_ORIGIN_AND_ORIENTATION(x1, y1, z1, x2, y2, z2, p6);
    }

    static void WREN_CUTSCENE_GET_CUTSCENE_TIME(WrenVM* vm)
    {

        int res = CUTSCENE::GET_CUTSCENE_TIME();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_CUTSCENE_GET_CUTSCENE_TOTAL_DURATION(WrenVM* vm)
    {

        int res = CUTSCENE::GET_CUTSCENE_TOTAL_DURATION();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_CUTSCENE_GET_CUTSCENE_END_TIME(WrenVM* vm)
    {

        int res = CUTSCENE::GET_CUTSCENE_END_TIME();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_CUTSCENE_WAS_CUTSCENE_SKIPPED(WrenVM* vm)
    {

        BOOL res = CUTSCENE::WAS_CUTSCENE_SKIPPED();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_CUTSCENE_HAS_CUTSCENE_FINISHED(WrenVM* vm)
    {

        BOOL res = CUTSCENE::HAS_CUTSCENE_FINISHED();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_CUTSCENE_IS_CUTSCENE_ACTIVE(WrenVM* vm)
    {

        BOOL res = CUTSCENE::IS_CUTSCENE_ACTIVE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_CUTSCENE_IS_CUTSCENE_PLAYING(WrenVM* vm)
    {

        BOOL res = CUTSCENE::IS_CUTSCENE_PLAYING();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_CUTSCENE_GET_CUTSCENE_SECTION_PLAYING(WrenVM* vm)
    {

        int res = CUTSCENE::GET_CUTSCENE_SECTION_PLAYING();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_CUTSCENE_GET_ENTITY_INDEX_OF_CUTSCENE_ENTITY(WrenVM* vm)
    {
        const char* cutsceneEntName = wrenGetSlotString(vm, 1);
        Hash modelHash = (Hash)wrenGetSlotDouble(vm, 2);

        Entity res = CUTSCENE::GET_ENTITY_INDEX_OF_CUTSCENE_ENTITY(cutsceneEntName, modelHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_CUTSCENE_GET_CUTSCENE_CONCAT_SECTION_PLAYING(WrenVM* vm)
    {

        int res = CUTSCENE::GET_CUTSCENE_CONCAT_SECTION_PLAYING();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_CUTSCENE_IS_CUTSCENE_AUTHORIZED(WrenVM* vm)
    {
        const char* cutsceneName = wrenGetSlotString(vm, 1);

        BOOL res = CUTSCENE::IS_CUTSCENE_AUTHORIZED(cutsceneName);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_CUTSCENE_DOES_CUTSCENE_HANDLE_EXIST(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        Any res = CUTSCENE::DOES_CUTSCENE_HANDLE_EXIST(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_CUTSCENE_REGISTER_ENTITY_FOR_CUTSCENE(WrenVM* vm)
    {
        Ped cutscenePed = (Ped)wrenGetSlotDouble(vm, 1);
        const char* cutsceneEntName = wrenGetSlotString(vm, 2);
        int p2 = (int)wrenGetSlotDouble(vm, 3);
        Hash modelHash = (Hash)wrenGetSlotDouble(vm, 4);
        int p4 = (int)wrenGetSlotDouble(vm, 5);

        CUTSCENE::REGISTER_ENTITY_FOR_CUTSCENE(cutscenePed, cutsceneEntName, p2, modelHash, p4);
    }

    static void WREN_CUTSCENE_GET_ENTITY_INDEX_OF_REGISTERED_ENTITY(WrenVM* vm)
    {
        const char* cutsceneEntName = wrenGetSlotString(vm, 1);
        Hash modelHash = (Hash)wrenGetSlotDouble(vm, 2);

        Entity res = CUTSCENE::GET_ENTITY_INDEX_OF_REGISTERED_ENTITY(cutsceneEntName, modelHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_CUTSCENE_SET_VEHICLE_MODEL_PLAYER_WILL_EXIT_SCENE(WrenVM* vm)
    {
        Hash modelHash = (Hash)wrenGetSlotDouble(vm, 1);

        CUTSCENE::SET_VEHICLE_MODEL_PLAYER_WILL_EXIT_SCENE(modelHash);
    }

    static void WREN_CUTSCENE_SET_CUTSCENE_TRIGGER_AREA(WrenVM* vm)
    {
        float x1 = (float)wrenGetSlotDouble(vm, 1);
        float y1 = (float)wrenGetSlotDouble(vm, 2);
        float z1 = (float)wrenGetSlotDouble(vm, 3);
        float x2 = (float)wrenGetSlotDouble(vm, 4);
        float y2 = (float)wrenGetSlotDouble(vm, 5);
        float z2 = (float)wrenGetSlotDouble(vm, 6);

        CUTSCENE::SET_CUTSCENE_TRIGGER_AREA(x1, y1, z1, x2, y2, z2);
    }

    static void WREN_CUTSCENE_CAN_SET_ENTER_STATE_FOR_REGISTERED_ENTITY(WrenVM* vm)
    {
        const char* cutsceneEntName = wrenGetSlotString(vm, 1);
        Hash modelHash = (Hash)wrenGetSlotDouble(vm, 2);

        BOOL res = CUTSCENE::CAN_SET_ENTER_STATE_FOR_REGISTERED_ENTITY(cutsceneEntName, modelHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_CUTSCENE_CAN_SET_EXIT_STATE_FOR_REGISTERED_ENTITY(WrenVM* vm)
    {
        const char* cutsceneEntName = wrenGetSlotString(vm, 1);
        Hash modelHash = (Hash)wrenGetSlotDouble(vm, 2);

        BOOL res = CUTSCENE::CAN_SET_EXIT_STATE_FOR_REGISTERED_ENTITY(cutsceneEntName, modelHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_CUTSCENE_CAN_SET_EXIT_STATE_FOR_CAMERA(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        BOOL res = CUTSCENE::CAN_SET_EXIT_STATE_FOR_CAMERA(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_CUTSCENE_SET_PAD_CAN_SHAKE_DURING_CUTSCENE(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        CUTSCENE::SET_PAD_CAN_SHAKE_DURING_CUTSCENE(toggle);
    }

    static void WREN_CUTSCENE_SET_CUTSCENE_FADE_VALUES(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);
        BOOL p3 = (BOOL)wrenGetSlotBool(vm, 4);

        CUTSCENE::SET_CUTSCENE_FADE_VALUES(p0, p1, p2, p3);
    }

    static void WREN_CUTSCENE_SET_CUTSCENE_MULTIHEAD_FADE(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);
        BOOL p3 = (BOOL)wrenGetSlotBool(vm, 4);

        CUTSCENE::SET_CUTSCENE_MULTIHEAD_FADE(p0, p1, p2, p3);
    }

    static void WREN_CUTSCENE_SET_CUTSCENE_MULTIHEAD_FADE_MANUAL(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        CUTSCENE::SET_CUTSCENE_MULTIHEAD_FADE_MANUAL(p0);
    }

    static void WREN_CUTSCENE_IS_MULTIHEAD_FADE_UP(WrenVM* vm)
    {

        int res = CUTSCENE::IS_MULTIHEAD_FADE_UP();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_CUTSCENE_NETWORK_SET_MOCAP_CUTSCENE_CAN_BE_SKIPPED(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        CUTSCENE::NETWORK_SET_MOCAP_CUTSCENE_CAN_BE_SKIPPED(p0);
    }

    static void WREN_CUTSCENE_SET_CAR_GENERATORS_CAN_UPDATE_DURING_CUTSCENE(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        CUTSCENE::SET_CAR_GENERATORS_CAN_UPDATE_DURING_CUTSCENE(p0);
    }

    static void WREN_CUTSCENE_CAN_USE_MOBILE_PHONE_DURING_CUTSCENE(WrenVM* vm)
    {

        Any res = CUTSCENE::CAN_USE_MOBILE_PHONE_DURING_CUTSCENE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_CUTSCENE_SET_CUTSCENE_CAN_BE_SKIPPED(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        CUTSCENE::SET_CUTSCENE_CAN_BE_SKIPPED(p0);
    }

    static void WREN_CUTSCENE_SET_CAN_DISPLAY_MINIMAP_DURING_CUTSCENE_THIS_UPDATE(WrenVM* vm)
    {

        CUTSCENE::SET_CAN_DISPLAY_MINIMAP_DURING_CUTSCENE_THIS_UPDATE();
    }

    static void WREN_CUTSCENE_SET_CUTSCENE_PED_COMPONENT_VARIATION(WrenVM* vm)
    {
        const char* cutsceneEntName = wrenGetSlotString(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);
        int p2 = (int)wrenGetSlotDouble(vm, 3);
        int p3 = (int)wrenGetSlotDouble(vm, 4);
        Hash modelHash = (Hash)wrenGetSlotDouble(vm, 5);

        CUTSCENE::SET_CUTSCENE_PED_COMPONENT_VARIATION(cutsceneEntName, p1, p2, p3, modelHash);
    }

    static void WREN_CUTSCENE_SET_CUTSCENE_PED_COMPONENT_VARIATION_FROM_PED(WrenVM* vm)
    {
        const char* cutsceneEntName = wrenGetSlotString(vm, 1);
        Ped ped = (Ped)wrenGetSlotDouble(vm, 2);
        Hash modelHash = (Hash)wrenGetSlotDouble(vm, 3);

        CUTSCENE::SET_CUTSCENE_PED_COMPONENT_VARIATION_FROM_PED(cutsceneEntName, ped, modelHash);
    }

    static void WREN_CUTSCENE_DOES_CUTSCENE_ENTITY_EXIST(WrenVM* vm)
    {
        const char* cutsceneEntName = wrenGetSlotString(vm, 1);
        Hash modelHash = (Hash)wrenGetSlotDouble(vm, 2);

        BOOL res = CUTSCENE::DOES_CUTSCENE_ENTITY_EXIST(cutsceneEntName, modelHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_CUTSCENE_SET_CUTSCENE_PED_PROP_VARIATION(WrenVM* vm)
    {
        const char* cutsceneEntName = wrenGetSlotString(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);
        int p2 = (int)wrenGetSlotDouble(vm, 3);
        int p3 = (int)wrenGetSlotDouble(vm, 4);
        Hash modelHash = (Hash)wrenGetSlotDouble(vm, 5);

        CUTSCENE::SET_CUTSCENE_PED_PROP_VARIATION(cutsceneEntName, p1, p2, p3, modelHash);
    }

    static void WREN_CUTSCENE_HAS_CUTSCENE_CUT_THIS_FRAME(WrenVM* vm)
    {

        BOOL res = CUTSCENE::HAS_CUTSCENE_CUT_THIS_FRAME();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }


    static void WREN_DATAFILE_DATAFILE_WATCH_REQUEST_ID(WrenVM* vm)
    {
        int id = (int)wrenGetSlotDouble(vm, 1);

        DATAFILE::DATAFILE_WATCH_REQUEST_ID(id);
    }

    static void WREN_DATAFILE_DATAFILE_CLEAR_WATCH_LIST(WrenVM* vm)
    {

        DATAFILE::DATAFILE_CLEAR_WATCH_LIST();
    }

    static void WREN_DATAFILE_DATAFILE_IS_VALID_REQUEST_ID(WrenVM* vm)
    {
        int index = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = DATAFILE::DATAFILE_IS_VALID_REQUEST_ID(index);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_DATAFILE_DATAFILE_HAS_LOADED_FILE_DATA(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        BOOL res = DATAFILE::DATAFILE_HAS_LOADED_FILE_DATA(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_DATAFILE_DATAFILE_HAS_VALID_FILE_DATA(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        BOOL res = DATAFILE::DATAFILE_HAS_VALID_FILE_DATA(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_DATAFILE_DATAFILE_SELECT_ACTIVE_FILE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        BOOL res = DATAFILE::DATAFILE_SELECT_ACTIVE_FILE(p0, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_DATAFILE_DATAFILE_DELETE_REQUESTED_FILE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        BOOL res = DATAFILE::DATAFILE_DELETE_REQUESTED_FILE(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_DATAFILE_UGC_CREATE_CONTENT(WrenVM* vm)
    {
        Any data;
        int dataCount = (int)wrenGetSlotDouble(vm, 1);
        const char* contentName = wrenGetSlotString(vm, 2);
        const char* description = wrenGetSlotString(vm, 3);
        const char* tagsCsv = wrenGetSlotString(vm, 4);
        const char* contentTypeName = wrenGetSlotString(vm, 5);
        BOOL publish = (BOOL)wrenGetSlotBool(vm, 6);
        Any p7 = (Any)wrenGetSlotDouble(vm, 7);

        BOOL res = DATAFILE::UGC_CREATE_CONTENT(&data, dataCount, contentName, description, tagsCsv, contentTypeName, publish, p7);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, data);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_DATAFILE_UGC_CREATE_MISSION(WrenVM* vm)
    {
        const char* contentName = wrenGetSlotString(vm, 1);
        const char* description = wrenGetSlotString(vm, 2);
        const char* tagsCsv = wrenGetSlotString(vm, 3);
        const char* contentTypeName = wrenGetSlotString(vm, 4);
        BOOL publish = (BOOL)wrenGetSlotBool(vm, 5);
        Any p5 = (Any)wrenGetSlotDouble(vm, 6);

        BOOL res = DATAFILE::UGC_CREATE_MISSION(contentName, description, tagsCsv, contentTypeName, publish, p5);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_DATAFILE_UGC_UPDATE_CONTENT(WrenVM* vm)
    {
        const char* contentId = wrenGetSlotString(vm, 1);
        Any data;
        int dataCount = (int)wrenGetSlotDouble(vm, 2);
        const char* contentName = wrenGetSlotString(vm, 3);
        const char* description = wrenGetSlotString(vm, 4);
        const char* tagsCsv = wrenGetSlotString(vm, 5);
        const char* contentTypeName = wrenGetSlotString(vm, 6);
        Any p7 = (Any)wrenGetSlotDouble(vm, 7);

        BOOL res = DATAFILE::UGC_UPDATE_CONTENT(contentId, &data, dataCount, contentName, description, tagsCsv, contentTypeName, p7);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, data);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_DATAFILE_UGC_UPDATE_MISSION(WrenVM* vm)
    {
        const char* contentId = wrenGetSlotString(vm, 1);
        const char* contentName = wrenGetSlotString(vm, 2);
        const char* description = wrenGetSlotString(vm, 3);
        const char* tagsCsv = wrenGetSlotString(vm, 4);
        const char* contentTypeName = wrenGetSlotString(vm, 5);
        Any p5 = (Any)wrenGetSlotDouble(vm, 6);

        BOOL res = DATAFILE::UGC_UPDATE_MISSION(contentId, contentName, description, tagsCsv, contentTypeName, p5);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_DATAFILE_UGC_SET_PLAYER_DATA(WrenVM* vm)
    {
        const char* contentId = wrenGetSlotString(vm, 1);
        float rating = (float)wrenGetSlotDouble(vm, 2);
        const char* contentTypeName = wrenGetSlotString(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        BOOL res = DATAFILE::UGC_SET_PLAYER_DATA(contentId, rating, contentTypeName, p3);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_DATAFILE_DATAFILE_SELECT_UGC_DATA(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        BOOL res = DATAFILE::DATAFILE_SELECT_UGC_DATA(p0, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_DATAFILE_DATAFILE_SELECT_UGC_STATS(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);

        BOOL res = DATAFILE::DATAFILE_SELECT_UGC_STATS(p0, p1, p2);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_DATAFILE_DATAFILE_SELECT_UGC_PLAYER_DATA(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        BOOL res = DATAFILE::DATAFILE_SELECT_UGC_PLAYER_DATA(p0, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_DATAFILE_DATAFILE_SELECT_CREATOR_STATS(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        BOOL res = DATAFILE::DATAFILE_SELECT_CREATOR_STATS(p0, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_DATAFILE_DATAFILE_LOAD_OFFLINE_UGC(WrenVM* vm)
    {
        const char* filename = wrenGetSlotString(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        BOOL res = DATAFILE::DATAFILE_LOAD_OFFLINE_UGC(filename, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_DATAFILE_DATAFILE_CREATE(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);

        DATAFILE::DATAFILE_CREATE(p0);
    }

    static void WREN_DATAFILE_DATAFILE_DELETE(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);

        DATAFILE::DATAFILE_DELETE(p0);
    }

    static void WREN_DATAFILE_DATAFILE_STORE_MISSION_HEADER(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);

        DATAFILE::DATAFILE_STORE_MISSION_HEADER(p0);
    }

    static void WREN_DATAFILE_DATAFILE_FLUSH_MISSION_HEADER(WrenVM* vm)
    {

        DATAFILE::DATAFILE_FLUSH_MISSION_HEADER();
    }

    static void WREN_DATAFILE_DATAFILE_GET_FILE_DICT(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);

        const char* res = DATAFILE::DATAFILE_GET_FILE_DICT(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotString(vm, 0, res);
    }

    static void WREN_DATAFILE_DATAFILE_START_SAVE_TO_CLOUD(WrenVM* vm)
    {
        const char* filename = wrenGetSlotString(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        BOOL res = DATAFILE::DATAFILE_START_SAVE_TO_CLOUD(filename, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_DATAFILE_DATAFILE_UPDATE_SAVE_TO_CLOUD(WrenVM* vm)
    {
        BOOL p0;

        BOOL res = DATAFILE::DATAFILE_UPDATE_SAVE_TO_CLOUD(&p0);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotBool(vm, 2, (bool)p0);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_DATAFILE_DATAFILE_IS_SAVE_PENDING(WrenVM* vm)
    {

        BOOL res = DATAFILE::DATAFILE_IS_SAVE_PENDING();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_DATAFILE_DATAFILE_LOAD_OFFLINE_UGC_FOR_ADDITIONAL_DATA_FILE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        Any res = DATAFILE::DATAFILE_LOAD_OFFLINE_UGC_FOR_ADDITIONAL_DATA_FILE(p0, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_DATAFILE_DATAFILE_DELETE_FOR_ADDITIONAL_DATA_FILE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        DATAFILE::DATAFILE_DELETE_FOR_ADDITIONAL_DATA_FILE(p0);
    }

    static void WREN_DATAFILE_DATAFILE_GET_FILE_DICT_FOR_ADDITIONAL_DATA_FILE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        Any res = DATAFILE::DATAFILE_GET_FILE_DICT_FOR_ADDITIONAL_DATA_FILE(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_DATAFILE_DATADICT_SET_BOOL(WrenVM* vm)
    {
        Any objectData;
        const char* key = wrenGetSlotString(vm, 1);
        BOOL value = (BOOL)wrenGetSlotBool(vm, 2);

        DATAFILE::DATADICT_SET_BOOL(&objectData, key, value);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_DATAFILE_DATADICT_SET_INT(WrenVM* vm)
    {
        Any objectData;
        const char* key = wrenGetSlotString(vm, 1);
        int value = (int)wrenGetSlotDouble(vm, 2);

        DATAFILE::DATADICT_SET_INT(&objectData, key, value);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_DATAFILE_DATADICT_SET_FLOAT(WrenVM* vm)
    {
        Any objectData;
        const char* key = wrenGetSlotString(vm, 1);
        float value = (float)wrenGetSlotDouble(vm, 2);

        DATAFILE::DATADICT_SET_FLOAT(&objectData, key, value);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_DATAFILE_DATADICT_SET_STRING(WrenVM* vm)
    {
        Any objectData;
        const char* key = wrenGetSlotString(vm, 1);
        const char* value = wrenGetSlotString(vm, 2);

        DATAFILE::DATADICT_SET_STRING(&objectData, key, value);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_DATAFILE_DATADICT_SET_VECTOR(WrenVM* vm)
    {
        Any objectData;
        const char* key = wrenGetSlotString(vm, 1);
        float valueX = (float)wrenGetSlotDouble(vm, 2);
        float valueY = (float)wrenGetSlotDouble(vm, 3);
        float valueZ = (float)wrenGetSlotDouble(vm, 4);

        DATAFILE::DATADICT_SET_VECTOR(&objectData, key, valueX, valueY, valueZ);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_DATAFILE_DATADICT_CREATE_DICT(WrenVM* vm)
    {
        Any objectData;
        const char* key = wrenGetSlotString(vm, 1);

        Any* res = DATAFILE::DATADICT_CREATE_DICT(&objectData, key);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, objectData);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_DATAFILE_DATADICT_CREATE_ARRAY(WrenVM* vm)
    {
        Any objectData;
        const char* key = wrenGetSlotString(vm, 1);

        Any* res = DATAFILE::DATADICT_CREATE_ARRAY(&objectData, key);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, objectData);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_DATAFILE_DATADICT_GET_BOOL(WrenVM* vm)
    {
        Any objectData;
        const char* key = wrenGetSlotString(vm, 1);

        BOOL res = DATAFILE::DATADICT_GET_BOOL(&objectData, key);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, objectData);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_DATAFILE_DATADICT_GET_INT(WrenVM* vm)
    {
        Any objectData;
        const char* key = wrenGetSlotString(vm, 1);

        int res = DATAFILE::DATADICT_GET_INT(&objectData, key);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, objectData);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_DATAFILE_DATADICT_GET_FLOAT(WrenVM* vm)
    {
        Any objectData;
        const char* key = wrenGetSlotString(vm, 1);

        float res = DATAFILE::DATADICT_GET_FLOAT(&objectData, key);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, objectData);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_DATAFILE_DATADICT_GET_STRING(WrenVM* vm)
    {
        Any objectData;
        const char* key = wrenGetSlotString(vm, 1);

        const char* res = DATAFILE::DATADICT_GET_STRING(&objectData, key);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotString(vm, 1, res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, objectData);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_DATAFILE_DATADICT_GET_VECTOR(WrenVM* vm)
    {
        Any objectData;
        const char* key = wrenGetSlotString(vm, 1);

        Vector3 res = DATAFILE::DATADICT_GET_VECTOR(&objectData, key);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenGetVariable(vm, "natives", "Vector3", 1);
        Vector3* wren_res = (Vector3*)wrenSetSlotNewForeign(vm, 2, 1, sizeof(Vector3));
        wren_res->x = res.x;
        wren_res->y = res.y;
        wren_res->z = res.z;
        wrenInsertInList(vm, 0, 0, 2);

        wrenSetSlotDouble(vm, 3, objectData);
        wrenInsertInList(vm, 0, 1, 3);

    }

    static void WREN_DATAFILE_DATADICT_GET_DICT(WrenVM* vm)
    {
        Any objectData;
        const char* key = wrenGetSlotString(vm, 1);

        Any* res = DATAFILE::DATADICT_GET_DICT(&objectData, key);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, objectData);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_DATAFILE_DATADICT_GET_ARRAY(WrenVM* vm)
    {
        Any objectData;
        const char* key = wrenGetSlotString(vm, 1);

        Any* res = DATAFILE::DATADICT_GET_ARRAY(&objectData, key);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, objectData);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_DATAFILE_DATADICT_GET_TYPE(WrenVM* vm)
    {
        Any objectData;
        const char* key = wrenGetSlotString(vm, 1);

        int res = DATAFILE::DATADICT_GET_TYPE(&objectData, key);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, objectData);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_DATAFILE_DATAARRAY_ADD_BOOL(WrenVM* vm)
    {
        Any arrayData;
        BOOL value = (BOOL)wrenGetSlotBool(vm, 1);

        DATAFILE::DATAARRAY_ADD_BOOL(&arrayData, value);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_DATAFILE_DATAARRAY_ADD_INT(WrenVM* vm)
    {
        Any arrayData;
        int value = (int)wrenGetSlotDouble(vm, 1);

        DATAFILE::DATAARRAY_ADD_INT(&arrayData, value);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_DATAFILE_DATAARRAY_ADD_FLOAT(WrenVM* vm)
    {
        Any arrayData;
        float value = (float)wrenGetSlotDouble(vm, 1);

        DATAFILE::DATAARRAY_ADD_FLOAT(&arrayData, value);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_DATAFILE_DATAARRAY_ADD_STRING(WrenVM* vm)
    {
        Any arrayData;
        const char* value = wrenGetSlotString(vm, 1);

        DATAFILE::DATAARRAY_ADD_STRING(&arrayData, value);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_DATAFILE_DATAARRAY_ADD_VECTOR(WrenVM* vm)
    {
        Any arrayData;
        float valueX = (float)wrenGetSlotDouble(vm, 1);
        float valueY = (float)wrenGetSlotDouble(vm, 2);
        float valueZ = (float)wrenGetSlotDouble(vm, 3);

        DATAFILE::DATAARRAY_ADD_VECTOR(&arrayData, valueX, valueY, valueZ);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_DATAFILE_DATAARRAY_ADD_DICT(WrenVM* vm)
    {
        Any arrayData;

        Any* res = DATAFILE::DATAARRAY_ADD_DICT(&arrayData);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, arrayData);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_DATAFILE_DATAARRAY_GET_BOOL(WrenVM* vm)
    {
        Any arrayData;
        int arrayIndex = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = DATAFILE::DATAARRAY_GET_BOOL(&arrayData, arrayIndex);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, arrayData);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_DATAFILE_DATAARRAY_GET_INT(WrenVM* vm)
    {
        Any arrayData;
        int arrayIndex = (int)wrenGetSlotDouble(vm, 1);

        int res = DATAFILE::DATAARRAY_GET_INT(&arrayData, arrayIndex);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, arrayData);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_DATAFILE_DATAARRAY_GET_FLOAT(WrenVM* vm)
    {
        Any arrayData;
        int arrayIndex = (int)wrenGetSlotDouble(vm, 1);

        float res = DATAFILE::DATAARRAY_GET_FLOAT(&arrayData, arrayIndex);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, arrayData);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_DATAFILE_DATAARRAY_GET_STRING(WrenVM* vm)
    {
        Any arrayData;
        int arrayIndex = (int)wrenGetSlotDouble(vm, 1);

        const char* res = DATAFILE::DATAARRAY_GET_STRING(&arrayData, arrayIndex);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotString(vm, 1, res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, arrayData);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_DATAFILE_DATAARRAY_GET_VECTOR(WrenVM* vm)
    {
        Any arrayData;
        int arrayIndex = (int)wrenGetSlotDouble(vm, 1);

        Vector3 res = DATAFILE::DATAARRAY_GET_VECTOR(&arrayData, arrayIndex);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenGetVariable(vm, "natives", "Vector3", 1);
        Vector3* wren_res = (Vector3*)wrenSetSlotNewForeign(vm, 2, 1, sizeof(Vector3));
        wren_res->x = res.x;
        wren_res->y = res.y;
        wren_res->z = res.z;
        wrenInsertInList(vm, 0, 0, 2);

        wrenSetSlotDouble(vm, 3, arrayData);
        wrenInsertInList(vm, 0, 1, 3);

    }

    static void WREN_DATAFILE_DATAARRAY_GET_DICT(WrenVM* vm)
    {
        Any arrayData;
        int arrayIndex = (int)wrenGetSlotDouble(vm, 1);

        Any* res = DATAFILE::DATAARRAY_GET_DICT(&arrayData, arrayIndex);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, arrayData);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_DATAFILE_DATAARRAY_GET_COUNT(WrenVM* vm)
    {
        Any arrayData;

        int res = DATAFILE::DATAARRAY_GET_COUNT(&arrayData);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, arrayData);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_DATAFILE_DATAARRAY_GET_TYPE(WrenVM* vm)
    {
        Any arrayData;
        int arrayIndex = (int)wrenGetSlotDouble(vm, 1);

        int res = DATAFILE::DATAARRAY_GET_TYPE(&arrayData, arrayIndex);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, arrayData);
        wrenInsertInList(vm, 0, 1, 2);

    }


    static void WREN_DECORATOR_DECOR_SET_TIME(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        const char* propertyName = wrenGetSlotString(vm, 2);
        int timestamp = (int)wrenGetSlotDouble(vm, 3);

        BOOL res = DECORATOR::DECOR_SET_TIME(entity, propertyName, timestamp);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_DECORATOR_DECOR_SET_BOOL(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        const char* propertyName = wrenGetSlotString(vm, 2);
        BOOL value = (BOOL)wrenGetSlotBool(vm, 3);

        BOOL res = DECORATOR::DECOR_SET_BOOL(entity, propertyName, value);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_DECORATOR_DECOR_SET_FLOAT(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        const char* propertyName = wrenGetSlotString(vm, 2);
        float value = (float)wrenGetSlotDouble(vm, 3);

        BOOL res = DECORATOR::DECOR_SET_FLOAT(entity, propertyName, value);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_DECORATOR_DECOR_SET_INT(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        const char* propertyName = wrenGetSlotString(vm, 2);
        int value = (int)wrenGetSlotDouble(vm, 3);

        BOOL res = DECORATOR::DECOR_SET_INT(entity, propertyName, value);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_DECORATOR_DECOR_GET_BOOL(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        const char* propertyName = wrenGetSlotString(vm, 2);

        BOOL res = DECORATOR::DECOR_GET_BOOL(entity, propertyName);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_DECORATOR_DECOR_GET_FLOAT(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        const char* propertyName = wrenGetSlotString(vm, 2);

        float res = DECORATOR::DECOR_GET_FLOAT(entity, propertyName);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_DECORATOR_DECOR_GET_INT(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        const char* propertyName = wrenGetSlotString(vm, 2);

        int res = DECORATOR::DECOR_GET_INT(entity, propertyName);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_DECORATOR_DECOR_EXIST_ON(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        const char* propertyName = wrenGetSlotString(vm, 2);

        BOOL res = DECORATOR::DECOR_EXIST_ON(entity, propertyName);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_DECORATOR_DECOR_REMOVE(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        const char* propertyName = wrenGetSlotString(vm, 2);

        BOOL res = DECORATOR::DECOR_REMOVE(entity, propertyName);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_DECORATOR_DECOR_REGISTER(WrenVM* vm)
    {
        const char* propertyName = wrenGetSlotString(vm, 1);
        int type = (int)wrenGetSlotDouble(vm, 2);

        DECORATOR::DECOR_REGISTER(propertyName, type);
    }

    static void WREN_DECORATOR_DECOR_IS_REGISTERED_AS_TYPE(WrenVM* vm)
    {
        const char* propertyName = wrenGetSlotString(vm, 1);
        int type = (int)wrenGetSlotDouble(vm, 2);

        BOOL res = DECORATOR::DECOR_IS_REGISTERED_AS_TYPE(propertyName, type);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_DECORATOR_DECOR_REGISTER_LOCK(WrenVM* vm)
    {

        DECORATOR::DECOR_REGISTER_LOCK();
    }


    static void WREN_DLC_ARE_ANY_CCS_PENDING(WrenVM* vm)
    {

        BOOL res = DLC::ARE_ANY_CCS_PENDING();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_DLC_IS_DLC_PRESENT(WrenVM* vm)
    {
        Hash dlcHash = (Hash)wrenGetSlotDouble(vm, 1);

        BOOL res = DLC::IS_DLC_PRESENT(dlcHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_DLC_DLC_CHECK_CLOUD_DATA_CORRECT(WrenVM* vm)
    {

        BOOL res = DLC::DLC_CHECK_CLOUD_DATA_CORRECT();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_DLC_GET_EXTRACONTENT_CLOUD_RESULT(WrenVM* vm)
    {

        BOOL res = DLC::GET_EXTRACONTENT_CLOUD_RESULT();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_DLC_DLC_CHECK_COMPAT_PACK_CONFIGURATION(WrenVM* vm)
    {

        BOOL res = DLC::DLC_CHECK_COMPAT_PACK_CONFIGURATION();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_DLC_GET_EVER_HAD_BAD_PACK_ORDER(WrenVM* vm)
    {

        BOOL res = DLC::GET_EVER_HAD_BAD_PACK_ORDER();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_DLC_GET_IS_LOADING_SCREEN_ACTIVE(WrenVM* vm)
    {

        BOOL res = DLC::GET_IS_LOADING_SCREEN_ACTIVE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_DLC_GET_IS_INITIAL_LOADING_SCREEN_ACTIVE(WrenVM* vm)
    {

        BOOL res = DLC::GET_IS_INITIAL_LOADING_SCREEN_ACTIVE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_DLC_HAS_CLOUD_REQUESTS_FINISHED(WrenVM* vm)
    {
        BOOL p0;
        Any unused = (Any)wrenGetSlotDouble(vm, 1);

        BOOL res = DLC::HAS_CLOUD_REQUESTS_FINISHED(&p0, unused);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotBool(vm, 2, (bool)p0);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_DLC_ON_ENTER_SP(WrenVM* vm)
    {

        DLC::ON_ENTER_SP();
    }

    static void WREN_DLC_ON_ENTER_MP(WrenVM* vm)
    {

        DLC::ON_ENTER_MP();
    }


    static void WREN_ENTITY_DOES_ENTITY_EXIST(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        BOOL res = ENTITY::DOES_ENTITY_EXIST(entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_ENTITY_DOES_ENTITY_BELONG_TO_THIS_SCRIPT(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        BOOL res = ENTITY::DOES_ENTITY_BELONG_TO_THIS_SCRIPT(entity, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_ENTITY_DOES_ENTITY_HAVE_DRAWABLE(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        BOOL res = ENTITY::DOES_ENTITY_HAVE_DRAWABLE(entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_ENTITY_DOES_ENTITY_HAVE_PHYSICS(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        BOOL res = ENTITY::DOES_ENTITY_HAVE_PHYSICS(entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_ENTITY_DOES_ENTITY_HAVE_SKELETON(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        BOOL res = ENTITY::DOES_ENTITY_HAVE_SKELETON(entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_ENTITY_DOES_ENTITY_HAVE_ANIM_DIRECTOR(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        BOOL res = ENTITY::DOES_ENTITY_HAVE_ANIM_DIRECTOR(entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_ENTITY_HAS_ENTITY_ANIM_FINISHED(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        const char* animDict = wrenGetSlotString(vm, 2);
        const char* animName = wrenGetSlotString(vm, 3);
        int p3 = (int)wrenGetSlotDouble(vm, 4);

        BOOL res = ENTITY::HAS_ENTITY_ANIM_FINISHED(entity, animDict, animName, p3);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_ENTITY_HAS_ENTITY_BEEN_DAMAGED_BY_ANY_OBJECT(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        BOOL res = ENTITY::HAS_ENTITY_BEEN_DAMAGED_BY_ANY_OBJECT(entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_ENTITY_HAS_ENTITY_BEEN_DAMAGED_BY_ANY_PED(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        BOOL res = ENTITY::HAS_ENTITY_BEEN_DAMAGED_BY_ANY_PED(entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_ENTITY_HAS_ENTITY_BEEN_DAMAGED_BY_ANY_VEHICLE(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        BOOL res = ENTITY::HAS_ENTITY_BEEN_DAMAGED_BY_ANY_VEHICLE(entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_ENTITY_HAS_ENTITY_BEEN_DAMAGED_BY_ENTITY(WrenVM* vm)
    {
        Entity entity1 = (Entity)wrenGetSlotDouble(vm, 1);
        Entity entity2 = (Entity)wrenGetSlotDouble(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        BOOL res = ENTITY::HAS_ENTITY_BEEN_DAMAGED_BY_ENTITY(entity1, entity2, p2);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_ENTITY_HAS_ENTITY_CLEAR_LOS_TO_ENTITY(WrenVM* vm)
    {
        Entity entity1 = (Entity)wrenGetSlotDouble(vm, 1);
        Entity entity2 = (Entity)wrenGetSlotDouble(vm, 2);
        int traceType = (int)wrenGetSlotDouble(vm, 3);

        BOOL res = ENTITY::HAS_ENTITY_CLEAR_LOS_TO_ENTITY(entity1, entity2, traceType);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_ENTITY_HAS_ENTITY_CLEAR_LOS_TO_ENTITY_ADJUST_FOR_COVER(WrenVM* vm)
    {
        Entity entity1 = (Entity)wrenGetSlotDouble(vm, 1);
        Entity entity2 = (Entity)wrenGetSlotDouble(vm, 2);
        int traceType = (int)wrenGetSlotDouble(vm, 3);

        Any res = ENTITY::HAS_ENTITY_CLEAR_LOS_TO_ENTITY_ADJUST_FOR_COVER(entity1, entity2, traceType);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_ENTITY_HAS_ENTITY_CLEAR_LOS_TO_ENTITY_IN_FRONT(WrenVM* vm)
    {
        Entity entity1 = (Entity)wrenGetSlotDouble(vm, 1);
        Entity entity2 = (Entity)wrenGetSlotDouble(vm, 2);

        BOOL res = ENTITY::HAS_ENTITY_CLEAR_LOS_TO_ENTITY_IN_FRONT(entity1, entity2);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_ENTITY_HAS_ENTITY_COLLIDED_WITH_ANYTHING(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        BOOL res = ENTITY::HAS_ENTITY_COLLIDED_WITH_ANYTHING(entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_ENTITY_GET_LAST_MATERIAL_HIT_BY_ENTITY(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        Hash res = ENTITY::GET_LAST_MATERIAL_HIT_BY_ENTITY(entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_ENTITY_GET_COLLISION_NORMAL_OF_LAST_HIT_FOR_ENTITY(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        Vector3 res = ENTITY::GET_COLLISION_NORMAL_OF_LAST_HIT_FOR_ENTITY(entity);

        wrenEnsureSlots(vm, 1);

        wrenGetVariable(vm, "natives", "Vector3", 0);
        Vector3* wren_res = (Vector3*)wrenSetSlotNewForeign(vm, 0, 0, sizeof(Vector3));
        wren_res->x = res.x;
        wren_res->y = res.y;
        wren_res->z = res.z;
    }

    static void WREN_ENTITY_FORCE_ENTITY_AI_AND_ANIMATION_UPDATE(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        ENTITY::FORCE_ENTITY_AI_AND_ANIMATION_UPDATE(entity);
    }

    static void WREN_ENTITY_GET_ENTITY_ANIM_CURRENT_TIME(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        const char* animDict = wrenGetSlotString(vm, 2);
        const char* animName = wrenGetSlotString(vm, 3);

        float res = ENTITY::GET_ENTITY_ANIM_CURRENT_TIME(entity, animDict, animName);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_ENTITY_GET_ENTITY_ANIM_TOTAL_TIME(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        const char* animDict = wrenGetSlotString(vm, 2);
        const char* animName = wrenGetSlotString(vm, 3);

        float res = ENTITY::GET_ENTITY_ANIM_TOTAL_TIME(entity, animDict, animName);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_ENTITY_GET_ANIM_DURATION(WrenVM* vm)
    {
        const char* animDict = wrenGetSlotString(vm, 1);
        const char* animName = wrenGetSlotString(vm, 2);

        float res = ENTITY::GET_ANIM_DURATION(animDict, animName);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_ENTITY_GET_ENTITY_ATTACHED_TO(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        Entity res = ENTITY::GET_ENTITY_ATTACHED_TO(entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_ENTITY_GET_ENTITY_COORDS(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        BOOL alive = (BOOL)wrenGetSlotBool(vm, 2);

        Vector3 res = ENTITY::GET_ENTITY_COORDS(entity, alive);

        wrenEnsureSlots(vm, 1);

        wrenGetVariable(vm, "natives", "Vector3", 0);
        Vector3* wren_res = (Vector3*)wrenSetSlotNewForeign(vm, 0, 0, sizeof(Vector3));
        wren_res->x = res.x;
        wren_res->y = res.y;
        wren_res->z = res.z;
    }

    static void WREN_ENTITY_GET_ENTITY_FORWARD_VECTOR(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        Vector3 res = ENTITY::GET_ENTITY_FORWARD_VECTOR(entity);

        wrenEnsureSlots(vm, 1);

        wrenGetVariable(vm, "natives", "Vector3", 0);
        Vector3* wren_res = (Vector3*)wrenSetSlotNewForeign(vm, 0, 0, sizeof(Vector3));
        wren_res->x = res.x;
        wren_res->y = res.y;
        wren_res->z = res.z;
    }

    static void WREN_ENTITY_GET_ENTITY_FORWARD_X(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        float res = ENTITY::GET_ENTITY_FORWARD_X(entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_ENTITY_GET_ENTITY_FORWARD_Y(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        float res = ENTITY::GET_ENTITY_FORWARD_Y(entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_ENTITY_GET_ENTITY_HEADING(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        float res = ENTITY::GET_ENTITY_HEADING(entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_ENTITY_GET_ENTITY_HEADING_FROM_EULERS(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        float res = ENTITY::GET_ENTITY_HEADING_FROM_EULERS(entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_ENTITY_GET_ENTITY_HEALTH(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        int res = ENTITY::GET_ENTITY_HEALTH(entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_ENTITY_GET_ENTITY_MAX_HEALTH(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        int res = ENTITY::GET_ENTITY_MAX_HEALTH(entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_ENTITY_SET_ENTITY_MAX_HEALTH(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        int value = (int)wrenGetSlotDouble(vm, 2);

        ENTITY::SET_ENTITY_MAX_HEALTH(entity, value);
    }

    static void WREN_ENTITY_GET_ENTITY_HEIGHT(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        float X = (float)wrenGetSlotDouble(vm, 2);
        float Y = (float)wrenGetSlotDouble(vm, 3);
        float Z = (float)wrenGetSlotDouble(vm, 4);
        BOOL atTop = (BOOL)wrenGetSlotBool(vm, 5);
        BOOL inWorldCoords = (BOOL)wrenGetSlotBool(vm, 6);

        float res = ENTITY::GET_ENTITY_HEIGHT(entity, X, Y, Z, atTop, inWorldCoords);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_ENTITY_GET_ENTITY_HEIGHT_ABOVE_GROUND(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        float res = ENTITY::GET_ENTITY_HEIGHT_ABOVE_GROUND(entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_ENTITY_GET_ENTITY_MATRIX(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        Vector3 forwardVector;
        Vector3 rightVector;
        Vector3 upVector;
        Vector3 position;

        ENTITY::GET_ENTITY_MATRIX(entity, &forwardVector, &rightVector, &upVector, &position);

        wrenEnsureSlots(vm, 8);

        wrenSetSlotNewList(vm, 0);

        wrenGetVariable(vm, "natives", "Vector3", 1);
        Vector3* wren_forwardVector = (Vector3*)wrenSetSlotNewForeign(vm, 2, 1, sizeof(Vector3));
        wren_forwardVector->x = forwardVector.x;
        wren_forwardVector->y = forwardVector.y;
        wren_forwardVector->z = forwardVector.z;
        wrenInsertInList(vm, 0, 0, 2);

        Vector3* wren_rightVector = (Vector3*)wrenSetSlotNewForeign(vm, 3, 1, sizeof(Vector3));
        wren_rightVector->x = rightVector.x;
        wren_rightVector->y = rightVector.y;
        wren_rightVector->z = rightVector.z;
        wrenInsertInList(vm, 0, 1, 3);

        Vector3* wren_upVector = (Vector3*)wrenSetSlotNewForeign(vm, 4, 1, sizeof(Vector3));
        wren_upVector->x = upVector.x;
        wren_upVector->y = upVector.y;
        wren_upVector->z = upVector.z;
        wrenInsertInList(vm, 0, 2, 4);

        Vector3* wren_position = (Vector3*)wrenSetSlotNewForeign(vm, 5, 1, sizeof(Vector3));
        wren_position->x = position.x;
        wren_position->y = position.y;
        wren_position->z = position.z;
        wrenInsertInList(vm, 0, 3, 5);

    }

    static void WREN_ENTITY_GET_ENTITY_MODEL(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        Hash res = ENTITY::GET_ENTITY_MODEL(entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_ENTITY_GET_OFFSET_FROM_ENTITY_GIVEN_WORLD_COORDS(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        float posX = (float)wrenGetSlotDouble(vm, 2);
        float posY = (float)wrenGetSlotDouble(vm, 3);
        float posZ = (float)wrenGetSlotDouble(vm, 4);

        Vector3 res = ENTITY::GET_OFFSET_FROM_ENTITY_GIVEN_WORLD_COORDS(entity, posX, posY, posZ);

        wrenEnsureSlots(vm, 1);

        wrenGetVariable(vm, "natives", "Vector3", 0);
        Vector3* wren_res = (Vector3*)wrenSetSlotNewForeign(vm, 0, 0, sizeof(Vector3));
        wren_res->x = res.x;
        wren_res->y = res.y;
        wren_res->z = res.z;
    }

    static void WREN_ENTITY_GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        float offsetX = (float)wrenGetSlotDouble(vm, 2);
        float offsetY = (float)wrenGetSlotDouble(vm, 3);
        float offsetZ = (float)wrenGetSlotDouble(vm, 4);

        Vector3 res = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(entity, offsetX, offsetY, offsetZ);

        wrenEnsureSlots(vm, 1);

        wrenGetVariable(vm, "natives", "Vector3", 0);
        Vector3* wren_res = (Vector3*)wrenSetSlotNewForeign(vm, 0, 0, sizeof(Vector3));
        wren_res->x = res.x;
        wren_res->y = res.y;
        wren_res->z = res.z;
    }

    static void WREN_ENTITY_GET_ENTITY_PITCH(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        float res = ENTITY::GET_ENTITY_PITCH(entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_ENTITY_GET_ENTITY_QUATERNION(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        float x;
        float y;
        float z;
        float w;

        ENTITY::GET_ENTITY_QUATERNION(entity, &x, &y, &z, &w);

        wrenEnsureSlots(vm, 8);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, x);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, y);
        wrenInsertInList(vm, 0, 1, 2);

        wrenSetSlotDouble(vm, 3, z);
        wrenInsertInList(vm, 0, 2, 3);

        wrenSetSlotDouble(vm, 4, w);
        wrenInsertInList(vm, 0, 3, 4);

    }

    static void WREN_ENTITY_GET_ENTITY_ROLL(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        float res = ENTITY::GET_ENTITY_ROLL(entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_ENTITY_GET_ENTITY_ROTATION(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        int rotationOrder = (int)wrenGetSlotDouble(vm, 2);

        Vector3 res = ENTITY::GET_ENTITY_ROTATION(entity, rotationOrder);

        wrenEnsureSlots(vm, 1);

        wrenGetVariable(vm, "natives", "Vector3", 0);
        Vector3* wren_res = (Vector3*)wrenSetSlotNewForeign(vm, 0, 0, sizeof(Vector3));
        wren_res->x = res.x;
        wren_res->y = res.y;
        wren_res->z = res.z;
    }

    static void WREN_ENTITY_GET_ENTITY_ROTATION_VELOCITY(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        Vector3 res = ENTITY::GET_ENTITY_ROTATION_VELOCITY(entity);

        wrenEnsureSlots(vm, 1);

        wrenGetVariable(vm, "natives", "Vector3", 0);
        Vector3* wren_res = (Vector3*)wrenSetSlotNewForeign(vm, 0, 0, sizeof(Vector3));
        wren_res->x = res.x;
        wren_res->y = res.y;
        wren_res->z = res.z;
    }

    static void WREN_ENTITY_GET_ENTITY_SCRIPT(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        ScrHandle script;

        const char* res = ENTITY::GET_ENTITY_SCRIPT(entity, &script);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotString(vm, 1, res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, script);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_ENTITY_GET_ENTITY_SPEED(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        float res = ENTITY::GET_ENTITY_SPEED(entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_ENTITY_GET_ENTITY_SPEED_VECTOR(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        BOOL relative = (BOOL)wrenGetSlotBool(vm, 2);

        Vector3 res = ENTITY::GET_ENTITY_SPEED_VECTOR(entity, relative);

        wrenEnsureSlots(vm, 1);

        wrenGetVariable(vm, "natives", "Vector3", 0);
        Vector3* wren_res = (Vector3*)wrenSetSlotNewForeign(vm, 0, 0, sizeof(Vector3));
        wren_res->x = res.x;
        wren_res->y = res.y;
        wren_res->z = res.z;
    }

    static void WREN_ENTITY_GET_ENTITY_UPRIGHT_VALUE(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        float res = ENTITY::GET_ENTITY_UPRIGHT_VALUE(entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_ENTITY_GET_ENTITY_VELOCITY(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        Vector3 res = ENTITY::GET_ENTITY_VELOCITY(entity);

        wrenEnsureSlots(vm, 1);

        wrenGetVariable(vm, "natives", "Vector3", 0);
        Vector3* wren_res = (Vector3*)wrenSetSlotNewForeign(vm, 0, 0, sizeof(Vector3));
        wren_res->x = res.x;
        wren_res->y = res.y;
        wren_res->z = res.z;
    }

    static void WREN_ENTITY_GET_OBJECT_INDEX_FROM_ENTITY_INDEX(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        Object res = ENTITY::GET_OBJECT_INDEX_FROM_ENTITY_INDEX(entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_ENTITY_GET_PED_INDEX_FROM_ENTITY_INDEX(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        Ped res = ENTITY::GET_PED_INDEX_FROM_ENTITY_INDEX(entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_ENTITY_GET_VEHICLE_INDEX_FROM_ENTITY_INDEX(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        Vehicle res = ENTITY::GET_VEHICLE_INDEX_FROM_ENTITY_INDEX(entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_ENTITY_GET_WORLD_POSITION_OF_ENTITY_BONE(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        int boneIndex = (int)wrenGetSlotDouble(vm, 2);

        Vector3 res = ENTITY::GET_WORLD_POSITION_OF_ENTITY_BONE(entity, boneIndex);

        wrenEnsureSlots(vm, 1);

        wrenGetVariable(vm, "natives", "Vector3", 0);
        Vector3* wren_res = (Vector3*)wrenSetSlotNewForeign(vm, 0, 0, sizeof(Vector3));
        wren_res->x = res.x;
        wren_res->y = res.y;
        wren_res->z = res.z;
    }

    static void WREN_ENTITY_GET_NEAREST_PLAYER_TO_ENTITY(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        Player res = ENTITY::GET_NEAREST_PLAYER_TO_ENTITY(entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_ENTITY_GET_NEAREST_PLAYER_TO_ENTITY_ON_TEAM(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        int team = (int)wrenGetSlotDouble(vm, 2);

        Player res = ENTITY::GET_NEAREST_PLAYER_TO_ENTITY_ON_TEAM(entity, team);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_ENTITY_GET_ENTITY_TYPE(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        int res = ENTITY::GET_ENTITY_TYPE(entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_ENTITY_GET_ENTITY_POPULATION_TYPE(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        int res = ENTITY::GET_ENTITY_POPULATION_TYPE(entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_ENTITY_IS_AN_ENTITY(WrenVM* vm)
    {
        ScrHandle handle = (ScrHandle)wrenGetSlotDouble(vm, 1);

        BOOL res = ENTITY::IS_AN_ENTITY(handle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_ENTITY_IS_ENTITY_A_PED(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        BOOL res = ENTITY::IS_ENTITY_A_PED(entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_ENTITY_IS_ENTITY_A_MISSION_ENTITY(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        BOOL res = ENTITY::IS_ENTITY_A_MISSION_ENTITY(entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_ENTITY_IS_ENTITY_A_VEHICLE(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        BOOL res = ENTITY::IS_ENTITY_A_VEHICLE(entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_ENTITY_IS_ENTITY_AN_OBJECT(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        BOOL res = ENTITY::IS_ENTITY_AN_OBJECT(entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_ENTITY_IS_ENTITY_AT_COORD(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        float xPos = (float)wrenGetSlotDouble(vm, 2);
        float yPos = (float)wrenGetSlotDouble(vm, 3);
        float zPos = (float)wrenGetSlotDouble(vm, 4);
        float xSize = (float)wrenGetSlotDouble(vm, 5);
        float ySize = (float)wrenGetSlotDouble(vm, 6);
        float zSize = (float)wrenGetSlotDouble(vm, 7);
        BOOL p7 = (BOOL)wrenGetSlotBool(vm, 8);
        BOOL p8 = (BOOL)wrenGetSlotBool(vm, 9);
        int p9 = (int)wrenGetSlotDouble(vm, 10);

        BOOL res = ENTITY::IS_ENTITY_AT_COORD(entity, xPos, yPos, zPos, xSize, ySize, zSize, p7, p8, p9);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_ENTITY_IS_ENTITY_AT_ENTITY(WrenVM* vm)
    {
        Entity entity1 = (Entity)wrenGetSlotDouble(vm, 1);
        Entity entity2 = (Entity)wrenGetSlotDouble(vm, 2);
        float xSize = (float)wrenGetSlotDouble(vm, 3);
        float ySize = (float)wrenGetSlotDouble(vm, 4);
        float zSize = (float)wrenGetSlotDouble(vm, 5);
        BOOL p5 = (BOOL)wrenGetSlotBool(vm, 6);
        BOOL p6 = (BOOL)wrenGetSlotBool(vm, 7);
        int p7 = (int)wrenGetSlotDouble(vm, 8);

        BOOL res = ENTITY::IS_ENTITY_AT_ENTITY(entity1, entity2, xSize, ySize, zSize, p5, p6, p7);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_ENTITY_IS_ENTITY_ATTACHED(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        BOOL res = ENTITY::IS_ENTITY_ATTACHED(entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_ENTITY_IS_ENTITY_ATTACHED_TO_ANY_OBJECT(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        BOOL res = ENTITY::IS_ENTITY_ATTACHED_TO_ANY_OBJECT(entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_ENTITY_IS_ENTITY_ATTACHED_TO_ANY_PED(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        BOOL res = ENTITY::IS_ENTITY_ATTACHED_TO_ANY_PED(entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_ENTITY_IS_ENTITY_ATTACHED_TO_ANY_VEHICLE(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        BOOL res = ENTITY::IS_ENTITY_ATTACHED_TO_ANY_VEHICLE(entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_ENTITY_IS_ENTITY_ATTACHED_TO_ENTITY(WrenVM* vm)
    {
        Entity from = (Entity)wrenGetSlotDouble(vm, 1);
        Entity to = (Entity)wrenGetSlotDouble(vm, 2);

        BOOL res = ENTITY::IS_ENTITY_ATTACHED_TO_ENTITY(from, to);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_ENTITY_IS_ENTITY_DEAD(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        BOOL res = ENTITY::IS_ENTITY_DEAD(entity, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_ENTITY_IS_ENTITY_IN_AIR(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        BOOL res = ENTITY::IS_ENTITY_IN_AIR(entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_ENTITY_IS_ENTITY_IN_ANGLED_AREA(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        float x1 = (float)wrenGetSlotDouble(vm, 2);
        float y1 = (float)wrenGetSlotDouble(vm, 3);
        float z1 = (float)wrenGetSlotDouble(vm, 4);
        float x2 = (float)wrenGetSlotDouble(vm, 5);
        float y2 = (float)wrenGetSlotDouble(vm, 6);
        float z2 = (float)wrenGetSlotDouble(vm, 7);
        float width = (float)wrenGetSlotDouble(vm, 8);
        BOOL debug = (BOOL)wrenGetSlotBool(vm, 9);
        BOOL includeZ = (BOOL)wrenGetSlotBool(vm, 10);
        Any p10 = (Any)wrenGetSlotDouble(vm, 11);

        BOOL res = ENTITY::IS_ENTITY_IN_ANGLED_AREA(entity, x1, y1, z1, x2, y2, z2, width, debug, includeZ, p10);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_ENTITY_IS_ENTITY_IN_AREA(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        float x1 = (float)wrenGetSlotDouble(vm, 2);
        float y1 = (float)wrenGetSlotDouble(vm, 3);
        float z1 = (float)wrenGetSlotDouble(vm, 4);
        float x2 = (float)wrenGetSlotDouble(vm, 5);
        float y2 = (float)wrenGetSlotDouble(vm, 6);
        float z2 = (float)wrenGetSlotDouble(vm, 7);
        BOOL p7 = (BOOL)wrenGetSlotBool(vm, 8);
        BOOL p8 = (BOOL)wrenGetSlotBool(vm, 9);
        Any p9 = (Any)wrenGetSlotDouble(vm, 10);

        BOOL res = ENTITY::IS_ENTITY_IN_AREA(entity, x1, y1, z1, x2, y2, z2, p7, p8, p9);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_ENTITY_IS_ENTITY_IN_ZONE(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        const char* zone = wrenGetSlotString(vm, 2);

        BOOL res = ENTITY::IS_ENTITY_IN_ZONE(entity, zone);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_ENTITY_IS_ENTITY_IN_WATER(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        BOOL res = ENTITY::IS_ENTITY_IN_WATER(entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_ENTITY_GET_ENTITY_SUBMERGED_LEVEL(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        float res = ENTITY::GET_ENTITY_SUBMERGED_LEVEL(entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_ENTITY_SET_ENTITY_REQUIRES_MORE_EXPENSIVE_RIVER_CHECK(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        ENTITY::SET_ENTITY_REQUIRES_MORE_EXPENSIVE_RIVER_CHECK(entity, toggle);
    }

    static void WREN_ENTITY_IS_ENTITY_ON_SCREEN(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        BOOL res = ENTITY::IS_ENTITY_ON_SCREEN(entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_ENTITY_IS_ENTITY_PLAYING_ANIM(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        const char* animDict = wrenGetSlotString(vm, 2);
        const char* animName = wrenGetSlotString(vm, 3);
        int taskFlag = (int)wrenGetSlotDouble(vm, 4);

        BOOL res = ENTITY::IS_ENTITY_PLAYING_ANIM(entity, animDict, animName, taskFlag);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_ENTITY_IS_ENTITY_STATIC(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        BOOL res = ENTITY::IS_ENTITY_STATIC(entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_ENTITY_IS_ENTITY_TOUCHING_ENTITY(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        Entity targetEntity = (Entity)wrenGetSlotDouble(vm, 2);

        BOOL res = ENTITY::IS_ENTITY_TOUCHING_ENTITY(entity, targetEntity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_ENTITY_IS_ENTITY_TOUCHING_MODEL(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        Hash modelHash = (Hash)wrenGetSlotDouble(vm, 2);

        BOOL res = ENTITY::IS_ENTITY_TOUCHING_MODEL(entity, modelHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_ENTITY_IS_ENTITY_UPRIGHT(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        float angle = (float)wrenGetSlotDouble(vm, 2);

        BOOL res = ENTITY::IS_ENTITY_UPRIGHT(entity, angle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_ENTITY_IS_ENTITY_UPSIDEDOWN(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        BOOL res = ENTITY::IS_ENTITY_UPSIDEDOWN(entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_ENTITY_IS_ENTITY_VISIBLE(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        BOOL res = ENTITY::IS_ENTITY_VISIBLE(entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_ENTITY_IS_ENTITY_VISIBLE_TO_SCRIPT(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        BOOL res = ENTITY::IS_ENTITY_VISIBLE_TO_SCRIPT(entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_ENTITY_IS_ENTITY_OCCLUDED(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        BOOL res = ENTITY::IS_ENTITY_OCCLUDED(entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_ENTITY_WOULD_ENTITY_BE_OCCLUDED(WrenVM* vm)
    {
        Hash entityModelHash = (Hash)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);
        BOOL p4 = (BOOL)wrenGetSlotBool(vm, 5);

        BOOL res = ENTITY::WOULD_ENTITY_BE_OCCLUDED(entityModelHash, x, y, z, p4);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_ENTITY_IS_ENTITY_WAITING_FOR_WORLD_COLLISION(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        BOOL res = ENTITY::IS_ENTITY_WAITING_FOR_WORLD_COLLISION(entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_ENTITY_APPLY_FORCE_TO_ENTITY_CENTER_OF_MASS(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        int forceType = (int)wrenGetSlotDouble(vm, 2);
        float x = (float)wrenGetSlotDouble(vm, 3);
        float y = (float)wrenGetSlotDouble(vm, 4);
        float z = (float)wrenGetSlotDouble(vm, 5);
        BOOL p5 = (BOOL)wrenGetSlotBool(vm, 6);
        BOOL isDirectionRel = (BOOL)wrenGetSlotBool(vm, 7);
        BOOL isForceRel = (BOOL)wrenGetSlotBool(vm, 8);
        BOOL p8 = (BOOL)wrenGetSlotBool(vm, 9);

        ENTITY::APPLY_FORCE_TO_ENTITY_CENTER_OF_MASS(entity, forceType, x, y, z, p5, isDirectionRel, isForceRel, p8);
    }

    static void WREN_ENTITY_APPLY_FORCE_TO_ENTITY(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        int forceFlags = (int)wrenGetSlotDouble(vm, 2);
        float x = (float)wrenGetSlotDouble(vm, 3);
        float y = (float)wrenGetSlotDouble(vm, 4);
        float z = (float)wrenGetSlotDouble(vm, 5);
        float offX = (float)wrenGetSlotDouble(vm, 6);
        float offY = (float)wrenGetSlotDouble(vm, 7);
        float offZ = (float)wrenGetSlotDouble(vm, 8);
        int boneIndex = (int)wrenGetSlotDouble(vm, 9);
        BOOL isDirectionRel = (BOOL)wrenGetSlotBool(vm, 10);
        BOOL ignoreUpVec = (BOOL)wrenGetSlotBool(vm, 11);
        BOOL isForceRel = (BOOL)wrenGetSlotBool(vm, 12);
        BOOL p12 = (BOOL)wrenGetSlotBool(vm, 13);
        BOOL p13 = (BOOL)wrenGetSlotBool(vm, 14);

        ENTITY::APPLY_FORCE_TO_ENTITY(entity, forceFlags, x, y, z, offX, offY, offZ, boneIndex, isDirectionRel, ignoreUpVec, isForceRel, p12, p13);
    }

    static void WREN_ENTITY_ATTACH_ENTITY_TO_ENTITY(WrenVM* vm)
    {
        Entity entity1 = (Entity)wrenGetSlotDouble(vm, 1);
        Entity entity2 = (Entity)wrenGetSlotDouble(vm, 2);
        int boneIndex = (int)wrenGetSlotDouble(vm, 3);
        float xPos = (float)wrenGetSlotDouble(vm, 4);
        float yPos = (float)wrenGetSlotDouble(vm, 5);
        float zPos = (float)wrenGetSlotDouble(vm, 6);
        float xRot = (float)wrenGetSlotDouble(vm, 7);
        float yRot = (float)wrenGetSlotDouble(vm, 8);
        float zRot = (float)wrenGetSlotDouble(vm, 9);
        BOOL p9 = (BOOL)wrenGetSlotBool(vm, 10);
        BOOL useSoftPinning = (BOOL)wrenGetSlotBool(vm, 11);
        BOOL collision = (BOOL)wrenGetSlotBool(vm, 12);
        BOOL isPed = (BOOL)wrenGetSlotBool(vm, 13);
        int vertexIndex = (int)wrenGetSlotDouble(vm, 14);
        BOOL fixedRot = (BOOL)wrenGetSlotBool(vm, 15);
        Any p15 = (Any)wrenGetSlotDouble(vm, 16);

        ENTITY::ATTACH_ENTITY_TO_ENTITY(entity1, entity2, boneIndex, xPos, yPos, zPos, xRot, yRot, zRot, p9, useSoftPinning, collision, isPed, vertexIndex, fixedRot, p15);
    }

    static void WREN_ENTITY_ATTACH_ENTITY_BONE_TO_ENTITY_BONE(WrenVM* vm)
    {
        Entity entity1 = (Entity)wrenGetSlotDouble(vm, 1);
        Entity entity2 = (Entity)wrenGetSlotDouble(vm, 2);
        int boneIndex1 = (int)wrenGetSlotDouble(vm, 3);
        int boneIndex2 = (int)wrenGetSlotDouble(vm, 4);
        BOOL p4 = (BOOL)wrenGetSlotBool(vm, 5);
        BOOL p5 = (BOOL)wrenGetSlotBool(vm, 6);

        ENTITY::ATTACH_ENTITY_BONE_TO_ENTITY_BONE(entity1, entity2, boneIndex1, boneIndex2, p4, p5);
    }

    static void WREN_ENTITY_ATTACH_ENTITY_BONE_TO_ENTITY_BONE_Y_FORWARD(WrenVM* vm)
    {
        Entity entity1 = (Entity)wrenGetSlotDouble(vm, 1);
        Entity entity2 = (Entity)wrenGetSlotDouble(vm, 2);
        int boneIndex1 = (int)wrenGetSlotDouble(vm, 3);
        int boneIndex2 = (int)wrenGetSlotDouble(vm, 4);
        BOOL p4 = (BOOL)wrenGetSlotBool(vm, 5);
        BOOL p5 = (BOOL)wrenGetSlotBool(vm, 6);

        ENTITY::ATTACH_ENTITY_BONE_TO_ENTITY_BONE_Y_FORWARD(entity1, entity2, boneIndex1, boneIndex2, p4, p5);
    }

    static void WREN_ENTITY_ATTACH_ENTITY_TO_ENTITY_PHYSICALLY(WrenVM* vm)
    {
        Entity entity1 = (Entity)wrenGetSlotDouble(vm, 1);
        Entity entity2 = (Entity)wrenGetSlotDouble(vm, 2);
        int boneIndex1 = (int)wrenGetSlotDouble(vm, 3);
        int boneIndex2 = (int)wrenGetSlotDouble(vm, 4);
        float xPos1 = (float)wrenGetSlotDouble(vm, 5);
        float yPos1 = (float)wrenGetSlotDouble(vm, 6);
        float zPos1 = (float)wrenGetSlotDouble(vm, 7);
        float xPos2 = (float)wrenGetSlotDouble(vm, 8);
        float yPos2 = (float)wrenGetSlotDouble(vm, 9);
        float zPos2 = (float)wrenGetSlotDouble(vm, 10);
        float xRot = (float)wrenGetSlotDouble(vm, 11);
        float yRot = (float)wrenGetSlotDouble(vm, 12);
        float zRot = (float)wrenGetSlotDouble(vm, 13);
        float breakForce = (float)wrenGetSlotDouble(vm, 14);
        BOOL fixedRot = (BOOL)wrenGetSlotBool(vm, 15);
        BOOL p15 = (BOOL)wrenGetSlotBool(vm, 16);
        BOOL collision = (BOOL)wrenGetSlotBool(vm, 17);
        BOOL p17 = (BOOL)wrenGetSlotBool(vm, 18);
        int p18 = (int)wrenGetSlotDouble(vm, 19);

        ENTITY::ATTACH_ENTITY_TO_ENTITY_PHYSICALLY(entity1, entity2, boneIndex1, boneIndex2, xPos1, yPos1, zPos1, xPos2, yPos2, zPos2, xRot, yRot, zRot, breakForce, fixedRot, p15, collision, p17, p18);
    }

    static void WREN_ENTITY_PROCESS_ENTITY_ATTACHMENTS(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        ENTITY::PROCESS_ENTITY_ATTACHMENTS(entity);
    }

    static void WREN_ENTITY_GET_ENTITY_BONE_INDEX_BY_NAME(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        const char* boneName = wrenGetSlotString(vm, 2);

        int res = ENTITY::GET_ENTITY_BONE_INDEX_BY_NAME(entity, boneName);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_ENTITY_CLEAR_ENTITY_LAST_DAMAGE_ENTITY(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        ENTITY::CLEAR_ENTITY_LAST_DAMAGE_ENTITY(entity);
    }

    static void WREN_ENTITY_DELETE_ENTITY(WrenVM* vm)
    {
        Entity entity;

        ENTITY::DELETE_ENTITY(&entity);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_ENTITY_DETACH_ENTITY(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        BOOL dynamic = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL collision = (BOOL)wrenGetSlotBool(vm, 3);

        ENTITY::DETACH_ENTITY(entity, dynamic, collision);
    }

    static void WREN_ENTITY_FREEZE_ENTITY_POSITION(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        ENTITY::FREEZE_ENTITY_POSITION(entity, toggle);
    }

    static void WREN_ENTITY_SET_ENTITY_SHOULD_FREEZE_WAITING_ON_COLLISION(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        ENTITY::SET_ENTITY_SHOULD_FREEZE_WAITING_ON_COLLISION(entity, toggle);
    }

    static void WREN_ENTITY_PLAY_ENTITY_ANIM(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        const char* animName = wrenGetSlotString(vm, 2);
        const char* animDict = wrenGetSlotString(vm, 3);
        float p3 = (float)wrenGetSlotDouble(vm, 4);
        BOOL loop = (BOOL)wrenGetSlotBool(vm, 5);
        BOOL stayInAnim = (BOOL)wrenGetSlotBool(vm, 6);
        BOOL p6 = (BOOL)wrenGetSlotBool(vm, 7);
        float delta = (float)wrenGetSlotDouble(vm, 8);
        Any bitset = (Any)wrenGetSlotDouble(vm, 9);

        BOOL res = ENTITY::PLAY_ENTITY_ANIM(entity, animName, animDict, p3, loop, stayInAnim, p6, delta, bitset);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_ENTITY_PLAY_SYNCHRONIZED_ENTITY_ANIM(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        int syncedScene = (int)wrenGetSlotDouble(vm, 2);
        const char* animation = wrenGetSlotString(vm, 3);
        const char* propName = wrenGetSlotString(vm, 4);
        float p4 = (float)wrenGetSlotDouble(vm, 5);
        float p5 = (float)wrenGetSlotDouble(vm, 6);
        Any p6 = (Any)wrenGetSlotDouble(vm, 7);
        float p7 = (float)wrenGetSlotDouble(vm, 8);

        BOOL res = ENTITY::PLAY_SYNCHRONIZED_ENTITY_ANIM(entity, syncedScene, animation, propName, p4, p5, p6, p7);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_ENTITY_PLAY_SYNCHRONIZED_MAP_ENTITY_ANIM(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);
        float p2 = (float)wrenGetSlotDouble(vm, 3);
        float p3 = (float)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);
        Any p5 = (Any)wrenGetSlotDouble(vm, 6);
        Any p6;
        Any p7;
        float p8 = (float)wrenGetSlotDouble(vm, 7);
        float p9 = (float)wrenGetSlotDouble(vm, 8);
        Any p10 = (Any)wrenGetSlotDouble(vm, 9);
        float p11 = (float)wrenGetSlotDouble(vm, 10);

        BOOL res = ENTITY::PLAY_SYNCHRONIZED_MAP_ENTITY_ANIM(p0, p1, p2, p3, p4, p5, &p6, &p7, p8, p9, p10, p11);

        wrenEnsureSlots(vm, 6);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p6);
        wrenInsertInList(vm, 0, 1, 2);

        wrenSetSlotDouble(vm, 3, p7);
        wrenInsertInList(vm, 0, 2, 3);

    }

    static void WREN_ENTITY_STOP_SYNCHRONIZED_MAP_ENTITY_ANIM(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);
        float p2 = (float)wrenGetSlotDouble(vm, 3);
        float p3 = (float)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);
        float p5 = (float)wrenGetSlotDouble(vm, 6);

        BOOL res = ENTITY::STOP_SYNCHRONIZED_MAP_ENTITY_ANIM(p0, p1, p2, p3, p4, p5);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_ENTITY_STOP_ENTITY_ANIM(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        const char* animation = wrenGetSlotString(vm, 2);
        const char* animGroup = wrenGetSlotString(vm, 3);
        float p3 = (float)wrenGetSlotDouble(vm, 4);

        Any res = ENTITY::STOP_ENTITY_ANIM(entity, animation, animGroup, p3);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_ENTITY_STOP_SYNCHRONIZED_ENTITY_ANIM(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        BOOL res = ENTITY::STOP_SYNCHRONIZED_ENTITY_ANIM(entity, p1, p2);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_ENTITY_HAS_ANIM_EVENT_FIRED(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        Hash actionHash = (Hash)wrenGetSlotDouble(vm, 2);

        BOOL res = ENTITY::HAS_ANIM_EVENT_FIRED(entity, actionHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_ENTITY_FIND_ANIM_EVENT_PHASE(WrenVM* vm)
    {
        const char* animDictionary = wrenGetSlotString(vm, 1);
        const char* animName = wrenGetSlotString(vm, 2);
        const char* p2 = wrenGetSlotString(vm, 3);
        Any p3;
        Any p4;

        BOOL res = ENTITY::FIND_ANIM_EVENT_PHASE(animDictionary, animName, p2, &p3, &p4);

        wrenEnsureSlots(vm, 6);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p3);
        wrenInsertInList(vm, 0, 1, 2);

        wrenSetSlotDouble(vm, 3, p4);
        wrenInsertInList(vm, 0, 2, 3);

    }

    static void WREN_ENTITY_SET_ENTITY_ANIM_CURRENT_TIME(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        const char* animDictionary = wrenGetSlotString(vm, 2);
        const char* animName = wrenGetSlotString(vm, 3);
        float time = (float)wrenGetSlotDouble(vm, 4);

        ENTITY::SET_ENTITY_ANIM_CURRENT_TIME(entity, animDictionary, animName, time);
    }

    static void WREN_ENTITY_SET_ENTITY_ANIM_SPEED(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        const char* animDictionary = wrenGetSlotString(vm, 2);
        const char* animName = wrenGetSlotString(vm, 3);
        float speedMultiplier = (float)wrenGetSlotDouble(vm, 4);

        ENTITY::SET_ENTITY_ANIM_SPEED(entity, animDictionary, animName, speedMultiplier);
    }

    static void WREN_ENTITY_SET_ENTITY_AS_MISSION_ENTITY(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        ENTITY::SET_ENTITY_AS_MISSION_ENTITY(entity, p1, p2);
    }

    static void WREN_ENTITY_SET_ENTITY_AS_NO_LONGER_NEEDED(WrenVM* vm)
    {
        Entity entity;

        ENTITY::SET_ENTITY_AS_NO_LONGER_NEEDED(&entity);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_ENTITY_SET_PED_AS_NO_LONGER_NEEDED(WrenVM* vm)
    {
        Ped ped;

        ENTITY::SET_PED_AS_NO_LONGER_NEEDED(&ped);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_ENTITY_SET_VEHICLE_AS_NO_LONGER_NEEDED(WrenVM* vm)
    {
        Vehicle vehicle;

        ENTITY::SET_VEHICLE_AS_NO_LONGER_NEEDED(&vehicle);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_ENTITY_SET_OBJECT_AS_NO_LONGER_NEEDED(WrenVM* vm)
    {
        Object object;

        ENTITY::SET_OBJECT_AS_NO_LONGER_NEEDED(&object);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_ENTITY_SET_ENTITY_CAN_BE_DAMAGED(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        ENTITY::SET_ENTITY_CAN_BE_DAMAGED(entity, toggle);
    }

    static void WREN_ENTITY_GET_ENTITY_CAN_BE_DAMAGED(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        BOOL res = ENTITY::GET_ENTITY_CAN_BE_DAMAGED(entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_ENTITY_SET_ENTITY_CAN_BE_DAMAGED_BY_RELATIONSHIP_GROUP(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        BOOL bCanBeDamaged = (BOOL)wrenGetSlotBool(vm, 2);
        int relGroup = (int)wrenGetSlotDouble(vm, 3);

        ENTITY::SET_ENTITY_CAN_BE_DAMAGED_BY_RELATIONSHIP_GROUP(entity, bCanBeDamaged, relGroup);
    }

    static void WREN_ENTITY_SET_ENTITY_CAN_ONLY_BE_DAMAGED_BY_SCRIPT_PARTICIPANTS(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        ENTITY::SET_ENTITY_CAN_ONLY_BE_DAMAGED_BY_SCRIPT_PARTICIPANTS(p0, p1);
    }

    static void WREN_ENTITY_SET_ENTITY_CAN_BE_TARGETED_WITHOUT_LOS(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        ENTITY::SET_ENTITY_CAN_BE_TARGETED_WITHOUT_LOS(entity, toggle);
    }

    static void WREN_ENTITY_SET_ENTITY_COLLISION(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL keepPhysics = (BOOL)wrenGetSlotBool(vm, 3);

        ENTITY::SET_ENTITY_COLLISION(entity, toggle, keepPhysics);
    }

    static void WREN_ENTITY_GET_ENTITY_COLLISION_DISABLED(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        BOOL res = ENTITY::GET_ENTITY_COLLISION_DISABLED(entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_ENTITY_SET_ENTITY_COMPLETELY_DISABLE_COLLISION(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL keepPhysics = (BOOL)wrenGetSlotBool(vm, 3);

        ENTITY::SET_ENTITY_COMPLETELY_DISABLE_COLLISION(entity, toggle, keepPhysics);
    }

    static void WREN_ENTITY_SET_ENTITY_COORDS(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        float xPos = (float)wrenGetSlotDouble(vm, 2);
        float yPos = (float)wrenGetSlotDouble(vm, 3);
        float zPos = (float)wrenGetSlotDouble(vm, 4);
        BOOL xAxis = (BOOL)wrenGetSlotBool(vm, 5);
        BOOL yAxis = (BOOL)wrenGetSlotBool(vm, 6);
        BOOL zAxis = (BOOL)wrenGetSlotBool(vm, 7);
        BOOL clearArea = (BOOL)wrenGetSlotBool(vm, 8);

        ENTITY::SET_ENTITY_COORDS(entity, xPos, yPos, zPos, xAxis, yAxis, zAxis, clearArea);
    }

    static void WREN_ENTITY_SET_ENTITY_COORDS_WITHOUT_PLANTS_RESET(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        float xPos = (float)wrenGetSlotDouble(vm, 2);
        float yPos = (float)wrenGetSlotDouble(vm, 3);
        float zPos = (float)wrenGetSlotDouble(vm, 4);
        BOOL alive = (BOOL)wrenGetSlotBool(vm, 5);
        BOOL deadFlag = (BOOL)wrenGetSlotBool(vm, 6);
        BOOL ragdollFlag = (BOOL)wrenGetSlotBool(vm, 7);
        BOOL clearArea = (BOOL)wrenGetSlotBool(vm, 8);

        ENTITY::SET_ENTITY_COORDS_WITHOUT_PLANTS_RESET(entity, xPos, yPos, zPos, alive, deadFlag, ragdollFlag, clearArea);
    }

    static void WREN_ENTITY_SET_ENTITY_COORDS_NO_OFFSET(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        float xPos = (float)wrenGetSlotDouble(vm, 2);
        float yPos = (float)wrenGetSlotDouble(vm, 3);
        float zPos = (float)wrenGetSlotDouble(vm, 4);
        BOOL xAxis = (BOOL)wrenGetSlotBool(vm, 5);
        BOOL yAxis = (BOOL)wrenGetSlotBool(vm, 6);
        BOOL zAxis = (BOOL)wrenGetSlotBool(vm, 7);

        ENTITY::SET_ENTITY_COORDS_NO_OFFSET(entity, xPos, yPos, zPos, xAxis, yAxis, zAxis);
    }

    static void WREN_ENTITY_SET_ENTITY_DYNAMIC(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        ENTITY::SET_ENTITY_DYNAMIC(entity, toggle);
    }

    static void WREN_ENTITY_SET_ENTITY_HEADING(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        float heading = (float)wrenGetSlotDouble(vm, 2);

        ENTITY::SET_ENTITY_HEADING(entity, heading);
    }

    static void WREN_ENTITY_SET_ENTITY_HEALTH(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        int health = (int)wrenGetSlotDouble(vm, 2);
        int p2 = (int)wrenGetSlotDouble(vm, 3);

        ENTITY::SET_ENTITY_HEALTH(entity, health, p2);
    }

    static void WREN_ENTITY_SET_ENTITY_INVINCIBLE(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        ENTITY::SET_ENTITY_INVINCIBLE(entity, toggle);
    }

    static void WREN_ENTITY_SET_ENTITY_IS_TARGET_PRIORITY(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        float p2 = (float)wrenGetSlotDouble(vm, 3);

        ENTITY::SET_ENTITY_IS_TARGET_PRIORITY(entity, p1, p2);
    }

    static void WREN_ENTITY_SET_ENTITY_LIGHTS(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        ENTITY::SET_ENTITY_LIGHTS(entity, toggle);
    }

    static void WREN_ENTITY_SET_ENTITY_LOAD_COLLISION_FLAG(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);

        ENTITY::SET_ENTITY_LOAD_COLLISION_FLAG(entity, toggle, p2);
    }

    static void WREN_ENTITY_HAS_COLLISION_LOADED_AROUND_ENTITY(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        BOOL res = ENTITY::HAS_COLLISION_LOADED_AROUND_ENTITY(entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_ENTITY_SET_ENTITY_MAX_SPEED(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        float speed = (float)wrenGetSlotDouble(vm, 2);

        ENTITY::SET_ENTITY_MAX_SPEED(entity, speed);
    }

    static void WREN_ENTITY_SET_ENTITY_ONLY_DAMAGED_BY_PLAYER(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        ENTITY::SET_ENTITY_ONLY_DAMAGED_BY_PLAYER(entity, toggle);
    }

    static void WREN_ENTITY_SET_ENTITY_ONLY_DAMAGED_BY_RELATIONSHIP_GROUP(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);

        ENTITY::SET_ENTITY_ONLY_DAMAGED_BY_RELATIONSHIP_GROUP(entity, p1, p2);
    }

    static void WREN_ENTITY_SET_ENTITY_PROOFS(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        BOOL bulletProof = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL fireProof = (BOOL)wrenGetSlotBool(vm, 3);
        BOOL explosionProof = (BOOL)wrenGetSlotBool(vm, 4);
        BOOL collisionProof = (BOOL)wrenGetSlotBool(vm, 5);
        BOOL meleeProof = (BOOL)wrenGetSlotBool(vm, 6);
        BOOL p6 = (BOOL)wrenGetSlotBool(vm, 7);
        BOOL p7 = (BOOL)wrenGetSlotBool(vm, 8);
        BOOL drownProof = (BOOL)wrenGetSlotBool(vm, 9);

        ENTITY::SET_ENTITY_PROOFS(entity, bulletProof, fireProof, explosionProof, collisionProof, meleeProof, p6, p7, drownProof);
    }

    static void WREN_ENTITY_GET_ENTITY_PROOFS(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        BOOL bulletProof;
        BOOL fireProof;
        BOOL explosionProof;
        BOOL collisionProof;
        BOOL meleeProof;
        BOOL steamProof;
        BOOL p7;
        BOOL drownProof;

        BOOL res = ENTITY::GET_ENTITY_PROOFS(entity, &bulletProof, &fireProof, &explosionProof, &collisionProof, &meleeProof, &steamProof, &p7, &drownProof);

        wrenEnsureSlots(vm, 18);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotBool(vm, 2, (bool)bulletProof);
        wrenInsertInList(vm, 0, 1, 2);

        wrenSetSlotBool(vm, 3, (bool)fireProof);
        wrenInsertInList(vm, 0, 2, 3);

        wrenSetSlotBool(vm, 4, (bool)explosionProof);
        wrenInsertInList(vm, 0, 3, 4);

        wrenSetSlotBool(vm, 5, (bool)collisionProof);
        wrenInsertInList(vm, 0, 4, 5);

        wrenSetSlotBool(vm, 6, (bool)meleeProof);
        wrenInsertInList(vm, 0, 5, 6);

        wrenSetSlotBool(vm, 7, (bool)steamProof);
        wrenInsertInList(vm, 0, 6, 7);

        wrenSetSlotBool(vm, 8, (bool)p7);
        wrenInsertInList(vm, 0, 7, 8);

        wrenSetSlotBool(vm, 9, (bool)drownProof);
        wrenInsertInList(vm, 0, 8, 9);

    }

    static void WREN_ENTITY_SET_ENTITY_QUATERNION(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);
        float w = (float)wrenGetSlotDouble(vm, 5);

        ENTITY::SET_ENTITY_QUATERNION(entity, x, y, z, w);
    }

    static void WREN_ENTITY_SET_ENTITY_RECORDS_COLLISIONS(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        ENTITY::SET_ENTITY_RECORDS_COLLISIONS(entity, toggle);
    }

    static void WREN_ENTITY_SET_ENTITY_ROTATION(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        float pitch = (float)wrenGetSlotDouble(vm, 2);
        float roll = (float)wrenGetSlotDouble(vm, 3);
        float yaw = (float)wrenGetSlotDouble(vm, 4);
        int rotationOrder = (int)wrenGetSlotDouble(vm, 5);
        BOOL p5 = (BOOL)wrenGetSlotBool(vm, 6);

        ENTITY::SET_ENTITY_ROTATION(entity, pitch, roll, yaw, rotationOrder, p5);
    }

    static void WREN_ENTITY_SET_ENTITY_VISIBLE(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL unk = (BOOL)wrenGetSlotBool(vm, 3);

        ENTITY::SET_ENTITY_VISIBLE(entity, toggle, unk);
    }

    static void WREN_ENTITY_SET_ENTITY_WATER_REFLECTION_FLAG(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        ENTITY::SET_ENTITY_WATER_REFLECTION_FLAG(entity, toggle);
    }

    static void WREN_ENTITY_SET_ENTITY_MIRROR_REFLECTION_FLAG(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        ENTITY::SET_ENTITY_MIRROR_REFLECTION_FLAG(entity, p1);
    }

    static void WREN_ENTITY_SET_ENTITY_VELOCITY(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);

        ENTITY::SET_ENTITY_VELOCITY(entity, x, y, z);
    }

    static void WREN_ENTITY_SET_ENTITY_ANGULAR_VELOCITY(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);

        ENTITY::SET_ENTITY_ANGULAR_VELOCITY(entity, x, y, z);
    }

    static void WREN_ENTITY_SET_ENTITY_HAS_GRAVITY(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        ENTITY::SET_ENTITY_HAS_GRAVITY(entity, toggle);
    }

    static void WREN_ENTITY_SET_ENTITY_LOD_DIST(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        int value = (int)wrenGetSlotDouble(vm, 2);

        ENTITY::SET_ENTITY_LOD_DIST(entity, value);
    }

    static void WREN_ENTITY_GET_ENTITY_LOD_DIST(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        int res = ENTITY::GET_ENTITY_LOD_DIST(entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_ENTITY_SET_ENTITY_ALPHA(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        int alphaLevel = (int)wrenGetSlotDouble(vm, 2);
        BOOL skin = (BOOL)wrenGetSlotBool(vm, 3);

        ENTITY::SET_ENTITY_ALPHA(entity, alphaLevel, skin);
    }

    static void WREN_ENTITY_GET_ENTITY_ALPHA(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        int res = ENTITY::GET_ENTITY_ALPHA(entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_ENTITY_RESET_ENTITY_ALPHA(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        ENTITY::RESET_ENTITY_ALPHA(entity);
    }

    static void WREN_ENTITY_RESET_PICKUP_ENTITY_GLOW(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        ENTITY::RESET_PICKUP_ENTITY_GLOW(entity);
    }

    static void WREN_ENTITY_SET_PICKUP_COLLIDES_WITH_PROJECTILES(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        ENTITY::SET_PICKUP_COLLIDES_WITH_PROJECTILES(p0, p1);
    }

    static void WREN_ENTITY_SET_ENTITY_SORT_BIAS(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);

        ENTITY::SET_ENTITY_SORT_BIAS(entity, p1);
    }

    static void WREN_ENTITY_SET_ENTITY_ALWAYS_PRERENDER(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        ENTITY::SET_ENTITY_ALWAYS_PRERENDER(entity, toggle);
    }

    static void WREN_ENTITY_SET_ENTITY_RENDER_SCORCHED(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        ENTITY::SET_ENTITY_RENDER_SCORCHED(entity, toggle);
    }

    static void WREN_ENTITY_SET_ENTITY_TRAFFICLIGHT_OVERRIDE(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        int state = (int)wrenGetSlotDouble(vm, 2);

        ENTITY::SET_ENTITY_TRAFFICLIGHT_OVERRIDE(entity, state);
    }

    static void WREN_ENTITY_SET_ENTITY_IS_IN_VEHICLE(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        ENTITY::SET_ENTITY_IS_IN_VEHICLE(entity);
    }

    static void WREN_ENTITY_CREATE_MODEL_SWAP(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        float radius = (float)wrenGetSlotDouble(vm, 4);
        Hash originalModel = (Hash)wrenGetSlotDouble(vm, 5);
        Hash newModel = (Hash)wrenGetSlotDouble(vm, 6);
        BOOL p6 = (BOOL)wrenGetSlotBool(vm, 7);

        ENTITY::CREATE_MODEL_SWAP(x, y, z, radius, originalModel, newModel, p6);
    }

    static void WREN_ENTITY_REMOVE_MODEL_SWAP(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        float radius = (float)wrenGetSlotDouble(vm, 4);
        Hash originalModel = (Hash)wrenGetSlotDouble(vm, 5);
        Hash newModel = (Hash)wrenGetSlotDouble(vm, 6);
        BOOL p6 = (BOOL)wrenGetSlotBool(vm, 7);

        ENTITY::REMOVE_MODEL_SWAP(x, y, z, radius, originalModel, newModel, p6);
    }

    static void WREN_ENTITY_CREATE_MODEL_HIDE(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        float radius = (float)wrenGetSlotDouble(vm, 4);
        Hash modelHash = (Hash)wrenGetSlotDouble(vm, 5);
        BOOL p5 = (BOOL)wrenGetSlotBool(vm, 6);

        ENTITY::CREATE_MODEL_HIDE(x, y, z, radius, modelHash, p5);
    }

    static void WREN_ENTITY_CREATE_MODEL_HIDE_EXCLUDING_SCRIPT_OBJECTS(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        float radius = (float)wrenGetSlotDouble(vm, 4);
        Hash modelHash = (Hash)wrenGetSlotDouble(vm, 5);
        BOOL p5 = (BOOL)wrenGetSlotBool(vm, 6);

        ENTITY::CREATE_MODEL_HIDE_EXCLUDING_SCRIPT_OBJECTS(x, y, z, radius, modelHash, p5);
    }

    static void WREN_ENTITY_REMOVE_MODEL_HIDE(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        float radius = (float)wrenGetSlotDouble(vm, 4);
        Hash modelHash = (Hash)wrenGetSlotDouble(vm, 5);
        BOOL p5 = (BOOL)wrenGetSlotBool(vm, 6);

        ENTITY::REMOVE_MODEL_HIDE(x, y, z, radius, modelHash, p5);
    }

    static void WREN_ENTITY_CREATE_FORCED_OBJECT(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);
        Hash modelHash = (Hash)wrenGetSlotDouble(vm, 5);
        BOOL p5 = (BOOL)wrenGetSlotBool(vm, 6);

        ENTITY::CREATE_FORCED_OBJECT(x, y, z, p3, modelHash, p5);
    }

    static void WREN_ENTITY_REMOVE_FORCED_OBJECT(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);

        ENTITY::REMOVE_FORCED_OBJECT(p0, p1, p2, p3, p4);
    }

    static void WREN_ENTITY_SET_ENTITY_NO_COLLISION_ENTITY(WrenVM* vm)
    {
        Entity entity1 = (Entity)wrenGetSlotDouble(vm, 1);
        Entity entity2 = (Entity)wrenGetSlotDouble(vm, 2);
        BOOL thisFrameOnly = (BOOL)wrenGetSlotBool(vm, 3);

        ENTITY::SET_ENTITY_NO_COLLISION_ENTITY(entity1, entity2, thisFrameOnly);
    }

    static void WREN_ENTITY_SET_ENTITY_MOTION_BLUR(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        ENTITY::SET_ENTITY_MOTION_BLUR(entity, toggle);
    }

    static void WREN_ENTITY_SET_CAN_AUTO_VAULT_ON_ENTITY(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        ENTITY::SET_CAN_AUTO_VAULT_ON_ENTITY(entity, toggle);
    }

    static void WREN_ENTITY_SET_CAN_CLIMB_ON_ENTITY(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        ENTITY::SET_CAN_CLIMB_ON_ENTITY(entity, toggle);
    }

    static void WREN_ENTITY_SET_WAIT_FOR_COLLISIONS_BEFORE_PROBE(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        ENTITY::SET_WAIT_FOR_COLLISIONS_BEFORE_PROBE(entity, toggle);
    }

    static void WREN_ENTITY_SET_ENTITY_NOWEAPONDECALS(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        ENTITY::SET_ENTITY_NOWEAPONDECALS(entity, p1);
    }

    static void WREN_ENTITY_SET_ENTITY_USE_MAX_DISTANCE_FOR_WATER_REFLECTION(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        ENTITY::SET_ENTITY_USE_MAX_DISTANCE_FOR_WATER_REFLECTION(entity, p1);
    }

    static void WREN_ENTITY_GET_ENTITY_BONE_ROTATION(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        int boneIndex = (int)wrenGetSlotDouble(vm, 2);

        Vector3 res = ENTITY::GET_ENTITY_BONE_ROTATION(entity, boneIndex);

        wrenEnsureSlots(vm, 1);

        wrenGetVariable(vm, "natives", "Vector3", 0);
        Vector3* wren_res = (Vector3*)wrenSetSlotNewForeign(vm, 0, 0, sizeof(Vector3));
        wren_res->x = res.x;
        wren_res->y = res.y;
        wren_res->z = res.z;
    }

    static void WREN_ENTITY_GET_ENTITY_BONE_POSTION(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        int boneIndex = (int)wrenGetSlotDouble(vm, 2);

        Vector3 res = ENTITY::GET_ENTITY_BONE_POSTION(entity, boneIndex);

        wrenEnsureSlots(vm, 1);

        wrenGetVariable(vm, "natives", "Vector3", 0);
        Vector3* wren_res = (Vector3*)wrenSetSlotNewForeign(vm, 0, 0, sizeof(Vector3));
        wren_res->x = res.x;
        wren_res->y = res.y;
        wren_res->z = res.z;
    }

    static void WREN_ENTITY_GET_ENTITY_BONE_OBJECT_ROTATION(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        int boneIndex = (int)wrenGetSlotDouble(vm, 2);

        Vector3 res = ENTITY::GET_ENTITY_BONE_OBJECT_ROTATION(entity, boneIndex);

        wrenEnsureSlots(vm, 1);

        wrenGetVariable(vm, "natives", "Vector3", 0);
        Vector3* wren_res = (Vector3*)wrenSetSlotNewForeign(vm, 0, 0, sizeof(Vector3));
        wren_res->x = res.x;
        wren_res->y = res.y;
        wren_res->z = res.z;
    }

    static void WREN_ENTITY_GET_ENTITY_BONE_COUNT(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        int res = ENTITY::GET_ENTITY_BONE_COUNT(entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_ENTITY_ENABLE_ENTITY_BULLET_COLLISION(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        ENTITY::ENABLE_ENTITY_BULLET_COLLISION(entity);
    }

    static void WREN_ENTITY_SET_ENTITY_CAN_ONLY_BE_DAMAGED_BY_ENTITY(WrenVM* vm)
    {
        Entity entity1 = (Entity)wrenGetSlotDouble(vm, 1);
        Entity entity2 = (Entity)wrenGetSlotDouble(vm, 2);

        ENTITY::SET_ENTITY_CAN_ONLY_BE_DAMAGED_BY_ENTITY(entity1, entity2);
    }

    static void WREN_ENTITY_SET_ENTITY_CANT_CAUSE_COLLISION_DAMAGED_ENTITY(WrenVM* vm)
    {
        Entity entity1 = (Entity)wrenGetSlotDouble(vm, 1);
        Entity entity2 = (Entity)wrenGetSlotDouble(vm, 2);

        ENTITY::SET_ENTITY_CANT_CAUSE_COLLISION_DAMAGED_ENTITY(entity1, entity2);
    }

    static void WREN_ENTITY_SET_ALLOW_MIGRATE_TO_SPECTATOR(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        ENTITY::SET_ALLOW_MIGRATE_TO_SPECTATOR(entity, p1);
    }

    static void WREN_ENTITY_GET_ENTITY_OF_TYPE_ATTACHED_TO_ENTITY(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        Hash modelHash = (Hash)wrenGetSlotDouble(vm, 2);

        Entity res = ENTITY::GET_ENTITY_OF_TYPE_ATTACHED_TO_ENTITY(entity, modelHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_ENTITY_SET_PICK_UP_BY_CARGOBOB_DISABLED(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        ENTITY::SET_PICK_UP_BY_CARGOBOB_DISABLED(entity, toggle);
    }


    static void WREN_EVENT_SET_DECISION_MAKER(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Hash name = (Hash)wrenGetSlotDouble(vm, 2);

        EVENT::SET_DECISION_MAKER(ped, name);
    }

    static void WREN_EVENT_CLEAR_DECISION_MAKER_EVENT_RESPONSE(WrenVM* vm)
    {
        Hash name = (Hash)wrenGetSlotDouble(vm, 1);
        int eventType = (int)wrenGetSlotDouble(vm, 2);

        EVENT::CLEAR_DECISION_MAKER_EVENT_RESPONSE(name, eventType);
    }

    static void WREN_EVENT_BLOCK_DECISION_MAKER_EVENT(WrenVM* vm)
    {
        Hash name = (Hash)wrenGetSlotDouble(vm, 1);
        int eventType = (int)wrenGetSlotDouble(vm, 2);

        EVENT::BLOCK_DECISION_MAKER_EVENT(name, eventType);
    }

    static void WREN_EVENT_UNBLOCK_DECISION_MAKER_EVENT(WrenVM* vm)
    {
        Hash name = (Hash)wrenGetSlotDouble(vm, 1);
        int eventType = (int)wrenGetSlotDouble(vm, 2);

        EVENT::UNBLOCK_DECISION_MAKER_EVENT(name, eventType);
    }

    static void WREN_EVENT_ADD_SHOCKING_EVENT_AT_POSITION(WrenVM* vm)
    {
        int eventType = (int)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);
        float duration = (float)wrenGetSlotDouble(vm, 5);

        ScrHandle res = EVENT::ADD_SHOCKING_EVENT_AT_POSITION(eventType, x, y, z, duration);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_EVENT_ADD_SHOCKING_EVENT_FOR_ENTITY(WrenVM* vm)
    {
        int eventType = (int)wrenGetSlotDouble(vm, 1);
        Entity entity = (Entity)wrenGetSlotDouble(vm, 2);
        float duration = (float)wrenGetSlotDouble(vm, 3);

        ScrHandle res = EVENT::ADD_SHOCKING_EVENT_FOR_ENTITY(eventType, entity, duration);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_EVENT_IS_SHOCKING_EVENT_IN_SPHERE(WrenVM* vm)
    {
        int eventType = (int)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);
        float radius = (float)wrenGetSlotDouble(vm, 5);

        BOOL res = EVENT::IS_SHOCKING_EVENT_IN_SPHERE(eventType, x, y, z, radius);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_EVENT_REMOVE_SHOCKING_EVENT(WrenVM* vm)
    {
        ScrHandle event = (ScrHandle)wrenGetSlotDouble(vm, 1);

        BOOL res = EVENT::REMOVE_SHOCKING_EVENT(event);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_EVENT_REMOVE_ALL_SHOCKING_EVENTS(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        EVENT::REMOVE_ALL_SHOCKING_EVENTS(p0);
    }

    static void WREN_EVENT_REMOVE_SHOCKING_EVENT_SPAWN_BLOCKING_AREAS(WrenVM* vm)
    {

        EVENT::REMOVE_SHOCKING_EVENT_SPAWN_BLOCKING_AREAS();
    }

    static void WREN_EVENT_SUPPRESS_SHOCKING_EVENTS_NEXT_FRAME(WrenVM* vm)
    {

        EVENT::SUPPRESS_SHOCKING_EVENTS_NEXT_FRAME();
    }

    static void WREN_EVENT_SUPPRESS_SHOCKING_EVENT_TYPE_NEXT_FRAME(WrenVM* vm)
    {
        int eventType = (int)wrenGetSlotDouble(vm, 1);

        EVENT::SUPPRESS_SHOCKING_EVENT_TYPE_NEXT_FRAME(eventType);
    }

    static void WREN_EVENT_SUPPRESS_AGITATION_EVENTS_NEXT_FRAME(WrenVM* vm)
    {

        EVENT::SUPPRESS_AGITATION_EVENTS_NEXT_FRAME();
    }


    static void WREN_FILES_GET_NUM_TATTOO_SHOP_DLC_ITEMS(WrenVM* vm)
    {
        int character = (int)wrenGetSlotDouble(vm, 1);

        int res = FILES::GET_NUM_TATTOO_SHOP_DLC_ITEMS(character);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_FILES_GET_TATTOO_SHOP_DLC_ITEM_DATA(WrenVM* vm)
    {
        int characterType = (int)wrenGetSlotDouble(vm, 1);
        int decorationIndex = (int)wrenGetSlotDouble(vm, 2);
        Any outComponent;

        BOOL res = FILES::GET_TATTOO_SHOP_DLC_ITEM_DATA(characterType, decorationIndex, &outComponent);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, outComponent);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_FILES_GET_TATTOO_SHOP_DLC_ITEM_INDEX(WrenVM* vm)
    {
        Hash overlayHash = (Hash)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        int character = (int)wrenGetSlotDouble(vm, 3);

        int res = FILES::GET_TATTOO_SHOP_DLC_ITEM_INDEX(overlayHash, p1, character);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_FILES_INIT_SHOP_PED_COMPONENT(WrenVM* vm)
    {
        Any outComponent;

        FILES::INIT_SHOP_PED_COMPONENT(&outComponent);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_FILES_INIT_SHOP_PED_PROP(WrenVM* vm)
    {
        Any outProp;

        FILES::INIT_SHOP_PED_PROP(&outProp);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_FILES_SETUP_SHOP_PED_APPAREL_QUERY(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);
        int p2 = (int)wrenGetSlotDouble(vm, 3);
        int p3 = (int)wrenGetSlotDouble(vm, 4);

        int res = FILES::SETUP_SHOP_PED_APPAREL_QUERY(p0, p1, p2, p3);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_FILES_SETUP_SHOP_PED_APPAREL_QUERY_TU(WrenVM* vm)
    {
        int character = (int)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);
        int p2 = (int)wrenGetSlotDouble(vm, 3);
        BOOL p3 = (BOOL)wrenGetSlotBool(vm, 4);
        int p4 = (int)wrenGetSlotDouble(vm, 5);
        int componentId = (int)wrenGetSlotDouble(vm, 6);

        int res = FILES::SETUP_SHOP_PED_APPAREL_QUERY_TU(character, p1, p2, p3, p4, componentId);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_FILES_GET_SHOP_PED_QUERY_COMPONENT(WrenVM* vm)
    {
        int componentId = (int)wrenGetSlotDouble(vm, 1);
        Any outComponent;

        FILES::GET_SHOP_PED_QUERY_COMPONENT(componentId, &outComponent);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_FILES_GET_SHOP_PED_QUERY_COMPONENT_INDEX(WrenVM* vm)
    {
        Hash componentHash = (Hash)wrenGetSlotDouble(vm, 1);

        int res = FILES::GET_SHOP_PED_QUERY_COMPONENT_INDEX(componentHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_FILES_GET_SHOP_PED_COMPONENT(WrenVM* vm)
    {
        Hash componentHash = (Hash)wrenGetSlotDouble(vm, 1);
        Any outComponent;

        FILES::GET_SHOP_PED_COMPONENT(componentHash, &outComponent);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_FILES_GET_SHOP_PED_QUERY_PROP(WrenVM* vm)
    {
        int componentId = (int)wrenGetSlotDouble(vm, 1);
        Any outProp;

        FILES::GET_SHOP_PED_QUERY_PROP(componentId, &outProp);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_FILES_GET_SHOP_PED_QUERY_PROP_INDEX(WrenVM* vm)
    {
        Hash componentHash = (Hash)wrenGetSlotDouble(vm, 1);

        int res = FILES::GET_SHOP_PED_QUERY_PROP_INDEX(componentHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_FILES_GET_SHOP_PED_PROP(WrenVM* vm)
    {
        Hash componentHash = (Hash)wrenGetSlotDouble(vm, 1);
        Any outProp;

        FILES::GET_SHOP_PED_PROP(componentHash, &outProp);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_FILES_GET_HASH_NAME_FOR_COMPONENT(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        int componentId = (int)wrenGetSlotDouble(vm, 2);
        int drawableVariant = (int)wrenGetSlotDouble(vm, 3);
        int textureVariant = (int)wrenGetSlotDouble(vm, 4);

        Hash res = FILES::GET_HASH_NAME_FOR_COMPONENT(entity, componentId, drawableVariant, textureVariant);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_FILES_GET_HASH_NAME_FOR_PROP(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        int componentId = (int)wrenGetSlotDouble(vm, 2);
        int propIndex = (int)wrenGetSlotDouble(vm, 3);
        int propTextureIndex = (int)wrenGetSlotDouble(vm, 4);

        Hash res = FILES::GET_HASH_NAME_FOR_PROP(entity, componentId, propIndex, propTextureIndex);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_FILES_GET_SHOP_PED_APPAREL_VARIANT_COMPONENT_COUNT(WrenVM* vm)
    {
        Hash componentHash = (Hash)wrenGetSlotDouble(vm, 1);

        int res = FILES::GET_SHOP_PED_APPAREL_VARIANT_COMPONENT_COUNT(componentHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_FILES_GET_SHOP_PED_APPAREL_VARIANT_PROP_COUNT(WrenVM* vm)
    {
        Hash propHash = (Hash)wrenGetSlotDouble(vm, 1);

        int res = FILES::GET_SHOP_PED_APPAREL_VARIANT_PROP_COUNT(propHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_FILES_GET_VARIANT_COMPONENT(WrenVM* vm)
    {
        Hash componentHash = (Hash)wrenGetSlotDouble(vm, 1);
        int variantComponentIndex = (int)wrenGetSlotDouble(vm, 2);
        Hash nameHash;
        int enumValue;
        int componentType;

        FILES::GET_VARIANT_COMPONENT(componentHash, variantComponentIndex, &nameHash, &enumValue, &componentType);

        wrenEnsureSlots(vm, 6);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, nameHash);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, enumValue);
        wrenInsertInList(vm, 0, 1, 2);

        wrenSetSlotDouble(vm, 3, componentType);
        wrenInsertInList(vm, 0, 2, 3);

    }

    static void WREN_FILES_GET_VARIANT_PROP(WrenVM* vm)
    {
        Hash componentHash = (Hash)wrenGetSlotDouble(vm, 1);
        int variantPropIndex = (int)wrenGetSlotDouble(vm, 2);
        Hash nameHash;
        int enumValue;
        int anchorPoint;

        FILES::GET_VARIANT_PROP(componentHash, variantPropIndex, &nameHash, &enumValue, &anchorPoint);

        wrenEnsureSlots(vm, 6);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, nameHash);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, enumValue);
        wrenInsertInList(vm, 0, 1, 2);

        wrenSetSlotDouble(vm, 3, anchorPoint);
        wrenInsertInList(vm, 0, 2, 3);

    }

    static void WREN_FILES_GET_SHOP_PED_APPAREL_FORCED_COMPONENT_COUNT(WrenVM* vm)
    {
        Hash componentHash = (Hash)wrenGetSlotDouble(vm, 1);

        int res = FILES::GET_SHOP_PED_APPAREL_FORCED_COMPONENT_COUNT(componentHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_FILES_GET_SHOP_PED_APPAREL_FORCED_PROP_COUNT(WrenVM* vm)
    {
        Hash componentHash = (Hash)wrenGetSlotDouble(vm, 1);

        int res = FILES::GET_SHOP_PED_APPAREL_FORCED_PROP_COUNT(componentHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_FILES_GET_FORCED_COMPONENT(WrenVM* vm)
    {
        Hash componentHash = (Hash)wrenGetSlotDouble(vm, 1);
        int forcedComponentIndex = (int)wrenGetSlotDouble(vm, 2);
        Hash nameHash;
        int enumValue;
        int componentType;

        FILES::GET_FORCED_COMPONENT(componentHash, forcedComponentIndex, &nameHash, &enumValue, &componentType);

        wrenEnsureSlots(vm, 6);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, nameHash);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, enumValue);
        wrenInsertInList(vm, 0, 1, 2);

        wrenSetSlotDouble(vm, 3, componentType);
        wrenInsertInList(vm, 0, 2, 3);

    }

    static void WREN_FILES_GET_FORCED_PROP(WrenVM* vm)
    {
        Hash componentHash = (Hash)wrenGetSlotDouble(vm, 1);
        int forcedPropIndex = (int)wrenGetSlotDouble(vm, 2);
        Hash nameHash;
        int enumValue;
        int anchorPoint;

        FILES::GET_FORCED_PROP(componentHash, forcedPropIndex, &nameHash, &enumValue, &anchorPoint);

        wrenEnsureSlots(vm, 6);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, nameHash);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, enumValue);
        wrenInsertInList(vm, 0, 1, 2);

        wrenSetSlotDouble(vm, 3, anchorPoint);
        wrenInsertInList(vm, 0, 2, 3);

    }

    static void WREN_FILES_DOES_SHOP_PED_APPAREL_HAVE_RESTRICTION_TAG(WrenVM* vm)
    {
        Hash componentHash = (Hash)wrenGetSlotDouble(vm, 1);
        Hash restrictionTagHash = (Hash)wrenGetSlotDouble(vm, 2);
        int componentId = (int)wrenGetSlotDouble(vm, 3);

        BOOL res = FILES::DOES_SHOP_PED_APPAREL_HAVE_RESTRICTION_TAG(componentHash, restrictionTagHash, componentId);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_FILES_DOES_CURRENT_PED_COMPONENT_HAVE_RESTRICTION_TAG(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int componentId = (int)wrenGetSlotDouble(vm, 2);
        Hash restrictionTagHash = (Hash)wrenGetSlotDouble(vm, 3);

        BOOL res = FILES::DOES_CURRENT_PED_COMPONENT_HAVE_RESTRICTION_TAG(ped, componentId, restrictionTagHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_FILES_DOES_CURRENT_PED_PROP_HAVE_RESTRICTION_TAG(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int componentId = (int)wrenGetSlotDouble(vm, 2);
        Hash restrictionTagHash = (Hash)wrenGetSlotDouble(vm, 3);

        BOOL res = FILES::DOES_CURRENT_PED_PROP_HAVE_RESTRICTION_TAG(ped, componentId, restrictionTagHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_FILES_SETUP_SHOP_PED_OUTFIT_QUERY(WrenVM* vm)
    {
        int character = (int)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        int res = FILES::SETUP_SHOP_PED_OUTFIT_QUERY(character, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_FILES_GET_SHOP_PED_QUERY_OUTFIT(WrenVM* vm)
    {
        int outfitIndex = (int)wrenGetSlotDouble(vm, 1);
        Any outfit;

        FILES::GET_SHOP_PED_QUERY_OUTFIT(outfitIndex, &outfit);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_FILES_GET_SHOP_PED_OUTFIT(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1;

        FILES::GET_SHOP_PED_OUTFIT(p0, &p1);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_FILES_GET_SHOP_PED_OUTFIT_LOCATE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        int res = FILES::GET_SHOP_PED_OUTFIT_LOCATE(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_FILES_GET_SHOP_PED_OUTFIT_PROP_VARIANT(WrenVM* vm)
    {
        Hash outfitHash = (Hash)wrenGetSlotDouble(vm, 1);
        int variantIndex = (int)wrenGetSlotDouble(vm, 2);
        Any outPropVariant;

        BOOL res = FILES::GET_SHOP_PED_OUTFIT_PROP_VARIANT(outfitHash, variantIndex, &outPropVariant);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, outPropVariant);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_FILES_GET_SHOP_PED_OUTFIT_COMPONENT_VARIANT(WrenVM* vm)
    {
        Hash outfitHash = (Hash)wrenGetSlotDouble(vm, 1);
        int variantIndex = (int)wrenGetSlotDouble(vm, 2);
        Any outComponentVariant;

        BOOL res = FILES::GET_SHOP_PED_OUTFIT_COMPONENT_VARIANT(outfitHash, variantIndex, &outComponentVariant);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, outComponentVariant);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_FILES_GET_NUM_DLC_VEHICLES(WrenVM* vm)
    {

        int res = FILES::GET_NUM_DLC_VEHICLES();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_FILES_GET_DLC_VEHICLE_MODEL(WrenVM* vm)
    {
        int dlcVehicleIndex = (int)wrenGetSlotDouble(vm, 1);

        Hash res = FILES::GET_DLC_VEHICLE_MODEL(dlcVehicleIndex);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_FILES_GET_DLC_VEHICLE_DATA(WrenVM* vm)
    {
        int dlcVehicleIndex = (int)wrenGetSlotDouble(vm, 1);
        Any outData;

        BOOL res = FILES::GET_DLC_VEHICLE_DATA(dlcVehicleIndex, &outData);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, outData);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_FILES_GET_DLC_VEHICLE_FLAGS(WrenVM* vm)
    {
        int dlcVehicleIndex = (int)wrenGetSlotDouble(vm, 1);

        int res = FILES::GET_DLC_VEHICLE_FLAGS(dlcVehicleIndex);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_FILES_GET_NUM_DLC_WEAPONS(WrenVM* vm)
    {

        int res = FILES::GET_NUM_DLC_WEAPONS();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_FILES_GET_NUM_DLC_WEAPONS_SP(WrenVM* vm)
    {

        int res = FILES::GET_NUM_DLC_WEAPONS_SP();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_FILES_GET_DLC_WEAPON_DATA(WrenVM* vm)
    {
        int dlcWeaponIndex = (int)wrenGetSlotDouble(vm, 1);
        Any outData;

        BOOL res = FILES::GET_DLC_WEAPON_DATA(dlcWeaponIndex, &outData);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, outData);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_FILES_GET_DLC_WEAPON_DATA_SP(WrenVM* vm)
    {
        int dlcWeaponIndex = (int)wrenGetSlotDouble(vm, 1);
        Any outData;

        BOOL res = FILES::GET_DLC_WEAPON_DATA_SP(dlcWeaponIndex, &outData);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, outData);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_FILES_GET_NUM_DLC_WEAPON_COMPONENTS(WrenVM* vm)
    {
        int dlcWeaponIndex = (int)wrenGetSlotDouble(vm, 1);

        int res = FILES::GET_NUM_DLC_WEAPON_COMPONENTS(dlcWeaponIndex);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_FILES_GET_NUM_DLC_WEAPON_COMPONENTS_SP(WrenVM* vm)
    {
        int dlcWeaponIndex = (int)wrenGetSlotDouble(vm, 1);

        int res = FILES::GET_NUM_DLC_WEAPON_COMPONENTS_SP(dlcWeaponIndex);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_FILES_GET_DLC_WEAPON_COMPONENT_DATA(WrenVM* vm)
    {
        int dlcWeaponIndex = (int)wrenGetSlotDouble(vm, 1);
        int dlcWeapCompIndex = (int)wrenGetSlotDouble(vm, 2);
        Any ComponentDataPtr;

        BOOL res = FILES::GET_DLC_WEAPON_COMPONENT_DATA(dlcWeaponIndex, dlcWeapCompIndex, &ComponentDataPtr);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, ComponentDataPtr);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_FILES_GET_DLC_WEAPON_COMPONENT_DATA_SP(WrenVM* vm)
    {
        int dlcWeaponIndex = (int)wrenGetSlotDouble(vm, 1);
        int dlcWeapCompIndex = (int)wrenGetSlotDouble(vm, 2);
        Any ComponentDataPtr;

        BOOL res = FILES::GET_DLC_WEAPON_COMPONENT_DATA_SP(dlcWeaponIndex, dlcWeapCompIndex, &ComponentDataPtr);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, ComponentDataPtr);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_FILES_IS_CONTENT_ITEM_LOCKED(WrenVM* vm)
    {
        Hash itemHash = (Hash)wrenGetSlotDouble(vm, 1);

        BOOL res = FILES::IS_CONTENT_ITEM_LOCKED(itemHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_FILES_IS_DLC_VEHICLE_MOD(WrenVM* vm)
    {
        Hash hash = (Hash)wrenGetSlotDouble(vm, 1);

        BOOL res = FILES::IS_DLC_VEHICLE_MOD(hash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_FILES_GET_DLC_VEHICLE_MOD_LOCK_HASH(WrenVM* vm)
    {
        Hash hash = (Hash)wrenGetSlotDouble(vm, 1);

        Hash res = FILES::GET_DLC_VEHICLE_MOD_LOCK_HASH(hash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_FILES_EXECUTE_CONTENT_CHANGESET_GROUP_FOR_ALL(WrenVM* vm)
    {
        Hash hash = (Hash)wrenGetSlotDouble(vm, 1);

        FILES::EXECUTE_CONTENT_CHANGESET_GROUP_FOR_ALL(hash);
    }

    static void WREN_FILES_REVERT_CONTENT_CHANGESET_GROUP_FOR_ALL(WrenVM* vm)
    {
        Hash hash = (Hash)wrenGetSlotDouble(vm, 1);

        FILES::REVERT_CONTENT_CHANGESET_GROUP_FOR_ALL(hash);
    }


    static void WREN_FIRE_START_SCRIPT_FIRE(WrenVM* vm)
    {
        float X = (float)wrenGetSlotDouble(vm, 1);
        float Y = (float)wrenGetSlotDouble(vm, 2);
        float Z = (float)wrenGetSlotDouble(vm, 3);
        int maxChildren = (int)wrenGetSlotDouble(vm, 4);
        BOOL isGasFire = (BOOL)wrenGetSlotBool(vm, 5);

        FireId res = FIRE::START_SCRIPT_FIRE(X, Y, Z, maxChildren, isGasFire);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_FIRE_REMOVE_SCRIPT_FIRE(WrenVM* vm)
    {
        FireId fireHandle = (FireId)wrenGetSlotDouble(vm, 1);

        FIRE::REMOVE_SCRIPT_FIRE(fireHandle);
    }

    static void WREN_FIRE_START_ENTITY_FIRE(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        FireId res = FIRE::START_ENTITY_FIRE(entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_FIRE_STOP_ENTITY_FIRE(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        FIRE::STOP_ENTITY_FIRE(entity);
    }

    static void WREN_FIRE_IS_ENTITY_ON_FIRE(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        BOOL res = FIRE::IS_ENTITY_ON_FIRE(entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_FIRE_GET_NUMBER_OF_FIRES_IN_RANGE(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        float radius = (float)wrenGetSlotDouble(vm, 4);

        int res = FIRE::GET_NUMBER_OF_FIRES_IN_RANGE(x, y, z, radius);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_FIRE_SET_FLAMMABILITY_MULTIPLIER(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);

        FIRE::SET_FLAMMABILITY_MULTIPLIER(p0);
    }

    static void WREN_FIRE_STOP_FIRE_IN_RANGE(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        float radius = (float)wrenGetSlotDouble(vm, 4);

        FIRE::STOP_FIRE_IN_RANGE(x, y, z, radius);
    }

    static void WREN_FIRE_GET_CLOSEST_FIRE_POS(WrenVM* vm)
    {
        Vector3 outPosition;
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);

        BOOL res = FIRE::GET_CLOSEST_FIRE_POS(&outPosition, x, y, z);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenGetVariable(vm, "natives", "Vector3", 2);
        Vector3* wren_outPosition = (Vector3*)wrenSetSlotNewForeign(vm, 3, 2, sizeof(Vector3));
        wren_outPosition->x = outPosition.x;
        wren_outPosition->y = outPosition.y;
        wren_outPosition->z = outPosition.z;
        wrenInsertInList(vm, 0, 1, 3);

    }

    static void WREN_FIRE_ADD_EXPLOSION(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        int explosionType = (int)wrenGetSlotDouble(vm, 4);
        float damageScale = (float)wrenGetSlotDouble(vm, 5);
        BOOL isAudible = (BOOL)wrenGetSlotBool(vm, 6);
        BOOL isInvisible = (BOOL)wrenGetSlotBool(vm, 7);
        float cameraShake = (float)wrenGetSlotDouble(vm, 8);
        BOOL noDamage = (BOOL)wrenGetSlotBool(vm, 9);

        FIRE::ADD_EXPLOSION(x, y, z, explosionType, damageScale, isAudible, isInvisible, cameraShake, noDamage);
    }

    static void WREN_FIRE_ADD_OWNED_EXPLOSION(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);
        int explosionType = (int)wrenGetSlotDouble(vm, 5);
        float damageScale = (float)wrenGetSlotDouble(vm, 6);
        BOOL isAudible = (BOOL)wrenGetSlotBool(vm, 7);
        BOOL isInvisible = (BOOL)wrenGetSlotBool(vm, 8);
        float cameraShake = (float)wrenGetSlotDouble(vm, 9);

        FIRE::ADD_OWNED_EXPLOSION(ped, x, y, z, explosionType, damageScale, isAudible, isInvisible, cameraShake);
    }

    static void WREN_FIRE_ADD_EXPLOSION_WITH_USER_VFX(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        int explosionType = (int)wrenGetSlotDouble(vm, 4);
        Hash explosionFx = (Hash)wrenGetSlotDouble(vm, 5);
        float damageScale = (float)wrenGetSlotDouble(vm, 6);
        BOOL isAudible = (BOOL)wrenGetSlotBool(vm, 7);
        BOOL isInvisible = (BOOL)wrenGetSlotBool(vm, 8);
        float cameraShake = (float)wrenGetSlotDouble(vm, 9);

        FIRE::ADD_EXPLOSION_WITH_USER_VFX(x, y, z, explosionType, explosionFx, damageScale, isAudible, isInvisible, cameraShake);
    }

    static void WREN_FIRE_IS_EXPLOSION_IN_AREA(WrenVM* vm)
    {
        int explosionType = (int)wrenGetSlotDouble(vm, 1);
        float x1 = (float)wrenGetSlotDouble(vm, 2);
        float y1 = (float)wrenGetSlotDouble(vm, 3);
        float z1 = (float)wrenGetSlotDouble(vm, 4);
        float x2 = (float)wrenGetSlotDouble(vm, 5);
        float y2 = (float)wrenGetSlotDouble(vm, 6);
        float z2 = (float)wrenGetSlotDouble(vm, 7);

        BOOL res = FIRE::IS_EXPLOSION_IN_AREA(explosionType, x1, y1, z1, x2, y2, z2);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_FIRE_IS_EXPLOSION_ACTIVE_IN_AREA(WrenVM* vm)
    {
        int explosionType = (int)wrenGetSlotDouble(vm, 1);
        float x1 = (float)wrenGetSlotDouble(vm, 2);
        float y1 = (float)wrenGetSlotDouble(vm, 3);
        float z1 = (float)wrenGetSlotDouble(vm, 4);
        float x2 = (float)wrenGetSlotDouble(vm, 5);
        float y2 = (float)wrenGetSlotDouble(vm, 6);
        float z2 = (float)wrenGetSlotDouble(vm, 7);

        BOOL res = FIRE::IS_EXPLOSION_ACTIVE_IN_AREA(explosionType, x1, y1, z1, x2, y2, z2);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_FIRE_IS_EXPLOSION_IN_SPHERE(WrenVM* vm)
    {
        int explosionType = (int)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);
        float radius = (float)wrenGetSlotDouble(vm, 5);

        BOOL res = FIRE::IS_EXPLOSION_IN_SPHERE(explosionType, x, y, z, radius);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_FIRE_GET_OWNER_OF_EXPLOSION_IN_SPHERE(WrenVM* vm)
    {
        int explosionType = (int)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);
        float radius = (float)wrenGetSlotDouble(vm, 5);

        Entity res = FIRE::GET_OWNER_OF_EXPLOSION_IN_SPHERE(explosionType, x, y, z, radius);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_FIRE_IS_EXPLOSION_IN_ANGLED_AREA(WrenVM* vm)
    {
        int explosionType = (int)wrenGetSlotDouble(vm, 1);
        float x1 = (float)wrenGetSlotDouble(vm, 2);
        float y1 = (float)wrenGetSlotDouble(vm, 3);
        float z1 = (float)wrenGetSlotDouble(vm, 4);
        float x2 = (float)wrenGetSlotDouble(vm, 5);
        float y2 = (float)wrenGetSlotDouble(vm, 6);
        float z2 = (float)wrenGetSlotDouble(vm, 7);
        float width = (float)wrenGetSlotDouble(vm, 8);

        BOOL res = FIRE::IS_EXPLOSION_IN_ANGLED_AREA(explosionType, x1, y1, z1, x2, y2, z2, width);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_FIRE_GET_OWNER_OF_EXPLOSION_IN_ANGLED_AREA(WrenVM* vm)
    {
        int explosionType = (int)wrenGetSlotDouble(vm, 1);
        float x1 = (float)wrenGetSlotDouble(vm, 2);
        float y1 = (float)wrenGetSlotDouble(vm, 3);
        float z1 = (float)wrenGetSlotDouble(vm, 4);
        float x2 = (float)wrenGetSlotDouble(vm, 5);
        float y2 = (float)wrenGetSlotDouble(vm, 6);
        float z2 = (float)wrenGetSlotDouble(vm, 7);
        float radius = (float)wrenGetSlotDouble(vm, 8);

        Entity res = FIRE::GET_OWNER_OF_EXPLOSION_IN_ANGLED_AREA(explosionType, x1, y1, z1, x2, y2, z2, radius);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }


    static void WREN_GRAPHICS_SET_DEBUG_LINES_AND_SPHERES_DRAWING_ACTIVE(WrenVM* vm)
    {
        BOOL enabled = (BOOL)wrenGetSlotBool(vm, 1);

        GRAPHICS::SET_DEBUG_LINES_AND_SPHERES_DRAWING_ACTIVE(enabled);
    }

    static void WREN_GRAPHICS_DRAW_DEBUG_LINE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);
        Any p5 = (Any)wrenGetSlotDouble(vm, 6);
        Any p6 = (Any)wrenGetSlotDouble(vm, 7);
        Any p7 = (Any)wrenGetSlotDouble(vm, 8);
        Any p8 = (Any)wrenGetSlotDouble(vm, 9);
        Any p9 = (Any)wrenGetSlotDouble(vm, 10);

        GRAPHICS::DRAW_DEBUG_LINE(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
    }

    static void WREN_GRAPHICS_DRAW_DEBUG_LINE_WITH_TWO_COLOURS(WrenVM* vm)
    {
        float x1 = (float)wrenGetSlotDouble(vm, 1);
        float y1 = (float)wrenGetSlotDouble(vm, 2);
        float z1 = (float)wrenGetSlotDouble(vm, 3);
        float x2 = (float)wrenGetSlotDouble(vm, 4);
        float y2 = (float)wrenGetSlotDouble(vm, 5);
        float z2 = (float)wrenGetSlotDouble(vm, 6);
        int r1 = (int)wrenGetSlotDouble(vm, 7);
        int g1 = (int)wrenGetSlotDouble(vm, 8);
        int b1 = (int)wrenGetSlotDouble(vm, 9);
        int r2 = (int)wrenGetSlotDouble(vm, 10);
        int g2 = (int)wrenGetSlotDouble(vm, 11);
        int b2 = (int)wrenGetSlotDouble(vm, 12);
        int alpha1 = (int)wrenGetSlotDouble(vm, 13);
        int alpha2 = (int)wrenGetSlotDouble(vm, 14);

        GRAPHICS::DRAW_DEBUG_LINE_WITH_TWO_COLOURS(x1, y1, z1, x2, y2, z2, r1, g1, b1, r2, g2, b2, alpha1, alpha2);
    }

    static void WREN_GRAPHICS_DRAW_DEBUG_SPHERE(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        float radius = (float)wrenGetSlotDouble(vm, 4);
        int red = (int)wrenGetSlotDouble(vm, 5);
        int green = (int)wrenGetSlotDouble(vm, 6);
        int blue = (int)wrenGetSlotDouble(vm, 7);
        int alpha = (int)wrenGetSlotDouble(vm, 8);

        GRAPHICS::DRAW_DEBUG_SPHERE(x, y, z, radius, red, green, blue, alpha);
    }

    static void WREN_GRAPHICS_DRAW_DEBUG_BOX(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);
        Any p5 = (Any)wrenGetSlotDouble(vm, 6);
        Any p6 = (Any)wrenGetSlotDouble(vm, 7);
        Any p7 = (Any)wrenGetSlotDouble(vm, 8);
        Any p8 = (Any)wrenGetSlotDouble(vm, 9);
        Any p9 = (Any)wrenGetSlotDouble(vm, 10);

        GRAPHICS::DRAW_DEBUG_BOX(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
    }

    static void WREN_GRAPHICS_DRAW_DEBUG_CROSS(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        float size = (float)wrenGetSlotDouble(vm, 4);
        int red = (int)wrenGetSlotDouble(vm, 5);
        int green = (int)wrenGetSlotDouble(vm, 6);
        int blue = (int)wrenGetSlotDouble(vm, 7);
        int alpha = (int)wrenGetSlotDouble(vm, 8);

        GRAPHICS::DRAW_DEBUG_CROSS(x, y, z, size, red, green, blue, alpha);
    }

    static void WREN_GRAPHICS_DRAW_DEBUG_TEXT(WrenVM* vm)
    {
        const char* text = wrenGetSlotString(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);
        int red = (int)wrenGetSlotDouble(vm, 5);
        int green = (int)wrenGetSlotDouble(vm, 6);
        int blue = (int)wrenGetSlotDouble(vm, 7);
        int alpha = (int)wrenGetSlotDouble(vm, 8);

        GRAPHICS::DRAW_DEBUG_TEXT(text, x, y, z, red, green, blue, alpha);
    }

    static void WREN_GRAPHICS_DRAW_DEBUG_TEXT_2D(WrenVM* vm)
    {
        const char* text = wrenGetSlotString(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);
        int red = (int)wrenGetSlotDouble(vm, 5);
        int green = (int)wrenGetSlotDouble(vm, 6);
        int blue = (int)wrenGetSlotDouble(vm, 7);
        int alpha = (int)wrenGetSlotDouble(vm, 8);

        GRAPHICS::DRAW_DEBUG_TEXT_2D(text, x, y, z, red, green, blue, alpha);
    }

    static void WREN_GRAPHICS_DRAW_LINE(WrenVM* vm)
    {
        float x1 = (float)wrenGetSlotDouble(vm, 1);
        float y1 = (float)wrenGetSlotDouble(vm, 2);
        float z1 = (float)wrenGetSlotDouble(vm, 3);
        float x2 = (float)wrenGetSlotDouble(vm, 4);
        float y2 = (float)wrenGetSlotDouble(vm, 5);
        float z2 = (float)wrenGetSlotDouble(vm, 6);
        int red = (int)wrenGetSlotDouble(vm, 7);
        int green = (int)wrenGetSlotDouble(vm, 8);
        int blue = (int)wrenGetSlotDouble(vm, 9);
        int alpha = (int)wrenGetSlotDouble(vm, 10);

        GRAPHICS::DRAW_LINE(x1, y1, z1, x2, y2, z2, red, green, blue, alpha);
    }

    static void WREN_GRAPHICS_DRAW_POLY(WrenVM* vm)
    {
        float x1 = (float)wrenGetSlotDouble(vm, 1);
        float y1 = (float)wrenGetSlotDouble(vm, 2);
        float z1 = (float)wrenGetSlotDouble(vm, 3);
        float x2 = (float)wrenGetSlotDouble(vm, 4);
        float y2 = (float)wrenGetSlotDouble(vm, 5);
        float z2 = (float)wrenGetSlotDouble(vm, 6);
        float x3 = (float)wrenGetSlotDouble(vm, 7);
        float y3 = (float)wrenGetSlotDouble(vm, 8);
        float z3 = (float)wrenGetSlotDouble(vm, 9);
        int red = (int)wrenGetSlotDouble(vm, 10);
        int green = (int)wrenGetSlotDouble(vm, 11);
        int blue = (int)wrenGetSlotDouble(vm, 12);
        int alpha = (int)wrenGetSlotDouble(vm, 13);

        GRAPHICS::DRAW_POLY(x1, y1, z1, x2, y2, z2, x3, y3, z3, red, green, blue, alpha);
    }

    static void WREN_GRAPHICS_DRAW_TEXTURED_POLY(WrenVM* vm)
    {
        float x1 = (float)wrenGetSlotDouble(vm, 1);
        float y1 = (float)wrenGetSlotDouble(vm, 2);
        float z1 = (float)wrenGetSlotDouble(vm, 3);
        float x2 = (float)wrenGetSlotDouble(vm, 4);
        float y2 = (float)wrenGetSlotDouble(vm, 5);
        float z2 = (float)wrenGetSlotDouble(vm, 6);
        float x3 = (float)wrenGetSlotDouble(vm, 7);
        float y3 = (float)wrenGetSlotDouble(vm, 8);
        float z3 = (float)wrenGetSlotDouble(vm, 9);
        int red = (int)wrenGetSlotDouble(vm, 10);
        int green = (int)wrenGetSlotDouble(vm, 11);
        int blue = (int)wrenGetSlotDouble(vm, 12);
        int alpha = (int)wrenGetSlotDouble(vm, 13);
        const char* textureDict = wrenGetSlotString(vm, 14);
        const char* textureName = wrenGetSlotString(vm, 15);
        float u1 = (float)wrenGetSlotDouble(vm, 16);
        float v1 = (float)wrenGetSlotDouble(vm, 17);
        float w1 = (float)wrenGetSlotDouble(vm, 18);
        float u2 = (float)wrenGetSlotDouble(vm, 19);
        float v2 = (float)wrenGetSlotDouble(vm, 20);
        float w2 = (float)wrenGetSlotDouble(vm, 21);
        float u3 = (float)wrenGetSlotDouble(vm, 22);
        float v3 = (float)wrenGetSlotDouble(vm, 23);
        float w3 = (float)wrenGetSlotDouble(vm, 24);

        GRAPHICS::DRAW_TEXTURED_POLY(x1, y1, z1, x2, y2, z2, x3, y3, z3, red, green, blue, alpha, textureDict, textureName, u1, v1, w1, u2, v2, w2, u3, v3, w3);
    }

    static void WREN_GRAPHICS_DRAW_TEXTURED_POLY_WITH_THREE_COLOURS(WrenVM* vm)
    {
        float x1 = (float)wrenGetSlotDouble(vm, 1);
        float y1 = (float)wrenGetSlotDouble(vm, 2);
        float z1 = (float)wrenGetSlotDouble(vm, 3);
        float x2 = (float)wrenGetSlotDouble(vm, 4);
        float y2 = (float)wrenGetSlotDouble(vm, 5);
        float z2 = (float)wrenGetSlotDouble(vm, 6);
        float x3 = (float)wrenGetSlotDouble(vm, 7);
        float y3 = (float)wrenGetSlotDouble(vm, 8);
        float z3 = (float)wrenGetSlotDouble(vm, 9);
        float red1 = (float)wrenGetSlotDouble(vm, 10);
        float green1 = (float)wrenGetSlotDouble(vm, 11);
        float blue1 = (float)wrenGetSlotDouble(vm, 12);
        int alpha1 = (int)wrenGetSlotDouble(vm, 13);
        float red2 = (float)wrenGetSlotDouble(vm, 14);
        float green2 = (float)wrenGetSlotDouble(vm, 15);
        float blue2 = (float)wrenGetSlotDouble(vm, 16);
        int alpha2 = (int)wrenGetSlotDouble(vm, 17);
        float red3 = (float)wrenGetSlotDouble(vm, 18);
        float green3 = (float)wrenGetSlotDouble(vm, 19);
        float blue3 = (float)wrenGetSlotDouble(vm, 20);
        int alpha3 = (int)wrenGetSlotDouble(vm, 21);
        const char* textureDict = wrenGetSlotString(vm, 22);
        const char* textureName = wrenGetSlotString(vm, 23);
        float u1 = (float)wrenGetSlotDouble(vm, 24);
        float v1 = (float)wrenGetSlotDouble(vm, 25);
        float w1 = (float)wrenGetSlotDouble(vm, 26);
        float u2 = (float)wrenGetSlotDouble(vm, 27);
        float v2 = (float)wrenGetSlotDouble(vm, 28);
        float w2 = (float)wrenGetSlotDouble(vm, 29);
        float u3 = (float)wrenGetSlotDouble(vm, 30);
        float v3 = (float)wrenGetSlotDouble(vm, 31);
        float w3 = (float)wrenGetSlotDouble(vm, 32);

        GRAPHICS::DRAW_TEXTURED_POLY_WITH_THREE_COLOURS(x1, y1, z1, x2, y2, z2, x3, y3, z3, red1, green1, blue1, alpha1, red2, green2, blue2, alpha2, red3, green3, blue3, alpha3, textureDict, textureName, u1, v1, w1, u2, v2, w2, u3, v3, w3);
    }

    static void WREN_GRAPHICS_DRAW_BOX(WrenVM* vm)
    {
        float x1 = (float)wrenGetSlotDouble(vm, 1);
        float y1 = (float)wrenGetSlotDouble(vm, 2);
        float z1 = (float)wrenGetSlotDouble(vm, 3);
        float x2 = (float)wrenGetSlotDouble(vm, 4);
        float y2 = (float)wrenGetSlotDouble(vm, 5);
        float z2 = (float)wrenGetSlotDouble(vm, 6);
        int red = (int)wrenGetSlotDouble(vm, 7);
        int green = (int)wrenGetSlotDouble(vm, 8);
        int blue = (int)wrenGetSlotDouble(vm, 9);
        int alpha = (int)wrenGetSlotDouble(vm, 10);

        GRAPHICS::DRAW_BOX(x1, y1, z1, x2, y2, z2, red, green, blue, alpha);
    }

    static void WREN_GRAPHICS_SET_BACKFACECULLING(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        GRAPHICS::SET_BACKFACECULLING(toggle);
    }

    static void WREN_GRAPHICS_SET_DEPTHWRITING(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        GRAPHICS::SET_DEPTHWRITING(p0);
    }

    static void WREN_GRAPHICS_BEGIN_TAKE_MISSION_CREATOR_PHOTO(WrenVM* vm)
    {

        Any res = GRAPHICS::BEGIN_TAKE_MISSION_CREATOR_PHOTO();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_GRAPHICS_GET_STATUS_OF_TAKE_MISSION_CREATOR_PHOTO(WrenVM* vm)
    {

        Any res = GRAPHICS::GET_STATUS_OF_TAKE_MISSION_CREATOR_PHOTO();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_GRAPHICS_FREE_MEMORY_FOR_MISSION_CREATOR_PHOTO(WrenVM* vm)
    {

        GRAPHICS::FREE_MEMORY_FOR_MISSION_CREATOR_PHOTO();
    }

    static void WREN_GRAPHICS_LOAD_MISSION_CREATOR_PHOTO(WrenVM* vm)
    {
        Any p0;
        Any p1 = (Any)wrenGetSlotDouble(vm, 1);
        Any p2 = (Any)wrenGetSlotDouble(vm, 2);
        Any p3 = (Any)wrenGetSlotDouble(vm, 3);

        BOOL res = GRAPHICS::LOAD_MISSION_CREATOR_PHOTO(&p0, p1, p2, p3);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p0);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_GRAPHICS_GET_STATUS_OF_LOAD_MISSION_CREATOR_PHOTO(WrenVM* vm)
    {
        Any p0;

        int res = GRAPHICS::GET_STATUS_OF_LOAD_MISSION_CREATOR_PHOTO(&p0);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p0);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_GRAPHICS_BEGIN_CREATE_MISSION_CREATOR_PHOTO_PREVIEW(WrenVM* vm)
    {

        Any res = GRAPHICS::BEGIN_CREATE_MISSION_CREATOR_PHOTO_PREVIEW();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_GRAPHICS_GET_STATUS_OF_CREATE_MISSION_CREATOR_PHOTO_PREVIEW(WrenVM* vm)
    {

        Any res = GRAPHICS::GET_STATUS_OF_CREATE_MISSION_CREATOR_PHOTO_PREVIEW();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_GRAPHICS_FREE_MEMORY_FOR_MISSION_CREATOR_PHOTO_PREVIEW(WrenVM* vm)
    {

        GRAPHICS::FREE_MEMORY_FOR_MISSION_CREATOR_PHOTO_PREVIEW();
    }

    static void WREN_GRAPHICS_BEGIN_TAKE_HIGH_QUALITY_PHOTO(WrenVM* vm)
    {

        BOOL res = GRAPHICS::BEGIN_TAKE_HIGH_QUALITY_PHOTO();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_GRAPHICS_GET_STATUS_OF_TAKE_HIGH_QUALITY_PHOTO(WrenVM* vm)
    {

        int res = GRAPHICS::GET_STATUS_OF_TAKE_HIGH_QUALITY_PHOTO();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_GRAPHICS_FREE_MEMORY_FOR_HIGH_QUALITY_PHOTO(WrenVM* vm)
    {

        GRAPHICS::FREE_MEMORY_FOR_HIGH_QUALITY_PHOTO();
    }

    static void WREN_GRAPHICS_SET_TAKEN_PHOTO_IS_MUGSHOT(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        GRAPHICS::SET_TAKEN_PHOTO_IS_MUGSHOT(p0);
    }

    static void WREN_GRAPHICS_SET_ARENA_THEME_AND_VARIATION_FOR_TAKEN_PHOTO(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        GRAPHICS::SET_ARENA_THEME_AND_VARIATION_FOR_TAKEN_PHOTO(p0, p1);
    }

    static void WREN_GRAPHICS_SET_ON_ISLAND_X_FOR_TAKEN_PHOTO(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        GRAPHICS::SET_ON_ISLAND_X_FOR_TAKEN_PHOTO(p0);
    }

    static void WREN_GRAPHICS_SAVE_HIGH_QUALITY_PHOTO(WrenVM* vm)
    {
        int unused = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = GRAPHICS::SAVE_HIGH_QUALITY_PHOTO(unused);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_GRAPHICS_GET_STATUS_OF_SAVE_HIGH_QUALITY_PHOTO(WrenVM* vm)
    {

        int res = GRAPHICS::GET_STATUS_OF_SAVE_HIGH_QUALITY_PHOTO();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_GRAPHICS_BEGIN_CREATE_LOW_QUALITY_COPY_OF_PHOTO(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        BOOL res = GRAPHICS::BEGIN_CREATE_LOW_QUALITY_COPY_OF_PHOTO(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_GRAPHICS_GET_STATUS_OF_CREATE_LOW_QUALITY_COPY_OF_PHOTO(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);

        int res = GRAPHICS::GET_STATUS_OF_CREATE_LOW_QUALITY_COPY_OF_PHOTO(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_GRAPHICS_FREE_MEMORY_FOR_LOW_QUALITY_PHOTO(WrenVM* vm)
    {

        GRAPHICS::FREE_MEMORY_FOR_LOW_QUALITY_PHOTO();
    }

    static void WREN_GRAPHICS_DRAW_LOW_QUALITY_PHOTO_TO_PHONE(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        GRAPHICS::DRAW_LOW_QUALITY_PHOTO_TO_PHONE(p0, p1);
    }

    static void WREN_GRAPHICS_GET_MAXIMUM_NUMBER_OF_PHOTOS(WrenVM* vm)
    {

        int res = GRAPHICS::GET_MAXIMUM_NUMBER_OF_PHOTOS();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_GRAPHICS_GET_MAXIMUM_NUMBER_OF_CLOUD_PHOTOS(WrenVM* vm)
    {

        int res = GRAPHICS::GET_MAXIMUM_NUMBER_OF_CLOUD_PHOTOS();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_GRAPHICS_GET_CURRENT_NUMBER_OF_CLOUD_PHOTOS(WrenVM* vm)
    {

        int res = GRAPHICS::GET_CURRENT_NUMBER_OF_CLOUD_PHOTOS();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_GRAPHICS_QUEUE_OPERATION_TO_CREATE_SORTED_LIST_OF_PHOTOS(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        Any res = GRAPHICS::QUEUE_OPERATION_TO_CREATE_SORTED_LIST_OF_PHOTOS(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_GRAPHICS_GET_STATUS_OF_SORTED_LIST_OPERATION(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        Any res = GRAPHICS::GET_STATUS_OF_SORTED_LIST_OPERATION(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_GRAPHICS_CLEAR_STATUS_OF_SORTED_LIST_OPERATION(WrenVM* vm)
    {

        GRAPHICS::CLEAR_STATUS_OF_SORTED_LIST_OPERATION();
    }

    static void WREN_GRAPHICS_DOES_THIS_PHOTO_SLOT_CONTAIN_A_VALID_PHOTO(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        Any res = GRAPHICS::DOES_THIS_PHOTO_SLOT_CONTAIN_A_VALID_PHOTO(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_GRAPHICS_LOAD_HIGH_QUALITY_PHOTO(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        Any res = GRAPHICS::LOAD_HIGH_QUALITY_PHOTO(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_GRAPHICS_GET_LOAD_HIGH_QUALITY_PHOTO_STATUS(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);

        int res = GRAPHICS::GET_LOAD_HIGH_QUALITY_PHOTO_STATUS(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_GRAPHICS_DRAW_LIGHT_WITH_RANGEEX(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        int r = (int)wrenGetSlotDouble(vm, 4);
        int g = (int)wrenGetSlotDouble(vm, 5);
        int b = (int)wrenGetSlotDouble(vm, 6);
        float range = (float)wrenGetSlotDouble(vm, 7);
        float intensity = (float)wrenGetSlotDouble(vm, 8);
        float shadow = (float)wrenGetSlotDouble(vm, 9);

        GRAPHICS::DRAW_LIGHT_WITH_RANGEEX(x, y, z, r, g, b, range, intensity, shadow);
    }

    static void WREN_GRAPHICS_DRAW_LIGHT_WITH_RANGE(WrenVM* vm)
    {
        float posX = (float)wrenGetSlotDouble(vm, 1);
        float posY = (float)wrenGetSlotDouble(vm, 2);
        float posZ = (float)wrenGetSlotDouble(vm, 3);
        int colorR = (int)wrenGetSlotDouble(vm, 4);
        int colorG = (int)wrenGetSlotDouble(vm, 5);
        int colorB = (int)wrenGetSlotDouble(vm, 6);
        float range = (float)wrenGetSlotDouble(vm, 7);
        float intensity = (float)wrenGetSlotDouble(vm, 8);

        GRAPHICS::DRAW_LIGHT_WITH_RANGE(posX, posY, posZ, colorR, colorG, colorB, range, intensity);
    }

    static void WREN_GRAPHICS_DRAW_SPOT_LIGHT(WrenVM* vm)
    {
        float posX = (float)wrenGetSlotDouble(vm, 1);
        float posY = (float)wrenGetSlotDouble(vm, 2);
        float posZ = (float)wrenGetSlotDouble(vm, 3);
        float dirX = (float)wrenGetSlotDouble(vm, 4);
        float dirY = (float)wrenGetSlotDouble(vm, 5);
        float dirZ = (float)wrenGetSlotDouble(vm, 6);
        int colorR = (int)wrenGetSlotDouble(vm, 7);
        int colorG = (int)wrenGetSlotDouble(vm, 8);
        int colorB = (int)wrenGetSlotDouble(vm, 9);
        float distance = (float)wrenGetSlotDouble(vm, 10);
        float brightness = (float)wrenGetSlotDouble(vm, 11);
        float hardness = (float)wrenGetSlotDouble(vm, 12);
        float radius = (float)wrenGetSlotDouble(vm, 13);
        float falloff = (float)wrenGetSlotDouble(vm, 14);

        GRAPHICS::DRAW_SPOT_LIGHT(posX, posY, posZ, dirX, dirY, dirZ, colorR, colorG, colorB, distance, brightness, hardness, radius, falloff);
    }

    static void WREN_GRAPHICS_DRAW_SHADOWED_SPOT_LIGHT(WrenVM* vm)
    {
        float posX = (float)wrenGetSlotDouble(vm, 1);
        float posY = (float)wrenGetSlotDouble(vm, 2);
        float posZ = (float)wrenGetSlotDouble(vm, 3);
        float dirX = (float)wrenGetSlotDouble(vm, 4);
        float dirY = (float)wrenGetSlotDouble(vm, 5);
        float dirZ = (float)wrenGetSlotDouble(vm, 6);
        int colorR = (int)wrenGetSlotDouble(vm, 7);
        int colorG = (int)wrenGetSlotDouble(vm, 8);
        int colorB = (int)wrenGetSlotDouble(vm, 9);
        float distance = (float)wrenGetSlotDouble(vm, 10);
        float brightness = (float)wrenGetSlotDouble(vm, 11);
        float roundness = (float)wrenGetSlotDouble(vm, 12);
        float radius = (float)wrenGetSlotDouble(vm, 13);
        float falloff = (float)wrenGetSlotDouble(vm, 14);
        int shadowId = (int)wrenGetSlotDouble(vm, 15);

        GRAPHICS::DRAW_SHADOWED_SPOT_LIGHT(posX, posY, posZ, dirX, dirY, dirZ, colorR, colorG, colorB, distance, brightness, roundness, radius, falloff, shadowId);
    }

    static void WREN_GRAPHICS_FADE_UP_PED_LIGHT(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);

        GRAPHICS::FADE_UP_PED_LIGHT(p0);
    }

    static void WREN_GRAPHICS_UPDATE_LIGHTS_ON_ENTITY(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        GRAPHICS::UPDATE_LIGHTS_ON_ENTITY(entity);
    }

    static void WREN_GRAPHICS_SET_LIGHT_OVERRIDE_MAX_INTENSITY_SCALE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        GRAPHICS::SET_LIGHT_OVERRIDE_MAX_INTENSITY_SCALE(p0);
    }

    static void WREN_GRAPHICS_GET_LIGHT_OVERRIDE_MAX_INTENSITY_SCALE(WrenVM* vm)
    {

        Any res = GRAPHICS::GET_LIGHT_OVERRIDE_MAX_INTENSITY_SCALE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_GRAPHICS_DRAW_MARKER(WrenVM* vm)
    {
        int type = (int)wrenGetSlotDouble(vm, 1);
        float posX = (float)wrenGetSlotDouble(vm, 2);
        float posY = (float)wrenGetSlotDouble(vm, 3);
        float posZ = (float)wrenGetSlotDouble(vm, 4);
        float dirX = (float)wrenGetSlotDouble(vm, 5);
        float dirY = (float)wrenGetSlotDouble(vm, 6);
        float dirZ = (float)wrenGetSlotDouble(vm, 7);
        float rotX = (float)wrenGetSlotDouble(vm, 8);
        float rotY = (float)wrenGetSlotDouble(vm, 9);
        float rotZ = (float)wrenGetSlotDouble(vm, 10);
        float scaleX = (float)wrenGetSlotDouble(vm, 11);
        float scaleY = (float)wrenGetSlotDouble(vm, 12);
        float scaleZ = (float)wrenGetSlotDouble(vm, 13);
        int red = (int)wrenGetSlotDouble(vm, 14);
        int green = (int)wrenGetSlotDouble(vm, 15);
        int blue = (int)wrenGetSlotDouble(vm, 16);
        int alpha = (int)wrenGetSlotDouble(vm, 17);
        BOOL bobUpAndDown = (BOOL)wrenGetSlotBool(vm, 18);
        BOOL faceCamera = (BOOL)wrenGetSlotBool(vm, 19);
        int p19 = (int)wrenGetSlotDouble(vm, 20);
        BOOL rotate = (BOOL)wrenGetSlotBool(vm, 21);
        const char* textureDict = wrenGetSlotString(vm, 22);
        const char* textureName = wrenGetSlotString(vm, 23);
        BOOL drawOnEnts = (BOOL)wrenGetSlotBool(vm, 24);

        GRAPHICS::DRAW_MARKER(type, posX, posY, posZ, dirX, dirY, dirZ, rotX, rotY, rotZ, scaleX, scaleY, scaleZ, red, green, blue, alpha, bobUpAndDown, faceCamera, p19, rotate, textureDict, textureName, drawOnEnts);
    }

    static void WREN_GRAPHICS_DRAW_MARKER_EX(WrenVM* vm)
    {
        int type = (int)wrenGetSlotDouble(vm, 1);
        float posX = (float)wrenGetSlotDouble(vm, 2);
        float posY = (float)wrenGetSlotDouble(vm, 3);
        float posZ = (float)wrenGetSlotDouble(vm, 4);
        float dirX = (float)wrenGetSlotDouble(vm, 5);
        float dirY = (float)wrenGetSlotDouble(vm, 6);
        float dirZ = (float)wrenGetSlotDouble(vm, 7);
        float rotX = (float)wrenGetSlotDouble(vm, 8);
        float rotY = (float)wrenGetSlotDouble(vm, 9);
        float rotZ = (float)wrenGetSlotDouble(vm, 10);
        float scaleX = (float)wrenGetSlotDouble(vm, 11);
        float scaleY = (float)wrenGetSlotDouble(vm, 12);
        float scaleZ = (float)wrenGetSlotDouble(vm, 13);
        int red = (int)wrenGetSlotDouble(vm, 14);
        int green = (int)wrenGetSlotDouble(vm, 15);
        int blue = (int)wrenGetSlotDouble(vm, 16);
        int alpha = (int)wrenGetSlotDouble(vm, 17);
        BOOL bobUpAndDown = (BOOL)wrenGetSlotBool(vm, 18);
        BOOL faceCamera = (BOOL)wrenGetSlotBool(vm, 19);
        Any p19 = (Any)wrenGetSlotDouble(vm, 20);
        BOOL rotate = (BOOL)wrenGetSlotBool(vm, 21);
        const char* textureDict = wrenGetSlotString(vm, 22);
        const char* textureName = wrenGetSlotString(vm, 23);
        BOOL drawOnEnts = (BOOL)wrenGetSlotBool(vm, 24);
        BOOL p24 = (BOOL)wrenGetSlotBool(vm, 25);
        BOOL p25 = (BOOL)wrenGetSlotBool(vm, 26);

        GRAPHICS::DRAW_MARKER_EX(type, posX, posY, posZ, dirX, dirY, dirZ, rotX, rotY, rotZ, scaleX, scaleY, scaleZ, red, green, blue, alpha, bobUpAndDown, faceCamera, p19, rotate, textureDict, textureName, drawOnEnts, p24, p25);
    }

    static void WREN_GRAPHICS_DRAW_MARKER_SPHERE(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        float radius = (float)wrenGetSlotDouble(vm, 4);
        int red = (int)wrenGetSlotDouble(vm, 5);
        int green = (int)wrenGetSlotDouble(vm, 6);
        int blue = (int)wrenGetSlotDouble(vm, 7);
        float alpha = (float)wrenGetSlotDouble(vm, 8);

        GRAPHICS::DRAW_MARKER_SPHERE(x, y, z, radius, red, green, blue, alpha);
    }

    static void WREN_GRAPHICS_CREATE_CHECKPOINT(WrenVM* vm)
    {
        int type = (int)wrenGetSlotDouble(vm, 1);
        float posX1 = (float)wrenGetSlotDouble(vm, 2);
        float posY1 = (float)wrenGetSlotDouble(vm, 3);
        float posZ1 = (float)wrenGetSlotDouble(vm, 4);
        float posX2 = (float)wrenGetSlotDouble(vm, 5);
        float posY2 = (float)wrenGetSlotDouble(vm, 6);
        float posZ2 = (float)wrenGetSlotDouble(vm, 7);
        float diameter = (float)wrenGetSlotDouble(vm, 8);
        int red = (int)wrenGetSlotDouble(vm, 9);
        int green = (int)wrenGetSlotDouble(vm, 10);
        int blue = (int)wrenGetSlotDouble(vm, 11);
        int alpha = (int)wrenGetSlotDouble(vm, 12);
        int reserved = (int)wrenGetSlotDouble(vm, 13);

        int res = GRAPHICS::CREATE_CHECKPOINT(type, posX1, posY1, posZ1, posX2, posY2, posZ2, diameter, red, green, blue, alpha, reserved);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_GRAPHICS_SET_CHECKPOINT_INSIDE_CYLINDER_HEIGHT_SCALE(WrenVM* vm)
    {
        int checkpoint = (int)wrenGetSlotDouble(vm, 1);
        float p0 = (float)wrenGetSlotDouble(vm, 2);

        GRAPHICS::SET_CHECKPOINT_INSIDE_CYLINDER_HEIGHT_SCALE(checkpoint, p0);
    }

    static void WREN_GRAPHICS_SET_CHECKPOINT_INSIDE_CYLINDER_SCALE(WrenVM* vm)
    {
        int checkpoint = (int)wrenGetSlotDouble(vm, 1);
        float scale = (float)wrenGetSlotDouble(vm, 2);

        GRAPHICS::SET_CHECKPOINT_INSIDE_CYLINDER_SCALE(checkpoint, scale);
    }

    static void WREN_GRAPHICS_SET_CHECKPOINT_CYLINDER_HEIGHT(WrenVM* vm)
    {
        int checkpoint = (int)wrenGetSlotDouble(vm, 1);
        float nearHeight = (float)wrenGetSlotDouble(vm, 2);
        float farHeight = (float)wrenGetSlotDouble(vm, 3);
        float radius = (float)wrenGetSlotDouble(vm, 4);

        GRAPHICS::SET_CHECKPOINT_CYLINDER_HEIGHT(checkpoint, nearHeight, farHeight, radius);
    }

    static void WREN_GRAPHICS_SET_CHECKPOINT_RGBA(WrenVM* vm)
    {
        int checkpoint = (int)wrenGetSlotDouble(vm, 1);
        int red = (int)wrenGetSlotDouble(vm, 2);
        int green = (int)wrenGetSlotDouble(vm, 3);
        int blue = (int)wrenGetSlotDouble(vm, 4);
        int alpha = (int)wrenGetSlotDouble(vm, 5);

        GRAPHICS::SET_CHECKPOINT_RGBA(checkpoint, red, green, blue, alpha);
    }

    static void WREN_GRAPHICS_SET_CHECKPOINT_RGBA2(WrenVM* vm)
    {
        int checkpoint = (int)wrenGetSlotDouble(vm, 1);
        int red = (int)wrenGetSlotDouble(vm, 2);
        int green = (int)wrenGetSlotDouble(vm, 3);
        int blue = (int)wrenGetSlotDouble(vm, 4);
        int alpha = (int)wrenGetSlotDouble(vm, 5);

        GRAPHICS::SET_CHECKPOINT_RGBA2(checkpoint, red, green, blue, alpha);
    }

    static void WREN_GRAPHICS_SET_CHECKPOINT_CLIPPLANE_WITH_POS_NORM(WrenVM* vm)
    {
        int checkpoint = (int)wrenGetSlotDouble(vm, 1);
        float posX = (float)wrenGetSlotDouble(vm, 2);
        float posY = (float)wrenGetSlotDouble(vm, 3);
        float posZ = (float)wrenGetSlotDouble(vm, 4);
        float unkX = (float)wrenGetSlotDouble(vm, 5);
        float unkY = (float)wrenGetSlotDouble(vm, 6);
        float unkZ = (float)wrenGetSlotDouble(vm, 7);

        GRAPHICS::SET_CHECKPOINT_CLIPPLANE_WITH_POS_NORM(checkpoint, posX, posY, posZ, unkX, unkY, unkZ);
    }

    static void WREN_GRAPHICS_SET_CHECKPOINT_FORCE_OLD_ARROW_POINTING(WrenVM* vm)
    {
        int checkpoint = (int)wrenGetSlotDouble(vm, 1);

        GRAPHICS::SET_CHECKPOINT_FORCE_OLD_ARROW_POINTING(checkpoint);
    }

    static void WREN_GRAPHICS_SET_CHECKPOINT_DECAL_ROT_ALIGNED_TO_CAMERA_ROT(WrenVM* vm)
    {
        int checkpoint = (int)wrenGetSlotDouble(vm, 1);

        GRAPHICS::SET_CHECKPOINT_DECAL_ROT_ALIGNED_TO_CAMERA_ROT(checkpoint);
    }

    static void WREN_GRAPHICS_SET_CHECKPOINT_FORCE_DIRECTION(WrenVM* vm)
    {
        int checkpoint = (int)wrenGetSlotDouble(vm, 1);

        GRAPHICS::SET_CHECKPOINT_FORCE_DIRECTION(checkpoint);
    }

    static void WREN_GRAPHICS_SET_CHECKPOINT_DIRECTION(WrenVM* vm)
    {
        int checkpoint = (int)wrenGetSlotDouble(vm, 1);
        float posX = (float)wrenGetSlotDouble(vm, 2);
        float posY = (float)wrenGetSlotDouble(vm, 3);
        float posZ = (float)wrenGetSlotDouble(vm, 4);

        GRAPHICS::SET_CHECKPOINT_DIRECTION(checkpoint, posX, posY, posZ);
    }

    static void WREN_GRAPHICS_DELETE_CHECKPOINT(WrenVM* vm)
    {
        int checkpoint = (int)wrenGetSlotDouble(vm, 1);

        GRAPHICS::DELETE_CHECKPOINT(checkpoint);
    }

    static void WREN_GRAPHICS_DONT_RENDER_IN_GAME_UI(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        GRAPHICS::DONT_RENDER_IN_GAME_UI(p0);
    }

    static void WREN_GRAPHICS_FORCE_RENDER_IN_GAME_UI(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        GRAPHICS::FORCE_RENDER_IN_GAME_UI(toggle);
    }

    static void WREN_GRAPHICS_REQUEST_STREAMED_TEXTURE_DICT(WrenVM* vm)
    {
        const char* textureDict = wrenGetSlotString(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        GRAPHICS::REQUEST_STREAMED_TEXTURE_DICT(textureDict, p1);
    }

    static void WREN_GRAPHICS_HAS_STREAMED_TEXTURE_DICT_LOADED(WrenVM* vm)
    {
        const char* textureDict = wrenGetSlotString(vm, 1);

        BOOL res = GRAPHICS::HAS_STREAMED_TEXTURE_DICT_LOADED(textureDict);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_GRAPHICS_SET_STREAMED_TEXTURE_DICT_AS_NO_LONGER_NEEDED(WrenVM* vm)
    {
        const char* textureDict = wrenGetSlotString(vm, 1);

        GRAPHICS::SET_STREAMED_TEXTURE_DICT_AS_NO_LONGER_NEEDED(textureDict);
    }

    static void WREN_GRAPHICS_DRAW_RECT(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float width = (float)wrenGetSlotDouble(vm, 3);
        float height = (float)wrenGetSlotDouble(vm, 4);
        int r = (int)wrenGetSlotDouble(vm, 5);
        int g = (int)wrenGetSlotDouble(vm, 6);
        int b = (int)wrenGetSlotDouble(vm, 7);
        int a = (int)wrenGetSlotDouble(vm, 8);
        BOOL p8 = (BOOL)wrenGetSlotBool(vm, 9);

        GRAPHICS::DRAW_RECT(x, y, width, height, r, g, b, a, p8);
    }

    static void WREN_GRAPHICS_SET_SCRIPT_GFX_DRAW_BEHIND_PAUSEMENU(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        GRAPHICS::SET_SCRIPT_GFX_DRAW_BEHIND_PAUSEMENU(toggle);
    }

    static void WREN_GRAPHICS_SET_SCRIPT_GFX_DRAW_ORDER(WrenVM* vm)
    {
        int drawOrder = (int)wrenGetSlotDouble(vm, 1);

        GRAPHICS::SET_SCRIPT_GFX_DRAW_ORDER(drawOrder);
    }

    static void WREN_GRAPHICS_SET_SCRIPT_GFX_ALIGN(WrenVM* vm)
    {
        int horizontalAlign = (int)wrenGetSlotDouble(vm, 1);
        int verticalAlign = (int)wrenGetSlotDouble(vm, 2);

        GRAPHICS::SET_SCRIPT_GFX_ALIGN(horizontalAlign, verticalAlign);
    }

    static void WREN_GRAPHICS_RESET_SCRIPT_GFX_ALIGN(WrenVM* vm)
    {

        GRAPHICS::RESET_SCRIPT_GFX_ALIGN();
    }

    static void WREN_GRAPHICS_SET_SCRIPT_GFX_ALIGN_PARAMS(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float w = (float)wrenGetSlotDouble(vm, 3);
        float h = (float)wrenGetSlotDouble(vm, 4);

        GRAPHICS::SET_SCRIPT_GFX_ALIGN_PARAMS(x, y, w, h);
    }

    static void WREN_GRAPHICS_GET_SCRIPT_GFX_ALIGN_POSITION(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float calculatedX;
        float calculatedY;

        GRAPHICS::GET_SCRIPT_GFX_ALIGN_POSITION(x, y, &calculatedX, &calculatedY);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, calculatedX);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, calculatedY);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_GRAPHICS_GET_SAFE_ZONE_SIZE(WrenVM* vm)
    {

        float res = GRAPHICS::GET_SAFE_ZONE_SIZE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_GRAPHICS_DRAW_SPRITE(WrenVM* vm)
    {
        const char* textureDict = wrenGetSlotString(vm, 1);
        const char* textureName = wrenGetSlotString(vm, 2);
        float screenX = (float)wrenGetSlotDouble(vm, 3);
        float screenY = (float)wrenGetSlotDouble(vm, 4);
        float width = (float)wrenGetSlotDouble(vm, 5);
        float height = (float)wrenGetSlotDouble(vm, 6);
        float heading = (float)wrenGetSlotDouble(vm, 7);
        int red = (int)wrenGetSlotDouble(vm, 8);
        int green = (int)wrenGetSlotDouble(vm, 9);
        int blue = (int)wrenGetSlotDouble(vm, 10);
        int alpha = (int)wrenGetSlotDouble(vm, 11);
        BOOL p11 = (BOOL)wrenGetSlotBool(vm, 12);
        Any p12 = (Any)wrenGetSlotDouble(vm, 13);

        GRAPHICS::DRAW_SPRITE(textureDict, textureName, screenX, screenY, width, height, heading, red, green, blue, alpha, p11, p12);
    }

    static void WREN_GRAPHICS_DRAW_SPRITE_ARX(WrenVM* vm)
    {
        const char* textureDict = wrenGetSlotString(vm, 1);
        const char* textureName = wrenGetSlotString(vm, 2);
        float x = (float)wrenGetSlotDouble(vm, 3);
        float y = (float)wrenGetSlotDouble(vm, 4);
        float width = (float)wrenGetSlotDouble(vm, 5);
        float height = (float)wrenGetSlotDouble(vm, 6);
        float p6 = (float)wrenGetSlotDouble(vm, 7);
        int red = (int)wrenGetSlotDouble(vm, 8);
        int green = (int)wrenGetSlotDouble(vm, 9);
        int blue = (int)wrenGetSlotDouble(vm, 10);
        int alpha = (int)wrenGetSlotDouble(vm, 11);
        Any p11 = (Any)wrenGetSlotDouble(vm, 12);
        Any p12 = (Any)wrenGetSlotDouble(vm, 13);

        GRAPHICS::DRAW_SPRITE_ARX(textureDict, textureName, x, y, width, height, p6, red, green, blue, alpha, p11, p12);
    }

    static void WREN_GRAPHICS_DRAW_SPRITE_NAMED_RENDERTARGET(WrenVM* vm)
    {
        const char* textureDict = wrenGetSlotString(vm, 1);
        const char* textureName = wrenGetSlotString(vm, 2);
        float screenX = (float)wrenGetSlotDouble(vm, 3);
        float screenY = (float)wrenGetSlotDouble(vm, 4);
        float width = (float)wrenGetSlotDouble(vm, 5);
        float height = (float)wrenGetSlotDouble(vm, 6);
        float heading = (float)wrenGetSlotDouble(vm, 7);
        int red = (int)wrenGetSlotDouble(vm, 8);
        int green = (int)wrenGetSlotDouble(vm, 9);
        int blue = (int)wrenGetSlotDouble(vm, 10);
        int alpha = (int)wrenGetSlotDouble(vm, 11);
        Any p11 = (Any)wrenGetSlotDouble(vm, 12);

        GRAPHICS::DRAW_SPRITE_NAMED_RENDERTARGET(textureDict, textureName, screenX, screenY, width, height, heading, red, green, blue, alpha, p11);
    }

    static void WREN_GRAPHICS_DRAW_SPRITE_ARX_WITH_UV(WrenVM* vm)
    {
        const char* textureDict = wrenGetSlotString(vm, 1);
        const char* textureName = wrenGetSlotString(vm, 2);
        float x = (float)wrenGetSlotDouble(vm, 3);
        float y = (float)wrenGetSlotDouble(vm, 4);
        float width = (float)wrenGetSlotDouble(vm, 5);
        float height = (float)wrenGetSlotDouble(vm, 6);
        float u1 = (float)wrenGetSlotDouble(vm, 7);
        float v1 = (float)wrenGetSlotDouble(vm, 8);
        float u2 = (float)wrenGetSlotDouble(vm, 9);
        float v2 = (float)wrenGetSlotDouble(vm, 10);
        float heading = (float)wrenGetSlotDouble(vm, 11);
        int red = (int)wrenGetSlotDouble(vm, 12);
        int green = (int)wrenGetSlotDouble(vm, 13);
        int blue = (int)wrenGetSlotDouble(vm, 14);
        int alpha = (int)wrenGetSlotDouble(vm, 15);
        Any p15 = (Any)wrenGetSlotDouble(vm, 16);

        GRAPHICS::DRAW_SPRITE_ARX_WITH_UV(textureDict, textureName, x, y, width, height, u1, v1, u2, v2, heading, red, green, blue, alpha, p15);
    }

    static void WREN_GRAPHICS_ADD_ENTITY_ICON(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        const char* icon = wrenGetSlotString(vm, 2);

        Any res = GRAPHICS::ADD_ENTITY_ICON(entity, icon);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_GRAPHICS_SET_ENTITY_ICON_VISIBILITY(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        GRAPHICS::SET_ENTITY_ICON_VISIBILITY(entity, toggle);
    }

    static void WREN_GRAPHICS_SET_ENTITY_ICON_COLOR(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        int red = (int)wrenGetSlotDouble(vm, 2);
        int green = (int)wrenGetSlotDouble(vm, 3);
        int blue = (int)wrenGetSlotDouble(vm, 4);
        int alpha = (int)wrenGetSlotDouble(vm, 5);

        GRAPHICS::SET_ENTITY_ICON_COLOR(entity, red, green, blue, alpha);
    }

    static void WREN_GRAPHICS_SET_DRAW_ORIGIN(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        GRAPHICS::SET_DRAW_ORIGIN(x, y, z, p3);
    }

    static void WREN_GRAPHICS_CLEAR_DRAW_ORIGIN(WrenVM* vm)
    {

        GRAPHICS::CLEAR_DRAW_ORIGIN();
    }

    static void WREN_GRAPHICS_SET_BINK_MOVIE(WrenVM* vm)
    {
        const char* name = wrenGetSlotString(vm, 1);

        int res = GRAPHICS::SET_BINK_MOVIE(name);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_GRAPHICS_PLAY_BINK_MOVIE(WrenVM* vm)
    {
        int binkMovie = (int)wrenGetSlotDouble(vm, 1);

        GRAPHICS::PLAY_BINK_MOVIE(binkMovie);
    }

    static void WREN_GRAPHICS_STOP_BINK_MOVIE(WrenVM* vm)
    {
        int binkMovie = (int)wrenGetSlotDouble(vm, 1);

        GRAPHICS::STOP_BINK_MOVIE(binkMovie);
    }

    static void WREN_GRAPHICS_RELEASE_BINK_MOVIE(WrenVM* vm)
    {
        int binkMovie = (int)wrenGetSlotDouble(vm, 1);

        GRAPHICS::RELEASE_BINK_MOVIE(binkMovie);
    }

    static void WREN_GRAPHICS_DRAW_BINK_MOVIE(WrenVM* vm)
    {
        int binkMovie = (int)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);
        float p2 = (float)wrenGetSlotDouble(vm, 3);
        float p3 = (float)wrenGetSlotDouble(vm, 4);
        float p4 = (float)wrenGetSlotDouble(vm, 5);
        float p5 = (float)wrenGetSlotDouble(vm, 6);
        int r = (int)wrenGetSlotDouble(vm, 7);
        int g = (int)wrenGetSlotDouble(vm, 8);
        int b = (int)wrenGetSlotDouble(vm, 9);
        int a = (int)wrenGetSlotDouble(vm, 10);

        GRAPHICS::DRAW_BINK_MOVIE(binkMovie, p1, p2, p3, p4, p5, r, g, b, a);
    }

    static void WREN_GRAPHICS_SET_BINK_MOVIE_TIME(WrenVM* vm)
    {
        int binkMovie = (int)wrenGetSlotDouble(vm, 1);
        float progress = (float)wrenGetSlotDouble(vm, 2);

        GRAPHICS::SET_BINK_MOVIE_TIME(binkMovie, progress);
    }

    static void WREN_GRAPHICS_GET_BINK_MOVIE_TIME(WrenVM* vm)
    {
        int binkMovie = (int)wrenGetSlotDouble(vm, 1);

        float res = GRAPHICS::GET_BINK_MOVIE_TIME(binkMovie);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_GRAPHICS_SET_BINK_MOVIE_VOLUME(WrenVM* vm)
    {
        int binkMovie = (int)wrenGetSlotDouble(vm, 1);
        float value = (float)wrenGetSlotDouble(vm, 2);

        GRAPHICS::SET_BINK_MOVIE_VOLUME(binkMovie, value);
    }

    static void WREN_GRAPHICS_ATTACH_TV_AUDIO_TO_ENTITY(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        GRAPHICS::ATTACH_TV_AUDIO_TO_ENTITY(entity);
    }

    static void WREN_GRAPHICS_SET_BINK_MOVIE_AUDIO_FRONTEND(WrenVM* vm)
    {
        int binkMovie = (int)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        GRAPHICS::SET_BINK_MOVIE_AUDIO_FRONTEND(binkMovie, p1);
    }

    static void WREN_GRAPHICS_SET_TV_AUDIO_FRONTEND(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        GRAPHICS::SET_TV_AUDIO_FRONTEND(toggle);
    }

    static void WREN_GRAPHICS_SET_BINK_SHOULD_SKIP(WrenVM* vm)
    {
        int binkMovie = (int)wrenGetSlotDouble(vm, 1);
        BOOL bShouldSkip = (BOOL)wrenGetSlotBool(vm, 2);

        GRAPHICS::SET_BINK_SHOULD_SKIP(binkMovie, bShouldSkip);
    }

    static void WREN_GRAPHICS_LOAD_MOVIE_MESH_SET(WrenVM* vm)
    {
        const char* movieMeshSetName = wrenGetSlotString(vm, 1);

        int res = GRAPHICS::LOAD_MOVIE_MESH_SET(movieMeshSetName);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_GRAPHICS_RELEASE_MOVIE_MESH_SET(WrenVM* vm)
    {
        int movieMeshSet = (int)wrenGetSlotDouble(vm, 1);

        GRAPHICS::RELEASE_MOVIE_MESH_SET(movieMeshSet);
    }

    static void WREN_GRAPHICS_QUERY_MOVIE_MESH_SET_STATE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        Any res = GRAPHICS::QUERY_MOVIE_MESH_SET_STATE(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_GRAPHICS_GET_SCREEN_RESOLUTION(WrenVM* vm)
    {
        int x;
        int y;

        GRAPHICS::GET_SCREEN_RESOLUTION(&x, &y);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, x);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, y);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_GRAPHICS_GET_ACTUAL_SCREEN_RESOLUTION(WrenVM* vm)
    {
        int x;
        int y;

        GRAPHICS::GET_ACTUAL_SCREEN_RESOLUTION(&x, &y);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, x);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, y);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_GRAPHICS_GET_ASPECT_RATIO(WrenVM* vm)
    {
        BOOL b = (BOOL)wrenGetSlotBool(vm, 1);

        float res = GRAPHICS::GET_ASPECT_RATIO(b);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_GRAPHICS_GET_SCREEN_ASPECT_RATIO(WrenVM* vm)
    {

        Any res = GRAPHICS::GET_SCREEN_ASPECT_RATIO();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_GRAPHICS_GET_IS_WIDESCREEN(WrenVM* vm)
    {

        BOOL res = GRAPHICS::GET_IS_WIDESCREEN();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_GRAPHICS_GET_IS_HIDEF(WrenVM* vm)
    {

        BOOL res = GRAPHICS::GET_IS_HIDEF();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_GRAPHICS_ADJUST_NEXT_POS_SIZE_AS_NORMALIZED_16_9(WrenVM* vm)
    {

        GRAPHICS::ADJUST_NEXT_POS_SIZE_AS_NORMALIZED_16_9();
    }

    static void WREN_GRAPHICS_SET_NIGHTVISION(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        GRAPHICS::SET_NIGHTVISION(toggle);
    }

    static void WREN_GRAPHICS_GET_REQUESTINGNIGHTVISION(WrenVM* vm)
    {

        BOOL res = GRAPHICS::GET_REQUESTINGNIGHTVISION();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_GRAPHICS_GET_USINGNIGHTVISION(WrenVM* vm)
    {

        BOOL res = GRAPHICS::GET_USINGNIGHTVISION();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_GRAPHICS_SET_EXPOSURETWEAK(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        GRAPHICS::SET_EXPOSURETWEAK(p0);
    }

    static void WREN_GRAPHICS_FORCE_EXPOSURE_READBACK(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        GRAPHICS::FORCE_EXPOSURE_READBACK(p0);
    }

    static void WREN_GRAPHICS_OVERRIDE_NIGHTVISION_LIGHT_RANGE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        GRAPHICS::OVERRIDE_NIGHTVISION_LIGHT_RANGE(p0);
    }

    static void WREN_GRAPHICS_SET_NOISEOVERIDE(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        GRAPHICS::SET_NOISEOVERIDE(toggle);
    }

    static void WREN_GRAPHICS_SET_NOISINESSOVERIDE(WrenVM* vm)
    {
        float value = (float)wrenGetSlotDouble(vm, 1);

        GRAPHICS::SET_NOISINESSOVERIDE(value);
    }

    static void WREN_GRAPHICS_GET_SCREEN_COORD_FROM_WORLD_COORD(WrenVM* vm)
    {
        float worldX = (float)wrenGetSlotDouble(vm, 1);
        float worldY = (float)wrenGetSlotDouble(vm, 2);
        float worldZ = (float)wrenGetSlotDouble(vm, 3);
        float screenX;
        float screenY;

        BOOL res = GRAPHICS::GET_SCREEN_COORD_FROM_WORLD_COORD(worldX, worldY, worldZ, &screenX, &screenY);

        wrenEnsureSlots(vm, 6);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, screenX);
        wrenInsertInList(vm, 0, 1, 2);

        wrenSetSlotDouble(vm, 3, screenY);
        wrenInsertInList(vm, 0, 2, 3);

    }

    static void WREN_GRAPHICS_GET_TEXTURE_RESOLUTION(WrenVM* vm)
    {
        const char* textureDict = wrenGetSlotString(vm, 1);
        const char* textureName = wrenGetSlotString(vm, 2);

        Vector3 res = GRAPHICS::GET_TEXTURE_RESOLUTION(textureDict, textureName);

        wrenEnsureSlots(vm, 1);

        wrenGetVariable(vm, "natives", "Vector3", 0);
        Vector3* wren_res = (Vector3*)wrenSetSlotNewForeign(vm, 0, 0, sizeof(Vector3));
        wren_res->x = res.x;
        wren_res->y = res.y;
        wren_res->z = res.z;
    }

    static void WREN_GRAPHICS_OVERRIDE_PED_CREW_LOGO_TEXTURE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        const char* txd = wrenGetSlotString(vm, 2);
        const char* txn = wrenGetSlotString(vm, 3);

        BOOL res = GRAPHICS::OVERRIDE_PED_CREW_LOGO_TEXTURE(ped, txd, txn);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_GRAPHICS_SET_DISTANCE_BLUR_STRENGTH_OVERRIDE(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);

        GRAPHICS::SET_DISTANCE_BLUR_STRENGTH_OVERRIDE(p0);
    }

    static void WREN_GRAPHICS_SET_FLASH(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);
        float fadeIn = (float)wrenGetSlotDouble(vm, 3);
        float duration = (float)wrenGetSlotDouble(vm, 4);
        float fadeOut = (float)wrenGetSlotDouble(vm, 5);

        GRAPHICS::SET_FLASH(p0, p1, fadeIn, duration, fadeOut);
    }

    static void WREN_GRAPHICS_DISABLE_OCCLUSION_THIS_FRAME(WrenVM* vm)
    {

        GRAPHICS::DISABLE_OCCLUSION_THIS_FRAME();
    }

    static void WREN_GRAPHICS_SET_ARTIFICIAL_LIGHTS_STATE(WrenVM* vm)
    {
        BOOL state = (BOOL)wrenGetSlotBool(vm, 1);

        GRAPHICS::SET_ARTIFICIAL_LIGHTS_STATE(state);
    }

    static void WREN_GRAPHICS_SET_ARTIFICIAL_VEHICLE_LIGHTS_STATE(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        GRAPHICS::SET_ARTIFICIAL_VEHICLE_LIGHTS_STATE(toggle);
    }

    static void WREN_GRAPHICS_DISABLE_HDTEX_THIS_FRAME(WrenVM* vm)
    {

        GRAPHICS::DISABLE_HDTEX_THIS_FRAME();
    }

    static void WREN_GRAPHICS_CREATE_TRACKED_POINT(WrenVM* vm)
    {

        int res = GRAPHICS::CREATE_TRACKED_POINT();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_GRAPHICS_SET_TRACKED_POINT_INFO(WrenVM* vm)
    {
        int point = (int)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);
        float radius = (float)wrenGetSlotDouble(vm, 5);

        GRAPHICS::SET_TRACKED_POINT_INFO(point, x, y, z, radius);
    }

    static void WREN_GRAPHICS_IS_TRACKED_POINT_VISIBLE(WrenVM* vm)
    {
        int point = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = GRAPHICS::IS_TRACKED_POINT_VISIBLE(point);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_GRAPHICS_DESTROY_TRACKED_POINT(WrenVM* vm)
    {
        int point = (int)wrenGetSlotDouble(vm, 1);

        GRAPHICS::DESTROY_TRACKED_POINT(point);
    }

    static void WREN_GRAPHICS_SET_GRASS_CULL_SPHERE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        Any res = GRAPHICS::SET_GRASS_CULL_SPHERE(p0, p1, p2, p3);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_GRAPHICS_REMOVE_GRASS_CULL_SPHERE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        GRAPHICS::REMOVE_GRASS_CULL_SPHERE(p0);
    }

    static void WREN_GRAPHICS_PROCGRASS_ENABLE_CULLSPHERE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);
        float p2 = (float)wrenGetSlotDouble(vm, 3);
        float p3 = (float)wrenGetSlotDouble(vm, 4);
        float p4 = (float)wrenGetSlotDouble(vm, 5);

        GRAPHICS::PROCGRASS_ENABLE_CULLSPHERE(p0, p1, p2, p3, p4);
    }

    static void WREN_GRAPHICS_PROCGRASS_DISABLE_CULLSPHERE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        GRAPHICS::PROCGRASS_DISABLE_CULLSPHERE(p0);
    }

    static void WREN_GRAPHICS_PROCGRASS_IS_CULLSPHERE_ENABLED(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        Any res = GRAPHICS::PROCGRASS_IS_CULLSPHERE_ENABLED(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_GRAPHICS_PROCGRASS_ENABLE_AMBSCALESCAN(WrenVM* vm)
    {

        GRAPHICS::PROCGRASS_ENABLE_AMBSCALESCAN();
    }

    static void WREN_GRAPHICS_PROCGRASS_DISABLE_AMBSCALESCAN(WrenVM* vm)
    {

        GRAPHICS::PROCGRASS_DISABLE_AMBSCALESCAN();
    }

    static void WREN_GRAPHICS_DISABLE_PROCOBJ_CREATION(WrenVM* vm)
    {

        GRAPHICS::DISABLE_PROCOBJ_CREATION();
    }

    static void WREN_GRAPHICS_ENABLE_PROCOBJ_CREATION(WrenVM* vm)
    {

        GRAPHICS::ENABLE_PROCOBJ_CREATION();
    }

    static void WREN_GRAPHICS_GRASSBATCH_ENABLE_FLATTENING_EXT_IN_SPHERE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);
        Any p5 = (Any)wrenGetSlotDouble(vm, 6);
        Any p6 = (Any)wrenGetSlotDouble(vm, 7);
        Any p7 = (Any)wrenGetSlotDouble(vm, 8);

        GRAPHICS::GRASSBATCH_ENABLE_FLATTENING_EXT_IN_SPHERE(p0, p1, p2, p3, p4, p5, p6, p7);
    }

    static void WREN_GRAPHICS_GRASSBATCH_ENABLE_FLATTENING_IN_SPHERE(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        float radius = (float)wrenGetSlotDouble(vm, 4);
        float p4 = (float)wrenGetSlotDouble(vm, 5);
        float p5 = (float)wrenGetSlotDouble(vm, 6);
        float p6 = (float)wrenGetSlotDouble(vm, 7);

        GRAPHICS::GRASSBATCH_ENABLE_FLATTENING_IN_SPHERE(x, y, z, radius, p4, p5, p6);
    }

    static void WREN_GRAPHICS_GRASSBATCH_DISABLE_FLATTENING(WrenVM* vm)
    {

        GRAPHICS::GRASSBATCH_DISABLE_FLATTENING();
    }

    static void WREN_GRAPHICS_CASCADE_SHADOWS_INIT_SESSION(WrenVM* vm)
    {

        GRAPHICS::CASCADE_SHADOWS_INIT_SESSION();
    }

    static void WREN_GRAPHICS_CASCADE_SHADOWS_SET_CASCADE_BOUNDS(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        float p2 = (float)wrenGetSlotDouble(vm, 3);
        float p3 = (float)wrenGetSlotDouble(vm, 4);
        float p4 = (float)wrenGetSlotDouble(vm, 5);
        float p5 = (float)wrenGetSlotDouble(vm, 6);
        BOOL p6 = (BOOL)wrenGetSlotBool(vm, 7);
        float p7 = (float)wrenGetSlotDouble(vm, 8);

        GRAPHICS::CASCADE_SHADOWS_SET_CASCADE_BOUNDS(p0, p1, p2, p3, p4, p5, p6, p7);
    }

    static void WREN_GRAPHICS_CASCADE_SHADOWS_SET_CASCADE_BOUNDS_SCALE(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);

        GRAPHICS::CASCADE_SHADOWS_SET_CASCADE_BOUNDS_SCALE(p0);
    }

    static void WREN_GRAPHICS_CASCADE_SHADOWS_SET_ENTITY_TRACKER_SCALE(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);

        GRAPHICS::CASCADE_SHADOWS_SET_ENTITY_TRACKER_SCALE(p0);
    }

    static void WREN_GRAPHICS_CASCADE_SHADOWS_SET_SPLIT_Z_EXP_WEIGHT(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);

        GRAPHICS::CASCADE_SHADOWS_SET_SPLIT_Z_EXP_WEIGHT(p0);
    }

    static void WREN_GRAPHICS_CASCADE_SHADOWS_SET_BOUND_POSITION(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        GRAPHICS::CASCADE_SHADOWS_SET_BOUND_POSITION(p0);
    }

    static void WREN_GRAPHICS_CASCADE_SHADOWS_ENABLE_ENTITY_TRACKER(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        GRAPHICS::CASCADE_SHADOWS_ENABLE_ENTITY_TRACKER(toggle);
    }

    static void WREN_GRAPHICS_CASCADE_SHADOWS_SET_SCREEN_SIZE_CHECK_ENABLED(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        GRAPHICS::CASCADE_SHADOWS_SET_SCREEN_SIZE_CHECK_ENABLED(p0);
    }

    static void WREN_GRAPHICS_CASCADE_SHADOWS_SET_SHADOW_SAMPLE_TYPE(WrenVM* vm)
    {
        const char* type = wrenGetSlotString(vm, 1);

        GRAPHICS::CASCADE_SHADOWS_SET_SHADOW_SAMPLE_TYPE(type);
    }

    static void WREN_GRAPHICS_CASCADE_SHADOWS_CLEAR_SHADOW_SAMPLE_TYPE(WrenVM* vm)
    {

        GRAPHICS::CASCADE_SHADOWS_CLEAR_SHADOW_SAMPLE_TYPE();
    }

    static void WREN_GRAPHICS_CASCADE_SHADOWS_SET_AIRCRAFT_MODE(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        GRAPHICS::CASCADE_SHADOWS_SET_AIRCRAFT_MODE(p0);
    }

    static void WREN_GRAPHICS_CASCADE_SHADOWS_SET_DYNAMIC_DEPTH_MODE(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        GRAPHICS::CASCADE_SHADOWS_SET_DYNAMIC_DEPTH_MODE(p0);
    }

    static void WREN_GRAPHICS_CASCADE_SHADOWS_SET_DYNAMIC_DEPTH_VALUE(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);

        GRAPHICS::CASCADE_SHADOWS_SET_DYNAMIC_DEPTH_VALUE(p0);
    }

    static void WREN_GRAPHICS_CASCADE_SHADOWS_ENABLE_FREEZER(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        GRAPHICS::CASCADE_SHADOWS_ENABLE_FREEZER(p0);
    }

    static void WREN_GRAPHICS_WATER_REFLECTION_SET_SCRIPT_OBJECT_VISIBILITY(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        GRAPHICS::WATER_REFLECTION_SET_SCRIPT_OBJECT_VISIBILITY(p0);
    }

    static void WREN_GRAPHICS_GOLF_TRAIL_SET_ENABLED(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        GRAPHICS::GOLF_TRAIL_SET_ENABLED(toggle);
    }

    static void WREN_GRAPHICS_GOLF_TRAIL_SET_PATH(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);
        float p2 = (float)wrenGetSlotDouble(vm, 3);
        float p3 = (float)wrenGetSlotDouble(vm, 4);
        float p4 = (float)wrenGetSlotDouble(vm, 5);
        float p5 = (float)wrenGetSlotDouble(vm, 6);
        float p6 = (float)wrenGetSlotDouble(vm, 7);
        float p7 = (float)wrenGetSlotDouble(vm, 8);
        BOOL p8 = (BOOL)wrenGetSlotBool(vm, 9);

        GRAPHICS::GOLF_TRAIL_SET_PATH(p0, p1, p2, p3, p4, p5, p6, p7, p8);
    }

    static void WREN_GRAPHICS_GOLF_TRAIL_SET_RADIUS(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);
        float p2 = (float)wrenGetSlotDouble(vm, 3);

        GRAPHICS::GOLF_TRAIL_SET_RADIUS(p0, p1, p2);
    }

    static void WREN_GRAPHICS_GOLF_TRAIL_SET_COLOUR(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);
        int p2 = (int)wrenGetSlotDouble(vm, 3);
        int p3 = (int)wrenGetSlotDouble(vm, 4);
        int p4 = (int)wrenGetSlotDouble(vm, 5);
        int p5 = (int)wrenGetSlotDouble(vm, 6);
        int p6 = (int)wrenGetSlotDouble(vm, 7);
        int p7 = (int)wrenGetSlotDouble(vm, 8);
        int p8 = (int)wrenGetSlotDouble(vm, 9);
        int p9 = (int)wrenGetSlotDouble(vm, 10);
        int p10 = (int)wrenGetSlotDouble(vm, 11);
        int p11 = (int)wrenGetSlotDouble(vm, 12);

        GRAPHICS::GOLF_TRAIL_SET_COLOUR(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11);
    }

    static void WREN_GRAPHICS_GOLF_TRAIL_SET_TESSELLATION(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);

        GRAPHICS::GOLF_TRAIL_SET_TESSELLATION(p0, p1);
    }

    static void WREN_GRAPHICS_GOLF_TRAIL_SET_FIXED_CONTROL_POINT_ENABLE(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        GRAPHICS::GOLF_TRAIL_SET_FIXED_CONTROL_POINT_ENABLE(p0);
    }

    static void WREN_GRAPHICS_GOLF_TRAIL_SET_FIXED_CONTROL_POINT(WrenVM* vm)
    {
        int type = (int)wrenGetSlotDouble(vm, 1);
        float xPos = (float)wrenGetSlotDouble(vm, 2);
        float yPos = (float)wrenGetSlotDouble(vm, 3);
        float zPos = (float)wrenGetSlotDouble(vm, 4);
        float p4 = (float)wrenGetSlotDouble(vm, 5);
        int red = (int)wrenGetSlotDouble(vm, 6);
        int green = (int)wrenGetSlotDouble(vm, 7);
        int blue = (int)wrenGetSlotDouble(vm, 8);
        int alpha = (int)wrenGetSlotDouble(vm, 9);

        GRAPHICS::GOLF_TRAIL_SET_FIXED_CONTROL_POINT(type, xPos, yPos, zPos, p4, red, green, blue, alpha);
    }

    static void WREN_GRAPHICS_GOLF_TRAIL_SET_SHADER_PARAMS(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);
        float p2 = (float)wrenGetSlotDouble(vm, 3);
        float p3 = (float)wrenGetSlotDouble(vm, 4);
        float p4 = (float)wrenGetSlotDouble(vm, 5);

        GRAPHICS::GOLF_TRAIL_SET_SHADER_PARAMS(p0, p1, p2, p3, p4);
    }

    static void WREN_GRAPHICS_GOLF_TRAIL_SET_FACING(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        GRAPHICS::GOLF_TRAIL_SET_FACING(p0);
    }

    static void WREN_GRAPHICS_GOLF_TRAIL_GET_MAX_HEIGHT(WrenVM* vm)
    {

        float res = GRAPHICS::GOLF_TRAIL_GET_MAX_HEIGHT();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_GRAPHICS_GOLF_TRAIL_GET_VISUAL_CONTROL_POINT(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);

        Vector3 res = GRAPHICS::GOLF_TRAIL_GET_VISUAL_CONTROL_POINT(p0);

        wrenEnsureSlots(vm, 1);

        wrenGetVariable(vm, "natives", "Vector3", 0);
        Vector3* wren_res = (Vector3*)wrenSetSlotNewForeign(vm, 0, 0, sizeof(Vector3));
        wren_res->x = res.x;
        wren_res->y = res.y;
        wren_res->z = res.z;
    }

    static void WREN_GRAPHICS_SET_SEETHROUGH(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        GRAPHICS::SET_SEETHROUGH(toggle);
    }

    static void WREN_GRAPHICS_GET_USINGSEETHROUGH(WrenVM* vm)
    {

        BOOL res = GRAPHICS::GET_USINGSEETHROUGH();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_GRAPHICS_SEETHROUGH_RESET(WrenVM* vm)
    {

        GRAPHICS::SEETHROUGH_RESET();
    }

    static void WREN_GRAPHICS_SEETHROUGH_SET_FADE_STARTDISTANCE(WrenVM* vm)
    {
        float distance = (float)wrenGetSlotDouble(vm, 1);

        GRAPHICS::SEETHROUGH_SET_FADE_STARTDISTANCE(distance);
    }

    static void WREN_GRAPHICS_SEETHROUGH_SET_FADE_ENDDISTANCE(WrenVM* vm)
    {
        float distance = (float)wrenGetSlotDouble(vm, 1);

        GRAPHICS::SEETHROUGH_SET_FADE_ENDDISTANCE(distance);
    }

    static void WREN_GRAPHICS_SEETHROUGH_GET_MAX_THICKNESS(WrenVM* vm)
    {

        float res = GRAPHICS::SEETHROUGH_GET_MAX_THICKNESS();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_GRAPHICS_SEETHROUGH_SET_MAX_THICKNESS(WrenVM* vm)
    {
        float thickness = (float)wrenGetSlotDouble(vm, 1);

        GRAPHICS::SEETHROUGH_SET_MAX_THICKNESS(thickness);
    }

    static void WREN_GRAPHICS_SEETHROUGH_SET_NOISE_MIN(WrenVM* vm)
    {
        float amount = (float)wrenGetSlotDouble(vm, 1);

        GRAPHICS::SEETHROUGH_SET_NOISE_MIN(amount);
    }

    static void WREN_GRAPHICS_SEETHROUGH_SET_NOISE_MAX(WrenVM* vm)
    {
        float amount = (float)wrenGetSlotDouble(vm, 1);

        GRAPHICS::SEETHROUGH_SET_NOISE_MAX(amount);
    }

    static void WREN_GRAPHICS_SEETHROUGH_SET_HILIGHT_INTENSITY(WrenVM* vm)
    {
        float intensity = (float)wrenGetSlotDouble(vm, 1);

        GRAPHICS::SEETHROUGH_SET_HILIGHT_INTENSITY(intensity);
    }

    static void WREN_GRAPHICS_SEETHROUGH_SET_HIGHLIGHT_NOISE(WrenVM* vm)
    {
        float noise = (float)wrenGetSlotDouble(vm, 1);

        GRAPHICS::SEETHROUGH_SET_HIGHLIGHT_NOISE(noise);
    }

    static void WREN_GRAPHICS_SEETHROUGH_SET_HEATSCALE(WrenVM* vm)
    {
        int index = (int)wrenGetSlotDouble(vm, 1);
        float heatScale = (float)wrenGetSlotDouble(vm, 2);

        GRAPHICS::SEETHROUGH_SET_HEATSCALE(index, heatScale);
    }

    static void WREN_GRAPHICS_SEETHROUGH_SET_COLOR_NEAR(WrenVM* vm)
    {
        int red = (int)wrenGetSlotDouble(vm, 1);
        int green = (int)wrenGetSlotDouble(vm, 2);
        int blue = (int)wrenGetSlotDouble(vm, 3);

        GRAPHICS::SEETHROUGH_SET_COLOR_NEAR(red, green, blue);
    }

    static void WREN_GRAPHICS_SET_MOTIONBLUR_MAX_VEL_SCALER(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);

        GRAPHICS::SET_MOTIONBLUR_MAX_VEL_SCALER(p0);
    }

    static void WREN_GRAPHICS_GET_MOTIONBLUR_MAX_VEL_SCALER(WrenVM* vm)
    {

        float res = GRAPHICS::GET_MOTIONBLUR_MAX_VEL_SCALER();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_GRAPHICS_SET_FORCE_MOTIONBLUR(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        GRAPHICS::SET_FORCE_MOTIONBLUR(toggle);
    }

    static void WREN_GRAPHICS_TOGGLE_PLAYER_DAMAGE_OVERLAY(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        GRAPHICS::TOGGLE_PLAYER_DAMAGE_OVERLAY(toggle);
    }

    static void WREN_GRAPHICS_RESET_ADAPTATION(WrenVM* vm)
    {
        int unk = (int)wrenGetSlotDouble(vm, 1);

        GRAPHICS::RESET_ADAPTATION(unk);
    }

    static void WREN_GRAPHICS_TRIGGER_SCREENBLUR_FADE_IN(WrenVM* vm)
    {
        float transitionTime = (float)wrenGetSlotDouble(vm, 1);

        BOOL res = GRAPHICS::TRIGGER_SCREENBLUR_FADE_IN(transitionTime);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_GRAPHICS_TRIGGER_SCREENBLUR_FADE_OUT(WrenVM* vm)
    {
        float transitionTime = (float)wrenGetSlotDouble(vm, 1);

        BOOL res = GRAPHICS::TRIGGER_SCREENBLUR_FADE_OUT(transitionTime);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_GRAPHICS_DISABLE_SCREENBLUR_FADE(WrenVM* vm)
    {

        GRAPHICS::DISABLE_SCREENBLUR_FADE();
    }

    static void WREN_GRAPHICS_GET_SCREENBLUR_FADE_CURRENT_TIME(WrenVM* vm)
    {

        float res = GRAPHICS::GET_SCREENBLUR_FADE_CURRENT_TIME();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_GRAPHICS_IS_SCREENBLUR_FADE_RUNNING(WrenVM* vm)
    {

        BOOL res = GRAPHICS::IS_SCREENBLUR_FADE_RUNNING();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_GRAPHICS_TOGGLE_PAUSED_RENDERPHASES(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        GRAPHICS::TOGGLE_PAUSED_RENDERPHASES(toggle);
    }

    static void WREN_GRAPHICS_GET_TOGGLE_PAUSED_RENDERPHASES_STATUS(WrenVM* vm)
    {

        BOOL res = GRAPHICS::GET_TOGGLE_PAUSED_RENDERPHASES_STATUS();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_GRAPHICS_RESET_PAUSED_RENDERPHASES(WrenVM* vm)
    {

        GRAPHICS::RESET_PAUSED_RENDERPHASES();
    }

    static void WREN_GRAPHICS_GRAB_PAUSEMENU_OWNERSHIP(WrenVM* vm)
    {

        GRAPHICS::GRAB_PAUSEMENU_OWNERSHIP();
    }

    static void WREN_GRAPHICS_SET_HIDOF_OVERRIDE(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        float nearplaneOut = (float)wrenGetSlotDouble(vm, 3);
        float nearplaneIn = (float)wrenGetSlotDouble(vm, 4);
        float farplaneOut = (float)wrenGetSlotDouble(vm, 5);
        float farplaneIn = (float)wrenGetSlotDouble(vm, 6);

        GRAPHICS::SET_HIDOF_OVERRIDE(p0, p1, nearplaneOut, nearplaneIn, farplaneOut, farplaneIn);
    }

    static void WREN_GRAPHICS_SET_LOCK_ADAPTIVE_DOF_DISTANCE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        GRAPHICS::SET_LOCK_ADAPTIVE_DOF_DISTANCE(p0);
    }

    static void WREN_GRAPHICS_PHONEPHOTOEDITOR_TOGGLE(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        BOOL res = GRAPHICS::PHONEPHOTOEDITOR_TOGGLE(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_GRAPHICS_PHONEPHOTOEDITOR_IS_ACTIVE(WrenVM* vm)
    {

        Any res = GRAPHICS::PHONEPHOTOEDITOR_IS_ACTIVE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_GRAPHICS_PHONEPHOTOEDITOR_SET_FRAME_TXD(WrenVM* vm)
    {
        const char* textureDict = wrenGetSlotString(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        BOOL res = GRAPHICS::PHONEPHOTOEDITOR_SET_FRAME_TXD(textureDict, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_GRAPHICS_START_PARTICLE_FX_NON_LOOPED_AT_COORD(WrenVM* vm)
    {
        const char* effectName = wrenGetSlotString(vm, 1);
        float xPos = (float)wrenGetSlotDouble(vm, 2);
        float yPos = (float)wrenGetSlotDouble(vm, 3);
        float zPos = (float)wrenGetSlotDouble(vm, 4);
        float xRot = (float)wrenGetSlotDouble(vm, 5);
        float yRot = (float)wrenGetSlotDouble(vm, 6);
        float zRot = (float)wrenGetSlotDouble(vm, 7);
        float scale = (float)wrenGetSlotDouble(vm, 8);
        BOOL xAxis = (BOOL)wrenGetSlotBool(vm, 9);
        BOOL yAxis = (BOOL)wrenGetSlotBool(vm, 10);
        BOOL zAxis = (BOOL)wrenGetSlotBool(vm, 11);

        int res = GRAPHICS::START_PARTICLE_FX_NON_LOOPED_AT_COORD(effectName, xPos, yPos, zPos, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_GRAPHICS_START_NETWORKED_PARTICLE_FX_NON_LOOPED_AT_COORD(WrenVM* vm)
    {
        const char* effectName = wrenGetSlotString(vm, 1);
        float xPos = (float)wrenGetSlotDouble(vm, 2);
        float yPos = (float)wrenGetSlotDouble(vm, 3);
        float zPos = (float)wrenGetSlotDouble(vm, 4);
        float xRot = (float)wrenGetSlotDouble(vm, 5);
        float yRot = (float)wrenGetSlotDouble(vm, 6);
        float zRot = (float)wrenGetSlotDouble(vm, 7);
        float scale = (float)wrenGetSlotDouble(vm, 8);
        BOOL xAxis = (BOOL)wrenGetSlotBool(vm, 9);
        BOOL yAxis = (BOOL)wrenGetSlotBool(vm, 10);
        BOOL zAxis = (BOOL)wrenGetSlotBool(vm, 11);
        BOOL p11 = (BOOL)wrenGetSlotBool(vm, 12);

        BOOL res = GRAPHICS::START_NETWORKED_PARTICLE_FX_NON_LOOPED_AT_COORD(effectName, xPos, yPos, zPos, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis, p11);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_GRAPHICS_START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE(WrenVM* vm)
    {
        const char* effectName = wrenGetSlotString(vm, 1);
        Ped ped = (Ped)wrenGetSlotDouble(vm, 2);
        float offsetX = (float)wrenGetSlotDouble(vm, 3);
        float offsetY = (float)wrenGetSlotDouble(vm, 4);
        float offsetZ = (float)wrenGetSlotDouble(vm, 5);
        float rotX = (float)wrenGetSlotDouble(vm, 6);
        float rotY = (float)wrenGetSlotDouble(vm, 7);
        float rotZ = (float)wrenGetSlotDouble(vm, 8);
        int boneIndex = (int)wrenGetSlotDouble(vm, 9);
        float scale = (float)wrenGetSlotDouble(vm, 10);
        BOOL axisX = (BOOL)wrenGetSlotBool(vm, 11);
        BOOL axisY = (BOOL)wrenGetSlotBool(vm, 12);
        BOOL axisZ = (BOOL)wrenGetSlotBool(vm, 13);

        BOOL res = GRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE(effectName, ped, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, boneIndex, scale, axisX, axisY, axisZ);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_GRAPHICS_START_NETWORKED_PARTICLE_FX_NON_LOOPED_ON_PED_BONE(WrenVM* vm)
    {
        const char* effectName = wrenGetSlotString(vm, 1);
        Ped ped = (Ped)wrenGetSlotDouble(vm, 2);
        float offsetX = (float)wrenGetSlotDouble(vm, 3);
        float offsetY = (float)wrenGetSlotDouble(vm, 4);
        float offsetZ = (float)wrenGetSlotDouble(vm, 5);
        float rotX = (float)wrenGetSlotDouble(vm, 6);
        float rotY = (float)wrenGetSlotDouble(vm, 7);
        float rotZ = (float)wrenGetSlotDouble(vm, 8);
        int boneIndex = (int)wrenGetSlotDouble(vm, 9);
        float scale = (float)wrenGetSlotDouble(vm, 10);
        BOOL axisX = (BOOL)wrenGetSlotBool(vm, 11);
        BOOL axisY = (BOOL)wrenGetSlotBool(vm, 12);
        BOOL axisZ = (BOOL)wrenGetSlotBool(vm, 13);

        BOOL res = GRAPHICS::START_NETWORKED_PARTICLE_FX_NON_LOOPED_ON_PED_BONE(effectName, ped, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, boneIndex, scale, axisX, axisY, axisZ);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_GRAPHICS_START_PARTICLE_FX_NON_LOOPED_ON_ENTITY(WrenVM* vm)
    {
        const char* effectName = wrenGetSlotString(vm, 1);
        Entity entity = (Entity)wrenGetSlotDouble(vm, 2);
        float offsetX = (float)wrenGetSlotDouble(vm, 3);
        float offsetY = (float)wrenGetSlotDouble(vm, 4);
        float offsetZ = (float)wrenGetSlotDouble(vm, 5);
        float rotX = (float)wrenGetSlotDouble(vm, 6);
        float rotY = (float)wrenGetSlotDouble(vm, 7);
        float rotZ = (float)wrenGetSlotDouble(vm, 8);
        float scale = (float)wrenGetSlotDouble(vm, 9);
        BOOL axisX = (BOOL)wrenGetSlotBool(vm, 10);
        BOOL axisY = (BOOL)wrenGetSlotBool(vm, 11);
        BOOL axisZ = (BOOL)wrenGetSlotBool(vm, 12);

        BOOL res = GRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_ENTITY(effectName, entity, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, scale, axisX, axisY, axisZ);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_GRAPHICS_START_NETWORKED_PARTICLE_FX_NON_LOOPED_ON_ENTITY(WrenVM* vm)
    {
        const char* effectName = wrenGetSlotString(vm, 1);
        Entity entity = (Entity)wrenGetSlotDouble(vm, 2);
        float offsetX = (float)wrenGetSlotDouble(vm, 3);
        float offsetY = (float)wrenGetSlotDouble(vm, 4);
        float offsetZ = (float)wrenGetSlotDouble(vm, 5);
        float rotX = (float)wrenGetSlotDouble(vm, 6);
        float rotY = (float)wrenGetSlotDouble(vm, 7);
        float rotZ = (float)wrenGetSlotDouble(vm, 8);
        float scale = (float)wrenGetSlotDouble(vm, 9);
        BOOL axisX = (BOOL)wrenGetSlotBool(vm, 10);
        BOOL axisY = (BOOL)wrenGetSlotBool(vm, 11);
        BOOL axisZ = (BOOL)wrenGetSlotBool(vm, 12);

        BOOL res = GRAPHICS::START_NETWORKED_PARTICLE_FX_NON_LOOPED_ON_ENTITY(effectName, entity, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, scale, axisX, axisY, axisZ);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_GRAPHICS_START_PARTICLE_FX_NON_LOOPED_ON_ENTITY_BONE(WrenVM* vm)
    {
        const char* effectName = wrenGetSlotString(vm, 1);
        Entity entity = (Entity)wrenGetSlotDouble(vm, 2);
        float offsetX = (float)wrenGetSlotDouble(vm, 3);
        float offsetY = (float)wrenGetSlotDouble(vm, 4);
        float offsetZ = (float)wrenGetSlotDouble(vm, 5);
        float rotX = (float)wrenGetSlotDouble(vm, 6);
        float rotY = (float)wrenGetSlotDouble(vm, 7);
        float rotZ = (float)wrenGetSlotDouble(vm, 8);
        int boneIndex = (int)wrenGetSlotDouble(vm, 9);
        float scale = (float)wrenGetSlotDouble(vm, 10);
        BOOL axisX = (BOOL)wrenGetSlotBool(vm, 11);
        BOOL axisY = (BOOL)wrenGetSlotBool(vm, 12);
        BOOL axisZ = (BOOL)wrenGetSlotBool(vm, 13);

        BOOL res = GRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_ENTITY_BONE(effectName, entity, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, boneIndex, scale, axisX, axisY, axisZ);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_GRAPHICS_SET_PARTICLE_FX_NON_LOOPED_COLOUR(WrenVM* vm)
    {
        float r = (float)wrenGetSlotDouble(vm, 1);
        float g = (float)wrenGetSlotDouble(vm, 2);
        float b = (float)wrenGetSlotDouble(vm, 3);

        GRAPHICS::SET_PARTICLE_FX_NON_LOOPED_COLOUR(r, g, b);
    }

    static void WREN_GRAPHICS_SET_PARTICLE_FX_NON_LOOPED_ALPHA(WrenVM* vm)
    {
        float alpha = (float)wrenGetSlotDouble(vm, 1);

        GRAPHICS::SET_PARTICLE_FX_NON_LOOPED_ALPHA(alpha);
    }

    static void WREN_GRAPHICS_SET_PARTICLE_FX_NON_LOOPED_EMITTER_SIZE(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);
        float scale = (float)wrenGetSlotDouble(vm, 3);

        GRAPHICS::SET_PARTICLE_FX_NON_LOOPED_EMITTER_SIZE(p0, p1, scale);
    }

    static void WREN_GRAPHICS_SET_PARTICLE_FX_FORCE_VEHICLE_INTERIOR(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        GRAPHICS::SET_PARTICLE_FX_FORCE_VEHICLE_INTERIOR(toggle);
    }

    static void WREN_GRAPHICS_START_PARTICLE_FX_LOOPED_AT_COORD(WrenVM* vm)
    {
        const char* effectName = wrenGetSlotString(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);
        float xRot = (float)wrenGetSlotDouble(vm, 5);
        float yRot = (float)wrenGetSlotDouble(vm, 6);
        float zRot = (float)wrenGetSlotDouble(vm, 7);
        float scale = (float)wrenGetSlotDouble(vm, 8);
        BOOL xAxis = (BOOL)wrenGetSlotBool(vm, 9);
        BOOL yAxis = (BOOL)wrenGetSlotBool(vm, 10);
        BOOL zAxis = (BOOL)wrenGetSlotBool(vm, 11);
        BOOL p11 = (BOOL)wrenGetSlotBool(vm, 12);

        int res = GRAPHICS::START_PARTICLE_FX_LOOPED_AT_COORD(effectName, x, y, z, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis, p11);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_GRAPHICS_START_PARTICLE_FX_LOOPED_ON_PED_BONE(WrenVM* vm)
    {
        const char* effectName = wrenGetSlotString(vm, 1);
        Ped ped = (Ped)wrenGetSlotDouble(vm, 2);
        float xOffset = (float)wrenGetSlotDouble(vm, 3);
        float yOffset = (float)wrenGetSlotDouble(vm, 4);
        float zOffset = (float)wrenGetSlotDouble(vm, 5);
        float xRot = (float)wrenGetSlotDouble(vm, 6);
        float yRot = (float)wrenGetSlotDouble(vm, 7);
        float zRot = (float)wrenGetSlotDouble(vm, 8);
        int boneIndex = (int)wrenGetSlotDouble(vm, 9);
        float scale = (float)wrenGetSlotDouble(vm, 10);
        BOOL xAxis = (BOOL)wrenGetSlotBool(vm, 11);
        BOOL yAxis = (BOOL)wrenGetSlotBool(vm, 12);
        BOOL zAxis = (BOOL)wrenGetSlotBool(vm, 13);

        int res = GRAPHICS::START_PARTICLE_FX_LOOPED_ON_PED_BONE(effectName, ped, xOffset, yOffset, zOffset, xRot, yRot, zRot, boneIndex, scale, xAxis, yAxis, zAxis);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_GRAPHICS_START_PARTICLE_FX_LOOPED_ON_ENTITY(WrenVM* vm)
    {
        const char* effectName = wrenGetSlotString(vm, 1);
        Entity entity = (Entity)wrenGetSlotDouble(vm, 2);
        float xOffset = (float)wrenGetSlotDouble(vm, 3);
        float yOffset = (float)wrenGetSlotDouble(vm, 4);
        float zOffset = (float)wrenGetSlotDouble(vm, 5);
        float xRot = (float)wrenGetSlotDouble(vm, 6);
        float yRot = (float)wrenGetSlotDouble(vm, 7);
        float zRot = (float)wrenGetSlotDouble(vm, 8);
        float scale = (float)wrenGetSlotDouble(vm, 9);
        BOOL xAxis = (BOOL)wrenGetSlotBool(vm, 10);
        BOOL yAxis = (BOOL)wrenGetSlotBool(vm, 11);
        BOOL zAxis = (BOOL)wrenGetSlotBool(vm, 12);

        int res = GRAPHICS::START_PARTICLE_FX_LOOPED_ON_ENTITY(effectName, entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_GRAPHICS_START_PARTICLE_FX_LOOPED_ON_ENTITY_BONE(WrenVM* vm)
    {
        const char* effectName = wrenGetSlotString(vm, 1);
        Entity entity = (Entity)wrenGetSlotDouble(vm, 2);
        float xOffset = (float)wrenGetSlotDouble(vm, 3);
        float yOffset = (float)wrenGetSlotDouble(vm, 4);
        float zOffset = (float)wrenGetSlotDouble(vm, 5);
        float xRot = (float)wrenGetSlotDouble(vm, 6);
        float yRot = (float)wrenGetSlotDouble(vm, 7);
        float zRot = (float)wrenGetSlotDouble(vm, 8);
        int boneIndex = (int)wrenGetSlotDouble(vm, 9);
        float scale = (float)wrenGetSlotDouble(vm, 10);
        BOOL xAxis = (BOOL)wrenGetSlotBool(vm, 11);
        BOOL yAxis = (BOOL)wrenGetSlotBool(vm, 12);
        BOOL zAxis = (BOOL)wrenGetSlotBool(vm, 13);

        int res = GRAPHICS::START_PARTICLE_FX_LOOPED_ON_ENTITY_BONE(effectName, entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, boneIndex, scale, xAxis, yAxis, zAxis);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_GRAPHICS_START_NETWORKED_PARTICLE_FX_LOOPED_ON_ENTITY(WrenVM* vm)
    {
        const char* effectName = wrenGetSlotString(vm, 1);
        Entity entity = (Entity)wrenGetSlotDouble(vm, 2);
        float xOffset = (float)wrenGetSlotDouble(vm, 3);
        float yOffset = (float)wrenGetSlotDouble(vm, 4);
        float zOffset = (float)wrenGetSlotDouble(vm, 5);
        float xRot = (float)wrenGetSlotDouble(vm, 6);
        float yRot = (float)wrenGetSlotDouble(vm, 7);
        float zRot = (float)wrenGetSlotDouble(vm, 8);
        float scale = (float)wrenGetSlotDouble(vm, 9);
        BOOL xAxis = (BOOL)wrenGetSlotBool(vm, 10);
        BOOL yAxis = (BOOL)wrenGetSlotBool(vm, 11);
        BOOL zAxis = (BOOL)wrenGetSlotBool(vm, 12);
        Any p12 = (Any)wrenGetSlotDouble(vm, 13);
        Any p13 = (Any)wrenGetSlotDouble(vm, 14);
        Any p14 = (Any)wrenGetSlotDouble(vm, 15);
        Any p15 = (Any)wrenGetSlotDouble(vm, 16);

        int res = GRAPHICS::START_NETWORKED_PARTICLE_FX_LOOPED_ON_ENTITY(effectName, entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis, p12, p13, p14, p15);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_GRAPHICS_START_NETWORKED_PARTICLE_FX_LOOPED_ON_ENTITY_BONE(WrenVM* vm)
    {
        const char* effectName = wrenGetSlotString(vm, 1);
        Entity entity = (Entity)wrenGetSlotDouble(vm, 2);
        float xOffset = (float)wrenGetSlotDouble(vm, 3);
        float yOffset = (float)wrenGetSlotDouble(vm, 4);
        float zOffset = (float)wrenGetSlotDouble(vm, 5);
        float xRot = (float)wrenGetSlotDouble(vm, 6);
        float yRot = (float)wrenGetSlotDouble(vm, 7);
        float zRot = (float)wrenGetSlotDouble(vm, 8);
        int boneIndex = (int)wrenGetSlotDouble(vm, 9);
        float scale = (float)wrenGetSlotDouble(vm, 10);
        BOOL xAxis = (BOOL)wrenGetSlotBool(vm, 11);
        BOOL yAxis = (BOOL)wrenGetSlotBool(vm, 12);
        BOOL zAxis = (BOOL)wrenGetSlotBool(vm, 13);
        Any p13 = (Any)wrenGetSlotDouble(vm, 14);
        Any p14 = (Any)wrenGetSlotDouble(vm, 15);
        Any p15 = (Any)wrenGetSlotDouble(vm, 16);
        Any p16 = (Any)wrenGetSlotDouble(vm, 17);

        int res = GRAPHICS::START_NETWORKED_PARTICLE_FX_LOOPED_ON_ENTITY_BONE(effectName, entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, boneIndex, scale, xAxis, yAxis, zAxis, p13, p14, p15, p16);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_GRAPHICS_STOP_PARTICLE_FX_LOOPED(WrenVM* vm)
    {
        int ptfxHandle = (int)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        GRAPHICS::STOP_PARTICLE_FX_LOOPED(ptfxHandle, p1);
    }

    static void WREN_GRAPHICS_REMOVE_PARTICLE_FX(WrenVM* vm)
    {
        int ptfxHandle = (int)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        GRAPHICS::REMOVE_PARTICLE_FX(ptfxHandle, p1);
    }

    static void WREN_GRAPHICS_REMOVE_PARTICLE_FX_FROM_ENTITY(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        GRAPHICS::REMOVE_PARTICLE_FX_FROM_ENTITY(entity);
    }

    static void WREN_GRAPHICS_REMOVE_PARTICLE_FX_IN_RANGE(WrenVM* vm)
    {
        float X = (float)wrenGetSlotDouble(vm, 1);
        float Y = (float)wrenGetSlotDouble(vm, 2);
        float Z = (float)wrenGetSlotDouble(vm, 3);
        float radius = (float)wrenGetSlotDouble(vm, 4);

        GRAPHICS::REMOVE_PARTICLE_FX_IN_RANGE(X, Y, Z, radius);
    }

    static void WREN_GRAPHICS_FORCE_PARTICLE_FX_IN_VEHICLE_INTERIOR(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        GRAPHICS::FORCE_PARTICLE_FX_IN_VEHICLE_INTERIOR(p0, p1);
    }

    static void WREN_GRAPHICS_DOES_PARTICLE_FX_LOOPED_EXIST(WrenVM* vm)
    {
        int ptfxHandle = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = GRAPHICS::DOES_PARTICLE_FX_LOOPED_EXIST(ptfxHandle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_GRAPHICS_SET_PARTICLE_FX_LOOPED_OFFSETS(WrenVM* vm)
    {
        int ptfxHandle = (int)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);
        float rotX = (float)wrenGetSlotDouble(vm, 5);
        float rotY = (float)wrenGetSlotDouble(vm, 6);
        float rotZ = (float)wrenGetSlotDouble(vm, 7);

        GRAPHICS::SET_PARTICLE_FX_LOOPED_OFFSETS(ptfxHandle, x, y, z, rotX, rotY, rotZ);
    }

    static void WREN_GRAPHICS_SET_PARTICLE_FX_LOOPED_EVOLUTION(WrenVM* vm)
    {
        int ptfxHandle = (int)wrenGetSlotDouble(vm, 1);
        const char* propertyName = wrenGetSlotString(vm, 2);
        float amount = (float)wrenGetSlotDouble(vm, 3);
        BOOL noNetwork = (BOOL)wrenGetSlotBool(vm, 4);

        GRAPHICS::SET_PARTICLE_FX_LOOPED_EVOLUTION(ptfxHandle, propertyName, amount, noNetwork);
    }

    static void WREN_GRAPHICS_SET_PARTICLE_FX_LOOPED_COLOUR(WrenVM* vm)
    {
        int ptfxHandle = (int)wrenGetSlotDouble(vm, 1);
        float r = (float)wrenGetSlotDouble(vm, 2);
        float g = (float)wrenGetSlotDouble(vm, 3);
        float b = (float)wrenGetSlotDouble(vm, 4);
        BOOL p4 = (BOOL)wrenGetSlotBool(vm, 5);

        GRAPHICS::SET_PARTICLE_FX_LOOPED_COLOUR(ptfxHandle, r, g, b, p4);
    }

    static void WREN_GRAPHICS_SET_PARTICLE_FX_LOOPED_ALPHA(WrenVM* vm)
    {
        int ptfxHandle = (int)wrenGetSlotDouble(vm, 1);
        float alpha = (float)wrenGetSlotDouble(vm, 2);

        GRAPHICS::SET_PARTICLE_FX_LOOPED_ALPHA(ptfxHandle, alpha);
    }

    static void WREN_GRAPHICS_SET_PARTICLE_FX_LOOPED_SCALE(WrenVM* vm)
    {
        int ptfxHandle = (int)wrenGetSlotDouble(vm, 1);
        float scale = (float)wrenGetSlotDouble(vm, 2);

        GRAPHICS::SET_PARTICLE_FX_LOOPED_SCALE(ptfxHandle, scale);
    }

    static void WREN_GRAPHICS_SET_PARTICLE_FX_LOOPED_FAR_CLIP_DIST(WrenVM* vm)
    {
        int ptfxHandle = (int)wrenGetSlotDouble(vm, 1);
        float range = (float)wrenGetSlotDouble(vm, 2);

        GRAPHICS::SET_PARTICLE_FX_LOOPED_FAR_CLIP_DIST(ptfxHandle, range);
    }

    static void WREN_GRAPHICS_SET_PARTICLE_FX_CAM_INSIDE_VEHICLE(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        GRAPHICS::SET_PARTICLE_FX_CAM_INSIDE_VEHICLE(p0);
    }

    static void WREN_GRAPHICS_SET_PARTICLE_FX_CAM_INSIDE_NONPLAYER_VEHICLE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        GRAPHICS::SET_PARTICLE_FX_CAM_INSIDE_NONPLAYER_VEHICLE(vehicle, p1);
    }

    static void WREN_GRAPHICS_SET_PARTICLE_FX_SHOOTOUT_BOAT(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        GRAPHICS::SET_PARTICLE_FX_SHOOTOUT_BOAT(p0);
    }

    static void WREN_GRAPHICS_CLEAR_PARTICLE_FX_SHOOTOUT_BOAT(WrenVM* vm)
    {

        GRAPHICS::CLEAR_PARTICLE_FX_SHOOTOUT_BOAT();
    }

    static void WREN_GRAPHICS_SET_PARTICLE_FX_BLOOD_SCALE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        GRAPHICS::SET_PARTICLE_FX_BLOOD_SCALE(p0);
    }

    static void WREN_GRAPHICS_DISABLE_IN_WATER_PTFX(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        GRAPHICS::DISABLE_IN_WATER_PTFX(toggle);
    }

    static void WREN_GRAPHICS_DISABLE_DOWNWASH_PTFX(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        GRAPHICS::DISABLE_DOWNWASH_PTFX(toggle);
    }

    static void WREN_GRAPHICS_SET_PARTICLE_FX_SLIPSTREAM_LODRANGE_SCALE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        GRAPHICS::SET_PARTICLE_FX_SLIPSTREAM_LODRANGE_SCALE(p0);
    }

    static void WREN_GRAPHICS_ENABLE_CLOWN_BLOOD_VFX(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        GRAPHICS::ENABLE_CLOWN_BLOOD_VFX(toggle);
    }

    static void WREN_GRAPHICS_ENABLE_ALIEN_BLOOD_VFX(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        GRAPHICS::ENABLE_ALIEN_BLOOD_VFX(toggle);
    }

    static void WREN_GRAPHICS_SET_PARTICLE_FX_BULLET_IMPACT_SCALE(WrenVM* vm)
    {
        float scale = (float)wrenGetSlotDouble(vm, 1);

        GRAPHICS::SET_PARTICLE_FX_BULLET_IMPACT_SCALE(scale);
    }

    static void WREN_GRAPHICS_SET_PARTICLE_FX_BULLET_IMPACT_LODRANGE_SCALE(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);

        GRAPHICS::SET_PARTICLE_FX_BULLET_IMPACT_LODRANGE_SCALE(p0);
    }

    static void WREN_GRAPHICS_SET_PARTICLE_FX_BULLET_TRACE_NO_ANGLE_REJECT(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        GRAPHICS::SET_PARTICLE_FX_BULLET_TRACE_NO_ANGLE_REJECT(p0);
    }

    static void WREN_GRAPHICS_SET_PARTICLE_FX_BANG_SCRAPE_LODRANGE_SCALE(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);

        GRAPHICS::SET_PARTICLE_FX_BANG_SCRAPE_LODRANGE_SCALE(p0);
    }

    static void WREN_GRAPHICS_SET_PARTICLE_FX_FOOT_LODRANGE_SCALE(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);

        GRAPHICS::SET_PARTICLE_FX_FOOT_LODRANGE_SCALE(p0);
    }

    static void WREN_GRAPHICS_SET_PARTICLE_FX_FOOT_OVERRIDE_NAME(WrenVM* vm)
    {
        const char* p0 = wrenGetSlotString(vm, 1);

        GRAPHICS::SET_PARTICLE_FX_FOOT_OVERRIDE_NAME(p0);
    }

    static void WREN_GRAPHICS_SET_SKIDMARK_RANGE_SCALE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        GRAPHICS::SET_SKIDMARK_RANGE_SCALE(p0);
    }

    static void WREN_GRAPHICS_SET_PTFX_FORCE_VEHICLE_INTERIOR_FLAG(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        GRAPHICS::SET_PTFX_FORCE_VEHICLE_INTERIOR_FLAG(p0);
    }

    static void WREN_GRAPHICS_FORCE_POSTFX_BULLET_IMPACTS_AFTER_HUD(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        GRAPHICS::FORCE_POSTFX_BULLET_IMPACTS_AFTER_HUD(p0);
    }

    static void WREN_GRAPHICS_USE_PARTICLE_FX_ASSET(WrenVM* vm)
    {
        const char* name = wrenGetSlotString(vm, 1);

        GRAPHICS::USE_PARTICLE_FX_ASSET(name);
    }

    static void WREN_GRAPHICS_SET_PARTICLE_FX_OVERRIDE(WrenVM* vm)
    {
        const char* oldAsset = wrenGetSlotString(vm, 1);
        const char* newAsset = wrenGetSlotString(vm, 2);

        GRAPHICS::SET_PARTICLE_FX_OVERRIDE(oldAsset, newAsset);
    }

    static void WREN_GRAPHICS_RESET_PARTICLE_FX_OVERRIDE(WrenVM* vm)
    {
        const char* name = wrenGetSlotString(vm, 1);

        GRAPHICS::RESET_PARTICLE_FX_OVERRIDE(name);
    }

    static void WREN_GRAPHICS_SET_WEATHER_PTFX_USE_OVERRIDE_SETTINGS(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        GRAPHICS::SET_WEATHER_PTFX_USE_OVERRIDE_SETTINGS(p0);
    }

    static void WREN_GRAPHICS_SET_WEATHER_PTFX_OVERRIDE_CURR_LEVEL(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);

        GRAPHICS::SET_WEATHER_PTFX_OVERRIDE_CURR_LEVEL(p0);
    }

    static void WREN_GRAPHICS_WASH_DECALS_IN_RANGE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);

        GRAPHICS::WASH_DECALS_IN_RANGE(p0, p1, p2, p3, p4);
    }

    static void WREN_GRAPHICS_WASH_DECALS_FROM_VEHICLE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);

        GRAPHICS::WASH_DECALS_FROM_VEHICLE(vehicle, p1);
    }

    static void WREN_GRAPHICS_FADE_DECALS_IN_RANGE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);

        GRAPHICS::FADE_DECALS_IN_RANGE(p0, p1, p2, p3, p4);
    }

    static void WREN_GRAPHICS_REMOVE_DECALS_IN_RANGE(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        float range = (float)wrenGetSlotDouble(vm, 4);

        GRAPHICS::REMOVE_DECALS_IN_RANGE(x, y, z, range);
    }

    static void WREN_GRAPHICS_REMOVE_DECALS_FROM_OBJECT(WrenVM* vm)
    {
        Object obj = (Object)wrenGetSlotDouble(vm, 1);

        GRAPHICS::REMOVE_DECALS_FROM_OBJECT(obj);
    }

    static void WREN_GRAPHICS_REMOVE_DECALS_FROM_OBJECT_FACING(WrenVM* vm)
    {
        Object obj = (Object)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);

        GRAPHICS::REMOVE_DECALS_FROM_OBJECT_FACING(obj, x, y, z);
    }

    static void WREN_GRAPHICS_REMOVE_DECALS_FROM_VEHICLE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        GRAPHICS::REMOVE_DECALS_FROM_VEHICLE(vehicle);
    }

    static void WREN_GRAPHICS_ADD_DECAL(WrenVM* vm)
    {
        int decalType = (int)wrenGetSlotDouble(vm, 1);
        float posX = (float)wrenGetSlotDouble(vm, 2);
        float posY = (float)wrenGetSlotDouble(vm, 3);
        float posZ = (float)wrenGetSlotDouble(vm, 4);
        float p4 = (float)wrenGetSlotDouble(vm, 5);
        float p5 = (float)wrenGetSlotDouble(vm, 6);
        float p6 = (float)wrenGetSlotDouble(vm, 7);
        float p7 = (float)wrenGetSlotDouble(vm, 8);
        float p8 = (float)wrenGetSlotDouble(vm, 9);
        float p9 = (float)wrenGetSlotDouble(vm, 10);
        float width = (float)wrenGetSlotDouble(vm, 11);
        float height = (float)wrenGetSlotDouble(vm, 12);
        float rCoef = (float)wrenGetSlotDouble(vm, 13);
        float gCoef = (float)wrenGetSlotDouble(vm, 14);
        float bCoef = (float)wrenGetSlotDouble(vm, 15);
        float opacity = (float)wrenGetSlotDouble(vm, 16);
        float timeout = (float)wrenGetSlotDouble(vm, 17);
        BOOL p17 = (BOOL)wrenGetSlotBool(vm, 18);
        BOOL p18 = (BOOL)wrenGetSlotBool(vm, 19);
        BOOL p19 = (BOOL)wrenGetSlotBool(vm, 20);

        int res = GRAPHICS::ADD_DECAL(decalType, posX, posY, posZ, p4, p5, p6, p7, p8, p9, width, height, rCoef, gCoef, bCoef, opacity, timeout, p17, p18, p19);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_GRAPHICS_ADD_PETROL_DECAL(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        float groundLvl = (float)wrenGetSlotDouble(vm, 4);
        float width = (float)wrenGetSlotDouble(vm, 5);
        float transparency = (float)wrenGetSlotDouble(vm, 6);

        int res = GRAPHICS::ADD_PETROL_DECAL(x, y, z, groundLvl, width, transparency);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_GRAPHICS_ADD_OIL_DECAL(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        float groundLvl = (float)wrenGetSlotDouble(vm, 4);
        float width = (float)wrenGetSlotDouble(vm, 5);
        float transparency = (float)wrenGetSlotDouble(vm, 6);

        int res = GRAPHICS::ADD_OIL_DECAL(x, y, z, groundLvl, width, transparency);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_GRAPHICS_START_PETROL_TRAIL_DECALS(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);

        GRAPHICS::START_PETROL_TRAIL_DECALS(p0);
    }

    static void WREN_GRAPHICS_ADD_PETROL_TRAIL_DECAL_INFO(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        float p3 = (float)wrenGetSlotDouble(vm, 4);

        GRAPHICS::ADD_PETROL_TRAIL_DECAL_INFO(x, y, z, p3);
    }

    static void WREN_GRAPHICS_END_PETROL_TRAIL_DECALS(WrenVM* vm)
    {

        GRAPHICS::END_PETROL_TRAIL_DECALS();
    }

    static void WREN_GRAPHICS_REMOVE_DECAL(WrenVM* vm)
    {
        int decal = (int)wrenGetSlotDouble(vm, 1);

        GRAPHICS::REMOVE_DECAL(decal);
    }

    static void WREN_GRAPHICS_IS_DECAL_ALIVE(WrenVM* vm)
    {
        int decal = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = GRAPHICS::IS_DECAL_ALIVE(decal);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_GRAPHICS_GET_DECAL_WASH_LEVEL(WrenVM* vm)
    {
        int decal = (int)wrenGetSlotDouble(vm, 1);

        float res = GRAPHICS::GET_DECAL_WASH_LEVEL(decal);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_GRAPHICS_SET_DISABLE_PETROL_DECALS_IGNITING_THIS_FRAME(WrenVM* vm)
    {

        GRAPHICS::SET_DISABLE_PETROL_DECALS_IGNITING_THIS_FRAME();
    }

    static void WREN_GRAPHICS_SET_DISABLE_PETROL_DECALS_RECYCLING_THIS_FRAME(WrenVM* vm)
    {

        GRAPHICS::SET_DISABLE_PETROL_DECALS_RECYCLING_THIS_FRAME();
    }

    static void WREN_GRAPHICS_SET_DISABLE_DECAL_RENDERING_THIS_FRAME(WrenVM* vm)
    {

        GRAPHICS::SET_DISABLE_DECAL_RENDERING_THIS_FRAME();
    }

    static void WREN_GRAPHICS_GET_IS_PETROL_DECAL_IN_RANGE(WrenVM* vm)
    {
        float xCoord = (float)wrenGetSlotDouble(vm, 1);
        float yCoord = (float)wrenGetSlotDouble(vm, 2);
        float zCoord = (float)wrenGetSlotDouble(vm, 3);
        float radius = (float)wrenGetSlotDouble(vm, 4);

        BOOL res = GRAPHICS::GET_IS_PETROL_DECAL_IN_RANGE(xCoord, yCoord, zCoord, radius);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_GRAPHICS_PATCH_DECAL_DIFFUSE_MAP(WrenVM* vm)
    {
        int decalType = (int)wrenGetSlotDouble(vm, 1);
        const char* textureDict = wrenGetSlotString(vm, 2);
        const char* textureName = wrenGetSlotString(vm, 3);

        GRAPHICS::PATCH_DECAL_DIFFUSE_MAP(decalType, textureDict, textureName);
    }

    static void WREN_GRAPHICS_UNPATCH_DECAL_DIFFUSE_MAP(WrenVM* vm)
    {
        int decalType = (int)wrenGetSlotDouble(vm, 1);

        GRAPHICS::UNPATCH_DECAL_DIFFUSE_MAP(decalType);
    }

    static void WREN_GRAPHICS_MOVE_VEHICLE_DECALS(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        GRAPHICS::MOVE_VEHICLE_DECALS(p0, p1);
    }

    static void WREN_GRAPHICS_ADD_VEHICLE_CREW_EMBLEM(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        Ped ped = (Ped)wrenGetSlotDouble(vm, 2);
        int boneIndex = (int)wrenGetSlotDouble(vm, 3);
        float x1 = (float)wrenGetSlotDouble(vm, 4);
        float x2 = (float)wrenGetSlotDouble(vm, 5);
        float x3 = (float)wrenGetSlotDouble(vm, 6);
        float y1 = (float)wrenGetSlotDouble(vm, 7);
        float y2 = (float)wrenGetSlotDouble(vm, 8);
        float y3 = (float)wrenGetSlotDouble(vm, 9);
        float z1 = (float)wrenGetSlotDouble(vm, 10);
        float z2 = (float)wrenGetSlotDouble(vm, 11);
        float z3 = (float)wrenGetSlotDouble(vm, 12);
        float scale = (float)wrenGetSlotDouble(vm, 13);
        Any p13 = (Any)wrenGetSlotDouble(vm, 14);
        int alpha = (int)wrenGetSlotDouble(vm, 15);

        BOOL res = GRAPHICS::ADD_VEHICLE_CREW_EMBLEM(vehicle, ped, boneIndex, x1, x2, x3, y1, y2, y3, z1, z2, z3, scale, p13, alpha);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_GRAPHICS_ABORT_VEHICLE_CREW_EMBLEM_REQUEST(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        Any res = GRAPHICS::ABORT_VEHICLE_CREW_EMBLEM_REQUEST(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_GRAPHICS_REMOVE_VEHICLE_CREW_EMBLEM(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);

        GRAPHICS::REMOVE_VEHICLE_CREW_EMBLEM(vehicle, p1);
    }

    static void WREN_GRAPHICS_GET_VEHICLE_CREW_EMBLEM_REQUEST_STATE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);

        int res = GRAPHICS::GET_VEHICLE_CREW_EMBLEM_REQUEST_STATE(vehicle, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_GRAPHICS_DOES_VEHICLE_HAVE_CREW_EMBLEM(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);

        BOOL res = GRAPHICS::DOES_VEHICLE_HAVE_CREW_EMBLEM(vehicle, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_GRAPHICS_DISABLE_COMPOSITE_SHOTGUN_DECALS(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        GRAPHICS::DISABLE_COMPOSITE_SHOTGUN_DECALS(toggle);
    }

    static void WREN_GRAPHICS_DISABLE_SCUFF_DECALS(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        GRAPHICS::DISABLE_SCUFF_DECALS(toggle);
    }

    static void WREN_GRAPHICS_SET_DECAL_BULLET_IMPACT_RANGE_SCALE(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);

        GRAPHICS::SET_DECAL_BULLET_IMPACT_RANGE_SCALE(p0);
    }

    static void WREN_GRAPHICS_OVERRIDE_INTERIOR_SMOKE_NAME(WrenVM* vm)
    {
        const char* name = wrenGetSlotString(vm, 1);

        GRAPHICS::OVERRIDE_INTERIOR_SMOKE_NAME(name);
    }

    static void WREN_GRAPHICS_OVERRIDE_INTERIOR_SMOKE_LEVEL(WrenVM* vm)
    {
        float level = (float)wrenGetSlotDouble(vm, 1);

        GRAPHICS::OVERRIDE_INTERIOR_SMOKE_LEVEL(level);
    }

    static void WREN_GRAPHICS_OVERRIDE_INTERIOR_SMOKE_END(WrenVM* vm)
    {

        GRAPHICS::OVERRIDE_INTERIOR_SMOKE_END();
    }

    static void WREN_GRAPHICS_REGISTER_NOIR_LENS_EFFECT(WrenVM* vm)
    {

        GRAPHICS::REGISTER_NOIR_LENS_EFFECT();
    }

    static void WREN_GRAPHICS_DISABLE_VEHICLE_DISTANTLIGHTS(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        GRAPHICS::DISABLE_VEHICLE_DISTANTLIGHTS(toggle);
    }

    static void WREN_GRAPHICS_RENDER_SHADOWED_LIGHTS_WITH_NO_SHADOWS(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        GRAPHICS::RENDER_SHADOWED_LIGHTS_WITH_NO_SHADOWS(p0);
    }

    static void WREN_GRAPHICS_REQUEST_EARLY_LIGHT_CHECK(WrenVM* vm)
    {

        GRAPHICS::REQUEST_EARLY_LIGHT_CHECK();
    }

    static void WREN_GRAPHICS_USE_SNOW_FOOT_VFX_WHEN_UNSHELTERED(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        GRAPHICS::USE_SNOW_FOOT_VFX_WHEN_UNSHELTERED(toggle);
    }

    static void WREN_GRAPHICS_USE_SNOW_WHEEL_VFX_WHEN_UNSHELTERED(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        GRAPHICS::USE_SNOW_WHEEL_VFX_WHEN_UNSHELTERED(toggle);
    }

    static void WREN_GRAPHICS_DISABLE_REGION_VFX(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        GRAPHICS::DISABLE_REGION_VFX(p0);
    }

    static void WREN_GRAPHICS_PRESET_INTERIOR_AMBIENT_CACHE(WrenVM* vm)
    {
        const char* timecycleModifierName = wrenGetSlotString(vm, 1);

        GRAPHICS::PRESET_INTERIOR_AMBIENT_CACHE(timecycleModifierName);
    }

    static void WREN_GRAPHICS_SET_TIMECYCLE_MODIFIER(WrenVM* vm)
    {
        const char* modifierName = wrenGetSlotString(vm, 1);

        GRAPHICS::SET_TIMECYCLE_MODIFIER(modifierName);
    }

    static void WREN_GRAPHICS_SET_TIMECYCLE_MODIFIER_STRENGTH(WrenVM* vm)
    {
        float strength = (float)wrenGetSlotDouble(vm, 1);

        GRAPHICS::SET_TIMECYCLE_MODIFIER_STRENGTH(strength);
    }

    static void WREN_GRAPHICS_SET_TRANSITION_TIMECYCLE_MODIFIER(WrenVM* vm)
    {
        const char* modifierName = wrenGetSlotString(vm, 1);
        float transition = (float)wrenGetSlotDouble(vm, 2);

        GRAPHICS::SET_TRANSITION_TIMECYCLE_MODIFIER(modifierName, transition);
    }

    static void WREN_GRAPHICS_SET_TRANSITION_OUT_OF_TIMECYCLE_MODIFIER(WrenVM* vm)
    {
        float strength = (float)wrenGetSlotDouble(vm, 1);

        GRAPHICS::SET_TRANSITION_OUT_OF_TIMECYCLE_MODIFIER(strength);
    }

    static void WREN_GRAPHICS_CLEAR_TIMECYCLE_MODIFIER(WrenVM* vm)
    {

        GRAPHICS::CLEAR_TIMECYCLE_MODIFIER();
    }

    static void WREN_GRAPHICS_GET_TIMECYCLE_MODIFIER_INDEX(WrenVM* vm)
    {

        int res = GRAPHICS::GET_TIMECYCLE_MODIFIER_INDEX();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_GRAPHICS_GET_TIMECYCLE_TRANSITION_MODIFIER_INDEX(WrenVM* vm)
    {

        int res = GRAPHICS::GET_TIMECYCLE_TRANSITION_MODIFIER_INDEX();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_GRAPHICS_GET_IS_TIMECYCLE_TRANSITIONING_OUT(WrenVM* vm)
    {

        Any res = GRAPHICS::GET_IS_TIMECYCLE_TRANSITIONING_OUT();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_GRAPHICS_PUSH_TIMECYCLE_MODIFIER(WrenVM* vm)
    {

        GRAPHICS::PUSH_TIMECYCLE_MODIFIER();
    }

    static void WREN_GRAPHICS_POP_TIMECYCLE_MODIFIER(WrenVM* vm)
    {

        GRAPHICS::POP_TIMECYCLE_MODIFIER();
    }

    static void WREN_GRAPHICS_SET_CURRENT_PLAYER_TCMODIFIER(WrenVM* vm)
    {
        const char* modifierName = wrenGetSlotString(vm, 1);

        GRAPHICS::SET_CURRENT_PLAYER_TCMODIFIER(modifierName);
    }

    static void WREN_GRAPHICS_SET_PLAYER_TCMODIFIER_TRANSITION(WrenVM* vm)
    {
        float value = (float)wrenGetSlotDouble(vm, 1);

        GRAPHICS::SET_PLAYER_TCMODIFIER_TRANSITION(value);
    }

    static void WREN_GRAPHICS_SET_NEXT_PLAYER_TCMODIFIER(WrenVM* vm)
    {
        const char* modifierName = wrenGetSlotString(vm, 1);

        GRAPHICS::SET_NEXT_PLAYER_TCMODIFIER(modifierName);
    }

    static void WREN_GRAPHICS_ADD_TCMODIFIER_OVERRIDE(WrenVM* vm)
    {
        const char* modifierName1 = wrenGetSlotString(vm, 1);
        const char* modifierName2 = wrenGetSlotString(vm, 2);

        GRAPHICS::ADD_TCMODIFIER_OVERRIDE(modifierName1, modifierName2);
    }

    static void WREN_GRAPHICS_CLEAR_ALL_TCMODIFIER_OVERRIDES(WrenVM* vm)
    {
        const char* p0 = wrenGetSlotString(vm, 1);

        GRAPHICS::CLEAR_ALL_TCMODIFIER_OVERRIDES(p0);
    }

    static void WREN_GRAPHICS_SET_EXTRA_TCMODIFIER(WrenVM* vm)
    {
        const char* modifierName = wrenGetSlotString(vm, 1);

        GRAPHICS::SET_EXTRA_TCMODIFIER(modifierName);
    }

    static void WREN_GRAPHICS_CLEAR_EXTRA_TCMODIFIER(WrenVM* vm)
    {

        GRAPHICS::CLEAR_EXTRA_TCMODIFIER();
    }

    static void WREN_GRAPHICS_GET_EXTRA_TCMODIFIER(WrenVM* vm)
    {

        int res = GRAPHICS::GET_EXTRA_TCMODIFIER();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_GRAPHICS_ENABLE_MOON_CYCLE_OVERRIDE(WrenVM* vm)
    {
        float strength = (float)wrenGetSlotDouble(vm, 1);

        GRAPHICS::ENABLE_MOON_CYCLE_OVERRIDE(strength);
    }

    static void WREN_GRAPHICS_DISABLE_MOON_CYCLE_OVERRIDE(WrenVM* vm)
    {

        GRAPHICS::DISABLE_MOON_CYCLE_OVERRIDE();
    }

    static void WREN_GRAPHICS_REQUEST_SCALEFORM_MOVIE(WrenVM* vm)
    {
        const char* scaleformName = wrenGetSlotString(vm, 1);

        int res = GRAPHICS::REQUEST_SCALEFORM_MOVIE(scaleformName);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_GRAPHICS_REQUEST_SCALEFORM_MOVIE_WITH_IGNORE_SUPER_WIDESCREEN(WrenVM* vm)
    {
        const char* scaleformName = wrenGetSlotString(vm, 1);

        int res = GRAPHICS::REQUEST_SCALEFORM_MOVIE_WITH_IGNORE_SUPER_WIDESCREEN(scaleformName);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_GRAPHICS_REQUEST_SCALEFORM_MOVIE_INSTANCE(WrenVM* vm)
    {
        const char* scaleformName = wrenGetSlotString(vm, 1);

        int res = GRAPHICS::REQUEST_SCALEFORM_MOVIE_INSTANCE(scaleformName);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_GRAPHICS_REQUEST_SCALEFORM_MOVIE_SKIP_RENDER_WHILE_PAUSED(WrenVM* vm)
    {
        const char* scaleformName = wrenGetSlotString(vm, 1);

        int res = GRAPHICS::REQUEST_SCALEFORM_MOVIE_SKIP_RENDER_WHILE_PAUSED(scaleformName);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_GRAPHICS_HAS_SCALEFORM_MOVIE_LOADED(WrenVM* vm)
    {
        int scaleformHandle = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = GRAPHICS::HAS_SCALEFORM_MOVIE_LOADED(scaleformHandle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_GRAPHICS_IS_ACTIVE_SCALEFORM_MOVIE_DELETING(WrenVM* vm)
    {
        int val = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = GRAPHICS::IS_ACTIVE_SCALEFORM_MOVIE_DELETING(val);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_GRAPHICS_IS_SCALEFORM_MOVIE_DELETING(WrenVM* vm)
    {
        int val = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = GRAPHICS::IS_SCALEFORM_MOVIE_DELETING(val);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_GRAPHICS_HAS_SCALEFORM_MOVIE_FILENAME_LOADED(WrenVM* vm)
    {
        const char* scaleformName = wrenGetSlotString(vm, 1);

        BOOL res = GRAPHICS::HAS_SCALEFORM_MOVIE_FILENAME_LOADED(scaleformName);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_GRAPHICS_HAS_SCALEFORM_CONTAINER_MOVIE_LOADED_INTO_PARENT(WrenVM* vm)
    {
        int scaleformHandle = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = GRAPHICS::HAS_SCALEFORM_CONTAINER_MOVIE_LOADED_INTO_PARENT(scaleformHandle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_GRAPHICS_SET_SCALEFORM_MOVIE_AS_NO_LONGER_NEEDED(WrenVM* vm)
    {
        int scaleformHandle;

        GRAPHICS::SET_SCALEFORM_MOVIE_AS_NO_LONGER_NEEDED(&scaleformHandle);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_GRAPHICS_SET_SCALEFORM_MOVIE_TO_USE_SYSTEM_TIME(WrenVM* vm)
    {
        int scaleform = (int)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        GRAPHICS::SET_SCALEFORM_MOVIE_TO_USE_SYSTEM_TIME(scaleform, toggle);
    }

    static void WREN_GRAPHICS_SET_SCALEFORM_MOVIE_TO_USE_LARGE_RT(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        GRAPHICS::SET_SCALEFORM_MOVIE_TO_USE_LARGE_RT(p0, p1);
    }

    static void WREN_GRAPHICS_SET_SCALEFORM_MOVIE_TO_USE_SUPER_LARGE_RT(WrenVM* vm)
    {
        int scaleformHandle = (int)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        GRAPHICS::SET_SCALEFORM_MOVIE_TO_USE_SUPER_LARGE_RT(scaleformHandle, toggle);
    }

    static void WREN_GRAPHICS_DRAW_SCALEFORM_MOVIE(WrenVM* vm)
    {
        int scaleformHandle = (int)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float width = (float)wrenGetSlotDouble(vm, 4);
        float height = (float)wrenGetSlotDouble(vm, 5);
        int red = (int)wrenGetSlotDouble(vm, 6);
        int green = (int)wrenGetSlotDouble(vm, 7);
        int blue = (int)wrenGetSlotDouble(vm, 8);
        int alpha = (int)wrenGetSlotDouble(vm, 9);
        int unk = (int)wrenGetSlotDouble(vm, 10);

        GRAPHICS::DRAW_SCALEFORM_MOVIE(scaleformHandle, x, y, width, height, red, green, blue, alpha, unk);
    }

    static void WREN_GRAPHICS_DRAW_SCALEFORM_MOVIE_FULLSCREEN(WrenVM* vm)
    {
        int scaleform = (int)wrenGetSlotDouble(vm, 1);
        int red = (int)wrenGetSlotDouble(vm, 2);
        int green = (int)wrenGetSlotDouble(vm, 3);
        int blue = (int)wrenGetSlotDouble(vm, 4);
        int alpha = (int)wrenGetSlotDouble(vm, 5);
        int unk = (int)wrenGetSlotDouble(vm, 6);

        GRAPHICS::DRAW_SCALEFORM_MOVIE_FULLSCREEN(scaleform, red, green, blue, alpha, unk);
    }

    static void WREN_GRAPHICS_DRAW_SCALEFORM_MOVIE_FULLSCREEN_MASKED(WrenVM* vm)
    {
        int scaleform1 = (int)wrenGetSlotDouble(vm, 1);
        int scaleform2 = (int)wrenGetSlotDouble(vm, 2);
        int red = (int)wrenGetSlotDouble(vm, 3);
        int green = (int)wrenGetSlotDouble(vm, 4);
        int blue = (int)wrenGetSlotDouble(vm, 5);
        int alpha = (int)wrenGetSlotDouble(vm, 6);

        GRAPHICS::DRAW_SCALEFORM_MOVIE_FULLSCREEN_MASKED(scaleform1, scaleform2, red, green, blue, alpha);
    }

    static void WREN_GRAPHICS_DRAW_SCALEFORM_MOVIE_3D(WrenVM* vm)
    {
        int scaleform = (int)wrenGetSlotDouble(vm, 1);
        float posX = (float)wrenGetSlotDouble(vm, 2);
        float posY = (float)wrenGetSlotDouble(vm, 3);
        float posZ = (float)wrenGetSlotDouble(vm, 4);
        float rotX = (float)wrenGetSlotDouble(vm, 5);
        float rotY = (float)wrenGetSlotDouble(vm, 6);
        float rotZ = (float)wrenGetSlotDouble(vm, 7);
        float p7 = (float)wrenGetSlotDouble(vm, 8);
        float p8 = (float)wrenGetSlotDouble(vm, 9);
        float p9 = (float)wrenGetSlotDouble(vm, 10);
        float scaleX = (float)wrenGetSlotDouble(vm, 11);
        float scaleY = (float)wrenGetSlotDouble(vm, 12);
        float scaleZ = (float)wrenGetSlotDouble(vm, 13);
        int rotationOrder = (int)wrenGetSlotDouble(vm, 14);

        GRAPHICS::DRAW_SCALEFORM_MOVIE_3D(scaleform, posX, posY, posZ, rotX, rotY, rotZ, p7, p8, p9, scaleX, scaleY, scaleZ, rotationOrder);
    }

    static void WREN_GRAPHICS_DRAW_SCALEFORM_MOVIE_3D_SOLID(WrenVM* vm)
    {
        int scaleform = (int)wrenGetSlotDouble(vm, 1);
        float posX = (float)wrenGetSlotDouble(vm, 2);
        float posY = (float)wrenGetSlotDouble(vm, 3);
        float posZ = (float)wrenGetSlotDouble(vm, 4);
        float rotX = (float)wrenGetSlotDouble(vm, 5);
        float rotY = (float)wrenGetSlotDouble(vm, 6);
        float rotZ = (float)wrenGetSlotDouble(vm, 7);
        float p7 = (float)wrenGetSlotDouble(vm, 8);
        float p8 = (float)wrenGetSlotDouble(vm, 9);
        float p9 = (float)wrenGetSlotDouble(vm, 10);
        float scaleX = (float)wrenGetSlotDouble(vm, 11);
        float scaleY = (float)wrenGetSlotDouble(vm, 12);
        float scaleZ = (float)wrenGetSlotDouble(vm, 13);
        int rotationOrder = (int)wrenGetSlotDouble(vm, 14);

        GRAPHICS::DRAW_SCALEFORM_MOVIE_3D_SOLID(scaleform, posX, posY, posZ, rotX, rotY, rotZ, p7, p8, p9, scaleX, scaleY, scaleZ, rotationOrder);
    }

    static void WREN_GRAPHICS_CALL_SCALEFORM_MOVIE_METHOD(WrenVM* vm)
    {
        int scaleform = (int)wrenGetSlotDouble(vm, 1);
        const char* method = wrenGetSlotString(vm, 2);

        GRAPHICS::CALL_SCALEFORM_MOVIE_METHOD(scaleform, method);
    }

    static void WREN_GRAPHICS_CALL_SCALEFORM_MOVIE_METHOD_WITH_NUMBER(WrenVM* vm)
    {
        int scaleform = (int)wrenGetSlotDouble(vm, 1);
        const char* methodName = wrenGetSlotString(vm, 2);
        float param1 = (float)wrenGetSlotDouble(vm, 3);
        float param2 = (float)wrenGetSlotDouble(vm, 4);
        float param3 = (float)wrenGetSlotDouble(vm, 5);
        float param4 = (float)wrenGetSlotDouble(vm, 6);
        float param5 = (float)wrenGetSlotDouble(vm, 7);

        GRAPHICS::CALL_SCALEFORM_MOVIE_METHOD_WITH_NUMBER(scaleform, methodName, param1, param2, param3, param4, param5);
    }

    static void WREN_GRAPHICS_CALL_SCALEFORM_MOVIE_METHOD_WITH_STRING(WrenVM* vm)
    {
        int scaleform = (int)wrenGetSlotDouble(vm, 1);
        const char* methodName = wrenGetSlotString(vm, 2);
        const char* param1 = wrenGetSlotString(vm, 3);
        const char* param2 = wrenGetSlotString(vm, 4);
        const char* param3 = wrenGetSlotString(vm, 5);
        const char* param4 = wrenGetSlotString(vm, 6);
        const char* param5 = wrenGetSlotString(vm, 7);

        GRAPHICS::CALL_SCALEFORM_MOVIE_METHOD_WITH_STRING(scaleform, methodName, param1, param2, param3, param4, param5);
    }

    static void WREN_GRAPHICS_CALL_SCALEFORM_MOVIE_METHOD_WITH_NUMBER_AND_STRING(WrenVM* vm)
    {
        int scaleform = (int)wrenGetSlotDouble(vm, 1);
        const char* methodName = wrenGetSlotString(vm, 2);
        float floatParam1 = (float)wrenGetSlotDouble(vm, 3);
        float floatParam2 = (float)wrenGetSlotDouble(vm, 4);
        float floatParam3 = (float)wrenGetSlotDouble(vm, 5);
        float floatParam4 = (float)wrenGetSlotDouble(vm, 6);
        float floatParam5 = (float)wrenGetSlotDouble(vm, 7);
        const char* stringParam1 = wrenGetSlotString(vm, 8);
        const char* stringParam2 = wrenGetSlotString(vm, 9);
        const char* stringParam3 = wrenGetSlotString(vm, 10);
        const char* stringParam4 = wrenGetSlotString(vm, 11);
        const char* stringParam5 = wrenGetSlotString(vm, 12);

        GRAPHICS::CALL_SCALEFORM_MOVIE_METHOD_WITH_NUMBER_AND_STRING(scaleform, methodName, floatParam1, floatParam2, floatParam3, floatParam4, floatParam5, stringParam1, stringParam2, stringParam3, stringParam4, stringParam5);
    }

    static void WREN_GRAPHICS_BEGIN_SCALEFORM_SCRIPT_HUD_MOVIE_METHOD(WrenVM* vm)
    {
        int hudComponent = (int)wrenGetSlotDouble(vm, 1);
        const char* methodName = wrenGetSlotString(vm, 2);

        BOOL res = GRAPHICS::BEGIN_SCALEFORM_SCRIPT_HUD_MOVIE_METHOD(hudComponent, methodName);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_GRAPHICS_BEGIN_SCALEFORM_MOVIE_METHOD(WrenVM* vm)
    {
        int scaleform = (int)wrenGetSlotDouble(vm, 1);
        const char* methodName = wrenGetSlotString(vm, 2);

        BOOL res = GRAPHICS::BEGIN_SCALEFORM_MOVIE_METHOD(scaleform, methodName);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_GRAPHICS_BEGIN_SCALEFORM_MOVIE_METHOD_ON_FRONTEND(WrenVM* vm)
    {
        const char* methodName = wrenGetSlotString(vm, 1);

        BOOL res = GRAPHICS::BEGIN_SCALEFORM_MOVIE_METHOD_ON_FRONTEND(methodName);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_GRAPHICS_BEGIN_SCALEFORM_MOVIE_METHOD_ON_FRONTEND_HEADER(WrenVM* vm)
    {
        const char* methodName = wrenGetSlotString(vm, 1);

        BOOL res = GRAPHICS::BEGIN_SCALEFORM_MOVIE_METHOD_ON_FRONTEND_HEADER(methodName);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_GRAPHICS_END_SCALEFORM_MOVIE_METHOD(WrenVM* vm)
    {

        GRAPHICS::END_SCALEFORM_MOVIE_METHOD();
    }

    static void WREN_GRAPHICS_END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE(WrenVM* vm)
    {

        Any res = GRAPHICS::END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_GRAPHICS_IS_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_READY(WrenVM* vm)
    {
        int methodReturn = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = GRAPHICS::IS_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_READY(methodReturn);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_GRAPHICS_GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT(WrenVM* vm)
    {
        int methodReturn = (int)wrenGetSlotDouble(vm, 1);

        int res = GRAPHICS::GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT(methodReturn);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_GRAPHICS_GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_BOOL(WrenVM* vm)
    {
        int methodReturn = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = GRAPHICS::GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_BOOL(methodReturn);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_GRAPHICS_GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_STRING(WrenVM* vm)
    {
        int methodReturn = (int)wrenGetSlotDouble(vm, 1);

        const char* res = GRAPHICS::GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_STRING(methodReturn);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotString(vm, 0, res);
    }

    static void WREN_GRAPHICS_SCALEFORM_MOVIE_METHOD_ADD_PARAM_INT(WrenVM* vm)
    {
        int value = (int)wrenGetSlotDouble(vm, 1);

        GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_INT(value);
    }

    static void WREN_GRAPHICS_SCALEFORM_MOVIE_METHOD_ADD_PARAM_FLOAT(WrenVM* vm)
    {
        float value = (float)wrenGetSlotDouble(vm, 1);

        GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_FLOAT(value);
    }

    static void WREN_GRAPHICS_SCALEFORM_MOVIE_METHOD_ADD_PARAM_BOOL(WrenVM* vm)
    {
        BOOL value = (BOOL)wrenGetSlotBool(vm, 1);

        GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_BOOL(value);
    }

    static void WREN_GRAPHICS_BEGIN_TEXT_COMMAND_SCALEFORM_STRING(WrenVM* vm)
    {
        const char* componentType = wrenGetSlotString(vm, 1);

        GRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING(componentType);
    }

    static void WREN_GRAPHICS_END_TEXT_COMMAND_SCALEFORM_STRING(WrenVM* vm)
    {

        GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING();
    }

    static void WREN_GRAPHICS_END_TEXT_COMMAND_UNPARSED_SCALEFORM_STRING(WrenVM* vm)
    {

        GRAPHICS::END_TEXT_COMMAND_UNPARSED_SCALEFORM_STRING();
    }

    static void WREN_GRAPHICS_SCALEFORM_MOVIE_METHOD_ADD_PARAM_LITERAL_STRING(WrenVM* vm)
    {
        const char* string = wrenGetSlotString(vm, 1);

        GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_LITERAL_STRING(string);
    }

    static void WREN_GRAPHICS_SCALEFORM_MOVIE_METHOD_ADD_PARAM_TEXTURE_NAME_STRING(WrenVM* vm)
    {
        const char* string = wrenGetSlotString(vm, 1);

        GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_TEXTURE_NAME_STRING(string);
    }

    static void WREN_GRAPHICS_SCALEFORM_MOVIE_METHOD_ADD_PARAM_PLAYER_NAME_STRING(WrenVM* vm)
    {
        const char* string = wrenGetSlotString(vm, 1);

        GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_PLAYER_NAME_STRING(string);
    }

    static void WREN_GRAPHICS_DOES_LATEST_BRIEF_STRING_EXIST(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = GRAPHICS::DOES_LATEST_BRIEF_STRING_EXIST(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_GRAPHICS_SCALEFORM_MOVIE_METHOD_ADD_PARAM_LATEST_BRIEF_STRING(WrenVM* vm)
    {
        int value = (int)wrenGetSlotDouble(vm, 1);

        GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_LATEST_BRIEF_STRING(value);
    }

    static void WREN_GRAPHICS_REQUEST_SCALEFORM_SCRIPT_HUD_MOVIE(WrenVM* vm)
    {
        int hudComponent = (int)wrenGetSlotDouble(vm, 1);

        GRAPHICS::REQUEST_SCALEFORM_SCRIPT_HUD_MOVIE(hudComponent);
    }

    static void WREN_GRAPHICS_HAS_SCALEFORM_SCRIPT_HUD_MOVIE_LOADED(WrenVM* vm)
    {
        int hudComponent = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = GRAPHICS::HAS_SCALEFORM_SCRIPT_HUD_MOVIE_LOADED(hudComponent);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_GRAPHICS_REMOVE_SCALEFORM_SCRIPT_HUD_MOVIE(WrenVM* vm)
    {
        int hudComponent = (int)wrenGetSlotDouble(vm, 1);

        GRAPHICS::REMOVE_SCALEFORM_SCRIPT_HUD_MOVIE(hudComponent);
    }

    static void WREN_GRAPHICS_PASS_KEYBOARD_INPUT_TO_SCALEFORM(WrenVM* vm)
    {
        int scaleformHandle = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = GRAPHICS::PASS_KEYBOARD_INPUT_TO_SCALEFORM(scaleformHandle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_GRAPHICS_SET_TV_CHANNEL(WrenVM* vm)
    {
        int channel = (int)wrenGetSlotDouble(vm, 1);

        GRAPHICS::SET_TV_CHANNEL(channel);
    }

    static void WREN_GRAPHICS_GET_TV_CHANNEL(WrenVM* vm)
    {

        int res = GRAPHICS::GET_TV_CHANNEL();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_GRAPHICS_SET_TV_VOLUME(WrenVM* vm)
    {
        float volume = (float)wrenGetSlotDouble(vm, 1);

        GRAPHICS::SET_TV_VOLUME(volume);
    }

    static void WREN_GRAPHICS_GET_TV_VOLUME(WrenVM* vm)
    {

        float res = GRAPHICS::GET_TV_VOLUME();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_GRAPHICS_DRAW_TV_CHANNEL(WrenVM* vm)
    {
        float xPos = (float)wrenGetSlotDouble(vm, 1);
        float yPos = (float)wrenGetSlotDouble(vm, 2);
        float xScale = (float)wrenGetSlotDouble(vm, 3);
        float yScale = (float)wrenGetSlotDouble(vm, 4);
        float rotation = (float)wrenGetSlotDouble(vm, 5);
        int red = (int)wrenGetSlotDouble(vm, 6);
        int green = (int)wrenGetSlotDouble(vm, 7);
        int blue = (int)wrenGetSlotDouble(vm, 8);
        int alpha = (int)wrenGetSlotDouble(vm, 9);

        GRAPHICS::DRAW_TV_CHANNEL(xPos, yPos, xScale, yScale, rotation, red, green, blue, alpha);
    }

    static void WREN_GRAPHICS_SET_TV_CHANNEL_PLAYLIST(WrenVM* vm)
    {
        int tvChannel = (int)wrenGetSlotDouble(vm, 1);
        const char* playlistName = wrenGetSlotString(vm, 2);
        BOOL restart = (BOOL)wrenGetSlotBool(vm, 3);

        GRAPHICS::SET_TV_CHANNEL_PLAYLIST(tvChannel, playlistName, restart);
    }

    static void WREN_GRAPHICS_SET_TV_CHANNEL_PLAYLIST_AT_HOUR(WrenVM* vm)
    {
        int tvChannel = (int)wrenGetSlotDouble(vm, 1);
        const char* playlistName = wrenGetSlotString(vm, 2);
        int hour = (int)wrenGetSlotDouble(vm, 3);

        GRAPHICS::SET_TV_CHANNEL_PLAYLIST_AT_HOUR(tvChannel, playlistName, hour);
    }

    static void WREN_GRAPHICS_CLEAR_TV_CHANNEL_PLAYLIST(WrenVM* vm)
    {
        int tvChannel = (int)wrenGetSlotDouble(vm, 1);

        GRAPHICS::CLEAR_TV_CHANNEL_PLAYLIST(tvChannel);
    }

    static void WREN_GRAPHICS_IS_PLAYLIST_ON_CHANNEL(WrenVM* vm)
    {
        int tvChannel = (int)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        BOOL res = GRAPHICS::IS_PLAYLIST_ON_CHANNEL(tvChannel, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_GRAPHICS_IS_TVSHOW_CURRENTLY_PLAYING(WrenVM* vm)
    {
        Hash videoCliphash = (Hash)wrenGetSlotDouble(vm, 1);

        BOOL res = GRAPHICS::IS_TVSHOW_CURRENTLY_PLAYING(videoCliphash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_GRAPHICS_ENABLE_MOVIE_KEYFRAME_WAIT(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        GRAPHICS::ENABLE_MOVIE_KEYFRAME_WAIT(toggle);
    }

    static void WREN_GRAPHICS_SET_TV_PLAYER_WATCHING_THIS_FRAME(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        GRAPHICS::SET_TV_PLAYER_WATCHING_THIS_FRAME(p0);
    }

    static void WREN_GRAPHICS_GET_CURRENT_TV_CLIP_NAMEHASH(WrenVM* vm)
    {

        Hash res = GRAPHICS::GET_CURRENT_TV_CLIP_NAMEHASH();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_GRAPHICS_ENABLE_MOVIE_SUBTITLES(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        GRAPHICS::ENABLE_MOVIE_SUBTITLES(toggle);
    }

    static void WREN_GRAPHICS_UI3DSCENE_IS_AVAILABLE(WrenVM* vm)
    {

        BOOL res = GRAPHICS::UI3DSCENE_IS_AVAILABLE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_GRAPHICS_UI3DSCENE_PUSH_PRESET(WrenVM* vm)
    {
        const char* presetName = wrenGetSlotString(vm, 1);

        BOOL res = GRAPHICS::UI3DSCENE_PUSH_PRESET(presetName);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_GRAPHICS_UI3DSCENE_ASSIGN_PED_TO_SLOT(WrenVM* vm)
    {
        const char* presetName = wrenGetSlotString(vm, 1);
        Ped ped = (Ped)wrenGetSlotDouble(vm, 2);
        int p2 = (int)wrenGetSlotDouble(vm, 3);
        float posX = (float)wrenGetSlotDouble(vm, 4);
        float posY = (float)wrenGetSlotDouble(vm, 5);
        float posZ = (float)wrenGetSlotDouble(vm, 6);

        BOOL res = GRAPHICS::UI3DSCENE_ASSIGN_PED_TO_SLOT(presetName, ped, p2, posX, posY, posZ);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_GRAPHICS_UI3DSCENE_CLEAR_PATCHED_DATA(WrenVM* vm)
    {

        GRAPHICS::UI3DSCENE_CLEAR_PATCHED_DATA();
    }

    static void WREN_GRAPHICS_UI3DSCENE_MAKE_PUSHED_PRESET_PERSISTENT(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        GRAPHICS::UI3DSCENE_MAKE_PUSHED_PRESET_PERSISTENT(toggle);
    }

    static void WREN_GRAPHICS_TERRAINGRID_ACTIVATE(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        GRAPHICS::TERRAINGRID_ACTIVATE(toggle);
    }

    static void WREN_GRAPHICS_TERRAINGRID_SET_PARAMS(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        float forwardX = (float)wrenGetSlotDouble(vm, 4);
        float forwardY = (float)wrenGetSlotDouble(vm, 5);
        float forwardZ = (float)wrenGetSlotDouble(vm, 6);
        float sizeX = (float)wrenGetSlotDouble(vm, 7);
        float sizeY = (float)wrenGetSlotDouble(vm, 8);
        float sizeZ = (float)wrenGetSlotDouble(vm, 9);
        float gridScale = (float)wrenGetSlotDouble(vm, 10);
        float glowIntensity = (float)wrenGetSlotDouble(vm, 11);
        float normalHeight = (float)wrenGetSlotDouble(vm, 12);
        float heightDiff = (float)wrenGetSlotDouble(vm, 13);

        GRAPHICS::TERRAINGRID_SET_PARAMS(x, y, z, forwardX, forwardY, forwardZ, sizeX, sizeY, sizeZ, gridScale, glowIntensity, normalHeight, heightDiff);
    }

    static void WREN_GRAPHICS_TERRAINGRID_SET_COLOURS(WrenVM* vm)
    {
        int lowR = (int)wrenGetSlotDouble(vm, 1);
        int lowG = (int)wrenGetSlotDouble(vm, 2);
        int lowB = (int)wrenGetSlotDouble(vm, 3);
        int lowAlpha = (int)wrenGetSlotDouble(vm, 4);
        int r = (int)wrenGetSlotDouble(vm, 5);
        int g = (int)wrenGetSlotDouble(vm, 6);
        int b = (int)wrenGetSlotDouble(vm, 7);
        int alpha = (int)wrenGetSlotDouble(vm, 8);
        int highR = (int)wrenGetSlotDouble(vm, 9);
        int highG = (int)wrenGetSlotDouble(vm, 10);
        int highB = (int)wrenGetSlotDouble(vm, 11);
        int highAlpha = (int)wrenGetSlotDouble(vm, 12);

        GRAPHICS::TERRAINGRID_SET_COLOURS(lowR, lowG, lowB, lowAlpha, r, g, b, alpha, highR, highG, highB, highAlpha);
    }

    static void WREN_GRAPHICS_ANIMPOSTFX_PLAY(WrenVM* vm)
    {
        const char* effectName = wrenGetSlotString(vm, 1);
        int duration = (int)wrenGetSlotDouble(vm, 2);
        BOOL looped = (BOOL)wrenGetSlotBool(vm, 3);

        GRAPHICS::ANIMPOSTFX_PLAY(effectName, duration, looped);
    }

    static void WREN_GRAPHICS_ANIMPOSTFX_STOP(WrenVM* vm)
    {
        const char* effectName = wrenGetSlotString(vm, 1);

        GRAPHICS::ANIMPOSTFX_STOP(effectName);
    }

    static void WREN_GRAPHICS_ANIMPOSTFX_GET_CURRENT_TIME(WrenVM* vm)
    {
        const char* effectName = wrenGetSlotString(vm, 1);

        float res = GRAPHICS::ANIMPOSTFX_GET_CURRENT_TIME(effectName);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_GRAPHICS_ANIMPOSTFX_IS_RUNNING(WrenVM* vm)
    {
        const char* effectName = wrenGetSlotString(vm, 1);

        BOOL res = GRAPHICS::ANIMPOSTFX_IS_RUNNING(effectName);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_GRAPHICS_ANIMPOSTFX_STOP_ALL(WrenVM* vm)
    {

        GRAPHICS::ANIMPOSTFX_STOP_ALL();
    }

    static void WREN_GRAPHICS_ANIMPOSTFX_STOP_AND_FLUSH_REQUESTS(WrenVM* vm)
    {
        const char* effectName = wrenGetSlotString(vm, 1);

        GRAPHICS::ANIMPOSTFX_STOP_AND_FLUSH_REQUESTS(effectName);
    }


    static void WREN_HUD_BEGIN_TEXT_COMMAND_BUSYSPINNER_ON(WrenVM* vm)
    {
        const char* string = wrenGetSlotString(vm, 1);

        HUD::BEGIN_TEXT_COMMAND_BUSYSPINNER_ON(string);
    }

    static void WREN_HUD_END_TEXT_COMMAND_BUSYSPINNER_ON(WrenVM* vm)
    {
        int busySpinnerType = (int)wrenGetSlotDouble(vm, 1);

        HUD::END_TEXT_COMMAND_BUSYSPINNER_ON(busySpinnerType);
    }

    static void WREN_HUD_BUSYSPINNER_OFF(WrenVM* vm)
    {

        HUD::BUSYSPINNER_OFF();
    }

    static void WREN_HUD_PRELOAD_BUSYSPINNER(WrenVM* vm)
    {

        HUD::PRELOAD_BUSYSPINNER();
    }

    static void WREN_HUD_BUSYSPINNER_IS_ON(WrenVM* vm)
    {

        BOOL res = HUD::BUSYSPINNER_IS_ON();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_HUD_BUSYSPINNER_IS_DISPLAYING(WrenVM* vm)
    {

        BOOL res = HUD::BUSYSPINNER_IS_DISPLAYING();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_HUD_DISABLE_PAUSEMENU_SPINNER(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        HUD::DISABLE_PAUSEMENU_SPINNER(p0);
    }

    static void WREN_HUD_SET_MOUSE_CURSOR_THIS_FRAME(WrenVM* vm)
    {

        HUD::SET_MOUSE_CURSOR_THIS_FRAME();
    }

    static void WREN_HUD_SET_MOUSE_CURSOR_STYLE(WrenVM* vm)
    {
        int spriteId = (int)wrenGetSlotDouble(vm, 1);

        HUD::SET_MOUSE_CURSOR_STYLE(spriteId);
    }

    static void WREN_HUD_SET_MOUSE_CURSOR_VISIBLE(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        HUD::SET_MOUSE_CURSOR_VISIBLE(toggle);
    }

    static void WREN_HUD_IS_MOUSE_ROLLED_OVER_INSTRUCTIONAL_BUTTONS(WrenVM* vm)
    {

        BOOL res = HUD::IS_MOUSE_ROLLED_OVER_INSTRUCTIONAL_BUTTONS();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_HUD_GET_MOUSE_EVENT(WrenVM* vm)
    {
        int scaleformHandle = (int)wrenGetSlotDouble(vm, 1);
        Any p1;
        Any p2;
        Any p3;

        BOOL res = HUD::GET_MOUSE_EVENT(scaleformHandle, &p1, &p2, &p3);

        wrenEnsureSlots(vm, 8);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p1);
        wrenInsertInList(vm, 0, 1, 2);

        wrenSetSlotDouble(vm, 3, p2);
        wrenInsertInList(vm, 0, 2, 3);

        wrenSetSlotDouble(vm, 4, p3);
        wrenInsertInList(vm, 0, 3, 4);

    }

    static void WREN_HUD_THEFEED_ONLY_SHOW_TOOLTIPS(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        HUD::THEFEED_ONLY_SHOW_TOOLTIPS(toggle);
    }

    static void WREN_HUD_THEFEED_SET_SCRIPTED_MENU_HEIGHT(WrenVM* vm)
    {
        float pos = (float)wrenGetSlotDouble(vm, 1);

        HUD::THEFEED_SET_SCRIPTED_MENU_HEIGHT(pos);
    }

    static void WREN_HUD_THEFEED_HIDE(WrenVM* vm)
    {

        HUD::THEFEED_HIDE();
    }

    static void WREN_HUD_THEFEED_HIDE_THIS_FRAME(WrenVM* vm)
    {

        HUD::THEFEED_HIDE_THIS_FRAME();
    }

    static void WREN_HUD_THEFEED_SHOW(WrenVM* vm)
    {

        HUD::THEFEED_SHOW();
    }

    static void WREN_HUD_THEFEED_FLUSH_QUEUE(WrenVM* vm)
    {

        HUD::THEFEED_FLUSH_QUEUE();
    }

    static void WREN_HUD_THEFEED_REMOVE_ITEM(WrenVM* vm)
    {
        int notificationId = (int)wrenGetSlotDouble(vm, 1);

        HUD::THEFEED_REMOVE_ITEM(notificationId);
    }

    static void WREN_HUD_THEFEED_FORCE_RENDER_ON(WrenVM* vm)
    {

        HUD::THEFEED_FORCE_RENDER_ON();
    }

    static void WREN_HUD_THEFEED_FORCE_RENDER_OFF(WrenVM* vm)
    {

        HUD::THEFEED_FORCE_RENDER_OFF();
    }

    static void WREN_HUD_THEFEED_PAUSE(WrenVM* vm)
    {

        HUD::THEFEED_PAUSE();
    }

    static void WREN_HUD_THEFEED_RESUME(WrenVM* vm)
    {

        HUD::THEFEED_RESUME();
    }

    static void WREN_HUD_THEFEED_IS_PAUSED(WrenVM* vm)
    {

        BOOL res = HUD::THEFEED_IS_PAUSED();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_HUD_THEFEED_REPORT_LOGO_ON(WrenVM* vm)
    {

        HUD::THEFEED_REPORT_LOGO_ON();
    }

    static void WREN_HUD_THEFEED_REPORT_LOGO_OFF(WrenVM* vm)
    {

        HUD::THEFEED_REPORT_LOGO_OFF();
    }

    static void WREN_HUD_THEFEED_GET_LAST_SHOWN_PHONE_ACTIVATABLE_FEED_ID(WrenVM* vm)
    {

        int res = HUD::THEFEED_GET_LAST_SHOWN_PHONE_ACTIVATABLE_FEED_ID();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_HUD_THEFEED_AUTO_POST_GAMETIPS_ON(WrenVM* vm)
    {

        HUD::THEFEED_AUTO_POST_GAMETIPS_ON();
    }

    static void WREN_HUD_THEFEED_AUTO_POST_GAMETIPS_OFF(WrenVM* vm)
    {

        HUD::THEFEED_AUTO_POST_GAMETIPS_OFF();
    }

    static void WREN_HUD_THEFEED_SET_BACKGROUND_COLOR_FOR_NEXT_POST(WrenVM* vm)
    {
        int hudColorIndex = (int)wrenGetSlotDouble(vm, 1);

        HUD::THEFEED_SET_BACKGROUND_COLOR_FOR_NEXT_POST(hudColorIndex);
    }

    static void WREN_HUD_THEFEED_SET_RGBA_PARAMETER_FOR_NEXT_MESSAGE(WrenVM* vm)
    {
        int red = (int)wrenGetSlotDouble(vm, 1);
        int green = (int)wrenGetSlotDouble(vm, 2);
        int blue = (int)wrenGetSlotDouble(vm, 3);
        int alpha = (int)wrenGetSlotDouble(vm, 4);

        HUD::THEFEED_SET_RGBA_PARAMETER_FOR_NEXT_MESSAGE(red, green, blue, alpha);
    }

    static void WREN_HUD_THEFEED_SET_FLASH_DURATION_PARAMETER_FOR_NEXT_MESSAGE(WrenVM* vm)
    {
        int count = (int)wrenGetSlotDouble(vm, 1);

        HUD::THEFEED_SET_FLASH_DURATION_PARAMETER_FOR_NEXT_MESSAGE(count);
    }

    static void WREN_HUD_THEFEED_SET_VIBRATE_PARAMETER_FOR_NEXT_MESSAGE(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        HUD::THEFEED_SET_VIBRATE_PARAMETER_FOR_NEXT_MESSAGE(toggle);
    }

    static void WREN_HUD_THEFEED_RESET_ALL_PARAMETERS(WrenVM* vm)
    {

        HUD::THEFEED_RESET_ALL_PARAMETERS();
    }

    static void WREN_HUD_THEFEED_FREEZE_NEXT_POST(WrenVM* vm)
    {

        HUD::THEFEED_FREEZE_NEXT_POST();
    }

    static void WREN_HUD_THEFEED_CLEAR_FROZEN_POST(WrenVM* vm)
    {

        HUD::THEFEED_CLEAR_FROZEN_POST();
    }

    static void WREN_HUD_THEFEED_SET_SNAP_FEED_ITEM_POSITIONS(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        HUD::THEFEED_SET_SNAP_FEED_ITEM_POSITIONS(p0);
    }

    static void WREN_HUD_THEFEED_UPDATE_ITEM_TEXTURE(WrenVM* vm)
    {
        const char* txdString1 = wrenGetSlotString(vm, 1);
        const char* txnString1 = wrenGetSlotString(vm, 2);
        const char* txdString2 = wrenGetSlotString(vm, 3);
        const char* txnString2 = wrenGetSlotString(vm, 4);

        HUD::THEFEED_UPDATE_ITEM_TEXTURE(txdString1, txnString1, txdString2, txnString2);
    }

    static void WREN_HUD_BEGIN_TEXT_COMMAND_THEFEED_POST(WrenVM* vm)
    {
        const char* text = wrenGetSlotString(vm, 1);

        HUD::BEGIN_TEXT_COMMAND_THEFEED_POST(text);
    }

    static void WREN_HUD_END_TEXT_COMMAND_THEFEED_POST_STATS(WrenVM* vm)
    {
        const char* statTitle = wrenGetSlotString(vm, 1);
        int iconEnum = (int)wrenGetSlotDouble(vm, 2);
        BOOL stepVal = (BOOL)wrenGetSlotBool(vm, 3);
        int barValue = (int)wrenGetSlotDouble(vm, 4);
        BOOL isImportant = (BOOL)wrenGetSlotBool(vm, 5);
        const char* pictureTextureDict = wrenGetSlotString(vm, 6);
        const char* pictureTextureName = wrenGetSlotString(vm, 7);

        int res = HUD::END_TEXT_COMMAND_THEFEED_POST_STATS(statTitle, iconEnum, stepVal, barValue, isImportant, pictureTextureDict, pictureTextureName);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_HUD_END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT(WrenVM* vm)
    {
        const char* txdName = wrenGetSlotString(vm, 1);
        const char* textureName = wrenGetSlotString(vm, 2);
        BOOL flash = (BOOL)wrenGetSlotBool(vm, 3);
        int iconType = (int)wrenGetSlotDouble(vm, 4);
        const char* sender = wrenGetSlotString(vm, 5);
        const char* subject = wrenGetSlotString(vm, 6);

        int res = HUD::END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT(txdName, textureName, flash, iconType, sender, subject);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_HUD_END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_SUBTITLE_LABEL(WrenVM* vm)
    {
        const char* txdName = wrenGetSlotString(vm, 1);
        const char* textureName = wrenGetSlotString(vm, 2);
        BOOL flash = (BOOL)wrenGetSlotBool(vm, 3);
        int iconType = (int)wrenGetSlotDouble(vm, 4);
        const char* sender = wrenGetSlotString(vm, 5);
        const char* subject = wrenGetSlotString(vm, 6);

        int res = HUD::END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_SUBTITLE_LABEL(txdName, textureName, flash, iconType, sender, subject);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_HUD_END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_TU(WrenVM* vm)
    {
        const char* txdName = wrenGetSlotString(vm, 1);
        const char* textureName = wrenGetSlotString(vm, 2);
        BOOL flash = (BOOL)wrenGetSlotBool(vm, 3);
        int iconType = (int)wrenGetSlotDouble(vm, 4);
        const char* sender = wrenGetSlotString(vm, 5);
        const char* subject = wrenGetSlotString(vm, 6);
        float duration = (float)wrenGetSlotDouble(vm, 7);

        int res = HUD::END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_TU(txdName, textureName, flash, iconType, sender, subject, duration);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_HUD_END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_WITH_CREW_TAG(WrenVM* vm)
    {
        const char* txdName = wrenGetSlotString(vm, 1);
        const char* textureName = wrenGetSlotString(vm, 2);
        BOOL flash = (BOOL)wrenGetSlotBool(vm, 3);
        int iconType = (int)wrenGetSlotDouble(vm, 4);
        const char* sender = wrenGetSlotString(vm, 5);
        const char* subject = wrenGetSlotString(vm, 6);
        float duration = (float)wrenGetSlotDouble(vm, 7);
        const char* clanTag = wrenGetSlotString(vm, 8);

        int res = HUD::END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_WITH_CREW_TAG(txdName, textureName, flash, iconType, sender, subject, duration, clanTag);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_HUD_END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_WITH_CREW_TAG_AND_ADDITIONAL_ICON(WrenVM* vm)
    {
        const char* txdName = wrenGetSlotString(vm, 1);
        const char* textureName = wrenGetSlotString(vm, 2);
        BOOL flash = (BOOL)wrenGetSlotBool(vm, 3);
        int iconType1 = (int)wrenGetSlotDouble(vm, 4);
        const char* sender = wrenGetSlotString(vm, 5);
        const char* subject = wrenGetSlotString(vm, 6);
        float duration = (float)wrenGetSlotDouble(vm, 7);
        const char* clanTag = wrenGetSlotString(vm, 8);
        int iconType2 = (int)wrenGetSlotDouble(vm, 9);
        int p9 = (int)wrenGetSlotDouble(vm, 10);

        int res = HUD::END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_WITH_CREW_TAG_AND_ADDITIONAL_ICON(txdName, textureName, flash, iconType1, sender, subject, duration, clanTag, iconType2, p9);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_HUD_END_TEXT_COMMAND_THEFEED_POST_TICKER(WrenVM* vm)
    {
        BOOL blink = (BOOL)wrenGetSlotBool(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        int res = HUD::END_TEXT_COMMAND_THEFEED_POST_TICKER(blink, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_HUD_END_TEXT_COMMAND_THEFEED_POST_TICKER_FORCED(WrenVM* vm)
    {
        BOOL blink = (BOOL)wrenGetSlotBool(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        int res = HUD::END_TEXT_COMMAND_THEFEED_POST_TICKER_FORCED(blink, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_HUD_END_TEXT_COMMAND_THEFEED_POST_TICKER_WITH_TOKENS(WrenVM* vm)
    {
        BOOL blink = (BOOL)wrenGetSlotBool(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        int res = HUD::END_TEXT_COMMAND_THEFEED_POST_TICKER_WITH_TOKENS(blink, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_HUD_END_TEXT_COMMAND_THEFEED_POST_AWARD(WrenVM* vm)
    {
        const char* textureDict = wrenGetSlotString(vm, 1);
        const char* textureName = wrenGetSlotString(vm, 2);
        int rpBonus = (int)wrenGetSlotDouble(vm, 3);
        int colorOverlay = (int)wrenGetSlotDouble(vm, 4);
        const char* titleLabel = wrenGetSlotString(vm, 5);

        int res = HUD::END_TEXT_COMMAND_THEFEED_POST_AWARD(textureDict, textureName, rpBonus, colorOverlay, titleLabel);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_HUD_END_TEXT_COMMAND_THEFEED_POST_CREWTAG(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        int p2;
        int p3 = (int)wrenGetSlotDouble(vm, 3);
        BOOL isLeader = (BOOL)wrenGetSlotBool(vm, 4);
        BOOL unk0 = (BOOL)wrenGetSlotBool(vm, 5);
        int clanDesc = (int)wrenGetSlotDouble(vm, 6);
        int R = (int)wrenGetSlotDouble(vm, 7);
        int G = (int)wrenGetSlotDouble(vm, 8);
        int B = (int)wrenGetSlotDouble(vm, 9);

        int res = HUD::END_TEXT_COMMAND_THEFEED_POST_CREWTAG(p0, p1, &p2, p3, isLeader, unk0, clanDesc, R, G, B);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p2);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_HUD_END_TEXT_COMMAND_THEFEED_POST_CREWTAG_WITH_GAME_NAME(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        int p2;
        int p3 = (int)wrenGetSlotDouble(vm, 3);
        BOOL isLeader = (BOOL)wrenGetSlotBool(vm, 4);
        BOOL unk0 = (BOOL)wrenGetSlotBool(vm, 5);
        int clanDesc = (int)wrenGetSlotDouble(vm, 6);
        const char* playerName = wrenGetSlotString(vm, 7);
        int R = (int)wrenGetSlotDouble(vm, 8);
        int G = (int)wrenGetSlotDouble(vm, 9);
        int B = (int)wrenGetSlotDouble(vm, 10);

        int res = HUD::END_TEXT_COMMAND_THEFEED_POST_CREWTAG_WITH_GAME_NAME(p0, p1, &p2, p3, isLeader, unk0, clanDesc, playerName, R, G, B);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p2);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_HUD_END_TEXT_COMMAND_THEFEED_POST_UNLOCK(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);

        Any res = HUD::END_TEXT_COMMAND_THEFEED_POST_UNLOCK(p0, p1, p2);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_HUD_END_TEXT_COMMAND_THEFEED_POST_UNLOCK_TU(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        Any res = HUD::END_TEXT_COMMAND_THEFEED_POST_UNLOCK_TU(p0, p1, p2, p3);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_HUD_END_TEXT_COMMAND_THEFEED_POST_UNLOCK_TU_WITH_COLOR(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);
        Any p5 = (Any)wrenGetSlotDouble(vm, 6);

        Any res = HUD::END_TEXT_COMMAND_THEFEED_POST_UNLOCK_TU_WITH_COLOR(p0, p1, p2, p3, p4, p5);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_HUD_END_TEXT_COMMAND_THEFEED_POST_MPTICKER(WrenVM* vm)
    {
        BOOL blink = (BOOL)wrenGetSlotBool(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        int res = HUD::END_TEXT_COMMAND_THEFEED_POST_MPTICKER(blink, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_HUD_END_TEXT_COMMAND_THEFEED_POST_CREW_RANKUP_WITH_LITERAL_FLAG(WrenVM* vm)
    {
        const char* p0 = wrenGetSlotString(vm, 1);
        const char* p1 = wrenGetSlotString(vm, 2);
        const char* p2 = wrenGetSlotString(vm, 3);
        BOOL p3 = (BOOL)wrenGetSlotBool(vm, 4);
        BOOL p4 = (BOOL)wrenGetSlotBool(vm, 5);

        int res = HUD::END_TEXT_COMMAND_THEFEED_POST_CREW_RANKUP_WITH_LITERAL_FLAG(p0, p1, p2, p3, p4);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_HUD_END_TEXT_COMMAND_THEFEED_POST_VERSUS_TU(WrenVM* vm)
    {
        const char* txdName1 = wrenGetSlotString(vm, 1);
        const char* textureName1 = wrenGetSlotString(vm, 2);
        int count1 = (int)wrenGetSlotDouble(vm, 3);
        const char* txdName2 = wrenGetSlotString(vm, 4);
        const char* textureName2 = wrenGetSlotString(vm, 5);
        int count2 = (int)wrenGetSlotDouble(vm, 6);
        int hudColor1 = (int)wrenGetSlotDouble(vm, 7);
        int hudColor2 = (int)wrenGetSlotDouble(vm, 8);

        int res = HUD::END_TEXT_COMMAND_THEFEED_POST_VERSUS_TU(txdName1, textureName1, count1, txdName2, textureName2, count2, hudColor1, hudColor2);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_HUD_END_TEXT_COMMAND_THEFEED_POST_REPLAY(WrenVM* vm)
    {
        int type = (int)wrenGetSlotDouble(vm, 1);
        int image = (int)wrenGetSlotDouble(vm, 2);
        const char* text = wrenGetSlotString(vm, 3);

        int res = HUD::END_TEXT_COMMAND_THEFEED_POST_REPLAY(type, image, text);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_HUD_END_TEXT_COMMAND_THEFEED_POST_REPLAY_INPUT(WrenVM* vm)
    {
        int type = (int)wrenGetSlotDouble(vm, 1);
        const char* button = wrenGetSlotString(vm, 2);
        const char* text = wrenGetSlotString(vm, 3);

        int res = HUD::END_TEXT_COMMAND_THEFEED_POST_REPLAY_INPUT(type, button, text);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_HUD_BEGIN_TEXT_COMMAND_PRINT(WrenVM* vm)
    {
        const char* GxtEntry = wrenGetSlotString(vm, 1);

        HUD::BEGIN_TEXT_COMMAND_PRINT(GxtEntry);
    }

    static void WREN_HUD_END_TEXT_COMMAND_PRINT(WrenVM* vm)
    {
        int duration = (int)wrenGetSlotDouble(vm, 1);
        BOOL drawImmediately = (BOOL)wrenGetSlotBool(vm, 2);

        HUD::END_TEXT_COMMAND_PRINT(duration, drawImmediately);
    }

    static void WREN_HUD_BEGIN_TEXT_COMMAND_IS_MESSAGE_DISPLAYED(WrenVM* vm)
    {
        const char* text = wrenGetSlotString(vm, 1);

        HUD::BEGIN_TEXT_COMMAND_IS_MESSAGE_DISPLAYED(text);
    }

    static void WREN_HUD_END_TEXT_COMMAND_IS_MESSAGE_DISPLAYED(WrenVM* vm)
    {

        BOOL res = HUD::END_TEXT_COMMAND_IS_MESSAGE_DISPLAYED();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_HUD_BEGIN_TEXT_COMMAND_DISPLAY_TEXT(WrenVM* vm)
    {
        const char* text = wrenGetSlotString(vm, 1);

        HUD::BEGIN_TEXT_COMMAND_DISPLAY_TEXT(text);
    }

    static void WREN_HUD_END_TEXT_COMMAND_DISPLAY_TEXT(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        int p2 = (int)wrenGetSlotDouble(vm, 3);

        HUD::END_TEXT_COMMAND_DISPLAY_TEXT(x, y, p2);
    }

    static void WREN_HUD_BEGIN_TEXT_COMMAND_GET_SCREEN_WIDTH_OF_DISPLAY_TEXT(WrenVM* vm)
    {
        const char* text = wrenGetSlotString(vm, 1);

        HUD::BEGIN_TEXT_COMMAND_GET_SCREEN_WIDTH_OF_DISPLAY_TEXT(text);
    }

    static void WREN_HUD_END_TEXT_COMMAND_GET_SCREEN_WIDTH_OF_DISPLAY_TEXT(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        float res = HUD::END_TEXT_COMMAND_GET_SCREEN_WIDTH_OF_DISPLAY_TEXT(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_HUD_BEGIN_TEXT_COMMAND_GET_NUMBER_OF_LINES_FOR_STRING(WrenVM* vm)
    {
        const char* entry = wrenGetSlotString(vm, 1);

        HUD::BEGIN_TEXT_COMMAND_GET_NUMBER_OF_LINES_FOR_STRING(entry);
    }

    static void WREN_HUD_END_TEXT_COMMAND_GET_NUMBER_OF_LINES_FOR_STRING(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);

        int res = HUD::END_TEXT_COMMAND_GET_NUMBER_OF_LINES_FOR_STRING(x, y);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_HUD_BEGIN_TEXT_COMMAND_DISPLAY_HELP(WrenVM* vm)
    {
        const char* inputType = wrenGetSlotString(vm, 1);

        HUD::BEGIN_TEXT_COMMAND_DISPLAY_HELP(inputType);
    }

    static void WREN_HUD_END_TEXT_COMMAND_DISPLAY_HELP(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);
        BOOL loop = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL beep = (BOOL)wrenGetSlotBool(vm, 3);
        int shape = (int)wrenGetSlotDouble(vm, 4);

        HUD::END_TEXT_COMMAND_DISPLAY_HELP(p0, loop, beep, shape);
    }

    static void WREN_HUD_BEGIN_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(WrenVM* vm)
    {
        const char* labelName = wrenGetSlotString(vm, 1);

        HUD::BEGIN_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(labelName);
    }

    static void WREN_HUD_END_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = HUD::END_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_HUD_BEGIN_TEXT_COMMAND_SET_BLIP_NAME(WrenVM* vm)
    {
        const char* textLabel = wrenGetSlotString(vm, 1);

        HUD::BEGIN_TEXT_COMMAND_SET_BLIP_NAME(textLabel);
    }

    static void WREN_HUD_END_TEXT_COMMAND_SET_BLIP_NAME(WrenVM* vm)
    {
        Blip blip = (Blip)wrenGetSlotDouble(vm, 1);

        HUD::END_TEXT_COMMAND_SET_BLIP_NAME(blip);
    }

    static void WREN_HUD_BEGIN_TEXT_COMMAND_ADD_DIRECTLY_TO_PREVIOUS_BRIEFS(WrenVM* vm)
    {
        const char* p0 = wrenGetSlotString(vm, 1);

        HUD::BEGIN_TEXT_COMMAND_ADD_DIRECTLY_TO_PREVIOUS_BRIEFS(p0);
    }

    static void WREN_HUD_END_TEXT_COMMAND_ADD_DIRECTLY_TO_PREVIOUS_BRIEFS(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        HUD::END_TEXT_COMMAND_ADD_DIRECTLY_TO_PREVIOUS_BRIEFS(p0);
    }

    static void WREN_HUD_BEGIN_TEXT_COMMAND_CLEAR_PRINT(WrenVM* vm)
    {
        const char* text = wrenGetSlotString(vm, 1);

        HUD::BEGIN_TEXT_COMMAND_CLEAR_PRINT(text);
    }

    static void WREN_HUD_END_TEXT_COMMAND_CLEAR_PRINT(WrenVM* vm)
    {

        HUD::END_TEXT_COMMAND_CLEAR_PRINT();
    }

    static void WREN_HUD_BEGIN_TEXT_COMMAND_OVERRIDE_BUTTON_TEXT(WrenVM* vm)
    {
        const char* gxtEntry = wrenGetSlotString(vm, 1);

        HUD::BEGIN_TEXT_COMMAND_OVERRIDE_BUTTON_TEXT(gxtEntry);
    }

    static void WREN_HUD_END_TEXT_COMMAND_OVERRIDE_BUTTON_TEXT(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);

        HUD::END_TEXT_COMMAND_OVERRIDE_BUTTON_TEXT(p0);
    }

    static void WREN_HUD_ADD_TEXT_COMPONENT_INTEGER(WrenVM* vm)
    {
        int value = (int)wrenGetSlotDouble(vm, 1);

        HUD::ADD_TEXT_COMPONENT_INTEGER(value);
    }

    static void WREN_HUD_ADD_TEXT_COMPONENT_FLOAT(WrenVM* vm)
    {
        float value = (float)wrenGetSlotDouble(vm, 1);
        int decimalPlaces = (int)wrenGetSlotDouble(vm, 2);

        HUD::ADD_TEXT_COMPONENT_FLOAT(value, decimalPlaces);
    }

    static void WREN_HUD_ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL(WrenVM* vm)
    {
        const char* labelName = wrenGetSlotString(vm, 1);

        HUD::ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL(labelName);
    }

    static void WREN_HUD_ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL_HASH_KEY(WrenVM* vm)
    {
        Hash gxtEntryHash = (Hash)wrenGetSlotDouble(vm, 1);

        HUD::ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL_HASH_KEY(gxtEntryHash);
    }

    static void WREN_HUD_ADD_TEXT_COMPONENT_SUBSTRING_BLIP_NAME(WrenVM* vm)
    {
        Blip blip = (Blip)wrenGetSlotDouble(vm, 1);

        HUD::ADD_TEXT_COMPONENT_SUBSTRING_BLIP_NAME(blip);
    }

    static void WREN_HUD_ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(WrenVM* vm)
    {
        const char* text = wrenGetSlotString(vm, 1);

        HUD::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
    }

    static void WREN_HUD_ADD_TEXT_COMPONENT_SUBSTRING_TIME(WrenVM* vm)
    {
        int timestamp = (int)wrenGetSlotDouble(vm, 1);
        int flags = (int)wrenGetSlotDouble(vm, 2);

        HUD::ADD_TEXT_COMPONENT_SUBSTRING_TIME(timestamp, flags);
    }

    static void WREN_HUD_ADD_TEXT_COMPONENT_FORMATTED_INTEGER(WrenVM* vm)
    {
        int value = (int)wrenGetSlotDouble(vm, 1);
        BOOL commaSeparated = (BOOL)wrenGetSlotBool(vm, 2);

        HUD::ADD_TEXT_COMPONENT_FORMATTED_INTEGER(value, commaSeparated);
    }

    static void WREN_HUD_ADD_TEXT_COMPONENT_SUBSTRING_PHONE_NUMBER(WrenVM* vm)
    {
        const char* p0 = wrenGetSlotString(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);

        HUD::ADD_TEXT_COMPONENT_SUBSTRING_PHONE_NUMBER(p0, p1);
    }

    static void WREN_HUD_ADD_TEXT_COMPONENT_SUBSTRING_WEBSITE(WrenVM* vm)
    {
        const char* website = wrenGetSlotString(vm, 1);

        HUD::ADD_TEXT_COMPONENT_SUBSTRING_WEBSITE(website);
    }

    static void WREN_HUD_ADD_TEXT_COMPONENT_SUBSTRING_KEYBOARD_DISPLAY(WrenVM* vm)
    {
        const char* string = wrenGetSlotString(vm, 1);

        HUD::ADD_TEXT_COMPONENT_SUBSTRING_KEYBOARD_DISPLAY(string);
    }

    static void WREN_HUD_SET_COLOUR_OF_NEXT_TEXT_COMPONENT(WrenVM* vm)
    {
        int hudColor = (int)wrenGetSlotDouble(vm, 1);

        HUD::SET_COLOUR_OF_NEXT_TEXT_COMPONENT(hudColor);
    }

    static void WREN_HUD_GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME(WrenVM* vm)
    {
        const char* text = wrenGetSlotString(vm, 1);
        int position = (int)wrenGetSlotDouble(vm, 2);
        int length = (int)wrenGetSlotDouble(vm, 3);

        const char* res = HUD::GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME(text, position, length);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotString(vm, 0, res);
    }

    static void WREN_HUD_GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME_WITH_BYTE_LIMIT(WrenVM* vm)
    {
        const char* text = wrenGetSlotString(vm, 1);
        int position = (int)wrenGetSlotDouble(vm, 2);
        int length = (int)wrenGetSlotDouble(vm, 3);
        int maxLength = (int)wrenGetSlotDouble(vm, 4);

        const char* res = HUD::GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME_WITH_BYTE_LIMIT(text, position, length, maxLength);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotString(vm, 0, res);
    }

    static void WREN_HUD_GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME_BYTES(WrenVM* vm)
    {
        const char* text = wrenGetSlotString(vm, 1);
        int startPosition = (int)wrenGetSlotDouble(vm, 2);
        int endPosition = (int)wrenGetSlotDouble(vm, 3);

        const char* res = HUD::GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME_BYTES(text, startPosition, endPosition);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotString(vm, 0, res);
    }

    static void WREN_HUD_GET_FILENAME_FOR_AUDIO_CONVERSATION(WrenVM* vm)
    {
        const char* labelName = wrenGetSlotString(vm, 1);

        const char* res = HUD::GET_FILENAME_FOR_AUDIO_CONVERSATION(labelName);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotString(vm, 0, res);
    }

    static void WREN_HUD_CLEAR_PRINTS(WrenVM* vm)
    {

        HUD::CLEAR_PRINTS();
    }

    static void WREN_HUD_CLEAR_BRIEF(WrenVM* vm)
    {

        HUD::CLEAR_BRIEF();
    }

    static void WREN_HUD_CLEAR_ALL_HELP_MESSAGES(WrenVM* vm)
    {

        HUD::CLEAR_ALL_HELP_MESSAGES();
    }

    static void WREN_HUD_CLEAR_THIS_PRINT(WrenVM* vm)
    {
        const char* p0 = wrenGetSlotString(vm, 1);

        HUD::CLEAR_THIS_PRINT(p0);
    }

    static void WREN_HUD_CLEAR_SMALL_PRINTS(WrenVM* vm)
    {

        HUD::CLEAR_SMALL_PRINTS();
    }

    static void WREN_HUD_DOES_TEXT_BLOCK_EXIST(WrenVM* vm)
    {
        const char* gxt = wrenGetSlotString(vm, 1);

        BOOL res = HUD::DOES_TEXT_BLOCK_EXIST(gxt);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_HUD_REQUEST_ADDITIONAL_TEXT(WrenVM* vm)
    {
        const char* gxt = wrenGetSlotString(vm, 1);
        int slot = (int)wrenGetSlotDouble(vm, 2);

        HUD::REQUEST_ADDITIONAL_TEXT(gxt, slot);
    }

    static void WREN_HUD_REQUEST_ADDITIONAL_TEXT_FOR_DLC(WrenVM* vm)
    {
        const char* gxt = wrenGetSlotString(vm, 1);
        int slot = (int)wrenGetSlotDouble(vm, 2);

        HUD::REQUEST_ADDITIONAL_TEXT_FOR_DLC(gxt, slot);
    }

    static void WREN_HUD_HAS_ADDITIONAL_TEXT_LOADED(WrenVM* vm)
    {
        int slot = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = HUD::HAS_ADDITIONAL_TEXT_LOADED(slot);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_HUD_CLEAR_ADDITIONAL_TEXT(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        HUD::CLEAR_ADDITIONAL_TEXT(p0, p1);
    }

    static void WREN_HUD_IS_STREAMING_ADDITIONAL_TEXT(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = HUD::IS_STREAMING_ADDITIONAL_TEXT(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_HUD_HAS_THIS_ADDITIONAL_TEXT_LOADED(WrenVM* vm)
    {
        const char* gxt = wrenGetSlotString(vm, 1);
        int slot = (int)wrenGetSlotDouble(vm, 2);

        BOOL res = HUD::HAS_THIS_ADDITIONAL_TEXT_LOADED(gxt, slot);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_HUD_IS_MESSAGE_BEING_DISPLAYED(WrenVM* vm)
    {

        BOOL res = HUD::IS_MESSAGE_BEING_DISPLAYED();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_HUD_DOES_TEXT_LABEL_EXIST(WrenVM* vm)
    {
        const char* gxt = wrenGetSlotString(vm, 1);

        BOOL res = HUD::DOES_TEXT_LABEL_EXIST(gxt);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_HUD_GET_FIRST_N_CHARACTERS_OF_LITERAL_STRING(WrenVM* vm)
    {
        const char* string = wrenGetSlotString(vm, 1);
        int length = (int)wrenGetSlotDouble(vm, 2);

        const char* res = HUD::GET_FIRST_N_CHARACTERS_OF_LITERAL_STRING(string, length);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotString(vm, 0, res);
    }

    static void WREN_HUD_GET_LENGTH_OF_STRING_WITH_THIS_TEXT_LABEL(WrenVM* vm)
    {
        const char* gxt = wrenGetSlotString(vm, 1);

        int res = HUD::GET_LENGTH_OF_STRING_WITH_THIS_TEXT_LABEL(gxt);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_HUD_GET_LENGTH_OF_LITERAL_STRING(WrenVM* vm)
    {
        const char* string = wrenGetSlotString(vm, 1);

        int res = HUD::GET_LENGTH_OF_LITERAL_STRING(string);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_HUD_GET_LENGTH_OF_LITERAL_STRING_IN_BYTES(WrenVM* vm)
    {
        const char* string = wrenGetSlotString(vm, 1);

        int res = HUD::GET_LENGTH_OF_LITERAL_STRING_IN_BYTES(string);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_HUD_GET_STREET_NAME_FROM_HASH_KEY(WrenVM* vm)
    {
        Hash hash = (Hash)wrenGetSlotDouble(vm, 1);

        const char* res = HUD::GET_STREET_NAME_FROM_HASH_KEY(hash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotString(vm, 0, res);
    }

    static void WREN_HUD_IS_HUD_PREFERENCE_SWITCHED_ON(WrenVM* vm)
    {

        BOOL res = HUD::IS_HUD_PREFERENCE_SWITCHED_ON();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_HUD_IS_RADAR_PREFERENCE_SWITCHED_ON(WrenVM* vm)
    {

        BOOL res = HUD::IS_RADAR_PREFERENCE_SWITCHED_ON();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_HUD_IS_SUBTITLE_PREFERENCE_SWITCHED_ON(WrenVM* vm)
    {

        BOOL res = HUD::IS_SUBTITLE_PREFERENCE_SWITCHED_ON();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_HUD_DISPLAY_HUD(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        HUD::DISPLAY_HUD(toggle);
    }

    static void WREN_HUD_DISPLAY_HUD_WHEN_NOT_IN_STATE_OF_PLAY_THIS_FRAME(WrenVM* vm)
    {

        HUD::DISPLAY_HUD_WHEN_NOT_IN_STATE_OF_PLAY_THIS_FRAME();
    }

    static void WREN_HUD_DISPLAY_HUD_WHEN_PAUSED_THIS_FRAME(WrenVM* vm)
    {

        HUD::DISPLAY_HUD_WHEN_PAUSED_THIS_FRAME();
    }

    static void WREN_HUD_DISPLAY_RADAR(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        HUD::DISPLAY_RADAR(toggle);
    }

    static void WREN_HUD_SET_FAKE_SPECTATOR_MODE(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        HUD::SET_FAKE_SPECTATOR_MODE(toggle);
    }

    static void WREN_HUD_GET_FAKE_SPECTATOR_MODE(WrenVM* vm)
    {

        BOOL res = HUD::GET_FAKE_SPECTATOR_MODE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_HUD_IS_HUD_HIDDEN(WrenVM* vm)
    {

        BOOL res = HUD::IS_HUD_HIDDEN();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_HUD_IS_RADAR_HIDDEN(WrenVM* vm)
    {

        BOOL res = HUD::IS_RADAR_HIDDEN();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_HUD_IS_MINIMAP_RENDERING(WrenVM* vm)
    {

        BOOL res = HUD::IS_MINIMAP_RENDERING();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_HUD_USE_VEHICLE_TARGETING_RETICULE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        HUD::USE_VEHICLE_TARGETING_RETICULE(p0);
    }

    static void WREN_HUD_ADD_VALID_VEHICLE_HIT_HASH(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        HUD::ADD_VALID_VEHICLE_HIT_HASH(p0);
    }

    static void WREN_HUD_CLEAR_VALID_VEHICLE_HIT_HASHES(WrenVM* vm)
    {

        HUD::CLEAR_VALID_VEHICLE_HIT_HASHES();
    }

    static void WREN_HUD_SET_BLIP_ROUTE(WrenVM* vm)
    {
        Blip blip = (Blip)wrenGetSlotDouble(vm, 1);
        BOOL enabled = (BOOL)wrenGetSlotBool(vm, 2);

        HUD::SET_BLIP_ROUTE(blip, enabled);
    }

    static void WREN_HUD_CLEAR_ALL_BLIP_ROUTES(WrenVM* vm)
    {

        HUD::CLEAR_ALL_BLIP_ROUTES();
    }

    static void WREN_HUD_SET_BLIP_ROUTE_COLOUR(WrenVM* vm)
    {
        Blip blip = (Blip)wrenGetSlotDouble(vm, 1);
        int colour = (int)wrenGetSlotDouble(vm, 2);

        HUD::SET_BLIP_ROUTE_COLOUR(blip, colour);
    }

    static void WREN_HUD_SET_FORCE_SHOW_GPS(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        HUD::SET_FORCE_SHOW_GPS(toggle);
    }

    static void WREN_HUD_SET_USE_SET_DESTINATION_IN_PAUSE_MAP(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        HUD::SET_USE_SET_DESTINATION_IN_PAUSE_MAP(toggle);
    }

    static void WREN_HUD_SET_BLOCK_WANTED_FLASH(WrenVM* vm)
    {
        BOOL disabled = (BOOL)wrenGetSlotBool(vm, 1);

        HUD::SET_BLOCK_WANTED_FLASH(disabled);
    }

    static void WREN_HUD_ADD_NEXT_MESSAGE_TO_PREVIOUS_BRIEFS(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        HUD::ADD_NEXT_MESSAGE_TO_PREVIOUS_BRIEFS(p0);
    }

    static void WREN_HUD_FORCE_NEXT_MESSAGE_TO_PREVIOUS_BRIEFS_LIST(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);

        HUD::FORCE_NEXT_MESSAGE_TO_PREVIOUS_BRIEFS_LIST(p0);
    }

    static void WREN_HUD_SET_RADAR_ZOOM_PRECISE(WrenVM* vm)
    {
        float zoom = (float)wrenGetSlotDouble(vm, 1);

        HUD::SET_RADAR_ZOOM_PRECISE(zoom);
    }

    static void WREN_HUD_SET_RADAR_ZOOM(WrenVM* vm)
    {
        int zoomLevel = (int)wrenGetSlotDouble(vm, 1);

        HUD::SET_RADAR_ZOOM(zoomLevel);
    }

    static void WREN_HUD_SET_RADAR_ZOOM_TO_BLIP(WrenVM* vm)
    {
        Blip blip = (Blip)wrenGetSlotDouble(vm, 1);
        float zoom = (float)wrenGetSlotDouble(vm, 2);

        HUD::SET_RADAR_ZOOM_TO_BLIP(blip, zoom);
    }

    static void WREN_HUD_SET_RADAR_ZOOM_TO_DISTANCE(WrenVM* vm)
    {
        float zoom = (float)wrenGetSlotDouble(vm, 1);

        HUD::SET_RADAR_ZOOM_TO_DISTANCE(zoom);
    }

    static void WREN_HUD_UPDATE_RADAR_ZOOM_TO_BLIP(WrenVM* vm)
    {

        HUD::UPDATE_RADAR_ZOOM_TO_BLIP();
    }

    static void WREN_HUD_GET_HUD_COLOUR(WrenVM* vm)
    {
        int hudColorIndex = (int)wrenGetSlotDouble(vm, 1);
        int r;
        int g;
        int b;
        int a;

        HUD::GET_HUD_COLOUR(hudColorIndex, &r, &g, &b, &a);

        wrenEnsureSlots(vm, 8);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, r);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, g);
        wrenInsertInList(vm, 0, 1, 2);

        wrenSetSlotDouble(vm, 3, b);
        wrenInsertInList(vm, 0, 2, 3);

        wrenSetSlotDouble(vm, 4, a);
        wrenInsertInList(vm, 0, 3, 4);

    }

    static void WREN_HUD_SET_SCRIPT_VARIABLE_HUD_COLOUR(WrenVM* vm)
    {
        int r = (int)wrenGetSlotDouble(vm, 1);
        int g = (int)wrenGetSlotDouble(vm, 2);
        int b = (int)wrenGetSlotDouble(vm, 3);
        int a = (int)wrenGetSlotDouble(vm, 4);

        HUD::SET_SCRIPT_VARIABLE_HUD_COLOUR(r, g, b, a);
    }

    static void WREN_HUD_SET_SECOND_SCRIPT_VARIABLE_HUD_COLOUR(WrenVM* vm)
    {
        int r = (int)wrenGetSlotDouble(vm, 1);
        int g = (int)wrenGetSlotDouble(vm, 2);
        int b = (int)wrenGetSlotDouble(vm, 3);
        int a = (int)wrenGetSlotDouble(vm, 4);

        HUD::SET_SECOND_SCRIPT_VARIABLE_HUD_COLOUR(r, g, b, a);
    }

    static void WREN_HUD_REPLACE_HUD_COLOUR(WrenVM* vm)
    {
        int hudColorIndex = (int)wrenGetSlotDouble(vm, 1);
        int hudColorIndex2 = (int)wrenGetSlotDouble(vm, 2);

        HUD::REPLACE_HUD_COLOUR(hudColorIndex, hudColorIndex2);
    }

    static void WREN_HUD_REPLACE_HUD_COLOUR_WITH_RGBA(WrenVM* vm)
    {
        int hudColorIndex = (int)wrenGetSlotDouble(vm, 1);
        int r = (int)wrenGetSlotDouble(vm, 2);
        int g = (int)wrenGetSlotDouble(vm, 3);
        int b = (int)wrenGetSlotDouble(vm, 4);
        int a = (int)wrenGetSlotDouble(vm, 5);

        HUD::REPLACE_HUD_COLOUR_WITH_RGBA(hudColorIndex, r, g, b, a);
    }

    static void WREN_HUD_SET_ABILITY_BAR_VISIBILITY(WrenVM* vm)
    {
        BOOL visible = (BOOL)wrenGetSlotBool(vm, 1);

        HUD::SET_ABILITY_BAR_VISIBILITY(visible);
    }

    static void WREN_HUD_SET_ALLOW_ABILITY_BAR(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        HUD::SET_ALLOW_ABILITY_BAR(toggle);
    }

    static void WREN_HUD_FLASH_ABILITY_BAR(WrenVM* vm)
    {
        int millisecondsToFlash = (int)wrenGetSlotDouble(vm, 1);

        HUD::FLASH_ABILITY_BAR(millisecondsToFlash);
    }

    static void WREN_HUD_SET_ABILITY_BAR_VALUE(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);

        HUD::SET_ABILITY_BAR_VALUE(p0, p1);
    }

    static void WREN_HUD_FLASH_WANTED_DISPLAY(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        HUD::FLASH_WANTED_DISPLAY(p0);
    }

    static void WREN_HUD_FORCE_OFF_WANTED_STAR_FLASH(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        HUD::FORCE_OFF_WANTED_STAR_FLASH(toggle);
    }

    static void WREN_HUD_SET_CUSTOM_MP_HUD_COLOR(WrenVM* vm)
    {
        int hudColorId = (int)wrenGetSlotDouble(vm, 1);

        HUD::SET_CUSTOM_MP_HUD_COLOR(hudColorId);
    }

    static void WREN_HUD_GET_RENDERED_CHARACTER_HEIGHT(WrenVM* vm)
    {
        float size = (float)wrenGetSlotDouble(vm, 1);
        int font = (int)wrenGetSlotDouble(vm, 2);

        float res = HUD::GET_RENDERED_CHARACTER_HEIGHT(size, font);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_HUD_SET_TEXT_SCALE(WrenVM* vm)
    {
        float scale = (float)wrenGetSlotDouble(vm, 1);
        float size = (float)wrenGetSlotDouble(vm, 2);

        HUD::SET_TEXT_SCALE(scale, size);
    }

    static void WREN_HUD_SET_TEXT_COLOUR(WrenVM* vm)
    {
        int red = (int)wrenGetSlotDouble(vm, 1);
        int green = (int)wrenGetSlotDouble(vm, 2);
        int blue = (int)wrenGetSlotDouble(vm, 3);
        int alpha = (int)wrenGetSlotDouble(vm, 4);

        HUD::SET_TEXT_COLOUR(red, green, blue, alpha);
    }

    static void WREN_HUD_SET_TEXT_CENTRE(WrenVM* vm)
    {
        BOOL align = (BOOL)wrenGetSlotBool(vm, 1);

        HUD::SET_TEXT_CENTRE(align);
    }

    static void WREN_HUD_SET_TEXT_RIGHT_JUSTIFY(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        HUD::SET_TEXT_RIGHT_JUSTIFY(toggle);
    }

    static void WREN_HUD_SET_TEXT_JUSTIFICATION(WrenVM* vm)
    {
        int justifyType = (int)wrenGetSlotDouble(vm, 1);

        HUD::SET_TEXT_JUSTIFICATION(justifyType);
    }

    static void WREN_HUD_SET_TEXT_WRAP(WrenVM* vm)
    {
        float start = (float)wrenGetSlotDouble(vm, 1);
        float end = (float)wrenGetSlotDouble(vm, 2);

        HUD::SET_TEXT_WRAP(start, end);
    }

    static void WREN_HUD_SET_TEXT_LEADING(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);

        HUD::SET_TEXT_LEADING(p0);
    }

    static void WREN_HUD_SET_TEXT_PROPORTIONAL(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        HUD::SET_TEXT_PROPORTIONAL(p0);
    }

    static void WREN_HUD_SET_TEXT_FONT(WrenVM* vm)
    {
        int fontType = (int)wrenGetSlotDouble(vm, 1);

        HUD::SET_TEXT_FONT(fontType);
    }

    static void WREN_HUD_SET_TEXT_DROP_SHADOW(WrenVM* vm)
    {

        HUD::SET_TEXT_DROP_SHADOW();
    }

    static void WREN_HUD_SET_TEXT_DROPSHADOW(WrenVM* vm)
    {
        int distance = (int)wrenGetSlotDouble(vm, 1);
        int r = (int)wrenGetSlotDouble(vm, 2);
        int g = (int)wrenGetSlotDouble(vm, 3);
        int b = (int)wrenGetSlotDouble(vm, 4);
        int a = (int)wrenGetSlotDouble(vm, 5);

        HUD::SET_TEXT_DROPSHADOW(distance, r, g, b, a);
    }

    static void WREN_HUD_SET_TEXT_OUTLINE(WrenVM* vm)
    {

        HUD::SET_TEXT_OUTLINE();
    }

    static void WREN_HUD_SET_TEXT_EDGE(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);
        int r = (int)wrenGetSlotDouble(vm, 2);
        int g = (int)wrenGetSlotDouble(vm, 3);
        int b = (int)wrenGetSlotDouble(vm, 4);
        int a = (int)wrenGetSlotDouble(vm, 5);

        HUD::SET_TEXT_EDGE(p0, r, g, b, a);
    }

    static void WREN_HUD_SET_TEXT_RENDER_ID(WrenVM* vm)
    {
        int renderId = (int)wrenGetSlotDouble(vm, 1);

        HUD::SET_TEXT_RENDER_ID(renderId);
    }

    static void WREN_HUD_GET_DEFAULT_SCRIPT_RENDERTARGET_RENDER_ID(WrenVM* vm)
    {

        int res = HUD::GET_DEFAULT_SCRIPT_RENDERTARGET_RENDER_ID();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_HUD_REGISTER_NAMED_RENDERTARGET(WrenVM* vm)
    {
        const char* name = wrenGetSlotString(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        BOOL res = HUD::REGISTER_NAMED_RENDERTARGET(name, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_HUD_IS_NAMED_RENDERTARGET_REGISTERED(WrenVM* vm)
    {
        const char* name = wrenGetSlotString(vm, 1);

        BOOL res = HUD::IS_NAMED_RENDERTARGET_REGISTERED(name);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_HUD_RELEASE_NAMED_RENDERTARGET(WrenVM* vm)
    {
        const char* name = wrenGetSlotString(vm, 1);

        BOOL res = HUD::RELEASE_NAMED_RENDERTARGET(name);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_HUD_LINK_NAMED_RENDERTARGET(WrenVM* vm)
    {
        Hash modelHash = (Hash)wrenGetSlotDouble(vm, 1);

        HUD::LINK_NAMED_RENDERTARGET(modelHash);
    }

    static void WREN_HUD_GET_NAMED_RENDERTARGET_RENDER_ID(WrenVM* vm)
    {
        const char* name = wrenGetSlotString(vm, 1);

        int res = HUD::GET_NAMED_RENDERTARGET_RENDER_ID(name);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_HUD_IS_NAMED_RENDERTARGET_LINKED(WrenVM* vm)
    {
        Hash modelHash = (Hash)wrenGetSlotDouble(vm, 1);

        BOOL res = HUD::IS_NAMED_RENDERTARGET_LINKED(modelHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_HUD_CLEAR_HELP(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        HUD::CLEAR_HELP(toggle);
    }

    static void WREN_HUD_IS_HELP_MESSAGE_ON_SCREEN(WrenVM* vm)
    {

        BOOL res = HUD::IS_HELP_MESSAGE_ON_SCREEN();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_HUD_HAS_SCRIPT_HIDDEN_HELP_THIS_FRAME(WrenVM* vm)
    {

        BOOL res = HUD::HAS_SCRIPT_HIDDEN_HELP_THIS_FRAME();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_HUD_IS_HELP_MESSAGE_BEING_DISPLAYED(WrenVM* vm)
    {

        BOOL res = HUD::IS_HELP_MESSAGE_BEING_DISPLAYED();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_HUD_IS_HELP_MESSAGE_FADING_OUT(WrenVM* vm)
    {

        BOOL res = HUD::IS_HELP_MESSAGE_FADING_OUT();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_HUD_SET_HELP_MESSAGE_STYLE(WrenVM* vm)
    {
        int style = (int)wrenGetSlotDouble(vm, 1);
        int hudColor = (int)wrenGetSlotDouble(vm, 2);
        int alpha = (int)wrenGetSlotDouble(vm, 3);
        int p3 = (int)wrenGetSlotDouble(vm, 4);
        int p4 = (int)wrenGetSlotDouble(vm, 5);

        HUD::SET_HELP_MESSAGE_STYLE(style, hudColor, alpha, p3, p4);
    }

    static void WREN_HUD_GET_STANDARD_BLIP_ENUM_ID(WrenVM* vm)
    {

        int res = HUD::GET_STANDARD_BLIP_ENUM_ID();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_HUD_GET_WAYPOINT_BLIP_ENUM_ID(WrenVM* vm)
    {

        int res = HUD::GET_WAYPOINT_BLIP_ENUM_ID();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_HUD_GET_NUMBER_OF_ACTIVE_BLIPS(WrenVM* vm)
    {

        int res = HUD::GET_NUMBER_OF_ACTIVE_BLIPS();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_HUD_GET_NEXT_BLIP_INFO_ID(WrenVM* vm)
    {
        int blipSprite = (int)wrenGetSlotDouble(vm, 1);

        Blip res = HUD::GET_NEXT_BLIP_INFO_ID(blipSprite);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_HUD_GET_FIRST_BLIP_INFO_ID(WrenVM* vm)
    {
        int blipSprite = (int)wrenGetSlotDouble(vm, 1);

        Blip res = HUD::GET_FIRST_BLIP_INFO_ID(blipSprite);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_HUD_GET_CLOSEST_BLIP_INFO_ID(WrenVM* vm)
    {
        int blipSprite = (int)wrenGetSlotDouble(vm, 1);

        Blip res = HUD::GET_CLOSEST_BLIP_INFO_ID(blipSprite);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_HUD_GET_BLIP_INFO_ID_COORD(WrenVM* vm)
    {
        Blip blip = (Blip)wrenGetSlotDouble(vm, 1);

        Vector3 res = HUD::GET_BLIP_INFO_ID_COORD(blip);

        wrenEnsureSlots(vm, 1);

        wrenGetVariable(vm, "natives", "Vector3", 0);
        Vector3* wren_res = (Vector3*)wrenSetSlotNewForeign(vm, 0, 0, sizeof(Vector3));
        wren_res->x = res.x;
        wren_res->y = res.y;
        wren_res->z = res.z;
    }

    static void WREN_HUD_GET_BLIP_INFO_ID_DISPLAY(WrenVM* vm)
    {
        Blip blip = (Blip)wrenGetSlotDouble(vm, 1);

        int res = HUD::GET_BLIP_INFO_ID_DISPLAY(blip);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_HUD_GET_BLIP_INFO_ID_TYPE(WrenVM* vm)
    {
        Blip blip = (Blip)wrenGetSlotDouble(vm, 1);

        int res = HUD::GET_BLIP_INFO_ID_TYPE(blip);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_HUD_GET_BLIP_INFO_ID_ENTITY_INDEX(WrenVM* vm)
    {
        Blip blip = (Blip)wrenGetSlotDouble(vm, 1);

        Entity res = HUD::GET_BLIP_INFO_ID_ENTITY_INDEX(blip);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_HUD_GET_BLIP_INFO_ID_PICKUP_INDEX(WrenVM* vm)
    {
        Blip blip = (Blip)wrenGetSlotDouble(vm, 1);

        Pickup res = HUD::GET_BLIP_INFO_ID_PICKUP_INDEX(blip);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_HUD_GET_BLIP_FROM_ENTITY(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        Blip res = HUD::GET_BLIP_FROM_ENTITY(entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_HUD_ADD_BLIP_FOR_RADIUS(WrenVM* vm)
    {
        float posX = (float)wrenGetSlotDouble(vm, 1);
        float posY = (float)wrenGetSlotDouble(vm, 2);
        float posZ = (float)wrenGetSlotDouble(vm, 3);
        float radius = (float)wrenGetSlotDouble(vm, 4);

        Blip res = HUD::ADD_BLIP_FOR_RADIUS(posX, posY, posZ, radius);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_HUD_ADD_BLIP_FOR_AREA(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        float width = (float)wrenGetSlotDouble(vm, 4);
        float height = (float)wrenGetSlotDouble(vm, 5);

        Blip res = HUD::ADD_BLIP_FOR_AREA(x, y, z, width, height);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_HUD_ADD_BLIP_FOR_ENTITY(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        Blip res = HUD::ADD_BLIP_FOR_ENTITY(entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_HUD_ADD_BLIP_FOR_PICKUP(WrenVM* vm)
    {
        Pickup pickup = (Pickup)wrenGetSlotDouble(vm, 1);

        Blip res = HUD::ADD_BLIP_FOR_PICKUP(pickup);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_HUD_ADD_BLIP_FOR_COORD(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);

        Blip res = HUD::ADD_BLIP_FOR_COORD(x, y, z);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_HUD_TRIGGER_SONAR_BLIP(WrenVM* vm)
    {
        float posX = (float)wrenGetSlotDouble(vm, 1);
        float posY = (float)wrenGetSlotDouble(vm, 2);
        float posZ = (float)wrenGetSlotDouble(vm, 3);
        float radius = (float)wrenGetSlotDouble(vm, 4);
        int p4 = (int)wrenGetSlotDouble(vm, 5);

        HUD::TRIGGER_SONAR_BLIP(posX, posY, posZ, radius, p4);
    }

    static void WREN_HUD_ALLOW_SONAR_BLIPS(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        HUD::ALLOW_SONAR_BLIPS(toggle);
    }

    static void WREN_HUD_SET_BLIP_COORDS(WrenVM* vm)
    {
        Blip blip = (Blip)wrenGetSlotDouble(vm, 1);
        float posX = (float)wrenGetSlotDouble(vm, 2);
        float posY = (float)wrenGetSlotDouble(vm, 3);
        float posZ = (float)wrenGetSlotDouble(vm, 4);

        HUD::SET_BLIP_COORDS(blip, posX, posY, posZ);
    }

    static void WREN_HUD_GET_BLIP_COORDS(WrenVM* vm)
    {
        Blip blip = (Blip)wrenGetSlotDouble(vm, 1);

        Vector3 res = HUD::GET_BLIP_COORDS(blip);

        wrenEnsureSlots(vm, 1);

        wrenGetVariable(vm, "natives", "Vector3", 0);
        Vector3* wren_res = (Vector3*)wrenSetSlotNewForeign(vm, 0, 0, sizeof(Vector3));
        wren_res->x = res.x;
        wren_res->y = res.y;
        wren_res->z = res.z;
    }

    static void WREN_HUD_SET_BLIP_SPRITE(WrenVM* vm)
    {
        Blip blip = (Blip)wrenGetSlotDouble(vm, 1);
        int spriteId = (int)wrenGetSlotDouble(vm, 2);

        HUD::SET_BLIP_SPRITE(blip, spriteId);
    }

    static void WREN_HUD_GET_BLIP_SPRITE(WrenVM* vm)
    {
        Blip blip = (Blip)wrenGetSlotDouble(vm, 1);

        int res = HUD::GET_BLIP_SPRITE(blip);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_HUD_SET_COP_BLIP_SPRITE(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);

        HUD::SET_COP_BLIP_SPRITE(p0, p1);
    }

    static void WREN_HUD_SET_COP_BLIP_SPRITE_AS_STANDARD(WrenVM* vm)
    {

        HUD::SET_COP_BLIP_SPRITE_AS_STANDARD();
    }

    static void WREN_HUD_SET_BLIP_NAME_FROM_TEXT_FILE(WrenVM* vm)
    {
        Blip blip = (Blip)wrenGetSlotDouble(vm, 1);
        const char* gxtEntry = wrenGetSlotString(vm, 2);

        HUD::SET_BLIP_NAME_FROM_TEXT_FILE(blip, gxtEntry);
    }

    static void WREN_HUD_SET_BLIP_NAME_TO_PLAYER_NAME(WrenVM* vm)
    {
        Blip blip = (Blip)wrenGetSlotDouble(vm, 1);
        Player player = (Player)wrenGetSlotDouble(vm, 2);

        HUD::SET_BLIP_NAME_TO_PLAYER_NAME(blip, player);
    }

    static void WREN_HUD_SET_BLIP_ALPHA(WrenVM* vm)
    {
        Blip blip = (Blip)wrenGetSlotDouble(vm, 1);
        int alpha = (int)wrenGetSlotDouble(vm, 2);

        HUD::SET_BLIP_ALPHA(blip, alpha);
    }

    static void WREN_HUD_GET_BLIP_ALPHA(WrenVM* vm)
    {
        Blip blip = (Blip)wrenGetSlotDouble(vm, 1);

        int res = HUD::GET_BLIP_ALPHA(blip);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_HUD_SET_BLIP_FADE(WrenVM* vm)
    {
        Blip blip = (Blip)wrenGetSlotDouble(vm, 1);
        int opacity = (int)wrenGetSlotDouble(vm, 2);
        int duration = (int)wrenGetSlotDouble(vm, 3);

        HUD::SET_BLIP_FADE(blip, opacity, duration);
    }

    static void WREN_HUD_GET_BLIP_FADE_DIRECTION(WrenVM* vm)
    {
        Blip blip = (Blip)wrenGetSlotDouble(vm, 1);

        int res = HUD::GET_BLIP_FADE_DIRECTION(blip);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_HUD_SET_BLIP_ROTATION(WrenVM* vm)
    {
        Blip blip = (Blip)wrenGetSlotDouble(vm, 1);
        int rotation = (int)wrenGetSlotDouble(vm, 2);

        HUD::SET_BLIP_ROTATION(blip, rotation);
    }

    static void WREN_HUD_SET_BLIP_ROTATION_WITH_FLOAT(WrenVM* vm)
    {
        Blip blip = (Blip)wrenGetSlotDouble(vm, 1);
        float heading = (float)wrenGetSlotDouble(vm, 2);

        HUD::SET_BLIP_ROTATION_WITH_FLOAT(blip, heading);
    }

    static void WREN_HUD_GET_BLIP_ROTATION(WrenVM* vm)
    {
        Blip blip = (Blip)wrenGetSlotDouble(vm, 1);

        int res = HUD::GET_BLIP_ROTATION(blip);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_HUD_SET_BLIP_FLASH_TIMER(WrenVM* vm)
    {
        Blip blip = (Blip)wrenGetSlotDouble(vm, 1);
        int duration = (int)wrenGetSlotDouble(vm, 2);

        HUD::SET_BLIP_FLASH_TIMER(blip, duration);
    }

    static void WREN_HUD_SET_BLIP_FLASH_INTERVAL(WrenVM* vm)
    {
        Blip blip = (Blip)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        HUD::SET_BLIP_FLASH_INTERVAL(blip, p1);
    }

    static void WREN_HUD_SET_BLIP_COLOUR(WrenVM* vm)
    {
        Blip blip = (Blip)wrenGetSlotDouble(vm, 1);
        int color = (int)wrenGetSlotDouble(vm, 2);

        HUD::SET_BLIP_COLOUR(blip, color);
    }

    static void WREN_HUD_SET_BLIP_SECONDARY_COLOUR(WrenVM* vm)
    {
        Blip blip = (Blip)wrenGetSlotDouble(vm, 1);
        int r = (int)wrenGetSlotDouble(vm, 2);
        int g = (int)wrenGetSlotDouble(vm, 3);
        int b = (int)wrenGetSlotDouble(vm, 4);

        HUD::SET_BLIP_SECONDARY_COLOUR(blip, r, g, b);
    }

    static void WREN_HUD_GET_BLIP_COLOUR(WrenVM* vm)
    {
        Blip blip = (Blip)wrenGetSlotDouble(vm, 1);

        int res = HUD::GET_BLIP_COLOUR(blip);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_HUD_GET_BLIP_HUD_COLOUR(WrenVM* vm)
    {
        Blip blip = (Blip)wrenGetSlotDouble(vm, 1);

        int res = HUD::GET_BLIP_HUD_COLOUR(blip);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_HUD_IS_BLIP_SHORT_RANGE(WrenVM* vm)
    {
        Blip blip = (Blip)wrenGetSlotDouble(vm, 1);

        BOOL res = HUD::IS_BLIP_SHORT_RANGE(blip);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_HUD_IS_BLIP_ON_MINIMAP(WrenVM* vm)
    {
        Blip blip = (Blip)wrenGetSlotDouble(vm, 1);

        BOOL res = HUD::IS_BLIP_ON_MINIMAP(blip);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_HUD_DOES_BLIP_HAVE_GPS_ROUTE(WrenVM* vm)
    {
        Blip blip = (Blip)wrenGetSlotDouble(vm, 1);

        BOOL res = HUD::DOES_BLIP_HAVE_GPS_ROUTE(blip);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_HUD_SET_BLIP_HIDDEN_ON_LEGEND(WrenVM* vm)
    {
        Blip blip = (Blip)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        HUD::SET_BLIP_HIDDEN_ON_LEGEND(blip, toggle);
    }

    static void WREN_HUD_SET_BLIP_HIGH_DETAIL(WrenVM* vm)
    {
        Blip blip = (Blip)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        HUD::SET_BLIP_HIGH_DETAIL(blip, toggle);
    }

    static void WREN_HUD_SET_BLIP_AS_MISSION_CREATOR_BLIP(WrenVM* vm)
    {
        Blip blip = (Blip)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        HUD::SET_BLIP_AS_MISSION_CREATOR_BLIP(blip, toggle);
    }

    static void WREN_HUD_IS_MISSION_CREATOR_BLIP(WrenVM* vm)
    {
        Blip blip = (Blip)wrenGetSlotDouble(vm, 1);

        BOOL res = HUD::IS_MISSION_CREATOR_BLIP(blip);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_HUD_GET_NEW_SELECTED_MISSION_CREATOR_BLIP(WrenVM* vm)
    {

        Blip res = HUD::GET_NEW_SELECTED_MISSION_CREATOR_BLIP();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_HUD_IS_HOVERING_OVER_MISSION_CREATOR_BLIP(WrenVM* vm)
    {

        BOOL res = HUD::IS_HOVERING_OVER_MISSION_CREATOR_BLIP();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_HUD_SHOW_START_MISSION_INSTRUCTIONAL_BUTTON(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        HUD::SHOW_START_MISSION_INSTRUCTIONAL_BUTTON(toggle);
    }

    static void WREN_HUD_SHOW_CONTACT_INSTRUCTIONAL_BUTTON(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        HUD::SHOW_CONTACT_INSTRUCTIONAL_BUTTON(toggle);
    }

    static void WREN_HUD_RELOAD_MAP_MENU(WrenVM* vm)
    {

        HUD::RELOAD_MAP_MENU();
    }

    static void WREN_HUD_SET_BLIP_MARKER_LONG_DISTANCE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        HUD::SET_BLIP_MARKER_LONG_DISTANCE(p0, p1);
    }

    static void WREN_HUD_SET_BLIP_FLASHES(WrenVM* vm)
    {
        Blip blip = (Blip)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        HUD::SET_BLIP_FLASHES(blip, toggle);
    }

    static void WREN_HUD_SET_BLIP_FLASHES_ALTERNATE(WrenVM* vm)
    {
        Blip blip = (Blip)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        HUD::SET_BLIP_FLASHES_ALTERNATE(blip, toggle);
    }

    static void WREN_HUD_IS_BLIP_FLASHING(WrenVM* vm)
    {
        Blip blip = (Blip)wrenGetSlotDouble(vm, 1);

        BOOL res = HUD::IS_BLIP_FLASHING(blip);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_HUD_SET_BLIP_AS_SHORT_RANGE(WrenVM* vm)
    {
        Blip blip = (Blip)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        HUD::SET_BLIP_AS_SHORT_RANGE(blip, toggle);
    }

    static void WREN_HUD_SET_BLIP_SCALE(WrenVM* vm)
    {
        Blip blip = (Blip)wrenGetSlotDouble(vm, 1);
        float scale = (float)wrenGetSlotDouble(vm, 2);

        HUD::SET_BLIP_SCALE(blip, scale);
    }

    static void WREN_HUD_SET_BLIP_SCALE_2D(WrenVM* vm)
    {
        Blip blip = (Blip)wrenGetSlotDouble(vm, 1);
        float xScale = (float)wrenGetSlotDouble(vm, 2);
        float yScale = (float)wrenGetSlotDouble(vm, 3);

        HUD::SET_BLIP_SCALE_2D(blip, xScale, yScale);
    }

    static void WREN_HUD_SET_BLIP_PRIORITY(WrenVM* vm)
    {
        Blip blip = (Blip)wrenGetSlotDouble(vm, 1);
        int priority = (int)wrenGetSlotDouble(vm, 2);

        HUD::SET_BLIP_PRIORITY(blip, priority);
    }

    static void WREN_HUD_SET_BLIP_DISPLAY(WrenVM* vm)
    {
        Blip blip = (Blip)wrenGetSlotDouble(vm, 1);
        int displayId = (int)wrenGetSlotDouble(vm, 2);

        HUD::SET_BLIP_DISPLAY(blip, displayId);
    }

    static void WREN_HUD_SET_BLIP_CATEGORY(WrenVM* vm)
    {
        Blip blip = (Blip)wrenGetSlotDouble(vm, 1);
        int index = (int)wrenGetSlotDouble(vm, 2);

        HUD::SET_BLIP_CATEGORY(blip, index);
    }

    static void WREN_HUD_REMOVE_BLIP(WrenVM* vm)
    {
        Blip blip;

        HUD::REMOVE_BLIP(&blip);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_HUD_SET_BLIP_AS_FRIENDLY(WrenVM* vm)
    {
        Blip blip = (Blip)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        HUD::SET_BLIP_AS_FRIENDLY(blip, toggle);
    }

    static void WREN_HUD_PULSE_BLIP(WrenVM* vm)
    {
        Blip blip = (Blip)wrenGetSlotDouble(vm, 1);

        HUD::PULSE_BLIP(blip);
    }

    static void WREN_HUD_SHOW_NUMBER_ON_BLIP(WrenVM* vm)
    {
        Blip blip = (Blip)wrenGetSlotDouble(vm, 1);
        int number = (int)wrenGetSlotDouble(vm, 2);

        HUD::SHOW_NUMBER_ON_BLIP(blip, number);
    }

    static void WREN_HUD_HIDE_NUMBER_ON_BLIP(WrenVM* vm)
    {
        Blip blip = (Blip)wrenGetSlotDouble(vm, 1);

        HUD::HIDE_NUMBER_ON_BLIP(blip);
    }

    static void WREN_HUD_SHOW_HEIGHT_ON_BLIP(WrenVM* vm)
    {
        Blip blip = (Blip)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        HUD::SHOW_HEIGHT_ON_BLIP(blip, toggle);
    }

    static void WREN_HUD_SHOW_TICK_ON_BLIP(WrenVM* vm)
    {
        Blip blip = (Blip)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        HUD::SHOW_TICK_ON_BLIP(blip, toggle);
    }

    static void WREN_HUD_SHOW_GOLD_TICK_ON_BLIP(WrenVM* vm)
    {
        Blip blip = (Blip)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        HUD::SHOW_GOLD_TICK_ON_BLIP(blip, toggle);
    }

    static void WREN_HUD_SHOW_HEADING_INDICATOR_ON_BLIP(WrenVM* vm)
    {
        Blip blip = (Blip)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        HUD::SHOW_HEADING_INDICATOR_ON_BLIP(blip, toggle);
    }

    static void WREN_HUD_SHOW_OUTLINE_INDICATOR_ON_BLIP(WrenVM* vm)
    {
        Blip blip = (Blip)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        HUD::SHOW_OUTLINE_INDICATOR_ON_BLIP(blip, toggle);
    }

    static void WREN_HUD_SHOW_FRIEND_INDICATOR_ON_BLIP(WrenVM* vm)
    {
        Blip blip = (Blip)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        HUD::SHOW_FRIEND_INDICATOR_ON_BLIP(blip, toggle);
    }

    static void WREN_HUD_SHOW_CREW_INDICATOR_ON_BLIP(WrenVM* vm)
    {
        Blip blip = (Blip)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        HUD::SHOW_CREW_INDICATOR_ON_BLIP(blip, toggle);
    }

    static void WREN_HUD_SET_BLIP_EXTENDED_HEIGHT_THRESHOLD(WrenVM* vm)
    {
        Blip blip = (Blip)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        HUD::SET_BLIP_EXTENDED_HEIGHT_THRESHOLD(blip, toggle);
    }

    static void WREN_HUD_SET_BLIP_SHORT_HEIGHT_THRESHOLD(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        HUD::SET_BLIP_SHORT_HEIGHT_THRESHOLD(p0, p1);
    }

    static void WREN_HUD_SET_BLIP_USE_HEIGHT_INDICATOR_ON_EDGE(WrenVM* vm)
    {
        Blip blip = (Blip)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        HUD::SET_BLIP_USE_HEIGHT_INDICATOR_ON_EDGE(blip, p1);
    }

    static void WREN_HUD_SET_BLIP_AS_MINIMAL_ON_EDGE(WrenVM* vm)
    {
        Blip blip = (Blip)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        HUD::SET_BLIP_AS_MINIMAL_ON_EDGE(blip, toggle);
    }

    static void WREN_HUD_SET_RADIUS_BLIP_EDGE(WrenVM* vm)
    {
        Blip blip = (Blip)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        HUD::SET_RADIUS_BLIP_EDGE(blip, toggle);
    }

    static void WREN_HUD_DOES_BLIP_EXIST(WrenVM* vm)
    {
        Blip blip = (Blip)wrenGetSlotDouble(vm, 1);

        BOOL res = HUD::DOES_BLIP_EXIST(blip);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_HUD_SET_WAYPOINT_OFF(WrenVM* vm)
    {

        HUD::SET_WAYPOINT_OFF();
    }

    static void WREN_HUD_DELETE_WAYPOINTS_FROM_THIS_PLAYER(WrenVM* vm)
    {

        HUD::DELETE_WAYPOINTS_FROM_THIS_PLAYER();
    }

    static void WREN_HUD_REFRESH_WAYPOINT(WrenVM* vm)
    {

        HUD::REFRESH_WAYPOINT();
    }

    static void WREN_HUD_IS_WAYPOINT_ACTIVE(WrenVM* vm)
    {

        BOOL res = HUD::IS_WAYPOINT_ACTIVE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_HUD_SET_NEW_WAYPOINT(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);

        HUD::SET_NEW_WAYPOINT(x, y);
    }

    static void WREN_HUD_SET_BLIP_BRIGHT(WrenVM* vm)
    {
        Blip blip = (Blip)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        HUD::SET_BLIP_BRIGHT(blip, toggle);
    }

    static void WREN_HUD_SET_BLIP_SHOW_CONE(WrenVM* vm)
    {
        Blip blip = (Blip)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);
        int hudColorIndex = (int)wrenGetSlotDouble(vm, 3);

        HUD::SET_BLIP_SHOW_CONE(blip, toggle, hudColorIndex);
    }

    static void WREN_HUD_REMOVE_COP_BLIP_FROM_PED(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        HUD::REMOVE_COP_BLIP_FROM_PED(ped);
    }

    static void WREN_HUD_SETUP_FAKE_CONE_DATA(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);
        Any p5 = (Any)wrenGetSlotDouble(vm, 6);
        Any p6 = (Any)wrenGetSlotDouble(vm, 7);
        Any p7 = (Any)wrenGetSlotDouble(vm, 8);
        Any p8 = (Any)wrenGetSlotDouble(vm, 9);

        HUD::SETUP_FAKE_CONE_DATA(p0, p1, p2, p3, p4, p5, p6, p7, p8);
    }

    static void WREN_HUD_REMOVE_FAKE_CONE_DATA(WrenVM* vm)
    {
        Blip blip = (Blip)wrenGetSlotDouble(vm, 1);

        HUD::REMOVE_FAKE_CONE_DATA(blip);
    }

    static void WREN_HUD_CLEAR_FAKE_CONE_ARRAY(WrenVM* vm)
    {

        HUD::CLEAR_FAKE_CONE_ARRAY();
    }

    static void WREN_HUD_SET_MINIMAP_COMPONENT(WrenVM* vm)
    {
        int componentId = (int)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);
        int overrideColor = (int)wrenGetSlotDouble(vm, 3);

        Any res = HUD::SET_MINIMAP_COMPONENT(componentId, toggle, overrideColor);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_HUD_SET_MINIMAP_SONAR_SWEEP(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        HUD::SET_MINIMAP_SONAR_SWEEP(toggle);
    }

    static void WREN_HUD_SHOW_ACCOUNT_PICKER(WrenVM* vm)
    {

        HUD::SHOW_ACCOUNT_PICKER();
    }

    static void WREN_HUD_GET_MAIN_PLAYER_BLIP_ID(WrenVM* vm)
    {

        Blip res = HUD::GET_MAIN_PLAYER_BLIP_ID();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_HUD_SET_PM_WARNINGSCREEN_ACTIVE(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        HUD::SET_PM_WARNINGSCREEN_ACTIVE(p0);
    }

    static void WREN_HUD_HIDE_LOADING_ON_FADE_THIS_FRAME(WrenVM* vm)
    {

        HUD::HIDE_LOADING_ON_FADE_THIS_FRAME();
    }

    static void WREN_HUD_SET_RADAR_AS_INTERIOR_THIS_FRAME(WrenVM* vm)
    {
        Hash interior = (Hash)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        int z = (int)wrenGetSlotDouble(vm, 4);
        int zoom = (int)wrenGetSlotDouble(vm, 5);

        HUD::SET_RADAR_AS_INTERIOR_THIS_FRAME(interior, x, y, z, zoom);
    }

    static void WREN_HUD_SET_INSIDE_VERY_SMALL_INTERIOR(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        HUD::SET_INSIDE_VERY_SMALL_INTERIOR(toggle);
    }

    static void WREN_HUD_SET_INSIDE_VERY_LARGE_INTERIOR(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        HUD::SET_INSIDE_VERY_LARGE_INTERIOR(toggle);
    }

    static void WREN_HUD_SET_RADAR_AS_EXTERIOR_THIS_FRAME(WrenVM* vm)
    {

        HUD::SET_RADAR_AS_EXTERIOR_THIS_FRAME();
    }

    static void WREN_HUD_SET_FAKE_PAUSEMAP_PLAYER_POSITION_THIS_FRAME(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);

        HUD::SET_FAKE_PAUSEMAP_PLAYER_POSITION_THIS_FRAME(x, y);
    }

    static void WREN_HUD_SET_FAKE_GPS_PLAYER_POSITION_THIS_FRAME(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);

        HUD::SET_FAKE_GPS_PLAYER_POSITION_THIS_FRAME(p0, p1, p2);
    }

    static void WREN_HUD_IS_PAUSEMAP_IN_INTERIOR_MODE(WrenVM* vm)
    {

        BOOL res = HUD::IS_PAUSEMAP_IN_INTERIOR_MODE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_HUD_HIDE_MINIMAP_EXTERIOR_MAP_THIS_FRAME(WrenVM* vm)
    {

        HUD::HIDE_MINIMAP_EXTERIOR_MAP_THIS_FRAME();
    }

    static void WREN_HUD_HIDE_MINIMAP_INTERIOR_MAP_THIS_FRAME(WrenVM* vm)
    {

        HUD::HIDE_MINIMAP_INTERIOR_MAP_THIS_FRAME();
    }

    static void WREN_HUD_SET_USE_ISLAND_MAP(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        HUD::SET_USE_ISLAND_MAP(toggle);
    }

    static void WREN_HUD_DONT_TILT_MINIMAP_THIS_FRAME(WrenVM* vm)
    {

        HUD::DONT_TILT_MINIMAP_THIS_FRAME();
    }

    static void WREN_HUD_DONT_ZOOM_MINIMAP_WHEN_SNIPING_THIS_FRAME(WrenVM* vm)
    {

        HUD::DONT_ZOOM_MINIMAP_WHEN_SNIPING_THIS_FRAME();
    }

    static void WREN_HUD_SET_WIDESCREEN_FORMAT(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        HUD::SET_WIDESCREEN_FORMAT(p0);
    }

    static void WREN_HUD_DISPLAY_AREA_NAME(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        HUD::DISPLAY_AREA_NAME(toggle);
    }

    static void WREN_HUD_DISPLAY_CASH(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        HUD::DISPLAY_CASH(toggle);
    }

    static void WREN_HUD_USE_FAKE_MP_CASH(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        HUD::USE_FAKE_MP_CASH(toggle);
    }

    static void WREN_HUD_CHANGE_FAKE_MP_CASH(WrenVM* vm)
    {
        int cash = (int)wrenGetSlotDouble(vm, 1);
        int bank = (int)wrenGetSlotDouble(vm, 2);

        HUD::CHANGE_FAKE_MP_CASH(cash, bank);
    }

    static void WREN_HUD_DISPLAY_AMMO_THIS_FRAME(WrenVM* vm)
    {
        BOOL display = (BOOL)wrenGetSlotBool(vm, 1);

        HUD::DISPLAY_AMMO_THIS_FRAME(display);
    }

    static void WREN_HUD_DISPLAY_SNIPER_SCOPE_THIS_FRAME(WrenVM* vm)
    {

        HUD::DISPLAY_SNIPER_SCOPE_THIS_FRAME();
    }

    static void WREN_HUD_HIDE_HUD_AND_RADAR_THIS_FRAME(WrenVM* vm)
    {

        HUD::HIDE_HUD_AND_RADAR_THIS_FRAME();
    }

    static void WREN_HUD_ALLOW_DISPLAY_OF_MULTIPLAYER_CASH_TEXT(WrenVM* vm)
    {
        BOOL allow = (BOOL)wrenGetSlotBool(vm, 1);

        HUD::ALLOW_DISPLAY_OF_MULTIPLAYER_CASH_TEXT(allow);
    }

    static void WREN_HUD_SET_MULTIPLAYER_WALLET_CASH(WrenVM* vm)
    {

        HUD::SET_MULTIPLAYER_WALLET_CASH();
    }

    static void WREN_HUD_REMOVE_MULTIPLAYER_WALLET_CASH(WrenVM* vm)
    {

        HUD::REMOVE_MULTIPLAYER_WALLET_CASH();
    }

    static void WREN_HUD_SET_MULTIPLAYER_BANK_CASH(WrenVM* vm)
    {

        HUD::SET_MULTIPLAYER_BANK_CASH();
    }

    static void WREN_HUD_REMOVE_MULTIPLAYER_BANK_CASH(WrenVM* vm)
    {

        HUD::REMOVE_MULTIPLAYER_BANK_CASH();
    }

    static void WREN_HUD_SET_MULTIPLAYER_HUD_CASH(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);

        HUD::SET_MULTIPLAYER_HUD_CASH(p0, p1);
    }

    static void WREN_HUD_REMOVE_MULTIPLAYER_HUD_CASH(WrenVM* vm)
    {

        HUD::REMOVE_MULTIPLAYER_HUD_CASH();
    }

    static void WREN_HUD_HIDE_HELP_TEXT_THIS_FRAME(WrenVM* vm)
    {

        HUD::HIDE_HELP_TEXT_THIS_FRAME();
    }

    static void WREN_HUD_IS_IME_IN_PROGRESS(WrenVM* vm)
    {

        BOOL res = HUD::IS_IME_IN_PROGRESS();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_HUD_DISPLAY_HELP_TEXT_THIS_FRAME(WrenVM* vm)
    {
        const char* message = wrenGetSlotString(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        HUD::DISPLAY_HELP_TEXT_THIS_FRAME(message, p1);
    }

    static void WREN_HUD_HUD_FORCE_WEAPON_WHEEL(WrenVM* vm)
    {
        BOOL show = (BOOL)wrenGetSlotBool(vm, 1);

        HUD::HUD_FORCE_WEAPON_WHEEL(show);
    }

    static void WREN_HUD_HUD_FORCE_SPECIAL_VEHICLE_WEAPON_WHEEL(WrenVM* vm)
    {

        HUD::HUD_FORCE_SPECIAL_VEHICLE_WEAPON_WHEEL();
    }

    static void WREN_HUD_HUD_SUPPRESS_WEAPON_WHEEL_RESULTS_THIS_FRAME(WrenVM* vm)
    {

        HUD::HUD_SUPPRESS_WEAPON_WHEEL_RESULTS_THIS_FRAME();
    }

    static void WREN_HUD_HUD_GET_WEAPON_WHEEL_CURRENTLY_HIGHLIGHTED(WrenVM* vm)
    {

        Hash res = HUD::HUD_GET_WEAPON_WHEEL_CURRENTLY_HIGHLIGHTED();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_HUD_HUD_SET_WEAPON_WHEEL_TOP_SLOT(WrenVM* vm)
    {
        Hash weaponHash = (Hash)wrenGetSlotDouble(vm, 1);

        HUD::HUD_SET_WEAPON_WHEEL_TOP_SLOT(weaponHash);
    }

    static void WREN_HUD_HUD_GET_WEAPON_WHEEL_TOP_SLOT(WrenVM* vm)
    {
        int weaponTypeIndex = (int)wrenGetSlotDouble(vm, 1);

        Hash res = HUD::HUD_GET_WEAPON_WHEEL_TOP_SLOT(weaponTypeIndex);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_HUD_HUD_SHOWING_CHARACTER_SWITCH_SELECTION(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        HUD::HUD_SHOWING_CHARACTER_SWITCH_SELECTION(toggle);
    }

    static void WREN_HUD_SET_GPS_FLAGS(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);

        HUD::SET_GPS_FLAGS(p0, p1);
    }

    static void WREN_HUD_CLEAR_GPS_FLAGS(WrenVM* vm)
    {

        HUD::CLEAR_GPS_FLAGS();
    }

    static void WREN_HUD_SET_RACE_TRACK_RENDER(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        HUD::SET_RACE_TRACK_RENDER(toggle);
    }

    static void WREN_HUD_CLEAR_GPS_RACE_TRACK(WrenVM* vm)
    {

        HUD::CLEAR_GPS_RACE_TRACK();
    }

    static void WREN_HUD_START_GPS_CUSTOM_ROUTE(WrenVM* vm)
    {
        int hudColor = (int)wrenGetSlotDouble(vm, 1);
        BOOL displayOnFoot = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL followPlayer = (BOOL)wrenGetSlotBool(vm, 3);

        HUD::START_GPS_CUSTOM_ROUTE(hudColor, displayOnFoot, followPlayer);
    }

    static void WREN_HUD_ADD_POINT_TO_GPS_CUSTOM_ROUTE(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);

        HUD::ADD_POINT_TO_GPS_CUSTOM_ROUTE(x, y, z);
    }

    static void WREN_HUD_SET_GPS_CUSTOM_ROUTE_RENDER(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);
        int radarThickness = (int)wrenGetSlotDouble(vm, 2);
        int mapThickness = (int)wrenGetSlotDouble(vm, 3);

        HUD::SET_GPS_CUSTOM_ROUTE_RENDER(toggle, radarThickness, mapThickness);
    }

    static void WREN_HUD_CLEAR_GPS_CUSTOM_ROUTE(WrenVM* vm)
    {

        HUD::CLEAR_GPS_CUSTOM_ROUTE();
    }

    static void WREN_HUD_START_GPS_MULTI_ROUTE(WrenVM* vm)
    {
        int hudColor = (int)wrenGetSlotDouble(vm, 1);
        BOOL routeFromPlayer = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL displayOnFoot = (BOOL)wrenGetSlotBool(vm, 3);

        HUD::START_GPS_MULTI_ROUTE(hudColor, routeFromPlayer, displayOnFoot);
    }

    static void WREN_HUD_ADD_POINT_TO_GPS_MULTI_ROUTE(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);

        HUD::ADD_POINT_TO_GPS_MULTI_ROUTE(x, y, z);
    }

    static void WREN_HUD_SET_GPS_MULTI_ROUTE_RENDER(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        HUD::SET_GPS_MULTI_ROUTE_RENDER(toggle);
    }

    static void WREN_HUD_CLEAR_GPS_MULTI_ROUTE(WrenVM* vm)
    {

        HUD::CLEAR_GPS_MULTI_ROUTE();
    }

    static void WREN_HUD_CLEAR_GPS_PLAYER_WAYPOINT(WrenVM* vm)
    {

        HUD::CLEAR_GPS_PLAYER_WAYPOINT();
    }

    static void WREN_HUD_SET_GPS_FLASHES(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        HUD::SET_GPS_FLASHES(toggle);
    }

    static void WREN_HUD_SET_PLAYER_ICON_COLOUR(WrenVM* vm)
    {
        int color = (int)wrenGetSlotDouble(vm, 1);

        HUD::SET_PLAYER_ICON_COLOUR(color);
    }

    static void WREN_HUD_FLASH_MINIMAP_DISPLAY(WrenVM* vm)
    {

        HUD::FLASH_MINIMAP_DISPLAY();
    }

    static void WREN_HUD_FLASH_MINIMAP_DISPLAY_WITH_COLOR(WrenVM* vm)
    {
        int hudColorIndex = (int)wrenGetSlotDouble(vm, 1);

        HUD::FLASH_MINIMAP_DISPLAY_WITH_COLOR(hudColorIndex);
    }

    static void WREN_HUD_TOGGLE_STEALTH_RADAR(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        HUD::TOGGLE_STEALTH_RADAR(toggle);
    }

    static void WREN_HUD_SET_MINIMAP_IN_SPECTATOR_MODE(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);
        Ped ped = (Ped)wrenGetSlotDouble(vm, 2);

        HUD::SET_MINIMAP_IN_SPECTATOR_MODE(toggle, ped);
    }

    static void WREN_HUD_SET_MISSION_NAME(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);
        const char* name = wrenGetSlotString(vm, 2);

        HUD::SET_MISSION_NAME(p0, name);
    }

    static void WREN_HUD_SET_MISSION_NAME_FOR_UGC_MISSION(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);
        const char* name = wrenGetSlotString(vm, 2);

        HUD::SET_MISSION_NAME_FOR_UGC_MISSION(p0, name);
    }

    static void WREN_HUD_SET_DESCRIPTION_FOR_UGC_MISSION_EIGHT_STRINGS(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);
        Any p1;
        Any p2;
        Any p3;
        Any p4;
        Any p5;
        Any p6;
        Any p7;
        Any p8;

        HUD::SET_DESCRIPTION_FOR_UGC_MISSION_EIGHT_STRINGS(p0, &p1, &p2, &p3, &p4, &p5, &p6, &p7, &p8);

        wrenEnsureSlots(vm, 16);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, p1);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p2);
        wrenInsertInList(vm, 0, 1, 2);

        wrenSetSlotDouble(vm, 3, p3);
        wrenInsertInList(vm, 0, 2, 3);

        wrenSetSlotDouble(vm, 4, p4);
        wrenInsertInList(vm, 0, 3, 4);

        wrenSetSlotDouble(vm, 5, p5);
        wrenInsertInList(vm, 0, 4, 5);

        wrenSetSlotDouble(vm, 6, p6);
        wrenInsertInList(vm, 0, 5, 6);

        wrenSetSlotDouble(vm, 7, p7);
        wrenInsertInList(vm, 0, 6, 7);

        wrenSetSlotDouble(vm, 8, p8);
        wrenInsertInList(vm, 0, 7, 8);

    }

    static void WREN_HUD_SET_MINIMAP_BLOCK_WAYPOINT(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        HUD::SET_MINIMAP_BLOCK_WAYPOINT(toggle);
    }

    static void WREN_HUD_SET_MINIMAP_IN_PROLOGUE(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        HUD::SET_MINIMAP_IN_PROLOGUE(toggle);
    }

    static void WREN_HUD_SET_MINIMAP_HIDE_FOW(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        HUD::SET_MINIMAP_HIDE_FOW(toggle);
    }

    static void WREN_HUD_GET_MINIMAP_FOW_DISCOVERY_RATIO(WrenVM* vm)
    {

        float res = HUD::GET_MINIMAP_FOW_DISCOVERY_RATIO();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_HUD_GET_MINIMAP_FOW_COORDINATE_IS_REVEALED(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);

        BOOL res = HUD::GET_MINIMAP_FOW_COORDINATE_IS_REVEALED(x, y, z);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_HUD_SET_MINIMAP_FOW_DO_NOT_UPDATE(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        HUD::SET_MINIMAP_FOW_DO_NOT_UPDATE(p0);
    }

    static void WREN_HUD_SET_MINIMAP_FOW_REVEAL_COORDINATE(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);

        HUD::SET_MINIMAP_FOW_REVEAL_COORDINATE(x, y, z);
    }

    static void WREN_HUD_SET_MINIMAP_GOLF_COURSE(WrenVM* vm)
    {
        int hole = (int)wrenGetSlotDouble(vm, 1);

        HUD::SET_MINIMAP_GOLF_COURSE(hole);
    }

    static void WREN_HUD_SET_MINIMAP_GOLF_COURSE_OFF(WrenVM* vm)
    {

        HUD::SET_MINIMAP_GOLF_COURSE_OFF();
    }

    static void WREN_HUD_LOCK_MINIMAP_ANGLE(WrenVM* vm)
    {
        int angle = (int)wrenGetSlotDouble(vm, 1);

        HUD::LOCK_MINIMAP_ANGLE(angle);
    }

    static void WREN_HUD_UNLOCK_MINIMAP_ANGLE(WrenVM* vm)
    {

        HUD::UNLOCK_MINIMAP_ANGLE();
    }

    static void WREN_HUD_LOCK_MINIMAP_POSITION(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);

        HUD::LOCK_MINIMAP_POSITION(x, y);
    }

    static void WREN_HUD_UNLOCK_MINIMAP_POSITION(WrenVM* vm)
    {

        HUD::UNLOCK_MINIMAP_POSITION();
    }

    static void WREN_HUD_SET_FAKE_MINIMAP_MAX_ALTIMETER_HEIGHT(WrenVM* vm)
    {
        float altitude = (float)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);

        HUD::SET_FAKE_MINIMAP_MAX_ALTIMETER_HEIGHT(altitude, p1, p2);
    }

    static void WREN_HUD_SET_HEALTH_HUD_DISPLAY_VALUES(WrenVM* vm)
    {
        int health = (int)wrenGetSlotDouble(vm, 1);
        int capacity = (int)wrenGetSlotDouble(vm, 2);
        BOOL wasAdded = (BOOL)wrenGetSlotBool(vm, 3);

        HUD::SET_HEALTH_HUD_DISPLAY_VALUES(health, capacity, wasAdded);
    }

    static void WREN_HUD_SET_MAX_HEALTH_HUD_DISPLAY(WrenVM* vm)
    {
        int maximumValue = (int)wrenGetSlotDouble(vm, 1);

        HUD::SET_MAX_HEALTH_HUD_DISPLAY(maximumValue);
    }

    static void WREN_HUD_SET_MAX_ARMOUR_HUD_DISPLAY(WrenVM* vm)
    {
        int maximumValue = (int)wrenGetSlotDouble(vm, 1);

        HUD::SET_MAX_ARMOUR_HUD_DISPLAY(maximumValue);
    }

    static void WREN_HUD_SET_BIGMAP_ACTIVE(WrenVM* vm)
    {
        BOOL toggleBigMap = (BOOL)wrenGetSlotBool(vm, 1);
        BOOL showFullMap = (BOOL)wrenGetSlotBool(vm, 2);

        HUD::SET_BIGMAP_ACTIVE(toggleBigMap, showFullMap);
    }

    static void WREN_HUD_IS_HUD_COMPONENT_ACTIVE(WrenVM* vm)
    {
        int id = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = HUD::IS_HUD_COMPONENT_ACTIVE(id);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_HUD_IS_SCRIPTED_HUD_COMPONENT_ACTIVE(WrenVM* vm)
    {
        int id = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = HUD::IS_SCRIPTED_HUD_COMPONENT_ACTIVE(id);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_HUD_HIDE_SCRIPTED_HUD_COMPONENT_THIS_FRAME(WrenVM* vm)
    {
        int id = (int)wrenGetSlotDouble(vm, 1);

        HUD::HIDE_SCRIPTED_HUD_COMPONENT_THIS_FRAME(id);
    }

    static void WREN_HUD_SHOW_SCRIPTED_HUD_COMPONENT_THIS_FRAME(WrenVM* vm)
    {
        int id = (int)wrenGetSlotDouble(vm, 1);

        HUD::SHOW_SCRIPTED_HUD_COMPONENT_THIS_FRAME(id);
    }

    static void WREN_HUD_IS_SCRIPTED_HUD_COMPONENT_HIDDEN_THIS_FRAME(WrenVM* vm)
    {
        int id = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = HUD::IS_SCRIPTED_HUD_COMPONENT_HIDDEN_THIS_FRAME(id);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_HUD_HIDE_HUD_COMPONENT_THIS_FRAME(WrenVM* vm)
    {
        int id = (int)wrenGetSlotDouble(vm, 1);

        HUD::HIDE_HUD_COMPONENT_THIS_FRAME(id);
    }

    static void WREN_HUD_SHOW_HUD_COMPONENT_THIS_FRAME(WrenVM* vm)
    {
        int id = (int)wrenGetSlotDouble(vm, 1);

        HUD::SHOW_HUD_COMPONENT_THIS_FRAME(id);
    }

    static void WREN_HUD_HIDE_STREET_AND_CAR_NAMES_THIS_FRAME(WrenVM* vm)
    {

        HUD::HIDE_STREET_AND_CAR_NAMES_THIS_FRAME();
    }

    static void WREN_HUD_RESET_RETICULE_VALUES(WrenVM* vm)
    {

        HUD::RESET_RETICULE_VALUES();
    }

    static void WREN_HUD_RESET_HUD_COMPONENT_VALUES(WrenVM* vm)
    {
        int id = (int)wrenGetSlotDouble(vm, 1);

        HUD::RESET_HUD_COMPONENT_VALUES(id);
    }

    static void WREN_HUD_SET_HUD_COMPONENT_POSITION(WrenVM* vm)
    {
        int id = (int)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);

        HUD::SET_HUD_COMPONENT_POSITION(id, x, y);
    }

    static void WREN_HUD_GET_HUD_COMPONENT_POSITION(WrenVM* vm)
    {
        int id = (int)wrenGetSlotDouble(vm, 1);

        Vector3 res = HUD::GET_HUD_COMPONENT_POSITION(id);

        wrenEnsureSlots(vm, 1);

        wrenGetVariable(vm, "natives", "Vector3", 0);
        Vector3* wren_res = (Vector3*)wrenSetSlotNewForeign(vm, 0, 0, sizeof(Vector3));
        wren_res->x = res.x;
        wren_res->y = res.y;
        wren_res->z = res.z;
    }

    static void WREN_HUD_CLEAR_REMINDER_MESSAGE(WrenVM* vm)
    {

        HUD::CLEAR_REMINDER_MESSAGE();
    }

    static void WREN_HUD_GET_HUD_SCREEN_POSITION_FROM_WORLD_POSITION(WrenVM* vm)
    {
        float worldX = (float)wrenGetSlotDouble(vm, 1);
        float worldY = (float)wrenGetSlotDouble(vm, 2);
        float worldZ = (float)wrenGetSlotDouble(vm, 3);
        float screenX;
        float screenY;

        BOOL res = HUD::GET_HUD_SCREEN_POSITION_FROM_WORLD_POSITION(worldX, worldY, worldZ, &screenX, &screenY);

        wrenEnsureSlots(vm, 6);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, screenX);
        wrenInsertInList(vm, 0, 1, 2);

        wrenSetSlotDouble(vm, 3, screenY);
        wrenInsertInList(vm, 0, 2, 3);

    }

    static void WREN_HUD_OPEN_REPORTUGC_MENU(WrenVM* vm)
    {

        HUD::OPEN_REPORTUGC_MENU();
    }

    static void WREN_HUD_FORCE_CLOSE_REPORTUGC_MENU(WrenVM* vm)
    {

        HUD::FORCE_CLOSE_REPORTUGC_MENU();
    }

    static void WREN_HUD_IS_REPORTUGC_MENU_OPEN(WrenVM* vm)
    {

        BOOL res = HUD::IS_REPORTUGC_MENU_OPEN();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_HUD_IS_FLOATING_HELP_TEXT_ON_SCREEN(WrenVM* vm)
    {
        int hudIndex = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = HUD::IS_FLOATING_HELP_TEXT_ON_SCREEN(hudIndex);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_HUD_SET_FLOATING_HELP_TEXT_SCREEN_POSITION(WrenVM* vm)
    {
        int hudIndex = (int)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);

        HUD::SET_FLOATING_HELP_TEXT_SCREEN_POSITION(hudIndex, x, y);
    }

    static void WREN_HUD_SET_FLOATING_HELP_TEXT_WORLD_POSITION(WrenVM* vm)
    {
        int hudIndex = (int)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);

        HUD::SET_FLOATING_HELP_TEXT_WORLD_POSITION(hudIndex, x, y, z);
    }

    static void WREN_HUD_SET_FLOATING_HELP_TEXT_TO_ENTITY(WrenVM* vm)
    {
        int hudIndex = (int)wrenGetSlotDouble(vm, 1);
        Entity entity = (Entity)wrenGetSlotDouble(vm, 2);
        float offsetX = (float)wrenGetSlotDouble(vm, 3);
        float offsetY = (float)wrenGetSlotDouble(vm, 4);

        HUD::SET_FLOATING_HELP_TEXT_TO_ENTITY(hudIndex, entity, offsetX, offsetY);
    }

    static void WREN_HUD_SET_FLOATING_HELP_TEXT_STYLE(WrenVM* vm)
    {
        int hudIndex = (int)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);
        int p2 = (int)wrenGetSlotDouble(vm, 3);
        int p3 = (int)wrenGetSlotDouble(vm, 4);
        int p4 = (int)wrenGetSlotDouble(vm, 5);
        int p5 = (int)wrenGetSlotDouble(vm, 6);

        HUD::SET_FLOATING_HELP_TEXT_STYLE(hudIndex, p1, p2, p3, p4, p5);
    }

    static void WREN_HUD_CLEAR_FLOATING_HELP(WrenVM* vm)
    {
        int hudIndex = (int)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        HUD::CLEAR_FLOATING_HELP(hudIndex, p1);
    }

    static void WREN_HUD_CREATE_MP_GAMER_TAG_WITH_CREW_COLOR(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        const char* username = wrenGetSlotString(vm, 2);
        BOOL pointedClanTag = (BOOL)wrenGetSlotBool(vm, 3);
        BOOL isRockstarClan = (BOOL)wrenGetSlotBool(vm, 4);
        const char* clanTag = wrenGetSlotString(vm, 5);
        int clanFlag = (int)wrenGetSlotDouble(vm, 6);
        int r = (int)wrenGetSlotDouble(vm, 7);
        int g = (int)wrenGetSlotDouble(vm, 8);
        int b = (int)wrenGetSlotDouble(vm, 9);

        HUD::CREATE_MP_GAMER_TAG_WITH_CREW_COLOR(player, username, pointedClanTag, isRockstarClan, clanTag, clanFlag, r, g, b);
    }

    static void WREN_HUD_IS_MP_GAMER_TAG_MOVIE_ACTIVE(WrenVM* vm)
    {

        BOOL res = HUD::IS_MP_GAMER_TAG_MOVIE_ACTIVE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_HUD_CREATE_FAKE_MP_GAMER_TAG(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        const char* username = wrenGetSlotString(vm, 2);
        BOOL pointedClanTag = (BOOL)wrenGetSlotBool(vm, 3);
        BOOL isRockstarClan = (BOOL)wrenGetSlotBool(vm, 4);
        const char* clanTag = wrenGetSlotString(vm, 5);
        int clanFlag = (int)wrenGetSlotDouble(vm, 6);

        int res = HUD::CREATE_FAKE_MP_GAMER_TAG(ped, username, pointedClanTag, isRockstarClan, clanTag, clanFlag);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_HUD_REMOVE_MP_GAMER_TAG(WrenVM* vm)
    {
        int gamerTagId = (int)wrenGetSlotDouble(vm, 1);

        HUD::REMOVE_MP_GAMER_TAG(gamerTagId);
    }

    static void WREN_HUD_IS_MP_GAMER_TAG_ACTIVE(WrenVM* vm)
    {
        int gamerTagId = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = HUD::IS_MP_GAMER_TAG_ACTIVE(gamerTagId);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_HUD_IS_MP_GAMER_TAG_FREE(WrenVM* vm)
    {
        int gamerTagId = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = HUD::IS_MP_GAMER_TAG_FREE(gamerTagId);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_HUD_SET_MP_GAMER_TAG_VISIBILITY(WrenVM* vm)
    {
        int gamerTagId = (int)wrenGetSlotDouble(vm, 1);
        int component = (int)wrenGetSlotDouble(vm, 2);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        HUD::SET_MP_GAMER_TAG_VISIBILITY(gamerTagId, component, toggle, p3);
    }

    static void WREN_HUD_SET_ALL_MP_GAMER_TAGS_VISIBILITY(WrenVM* vm)
    {
        int gamerTagId = (int)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        HUD::SET_ALL_MP_GAMER_TAGS_VISIBILITY(gamerTagId, toggle);
    }

    static void WREN_HUD_SET_MP_GAMER_TAGS_SHOULD_USE_VEHICLE_HEALTH(WrenVM* vm)
    {
        int gamerTagId = (int)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        HUD::SET_MP_GAMER_TAGS_SHOULD_USE_VEHICLE_HEALTH(gamerTagId, toggle);
    }

    static void WREN_HUD_SET_MP_GAMER_TAGS_SHOULD_USE_POINTS_HEALTH(WrenVM* vm)
    {
        int gamerTagId = (int)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        HUD::SET_MP_GAMER_TAGS_SHOULD_USE_POINTS_HEALTH(gamerTagId, toggle);
    }

    static void WREN_HUD_SET_MP_GAMER_TAGS_POINT_HEALTH(WrenVM* vm)
    {
        int gamerTagId = (int)wrenGetSlotDouble(vm, 1);
        int value = (int)wrenGetSlotDouble(vm, 2);
        int maximumValue = (int)wrenGetSlotDouble(vm, 3);

        HUD::SET_MP_GAMER_TAGS_POINT_HEALTH(gamerTagId, value, maximumValue);
    }

    static void WREN_HUD_SET_MP_GAMER_TAG_COLOUR(WrenVM* vm)
    {
        int gamerTagId = (int)wrenGetSlotDouble(vm, 1);
        int component = (int)wrenGetSlotDouble(vm, 2);
        int hudColorIndex = (int)wrenGetSlotDouble(vm, 3);

        HUD::SET_MP_GAMER_TAG_COLOUR(gamerTagId, component, hudColorIndex);
    }

    static void WREN_HUD_SET_MP_GAMER_TAG_HEALTH_BAR_COLOUR(WrenVM* vm)
    {
        int gamerTagId = (int)wrenGetSlotDouble(vm, 1);
        int hudColorIndex = (int)wrenGetSlotDouble(vm, 2);

        HUD::SET_MP_GAMER_TAG_HEALTH_BAR_COLOUR(gamerTagId, hudColorIndex);
    }

    static void WREN_HUD_SET_MP_GAMER_TAG_ALPHA(WrenVM* vm)
    {
        int gamerTagId = (int)wrenGetSlotDouble(vm, 1);
        int component = (int)wrenGetSlotDouble(vm, 2);
        int alpha = (int)wrenGetSlotDouble(vm, 3);

        HUD::SET_MP_GAMER_TAG_ALPHA(gamerTagId, component, alpha);
    }

    static void WREN_HUD_SET_MP_GAMER_TAG_WANTED_LEVEL(WrenVM* vm)
    {
        int gamerTagId = (int)wrenGetSlotDouble(vm, 1);
        int wantedlvl = (int)wrenGetSlotDouble(vm, 2);

        HUD::SET_MP_GAMER_TAG_WANTED_LEVEL(gamerTagId, wantedlvl);
    }

    static void WREN_HUD_SET_MP_GAMER_TAG_NUM_PACKAGES(WrenVM* vm)
    {
        int gamerTagId = (int)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);

        HUD::SET_MP_GAMER_TAG_NUM_PACKAGES(gamerTagId, p1);
    }

    static void WREN_HUD_SET_MP_GAMER_TAG_NAME(WrenVM* vm)
    {
        int gamerTagId = (int)wrenGetSlotDouble(vm, 1);
        const char* string = wrenGetSlotString(vm, 2);

        HUD::SET_MP_GAMER_TAG_NAME(gamerTagId, string);
    }

    static void WREN_HUD_IS_UPDATING_MP_GAMER_TAG_NAME_AND_CREW_DETAILS(WrenVM* vm)
    {
        int gamerTagId = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = HUD::IS_UPDATING_MP_GAMER_TAG_NAME_AND_CREW_DETAILS(gamerTagId);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_HUD_SET_MP_GAMER_TAG_BIG_TEXT(WrenVM* vm)
    {
        int gamerTagId = (int)wrenGetSlotDouble(vm, 1);
        const char* string = wrenGetSlotString(vm, 2);

        HUD::SET_MP_GAMER_TAG_BIG_TEXT(gamerTagId, string);
    }

    static void WREN_HUD_GET_CURRENT_WEBPAGE_ID(WrenVM* vm)
    {

        int res = HUD::GET_CURRENT_WEBPAGE_ID();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_HUD_GET_CURRENT_WEBSITE_ID(WrenVM* vm)
    {

        int res = HUD::GET_CURRENT_WEBSITE_ID();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_HUD_GET_GLOBAL_ACTIONSCRIPT_FLAG(WrenVM* vm)
    {
        int flagIndex = (int)wrenGetSlotDouble(vm, 1);

        int res = HUD::GET_GLOBAL_ACTIONSCRIPT_FLAG(flagIndex);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_HUD_RESET_GLOBAL_ACTIONSCRIPT_FLAG(WrenVM* vm)
    {
        int flagIndex = (int)wrenGetSlotDouble(vm, 1);

        HUD::RESET_GLOBAL_ACTIONSCRIPT_FLAG(flagIndex);
    }

    static void WREN_HUD_IS_WARNING_MESSAGE_READY_FOR_CONTROL(WrenVM* vm)
    {

        BOOL res = HUD::IS_WARNING_MESSAGE_READY_FOR_CONTROL();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_HUD_SET_WARNING_MESSAGE(WrenVM* vm)
    {
        const char* titleMsg = wrenGetSlotString(vm, 1);
        int flags = (int)wrenGetSlotDouble(vm, 2);
        const char* promptMsg = wrenGetSlotString(vm, 3);
        BOOL p3 = (BOOL)wrenGetSlotBool(vm, 4);
        int p4 = (int)wrenGetSlotDouble(vm, 5);
        const char* p5 = wrenGetSlotString(vm, 6);
        const char* p6 = wrenGetSlotString(vm, 7);
        BOOL showBackground = (BOOL)wrenGetSlotBool(vm, 8);
        int errorCode = (int)wrenGetSlotDouble(vm, 9);

        HUD::SET_WARNING_MESSAGE(titleMsg, flags, promptMsg, p3, p4, p5, p6, showBackground, errorCode);
    }

    static void WREN_HUD_SET_WARNING_MESSAGE_WITH_HEADER(WrenVM* vm)
    {
        const char* entryHeader = wrenGetSlotString(vm, 1);
        const char* entryLine1 = wrenGetSlotString(vm, 2);
        int instructionalKey = (int)wrenGetSlotDouble(vm, 3);
        const char* entryLine2 = wrenGetSlotString(vm, 4);
        BOOL p4 = (BOOL)wrenGetSlotBool(vm, 5);
        Any p5 = (Any)wrenGetSlotDouble(vm, 6);
        Any showBackground;
        Any p7;
        BOOL p8 = (BOOL)wrenGetSlotBool(vm, 7);
        Any p9 = (Any)wrenGetSlotDouble(vm, 8);

        HUD::SET_WARNING_MESSAGE_WITH_HEADER(entryHeader, entryLine1, instructionalKey, entryLine2, p4, p5, &showBackground, &p7, p8, p9);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, showBackground);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p7);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_HUD_SET_WARNING_MESSAGE_WITH_HEADER_AND_SUBSTRING_FLAGS(WrenVM* vm)
    {
        const char* entryHeader = wrenGetSlotString(vm, 1);
        const char* entryLine1 = wrenGetSlotString(vm, 2);
        int instructionalKey = (int)wrenGetSlotDouble(vm, 3);
        const char* entryLine2 = wrenGetSlotString(vm, 4);
        BOOL p4 = (BOOL)wrenGetSlotBool(vm, 5);
        Any p5 = (Any)wrenGetSlotDouble(vm, 6);
        Any additionalIntInfo = (Any)wrenGetSlotDouble(vm, 7);
        const char* additionalTextInfoLine1 = wrenGetSlotString(vm, 8);
        const char* additionalTextInfoLine2 = wrenGetSlotString(vm, 9);
        BOOL showBackground = (BOOL)wrenGetSlotBool(vm, 10);
        int errorCode = (int)wrenGetSlotDouble(vm, 11);

        HUD::SET_WARNING_MESSAGE_WITH_HEADER_AND_SUBSTRING_FLAGS(entryHeader, entryLine1, instructionalKey, entryLine2, p4, p5, additionalIntInfo, additionalTextInfoLine1, additionalTextInfoLine2, showBackground, errorCode);
    }

    static void WREN_HUD_SET_WARNING_MESSAGE_WITH_HEADER_EXTENDED(WrenVM* vm)
    {
        const char* entryHeader = wrenGetSlotString(vm, 1);
        const char* entryLine1 = wrenGetSlotString(vm, 2);
        int flags = (int)wrenGetSlotDouble(vm, 3);
        const char* entryLine2 = wrenGetSlotString(vm, 4);
        BOOL p4 = (BOOL)wrenGetSlotBool(vm, 5);
        Any p5 = (Any)wrenGetSlotDouble(vm, 6);
        Any p6;
        Any p7;
        BOOL showBg = (BOOL)wrenGetSlotBool(vm, 7);
        Any p9 = (Any)wrenGetSlotDouble(vm, 8);
        Any p10 = (Any)wrenGetSlotDouble(vm, 9);

        HUD::SET_WARNING_MESSAGE_WITH_HEADER_EXTENDED(entryHeader, entryLine1, flags, entryLine2, p4, p5, &p6, &p7, showBg, p9, p10);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, p6);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p7);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_HUD_SET_WARNING_MESSAGE_WITH_HEADER_AND_SUBSTRING_FLAGS_EXTENDED(WrenVM* vm)
    {
        const char* labelTitle = wrenGetSlotString(vm, 1);
        const char* labelMessage = wrenGetSlotString(vm, 2);
        int p2 = (int)wrenGetSlotDouble(vm, 3);
        int p3 = (int)wrenGetSlotDouble(vm, 4);
        const char* labelMessage2 = wrenGetSlotString(vm, 5);
        BOOL p5 = (BOOL)wrenGetSlotBool(vm, 6);
        int p6 = (int)wrenGetSlotDouble(vm, 7);
        int p7 = (int)wrenGetSlotDouble(vm, 8);
        const char* p8 = wrenGetSlotString(vm, 9);
        const char* p9 = wrenGetSlotString(vm, 10);
        BOOL background = (BOOL)wrenGetSlotBool(vm, 11);
        int errorCode = (int)wrenGetSlotDouble(vm, 12);

        HUD::SET_WARNING_MESSAGE_WITH_HEADER_AND_SUBSTRING_FLAGS_EXTENDED(labelTitle, labelMessage, p2, p3, labelMessage2, p5, p6, p7, p8, p9, background, errorCode);
    }

    static void WREN_HUD_GET_WARNING_SCREEN_MESSAGE_HASH(WrenVM* vm)
    {

        Hash res = HUD::GET_WARNING_SCREEN_MESSAGE_HASH();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_HUD_SET_WARNING_MESSAGE_OPTION_ITEMS(WrenVM* vm)
    {
        int index = (int)wrenGetSlotDouble(vm, 1);
        const char* name = wrenGetSlotString(vm, 2);
        int cash = (int)wrenGetSlotDouble(vm, 3);
        int rp = (int)wrenGetSlotDouble(vm, 4);
        int lvl = (int)wrenGetSlotDouble(vm, 5);
        int colour = (int)wrenGetSlotDouble(vm, 6);

        BOOL res = HUD::SET_WARNING_MESSAGE_OPTION_ITEMS(index, name, cash, rp, lvl, colour);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_HUD_SET_WARNING_MESSAGE_OPTION_HIGHLIGHT(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        BOOL res = HUD::SET_WARNING_MESSAGE_OPTION_HIGHLIGHT(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_HUD_REMOVE_WARNING_MESSAGE_OPTION_ITEMS(WrenVM* vm)
    {

        HUD::REMOVE_WARNING_MESSAGE_OPTION_ITEMS();
    }

    static void WREN_HUD_IS_WARNING_MESSAGE_ACTIVE(WrenVM* vm)
    {

        BOOL res = HUD::IS_WARNING_MESSAGE_ACTIVE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_HUD_CLEAR_DYNAMIC_PAUSE_MENU_ERROR_MESSAGE(WrenVM* vm)
    {

        HUD::CLEAR_DYNAMIC_PAUSE_MENU_ERROR_MESSAGE();
    }

    static void WREN_HUD_CUSTOM_MINIMAP_SET_ACTIVE(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        HUD::CUSTOM_MINIMAP_SET_ACTIVE(toggle);
    }

    static void WREN_HUD_CUSTOM_MINIMAP_SET_BLIP_OBJECT(WrenVM* vm)
    {
        int spriteId = (int)wrenGetSlotDouble(vm, 1);

        HUD::CUSTOM_MINIMAP_SET_BLIP_OBJECT(spriteId);
    }

    static void WREN_HUD_CUSTOM_MINIMAP_CREATE_BLIP(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);

        Any res = HUD::CUSTOM_MINIMAP_CREATE_BLIP(x, y, z);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_HUD_CUSTOM_MINIMAP_CLEAR_BLIPS(WrenVM* vm)
    {

        HUD::CUSTOM_MINIMAP_CLEAR_BLIPS();
    }

    static void WREN_HUD_FORCE_SONAR_BLIPS_THIS_FRAME(WrenVM* vm)
    {

        Any res = HUD::FORCE_SONAR_BLIPS_THIS_FRAME();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_HUD_GET_NORTH_BLID_INDEX(WrenVM* vm)
    {

        Blip res = HUD::GET_NORTH_BLID_INDEX();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_HUD_DISPLAY_PLAYER_NAME_TAGS_ON_BLIPS(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        HUD::DISPLAY_PLAYER_NAME_TAGS_ON_BLIPS(toggle);
    }

    static void WREN_HUD_DRAW_FRONTEND_BACKGROUND_THIS_FRAME(WrenVM* vm)
    {

        HUD::DRAW_FRONTEND_BACKGROUND_THIS_FRAME();
    }

    static void WREN_HUD_DRAW_HUD_OVER_FADE_THIS_FRAME(WrenVM* vm)
    {

        HUD::DRAW_HUD_OVER_FADE_THIS_FRAME();
    }

    static void WREN_HUD_ACTIVATE_FRONTEND_MENU(WrenVM* vm)
    {
        Hash menuhash = (Hash)wrenGetSlotDouble(vm, 1);
        BOOL togglePause = (BOOL)wrenGetSlotBool(vm, 2);
        int component = (int)wrenGetSlotDouble(vm, 3);

        HUD::ACTIVATE_FRONTEND_MENU(menuhash, togglePause, component);
    }

    static void WREN_HUD_RESTART_FRONTEND_MENU(WrenVM* vm)
    {
        Hash menuHash = (Hash)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);

        HUD::RESTART_FRONTEND_MENU(menuHash, p1);
    }

    static void WREN_HUD_GET_CURRENT_FRONTEND_MENU_VERSION(WrenVM* vm)
    {

        Hash res = HUD::GET_CURRENT_FRONTEND_MENU_VERSION();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_HUD_SET_PAUSE_MENU_ACTIVE(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        HUD::SET_PAUSE_MENU_ACTIVE(toggle);
    }

    static void WREN_HUD_DISABLE_FRONTEND_THIS_FRAME(WrenVM* vm)
    {

        HUD::DISABLE_FRONTEND_THIS_FRAME();
    }

    static void WREN_HUD_SUPPRESS_FRONTEND_RENDERING_THIS_FRAME(WrenVM* vm)
    {

        HUD::SUPPRESS_FRONTEND_RENDERING_THIS_FRAME();
    }

    static void WREN_HUD_ALLOW_PAUSE_WHEN_NOT_IN_STATE_OF_PLAY_THIS_FRAME(WrenVM* vm)
    {

        HUD::ALLOW_PAUSE_WHEN_NOT_IN_STATE_OF_PLAY_THIS_FRAME();
    }

    static void WREN_HUD_SET_FRONTEND_ACTIVE(WrenVM* vm)
    {
        BOOL active = (BOOL)wrenGetSlotBool(vm, 1);

        HUD::SET_FRONTEND_ACTIVE(active);
    }

    static void WREN_HUD_IS_PAUSE_MENU_ACTIVE(WrenVM* vm)
    {

        BOOL res = HUD::IS_PAUSE_MENU_ACTIVE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_HUD_IS_STORE_PENDING_NETWORK_SHUTDOWN_TO_OPEN(WrenVM* vm)
    {

        BOOL res = HUD::IS_STORE_PENDING_NETWORK_SHUTDOWN_TO_OPEN();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_HUD_GET_PAUSE_MENU_STATE(WrenVM* vm)
    {

        int res = HUD::GET_PAUSE_MENU_STATE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_HUD_GET_PAUSE_MENU_POSITION(WrenVM* vm)
    {

        Vector3 res = HUD::GET_PAUSE_MENU_POSITION();

        wrenEnsureSlots(vm, 1);

        wrenGetVariable(vm, "natives", "Vector3", 0);
        Vector3* wren_res = (Vector3*)wrenSetSlotNewForeign(vm, 0, 0, sizeof(Vector3));
        wren_res->x = res.x;
        wren_res->y = res.y;
        wren_res->z = res.z;
    }

    static void WREN_HUD_IS_PAUSE_MENU_RESTARTING(WrenVM* vm)
    {

        BOOL res = HUD::IS_PAUSE_MENU_RESTARTING();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_HUD_FORCE_SCRIPTED_GFX_WHEN_FRONTEND_ACTIVE(WrenVM* vm)
    {
        const char* p0 = wrenGetSlotString(vm, 1);

        HUD::FORCE_SCRIPTED_GFX_WHEN_FRONTEND_ACTIVE(p0);
    }

    static void WREN_HUD_PAUSE_MENUCEPTION_GO_DEEPER(WrenVM* vm)
    {
        int page = (int)wrenGetSlotDouble(vm, 1);

        HUD::PAUSE_MENUCEPTION_GO_DEEPER(page);
    }

    static void WREN_HUD_PAUSE_MENUCEPTION_THE_KICK(WrenVM* vm)
    {

        HUD::PAUSE_MENUCEPTION_THE_KICK();
    }

    static void WREN_HUD_PAUSE_TOGGLE_FULLSCREEN_MAP(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        HUD::PAUSE_TOGGLE_FULLSCREEN_MAP(p0);
    }

    static void WREN_HUD_PAUSE_MENU_ACTIVATE_CONTEXT(WrenVM* vm)
    {
        Hash contextHash = (Hash)wrenGetSlotDouble(vm, 1);

        HUD::PAUSE_MENU_ACTIVATE_CONTEXT(contextHash);
    }

    static void WREN_HUD_PAUSE_MENU_DEACTIVATE_CONTEXT(WrenVM* vm)
    {
        Hash contextHash = (Hash)wrenGetSlotDouble(vm, 1);

        HUD::PAUSE_MENU_DEACTIVATE_CONTEXT(contextHash);
    }

    static void WREN_HUD_PAUSE_MENU_IS_CONTEXT_ACTIVE(WrenVM* vm)
    {
        Hash contextHash = (Hash)wrenGetSlotDouble(vm, 1);

        BOOL res = HUD::PAUSE_MENU_IS_CONTEXT_ACTIVE(contextHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_HUD_PAUSE_MENU_IS_CONTEXT_MENU_ACTIVE(WrenVM* vm)
    {

        BOOL res = HUD::PAUSE_MENU_IS_CONTEXT_MENU_ACTIVE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_HUD_PAUSE_MENU_GET_HAIR_COLOUR_INDEX(WrenVM* vm)
    {

        int res = HUD::PAUSE_MENU_GET_HAIR_COLOUR_INDEX();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_HUD_PAUSE_MENU_GET_MOUSE_HOVER_INDEX(WrenVM* vm)
    {

        int res = HUD::PAUSE_MENU_GET_MOUSE_HOVER_INDEX();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_HUD_PAUSE_MENU_GET_MOUSE_HOVER_UNIQUE_ID(WrenVM* vm)
    {

        int res = HUD::PAUSE_MENU_GET_MOUSE_HOVER_UNIQUE_ID();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_HUD_PAUSE_MENU_GET_MOUSE_CLICK_EVENT(WrenVM* vm)
    {
        Any p0;
        Any p1;
        Any p2;

        BOOL res = HUD::PAUSE_MENU_GET_MOUSE_CLICK_EVENT(&p0, &p1, &p2);

        wrenEnsureSlots(vm, 8);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p0);
        wrenInsertInList(vm, 0, 1, 2);

        wrenSetSlotDouble(vm, 3, p1);
        wrenInsertInList(vm, 0, 2, 3);

        wrenSetSlotDouble(vm, 4, p2);
        wrenInsertInList(vm, 0, 3, 4);

    }

    static void WREN_HUD_PAUSE_MENU_REDRAW_INSTRUCTIONAL_BUTTONS(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);

        HUD::PAUSE_MENU_REDRAW_INSTRUCTIONAL_BUTTONS(p0);
    }

    static void WREN_HUD_PAUSE_MENU_SET_BUSY_SPINNER(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);
        int position = (int)wrenGetSlotDouble(vm, 2);
        int spinnerIndex = (int)wrenGetSlotDouble(vm, 3);

        HUD::PAUSE_MENU_SET_BUSY_SPINNER(p0, position, spinnerIndex);
    }

    static void WREN_HUD_PAUSE_MENU_SET_WARN_ON_TAB_CHANGE(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        HUD::PAUSE_MENU_SET_WARN_ON_TAB_CHANGE(p0);
    }

    static void WREN_HUD_IS_FRONTEND_READY_FOR_CONTROL(WrenVM* vm)
    {

        BOOL res = HUD::IS_FRONTEND_READY_FOR_CONTROL();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_HUD_TAKE_CONTROL_OF_FRONTEND(WrenVM* vm)
    {

        HUD::TAKE_CONTROL_OF_FRONTEND();
    }

    static void WREN_HUD_RELEASE_CONTROL_OF_FRONTEND(WrenVM* vm)
    {

        HUD::RELEASE_CONTROL_OF_FRONTEND();
    }

    static void WREN_HUD_CODE_WANTS_SCRIPT_TO_TAKE_CONTROL(WrenVM* vm)
    {

        BOOL res = HUD::CODE_WANTS_SCRIPT_TO_TAKE_CONTROL();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_HUD_GET_SCREEN_CODE_WANTS_SCRIPT_TO_CONTROL(WrenVM* vm)
    {

        int res = HUD::GET_SCREEN_CODE_WANTS_SCRIPT_TO_CONTROL();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_HUD_IS_NAVIGATING_MENU_CONTENT(WrenVM* vm)
    {

        BOOL res = HUD::IS_NAVIGATING_MENU_CONTENT();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_HUD_HAS_MENU_TRIGGER_EVENT_OCCURRED(WrenVM* vm)
    {

        BOOL res = HUD::HAS_MENU_TRIGGER_EVENT_OCCURRED();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_HUD_HAS_MENU_LAYOUT_CHANGED_EVENT_OCCURRED(WrenVM* vm)
    {

        BOOL res = HUD::HAS_MENU_LAYOUT_CHANGED_EVENT_OCCURRED();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_HUD_SET_SAVEGAME_LIST_UNIQUE_ID(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        HUD::SET_SAVEGAME_LIST_UNIQUE_ID(p0);
    }

    static void WREN_HUD_GET_MENU_TRIGGER_EVENT_DETAILS(WrenVM* vm)
    {
        int lastItemMenuId;
        int selectedItemUniqueId;

        HUD::GET_MENU_TRIGGER_EVENT_DETAILS(&lastItemMenuId, &selectedItemUniqueId);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, lastItemMenuId);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, selectedItemUniqueId);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_HUD_GET_MENU_LAYOUT_CHANGED_EVENT_DETAILS(WrenVM* vm)
    {
        int lastItemMenuId;
        int selectedItemMenuId;
        int selectedItemUniqueId;

        HUD::GET_MENU_LAYOUT_CHANGED_EVENT_DETAILS(&lastItemMenuId, &selectedItemMenuId, &selectedItemUniqueId);

        wrenEnsureSlots(vm, 6);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, lastItemMenuId);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, selectedItemMenuId);
        wrenInsertInList(vm, 0, 1, 2);

        wrenSetSlotDouble(vm, 3, selectedItemUniqueId);
        wrenInsertInList(vm, 0, 2, 3);

    }

    static void WREN_HUD_GET_PM_PLAYER_CREW_COLOR(WrenVM* vm)
    {
        int r;
        int g;
        int b;

        BOOL res = HUD::GET_PM_PLAYER_CREW_COLOR(&r, &g, &b);

        wrenEnsureSlots(vm, 8);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, r);
        wrenInsertInList(vm, 0, 1, 2);

        wrenSetSlotDouble(vm, 3, g);
        wrenInsertInList(vm, 0, 2, 3);

        wrenSetSlotDouble(vm, 4, b);
        wrenInsertInList(vm, 0, 3, 4);

    }

    static void WREN_HUD_GET_MENU_PED_INT_STAT(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1;

        BOOL res = HUD::GET_MENU_PED_INT_STAT(p0, &p1);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p1);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_HUD_GET_CHARACTER_MENU_PED_INT_STAT(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1;
        Any p2 = (Any)wrenGetSlotDouble(vm, 2);

        BOOL res = HUD::GET_CHARACTER_MENU_PED_INT_STAT(p0, &p1, p2);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p1);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_HUD_GET_MENU_PED_MASKED_INT_STAT(WrenVM* vm)
    {
        Hash p0 = (Hash)wrenGetSlotDouble(vm, 1);
        Any p1;
        Any p2 = (Any)wrenGetSlotDouble(vm, 2);
        int p3 = (int)wrenGetSlotDouble(vm, 3);

        BOOL res = HUD::GET_MENU_PED_MASKED_INT_STAT(p0, &p1, p2, p3);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p1);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_HUD_GET_CHARACTER_MENU_PED_MASKED_INT_STAT(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1;
        Any p2 = (Any)wrenGetSlotDouble(vm, 2);
        Any p3 = (Any)wrenGetSlotDouble(vm, 3);
        Any p4 = (Any)wrenGetSlotDouble(vm, 4);

        BOOL res = HUD::GET_CHARACTER_MENU_PED_MASKED_INT_STAT(p0, &p1, p2, p3, p4);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p1);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_HUD_GET_MENU_PED_FLOAT_STAT(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        float p1;

        BOOL res = HUD::GET_MENU_PED_FLOAT_STAT(p0, &p1);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p1);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_HUD_GET_CHARACTER_MENU_PED_FLOAT_STAT(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1;
        Any p2 = (Any)wrenGetSlotDouble(vm, 2);

        BOOL res = HUD::GET_CHARACTER_MENU_PED_FLOAT_STAT(p0, &p1, p2);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p1);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_HUD_GET_MENU_PED_BOOL_STAT(WrenVM* vm)
    {
        Hash p0 = (Hash)wrenGetSlotDouble(vm, 1);
        Any p1;

        BOOL res = HUD::GET_MENU_PED_BOOL_STAT(p0, &p1);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p1);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_HUD_CLEAR_PED_IN_PAUSE_MENU(WrenVM* vm)
    {

        HUD::CLEAR_PED_IN_PAUSE_MENU();
    }

    static void WREN_HUD_GIVE_PED_TO_PAUSE_MENU(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);

        HUD::GIVE_PED_TO_PAUSE_MENU(ped, p1);
    }

    static void WREN_HUD_SET_PAUSE_MENU_PED_LIGHTING(WrenVM* vm)
    {
        BOOL state = (BOOL)wrenGetSlotBool(vm, 1);

        HUD::SET_PAUSE_MENU_PED_LIGHTING(state);
    }

    static void WREN_HUD_SET_PAUSE_MENU_PED_SLEEP_STATE(WrenVM* vm)
    {
        BOOL state = (BOOL)wrenGetSlotBool(vm, 1);

        HUD::SET_PAUSE_MENU_PED_SLEEP_STATE(state);
    }

    static void WREN_HUD_OPEN_ONLINE_POLICIES_MENU(WrenVM* vm)
    {

        HUD::OPEN_ONLINE_POLICIES_MENU();
    }

    static void WREN_HUD_ARE_ONLINE_POLICIES_UP_TO_DATE(WrenVM* vm)
    {

        BOOL res = HUD::ARE_ONLINE_POLICIES_UP_TO_DATE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_HUD_IS_ONLINE_POLICIES_MENU_ACTIVE(WrenVM* vm)
    {

        BOOL res = HUD::IS_ONLINE_POLICIES_MENU_ACTIVE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_HUD_OPEN_SOCIAL_CLUB_MENU(WrenVM* vm)
    {

        HUD::OPEN_SOCIAL_CLUB_MENU();
    }

    static void WREN_HUD_CLOSE_SOCIAL_CLUB_MENU(WrenVM* vm)
    {

        HUD::CLOSE_SOCIAL_CLUB_MENU();
    }

    static void WREN_HUD_SET_SOCIAL_CLUB_TOUR(WrenVM* vm)
    {
        const char* name = wrenGetSlotString(vm, 1);

        HUD::SET_SOCIAL_CLUB_TOUR(name);
    }

    static void WREN_HUD_IS_SOCIAL_CLUB_ACTIVE(WrenVM* vm)
    {

        BOOL res = HUD::IS_SOCIAL_CLUB_ACTIVE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_HUD_SET_TEXT_INPUT_BOX_ENABLED(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        HUD::SET_TEXT_INPUT_BOX_ENABLED(p0);
    }

    static void WREN_HUD_FORCE_CLOSE_TEXT_INPUT_BOX(WrenVM* vm)
    {

        HUD::FORCE_CLOSE_TEXT_INPUT_BOX();
    }

    static void WREN_HUD_SET_ALLOW_COMMA_ON_TEXT_INPUT(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        HUD::SET_ALLOW_COMMA_ON_TEXT_INPUT(p0);
    }

    static void WREN_HUD_OVERRIDE_MP_TEXT_CHAT_TEAM_STRING(WrenVM* vm)
    {
        Hash gxtEntryHash = (Hash)wrenGetSlotDouble(vm, 1);

        HUD::OVERRIDE_MP_TEXT_CHAT_TEAM_STRING(gxtEntryHash);
    }

    static void WREN_HUD_IS_MP_TEXT_CHAT_TYPING(WrenVM* vm)
    {

        BOOL res = HUD::IS_MP_TEXT_CHAT_TYPING();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_HUD_CLOSE_MP_TEXT_CHAT(WrenVM* vm)
    {

        HUD::CLOSE_MP_TEXT_CHAT();
    }

    static void WREN_HUD_MP_TEXT_CHAT_IS_TEAM_JOB(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        HUD::MP_TEXT_CHAT_IS_TEAM_JOB(p0);
    }

    static void WREN_HUD_OVERRIDE_MP_TEXT_CHAT_COLOR(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);
        int hudColor = (int)wrenGetSlotDouble(vm, 2);

        HUD::OVERRIDE_MP_TEXT_CHAT_COLOR(p0, hudColor);
    }

    static void WREN_HUD_MP_TEXT_CHAT_DISABLE(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        HUD::MP_TEXT_CHAT_DISABLE(toggle);
    }

    static void WREN_HUD_FLAG_PLAYER_CONTEXT_IN_TOURNAMENT(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        HUD::FLAG_PLAYER_CONTEXT_IN_TOURNAMENT(toggle);
    }

    static void WREN_HUD_SET_PED_HAS_AI_BLIP(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL hasCone = (BOOL)wrenGetSlotBool(vm, 2);

        HUD::SET_PED_HAS_AI_BLIP(ped, hasCone);
    }

    static void WREN_HUD_SET_PED_HAS_AI_BLIP_WITH_COLOUR(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL hasCone = (BOOL)wrenGetSlotBool(vm, 2);
        int color = (int)wrenGetSlotDouble(vm, 3);

        HUD::SET_PED_HAS_AI_BLIP_WITH_COLOUR(ped, hasCone, color);
    }

    static void WREN_HUD_DOES_PED_HAVE_AI_BLIP(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = HUD::DOES_PED_HAVE_AI_BLIP(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_HUD_SET_PED_AI_BLIP_GANG_ID(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int gangId = (int)wrenGetSlotDouble(vm, 2);

        HUD::SET_PED_AI_BLIP_GANG_ID(ped, gangId);
    }

    static void WREN_HUD_SET_PED_AI_BLIP_HAS_CONE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        HUD::SET_PED_AI_BLIP_HAS_CONE(ped, toggle);
    }

    static void WREN_HUD_SET_PED_AI_BLIP_FORCED_ON(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        HUD::SET_PED_AI_BLIP_FORCED_ON(ped, toggle);
    }

    static void WREN_HUD_SET_PED_AI_BLIP_NOTICE_RANGE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float range = (float)wrenGetSlotDouble(vm, 2);

        HUD::SET_PED_AI_BLIP_NOTICE_RANGE(ped, range);
    }

    static void WREN_HUD_SET_PED_AI_BLIP_SPRITE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int spriteId = (int)wrenGetSlotDouble(vm, 2);

        HUD::SET_PED_AI_BLIP_SPRITE(ped, spriteId);
    }

    static void WREN_HUD_GET_AI_PED_PED_BLIP_INDEX(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        Blip res = HUD::GET_AI_PED_PED_BLIP_INDEX(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_HUD_GET_AI_PED_VEHICLE_BLIP_INDEX(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        Blip res = HUD::GET_AI_PED_VEHICLE_BLIP_INDEX(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_HUD_HAS_DIRECTOR_MODE_BEEN_LAUNCHED_BY_CODE(WrenVM* vm)
    {

        BOOL res = HUD::HAS_DIRECTOR_MODE_BEEN_LAUNCHED_BY_CODE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_HUD_SET_DIRECTOR_MODE_LAUNCHED_BY_SCRIPT(WrenVM* vm)
    {

        HUD::SET_DIRECTOR_MODE_LAUNCHED_BY_SCRIPT();
    }

    static void WREN_HUD_SET_PLAYER_IS_IN_DIRECTOR_MODE(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        HUD::SET_PLAYER_IS_IN_DIRECTOR_MODE(toggle);
    }

    static void WREN_HUD_SET_DIRECTOR_MODE_AVAILABLE(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        HUD::SET_DIRECTOR_MODE_AVAILABLE(toggle);
    }

    static void WREN_HUD_HIDE_HUDMARKERS_THIS_FRAME(WrenVM* vm)
    {

        HUD::HIDE_HUDMARKERS_THIS_FRAME();
    }


    static void WREN_INTERIOR_GET_INTERIOR_HEADING(WrenVM* vm)
    {
        Interior interior = (Interior)wrenGetSlotDouble(vm, 1);

        float res = INTERIOR::GET_INTERIOR_HEADING(interior);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_INTERIOR_GET_INTERIOR_LOCATION_AND_NAMEHASH(WrenVM* vm)
    {
        Interior interior = (Interior)wrenGetSlotDouble(vm, 1);
        Vector3 position;
        Hash nameHash;

        INTERIOR::GET_INTERIOR_LOCATION_AND_NAMEHASH(interior, &position, &nameHash);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenGetVariable(vm, "natives", "Vector3", 1);
        Vector3* wren_position = (Vector3*)wrenSetSlotNewForeign(vm, 2, 1, sizeof(Vector3));
        wren_position->x = position.x;
        wren_position->y = position.y;
        wren_position->z = position.z;
        wrenInsertInList(vm, 0, 0, 2);

        wrenSetSlotDouble(vm, 3, nameHash);
        wrenInsertInList(vm, 0, 1, 3);

    }

    static void WREN_INTERIOR_GET_INTERIOR_GROUP_ID(WrenVM* vm)
    {
        Interior interior = (Interior)wrenGetSlotDouble(vm, 1);

        int res = INTERIOR::GET_INTERIOR_GROUP_ID(interior);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_INTERIOR_GET_OFFSET_FROM_INTERIOR_IN_WORLD_COORDS(WrenVM* vm)
    {
        Interior interior = (Interior)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);

        Vector3 res = INTERIOR::GET_OFFSET_FROM_INTERIOR_IN_WORLD_COORDS(interior, x, y, z);

        wrenEnsureSlots(vm, 1);

        wrenGetVariable(vm, "natives", "Vector3", 0);
        Vector3* wren_res = (Vector3*)wrenSetSlotNewForeign(vm, 0, 0, sizeof(Vector3));
        wren_res->x = res.x;
        wren_res->y = res.y;
        wren_res->z = res.z;
    }

    static void WREN_INTERIOR_IS_INTERIOR_SCENE(WrenVM* vm)
    {

        BOOL res = INTERIOR::IS_INTERIOR_SCENE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_INTERIOR_IS_VALID_INTERIOR(WrenVM* vm)
    {
        Interior interior = (Interior)wrenGetSlotDouble(vm, 1);

        BOOL res = INTERIOR::IS_VALID_INTERIOR(interior);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_INTERIOR_CLEAR_ROOM_FOR_ENTITY(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        INTERIOR::CLEAR_ROOM_FOR_ENTITY(entity);
    }

    static void WREN_INTERIOR_FORCE_ROOM_FOR_ENTITY(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        Interior interior = (Interior)wrenGetSlotDouble(vm, 2);
        Hash roomHashKey = (Hash)wrenGetSlotDouble(vm, 3);

        INTERIOR::FORCE_ROOM_FOR_ENTITY(entity, interior, roomHashKey);
    }

    static void WREN_INTERIOR_GET_ROOM_KEY_FROM_ENTITY(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        Hash res = INTERIOR::GET_ROOM_KEY_FROM_ENTITY(entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_INTERIOR_GET_KEY_FOR_ENTITY_IN_ROOM(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        Hash res = INTERIOR::GET_KEY_FOR_ENTITY_IN_ROOM(entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_INTERIOR_GET_INTERIOR_FROM_ENTITY(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        Interior res = INTERIOR::GET_INTERIOR_FROM_ENTITY(entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_INTERIOR_RETAIN_ENTITY_IN_INTERIOR(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        Interior interior = (Interior)wrenGetSlotDouble(vm, 2);

        INTERIOR::RETAIN_ENTITY_IN_INTERIOR(entity, interior);
    }

    static void WREN_INTERIOR_CLEAR_INTERIOR_STATE_OF_ENTITY(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        INTERIOR::CLEAR_INTERIOR_STATE_OF_ENTITY(entity);
    }

    static void WREN_INTERIOR_FORCE_ACTIVATING_TRACKING_ON_ENTITY(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        INTERIOR::FORCE_ACTIVATING_TRACKING_ON_ENTITY(p0, p1);
    }

    static void WREN_INTERIOR_FORCE_ROOM_FOR_GAME_VIEWPORT(WrenVM* vm)
    {
        int interiorID = (int)wrenGetSlotDouble(vm, 1);
        Hash roomHashKey = (Hash)wrenGetSlotDouble(vm, 2);

        INTERIOR::FORCE_ROOM_FOR_GAME_VIEWPORT(interiorID, roomHashKey);
    }

    static void WREN_INTERIOR_SET_ROOM_FOR_GAME_VIEWPORT_BY_NAME(WrenVM* vm)
    {
        const char* roomName = wrenGetSlotString(vm, 1);

        INTERIOR::SET_ROOM_FOR_GAME_VIEWPORT_BY_NAME(roomName);
    }

    static void WREN_INTERIOR_SET_ROOM_FOR_GAME_VIEWPORT_BY_KEY(WrenVM* vm)
    {
        Hash roomHashKey = (Hash)wrenGetSlotDouble(vm, 1);

        INTERIOR::SET_ROOM_FOR_GAME_VIEWPORT_BY_KEY(roomHashKey);
    }

    static void WREN_INTERIOR_GET_ROOM_KEY_FOR_GAME_VIEWPORT(WrenVM* vm)
    {

        Hash res = INTERIOR::GET_ROOM_KEY_FOR_GAME_VIEWPORT();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_INTERIOR_CLEAR_ROOM_FOR_GAME_VIEWPORT(WrenVM* vm)
    {

        INTERIOR::CLEAR_ROOM_FOR_GAME_VIEWPORT();
    }

    static void WREN_INTERIOR_GET_INTERIOR_FROM_PRIMARY_VIEW(WrenVM* vm)
    {

        Interior res = INTERIOR::GET_INTERIOR_FROM_PRIMARY_VIEW();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_INTERIOR_GET_INTERIOR_AT_COORDS(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);

        Interior res = INTERIOR::GET_INTERIOR_AT_COORDS(x, y, z);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_INTERIOR_ADD_PICKUP_TO_INTERIOR_ROOM_BY_NAME(WrenVM* vm)
    {
        Pickup pickup = (Pickup)wrenGetSlotDouble(vm, 1);
        const char* roomName = wrenGetSlotString(vm, 2);

        INTERIOR::ADD_PICKUP_TO_INTERIOR_ROOM_BY_NAME(pickup, roomName);
    }

    static void WREN_INTERIOR_PIN_INTERIOR_IN_MEMORY(WrenVM* vm)
    {
        Interior interior = (Interior)wrenGetSlotDouble(vm, 1);

        INTERIOR::PIN_INTERIOR_IN_MEMORY(interior);
    }

    static void WREN_INTERIOR_UNPIN_INTERIOR(WrenVM* vm)
    {
        Interior interior = (Interior)wrenGetSlotDouble(vm, 1);

        INTERIOR::UNPIN_INTERIOR(interior);
    }

    static void WREN_INTERIOR_IS_INTERIOR_READY(WrenVM* vm)
    {
        Interior interior = (Interior)wrenGetSlotDouble(vm, 1);

        BOOL res = INTERIOR::IS_INTERIOR_READY(interior);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_INTERIOR_SET_INTERIOR_IN_USE(WrenVM* vm)
    {
        Interior interior = (Interior)wrenGetSlotDouble(vm, 1);

        Any res = INTERIOR::SET_INTERIOR_IN_USE(interior);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_INTERIOR_GET_INTERIOR_AT_COORDS_WITH_TYPE(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        const char* interiorType = wrenGetSlotString(vm, 4);

        Interior res = INTERIOR::GET_INTERIOR_AT_COORDS_WITH_TYPE(x, y, z, interiorType);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_INTERIOR_GET_INTERIOR_AT_COORDS_WITH_TYPEHASH(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        Hash typeHash = (Hash)wrenGetSlotDouble(vm, 4);

        Interior res = INTERIOR::GET_INTERIOR_AT_COORDS_WITH_TYPEHASH(x, y, z, typeHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_INTERIOR_ACTIVATE_INTERIOR_GROUPS_USING_CAMERA(WrenVM* vm)
    {

        INTERIOR::ACTIVATE_INTERIOR_GROUPS_USING_CAMERA();
    }

    static void WREN_INTERIOR_IS_COLLISION_MARKED_OUTSIDE(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);

        BOOL res = INTERIOR::IS_COLLISION_MARKED_OUTSIDE(x, y, z);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_INTERIOR_GET_INTERIOR_FROM_COLLISION(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);

        int res = INTERIOR::GET_INTERIOR_FROM_COLLISION(x, y, z);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_INTERIOR_ENABLE_STADIUM_PROBES_THIS_FRAME(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        INTERIOR::ENABLE_STADIUM_PROBES_THIS_FRAME(p0);
    }

    static void WREN_INTERIOR_ACTIVATE_INTERIOR_ENTITY_SET(WrenVM* vm)
    {
        Interior interior = (Interior)wrenGetSlotDouble(vm, 1);
        const char* entitySetName = wrenGetSlotString(vm, 2);

        INTERIOR::ACTIVATE_INTERIOR_ENTITY_SET(interior, entitySetName);
    }

    static void WREN_INTERIOR_DEACTIVATE_INTERIOR_ENTITY_SET(WrenVM* vm)
    {
        Interior interior = (Interior)wrenGetSlotDouble(vm, 1);
        const char* entitySetName = wrenGetSlotString(vm, 2);

        INTERIOR::DEACTIVATE_INTERIOR_ENTITY_SET(interior, entitySetName);
    }

    static void WREN_INTERIOR_IS_INTERIOR_ENTITY_SET_ACTIVE(WrenVM* vm)
    {
        Interior interior = (Interior)wrenGetSlotDouble(vm, 1);
        const char* entitySetName = wrenGetSlotString(vm, 2);

        BOOL res = INTERIOR::IS_INTERIOR_ENTITY_SET_ACTIVE(interior, entitySetName);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_INTERIOR_SET_INTERIOR_ENTITY_SET_TINT_INDEX(WrenVM* vm)
    {
        Interior interior = (Interior)wrenGetSlotDouble(vm, 1);
        const char* entitySetName = wrenGetSlotString(vm, 2);
        int color = (int)wrenGetSlotDouble(vm, 3);

        INTERIOR::SET_INTERIOR_ENTITY_SET_TINT_INDEX(interior, entitySetName, color);
    }

    static void WREN_INTERIOR_REFRESH_INTERIOR(WrenVM* vm)
    {
        Interior interior = (Interior)wrenGetSlotDouble(vm, 1);

        INTERIOR::REFRESH_INTERIOR(interior);
    }

    static void WREN_INTERIOR_ENABLE_EXTERIOR_CULL_MODEL_THIS_FRAME(WrenVM* vm)
    {
        Hash mapObjectHash = (Hash)wrenGetSlotDouble(vm, 1);

        INTERIOR::ENABLE_EXTERIOR_CULL_MODEL_THIS_FRAME(mapObjectHash);
    }

    static void WREN_INTERIOR_ENABLE_SHADOW_CULL_MODEL_THIS_FRAME(WrenVM* vm)
    {
        Hash mapObjectHash = (Hash)wrenGetSlotDouble(vm, 1);

        INTERIOR::ENABLE_SHADOW_CULL_MODEL_THIS_FRAME(mapObjectHash);
    }

    static void WREN_INTERIOR_DISABLE_INTERIOR(WrenVM* vm)
    {
        Interior interior = (Interior)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        INTERIOR::DISABLE_INTERIOR(interior, toggle);
    }

    static void WREN_INTERIOR_IS_INTERIOR_DISABLED(WrenVM* vm)
    {
        Interior interior = (Interior)wrenGetSlotDouble(vm, 1);

        BOOL res = INTERIOR::IS_INTERIOR_DISABLED(interior);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_INTERIOR_CAP_INTERIOR(WrenVM* vm)
    {
        Interior interior = (Interior)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        INTERIOR::CAP_INTERIOR(interior, toggle);
    }

    static void WREN_INTERIOR_IS_INTERIOR_CAPPED(WrenVM* vm)
    {
        Interior interior = (Interior)wrenGetSlotDouble(vm, 1);

        BOOL res = INTERIOR::IS_INTERIOR_CAPPED(interior);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_INTERIOR_DISABLE_METRO_SYSTEM(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        INTERIOR::DISABLE_METRO_SYSTEM(toggle);
    }

    static void WREN_INTERIOR_SET_IS_EXTERIOR_ONLY(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        INTERIOR::SET_IS_EXTERIOR_ONLY(entity, toggle);
    }


    static void WREN_ITEMSET_CREATE_ITEMSET(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        ScrHandle res = ITEMSET::CREATE_ITEMSET(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_ITEMSET_DESTROY_ITEMSET(WrenVM* vm)
    {
        ScrHandle itemset = (ScrHandle)wrenGetSlotDouble(vm, 1);

        ITEMSET::DESTROY_ITEMSET(itemset);
    }

    static void WREN_ITEMSET_IS_ITEMSET_VALID(WrenVM* vm)
    {
        ScrHandle itemset = (ScrHandle)wrenGetSlotDouble(vm, 1);

        BOOL res = ITEMSET::IS_ITEMSET_VALID(itemset);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_ITEMSET_ADD_TO_ITEMSET(WrenVM* vm)
    {
        ScrHandle item = (ScrHandle)wrenGetSlotDouble(vm, 1);
        ScrHandle itemset = (ScrHandle)wrenGetSlotDouble(vm, 2);

        BOOL res = ITEMSET::ADD_TO_ITEMSET(item, itemset);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_ITEMSET_REMOVE_FROM_ITEMSET(WrenVM* vm)
    {
        ScrHandle item = (ScrHandle)wrenGetSlotDouble(vm, 1);
        ScrHandle itemset = (ScrHandle)wrenGetSlotDouble(vm, 2);

        ITEMSET::REMOVE_FROM_ITEMSET(item, itemset);
    }

    static void WREN_ITEMSET_GET_ITEMSET_SIZE(WrenVM* vm)
    {
        ScrHandle itemset = (ScrHandle)wrenGetSlotDouble(vm, 1);

        int res = ITEMSET::GET_ITEMSET_SIZE(itemset);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_ITEMSET_GET_INDEXED_ITEM_IN_ITEMSET(WrenVM* vm)
    {
        int index = (int)wrenGetSlotDouble(vm, 1);
        ScrHandle itemset = (ScrHandle)wrenGetSlotDouble(vm, 2);

        ScrHandle res = ITEMSET::GET_INDEXED_ITEM_IN_ITEMSET(index, itemset);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_ITEMSET_IS_IN_ITEMSET(WrenVM* vm)
    {
        ScrHandle item = (ScrHandle)wrenGetSlotDouble(vm, 1);
        ScrHandle itemset = (ScrHandle)wrenGetSlotDouble(vm, 2);

        BOOL res = ITEMSET::IS_IN_ITEMSET(item, itemset);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_ITEMSET_CLEAN_ITEMSET(WrenVM* vm)
    {
        ScrHandle itemset = (ScrHandle)wrenGetSlotDouble(vm, 1);

        ITEMSET::CLEAN_ITEMSET(itemset);
    }


    static void WREN_LOADINGSCREEN_LOBBY_AUTO_MULTIPLAYER_MENU(WrenVM* vm)
    {

        int res = LOADINGSCREEN::LOBBY_AUTO_MULTIPLAYER_MENU();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_LOADINGSCREEN_LOBBY_AUTO_MULTIPLAYER_FREEMODE(WrenVM* vm)
    {

        BOOL res = LOADINGSCREEN::LOBBY_AUTO_MULTIPLAYER_FREEMODE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_LOADINGSCREEN_LOBBY_SET_AUTO_MULTIPLAYER(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        LOADINGSCREEN::LOBBY_SET_AUTO_MULTIPLAYER(toggle);
    }

    static void WREN_LOADINGSCREEN_LOBBY_AUTO_MULTIPLAYER_EVENT(WrenVM* vm)
    {

        BOOL res = LOADINGSCREEN::LOBBY_AUTO_MULTIPLAYER_EVENT();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_LOADINGSCREEN_LOBBY_SET_AUTO_MULTIPLAYER_EVENT(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        LOADINGSCREEN::LOBBY_SET_AUTO_MULTIPLAYER_EVENT(toggle);
    }

    static void WREN_LOADINGSCREEN_LOBBY_AUTO_MULTIPLAYER_RANDOM_JOB(WrenVM* vm)
    {

        BOOL res = LOADINGSCREEN::LOBBY_AUTO_MULTIPLAYER_RANDOM_JOB();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_LOADINGSCREEN_LOBBY_SET_AUTO_MP_RANDOM_JOB(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        LOADINGSCREEN::LOBBY_SET_AUTO_MP_RANDOM_JOB(toggle);
    }

    static void WREN_LOADINGSCREEN_SHUTDOWN_SESSION_CLEARS_AUTO_MULTIPLAYER(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        LOADINGSCREEN::SHUTDOWN_SESSION_CLEARS_AUTO_MULTIPLAYER(toggle);
    }


    static void WREN_LOCALIZATION_LOCALIZATION_GET_SYSTEM_LANGUAGE(WrenVM* vm)
    {

        int res = LOCALIZATION::LOCALIZATION_GET_SYSTEM_LANGUAGE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_LOCALIZATION_GET_CURRENT_LANGUAGE(WrenVM* vm)
    {

        int res = LOCALIZATION::GET_CURRENT_LANGUAGE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_LOCALIZATION_LOCALIZATION_GET_SYSTEM_DATE_TYPE(WrenVM* vm)
    {

        int res = LOCALIZATION::LOCALIZATION_GET_SYSTEM_DATE_TYPE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }


    static void WREN_MISC_GET_ALLOCATED_STACK_SIZE(WrenVM* vm)
    {

        int res = MISC::GET_ALLOCATED_STACK_SIZE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_MISC_GET_NUMBER_OF_FREE_STACKS_OF_THIS_SIZE(WrenVM* vm)
    {
        int stackSize = (int)wrenGetSlotDouble(vm, 1);

        int res = MISC::GET_NUMBER_OF_FREE_STACKS_OF_THIS_SIZE(stackSize);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_MISC_SET_RANDOM_SEED(WrenVM* vm)
    {
        int seed = (int)wrenGetSlotDouble(vm, 1);

        MISC::SET_RANDOM_SEED(seed);
    }

    static void WREN_MISC_SET_TIME_SCALE(WrenVM* vm)
    {
        float timeScale = (float)wrenGetSlotDouble(vm, 1);

        MISC::SET_TIME_SCALE(timeScale);
    }

    static void WREN_MISC_SET_MISSION_FLAG(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        MISC::SET_MISSION_FLAG(toggle);
    }

    static void WREN_MISC_GET_MISSION_FLAG(WrenVM* vm)
    {

        BOOL res = MISC::GET_MISSION_FLAG();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MISC_SET_RANDOM_EVENT_FLAG(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        MISC::SET_RANDOM_EVENT_FLAG(toggle);
    }

    static void WREN_MISC_GET_RANDOM_EVENT_FLAG(WrenVM* vm)
    {

        BOOL res = MISC::GET_RANDOM_EVENT_FLAG();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MISC_GET_CONTENT_TO_LOAD(WrenVM* vm)
    {

        const char* res = MISC::GET_CONTENT_TO_LOAD();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotString(vm, 0, res);
    }

    static void WREN_MISC_ACTIVITY_FEED_CREATE(WrenVM* vm)
    {
        const char* p0 = wrenGetSlotString(vm, 1);
        const char* p1 = wrenGetSlotString(vm, 2);

        MISC::ACTIVITY_FEED_CREATE(p0, p1);
    }

    static void WREN_MISC_ACTIVITY_FEED_ADD_SUBSTRING_TO_CAPTION(WrenVM* vm)
    {
        const char* p0 = wrenGetSlotString(vm, 1);

        MISC::ACTIVITY_FEED_ADD_SUBSTRING_TO_CAPTION(p0);
    }

    static void WREN_MISC_ACTIVITY_FEED_ADD_LITERAL_SUBSTRING_TO_CAPTION(WrenVM* vm)
    {
        const char* p0 = wrenGetSlotString(vm, 1);

        MISC::ACTIVITY_FEED_ADD_LITERAL_SUBSTRING_TO_CAPTION(p0);
    }

    static void WREN_MISC_ACTIVITY_FEED_ADD_INT_TO_CAPTION(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        MISC::ACTIVITY_FEED_ADD_INT_TO_CAPTION(p0);
    }

    static void WREN_MISC_ACTIVITY_FEED_LARGE_IMAGE_URL(WrenVM* vm)
    {
        const char* p0 = wrenGetSlotString(vm, 1);

        MISC::ACTIVITY_FEED_LARGE_IMAGE_URL(p0);
    }

    static void WREN_MISC_ACTIVITY_FEED_ACTION_START_WITH_COMMAND_LINE(WrenVM* vm)
    {
        const char* p0 = wrenGetSlotString(vm, 1);
        const char* p1 = wrenGetSlotString(vm, 2);

        MISC::ACTIVITY_FEED_ACTION_START_WITH_COMMAND_LINE(p0, p1);
    }

    static void WREN_MISC_ACTIVITY_FEED_ACTION_START_WITH_COMMAND_LINE_ADD(WrenVM* vm)
    {
        const char* p0 = wrenGetSlotString(vm, 1);

        MISC::ACTIVITY_FEED_ACTION_START_WITH_COMMAND_LINE_ADD(p0);
    }

    static void WREN_MISC_ACTIVITY_FEED_POST(WrenVM* vm)
    {

        MISC::ACTIVITY_FEED_POST();
    }

    static void WREN_MISC_ACTIVITY_FEED_ONLINE_PLAYED_WITH_POST(WrenVM* vm)
    {
        const char* p0 = wrenGetSlotString(vm, 1);

        MISC::ACTIVITY_FEED_ONLINE_PLAYED_WITH_POST(p0);
    }

    static void WREN_MISC_HAS_RESUMED_FROM_SUSPEND(WrenVM* vm)
    {

        BOOL res = MISC::HAS_RESUMED_FROM_SUSPEND();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MISC_SET_SCRIPT_HIGH_PRIO(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        MISC::SET_SCRIPT_HIGH_PRIO(toggle);
    }

    static void WREN_MISC_SET_THIS_IS_A_TRIGGER_SCRIPT(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        MISC::SET_THIS_IS_A_TRIGGER_SCRIPT(toggle);
    }

    static void WREN_MISC_INFORM_CODE_OF_CONTENT_ID_OF_CURRENT_UGC_MISSION(WrenVM* vm)
    {
        const char* p0 = wrenGetSlotString(vm, 1);

        MISC::INFORM_CODE_OF_CONTENT_ID_OF_CURRENT_UGC_MISSION(p0);
    }

    static void WREN_MISC_GET_BASE_ELEMENT_LOCATION_FROM_METADATA_BLOCK(WrenVM* vm)
    {
        Any p0;
        Any p1;
        Any p2 = (Any)wrenGetSlotDouble(vm, 1);
        BOOL p3 = (BOOL)wrenGetSlotBool(vm, 2);

        BOOL res = MISC::GET_BASE_ELEMENT_LOCATION_FROM_METADATA_BLOCK(&p0, &p1, p2, p3);

        wrenEnsureSlots(vm, 6);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p0);
        wrenInsertInList(vm, 0, 1, 2);

        wrenSetSlotDouble(vm, 3, p1);
        wrenInsertInList(vm, 0, 2, 3);

    }

    static void WREN_MISC_GET_PREV_WEATHER_TYPE_HASH_NAME(WrenVM* vm)
    {

        Hash res = MISC::GET_PREV_WEATHER_TYPE_HASH_NAME();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_MISC_GET_NEXT_WEATHER_TYPE_HASH_NAME(WrenVM* vm)
    {

        Hash res = MISC::GET_NEXT_WEATHER_TYPE_HASH_NAME();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_MISC_IS_PREV_WEATHER_TYPE(WrenVM* vm)
    {
        const char* weatherType = wrenGetSlotString(vm, 1);

        BOOL res = MISC::IS_PREV_WEATHER_TYPE(weatherType);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MISC_IS_NEXT_WEATHER_TYPE(WrenVM* vm)
    {
        const char* weatherType = wrenGetSlotString(vm, 1);

        BOOL res = MISC::IS_NEXT_WEATHER_TYPE(weatherType);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MISC_SET_WEATHER_TYPE_PERSIST(WrenVM* vm)
    {
        const char* weatherType = wrenGetSlotString(vm, 1);

        MISC::SET_WEATHER_TYPE_PERSIST(weatherType);
    }

    static void WREN_MISC_SET_WEATHER_TYPE_NOW_PERSIST(WrenVM* vm)
    {
        const char* weatherType = wrenGetSlotString(vm, 1);

        MISC::SET_WEATHER_TYPE_NOW_PERSIST(weatherType);
    }

    static void WREN_MISC_SET_WEATHER_TYPE_NOW(WrenVM* vm)
    {
        const char* weatherType = wrenGetSlotString(vm, 1);

        MISC::SET_WEATHER_TYPE_NOW(weatherType);
    }

    static void WREN_MISC_SET_WEATHER_TYPE_OVERTIME_PERSIST(WrenVM* vm)
    {
        const char* weatherType = wrenGetSlotString(vm, 1);
        float time = (float)wrenGetSlotDouble(vm, 2);

        MISC::SET_WEATHER_TYPE_OVERTIME_PERSIST(weatherType, time);
    }

    static void WREN_MISC_SET_RANDOM_WEATHER_TYPE(WrenVM* vm)
    {

        MISC::SET_RANDOM_WEATHER_TYPE();
    }

    static void WREN_MISC_CLEAR_WEATHER_TYPE_PERSIST(WrenVM* vm)
    {

        MISC::CLEAR_WEATHER_TYPE_PERSIST();
    }

    static void WREN_MISC_CLEAR_WEATHER_TYPE_NOW_PERSIST_NETWORK(WrenVM* vm)
    {
        int milliseconds = (int)wrenGetSlotDouble(vm, 1);

        MISC::CLEAR_WEATHER_TYPE_NOW_PERSIST_NETWORK(milliseconds);
    }

    static void WREN_MISC_GET_CURR_WEATHER_STATE(WrenVM* vm)
    {
        Hash weatherType1;
        Hash weatherType2;
        float percentWeather2;

        MISC::GET_CURR_WEATHER_STATE(&weatherType1, &weatherType2, &percentWeather2);

        wrenEnsureSlots(vm, 6);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, weatherType1);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, weatherType2);
        wrenInsertInList(vm, 0, 1, 2);

        wrenSetSlotDouble(vm, 3, percentWeather2);
        wrenInsertInList(vm, 0, 2, 3);

    }

    static void WREN_MISC_SET_CURR_WEATHER_STATE(WrenVM* vm)
    {
        Hash weatherType1 = (Hash)wrenGetSlotDouble(vm, 1);
        Hash weatherType2 = (Hash)wrenGetSlotDouble(vm, 2);
        float percentWeather2 = (float)wrenGetSlotDouble(vm, 3);

        MISC::SET_CURR_WEATHER_STATE(weatherType1, weatherType2, percentWeather2);
    }

    static void WREN_MISC_SET_OVERRIDE_WEATHER(WrenVM* vm)
    {
        const char* weatherType = wrenGetSlotString(vm, 1);

        MISC::SET_OVERRIDE_WEATHER(weatherType);
    }

    static void WREN_MISC_SET_OVERRIDE_WEATHEREX(WrenVM* vm)
    {
        const char* weatherType = wrenGetSlotString(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        MISC::SET_OVERRIDE_WEATHEREX(weatherType, p1);
    }

    static void WREN_MISC_CLEAR_OVERRIDE_WEATHER(WrenVM* vm)
    {

        MISC::CLEAR_OVERRIDE_WEATHER();
    }

    static void WREN_MISC_WATER_OVERRIDE_SET_SHOREWAVEAMPLITUDE(WrenVM* vm)
    {
        float amplitude = (float)wrenGetSlotDouble(vm, 1);

        MISC::WATER_OVERRIDE_SET_SHOREWAVEAMPLITUDE(amplitude);
    }

    static void WREN_MISC_WATER_OVERRIDE_SET_SHOREWAVEMINAMPLITUDE(WrenVM* vm)
    {
        float minAmplitude = (float)wrenGetSlotDouble(vm, 1);

        MISC::WATER_OVERRIDE_SET_SHOREWAVEMINAMPLITUDE(minAmplitude);
    }

    static void WREN_MISC_WATER_OVERRIDE_SET_SHOREWAVEMAXAMPLITUDE(WrenVM* vm)
    {
        float maxAmplitude = (float)wrenGetSlotDouble(vm, 1);

        MISC::WATER_OVERRIDE_SET_SHOREWAVEMAXAMPLITUDE(maxAmplitude);
    }

    static void WREN_MISC_WATER_OVERRIDE_SET_OCEANNOISEMINAMPLITUDE(WrenVM* vm)
    {
        float minAmplitude = (float)wrenGetSlotDouble(vm, 1);

        MISC::WATER_OVERRIDE_SET_OCEANNOISEMINAMPLITUDE(minAmplitude);
    }

    static void WREN_MISC_WATER_OVERRIDE_SET_OCEANWAVEAMPLITUDE(WrenVM* vm)
    {
        float amplitude = (float)wrenGetSlotDouble(vm, 1);

        MISC::WATER_OVERRIDE_SET_OCEANWAVEAMPLITUDE(amplitude);
    }

    static void WREN_MISC_WATER_OVERRIDE_SET_OCEANWAVEMINAMPLITUDE(WrenVM* vm)
    {
        float minAmplitude = (float)wrenGetSlotDouble(vm, 1);

        MISC::WATER_OVERRIDE_SET_OCEANWAVEMINAMPLITUDE(minAmplitude);
    }

    static void WREN_MISC_WATER_OVERRIDE_SET_OCEANWAVEMAXAMPLITUDE(WrenVM* vm)
    {
        float maxAmplitude = (float)wrenGetSlotDouble(vm, 1);

        MISC::WATER_OVERRIDE_SET_OCEANWAVEMAXAMPLITUDE(maxAmplitude);
    }

    static void WREN_MISC_WATER_OVERRIDE_SET_RIPPLEBUMPINESS(WrenVM* vm)
    {
        float bumpiness = (float)wrenGetSlotDouble(vm, 1);

        MISC::WATER_OVERRIDE_SET_RIPPLEBUMPINESS(bumpiness);
    }

    static void WREN_MISC_WATER_OVERRIDE_SET_RIPPLEMINBUMPINESS(WrenVM* vm)
    {
        float minBumpiness = (float)wrenGetSlotDouble(vm, 1);

        MISC::WATER_OVERRIDE_SET_RIPPLEMINBUMPINESS(minBumpiness);
    }

    static void WREN_MISC_WATER_OVERRIDE_SET_RIPPLEMAXBUMPINESS(WrenVM* vm)
    {
        float maxBumpiness = (float)wrenGetSlotDouble(vm, 1);

        MISC::WATER_OVERRIDE_SET_RIPPLEMAXBUMPINESS(maxBumpiness);
    }

    static void WREN_MISC_WATER_OVERRIDE_SET_RIPPLEDISTURB(WrenVM* vm)
    {
        float disturb = (float)wrenGetSlotDouble(vm, 1);

        MISC::WATER_OVERRIDE_SET_RIPPLEDISTURB(disturb);
    }

    static void WREN_MISC_WATER_OVERRIDE_SET_STRENGTH(WrenVM* vm)
    {
        float strength = (float)wrenGetSlotDouble(vm, 1);

        MISC::WATER_OVERRIDE_SET_STRENGTH(strength);
    }

    static void WREN_MISC_WATER_OVERRIDE_FADE_IN(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);

        MISC::WATER_OVERRIDE_FADE_IN(p0);
    }

    static void WREN_MISC_WATER_OVERRIDE_FADE_OUT(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);

        MISC::WATER_OVERRIDE_FADE_OUT(p0);
    }

    static void WREN_MISC_SET_WIND(WrenVM* vm)
    {
        float speed = (float)wrenGetSlotDouble(vm, 1);

        MISC::SET_WIND(speed);
    }

    static void WREN_MISC_SET_WIND_SPEED(WrenVM* vm)
    {
        float speed = (float)wrenGetSlotDouble(vm, 1);

        MISC::SET_WIND_SPEED(speed);
    }

    static void WREN_MISC_GET_WIND_SPEED(WrenVM* vm)
    {

        float res = MISC::GET_WIND_SPEED();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_MISC_SET_WIND_DIRECTION(WrenVM* vm)
    {
        float direction = (float)wrenGetSlotDouble(vm, 1);

        MISC::SET_WIND_DIRECTION(direction);
    }

    static void WREN_MISC_GET_WIND_DIRECTION(WrenVM* vm)
    {

        Vector3 res = MISC::GET_WIND_DIRECTION();

        wrenEnsureSlots(vm, 1);

        wrenGetVariable(vm, "natives", "Vector3", 0);
        Vector3* wren_res = (Vector3*)wrenSetSlotNewForeign(vm, 0, 0, sizeof(Vector3));
        wren_res->x = res.x;
        wren_res->y = res.y;
        wren_res->z = res.z;
    }

    static void WREN_MISC_SET_RAIN(WrenVM* vm)
    {
        float intensity = (float)wrenGetSlotDouble(vm, 1);

        MISC::SET_RAIN(intensity);
    }

    static void WREN_MISC_GET_RAIN_LEVEL(WrenVM* vm)
    {

        float res = MISC::GET_RAIN_LEVEL();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_MISC_SET_SNOW(WrenVM* vm)
    {
        float level = (float)wrenGetSlotDouble(vm, 1);

        MISC::SET_SNOW(level);
    }

    static void WREN_MISC_GET_SNOW_LEVEL(WrenVM* vm)
    {

        float res = MISC::GET_SNOW_LEVEL();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_MISC_FORCE_LIGHTNING_FLASH(WrenVM* vm)
    {

        MISC::FORCE_LIGHTNING_FLASH();
    }

    static void WREN_MISC_SET_CLOUD_SETTINGS_OVERRIDE(WrenVM* vm)
    {
        const char* p0 = wrenGetSlotString(vm, 1);

        MISC::SET_CLOUD_SETTINGS_OVERRIDE(p0);
    }

    static void WREN_MISC_PRELOAD_CLOUD_HAT(WrenVM* vm)
    {
        const char* name = wrenGetSlotString(vm, 1);

        MISC::PRELOAD_CLOUD_HAT(name);
    }

    static void WREN_MISC_LOAD_CLOUD_HAT(WrenVM* vm)
    {
        const char* name = wrenGetSlotString(vm, 1);
        float transitionTime = (float)wrenGetSlotDouble(vm, 2);

        MISC::LOAD_CLOUD_HAT(name, transitionTime);
    }

    static void WREN_MISC_UNLOAD_CLOUD_HAT(WrenVM* vm)
    {
        const char* name = wrenGetSlotString(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);

        MISC::UNLOAD_CLOUD_HAT(name, p1);
    }

    static void WREN_MISC_UNLOAD_ALL_CLOUD_HATS(WrenVM* vm)
    {

        MISC::UNLOAD_ALL_CLOUD_HATS();
    }

    static void WREN_MISC_SET_CLOUDS_ALPHA(WrenVM* vm)
    {
        float opacity = (float)wrenGetSlotDouble(vm, 1);

        MISC::SET_CLOUDS_ALPHA(opacity);
    }

    static void WREN_MISC_GET_CLOUDS_ALPHA(WrenVM* vm)
    {

        float res = MISC::GET_CLOUDS_ALPHA();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_MISC_GET_GAME_TIMER(WrenVM* vm)
    {

        int res = MISC::GET_GAME_TIMER();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_MISC_GET_FRAME_TIME(WrenVM* vm)
    {

        float res = MISC::GET_FRAME_TIME();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_MISC_GET_SYSTEM_TIME_STEP(WrenVM* vm)
    {

        float res = MISC::GET_SYSTEM_TIME_STEP();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_MISC_GET_FRAME_COUNT(WrenVM* vm)
    {

        int res = MISC::GET_FRAME_COUNT();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_MISC_GET_RANDOM_FLOAT_IN_RANGE(WrenVM* vm)
    {
        float startRange = (float)wrenGetSlotDouble(vm, 1);
        float endRange = (float)wrenGetSlotDouble(vm, 2);

        float res = MISC::GET_RANDOM_FLOAT_IN_RANGE(startRange, endRange);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_MISC_GET_RANDOM_INT_IN_RANGE(WrenVM* vm)
    {
        int startRange = (int)wrenGetSlotDouble(vm, 1);
        int endRange = (int)wrenGetSlotDouble(vm, 2);

        int res = MISC::GET_RANDOM_INT_IN_RANGE(startRange, endRange);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_MISC_GET_RANDOM_MWC_INT_IN_RANGE(WrenVM* vm)
    {
        int startRange = (int)wrenGetSlotDouble(vm, 1);
        int endRange = (int)wrenGetSlotDouble(vm, 2);

        int res = MISC::GET_RANDOM_MWC_INT_IN_RANGE(startRange, endRange);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_MISC_GET_GROUND_Z_FOR_3D_COORD(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        float groundZ;
        BOOL ignoreWater = (BOOL)wrenGetSlotBool(vm, 4);
        BOOL p5 = (BOOL)wrenGetSlotBool(vm, 5);

        BOOL res = MISC::GET_GROUND_Z_FOR_3D_COORD(x, y, z, &groundZ, ignoreWater, p5);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, groundZ);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_MISC_GET_GROUND_Z_AND_NORMAL_FOR_3D_COORD(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        float groundZ;
        Vector3 normal;

        BOOL res = MISC::GET_GROUND_Z_AND_NORMAL_FOR_3D_COORD(x, y, z, &groundZ, &normal);

        wrenEnsureSlots(vm, 6);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, groundZ);
        wrenInsertInList(vm, 0, 1, 2);

        wrenGetVariable(vm, "natives", "Vector3", 3);
        Vector3* wren_normal = (Vector3*)wrenSetSlotNewForeign(vm, 4, 3, sizeof(Vector3));
        wren_normal->x = normal.x;
        wren_normal->y = normal.y;
        wren_normal->z = normal.z;
        wrenInsertInList(vm, 0, 2, 4);

    }

    static void WREN_MISC_GET_GROUND_Z_EXCLUDING_OBJECTS_FOR_3D_COORD(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        float groundZ;
        BOOL p4 = (BOOL)wrenGetSlotBool(vm, 4);
        BOOL p5 = (BOOL)wrenGetSlotBool(vm, 5);

        BOOL res = MISC::GET_GROUND_Z_EXCLUDING_OBJECTS_FOR_3D_COORD(x, y, z, &groundZ, p4, p5);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, groundZ);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_MISC_ASIN(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);

        float res = MISC::ASIN(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_MISC_ACOS(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);

        float res = MISC::ACOS(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_MISC_TAN(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);

        float res = MISC::TAN(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_MISC_ATAN(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);

        float res = MISC::ATAN(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_MISC_ATAN2(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);

        float res = MISC::ATAN2(p0, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_MISC_GET_DISTANCE_BETWEEN_COORDS(WrenVM* vm)
    {
        float x1 = (float)wrenGetSlotDouble(vm, 1);
        float y1 = (float)wrenGetSlotDouble(vm, 2);
        float z1 = (float)wrenGetSlotDouble(vm, 3);
        float x2 = (float)wrenGetSlotDouble(vm, 4);
        float y2 = (float)wrenGetSlotDouble(vm, 5);
        float z2 = (float)wrenGetSlotDouble(vm, 6);
        BOOL useZ = (BOOL)wrenGetSlotBool(vm, 7);

        float res = MISC::GET_DISTANCE_BETWEEN_COORDS(x1, y1, z1, x2, y2, z2, useZ);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_MISC_GET_ANGLE_BETWEEN_2D_VECTORS(WrenVM* vm)
    {
        float x1 = (float)wrenGetSlotDouble(vm, 1);
        float y1 = (float)wrenGetSlotDouble(vm, 2);
        float x2 = (float)wrenGetSlotDouble(vm, 3);
        float y2 = (float)wrenGetSlotDouble(vm, 4);

        float res = MISC::GET_ANGLE_BETWEEN_2D_VECTORS(x1, y1, x2, y2);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_MISC_GET_HEADING_FROM_VECTOR_2D(WrenVM* vm)
    {
        float dx = (float)wrenGetSlotDouble(vm, 1);
        float dy = (float)wrenGetSlotDouble(vm, 2);

        float res = MISC::GET_HEADING_FROM_VECTOR_2D(dx, dy);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_MISC_GET_RATIO_OF_CLOSEST_POINT_ON_LINE(WrenVM* vm)
    {
        float x1 = (float)wrenGetSlotDouble(vm, 1);
        float y1 = (float)wrenGetSlotDouble(vm, 2);
        float z1 = (float)wrenGetSlotDouble(vm, 3);
        float x2 = (float)wrenGetSlotDouble(vm, 4);
        float y2 = (float)wrenGetSlotDouble(vm, 5);
        float z2 = (float)wrenGetSlotDouble(vm, 6);
        float x3 = (float)wrenGetSlotDouble(vm, 7);
        float y3 = (float)wrenGetSlotDouble(vm, 8);
        float z3 = (float)wrenGetSlotDouble(vm, 9);
        BOOL clamp = (BOOL)wrenGetSlotBool(vm, 10);

        float res = MISC::GET_RATIO_OF_CLOSEST_POINT_ON_LINE(x1, y1, z1, x2, y2, z2, x3, y3, z3, clamp);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_MISC_GET_CLOSEST_POINT_ON_LINE(WrenVM* vm)
    {
        float x1 = (float)wrenGetSlotDouble(vm, 1);
        float y1 = (float)wrenGetSlotDouble(vm, 2);
        float z1 = (float)wrenGetSlotDouble(vm, 3);
        float x2 = (float)wrenGetSlotDouble(vm, 4);
        float y2 = (float)wrenGetSlotDouble(vm, 5);
        float z2 = (float)wrenGetSlotDouble(vm, 6);
        float x3 = (float)wrenGetSlotDouble(vm, 7);
        float y3 = (float)wrenGetSlotDouble(vm, 8);
        float z3 = (float)wrenGetSlotDouble(vm, 9);
        BOOL clamp = (BOOL)wrenGetSlotBool(vm, 10);

        Vector3 res = MISC::GET_CLOSEST_POINT_ON_LINE(x1, y1, z1, x2, y2, z2, x3, y3, z3, clamp);

        wrenEnsureSlots(vm, 1);

        wrenGetVariable(vm, "natives", "Vector3", 0);
        Vector3* wren_res = (Vector3*)wrenSetSlotNewForeign(vm, 0, 0, sizeof(Vector3));
        wren_res->x = res.x;
        wren_res->y = res.y;
        wren_res->z = res.z;
    }

    static void WREN_MISC_GET_LINE_PLANE_INTERSECTION(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);
        float p2 = (float)wrenGetSlotDouble(vm, 3);
        float p3 = (float)wrenGetSlotDouble(vm, 4);
        float p4 = (float)wrenGetSlotDouble(vm, 5);
        float p5 = (float)wrenGetSlotDouble(vm, 6);
        float p6 = (float)wrenGetSlotDouble(vm, 7);
        float p7 = (float)wrenGetSlotDouble(vm, 8);
        float p8 = (float)wrenGetSlotDouble(vm, 9);
        float p9 = (float)wrenGetSlotDouble(vm, 10);
        float p10 = (float)wrenGetSlotDouble(vm, 11);
        float p11 = (float)wrenGetSlotDouble(vm, 12);
        float p12;

        BOOL res = MISC::GET_LINE_PLANE_INTERSECTION(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, &p12);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p12);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_MISC_GET_POINT_AREA_OVERLAP(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);
        Any p5 = (Any)wrenGetSlotDouble(vm, 6);
        Any p6 = (Any)wrenGetSlotDouble(vm, 7);
        Any p7 = (Any)wrenGetSlotDouble(vm, 8);
        Any p8 = (Any)wrenGetSlotDouble(vm, 9);
        Any p9 = (Any)wrenGetSlotDouble(vm, 10);
        Any p10 = (Any)wrenGetSlotDouble(vm, 11);
        Any p11 = (Any)wrenGetSlotDouble(vm, 12);
        Any p12 = (Any)wrenGetSlotDouble(vm, 13);
        Any p13 = (Any)wrenGetSlotDouble(vm, 14);

        Any res = MISC::GET_POINT_AREA_OVERLAP(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_MISC_SET_BIT(WrenVM* vm)
    {
        int address;
        int offset = (int)wrenGetSlotDouble(vm, 1);

        MISC::SET_BIT(&address, offset);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_MISC_CLEAR_BIT(WrenVM* vm)
    {
        int address;
        int offset = (int)wrenGetSlotDouble(vm, 1);

        MISC::CLEAR_BIT(&address, offset);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_MISC_GET_HASH_KEY(WrenVM* vm)
    {
        const char* string = wrenGetSlotString(vm, 1);

        Hash res = MISC::GET_HASH_KEY(string);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_MISC_SLERP_NEAR_QUATERNION(WrenVM* vm)
    {
        float t = (float)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);
        float w = (float)wrenGetSlotDouble(vm, 5);
        float x1 = (float)wrenGetSlotDouble(vm, 6);
        float y1 = (float)wrenGetSlotDouble(vm, 7);
        float z1 = (float)wrenGetSlotDouble(vm, 8);
        float w1 = (float)wrenGetSlotDouble(vm, 9);
        float outX;
        float outY;
        float outZ;
        float outW;

        MISC::SLERP_NEAR_QUATERNION(t, x, y, z, w, x1, y1, z1, w1, &outX, &outY, &outZ, &outW);

        wrenEnsureSlots(vm, 8);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, outX);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, outY);
        wrenInsertInList(vm, 0, 1, 2);

        wrenSetSlotDouble(vm, 3, outZ);
        wrenInsertInList(vm, 0, 2, 3);

        wrenSetSlotDouble(vm, 4, outW);
        wrenInsertInList(vm, 0, 3, 4);

    }

    static void WREN_MISC_IS_AREA_OCCUPIED(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);
        float p2 = (float)wrenGetSlotDouble(vm, 3);
        float p3 = (float)wrenGetSlotDouble(vm, 4);
        float p4 = (float)wrenGetSlotDouble(vm, 5);
        float p5 = (float)wrenGetSlotDouble(vm, 6);
        BOOL p6 = (BOOL)wrenGetSlotBool(vm, 7);
        BOOL p7 = (BOOL)wrenGetSlotBool(vm, 8);
        BOOL p8 = (BOOL)wrenGetSlotBool(vm, 9);
        BOOL p9 = (BOOL)wrenGetSlotBool(vm, 10);
        BOOL p10 = (BOOL)wrenGetSlotBool(vm, 11);
        Any p11 = (Any)wrenGetSlotDouble(vm, 12);
        BOOL p12 = (BOOL)wrenGetSlotBool(vm, 13);

        BOOL res = MISC::IS_AREA_OCCUPIED(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MISC_IS_AREA_OCCUPIED_SLOW(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);
        Any p5 = (Any)wrenGetSlotDouble(vm, 6);
        Any p6 = (Any)wrenGetSlotDouble(vm, 7);
        Any p7 = (Any)wrenGetSlotDouble(vm, 8);
        Any p8 = (Any)wrenGetSlotDouble(vm, 9);
        Any p9 = (Any)wrenGetSlotDouble(vm, 10);
        Any p10 = (Any)wrenGetSlotDouble(vm, 11);
        Any p11 = (Any)wrenGetSlotDouble(vm, 12);
        Any p12 = (Any)wrenGetSlotDouble(vm, 13);

        Any res = MISC::IS_AREA_OCCUPIED_SLOW(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_MISC_IS_POSITION_OCCUPIED(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        float range = (float)wrenGetSlotDouble(vm, 4);
        BOOL p4 = (BOOL)wrenGetSlotBool(vm, 5);
        BOOL checkVehicles = (BOOL)wrenGetSlotBool(vm, 6);
        BOOL checkPeds = (BOOL)wrenGetSlotBool(vm, 7);
        BOOL p7 = (BOOL)wrenGetSlotBool(vm, 8);
        BOOL p8 = (BOOL)wrenGetSlotBool(vm, 9);
        Entity ignoreEntity = (Entity)wrenGetSlotDouble(vm, 10);
        BOOL p10 = (BOOL)wrenGetSlotBool(vm, 11);

        BOOL res = MISC::IS_POSITION_OCCUPIED(x, y, z, range, p4, checkVehicles, checkPeds, p7, p8, ignoreEntity, p10);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MISC_IS_POINT_OBSCURED_BY_A_MISSION_ENTITY(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);
        float p2 = (float)wrenGetSlotDouble(vm, 3);
        float p3 = (float)wrenGetSlotDouble(vm, 4);
        float p4 = (float)wrenGetSlotDouble(vm, 5);
        float p5 = (float)wrenGetSlotDouble(vm, 6);
        Any p6 = (Any)wrenGetSlotDouble(vm, 7);

        BOOL res = MISC::IS_POINT_OBSCURED_BY_A_MISSION_ENTITY(p0, p1, p2, p3, p4, p5, p6);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MISC_CLEAR_AREA(WrenVM* vm)
    {
        float X = (float)wrenGetSlotDouble(vm, 1);
        float Y = (float)wrenGetSlotDouble(vm, 2);
        float Z = (float)wrenGetSlotDouble(vm, 3);
        float radius = (float)wrenGetSlotDouble(vm, 4);
        BOOL p4 = (BOOL)wrenGetSlotBool(vm, 5);
        BOOL ignoreCopCars = (BOOL)wrenGetSlotBool(vm, 6);
        BOOL ignoreObjects = (BOOL)wrenGetSlotBool(vm, 7);
        BOOL p7 = (BOOL)wrenGetSlotBool(vm, 8);

        MISC::CLEAR_AREA(X, Y, Z, radius, p4, ignoreCopCars, ignoreObjects, p7);
    }

    static void WREN_MISC_CLEAR_AREA_LEAVE_VEHICLE_HEALTH(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        float radius = (float)wrenGetSlotDouble(vm, 4);
        BOOL p4 = (BOOL)wrenGetSlotBool(vm, 5);
        BOOL p5 = (BOOL)wrenGetSlotBool(vm, 6);
        BOOL p6 = (BOOL)wrenGetSlotBool(vm, 7);
        BOOL p7 = (BOOL)wrenGetSlotBool(vm, 8);

        MISC::CLEAR_AREA_LEAVE_VEHICLE_HEALTH(x, y, z, radius, p4, p5, p6, p7);
    }

    static void WREN_MISC_CLEAR_AREA_OF_VEHICLES(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        float radius = (float)wrenGetSlotDouble(vm, 4);
        BOOL p4 = (BOOL)wrenGetSlotBool(vm, 5);
        BOOL p5 = (BOOL)wrenGetSlotBool(vm, 6);
        BOOL p6 = (BOOL)wrenGetSlotBool(vm, 7);
        BOOL p7 = (BOOL)wrenGetSlotBool(vm, 8);
        BOOL p8 = (BOOL)wrenGetSlotBool(vm, 9);
        BOOL p9 = (BOOL)wrenGetSlotBool(vm, 10);
        Any p10 = (Any)wrenGetSlotDouble(vm, 11);

        MISC::CLEAR_AREA_OF_VEHICLES(x, y, z, radius, p4, p5, p6, p7, p8, p9, p10);
    }

    static void WREN_MISC_CLEAR_ANGLED_AREA_OF_VEHICLES(WrenVM* vm)
    {
        float x1 = (float)wrenGetSlotDouble(vm, 1);
        float y1 = (float)wrenGetSlotDouble(vm, 2);
        float z1 = (float)wrenGetSlotDouble(vm, 3);
        float x2 = (float)wrenGetSlotDouble(vm, 4);
        float y2 = (float)wrenGetSlotDouble(vm, 5);
        float z2 = (float)wrenGetSlotDouble(vm, 6);
        float width = (float)wrenGetSlotDouble(vm, 7);
        BOOL p7 = (BOOL)wrenGetSlotBool(vm, 8);
        BOOL p8 = (BOOL)wrenGetSlotBool(vm, 9);
        BOOL p9 = (BOOL)wrenGetSlotBool(vm, 10);
        BOOL p10 = (BOOL)wrenGetSlotBool(vm, 11);
        BOOL p11 = (BOOL)wrenGetSlotBool(vm, 12);
        Any p12 = (Any)wrenGetSlotDouble(vm, 13);
        Any p13 = (Any)wrenGetSlotDouble(vm, 14);

        MISC::CLEAR_ANGLED_AREA_OF_VEHICLES(x1, y1, z1, x2, y2, z2, width, p7, p8, p9, p10, p11, p12, p13);
    }

    static void WREN_MISC_CLEAR_AREA_OF_OBJECTS(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        float radius = (float)wrenGetSlotDouble(vm, 4);
        int flags = (int)wrenGetSlotDouble(vm, 5);

        MISC::CLEAR_AREA_OF_OBJECTS(x, y, z, radius, flags);
    }

    static void WREN_MISC_CLEAR_AREA_OF_PEDS(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        float radius = (float)wrenGetSlotDouble(vm, 4);
        int flags = (int)wrenGetSlotDouble(vm, 5);

        MISC::CLEAR_AREA_OF_PEDS(x, y, z, radius, flags);
    }

    static void WREN_MISC_CLEAR_AREA_OF_COPS(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        float radius = (float)wrenGetSlotDouble(vm, 4);
        int flags = (int)wrenGetSlotDouble(vm, 5);

        MISC::CLEAR_AREA_OF_COPS(x, y, z, radius, flags);
    }

    static void WREN_MISC_CLEAR_AREA_OF_PROJECTILES(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        float radius = (float)wrenGetSlotDouble(vm, 4);
        int flags = (int)wrenGetSlotDouble(vm, 5);

        MISC::CLEAR_AREA_OF_PROJECTILES(x, y, z, radius, flags);
    }

    static void WREN_MISC_CLEAR_SCENARIO_SPAWN_HISTORY(WrenVM* vm)
    {

        MISC::CLEAR_SCENARIO_SPAWN_HISTORY();
    }

    static void WREN_MISC_SET_SAVE_MENU_ACTIVE(WrenVM* vm)
    {
        BOOL ignoreVehicle = (BOOL)wrenGetSlotBool(vm, 1);

        MISC::SET_SAVE_MENU_ACTIVE(ignoreVehicle);
    }

    static void WREN_MISC_GET_STATUS_OF_MANUAL_SAVE(WrenVM* vm)
    {

        int res = MISC::GET_STATUS_OF_MANUAL_SAVE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_MISC_SET_CREDITS_ACTIVE(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        MISC::SET_CREDITS_ACTIVE(toggle);
    }

    static void WREN_MISC_SET_CREDITS_FADE_OUT_WITH_SCREEN(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        MISC::SET_CREDITS_FADE_OUT_WITH_SCREEN(toggle);
    }

    static void WREN_MISC_HAVE_CREDITS_REACHED_END(WrenVM* vm)
    {

        BOOL res = MISC::HAVE_CREDITS_REACHED_END();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MISC_TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME(WrenVM* vm)
    {
        const char* scriptName = wrenGetSlotString(vm, 1);

        MISC::TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME(scriptName);
    }

    static void WREN_MISC_NETWORK_SET_SCRIPT_IS_SAFE_FOR_NETWORK_GAME(WrenVM* vm)
    {

        MISC::NETWORK_SET_SCRIPT_IS_SAFE_FOR_NETWORK_GAME();
    }

    static void WREN_MISC_ADD_HOSPITAL_RESTART(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        float p3 = (float)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);

        int res = MISC::ADD_HOSPITAL_RESTART(x, y, z, p3, p4);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_MISC_DISABLE_HOSPITAL_RESTART(WrenVM* vm)
    {
        int hospitalIndex = (int)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        MISC::DISABLE_HOSPITAL_RESTART(hospitalIndex, toggle);
    }

    static void WREN_MISC_ADD_POLICE_RESTART(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);
        float p2 = (float)wrenGetSlotDouble(vm, 3);
        float p3 = (float)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);

        Any res = MISC::ADD_POLICE_RESTART(p0, p1, p2, p3, p4);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_MISC_DISABLE_POLICE_RESTART(WrenVM* vm)
    {
        int policeIndex = (int)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        MISC::DISABLE_POLICE_RESTART(policeIndex, toggle);
    }

    static void WREN_MISC_SET_RESTART_COORD_OVERRIDE(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        float heading = (float)wrenGetSlotDouble(vm, 4);

        MISC::SET_RESTART_COORD_OVERRIDE(x, y, z, heading);
    }

    static void WREN_MISC_CLEAR_RESTART_COORD_OVERRIDE(WrenVM* vm)
    {

        MISC::CLEAR_RESTART_COORD_OVERRIDE();
    }

    static void WREN_MISC_PAUSE_DEATH_ARREST_RESTART(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        MISC::PAUSE_DEATH_ARREST_RESTART(toggle);
    }

    static void WREN_MISC_IGNORE_NEXT_RESTART(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        MISC::IGNORE_NEXT_RESTART(toggle);
    }

    static void WREN_MISC_SET_FADE_OUT_AFTER_DEATH(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        MISC::SET_FADE_OUT_AFTER_DEATH(toggle);
    }

    static void WREN_MISC_SET_FADE_OUT_AFTER_ARREST(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        MISC::SET_FADE_OUT_AFTER_ARREST(toggle);
    }

    static void WREN_MISC_SET_FADE_IN_AFTER_DEATH_ARREST(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        MISC::SET_FADE_IN_AFTER_DEATH_ARREST(toggle);
    }

    static void WREN_MISC_SET_FADE_IN_AFTER_LOAD(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        MISC::SET_FADE_IN_AFTER_LOAD(toggle);
    }

    static void WREN_MISC_REGISTER_SAVE_HOUSE(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);
        float p2 = (float)wrenGetSlotDouble(vm, 3);
        float p3 = (float)wrenGetSlotDouble(vm, 4);
        Any p4;
        Any p5 = (Any)wrenGetSlotDouble(vm, 5);
        Any p6 = (Any)wrenGetSlotDouble(vm, 6);

        Any res = MISC::REGISTER_SAVE_HOUSE(p0, p1, p2, p3, &p4, p5, p6);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p4);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_MISC_SET_SAVE_HOUSE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        MISC::SET_SAVE_HOUSE(p0, p1, p2);
    }

    static void WREN_MISC_OVERRIDE_SAVE_HOUSE(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);
        float p2 = (float)wrenGetSlotDouble(vm, 3);
        float p3 = (float)wrenGetSlotDouble(vm, 4);
        float p4 = (float)wrenGetSlotDouble(vm, 5);
        BOOL p5 = (BOOL)wrenGetSlotBool(vm, 6);
        float p6 = (float)wrenGetSlotDouble(vm, 7);
        float p7 = (float)wrenGetSlotDouble(vm, 8);

        BOOL res = MISC::OVERRIDE_SAVE_HOUSE(p0, p1, p2, p3, p4, p5, p6, p7);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MISC_GET_SAVE_HOUSE_DETAILS_AFTER_SUCCESSFUL_LOAD(WrenVM* vm)
    {
        Vector3 p0;
        float p1;
        BOOL fadeInAfterLoad;
        BOOL p3;

        BOOL res = MISC::GET_SAVE_HOUSE_DETAILS_AFTER_SUCCESSFUL_LOAD(&p0, &p1, &fadeInAfterLoad, &p3);

        wrenEnsureSlots(vm, 10);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenGetVariable(vm, "natives", "Vector3", 2);
        Vector3* wren_p0 = (Vector3*)wrenSetSlotNewForeign(vm, 3, 2, sizeof(Vector3));
        wren_p0->x = p0.x;
        wren_p0->y = p0.y;
        wren_p0->z = p0.z;
        wrenInsertInList(vm, 0, 1, 3);

        wrenSetSlotDouble(vm, 4, p1);
        wrenInsertInList(vm, 0, 2, 4);

        wrenSetSlotBool(vm, 5, (bool)fadeInAfterLoad);
        wrenInsertInList(vm, 0, 3, 5);

        wrenSetSlotBool(vm, 6, (bool)p3);
        wrenInsertInList(vm, 0, 4, 6);

    }

    static void WREN_MISC_DO_AUTO_SAVE(WrenVM* vm)
    {

        MISC::DO_AUTO_SAVE();
    }

    static void WREN_MISC_GET_IS_AUTO_SAVE_OFF(WrenVM* vm)
    {

        BOOL res = MISC::GET_IS_AUTO_SAVE_OFF();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MISC_IS_AUTO_SAVE_IN_PROGRESS(WrenVM* vm)
    {

        BOOL res = MISC::IS_AUTO_SAVE_IN_PROGRESS();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MISC_HAS_CODE_REQUESTED_AUTOSAVE(WrenVM* vm)
    {

        BOOL res = MISC::HAS_CODE_REQUESTED_AUTOSAVE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MISC_CLEAR_CODE_REQUESTED_AUTOSAVE(WrenVM* vm)
    {

        MISC::CLEAR_CODE_REQUESTED_AUTOSAVE();
    }

    static void WREN_MISC_BEGIN_REPLAY_STATS(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        MISC::BEGIN_REPLAY_STATS(p0, p1);
    }

    static void WREN_MISC_ADD_REPLAY_STAT_VALUE(WrenVM* vm)
    {
        Any value = (Any)wrenGetSlotDouble(vm, 1);

        MISC::ADD_REPLAY_STAT_VALUE(value);
    }

    static void WREN_MISC_END_REPLAY_STATS(WrenVM* vm)
    {

        MISC::END_REPLAY_STATS();
    }

    static void WREN_MISC_HAVE_REPLAY_STATS_BEEN_STORED(WrenVM* vm)
    {

        Any res = MISC::HAVE_REPLAY_STATS_BEEN_STORED();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_MISC_GET_REPLAY_STAT_MISSION_ID(WrenVM* vm)
    {

        Any res = MISC::GET_REPLAY_STAT_MISSION_ID();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_MISC_GET_REPLAY_STAT_MISSION_TYPE(WrenVM* vm)
    {

        int res = MISC::GET_REPLAY_STAT_MISSION_TYPE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_MISC_GET_REPLAY_STAT_COUNT(WrenVM* vm)
    {

        int res = MISC::GET_REPLAY_STAT_COUNT();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_MISC_GET_REPLAY_STAT_AT_INDEX(WrenVM* vm)
    {
        int index = (int)wrenGetSlotDouble(vm, 1);

        int res = MISC::GET_REPLAY_STAT_AT_INDEX(index);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_MISC_CLEAR_REPLAY_STATS(WrenVM* vm)
    {

        MISC::CLEAR_REPLAY_STATS();
    }

    static void WREN_MISC_QUEUE_MISSION_REPEAT_LOAD(WrenVM* vm)
    {

        BOOL res = MISC::QUEUE_MISSION_REPEAT_LOAD();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MISC_QUEUE_MISSION_REPEAT_SAVE(WrenVM* vm)
    {

        BOOL res = MISC::QUEUE_MISSION_REPEAT_SAVE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MISC_QUEUE_MISSION_REPEAT_SAVE_FOR_BENCHMARK_TEST(WrenVM* vm)
    {

        Any res = MISC::QUEUE_MISSION_REPEAT_SAVE_FOR_BENCHMARK_TEST();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_MISC_GET_STATUS_OF_MISSION_REPEAT_SAVE(WrenVM* vm)
    {

        int res = MISC::GET_STATUS_OF_MISSION_REPEAT_SAVE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_MISC_IS_MEMORY_CARD_IN_USE(WrenVM* vm)
    {

        BOOL res = MISC::IS_MEMORY_CARD_IN_USE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MISC_SHOOT_SINGLE_BULLET_BETWEEN_COORDS(WrenVM* vm)
    {
        float x1 = (float)wrenGetSlotDouble(vm, 1);
        float y1 = (float)wrenGetSlotDouble(vm, 2);
        float z1 = (float)wrenGetSlotDouble(vm, 3);
        float x2 = (float)wrenGetSlotDouble(vm, 4);
        float y2 = (float)wrenGetSlotDouble(vm, 5);
        float z2 = (float)wrenGetSlotDouble(vm, 6);
        int damage = (int)wrenGetSlotDouble(vm, 7);
        BOOL p7 = (BOOL)wrenGetSlotBool(vm, 8);
        Hash weaponHash = (Hash)wrenGetSlotDouble(vm, 9);
        Ped ownerPed = (Ped)wrenGetSlotDouble(vm, 10);
        BOOL isAudible = (BOOL)wrenGetSlotBool(vm, 11);
        BOOL isInvisible = (BOOL)wrenGetSlotBool(vm, 12);
        float speed = (float)wrenGetSlotDouble(vm, 13);

        MISC::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(x1, y1, z1, x2, y2, z2, damage, p7, weaponHash, ownerPed, isAudible, isInvisible, speed);
    }

    static void WREN_MISC_SHOOT_SINGLE_BULLET_BETWEEN_COORDS_IGNORE_ENTITY(WrenVM* vm)
    {
        float x1 = (float)wrenGetSlotDouble(vm, 1);
        float y1 = (float)wrenGetSlotDouble(vm, 2);
        float z1 = (float)wrenGetSlotDouble(vm, 3);
        float x2 = (float)wrenGetSlotDouble(vm, 4);
        float y2 = (float)wrenGetSlotDouble(vm, 5);
        float z2 = (float)wrenGetSlotDouble(vm, 6);
        int damage = (int)wrenGetSlotDouble(vm, 7);
        BOOL p7 = (BOOL)wrenGetSlotBool(vm, 8);
        Hash weaponHash = (Hash)wrenGetSlotDouble(vm, 9);
        Ped ownerPed = (Ped)wrenGetSlotDouble(vm, 10);
        BOOL isAudible = (BOOL)wrenGetSlotBool(vm, 11);
        BOOL isInvisible = (BOOL)wrenGetSlotBool(vm, 12);
        float speed = (float)wrenGetSlotDouble(vm, 13);
        Entity entity = (Entity)wrenGetSlotDouble(vm, 14);
        Any p14 = (Any)wrenGetSlotDouble(vm, 15);

        MISC::SHOOT_SINGLE_BULLET_BETWEEN_COORDS_IGNORE_ENTITY(x1, y1, z1, x2, y2, z2, damage, p7, weaponHash, ownerPed, isAudible, isInvisible, speed, entity, p14);
    }

    static void WREN_MISC_SHOOT_SINGLE_BULLET_BETWEEN_COORDS_IGNORE_ENTITY_NEW(WrenVM* vm)
    {
        float x1 = (float)wrenGetSlotDouble(vm, 1);
        float y1 = (float)wrenGetSlotDouble(vm, 2);
        float z1 = (float)wrenGetSlotDouble(vm, 3);
        float x2 = (float)wrenGetSlotDouble(vm, 4);
        float y2 = (float)wrenGetSlotDouble(vm, 5);
        float z2 = (float)wrenGetSlotDouble(vm, 6);
        int damage = (int)wrenGetSlotDouble(vm, 7);
        BOOL p7 = (BOOL)wrenGetSlotBool(vm, 8);
        Hash weaponHash = (Hash)wrenGetSlotDouble(vm, 9);
        Ped ownerPed = (Ped)wrenGetSlotDouble(vm, 10);
        BOOL isAudible = (BOOL)wrenGetSlotBool(vm, 11);
        BOOL isInvisible = (BOOL)wrenGetSlotBool(vm, 12);
        float speed = (float)wrenGetSlotDouble(vm, 13);
        Entity entity = (Entity)wrenGetSlotDouble(vm, 14);
        BOOL p14 = (BOOL)wrenGetSlotBool(vm, 15);
        BOOL p15 = (BOOL)wrenGetSlotBool(vm, 16);
        Entity targetEntity = (Entity)wrenGetSlotDouble(vm, 17);
        BOOL p17 = (BOOL)wrenGetSlotBool(vm, 18);
        Any p18 = (Any)wrenGetSlotDouble(vm, 19);
        Any p19 = (Any)wrenGetSlotDouble(vm, 20);
        Any p20 = (Any)wrenGetSlotDouble(vm, 21);

        MISC::SHOOT_SINGLE_BULLET_BETWEEN_COORDS_IGNORE_ENTITY_NEW(x1, y1, z1, x2, y2, z2, damage, p7, weaponHash, ownerPed, isAudible, isInvisible, speed, entity, p14, p15, targetEntity, p17, p18, p19, p20);
    }

    static void WREN_MISC_GET_MODEL_DIMENSIONS(WrenVM* vm)
    {
        Hash modelHash = (Hash)wrenGetSlotDouble(vm, 1);
        Vector3 minimum;
        Vector3 maximum;

        MISC::GET_MODEL_DIMENSIONS(modelHash, &minimum, &maximum);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenGetVariable(vm, "natives", "Vector3", 1);
        Vector3* wren_minimum = (Vector3*)wrenSetSlotNewForeign(vm, 2, 1, sizeof(Vector3));
        wren_minimum->x = minimum.x;
        wren_minimum->y = minimum.y;
        wren_minimum->z = minimum.z;
        wrenInsertInList(vm, 0, 0, 2);

        Vector3* wren_maximum = (Vector3*)wrenSetSlotNewForeign(vm, 3, 1, sizeof(Vector3));
        wren_maximum->x = maximum.x;
        wren_maximum->y = maximum.y;
        wren_maximum->z = maximum.z;
        wrenInsertInList(vm, 0, 1, 3);

    }

    static void WREN_MISC_SET_FAKE_WANTED_LEVEL(WrenVM* vm)
    {
        int fakeWantedLevel = (int)wrenGetSlotDouble(vm, 1);

        MISC::SET_FAKE_WANTED_LEVEL(fakeWantedLevel);
    }

    static void WREN_MISC_GET_FAKE_WANTED_LEVEL(WrenVM* vm)
    {

        int res = MISC::GET_FAKE_WANTED_LEVEL();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_MISC_USING_MISSION_CREATOR(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        MISC::USING_MISSION_CREATOR(toggle);
    }

    static void WREN_MISC_ALLOW_MISSION_CREATOR_WARP(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        MISC::ALLOW_MISSION_CREATOR_WARP(toggle);
    }

    static void WREN_MISC_SET_MINIGAME_IN_PROGRESS(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        MISC::SET_MINIGAME_IN_PROGRESS(toggle);
    }

    static void WREN_MISC_IS_MINIGAME_IN_PROGRESS(WrenVM* vm)
    {

        BOOL res = MISC::IS_MINIGAME_IN_PROGRESS();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MISC_IS_THIS_A_MINIGAME_SCRIPT(WrenVM* vm)
    {

        BOOL res = MISC::IS_THIS_A_MINIGAME_SCRIPT();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MISC_IS_SNIPER_INVERTED(WrenVM* vm)
    {

        BOOL res = MISC::IS_SNIPER_INVERTED();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MISC_SHOULD_USE_METRIC_MEASUREMENTS(WrenVM* vm)
    {

        BOOL res = MISC::SHOULD_USE_METRIC_MEASUREMENTS();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MISC_GET_PROFILE_SETTING(WrenVM* vm)
    {
        int profileSetting = (int)wrenGetSlotDouble(vm, 1);

        int res = MISC::GET_PROFILE_SETTING(profileSetting);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_MISC_ARE_STRINGS_EQUAL(WrenVM* vm)
    {
        const char* string1 = wrenGetSlotString(vm, 1);
        const char* string2 = wrenGetSlotString(vm, 2);

        BOOL res = MISC::ARE_STRINGS_EQUAL(string1, string2);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MISC_COMPARE_STRINGS(WrenVM* vm)
    {
        const char* str1 = wrenGetSlotString(vm, 1);
        const char* str2 = wrenGetSlotString(vm, 2);
        BOOL matchCase = (BOOL)wrenGetSlotBool(vm, 3);
        int maxLength = (int)wrenGetSlotDouble(vm, 4);

        int res = MISC::COMPARE_STRINGS(str1, str2, matchCase, maxLength);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_MISC_ABSI(WrenVM* vm)
    {
        int value = (int)wrenGetSlotDouble(vm, 1);

        int res = MISC::ABSI(value);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_MISC_ABSF(WrenVM* vm)
    {
        float value = (float)wrenGetSlotDouble(vm, 1);

        float res = MISC::ABSF(value);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_MISC_IS_SNIPER_BULLET_IN_AREA(WrenVM* vm)
    {
        float x1 = (float)wrenGetSlotDouble(vm, 1);
        float y1 = (float)wrenGetSlotDouble(vm, 2);
        float z1 = (float)wrenGetSlotDouble(vm, 3);
        float x2 = (float)wrenGetSlotDouble(vm, 4);
        float y2 = (float)wrenGetSlotDouble(vm, 5);
        float z2 = (float)wrenGetSlotDouble(vm, 6);

        BOOL res = MISC::IS_SNIPER_BULLET_IN_AREA(x1, y1, z1, x2, y2, z2);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MISC_IS_PROJECTILE_IN_AREA(WrenVM* vm)
    {
        float x1 = (float)wrenGetSlotDouble(vm, 1);
        float y1 = (float)wrenGetSlotDouble(vm, 2);
        float z1 = (float)wrenGetSlotDouble(vm, 3);
        float x2 = (float)wrenGetSlotDouble(vm, 4);
        float y2 = (float)wrenGetSlotDouble(vm, 5);
        float z2 = (float)wrenGetSlotDouble(vm, 6);
        BOOL ownedByPlayer = (BOOL)wrenGetSlotBool(vm, 7);

        BOOL res = MISC::IS_PROJECTILE_IN_AREA(x1, y1, z1, x2, y2, z2, ownedByPlayer);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MISC_IS_PROJECTILE_TYPE_IN_AREA(WrenVM* vm)
    {
        float x1 = (float)wrenGetSlotDouble(vm, 1);
        float y1 = (float)wrenGetSlotDouble(vm, 2);
        float z1 = (float)wrenGetSlotDouble(vm, 3);
        float x2 = (float)wrenGetSlotDouble(vm, 4);
        float y2 = (float)wrenGetSlotDouble(vm, 5);
        float z2 = (float)wrenGetSlotDouble(vm, 6);
        int type = (int)wrenGetSlotDouble(vm, 7);
        BOOL ownedByPlayer = (BOOL)wrenGetSlotBool(vm, 8);

        BOOL res = MISC::IS_PROJECTILE_TYPE_IN_AREA(x1, y1, z1, x2, y2, z2, type, ownedByPlayer);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MISC_IS_PROJECTILE_TYPE_IN_ANGLED_AREA(WrenVM* vm)
    {
        float x1 = (float)wrenGetSlotDouble(vm, 1);
        float y1 = (float)wrenGetSlotDouble(vm, 2);
        float z1 = (float)wrenGetSlotDouble(vm, 3);
        float x2 = (float)wrenGetSlotDouble(vm, 4);
        float y2 = (float)wrenGetSlotDouble(vm, 5);
        float z2 = (float)wrenGetSlotDouble(vm, 6);
        float width = (float)wrenGetSlotDouble(vm, 7);
        Any p7 = (Any)wrenGetSlotDouble(vm, 8);
        BOOL ownedByPlayer = (BOOL)wrenGetSlotBool(vm, 9);

        BOOL res = MISC::IS_PROJECTILE_TYPE_IN_ANGLED_AREA(x1, y1, z1, x2, y2, z2, width, p7, ownedByPlayer);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MISC_IS_PROJECTILE_TYPE_WITHIN_DISTANCE(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        Hash projectileHash = (Hash)wrenGetSlotDouble(vm, 4);
        float radius = (float)wrenGetSlotDouble(vm, 5);
        BOOL ownedByPlayer = (BOOL)wrenGetSlotBool(vm, 6);

        BOOL res = MISC::IS_PROJECTILE_TYPE_WITHIN_DISTANCE(x, y, z, projectileHash, radius, ownedByPlayer);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MISC_GET_COORDS_OF_PROJECTILE_TYPE_IN_AREA(WrenVM* vm)
    {
        float x1 = (float)wrenGetSlotDouble(vm, 1);
        float y1 = (float)wrenGetSlotDouble(vm, 2);
        float z1 = (float)wrenGetSlotDouble(vm, 3);
        float x2 = (float)wrenGetSlotDouble(vm, 4);
        float y2 = (float)wrenGetSlotDouble(vm, 5);
        float z2 = (float)wrenGetSlotDouble(vm, 6);
        Hash projectileHash = (Hash)wrenGetSlotDouble(vm, 7);
        Vector3 projectilePos;
        BOOL ownedByPlayer = (BOOL)wrenGetSlotBool(vm, 8);

        BOOL res = MISC::GET_COORDS_OF_PROJECTILE_TYPE_IN_AREA(x1, y1, z1, x2, y2, z2, projectileHash, &projectilePos, ownedByPlayer);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenGetVariable(vm, "natives", "Vector3", 2);
        Vector3* wren_projectilePos = (Vector3*)wrenSetSlotNewForeign(vm, 3, 2, sizeof(Vector3));
        wren_projectilePos->x = projectilePos.x;
        wren_projectilePos->y = projectilePos.y;
        wren_projectilePos->z = projectilePos.z;
        wrenInsertInList(vm, 0, 1, 3);

    }

    static void WREN_MISC_GET_COORDS_OF_PROJECTILE_TYPE_WITHIN_DISTANCE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Hash weaponHash = (Hash)wrenGetSlotDouble(vm, 2);
        float distance = (float)wrenGetSlotDouble(vm, 3);
        Vector3 outCoords;
        BOOL p4 = (BOOL)wrenGetSlotBool(vm, 4);

        BOOL res = MISC::GET_COORDS_OF_PROJECTILE_TYPE_WITHIN_DISTANCE(ped, weaponHash, distance, &outCoords, p4);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenGetVariable(vm, "natives", "Vector3", 2);
        Vector3* wren_outCoords = (Vector3*)wrenSetSlotNewForeign(vm, 3, 2, sizeof(Vector3));
        wren_outCoords->x = outCoords.x;
        wren_outCoords->y = outCoords.y;
        wren_outCoords->z = outCoords.z;
        wrenInsertInList(vm, 0, 1, 3);

    }

    static void WREN_MISC_GET_PROJECTILE_OF_PROJECTILE_TYPE_WITHIN_DISTANCE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Hash weaponHash = (Hash)wrenGetSlotDouble(vm, 2);
        float distance = (float)wrenGetSlotDouble(vm, 3);
        Vector3 outCoords;
        Object outProjectile;
        BOOL p5 = (BOOL)wrenGetSlotBool(vm, 4);

        BOOL res = MISC::GET_PROJECTILE_OF_PROJECTILE_TYPE_WITHIN_DISTANCE(ped, weaponHash, distance, &outCoords, &outProjectile, p5);

        wrenEnsureSlots(vm, 6);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenGetVariable(vm, "natives", "Vector3", 2);
        Vector3* wren_outCoords = (Vector3*)wrenSetSlotNewForeign(vm, 3, 2, sizeof(Vector3));
        wren_outCoords->x = outCoords.x;
        wren_outCoords->y = outCoords.y;
        wren_outCoords->z = outCoords.z;
        wrenInsertInList(vm, 0, 1, 3);

        wrenSetSlotDouble(vm, 4, outProjectile);
        wrenInsertInList(vm, 0, 2, 4);

    }

    static void WREN_MISC_IS_BULLET_IN_ANGLED_AREA(WrenVM* vm)
    {
        float x1 = (float)wrenGetSlotDouble(vm, 1);
        float y1 = (float)wrenGetSlotDouble(vm, 2);
        float z1 = (float)wrenGetSlotDouble(vm, 3);
        float x2 = (float)wrenGetSlotDouble(vm, 4);
        float y2 = (float)wrenGetSlotDouble(vm, 5);
        float z2 = (float)wrenGetSlotDouble(vm, 6);
        float width = (float)wrenGetSlotDouble(vm, 7);
        BOOL ownedByPlayer = (BOOL)wrenGetSlotBool(vm, 8);

        BOOL res = MISC::IS_BULLET_IN_ANGLED_AREA(x1, y1, z1, x2, y2, z2, width, ownedByPlayer);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MISC_IS_BULLET_IN_AREA(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        float radius = (float)wrenGetSlotDouble(vm, 4);
        BOOL ownedByPlayer = (BOOL)wrenGetSlotBool(vm, 5);

        BOOL res = MISC::IS_BULLET_IN_AREA(x, y, z, radius, ownedByPlayer);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MISC_IS_BULLET_IN_BOX(WrenVM* vm)
    {
        float x1 = (float)wrenGetSlotDouble(vm, 1);
        float y1 = (float)wrenGetSlotDouble(vm, 2);
        float z1 = (float)wrenGetSlotDouble(vm, 3);
        float x2 = (float)wrenGetSlotDouble(vm, 4);
        float y2 = (float)wrenGetSlotDouble(vm, 5);
        float z2 = (float)wrenGetSlotDouble(vm, 6);
        BOOL ownedByPlayer = (BOOL)wrenGetSlotBool(vm, 7);

        BOOL res = MISC::IS_BULLET_IN_BOX(x1, y1, z1, x2, y2, z2, ownedByPlayer);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MISC_HAS_BULLET_IMPACTED_IN_AREA(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        float p3 = (float)wrenGetSlotDouble(vm, 4);
        BOOL p4 = (BOOL)wrenGetSlotBool(vm, 5);
        BOOL p5 = (BOOL)wrenGetSlotBool(vm, 6);

        BOOL res = MISC::HAS_BULLET_IMPACTED_IN_AREA(x, y, z, p3, p4, p5);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MISC_HAS_BULLET_IMPACTED_IN_BOX(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);
        float p2 = (float)wrenGetSlotDouble(vm, 3);
        float p3 = (float)wrenGetSlotDouble(vm, 4);
        float p4 = (float)wrenGetSlotDouble(vm, 5);
        float p5 = (float)wrenGetSlotDouble(vm, 6);
        BOOL p6 = (BOOL)wrenGetSlotBool(vm, 7);
        BOOL p7 = (BOOL)wrenGetSlotBool(vm, 8);

        BOOL res = MISC::HAS_BULLET_IMPACTED_IN_BOX(p0, p1, p2, p3, p4, p5, p6, p7);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MISC_IS_ORBIS_VERSION(WrenVM* vm)
    {

        BOOL res = MISC::IS_ORBIS_VERSION();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MISC_IS_DURANGO_VERSION(WrenVM* vm)
    {

        BOOL res = MISC::IS_DURANGO_VERSION();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MISC_IS_XBOX360_VERSION(WrenVM* vm)
    {

        BOOL res = MISC::IS_XBOX360_VERSION();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MISC_IS_PS3_VERSION(WrenVM* vm)
    {

        BOOL res = MISC::IS_PS3_VERSION();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MISC_IS_PC_VERSION(WrenVM* vm)
    {

        BOOL res = MISC::IS_PC_VERSION();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MISC_IS_STEAM_VERSION(WrenVM* vm)
    {

        BOOL res = MISC::IS_STEAM_VERSION();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MISC_IS_AUSSIE_VERSION(WrenVM* vm)
    {

        BOOL res = MISC::IS_AUSSIE_VERSION();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MISC_IS_JAPANESE_VERSION(WrenVM* vm)
    {

        BOOL res = MISC::IS_JAPANESE_VERSION();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MISC_IS_XBOX_PLATFORM(WrenVM* vm)
    {

        BOOL res = MISC::IS_XBOX_PLATFORM();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MISC_IS_SCARLETT_VERSION(WrenVM* vm)
    {

        BOOL res = MISC::IS_SCARLETT_VERSION();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MISC_IS_SCE_PLATFORM(WrenVM* vm)
    {

        BOOL res = MISC::IS_SCE_PLATFORM();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MISC_IS_PROSPERO_VERSION(WrenVM* vm)
    {

        BOOL res = MISC::IS_PROSPERO_VERSION();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MISC_IS_STRING_NULL(WrenVM* vm)
    {
        const char* string = wrenGetSlotString(vm, 1);

        BOOL res = MISC::IS_STRING_NULL(string);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MISC_IS_STRING_NULL_OR_EMPTY(WrenVM* vm)
    {
        const char* string = wrenGetSlotString(vm, 1);

        BOOL res = MISC::IS_STRING_NULL_OR_EMPTY(string);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MISC_STRING_TO_INT(WrenVM* vm)
    {
        const char* string = wrenGetSlotString(vm, 1);
        int outInteger;

        BOOL res = MISC::STRING_TO_INT(string, &outInteger);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, outInteger);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_MISC_SET_BITS_IN_RANGE(WrenVM* vm)
    {
        int var_;
        int rangeStart = (int)wrenGetSlotDouble(vm, 1);
        int rangeEnd = (int)wrenGetSlotDouble(vm, 2);
        int p3 = (int)wrenGetSlotDouble(vm, 3);

        MISC::SET_BITS_IN_RANGE(&var_, rangeStart, rangeEnd, p3);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_MISC_GET_BITS_IN_RANGE(WrenVM* vm)
    {
        int var_ = (int)wrenGetSlotDouble(vm, 1);
        int rangeStart = (int)wrenGetSlotDouble(vm, 2);
        int rangeEnd = (int)wrenGetSlotDouble(vm, 3);

        int res = MISC::GET_BITS_IN_RANGE(var_, rangeStart, rangeEnd);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_MISC_ADD_STUNT_JUMP(WrenVM* vm)
    {
        float x1 = (float)wrenGetSlotDouble(vm, 1);
        float y1 = (float)wrenGetSlotDouble(vm, 2);
        float z1 = (float)wrenGetSlotDouble(vm, 3);
        float x2 = (float)wrenGetSlotDouble(vm, 4);
        float y2 = (float)wrenGetSlotDouble(vm, 5);
        float z2 = (float)wrenGetSlotDouble(vm, 6);
        float x3 = (float)wrenGetSlotDouble(vm, 7);
        float y3 = (float)wrenGetSlotDouble(vm, 8);
        float z3 = (float)wrenGetSlotDouble(vm, 9);
        float x4 = (float)wrenGetSlotDouble(vm, 10);
        float y4 = (float)wrenGetSlotDouble(vm, 11);
        float z4 = (float)wrenGetSlotDouble(vm, 12);
        float camX = (float)wrenGetSlotDouble(vm, 13);
        float camY = (float)wrenGetSlotDouble(vm, 14);
        float camZ = (float)wrenGetSlotDouble(vm, 15);
        int p15 = (int)wrenGetSlotDouble(vm, 16);
        int p16 = (int)wrenGetSlotDouble(vm, 17);
        int p17 = (int)wrenGetSlotDouble(vm, 18);

        int res = MISC::ADD_STUNT_JUMP(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4, camX, camY, camZ, p15, p16, p17);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_MISC_ADD_STUNT_JUMP_ANGLED(WrenVM* vm)
    {
        float x1 = (float)wrenGetSlotDouble(vm, 1);
        float y1 = (float)wrenGetSlotDouble(vm, 2);
        float z1 = (float)wrenGetSlotDouble(vm, 3);
        float x2 = (float)wrenGetSlotDouble(vm, 4);
        float y2 = (float)wrenGetSlotDouble(vm, 5);
        float z2 = (float)wrenGetSlotDouble(vm, 6);
        float radius1 = (float)wrenGetSlotDouble(vm, 7);
        float x3 = (float)wrenGetSlotDouble(vm, 8);
        float y3 = (float)wrenGetSlotDouble(vm, 9);
        float z3 = (float)wrenGetSlotDouble(vm, 10);
        float x4 = (float)wrenGetSlotDouble(vm, 11);
        float y4 = (float)wrenGetSlotDouble(vm, 12);
        float z4 = (float)wrenGetSlotDouble(vm, 13);
        float radius2 = (float)wrenGetSlotDouble(vm, 14);
        float camX = (float)wrenGetSlotDouble(vm, 15);
        float camY = (float)wrenGetSlotDouble(vm, 16);
        float camZ = (float)wrenGetSlotDouble(vm, 17);
        int p17 = (int)wrenGetSlotDouble(vm, 18);
        int p18 = (int)wrenGetSlotDouble(vm, 19);
        int p19 = (int)wrenGetSlotDouble(vm, 20);

        int res = MISC::ADD_STUNT_JUMP_ANGLED(x1, y1, z1, x2, y2, z2, radius1, x3, y3, z3, x4, y4, z4, radius2, camX, camY, camZ, p17, p18, p19);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_MISC_TOGGLE_SHOW_OPTIONAL_STUNT_JUMP_CAMERA(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        MISC::TOGGLE_SHOW_OPTIONAL_STUNT_JUMP_CAMERA(toggle);
    }

    static void WREN_MISC_DELETE_STUNT_JUMP(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);

        MISC::DELETE_STUNT_JUMP(p0);
    }

    static void WREN_MISC_ENABLE_STUNT_JUMP_SET(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);

        MISC::ENABLE_STUNT_JUMP_SET(p0);
    }

    static void WREN_MISC_DISABLE_STUNT_JUMP_SET(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);

        MISC::DISABLE_STUNT_JUMP_SET(p0);
    }

    static void WREN_MISC_SET_STUNT_JUMPS_CAN_TRIGGER(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        MISC::SET_STUNT_JUMPS_CAN_TRIGGER(toggle);
    }

    static void WREN_MISC_IS_STUNT_JUMP_IN_PROGRESS(WrenVM* vm)
    {

        BOOL res = MISC::IS_STUNT_JUMP_IN_PROGRESS();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MISC_IS_STUNT_JUMP_MESSAGE_SHOWING(WrenVM* vm)
    {

        BOOL res = MISC::IS_STUNT_JUMP_MESSAGE_SHOWING();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MISC_GET_NUM_SUCCESSFUL_STUNT_JUMPS(WrenVM* vm)
    {

        int res = MISC::GET_NUM_SUCCESSFUL_STUNT_JUMPS();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_MISC_GET_TOTAL_SUCCESSFUL_STUNT_JUMPS(WrenVM* vm)
    {

        int res = MISC::GET_TOTAL_SUCCESSFUL_STUNT_JUMPS();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_MISC_CANCEL_STUNT_JUMP(WrenVM* vm)
    {

        MISC::CANCEL_STUNT_JUMP();
    }

    static void WREN_MISC_SET_GAME_PAUSED(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        MISC::SET_GAME_PAUSED(toggle);
    }

    static void WREN_MISC_SET_THIS_SCRIPT_CAN_BE_PAUSED(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        MISC::SET_THIS_SCRIPT_CAN_BE_PAUSED(toggle);
    }

    static void WREN_MISC_SET_THIS_SCRIPT_CAN_REMOVE_BLIPS_CREATED_BY_ANY_SCRIPT(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        MISC::SET_THIS_SCRIPT_CAN_REMOVE_BLIPS_CREATED_BY_ANY_SCRIPT(toggle);
    }

    static void WREN_MISC_HAS_CHEAT_WITH_HASH_BEEN_ACTIVATED(WrenVM* vm)
    {
        Hash hash = (Hash)wrenGetSlotDouble(vm, 1);
        int amount = (int)wrenGetSlotDouble(vm, 2);

        BOOL res = MISC::HAS_CHEAT_WITH_HASH_BEEN_ACTIVATED(hash, amount);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MISC_HAS_PC_CHEAT_WITH_HASH_BEEN_ACTIVATED(WrenVM* vm)
    {
        Hash hash = (Hash)wrenGetSlotDouble(vm, 1);

        BOOL res = MISC::HAS_PC_CHEAT_WITH_HASH_BEEN_ACTIVATED(hash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MISC_OVERRIDE_FREEZE_FLAGS(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        MISC::OVERRIDE_FREEZE_FLAGS(p0);
    }

    static void WREN_MISC_SET_INSTANCE_PRIORITY_MODE(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);

        MISC::SET_INSTANCE_PRIORITY_MODE(p0);
    }

    static void WREN_MISC_SET_INSTANCE_PRIORITY_HINT(WrenVM* vm)
    {
        int flag = (int)wrenGetSlotDouble(vm, 1);

        MISC::SET_INSTANCE_PRIORITY_HINT(flag);
    }

    static void WREN_MISC_IS_FRONTEND_FADING(WrenVM* vm)
    {

        BOOL res = MISC::IS_FRONTEND_FADING();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MISC_POPULATE_NOW(WrenVM* vm)
    {

        MISC::POPULATE_NOW();
    }

    static void WREN_MISC_GET_INDEX_OF_CURRENT_LEVEL(WrenVM* vm)
    {

        int res = MISC::GET_INDEX_OF_CURRENT_LEVEL();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_MISC_SET_GRAVITY_LEVEL(WrenVM* vm)
    {
        int level = (int)wrenGetSlotDouble(vm, 1);

        MISC::SET_GRAVITY_LEVEL(level);
    }

    static void WREN_MISC_START_SAVE_DATA(WrenVM* vm)
    {
        Any p0;
        Any p1 = (Any)wrenGetSlotDouble(vm, 1);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 2);

        MISC::START_SAVE_DATA(&p0, p1, p2);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_MISC_STOP_SAVE_DATA(WrenVM* vm)
    {

        MISC::STOP_SAVE_DATA();
    }

    static void WREN_MISC_GET_SIZE_OF_SAVE_DATA(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        int res = MISC::GET_SIZE_OF_SAVE_DATA(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_MISC_REGISTER_INT_TO_SAVE(WrenVM* vm)
    {
        Any p0;
        const char* name = wrenGetSlotString(vm, 1);

        MISC::REGISTER_INT_TO_SAVE(&p0, name);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_MISC_REGISTER_INT64_TO_SAVE(WrenVM* vm)
    {
        Any p0;
        const char* name = wrenGetSlotString(vm, 1);

        MISC::REGISTER_INT64_TO_SAVE(&p0, name);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_MISC_REGISTER_ENUM_TO_SAVE(WrenVM* vm)
    {
        Any p0;
        const char* name = wrenGetSlotString(vm, 1);

        MISC::REGISTER_ENUM_TO_SAVE(&p0, name);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_MISC_REGISTER_FLOAT_TO_SAVE(WrenVM* vm)
    {
        Any p0;
        const char* name = wrenGetSlotString(vm, 1);

        MISC::REGISTER_FLOAT_TO_SAVE(&p0, name);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_MISC_REGISTER_BOOL_TO_SAVE(WrenVM* vm)
    {
        Any p0;
        const char* name = wrenGetSlotString(vm, 1);

        MISC::REGISTER_BOOL_TO_SAVE(&p0, name);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_MISC_REGISTER_TEXT_LABEL_TO_SAVE(WrenVM* vm)
    {
        Any p0;
        const char* name = wrenGetSlotString(vm, 1);

        MISC::REGISTER_TEXT_LABEL_TO_SAVE(&p0, name);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_MISC_REGISTER_TEXT_LABEL_15_TO_SAVE(WrenVM* vm)
    {
        Any p0;
        const char* name = wrenGetSlotString(vm, 1);

        MISC::REGISTER_TEXT_LABEL_15_TO_SAVE(&p0, name);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_MISC_REGISTER_TEXT_LABEL_23_TO_SAVE(WrenVM* vm)
    {
        Any p0;
        const char* name = wrenGetSlotString(vm, 1);

        MISC::REGISTER_TEXT_LABEL_23_TO_SAVE(&p0, name);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_MISC_REGISTER_TEXT_LABEL_31_TO_SAVE(WrenVM* vm)
    {
        Any p0;
        const char* name = wrenGetSlotString(vm, 1);

        MISC::REGISTER_TEXT_LABEL_31_TO_SAVE(&p0, name);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_MISC_REGISTER_TEXT_LABEL_63_TO_SAVE(WrenVM* vm)
    {
        Any p0;
        const char* name = wrenGetSlotString(vm, 1);

        MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(&p0, name);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_MISC_START_SAVE_STRUCT_WITH_SIZE(WrenVM* vm)
    {
        Any p0;
        int size = (int)wrenGetSlotDouble(vm, 1);
        const char* structName = wrenGetSlotString(vm, 2);

        MISC::START_SAVE_STRUCT_WITH_SIZE(&p0, size, structName);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_MISC_STOP_SAVE_STRUCT(WrenVM* vm)
    {

        MISC::STOP_SAVE_STRUCT();
    }

    static void WREN_MISC_START_SAVE_ARRAY_WITH_SIZE(WrenVM* vm)
    {
        Any p0;
        int size = (int)wrenGetSlotDouble(vm, 1);
        const char* arrayName = wrenGetSlotString(vm, 2);

        MISC::START_SAVE_ARRAY_WITH_SIZE(&p0, size, arrayName);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_MISC_STOP_SAVE_ARRAY(WrenVM* vm)
    {

        MISC::STOP_SAVE_ARRAY();
    }

    static void WREN_MISC_COPY_SCRIPT_STRUCT(WrenVM* vm)
    {
        Any dst;
        Any src;
        int size = (int)wrenGetSlotDouble(vm, 1);

        MISC::COPY_SCRIPT_STRUCT(&dst, &src, size);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, dst);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, src);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_MISC_ENABLE_DISPATCH_SERVICE(WrenVM* vm)
    {
        int dispatchService = (int)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        MISC::ENABLE_DISPATCH_SERVICE(dispatchService, toggle);
    }

    static void WREN_MISC_BLOCK_DISPATCH_SERVICE_RESOURCE_CREATION(WrenVM* vm)
    {
        int dispatchService = (int)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        MISC::BLOCK_DISPATCH_SERVICE_RESOURCE_CREATION(dispatchService, toggle);
    }

    static void WREN_MISC_GET_NUMBER_RESOURCES_ALLOCATED_TO_WANTED_LEVEL(WrenVM* vm)
    {
        int dispatchService = (int)wrenGetSlotDouble(vm, 1);

        int res = MISC::GET_NUMBER_RESOURCES_ALLOCATED_TO_WANTED_LEVEL(dispatchService);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_MISC_CREATE_INCIDENT(WrenVM* vm)
    {
        int dispatchService = (int)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);
        int numUnits = (int)wrenGetSlotDouble(vm, 5);
        float radius = (float)wrenGetSlotDouble(vm, 6);
        int outIncidentID;
        Any p7 = (Any)wrenGetSlotDouble(vm, 7);
        Any p8 = (Any)wrenGetSlotDouble(vm, 8);

        BOOL res = MISC::CREATE_INCIDENT(dispatchService, x, y, z, numUnits, radius, &outIncidentID, p7, p8);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, outIncidentID);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_MISC_CREATE_INCIDENT_WITH_ENTITY(WrenVM* vm)
    {
        int dispatchService = (int)wrenGetSlotDouble(vm, 1);
        Ped ped = (Ped)wrenGetSlotDouble(vm, 2);
        int numUnits = (int)wrenGetSlotDouble(vm, 3);
        float radius = (float)wrenGetSlotDouble(vm, 4);
        int outIncidentID;
        Any p5 = (Any)wrenGetSlotDouble(vm, 5);
        Any p6 = (Any)wrenGetSlotDouble(vm, 6);

        BOOL res = MISC::CREATE_INCIDENT_WITH_ENTITY(dispatchService, ped, numUnits, radius, &outIncidentID, p5, p6);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, outIncidentID);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_MISC_DELETE_INCIDENT(WrenVM* vm)
    {
        int incidentId = (int)wrenGetSlotDouble(vm, 1);

        MISC::DELETE_INCIDENT(incidentId);
    }

    static void WREN_MISC_IS_INCIDENT_VALID(WrenVM* vm)
    {
        int incidentId = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = MISC::IS_INCIDENT_VALID(incidentId);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MISC_SET_INCIDENT_REQUESTED_UNITS(WrenVM* vm)
    {
        int incidentId = (int)wrenGetSlotDouble(vm, 1);
        int dispatchService = (int)wrenGetSlotDouble(vm, 2);
        int numUnits = (int)wrenGetSlotDouble(vm, 3);

        MISC::SET_INCIDENT_REQUESTED_UNITS(incidentId, dispatchService, numUnits);
    }

    static void WREN_MISC_SET_IDEAL_SPAWN_DISTANCE_FOR_INCIDENT(WrenVM* vm)
    {
        int incidentId = (int)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);

        MISC::SET_IDEAL_SPAWN_DISTANCE_FOR_INCIDENT(incidentId, p1);
    }

    static void WREN_MISC_FIND_SPAWN_POINT_IN_DIRECTION(WrenVM* vm)
    {
        float posX = (float)wrenGetSlotDouble(vm, 1);
        float posY = (float)wrenGetSlotDouble(vm, 2);
        float posZ = (float)wrenGetSlotDouble(vm, 3);
        float fwdVecX = (float)wrenGetSlotDouble(vm, 4);
        float fwdVecY = (float)wrenGetSlotDouble(vm, 5);
        float fwdVecZ = (float)wrenGetSlotDouble(vm, 6);
        float distance = (float)wrenGetSlotDouble(vm, 7);
        Vector3 spawnPoint;

        BOOL res = MISC::FIND_SPAWN_POINT_IN_DIRECTION(posX, posY, posZ, fwdVecX, fwdVecY, fwdVecZ, distance, &spawnPoint);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenGetVariable(vm, "natives", "Vector3", 2);
        Vector3* wren_spawnPoint = (Vector3*)wrenSetSlotNewForeign(vm, 3, 2, sizeof(Vector3));
        wren_spawnPoint->x = spawnPoint.x;
        wren_spawnPoint->y = spawnPoint.y;
        wren_spawnPoint->z = spawnPoint.z;
        wrenInsertInList(vm, 0, 1, 3);

    }

    static void WREN_MISC_ADD_POP_MULTIPLIER_AREA(WrenVM* vm)
    {
        float x1 = (float)wrenGetSlotDouble(vm, 1);
        float y1 = (float)wrenGetSlotDouble(vm, 2);
        float z1 = (float)wrenGetSlotDouble(vm, 3);
        float x2 = (float)wrenGetSlotDouble(vm, 4);
        float y2 = (float)wrenGetSlotDouble(vm, 5);
        float z2 = (float)wrenGetSlotDouble(vm, 6);
        float p6 = (float)wrenGetSlotDouble(vm, 7);
        float p7 = (float)wrenGetSlotDouble(vm, 8);
        BOOL p8 = (BOOL)wrenGetSlotBool(vm, 9);
        BOOL p9 = (BOOL)wrenGetSlotBool(vm, 10);

        int res = MISC::ADD_POP_MULTIPLIER_AREA(x1, y1, z1, x2, y2, z2, p6, p7, p8, p9);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_MISC_DOES_POP_MULTIPLIER_AREA_EXIST(WrenVM* vm)
    {
        int id = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = MISC::DOES_POP_MULTIPLIER_AREA_EXIST(id);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MISC_REMOVE_POP_MULTIPLIER_AREA(WrenVM* vm)
    {
        int id = (int)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        MISC::REMOVE_POP_MULTIPLIER_AREA(id, p1);
    }

    static void WREN_MISC_IS_POP_MULTIPLIER_AREA_NETWORKED(WrenVM* vm)
    {
        int id = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = MISC::IS_POP_MULTIPLIER_AREA_NETWORKED(id);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MISC_ADD_POP_MULTIPLIER_SPHERE(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        float radius = (float)wrenGetSlotDouble(vm, 4);
        float pedMultiplier = (float)wrenGetSlotDouble(vm, 5);
        float vehicleMultiplier = (float)wrenGetSlotDouble(vm, 6);
        BOOL p6 = (BOOL)wrenGetSlotBool(vm, 7);
        BOOL p7 = (BOOL)wrenGetSlotBool(vm, 8);

        int res = MISC::ADD_POP_MULTIPLIER_SPHERE(x, y, z, radius, pedMultiplier, vehicleMultiplier, p6, p7);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_MISC_DOES_POP_MULTIPLIER_SPHERE_EXIST(WrenVM* vm)
    {
        int id = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = MISC::DOES_POP_MULTIPLIER_SPHERE_EXIST(id);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MISC_REMOVE_POP_MULTIPLIER_SPHERE(WrenVM* vm)
    {
        int id = (int)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        MISC::REMOVE_POP_MULTIPLIER_SPHERE(id, p1);
    }

    static void WREN_MISC_ENABLE_TENNIS_MODE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        MISC::ENABLE_TENNIS_MODE(ped, toggle, p2);
    }

    static void WREN_MISC_IS_TENNIS_MODE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = MISC::IS_TENNIS_MODE(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MISC_PLAY_TENNIS_SWING_ANIM(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        const char* animDict = wrenGetSlotString(vm, 2);
        const char* animName = wrenGetSlotString(vm, 3);
        float p3 = (float)wrenGetSlotDouble(vm, 4);
        float p4 = (float)wrenGetSlotDouble(vm, 5);
        BOOL p5 = (BOOL)wrenGetSlotBool(vm, 6);

        MISC::PLAY_TENNIS_SWING_ANIM(ped, animDict, animName, p3, p4, p5);
    }

    static void WREN_MISC_GET_TENNIS_SWING_ANIM_COMPLETE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = MISC::GET_TENNIS_SWING_ANIM_COMPLETE(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MISC_GET_TENNIS_SWING_ANIM_CAN_BE_INTERRUPTED(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = MISC::GET_TENNIS_SWING_ANIM_CAN_BE_INTERRUPTED(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MISC_GET_TENNIS_SWING_ANIM_SWUNG(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = MISC::GET_TENNIS_SWING_ANIM_SWUNG(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MISC_PLAY_TENNIS_DIVE_ANIM(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);
        float p2 = (float)wrenGetSlotDouble(vm, 3);
        float p3 = (float)wrenGetSlotDouble(vm, 4);
        float p4 = (float)wrenGetSlotDouble(vm, 5);
        BOOL p5 = (BOOL)wrenGetSlotBool(vm, 6);

        MISC::PLAY_TENNIS_DIVE_ANIM(ped, p1, p2, p3, p4, p5);
    }

    static void WREN_MISC_SET_TENNIS_MOVE_NETWORK_SIGNAL_FLOAT(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        const char* p1 = wrenGetSlotString(vm, 2);
        float p2 = (float)wrenGetSlotDouble(vm, 3);

        MISC::SET_TENNIS_MOVE_NETWORK_SIGNAL_FLOAT(ped, p1, p2);
    }

    static void WREN_MISC_RESET_DISPATCH_SPAWN_LOCATION(WrenVM* vm)
    {

        MISC::RESET_DISPATCH_SPAWN_LOCATION();
    }

    static void WREN_MISC_SET_DISPATCH_SPAWN_LOCATION(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);

        MISC::SET_DISPATCH_SPAWN_LOCATION(x, y, z);
    }

    static void WREN_MISC_RESET_DISPATCH_IDEAL_SPAWN_DISTANCE(WrenVM* vm)
    {

        MISC::RESET_DISPATCH_IDEAL_SPAWN_DISTANCE();
    }

    static void WREN_MISC_SET_DISPATCH_IDEAL_SPAWN_DISTANCE(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);

        MISC::SET_DISPATCH_IDEAL_SPAWN_DISTANCE(p0);
    }

    static void WREN_MISC_RESET_DISPATCH_TIME_BETWEEN_SPAWN_ATTEMPTS(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        MISC::RESET_DISPATCH_TIME_BETWEEN_SPAWN_ATTEMPTS(p0);
    }

    static void WREN_MISC_SET_DISPATCH_TIME_BETWEEN_SPAWN_ATTEMPTS(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);

        MISC::SET_DISPATCH_TIME_BETWEEN_SPAWN_ATTEMPTS(p0, p1);
    }

    static void WREN_MISC_SET_DISPATCH_TIME_BETWEEN_SPAWN_ATTEMPTS_MULTIPLIER(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);

        MISC::SET_DISPATCH_TIME_BETWEEN_SPAWN_ATTEMPTS_MULTIPLIER(p0, p1);
    }

    static void WREN_MISC_ADD_DISPATCH_SPAWN_ANGLED_BLOCKING_AREA(WrenVM* vm)
    {
        float x1 = (float)wrenGetSlotDouble(vm, 1);
        float y1 = (float)wrenGetSlotDouble(vm, 2);
        float z1 = (float)wrenGetSlotDouble(vm, 3);
        float x2 = (float)wrenGetSlotDouble(vm, 4);
        float y2 = (float)wrenGetSlotDouble(vm, 5);
        float z2 = (float)wrenGetSlotDouble(vm, 6);
        float width = (float)wrenGetSlotDouble(vm, 7);

        Any res = MISC::ADD_DISPATCH_SPAWN_ANGLED_BLOCKING_AREA(x1, y1, z1, x2, y2, z2, width);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_MISC_ADD_DISPATCH_SPAWN_SPHERE_BLOCKING_AREA(WrenVM* vm)
    {
        float x1 = (float)wrenGetSlotDouble(vm, 1);
        float y1 = (float)wrenGetSlotDouble(vm, 2);
        float x2 = (float)wrenGetSlotDouble(vm, 3);
        float y2 = (float)wrenGetSlotDouble(vm, 4);

        Any res = MISC::ADD_DISPATCH_SPAWN_SPHERE_BLOCKING_AREA(x1, y1, x2, y2);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_MISC_REMOVE_DISPATCH_SPAWN_BLOCKING_AREA(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        MISC::REMOVE_DISPATCH_SPAWN_BLOCKING_AREA(p0);
    }

    static void WREN_MISC_RESET_DISPATCH_SPAWN_BLOCKING_AREAS(WrenVM* vm)
    {

        MISC::RESET_DISPATCH_SPAWN_BLOCKING_AREAS();
    }

    static void WREN_MISC_RESET_WANTED_RESPONSE_NUM_PEDS_TO_SPAWN(WrenVM* vm)
    {

        MISC::RESET_WANTED_RESPONSE_NUM_PEDS_TO_SPAWN();
    }

    static void WREN_MISC_SET_WANTED_RESPONSE_NUM_PEDS_TO_SPAWN(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);

        MISC::SET_WANTED_RESPONSE_NUM_PEDS_TO_SPAWN(p0, p1);
    }

    static void WREN_MISC_ADD_TACTICAL_NAV_MESH_POINT(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);

        MISC::ADD_TACTICAL_NAV_MESH_POINT(x, y, z);
    }

    static void WREN_MISC_CLEAR_TACTICAL_NAV_MESH_POINTS(WrenVM* vm)
    {

        MISC::CLEAR_TACTICAL_NAV_MESH_POINTS();
    }

    static void WREN_MISC_SET_RIOT_MODE_ENABLED(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        MISC::SET_RIOT_MODE_ENABLED(toggle);
    }

    static void WREN_MISC_DISPLAY_ONSCREEN_KEYBOARD_WITH_LONGER_INITIAL_STRING(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);
        const char* windowTitle = wrenGetSlotString(vm, 2);
        Any p2;
        const char* defaultText = wrenGetSlotString(vm, 3);
        const char* defaultConcat1 = wrenGetSlotString(vm, 4);
        const char* defaultConcat2 = wrenGetSlotString(vm, 5);
        const char* defaultConcat3 = wrenGetSlotString(vm, 6);
        const char* defaultConcat4 = wrenGetSlotString(vm, 7);
        const char* defaultConcat5 = wrenGetSlotString(vm, 8);
        const char* defaultConcat6 = wrenGetSlotString(vm, 9);
        const char* defaultConcat7 = wrenGetSlotString(vm, 10);
        int maxInputLength = (int)wrenGetSlotDouble(vm, 11);

        MISC::DISPLAY_ONSCREEN_KEYBOARD_WITH_LONGER_INITIAL_STRING(p0, windowTitle, &p2, defaultText, defaultConcat1, defaultConcat2, defaultConcat3, defaultConcat4, defaultConcat5, defaultConcat6, defaultConcat7, maxInputLength);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_MISC_DISPLAY_ONSCREEN_KEYBOARD(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);
        const char* windowTitle = wrenGetSlotString(vm, 2);
        const char* p2 = wrenGetSlotString(vm, 3);
        const char* defaultText = wrenGetSlotString(vm, 4);
        const char* defaultConcat1 = wrenGetSlotString(vm, 5);
        const char* defaultConcat2 = wrenGetSlotString(vm, 6);
        const char* defaultConcat3 = wrenGetSlotString(vm, 7);
        int maxInputLength = (int)wrenGetSlotDouble(vm, 8);

        MISC::DISPLAY_ONSCREEN_KEYBOARD(p0, windowTitle, p2, defaultText, defaultConcat1, defaultConcat2, defaultConcat3, maxInputLength);
    }

    static void WREN_MISC_UPDATE_ONSCREEN_KEYBOARD(WrenVM* vm)
    {

        int res = MISC::UPDATE_ONSCREEN_KEYBOARD();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_MISC_GET_ONSCREEN_KEYBOARD_RESULT(WrenVM* vm)
    {

        const char* res = MISC::GET_ONSCREEN_KEYBOARD_RESULT();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotString(vm, 0, res);
    }

    static void WREN_MISC_CANCEL_ONSCREEN_KEYBOARD(WrenVM* vm)
    {

        MISC::CANCEL_ONSCREEN_KEYBOARD();
    }

    static void WREN_MISC_NEXT_ONSCREEN_KEYBOARD_RESULT_WILL_DISPLAY_USING_THESE_FONTS(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);

        MISC::NEXT_ONSCREEN_KEYBOARD_RESULT_WILL_DISPLAY_USING_THESE_FONTS(p0);
    }

    static void WREN_MISC_ACTION_MANAGER_ENABLE_ACTION(WrenVM* vm)
    {
        Hash hash = (Hash)wrenGetSlotDouble(vm, 1);
        BOOL enable = (BOOL)wrenGetSlotBool(vm, 2);

        MISC::ACTION_MANAGER_ENABLE_ACTION(hash, enable);
    }

    static void WREN_MISC_GET_REAL_WORLD_TIME(WrenVM* vm)
    {

        int res = MISC::GET_REAL_WORLD_TIME();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_MISC_SUPRESS_RANDOM_EVENT_THIS_FRAME(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        MISC::SUPRESS_RANDOM_EVENT_THIS_FRAME(p0, p1);
    }

    static void WREN_MISC_SET_EXPLOSIVE_AMMO_THIS_FRAME(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        MISC::SET_EXPLOSIVE_AMMO_THIS_FRAME(player);
    }

    static void WREN_MISC_SET_FIRE_AMMO_THIS_FRAME(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        MISC::SET_FIRE_AMMO_THIS_FRAME(player);
    }

    static void WREN_MISC_SET_EXPLOSIVE_MELEE_THIS_FRAME(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        MISC::SET_EXPLOSIVE_MELEE_THIS_FRAME(player);
    }

    static void WREN_MISC_SET_SUPER_JUMP_THIS_FRAME(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        MISC::SET_SUPER_JUMP_THIS_FRAME(player);
    }

    static void WREN_MISC_SET_BEAST_JUMP_THIS_FRAME(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        MISC::SET_BEAST_JUMP_THIS_FRAME(player);
    }

    static void WREN_MISC_SET_FORCED_JUMP_THIS_FRAME(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        MISC::SET_FORCED_JUMP_THIS_FRAME(player);
    }

    static void WREN_MISC_HAS_GAME_INSTALLED_THIS_SESSION(WrenVM* vm)
    {

        BOOL res = MISC::HAS_GAME_INSTALLED_THIS_SESSION();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MISC_SET_TICKER_JOHNMARSTON_IS_DONE(WrenVM* vm)
    {

        MISC::SET_TICKER_JOHNMARSTON_IS_DONE();
    }

    static void WREN_MISC_ARE_PROFILE_SETTINGS_VALID(WrenVM* vm)
    {

        BOOL res = MISC::ARE_PROFILE_SETTINGS_VALID();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MISC_PREVENT_ARREST_STATE_THIS_FRAME(WrenVM* vm)
    {

        MISC::PREVENT_ARREST_STATE_THIS_FRAME();
    }

    static void WREN_MISC_FORCE_GAME_STATE_PLAYING(WrenVM* vm)
    {

        MISC::FORCE_GAME_STATE_PLAYING();
    }

    static void WREN_MISC_SCRIPT_RACE_INIT(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MISC::SCRIPT_RACE_INIT(p0, p1, p2, p3);
    }

    static void WREN_MISC_SCRIPT_RACE_SHUTDOWN(WrenVM* vm)
    {

        MISC::SCRIPT_RACE_SHUTDOWN();
    }

    static void WREN_MISC_SCRIPT_RACE_PLAYER_HIT_CHECKPOINT(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MISC::SCRIPT_RACE_PLAYER_HIT_CHECKPOINT(p0, p1, p2, p3);
    }

    static void WREN_MISC_SCRIPT_RACE_GET_PLAYER_SPLIT_TIME(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        int p1;
        int p2;

        BOOL res = MISC::SCRIPT_RACE_GET_PLAYER_SPLIT_TIME(player, &p1, &p2);

        wrenEnsureSlots(vm, 6);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p1);
        wrenInsertInList(vm, 0, 1, 2);

        wrenSetSlotDouble(vm, 3, p2);
        wrenInsertInList(vm, 0, 2, 3);

    }

    static void WREN_MISC_START_END_USER_BENCHMARK(WrenVM* vm)
    {

        MISC::START_END_USER_BENCHMARK();
    }

    static void WREN_MISC_STOP_END_USER_BENCHMARK(WrenVM* vm)
    {

        MISC::STOP_END_USER_BENCHMARK();
    }

    static void WREN_MISC_RESET_END_USER_BENCHMARK(WrenVM* vm)
    {

        MISC::RESET_END_USER_BENCHMARK();
    }

    static void WREN_MISC_SAVE_END_USER_BENCHMARK(WrenVM* vm)
    {

        MISC::SAVE_END_USER_BENCHMARK();
    }

    static void WREN_MISC_UI_STARTED_END_USER_BENCHMARK(WrenVM* vm)
    {

        BOOL res = MISC::UI_STARTED_END_USER_BENCHMARK();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MISC_LANDING_SCREEN_STARTED_END_USER_BENCHMARK(WrenVM* vm)
    {

        BOOL res = MISC::LANDING_SCREEN_STARTED_END_USER_BENCHMARK();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MISC_IS_COMMANDLINE_END_USER_BENCHMARK(WrenVM* vm)
    {

        BOOL res = MISC::IS_COMMANDLINE_END_USER_BENCHMARK();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MISC_GET_BENCHMARK_ITERATIONS(WrenVM* vm)
    {

        int res = MISC::GET_BENCHMARK_ITERATIONS();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_MISC_GET_BENCHMARK_PASS(WrenVM* vm)
    {

        int res = MISC::GET_BENCHMARK_PASS();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_MISC_RESTART_GAME(WrenVM* vm)
    {

        MISC::RESTART_GAME();
    }

    static void WREN_MISC_QUIT_GAME(WrenVM* vm)
    {

        MISC::QUIT_GAME();
    }

    static void WREN_MISC_HAS_ASYNC_INSTALL_FINISHED(WrenVM* vm)
    {

        BOOL res = MISC::HAS_ASYNC_INSTALL_FINISHED();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MISC_CLEANUP_ASYNC_INSTALL(WrenVM* vm)
    {

        MISC::CLEANUP_ASYNC_INSTALL();
    }

    static void WREN_MISC_PLM_IS_IN_CONSTRAINED_MODE(WrenVM* vm)
    {

        BOOL res = MISC::PLM_IS_IN_CONSTRAINED_MODE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MISC_PLM_GET_CONSTRAINED_DURATION_MS(WrenVM* vm)
    {

        int res = MISC::PLM_GET_CONSTRAINED_DURATION_MS();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_MISC_SET_PLAYER_IS_IN_ANIMAL_FORM(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        MISC::SET_PLAYER_IS_IN_ANIMAL_FORM(toggle);
    }

    static void WREN_MISC_GET_IS_PLAYER_IN_ANIMAL_FORM(WrenVM* vm)
    {

        BOOL res = MISC::GET_IS_PLAYER_IN_ANIMAL_FORM();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MISC_SET_PLAYER_IS_REPEATING_A_MISSION(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        MISC::SET_PLAYER_IS_REPEATING_A_MISSION(toggle);
    }

    static void WREN_MISC_DISABLE_SCREEN_DIMMING_THIS_FRAME(WrenVM* vm)
    {

        MISC::DISABLE_SCREEN_DIMMING_THIS_FRAME();
    }

    static void WREN_MISC_GET_CITY_DENSITY(WrenVM* vm)
    {

        Any res = MISC::GET_CITY_DENSITY();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_MISC_USE_ACTIVE_CAMERA_FOR_TIMESLICING_CENTRE(WrenVM* vm)
    {

        MISC::USE_ACTIVE_CAMERA_FOR_TIMESLICING_CENTRE();
    }

    static void WREN_MISC_SET_CONTENT_ID_INDEX(WrenVM* vm)
    {
        Hash contentId = (Hash)wrenGetSlotDouble(vm, 1);
        int index = (int)wrenGetSlotDouble(vm, 2);

        MISC::SET_CONTENT_ID_INDEX(contentId, index);
    }

    static void WREN_MISC_GET_CONTENT_ID_INDEX(WrenVM* vm)
    {
        Hash contentId = (Hash)wrenGetSlotDouble(vm, 1);

        int res = MISC::GET_CONTENT_ID_INDEX(contentId);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }


    static void WREN_MOBILE_CREATE_MOBILE_PHONE(WrenVM* vm)
    {
        int phoneType = (int)wrenGetSlotDouble(vm, 1);

        MOBILE::CREATE_MOBILE_PHONE(phoneType);
    }

    static void WREN_MOBILE_DESTROY_MOBILE_PHONE(WrenVM* vm)
    {

        MOBILE::DESTROY_MOBILE_PHONE();
    }

    static void WREN_MOBILE_SET_MOBILE_PHONE_SCALE(WrenVM* vm)
    {
        float scale = (float)wrenGetSlotDouble(vm, 1);

        MOBILE::SET_MOBILE_PHONE_SCALE(scale);
    }

    static void WREN_MOBILE_SET_MOBILE_PHONE_ROTATION(WrenVM* vm)
    {
        float rotX = (float)wrenGetSlotDouble(vm, 1);
        float rotY = (float)wrenGetSlotDouble(vm, 2);
        float rotZ = (float)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MOBILE::SET_MOBILE_PHONE_ROTATION(rotX, rotY, rotZ, p3);
    }

    static void WREN_MOBILE_GET_MOBILE_PHONE_ROTATION(WrenVM* vm)
    {
        Vector3 rotation;
        Vehicle p1 = (Vehicle)wrenGetSlotDouble(vm, 1);

        MOBILE::GET_MOBILE_PHONE_ROTATION(&rotation, p1);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_MOBILE_SET_MOBILE_PHONE_POSITION(WrenVM* vm)
    {
        float posX = (float)wrenGetSlotDouble(vm, 1);
        float posY = (float)wrenGetSlotDouble(vm, 2);
        float posZ = (float)wrenGetSlotDouble(vm, 3);

        MOBILE::SET_MOBILE_PHONE_POSITION(posX, posY, posZ);
    }

    static void WREN_MOBILE_GET_MOBILE_PHONE_POSITION(WrenVM* vm)
    {
        Vector3 position;

        MOBILE::GET_MOBILE_PHONE_POSITION(&position);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_MOBILE_SCRIPT_IS_MOVING_MOBILE_PHONE_OFFSCREEN(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        MOBILE::SCRIPT_IS_MOVING_MOBILE_PHONE_OFFSCREEN(toggle);
    }

    static void WREN_MOBILE_CAN_PHONE_BE_SEEN_ON_SCREEN(WrenVM* vm)
    {

        BOOL res = MOBILE::CAN_PHONE_BE_SEEN_ON_SCREEN();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MOBILE_SET_MOBILE_PHONE_DOF_STATE(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        MOBILE::SET_MOBILE_PHONE_DOF_STATE(toggle);
    }

    static void WREN_MOBILE_CELL_SET_INPUT(WrenVM* vm)
    {
        int direction = (int)wrenGetSlotDouble(vm, 1);

        MOBILE::CELL_SET_INPUT(direction);
    }

    static void WREN_MOBILE_CELL_HORIZONTAL_MODE_TOGGLE(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        MOBILE::CELL_HORIZONTAL_MODE_TOGGLE(toggle);
    }

    static void WREN_MOBILE_CELL_CAM_ACTIVATE(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        MOBILE::CELL_CAM_ACTIVATE(p0, p1);
    }

    static void WREN_MOBILE_CELL_CAM_ACTIVATE_SELFIE_MODE(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        MOBILE::CELL_CAM_ACTIVATE_SELFIE_MODE(toggle);
    }

    static void WREN_MOBILE_CELL_CAM_ACTIVATE_SHALLOW_DOF_MODE(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        MOBILE::CELL_CAM_ACTIVATE_SHALLOW_DOF_MODE(toggle);
    }

    static void WREN_MOBILE_CELL_CAM_SET_SELFIE_MODE_SIDE_OFFSET_SCALING(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);

        MOBILE::CELL_CAM_SET_SELFIE_MODE_SIDE_OFFSET_SCALING(p0);
    }

    static void WREN_MOBILE_CELL_CAM_SET_SELFIE_MODE_HORZ_PAN_OFFSET(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);

        MOBILE::CELL_CAM_SET_SELFIE_MODE_HORZ_PAN_OFFSET(p0);
    }

    static void WREN_MOBILE_CELL_CAM_SET_SELFIE_MODE_VERT_PAN_OFFSET(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);

        MOBILE::CELL_CAM_SET_SELFIE_MODE_VERT_PAN_OFFSET(p0);
    }

    static void WREN_MOBILE_CELL_CAM_SET_SELFIE_MODE_ROLL_OFFSET(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);

        MOBILE::CELL_CAM_SET_SELFIE_MODE_ROLL_OFFSET(p0);
    }

    static void WREN_MOBILE_CELL_CAM_SET_SELFIE_MODE_DISTANCE_SCALING(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);

        MOBILE::CELL_CAM_SET_SELFIE_MODE_DISTANCE_SCALING(p0);
    }

    static void WREN_MOBILE_CELL_CAM_SET_SELFIE_MODE_HEAD_YAW_OFFSET(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);

        MOBILE::CELL_CAM_SET_SELFIE_MODE_HEAD_YAW_OFFSET(p0);
    }

    static void WREN_MOBILE_CELL_CAM_SET_SELFIE_MODE_HEAD_ROLL_OFFSET(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);

        MOBILE::CELL_CAM_SET_SELFIE_MODE_HEAD_ROLL_OFFSET(p0);
    }

    static void WREN_MOBILE_CELL_CAM_SET_SELFIE_MODE_HEAD_PITCH_OFFSET(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);

        MOBILE::CELL_CAM_SET_SELFIE_MODE_HEAD_PITCH_OFFSET(p0);
    }

    static void WREN_MOBILE_CELL_CAM_IS_CHAR_VISIBLE_NO_FACE_CHECK(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        BOOL res = MOBILE::CELL_CAM_IS_CHAR_VISIBLE_NO_FACE_CHECK(entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MOBILE_GET_MOBILE_PHONE_RENDER_ID(WrenVM* vm)
    {
        int renderId;

        MOBILE::GET_MOBILE_PHONE_RENDER_ID(&renderId);

        wrenEnsureSlots(vm, 1);

    }


    static void WREN_MONEY_NETWORK_INITIALIZE_CASH(WrenVM* vm)
    {
        int wallet = (int)wrenGetSlotDouble(vm, 1);
        int bank = (int)wrenGetSlotDouble(vm, 2);

        MONEY::NETWORK_INITIALIZE_CASH(wallet, bank);
    }

    static void WREN_MONEY_NETWORK_DELETE_CHARACTER(WrenVM* vm)
    {
        int characterSlot = (int)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        MONEY::NETWORK_DELETE_CHARACTER(characterSlot, p1, p2);
    }

    static void WREN_MONEY_NETWORK_MANUAL_DELETE_CHARACTER(WrenVM* vm)
    {
        int characterSlot = (int)wrenGetSlotDouble(vm, 1);

        MONEY::NETWORK_MANUAL_DELETE_CHARACTER(characterSlot);
    }

    static void WREN_MONEY_NETWORK_GET_PLAYER_IS_HIGH_EARNER(WrenVM* vm)
    {

        BOOL res = MONEY::NETWORK_GET_PLAYER_IS_HIGH_EARNER();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MONEY_NETWORK_CLEAR_CHARACTER_WALLET(WrenVM* vm)
    {
        int characterSlot = (int)wrenGetSlotDouble(vm, 1);

        MONEY::NETWORK_CLEAR_CHARACTER_WALLET(characterSlot);
    }

    static void WREN_MONEY_NETWORK_GIVE_PLAYER_JOBSHARE_CASH(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);
        Any gamerHandle;

        MONEY::NETWORK_GIVE_PLAYER_JOBSHARE_CASH(amount, &gamerHandle);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_MONEY_NETWORK_RECEIVE_PLAYER_JOBSHARE_CASH(WrenVM* vm)
    {
        int value = (int)wrenGetSlotDouble(vm, 1);
        Any gamerHandle;

        MONEY::NETWORK_RECEIVE_PLAYER_JOBSHARE_CASH(value, &gamerHandle);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_MONEY_NETWORK_CAN_SHARE_JOB_CASH(WrenVM* vm)
    {

        BOOL res = MONEY::NETWORK_CAN_SHARE_JOB_CASH();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MONEY_NETWORK_REFUND_CASH(WrenVM* vm)
    {
        int index = (int)wrenGetSlotDouble(vm, 1);
        const char* context = wrenGetSlotString(vm, 2);
        const char* reason = wrenGetSlotString(vm, 3);
        BOOL unk = (BOOL)wrenGetSlotBool(vm, 4);

        MONEY::NETWORK_REFUND_CASH(index, context, reason, unk);
    }

    static void WREN_MONEY_NETWORK_DEDUCT_CASH(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);
        const char* p1 = wrenGetSlotString(vm, 2);
        const char* p2 = wrenGetSlotString(vm, 3);
        BOOL p3 = (BOOL)wrenGetSlotBool(vm, 4);
        BOOL p4 = (BOOL)wrenGetSlotBool(vm, 5);
        BOOL p5 = (BOOL)wrenGetSlotBool(vm, 6);

        MONEY::NETWORK_DEDUCT_CASH(amount, p1, p2, p3, p4, p5);
    }

    static void WREN_MONEY_NETWORK_MONEY_CAN_BET(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        BOOL res = MONEY::NETWORK_MONEY_CAN_BET(amount, p1, p2);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MONEY_NETWORK_CAN_BET(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = MONEY::NETWORK_CAN_BET(amount);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MONEY_NETWORK_CASINO_CAN_BET(WrenVM* vm)
    {
        Hash hash = (Hash)wrenGetSlotDouble(vm, 1);

        BOOL res = MONEY::NETWORK_CASINO_CAN_BET(hash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MONEY_NETWORK_CASINO_CAN_BET_PVC(WrenVM* vm)
    {

        BOOL res = MONEY::NETWORK_CASINO_CAN_BET_PVC();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MONEY_NETWORK_CASINO_CAN_BET_AMOUNT(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        BOOL res = MONEY::NETWORK_CASINO_CAN_BET_AMOUNT(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MONEY_NETWORK_CASINO_CAN_BUY_CHIPS_PVC(WrenVM* vm)
    {

        BOOL res = MONEY::NETWORK_CASINO_CAN_BUY_CHIPS_PVC();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MONEY_NETWORK_CASINO_BUY_CHIPS(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);

        BOOL res = MONEY::NETWORK_CASINO_BUY_CHIPS(p0, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MONEY_NETWORK_CASINO_SELL_CHIPS(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);

        BOOL res = MONEY::NETWORK_CASINO_SELL_CHIPS(p0, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MONEY_NETWORK_DEFER_CASH_TRANSACTIONS_UNTIL_SHOP_SAVE(WrenVM* vm)
    {

        MONEY::NETWORK_DEFER_CASH_TRANSACTIONS_UNTIL_SHOP_SAVE();
    }

    static void WREN_MONEY_CAN_PAY_AMOUNT_TO_BOSS(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);
        int amount = (int)wrenGetSlotDouble(vm, 3);
        int p3;

        BOOL res = MONEY::CAN_PAY_AMOUNT_TO_BOSS(p0, p1, amount, &p3);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p3);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_MONEY_NETWORK_EARN_FROM_PICKUP(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);

        MONEY::NETWORK_EARN_FROM_PICKUP(amount);
    }

    static void WREN_MONEY_NETWORK_EARN_FROM_CASHING_OUT(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);

        MONEY::NETWORK_EARN_FROM_CASHING_OUT(amount);
    }

    static void WREN_MONEY_NETWORK_EARN_FROM_GANGATTACK_PICKUP(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);

        MONEY::NETWORK_EARN_FROM_GANGATTACK_PICKUP(amount);
    }

    static void WREN_MONEY_NETWORK_EARN_ASSASSINATE_TARGET_KILLED(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);

        MONEY::NETWORK_EARN_ASSASSINATE_TARGET_KILLED(amount);
    }

    static void WREN_MONEY_NETWORK_EARN_FROM_ROB_ARMORED_CARS(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);

        MONEY::NETWORK_EARN_FROM_ROB_ARMORED_CARS(amount);
    }

    static void WREN_MONEY_NETWORK_EARN_FROM_CRATE_DROP(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);

        MONEY::NETWORK_EARN_FROM_CRATE_DROP(amount);
    }

    static void WREN_MONEY_NETWORK_EARN_FROM_BETTING(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);
        const char* p1 = wrenGetSlotString(vm, 2);

        MONEY::NETWORK_EARN_FROM_BETTING(amount, p1);
    }

    static void WREN_MONEY_NETWORK_EARN_FROM_JOB(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);
        const char* p1 = wrenGetSlotString(vm, 2);

        MONEY::NETWORK_EARN_FROM_JOB(amount, p1);
    }

    static void WREN_MONEY_NETWORK_EARN_FROM_JOBX2(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);
        const char* p1 = wrenGetSlotString(vm, 2);

        MONEY::NETWORK_EARN_FROM_JOBX2(amount, p1);
    }

    static void WREN_MONEY_NETWORK_EARN_FROM_PREMIUM_JOB(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);
        const char* p1 = wrenGetSlotString(vm, 2);

        MONEY::NETWORK_EARN_FROM_PREMIUM_JOB(amount, p1);
    }

    static void WREN_MONEY_NETWORK_EARN_FROM_BEND_JOB(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);
        const char* heistHash = wrenGetSlotString(vm, 2);

        MONEY::NETWORK_EARN_FROM_BEND_JOB(amount, heistHash);
    }

    static void WREN_MONEY_NETWORK_EARN_FROM_CHALLENGE_WIN(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1;
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 2);

        MONEY::NETWORK_EARN_FROM_CHALLENGE_WIN(p0, &p1, p2);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_MONEY_NETWORK_EARN_FROM_BOUNTY(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);
        Any gamerHandle;
        Any p2;
        Any p3 = (Any)wrenGetSlotDouble(vm, 2);

        MONEY::NETWORK_EARN_FROM_BOUNTY(amount, &gamerHandle, &p2, p3);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, gamerHandle);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p2);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_MONEY_NETWORK_EARN_FROM_IMPORT_EXPORT(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);
        Hash modelHash = (Hash)wrenGetSlotDouble(vm, 2);

        MONEY::NETWORK_EARN_FROM_IMPORT_EXPORT(amount, modelHash);
    }

    static void WREN_MONEY_NETWORK_EARN_FROM_HOLDUPS(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);

        MONEY::NETWORK_EARN_FROM_HOLDUPS(amount);
    }

    static void WREN_MONEY_NETWORK_EARN_FROM_PROPERTY(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);
        Hash propertyName = (Hash)wrenGetSlotDouble(vm, 2);

        MONEY::NETWORK_EARN_FROM_PROPERTY(amount, propertyName);
    }

    static void WREN_MONEY_NETWORK_EARN_FROM_AI_TARGET_KILL(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        MONEY::NETWORK_EARN_FROM_AI_TARGET_KILL(p0, p1);
    }

    static void WREN_MONEY_NETWORK_EARN_FROM_NOT_BADSPORT(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);

        MONEY::NETWORK_EARN_FROM_NOT_BADSPORT(amount);
    }

    static void WREN_MONEY_NETWORK_EARN_FROM_ROCKSTAR(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);

        MONEY::NETWORK_EARN_FROM_ROCKSTAR(amount);
    }

    static void WREN_MONEY_NETWORK_EARN_FROM_VEHICLE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);
        Any p5 = (Any)wrenGetSlotDouble(vm, 6);
        Any p6 = (Any)wrenGetSlotDouble(vm, 7);
        Any p7 = (Any)wrenGetSlotDouble(vm, 8);

        MONEY::NETWORK_EARN_FROM_VEHICLE(p0, p1, p2, p3, p4, p5, p6, p7);
    }

    static void WREN_MONEY_NETWORK_EARN_FROM_PERSONAL_VEHICLE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);
        Any p5 = (Any)wrenGetSlotDouble(vm, 6);
        Any p6 = (Any)wrenGetSlotDouble(vm, 7);
        Any p7 = (Any)wrenGetSlotDouble(vm, 8);
        Any p8 = (Any)wrenGetSlotDouble(vm, 9);

        MONEY::NETWORK_EARN_FROM_PERSONAL_VEHICLE(p0, p1, p2, p3, p4, p5, p6, p7, p8);
    }

    static void WREN_MONEY_NETWORK_EARN_FROM_DAILY_OBJECTIVES(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);
        const char* p1 = wrenGetSlotString(vm, 2);
        int p2 = (int)wrenGetSlotDouble(vm, 3);

        MONEY::NETWORK_EARN_FROM_DAILY_OBJECTIVES(p0, p1, p2);
    }

    static void WREN_MONEY_NETWORK_EARN_FROM_AMBIENT_JOB(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);
        const char* p1 = wrenGetSlotString(vm, 2);
        Any p2;

        MONEY::NETWORK_EARN_FROM_AMBIENT_JOB(p0, p1, &p2);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_MONEY_NETWORK_EARN_FROM_JOB_BONUS(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1;
        Any p2;

        MONEY::NETWORK_EARN_FROM_JOB_BONUS(p0, &p1, &p2);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, p1);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p2);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_MONEY_NETWORK_EARN_FROM_CRIMINAL_MASTERMIND(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);

        MONEY::NETWORK_EARN_FROM_CRIMINAL_MASTERMIND(p0, p1, p2);
    }

    static void WREN_MONEY_NETWORK_EARN_HEIST_AWARD(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);

        MONEY::NETWORK_EARN_HEIST_AWARD(p0, p1, p2);
    }

    static void WREN_MONEY_NETWORK_EARN_FIRST_TIME_BONUS(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);

        MONEY::NETWORK_EARN_FIRST_TIME_BONUS(p0, p1, p2);
    }

    static void WREN_MONEY_NETWORK_EARN_GOON(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);

        MONEY::NETWORK_EARN_GOON(p0, p1, p2);
    }

    static void WREN_MONEY_NETWORK_EARN_BOSS(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);

        MONEY::NETWORK_EARN_BOSS(p0, p1, p2);
    }

    static void WREN_MONEY_NETWORK_EARN_AGENCY(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_EARN_AGENCY(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_EARN_FROM_WAREHOUSE(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);
        int id = (int)wrenGetSlotDouble(vm, 2);

        MONEY::NETWORK_EARN_FROM_WAREHOUSE(amount, id);
    }

    static void WREN_MONEY_NETWORK_EARN_FROM_CONTRABAND(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        MONEY::NETWORK_EARN_FROM_CONTRABAND(amount, p1);
    }

    static void WREN_MONEY_NETWORK_EARN_FROM_DESTROYING_CONTRABAND(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        MONEY::NETWORK_EARN_FROM_DESTROYING_CONTRABAND(p0);
    }

    static void WREN_MONEY_NETWORK_EARN_FROM_SMUGGLER_WORK(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);

        MONEY::NETWORK_EARN_FROM_SMUGGLER_WORK(p0, p1, p2, p3, p4);
    }

    static void WREN_MONEY_NETWORK_EARN_FROM_HANGAR_TRADE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        MONEY::NETWORK_EARN_FROM_HANGAR_TRADE(p0, p1);
    }

    static void WREN_MONEY_NETWORK_EARN_PURCHASE_CLUB_HOUSE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        MONEY::NETWORK_EARN_PURCHASE_CLUB_HOUSE(p0, p1);
    }

    static void WREN_MONEY_NETWORK_EARN_FROM_BUSINESS_PRODUCT(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_EARN_FROM_BUSINESS_PRODUCT(amount, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_EARN_FROM_VEHICLE_EXPORT(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);

        MONEY::NETWORK_EARN_FROM_VEHICLE_EXPORT(amount, p1, p2);
    }

    static void WREN_MONEY_NETWORK_EARN_SMUGGLER_AGENCY(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_EARN_SMUGGLER_AGENCY(amount, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_EARN_BOUNTY_HUNTER_REWARD(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        MONEY::NETWORK_EARN_BOUNTY_HUNTER_REWARD(p0);
    }

    static void WREN_MONEY_NETWORK_EARN_FROM_BUSINESS_BATTLE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        MONEY::NETWORK_EARN_FROM_BUSINESS_BATTLE(p0);
    }

    static void WREN_MONEY_NETWORK_EARN_FROM_CLUB_MANAGEMENT_PARTICIPATION(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);

        MONEY::NETWORK_EARN_FROM_CLUB_MANAGEMENT_PARTICIPATION(p0, p1);
    }

    static void WREN_MONEY_NETWORK_EARN_FROM_FMBB_PHONECALL_MISSION(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        MONEY::NETWORK_EARN_FROM_FMBB_PHONECALL_MISSION(p0);
    }

    static void WREN_MONEY_NETWORK_EARN_FROM_BUSINESS_HUB_SELL(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);

        MONEY::NETWORK_EARN_FROM_BUSINESS_HUB_SELL(p0, p1, p2);
    }

    static void WREN_MONEY_NETWORK_EARN_FROM_FMBB_BOSS_WORK(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        MONEY::NETWORK_EARN_FROM_FMBB_BOSS_WORK(p0);
    }

    static void WREN_MONEY_NETWORK_EARN_FMBB_WAGE_BONUS(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        MONEY::NETWORK_EARN_FMBB_WAGE_BONUS(p0);
    }

    static void WREN_MONEY_NETWORK_CAN_SPEND_MONEY(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);
        BOOL p3 = (BOOL)wrenGetSlotBool(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);
        Any p5 = (Any)wrenGetSlotDouble(vm, 6);

        BOOL res = MONEY::NETWORK_CAN_SPEND_MONEY(p0, p1, p2, p3, p4, p5);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MONEY_NETWORK_CAN_SPEND_MONEY2(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);
        BOOL p3 = (BOOL)wrenGetSlotBool(vm, 4);
        Any p4;
        Any p5 = (Any)wrenGetSlotDouble(vm, 5);
        Any p6 = (Any)wrenGetSlotDouble(vm, 6);

        BOOL res = MONEY::NETWORK_CAN_SPEND_MONEY2(p0, p1, p2, p3, &p4, p5, p6);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p4);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_MONEY_NETWORK_BUY_ITEM(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);
        Hash item = (Hash)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);
        BOOL p4 = (BOOL)wrenGetSlotBool(vm, 5);
        const char* item_name = wrenGetSlotString(vm, 6);
        Any p6 = (Any)wrenGetSlotDouble(vm, 7);
        Any p7 = (Any)wrenGetSlotDouble(vm, 8);
        Any p8 = (Any)wrenGetSlotDouble(vm, 9);
        BOOL p9 = (BOOL)wrenGetSlotBool(vm, 10);

        MONEY::NETWORK_BUY_ITEM(amount, item, p2, p3, p4, item_name, p6, p7, p8, p9);
    }

    static void WREN_MONEY_NETWORK_SPENT_TAXI(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_SPENT_TAXI(amount, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_PAY_EMPLOYEE_WAGE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        MONEY::NETWORK_PAY_EMPLOYEE_WAGE(p0, p1, p2);
    }

    static void WREN_MONEY_NETWORK_PAY_MATCH_ENTRY_FEE(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);
        const char* matchId = wrenGetSlotString(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);
        BOOL p3 = (BOOL)wrenGetSlotBool(vm, 4);

        MONEY::NETWORK_PAY_MATCH_ENTRY_FEE(amount, matchId, p2, p3);
    }

    static void WREN_MONEY_NETWORK_SPENT_BETTING(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);
        const char* matchId = wrenGetSlotString(vm, 3);
        BOOL p3 = (BOOL)wrenGetSlotBool(vm, 4);
        BOOL p4 = (BOOL)wrenGetSlotBool(vm, 5);

        MONEY::NETWORK_SPENT_BETTING(amount, p1, matchId, p3, p4);
    }

    static void WREN_MONEY_NETWORK_SPENT_WAGER(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        int amount = (int)wrenGetSlotDouble(vm, 3);

        MONEY::NETWORK_SPENT_WAGER(p0, p1, amount);
    }

    static void WREN_MONEY_NETWORK_SPENT_IN_STRIPCLUB(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        BOOL p3 = (BOOL)wrenGetSlotBool(vm, 4);

        MONEY::NETWORK_SPENT_IN_STRIPCLUB(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_BUY_HEALTHCARE(WrenVM* vm)
    {
        int cost = (int)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        MONEY::NETWORK_BUY_HEALTHCARE(cost, p1, p2);
    }

    static void WREN_MONEY_NETWORK_BUY_AIRSTRIKE(WrenVM* vm)
    {
        int cost = (int)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_BUY_AIRSTRIKE(cost, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_BUY_BACKUP_GANG(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);
        BOOL p3 = (BOOL)wrenGetSlotBool(vm, 4);

        MONEY::NETWORK_BUY_BACKUP_GANG(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_BUY_HELI_STRIKE(WrenVM* vm)
    {
        int cost = (int)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_BUY_HELI_STRIKE(cost, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_SPENT_AMMO_DROP(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_SPENT_AMMO_DROP(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_BUY_BOUNTY(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);
        Player victim = (Player)wrenGetSlotDouble(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);
        BOOL p3 = (BOOL)wrenGetSlotBool(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);

        MONEY::NETWORK_BUY_BOUNTY(amount, victim, p2, p3, p4);
    }

    static void WREN_MONEY_NETWORK_BUY_PROPERTY(WrenVM* vm)
    {
        int cost = (int)wrenGetSlotDouble(vm, 1);
        Hash propertyName = (Hash)wrenGetSlotDouble(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);
        BOOL p3 = (BOOL)wrenGetSlotBool(vm, 4);

        MONEY::NETWORK_BUY_PROPERTY(cost, propertyName, p2, p3);
    }

    static void WREN_MONEY_NETWORK_BUY_SMOKES(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        MONEY::NETWORK_BUY_SMOKES(p0, p1, p2);
    }

    static void WREN_MONEY_NETWORK_SPENT_HELI_PICKUP(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_SPENT_HELI_PICKUP(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_SPENT_BOAT_PICKUP(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_SPENT_BOAT_PICKUP(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_SPENT_BULL_SHARK(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_SPENT_BULL_SHARK(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_SPENT_CASH_DROP(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        MONEY::NETWORK_SPENT_CASH_DROP(amount, p1, p2);
    }

    static void WREN_MONEY_NETWORK_SPENT_HIRE_MUGGER(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_SPENT_HIRE_MUGGER(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_SPENT_ROBBED_BY_MUGGER(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_SPENT_ROBBED_BY_MUGGER(amount, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_SPENT_HIRE_MERCENARY(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_SPENT_HIRE_MERCENARY(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_SPENT_BUY_WANTEDLEVEL(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1;
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p3 = (BOOL)wrenGetSlotBool(vm, 3);
        Any p4 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_SPENT_BUY_WANTEDLEVEL(p0, &p1, p2, p3, p4);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_MONEY_NETWORK_SPENT_BUY_OFFTHERADAR(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_SPENT_BUY_OFFTHERADAR(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_SPENT_BUY_REVEAL_PLAYERS(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_SPENT_BUY_REVEAL_PLAYERS(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_SPENT_CARWASH(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        BOOL p3 = (BOOL)wrenGetSlotBool(vm, 4);
        BOOL p4 = (BOOL)wrenGetSlotBool(vm, 5);

        MONEY::NETWORK_SPENT_CARWASH(p0, p1, p2, p3, p4);
    }

    static void WREN_MONEY_NETWORK_SPENT_CINEMA(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);
        BOOL p3 = (BOOL)wrenGetSlotBool(vm, 4);

        MONEY::NETWORK_SPENT_CINEMA(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_SPENT_TELESCOPE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        MONEY::NETWORK_SPENT_TELESCOPE(p0, p1, p2);
    }

    static void WREN_MONEY_NETWORK_SPENT_HOLDUPS(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        MONEY::NETWORK_SPENT_HOLDUPS(p0, p1, p2);
    }

    static void WREN_MONEY_NETWORK_SPENT_BUY_PASSIVE_MODE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_SPENT_BUY_PASSIVE_MODE(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_SPENT_BANK_INTEREST(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        MONEY::NETWORK_SPENT_BANK_INTEREST(p0, p1, p2);
    }

    static void WREN_MONEY_NETWORK_SPENT_PROSTITUTES(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        MONEY::NETWORK_SPENT_PROSTITUTES(p0, p1, p2);
    }

    static void WREN_MONEY_NETWORK_SPENT_ARREST_BAIL(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        MONEY::NETWORK_SPENT_ARREST_BAIL(p0, p1, p2);
    }

    static void WREN_MONEY_NETWORK_SPENT_PAY_VEHICLE_INSURANCE_PREMIUM(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);
        Hash vehicleModel = (Hash)wrenGetSlotDouble(vm, 2);
        Any gamerHandle;
        BOOL notBankrupt = (BOOL)wrenGetSlotBool(vm, 3);
        BOOL hasTheMoney = (BOOL)wrenGetSlotBool(vm, 4);

        MONEY::NETWORK_SPENT_PAY_VEHICLE_INSURANCE_PREMIUM(amount, vehicleModel, &gamerHandle, notBankrupt, hasTheMoney);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_MONEY_NETWORK_SPENT_CALL_PLAYER(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1;
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p3 = (BOOL)wrenGetSlotBool(vm, 3);

        MONEY::NETWORK_SPENT_CALL_PLAYER(p0, &p1, p2, p3);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_MONEY_NETWORK_SPENT_BOUNTY(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        MONEY::NETWORK_SPENT_BOUNTY(p0, p1, p2);
    }

    static void WREN_MONEY_NETWORK_SPENT_FROM_ROCKSTAR(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        MONEY::NETWORK_SPENT_FROM_ROCKSTAR(p0, p1, p2);
    }

    static void WREN_MONEY_NETWORK_SPEND_EARNED_FROM_BANK_AND_WALLETS(WrenVM* vm)
    {

        Any res = MONEY::NETWORK_SPEND_EARNED_FROM_BANK_AND_WALLETS();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_MONEY_PROCESS_CASH_GIFT(WrenVM* vm)
    {
        int p0;
        int p1;
        const char* p2 = wrenGetSlotString(vm, 1);

        const char* res = MONEY::PROCESS_CASH_GIFT(&p0, &p1, p2);

        wrenEnsureSlots(vm, 6);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotString(vm, 1, res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p0);
        wrenInsertInList(vm, 0, 1, 2);

        wrenSetSlotDouble(vm, 3, p1);
        wrenInsertInList(vm, 0, 2, 3);

    }

    static void WREN_MONEY_NETWORK_SPENT_MOVE_SUBMARINE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);

        MONEY::NETWORK_SPENT_MOVE_SUBMARINE(p0, p1, p2);
    }

    static void WREN_MONEY_NETWORK_SPENT_PLAYER_HEALTHCARE(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);
        BOOL p3 = (BOOL)wrenGetSlotBool(vm, 4);

        MONEY::NETWORK_SPENT_PLAYER_HEALTHCARE(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_SPENT_NO_COPS(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_SPENT_NO_COPS(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_SPENT_CARGO_SOURCING(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);
        Any p5 = (Any)wrenGetSlotDouble(vm, 6);

        MONEY::NETWORK_SPENT_CARGO_SOURCING(p0, p1, p2, p3, p4, p5);
    }

    static void WREN_MONEY_NETWORK_SPENT_REQUEST_JOB(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_SPENT_REQUEST_JOB(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_SPENT_REQUEST_HEIST(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_SPENT_REQUEST_HEIST(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_BUY_FAIRGROUND_RIDE(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);
        BOOL p3 = (BOOL)wrenGetSlotBool(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);

        MONEY::NETWORK_BUY_FAIRGROUND_RIDE(amount, p1, p2, p3, p4);
    }

    static void WREN_MONEY_NETWORK_ECONOMY_HAS_FIXED_CRAZY_NUMBERS(WrenVM* vm)
    {

        BOOL res = MONEY::NETWORK_ECONOMY_HAS_FIXED_CRAZY_NUMBERS();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MONEY_NETWORK_SPENT_JOB_SKIP(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);
        const char* matchId = wrenGetSlotString(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);
        BOOL p3 = (BOOL)wrenGetSlotBool(vm, 4);

        MONEY::NETWORK_SPENT_JOB_SKIP(amount, matchId, p2, p3);
    }

    static void WREN_MONEY_NETWORK_SPENT_BOSS_GOON(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        BOOL res = MONEY::NETWORK_SPENT_BOSS_GOON(amount, p1, p2);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MONEY_NETWORK_SPEND_GOON(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);
        int amount = (int)wrenGetSlotDouble(vm, 3);

        MONEY::NETWORK_SPEND_GOON(p0, p1, amount);
    }

    static void WREN_MONEY_NETWORK_SPEND_BOSS(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);

        MONEY::NETWORK_SPEND_BOSS(p0, p1, p2);
    }

    static void WREN_MONEY_NETWORK_SPENT_MOVE_YACHT(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        MONEY::NETWORK_SPENT_MOVE_YACHT(amount, p1, p2);
    }

    static void WREN_MONEY_NETWORK_SPENT_RENAME_ORGANIZATION(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);

        MONEY::NETWORK_SPENT_RENAME_ORGANIZATION(p0, p1, p2);
    }

    static void WREN_MONEY_NETWORK_BUY_CONTRABAND_MISSION(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);
        Hash p2 = (Hash)wrenGetSlotDouble(vm, 3);
        BOOL p3 = (BOOL)wrenGetSlotBool(vm, 4);
        BOOL p4 = (BOOL)wrenGetSlotBool(vm, 5);

        MONEY::NETWORK_BUY_CONTRABAND_MISSION(p0, p1, p2, p3, p4);
    }

    static void WREN_MONEY_NETWORK_SPENT_PA_SERVICE_HELI(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_SPENT_PA_SERVICE_HELI(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_SPENT_PA_SERVICE_VEHICLE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_SPENT_PA_SERVICE_VEHICLE(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_SPENT_PA_SERVICE_SNACK(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_SPENT_PA_SERVICE_SNACK(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_SPENT_PA_SERVICE_DANCER(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_SPENT_PA_SERVICE_DANCER(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_SPENT_PA_SERVICE_IMPOUND(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);

        MONEY::NETWORK_SPENT_PA_SERVICE_IMPOUND(p0, p1, p2);
    }

    static void WREN_MONEY_NETWORK_SPENT_PA_HELI_PICKUP(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_SPENT_PA_HELI_PICKUP(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_SPENT_PURCHASE_OFFICE_PROPERTY(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_SPENT_PURCHASE_OFFICE_PROPERTY(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_SPENT_UPGRADE_OFFICE_PROPERTY(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_SPENT_UPGRADE_OFFICE_PROPERTY(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_SPENT_PURCHASE_WAREHOUSE_PROPERTY(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_SPENT_PURCHASE_WAREHOUSE_PROPERTY(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_SPENT_UPGRADE_WAREHOUSE_PROPERTY(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_SPENT_UPGRADE_WAREHOUSE_PROPERTY(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_SPENT_PURCHASE_IMPEXP_WAREHOUSE_PROPERTY(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);
        Any data;
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p3 = (BOOL)wrenGetSlotBool(vm, 3);

        MONEY::NETWORK_SPENT_PURCHASE_IMPEXP_WAREHOUSE_PROPERTY(amount, &data, p2, p3);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_MONEY_NETWORK_SPENT_UPGRADE_IMPEXP_WAREHOUSE_PROPERTY(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_SPENT_UPGRADE_IMPEXP_WAREHOUSE_PROPERTY(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_SPENT_TRADE_IMPEXP_WAREHOUSE_PROPERTY(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_SPENT_TRADE_IMPEXP_WAREHOUSE_PROPERTY(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_SPENT_ORDER_WAREHOUSE_VEHICLE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_SPENT_ORDER_WAREHOUSE_VEHICLE(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_SPENT_ORDER_BODYGUARD_VEHICLE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_SPENT_ORDER_BODYGUARD_VEHICLE(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_SPENT_JUKEBOX(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_SPENT_JUKEBOX(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_SPENT_PURCHASE_CLUB_HOUSE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_SPENT_PURCHASE_CLUB_HOUSE(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_SPENT_UPGRADE_CLUB_HOUSE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_SPENT_UPGRADE_CLUB_HOUSE(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_SPENT_PURCHASE_BUSINESS_PROPERTY(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_SPENT_PURCHASE_BUSINESS_PROPERTY(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_SPENT_UPGRADE_BUSINESS_PROPERTY(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_SPENT_UPGRADE_BUSINESS_PROPERTY(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_SPENT_TRADE_BUSINESS_PROPERTY(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_SPENT_TRADE_BUSINESS_PROPERTY(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_SPENT_MC_ABILITY(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);

        MONEY::NETWORK_SPENT_MC_ABILITY(p0, p1, p2, p3, p4);
    }

    static void WREN_MONEY_NETWORK_SPENT_PAY_BUSINESS_SUPPLIES(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_SPENT_PAY_BUSINESS_SUPPLIES(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_SPENT_CHANGE_APPEARANCE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);

        MONEY::NETWORK_SPENT_CHANGE_APPEARANCE(p0, p1, p2);
    }

    static void WREN_MONEY_NETWORK_SPENT_VEHICLE_EXPORT_MODS(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);
        Any p5 = (Any)wrenGetSlotDouble(vm, 6);
        Any p6 = (Any)wrenGetSlotDouble(vm, 7);
        Any p7 = (Any)wrenGetSlotDouble(vm, 8);
        Any p8 = (Any)wrenGetSlotDouble(vm, 9);
        Any p9 = (Any)wrenGetSlotDouble(vm, 10);

        MONEY::NETWORK_SPENT_VEHICLE_EXPORT_MODS(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
    }

    static void WREN_MONEY_NETWORK_SPENT_PURCHASE_OFFICE_GARAGE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_SPENT_PURCHASE_OFFICE_GARAGE(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_SPENT_UPGRADE_OFFICE_GARAGE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_SPENT_UPGRADE_OFFICE_GARAGE(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_SPENT_IMPORT_EXPORT_REPAIR(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);

        MONEY::NETWORK_SPENT_IMPORT_EXPORT_REPAIR(p0, p1, p2);
    }

    static void WREN_MONEY_NETWORK_SPENT_PURCHASE_HANGAR(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_SPENT_PURCHASE_HANGAR(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_SPENT_UPGRADE_HANGAR(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_SPENT_UPGRADE_HANGAR(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_SPENT_HANGAR_UTILITY_CHARGES(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        MONEY::NETWORK_SPENT_HANGAR_UTILITY_CHARGES(amount, p1, p2);
    }

    static void WREN_MONEY_NETWORK_SPENT_HANGAR_STAFF_CHARGES(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        MONEY::NETWORK_SPENT_HANGAR_STAFF_CHARGES(amount, p1, p2);
    }

    static void WREN_MONEY_NETWORK_SPENT_BUY_TRUCK(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_SPENT_BUY_TRUCK(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_SPENT_UPGRADE_TRUCK(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_SPENT_UPGRADE_TRUCK(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_SPENT_BUY_BUNKER(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_SPENT_BUY_BUNKER(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_SPENT_UPRADE_BUNKER(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_SPENT_UPRADE_BUNKER(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_EARN_FROM_SELL_BUNKER(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);
        Hash bunkerHash = (Hash)wrenGetSlotDouble(vm, 2);

        MONEY::NETWORK_EARN_FROM_SELL_BUNKER(amount, bunkerHash);
    }

    static void WREN_MONEY_NETWORK_SPENT_BALLISTIC_EQUIPMENT(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        MONEY::NETWORK_SPENT_BALLISTIC_EQUIPMENT(amount, p1, p2);
    }

    static void WREN_MONEY_NETWORK_EARN_RDR_BONUS(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        MONEY::NETWORK_EARN_RDR_BONUS(amount, p1);
    }

    static void WREN_MONEY_NETWORK_EARN_WAGE_PAYMENT(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        MONEY::NETWORK_EARN_WAGE_PAYMENT(amount, p1);
    }

    static void WREN_MONEY_NETWORK_EARN_WAGE_PAYMENT_BONUS(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);

        MONEY::NETWORK_EARN_WAGE_PAYMENT_BONUS(amount);
    }

    static void WREN_MONEY_NETWORK_SPENT_BUY_BASE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_SPENT_BUY_BASE(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_SPENT_UPGRADE_BASE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_SPENT_UPGRADE_BASE(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_SPENT_BUY_TILTROTOR(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_SPENT_BUY_TILTROTOR(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_SPENT_UPGRADE_TILTROTOR(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_SPENT_UPGRADE_TILTROTOR(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_SPENT_EMPLOY_ASSASSINS(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_SPENT_EMPLOY_ASSASSINS(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_SPEND_GANGOPS_CANNON(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_SPEND_GANGOPS_CANNON(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_SPEND_GANGOPS_SKIP_MISSION(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_SPEND_GANGOPS_SKIP_MISSION(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_SPEND_CASINO_HEIST_SKIP_MISSION(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_SPEND_CASINO_HEIST_SKIP_MISSION(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_EARN_SELL_BASE(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);
        Hash baseNameHash = (Hash)wrenGetSlotDouble(vm, 2);

        MONEY::NETWORK_EARN_SELL_BASE(amount, baseNameHash);
    }

    static void WREN_MONEY_NETWORK_EARN_TARGET_REFUND(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);

        MONEY::NETWORK_EARN_TARGET_REFUND(amount, p1);
    }

    static void WREN_MONEY_NETWORK_EARN_GANGOPS_WAGES(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);

        MONEY::NETWORK_EARN_GANGOPS_WAGES(amount, p1);
    }

    static void WREN_MONEY_NETWORK_EARN_GANGOPS_WAGES_BONUS(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);

        MONEY::NETWORK_EARN_GANGOPS_WAGES_BONUS(amount, p1);
    }

    static void WREN_MONEY_NETWORK_EARN_DAR_CHALLENGE(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        MONEY::NETWORK_EARN_DAR_CHALLENGE(amount, p1);
    }

    static void WREN_MONEY_NETWORK_EARN_DOOMSDAY_FINALE_BONUS(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);
        Hash vehicleHash = (Hash)wrenGetSlotDouble(vm, 2);

        MONEY::NETWORK_EARN_DOOMSDAY_FINALE_BONUS(amount, vehicleHash);
    }

    static void WREN_MONEY_NETWORK_EARN_GANGOPS_AWARD(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);
        const char* unk = wrenGetSlotString(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);

        MONEY::NETWORK_EARN_GANGOPS_AWARD(amount, unk, p2);
    }

    static void WREN_MONEY_NETWORK_EARN_GANGOPS_ELITE(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);
        const char* unk = wrenGetSlotString(vm, 2);
        int actIndex = (int)wrenGetSlotDouble(vm, 3);

        MONEY::NETWORK_EARN_GANGOPS_ELITE(amount, unk, actIndex);
    }

    static void WREN_MONEY_NETWORK_SERVICE_EARN_GANGOPS_RIVAL_DELIVERY(WrenVM* vm)
    {
        int earnedMoney = (int)wrenGetSlotDouble(vm, 1);

        MONEY::NETWORK_SERVICE_EARN_GANGOPS_RIVAL_DELIVERY(earnedMoney);
    }

    static void WREN_MONEY_NETWORK_SPEND_GANGOPS_START_STRAND(WrenVM* vm)
    {
        int type = (int)wrenGetSlotDouble(vm, 1);
        int amount = (int)wrenGetSlotDouble(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);
        BOOL p3 = (BOOL)wrenGetSlotBool(vm, 4);

        MONEY::NETWORK_SPEND_GANGOPS_START_STRAND(type, amount, p2, p3);
    }

    static void WREN_MONEY_NETWORK_SPEND_GANGOPS_TRIP_SKIP(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        MONEY::NETWORK_SPEND_GANGOPS_TRIP_SKIP(amount, p1, p2);
    }

    static void WREN_MONEY_NETWORK_EARN_GANGOPS_PREP_PARTICIPATION(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);

        MONEY::NETWORK_EARN_GANGOPS_PREP_PARTICIPATION(amount);
    }

    static void WREN_MONEY_NETWORK_EARN_GANGOPS_SETUP(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);
        const char* unk = wrenGetSlotString(vm, 2);

        MONEY::NETWORK_EARN_GANGOPS_SETUP(amount, unk);
    }

    static void WREN_MONEY_NETWORK_EARN_GANGOPS_FINALE(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);
        const char* unk = wrenGetSlotString(vm, 2);

        MONEY::NETWORK_EARN_GANGOPS_FINALE(amount, unk);
    }

    static void WREN_MONEY_NETWORK_SPEND_GANGOPS_REPAIR_COST(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);

        MONEY::NETWORK_SPEND_GANGOPS_REPAIR_COST(p0, p1, p2);
    }

    static void WREN_MONEY_NETWORK_EARN_NIGHTCLUB(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        MONEY::NETWORK_EARN_NIGHTCLUB(p0);
    }

    static void WREN_MONEY_NETWORK_EARN_NIGHTCLUB_DANCING(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        MONEY::NETWORK_EARN_NIGHTCLUB_DANCING(p0);
    }

    static void WREN_MONEY_NETWORK_EARN_BB_EVENT_BONUS(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);

        MONEY::NETWORK_EARN_BB_EVENT_BONUS(amount);
    }

    static void WREN_MONEY_NETWORK_SPENT_PURCHASE_HACKER_TRUCK(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_SPENT_PURCHASE_HACKER_TRUCK(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_SPENT_UPGRADE_HACKER_TRUCK(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_SPENT_UPGRADE_HACKER_TRUCK(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_EARN_HACKER_TRUCK(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        int amount = (int)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_EARN_HACKER_TRUCK(p0, amount, p2, p3);
    }

    static void WREN_MONEY_NETWORK_SPENT_PURCHASE_NIGHTCLUB_AND_WAREHOUSE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_SPENT_PURCHASE_NIGHTCLUB_AND_WAREHOUSE(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_SPENT_UPGRADE_NIGHTCLUB_AND_WAREHOUSE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_SPENT_UPGRADE_NIGHTCLUB_AND_WAREHOUSE(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_EARN_NIGHTCLUB_AND_WAREHOUSE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);
        Any p5 = (Any)wrenGetSlotDouble(vm, 6);
        Any p6 = (Any)wrenGetSlotDouble(vm, 7);

        MONEY::NETWORK_EARN_NIGHTCLUB_AND_WAREHOUSE(p0, p1, p2, p3, p4, p5, p6);
    }

    static void WREN_MONEY_NETWORK_SPEND_NIGHTCLUB_AND_WAREHOUSE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);
        Any p5 = (Any)wrenGetSlotDouble(vm, 6);

        MONEY::NETWORK_SPEND_NIGHTCLUB_AND_WAREHOUSE(p0, p1, p2, p3, p4, p5);
    }

    static void WREN_MONEY_NETWORK_SPENT_RDR_HATCHET_BONUS(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        MONEY::NETWORK_SPENT_RDR_HATCHET_BONUS(amount, p1, p2);
    }

    static void WREN_MONEY_NETWORK_SPENT_NIGHTCLUB_ENTRY_FEE(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        int amount = (int)wrenGetSlotDouble(vm, 2);
        Any p1 = (Any)wrenGetSlotDouble(vm, 3);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 4);
        BOOL p3 = (BOOL)wrenGetSlotBool(vm, 5);

        MONEY::NETWORK_SPENT_NIGHTCLUB_ENTRY_FEE(player, amount, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_SPEND_NIGHTCLUB_BAR_DRINK(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);
        BOOL p3 = (BOOL)wrenGetSlotBool(vm, 4);

        MONEY::NETWORK_SPEND_NIGHTCLUB_BAR_DRINK(amount, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_SPEND_BOUNTY_HUNTER_MISSION(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        MONEY::NETWORK_SPEND_BOUNTY_HUNTER_MISSION(amount, p1, p2);
    }

    static void WREN_MONEY_NETWORK_SPENT_REHIRE_DJ(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);
        BOOL p3 = (BOOL)wrenGetSlotBool(vm, 4);

        MONEY::NETWORK_SPENT_REHIRE_DJ(amount, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_SPENT_ARENA_JOIN_SPECTATOR(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);
        BOOL p3 = (BOOL)wrenGetSlotBool(vm, 4);

        MONEY::NETWORK_SPENT_ARENA_JOIN_SPECTATOR(amount, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_EARN_ARENA_SKILL_LEVEL_PROGRESSION(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        MONEY::NETWORK_EARN_ARENA_SKILL_LEVEL_PROGRESSION(amount, p1);
    }

    static void WREN_MONEY_NETWORK_EARN_ARENA_CAREER_PROGRESSION(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        MONEY::NETWORK_EARN_ARENA_CAREER_PROGRESSION(amount, p1);
    }

    static void WREN_MONEY_NETWORK_SPEND_MAKE_IT_RAIN(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        MONEY::NETWORK_SPEND_MAKE_IT_RAIN(amount, p1, p2);
    }

    static void WREN_MONEY_NETWORK_SPEND_BUY_ARENA(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);
        const char* p3 = wrenGetSlotString(vm, 4);

        MONEY::NETWORK_SPEND_BUY_ARENA(amount, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_SPEND_UPGRADE_ARENA(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);
        const char* p3 = wrenGetSlotString(vm, 4);

        MONEY::NETWORK_SPEND_UPGRADE_ARENA(amount, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_SPEND_ARENA_SPECTATOR_BOX(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);
        BOOL p3 = (BOOL)wrenGetSlotBool(vm, 4);

        MONEY::NETWORK_SPEND_ARENA_SPECTATOR_BOX(amount, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_SPEND_SPIN_THE_WHEEL_PAYMENT(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        MONEY::NETWORK_SPEND_SPIN_THE_WHEEL_PAYMENT(amount, p1, p2);
    }

    static void WREN_MONEY_NETWORK_EARN_SPIN_THE_WHEEL_CASH(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);

        MONEY::NETWORK_EARN_SPIN_THE_WHEEL_CASH(amount);
    }

    static void WREN_MONEY_NETWORK_SPEND_ARENA_PREMIUM(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        MONEY::NETWORK_SPEND_ARENA_PREMIUM(amount, p1, p2);
    }

    static void WREN_MONEY_NETWORK_EARN_ARENA_WAR(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_EARN_ARENA_WAR(amount, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_EARN_ARENA_WAR_ASSASSINATE_TARGET(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);

        MONEY::NETWORK_EARN_ARENA_WAR_ASSASSINATE_TARGET(amount);
    }

    static void WREN_MONEY_NETWORK_EARN_ARENA_WAR_EVENT_CARGO(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);

        MONEY::NETWORK_EARN_ARENA_WAR_EVENT_CARGO(amount);
    }

    static void WREN_MONEY_NETWORK_EARN_RC_TIME_TRIAL(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);

        MONEY::NETWORK_EARN_RC_TIME_TRIAL(amount);
    }

    static void WREN_MONEY_NETWORK_EARN_DAILY_OBJECTIVE_EVENT(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);

        MONEY::NETWORK_EARN_DAILY_OBJECTIVE_EVENT(amount);
    }

    static void WREN_MONEY_NETWORK_SPEND_CASINO_MEMBERSHIP(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);
        int p3 = (int)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_SPEND_CASINO_MEMBERSHIP(amount, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_SPEND_BUY_CASINO(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);
        Any data;

        MONEY::NETWORK_SPEND_BUY_CASINO(amount, p1, p2, &data);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_MONEY_NETWORK_SPEND_UPGRADE_CASINO(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);
        Any data;

        MONEY::NETWORK_SPEND_UPGRADE_CASINO(amount, p1, p2, &data);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_MONEY_NETWORK_SPEND_CASINO_GENERIC(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);

        MONEY::NETWORK_SPEND_CASINO_GENERIC(amount, p1, p2, p3, p4);
    }

    static void WREN_MONEY_NETWORK_EARN_CASINO_TIME_TRIAL_WIN(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);

        MONEY::NETWORK_EARN_CASINO_TIME_TRIAL_WIN(amount);
    }

    static void WREN_MONEY_NETWORK_EARN_COLLECTABLES_ACTION_FIGURES(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);

        MONEY::NETWORK_EARN_COLLECTABLES_ACTION_FIGURES(amount);
    }

    static void WREN_MONEY_NETWORK_EARN_CASINO_COLLECTABLE_COMPLETED_COLLECTION(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);

        MONEY::NETWORK_EARN_CASINO_COLLECTABLE_COMPLETED_COLLECTION(amount);
    }

    static void WREN_MONEY_NETWORK_EARN_SELL_PRIZE_VEHICLE(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);

        MONEY::NETWORK_EARN_SELL_PRIZE_VEHICLE(amount, p1, p2);
    }

    static void WREN_MONEY_NETWORK_EARN_CASINO_MISSION_REWARD(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);

        MONEY::NETWORK_EARN_CASINO_MISSION_REWARD(amount);
    }

    static void WREN_MONEY_NETWORK_EARN_CASINO_STORY_MISSION_REWARD(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);

        MONEY::NETWORK_EARN_CASINO_STORY_MISSION_REWARD(amount);
    }

    static void WREN_MONEY_NETWORK_EARN_CASINO_MISSION_PARTICIPATION(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);

        MONEY::NETWORK_EARN_CASINO_MISSION_PARTICIPATION(amount);
    }

    static void WREN_MONEY_NETWORK_EARN_CASINO_AWARD(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);
        Hash hash = (Hash)wrenGetSlotDouble(vm, 2);

        MONEY::NETWORK_EARN_CASINO_AWARD(amount, hash);
    }

    static void WREN_MONEY_NETWORK_SPEND_BUY_ARCADE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_SPEND_BUY_ARCADE(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_SPEND_UPGRADE_ARCADE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_SPEND_UPGRADE_ARCADE(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_SPEND_CASINO_HEIST(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);
        Any p5 = (Any)wrenGetSlotDouble(vm, 6);
        Any p6 = (Any)wrenGetSlotDouble(vm, 7);
        Any p7 = (Any)wrenGetSlotDouble(vm, 8);
        Any p8 = (Any)wrenGetSlotDouble(vm, 9);
        Any p9 = (Any)wrenGetSlotDouble(vm, 10);
        Any p10 = (Any)wrenGetSlotDouble(vm, 11);

        MONEY::NETWORK_SPEND_CASINO_HEIST(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
    }

    static void WREN_MONEY_NETWORK_SPEND_ARCADE_MGMT(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);

        MONEY::NETWORK_SPEND_ARCADE_MGMT(p0, p1, p2, p3, p4);
    }

    static void WREN_MONEY_NETWORK_SPEND_PLAY_ARCADE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);

        MONEY::NETWORK_SPEND_PLAY_ARCADE(p0, p1, p2, p3, p4);
    }

    static void WREN_MONEY_NETWORK_SPEND_ARCADE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);

        MONEY::NETWORK_SPEND_ARCADE(p0, p1, p2, p3, p4);
    }

    static void WREN_MONEY_NETWORK_EARN_CASINO_HEIST(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);
        Any p5 = (Any)wrenGetSlotDouble(vm, 6);
        Any p6 = (Any)wrenGetSlotDouble(vm, 7);

        MONEY::NETWORK_EARN_CASINO_HEIST(p0, p1, p2, p3, p4, p5, p6);
    }

    static void WREN_MONEY_NETWORK_EARN_UPGRADE_ARCADE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);

        MONEY::NETWORK_EARN_UPGRADE_ARCADE(p0, p1, p2);
    }

    static void WREN_MONEY_NETWORK_EARN_ARCADE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);

        MONEY::NETWORK_EARN_ARCADE(p0, p1, p2, p3, p4);
    }

    static void WREN_MONEY_NETWORK_EARN_COLLECTABLES(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);

        MONEY::NETWORK_EARN_COLLECTABLES(p0, p1, p2);
    }

    static void WREN_MONEY_NETWORK_EARN_CHALLENGE(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);

        MONEY::NETWORK_EARN_CHALLENGE(amount, p1, p2);
    }

    static void WREN_MONEY_NETWORK_EARN_CASINO_HEIST_AWARDS(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);

        MONEY::NETWORK_EARN_CASINO_HEIST_AWARDS(p0, p1, p2, p3, p4);
    }

    static void WREN_MONEY_NETWORK_EARN_COLLECTABLE_ITEM(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        MONEY::NETWORK_EARN_COLLECTABLE_ITEM(amount, p1);
    }

    static void WREN_MONEY_NETWORK_EARN_COLLECTABLE_COMPLETED_COLLECTION(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        MONEY::NETWORK_EARN_COLLECTABLE_COMPLETED_COLLECTION(amount, p1);
    }

    static void WREN_MONEY_NETWORK_EARN_YATCH_MISSION(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        MONEY::NETWORK_EARN_YATCH_MISSION(amount, p1);
    }

    static void WREN_MONEY_NETWORK_EARN_DISPATCH_CALL(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        MONEY::NETWORK_EARN_DISPATCH_CALL(amount, p1);
    }

    static void WREN_MONEY_NETWORK_SPEND_BEACH_PARTY(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        MONEY::NETWORK_SPEND_BEACH_PARTY(p0);
    }

    static void WREN_MONEY_NETWORK_SPEND_SUBMARINE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);
        Any p5 = (Any)wrenGetSlotDouble(vm, 6);

        MONEY::NETWORK_SPEND_SUBMARINE(p0, p1, p2, p3, p4, p5);
    }

    static void WREN_MONEY_NETWORK_SPEND_CASINO_CLUB(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);
        Any p5 = (Any)wrenGetSlotDouble(vm, 6);
        Any p6 = (Any)wrenGetSlotDouble(vm, 7);
        Any p7 = (Any)wrenGetSlotDouble(vm, 8);
        Any p8 = (Any)wrenGetSlotDouble(vm, 9);

        MONEY::NETWORK_SPEND_CASINO_CLUB(p0, p1, p2, p3, p4, p5, p6, p7, p8);
    }

    static void WREN_MONEY_NETWORK_SPEND_BUY_SUB(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_SPEND_BUY_SUB(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_SPEND_UPGRADE_SUB(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_SPEND_UPGRADE_SUB(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_SPEND_ISLAND_HEIST(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_SPEND_ISLAND_HEIST(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_EARN_ISLAND_HEIST(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);
        Any p5 = (Any)wrenGetSlotDouble(vm, 6);

        MONEY::NETWORK_EARN_ISLAND_HEIST(p0, p1, p2, p3, p4, p5);
    }

    static void WREN_MONEY_NETWORK_EARN_BEACH_PARTY_LOST_FOUND(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);

        MONEY::NETWORK_EARN_BEACH_PARTY_LOST_FOUND(p0, p1, p2);
    }

    static void WREN_MONEY_NETWORK_EARN_FROM_ISLAND_HEIST_DJ_MISSION(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        MONEY::NETWORK_EARN_FROM_ISLAND_HEIST_DJ_MISSION(p0, p1);
    }

    static void WREN_MONEY_NETWORK_SPEND_CAR_CLUB_MEMBERSHIP(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);

        MONEY::NETWORK_SPEND_CAR_CLUB_MEMBERSHIP(p0, p1, p2, p3, p4);
    }

    static void WREN_MONEY_NETWORK_SPEND_CAR_CLUB_BAR(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_SPEND_CAR_CLUB_BAR(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_SPEND_AUTOSHOP_MODIFY(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);

        MONEY::NETWORK_SPEND_AUTOSHOP_MODIFY(p0, p1, p2, p3, p4);
    }

    static void WREN_MONEY_NETWORK_SPEND_CAR_CLUB_TAKEOVER(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_SPEND_CAR_CLUB_TAKEOVER(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_SPEND_BUY_AUTOSHOP(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_SPEND_BUY_AUTOSHOP(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_SPEND_UPGRADE_AUTOSHOP(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_SPEND_UPGRADE_AUTOSHOP(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_EARN_AUTOSHOP_BUSINESS(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        MONEY::NETWORK_EARN_AUTOSHOP_BUSINESS(p0, p1);
    }

    static void WREN_MONEY_NETWORK_EARN_AUTOSHOP_INCOME(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);

        MONEY::NETWORK_EARN_AUTOSHOP_INCOME(p0, p1);
    }

    static void WREN_MONEY_NETWORK_EARN_CARCLUB_MEMBERSHIP(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        MONEY::NETWORK_EARN_CARCLUB_MEMBERSHIP(p0);
    }

    static void WREN_MONEY_NETWORK_EARN_DAILY_VEHICLE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        MONEY::NETWORK_EARN_DAILY_VEHICLE(p0, p1);
    }

    static void WREN_MONEY_NETWORK_EARN_DAILY_VEHICLE_BONUS(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        MONEY::NETWORK_EARN_DAILY_VEHICLE_BONUS(p0);
    }

    static void WREN_MONEY_NETWORK_EARN_TUNER_AWARD(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);

        MONEY::NETWORK_EARN_TUNER_AWARD(p0, p1, p2);
    }

    static void WREN_MONEY_NETWORK_EARN_TUNER_ROBBERY(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);

        MONEY::NETWORK_EARN_TUNER_ROBBERY(p0, p1, p2, p3, p4);
    }

    static void WREN_MONEY_NETWORK_EARN_UPGRADE_AUTOSHOP(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        MONEY::NETWORK_EARN_UPGRADE_AUTOSHOP(p0, p1);
    }

    static void WREN_MONEY_NETWORK_SPEND_INTERACTION_MENU_ABILITY(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_SPEND_INTERACTION_MENU_ABILITY(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_SPEND_SET_COMMON_FIELDS(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        BOOL p3 = (BOOL)wrenGetSlotBool(vm, 4);

        MONEY::NETWORK_SPEND_SET_COMMON_FIELDS(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_SPEND_SET_DISCOUNT(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        MONEY::NETWORK_SPEND_SET_DISCOUNT(p0);
    }

    static void WREN_MONEY_NETWORK_SPEND_BUY_AGENCY(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_SPEND_BUY_AGENCY(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_SPEND_UPGRADE_AGENCY(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_SPEND_UPGRADE_AGENCY(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_SPEND_AGENCY(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);

        MONEY::NETWORK_SPEND_AGENCY(p0, p1, p2, p3, p4);
    }

    static void WREN_MONEY_NETWORK_SPEND_HIDDEN(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_SPEND_HIDDEN(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_SPEND_SOURCE_BIKE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_SPEND_SOURCE_BIKE(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_SPEND_COMP_SUV(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_SPEND_COMP_SUV(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_SPEND_SUV_FST_TRVL(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_SPEND_SUV_FST_TRVL(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_SPEND_SUPPLY(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_SPEND_SUPPLY(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_SPEND_BIKE_SHOP(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_SPEND_BIKE_SHOP(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_SPEND_VEHICLE_REQUESTED(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);

        MONEY::NETWORK_SPEND_VEHICLE_REQUESTED(p0, p1, p2, p3, p4);
    }

    static void WREN_MONEY_NETWORK_SPEND_GUNRUNNING(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_SPEND_GUNRUNNING(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_EARN_AGENCY_SAFE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        MONEY::NETWORK_EARN_AGENCY_SAFE(p0);
    }

    static void WREN_MONEY_NETWORK_EARN_AWARD_CONTRACT(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        MONEY::NETWORK_EARN_AWARD_CONTRACT(p0, p1);
    }

    static void WREN_MONEY_NETWORK_EARN_AGENCY_CONTRACT(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        MONEY::NETWORK_EARN_AGENCY_CONTRACT(p0, p1);
    }

    static void WREN_MONEY_NETWORK_EARN_AWARD_PHONE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        MONEY::NETWORK_EARN_AWARD_PHONE(p0, p1);
    }

    static void WREN_MONEY_NETWORK_EARN_AGENCY_PHONE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);

        MONEY::NETWORK_EARN_AGENCY_PHONE(p0, p1, p2);
    }

    static void WREN_MONEY_NETWORK_EARN_AWARD_FIXER_MISSION(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        MONEY::NETWORK_EARN_AWARD_FIXER_MISSION(p0, p1);
    }

    static void WREN_MONEY_NETWORK_EARN_FIXER_PREP(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        MONEY::NETWORK_EARN_FIXER_PREP(p0, p1);
    }

    static void WREN_MONEY_NETWORK_EARN_FIXER_FINALE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        MONEY::NETWORK_EARN_FIXER_FINALE(p0, p1);
    }

    static void WREN_MONEY_NETWORK_EARN_FIXER_AGENCY_SHORT_TRIP(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        MONEY::NETWORK_EARN_FIXER_AGENCY_SHORT_TRIP(p0, p1);
    }

    static void WREN_MONEY_NETWORK_EARN_AWARD_SHORT_TRIP(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        MONEY::NETWORK_EARN_AWARD_SHORT_TRIP(p0, p1);
    }

    static void WREN_MONEY_NETWORK_EARN_FIXER_RIVAL_DELIVERY(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        MONEY::NETWORK_EARN_FIXER_RIVAL_DELIVERY(p0, p1);
    }

    static void WREN_MONEY_NETWORK_EARN_UPGRADE_AGENCY(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        MONEY::NETWORK_EARN_UPGRADE_AGENCY(p0, p1);
    }

    static void WREN_MONEY_NETWORK_SPEND_APARTMENT_UTILITIES(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);
        Any data;

        MONEY::NETWORK_SPEND_APARTMENT_UTILITIES(amount, p1, p2, &data);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_MONEY_NETWORK_SPEND_BUSINESS_PROPERTY_FEES(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_SPEND_BUSINESS_PROPERTY_FEES(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_EARN_SIGHTSEEING_REWARD(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_EARN_SIGHTSEEING_REWARD(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_EARN_BIKER_SHOP(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        MONEY::NETWORK_EARN_BIKER_SHOP(p0, p1);
    }

    static void WREN_MONEY_NETWORK_EARN_BIKER(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        MONEY::NETWORK_EARN_BIKER(p0);
    }

    static void WREN_MONEY_NETWORK_YOHAN_SOURCE_GOODS(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        MONEY::NETWORK_YOHAN_SOURCE_GOODS(p0, p1, p2, p3);
    }

    static void WREN_MONEY_NETWORK_GET_VC_BANK_BALANCE(WrenVM* vm)
    {

        int res = MONEY::NETWORK_GET_VC_BANK_BALANCE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_MONEY_NETWORK_GET_VC_WALLET_BALANCE(WrenVM* vm)
    {
        int characterSlot = (int)wrenGetSlotDouble(vm, 1);

        int res = MONEY::NETWORK_GET_VC_WALLET_BALANCE(characterSlot);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_MONEY_NETWORK_GET_VC_BALANCE(WrenVM* vm)
    {

        int res = MONEY::NETWORK_GET_VC_BALANCE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_MONEY_NETWORK_GET_EVC_BALANCE(WrenVM* vm)
    {

        int res = MONEY::NETWORK_GET_EVC_BALANCE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_MONEY_NETWORK_GET_PVC_BALANCE(WrenVM* vm)
    {

        int res = MONEY::NETWORK_GET_PVC_BALANCE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_MONEY_NETWORK_GET_STRING_WALLET_BALANCE(WrenVM* vm)
    {
        int characterSlot = (int)wrenGetSlotDouble(vm, 1);

        const char* res = MONEY::NETWORK_GET_STRING_WALLET_BALANCE(characterSlot);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotString(vm, 0, res);
    }

    static void WREN_MONEY_NETWORK_GET_STRING_BANK_BALANCE(WrenVM* vm)
    {

        const char* res = MONEY::NETWORK_GET_STRING_BANK_BALANCE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotString(vm, 0, res);
    }

    static void WREN_MONEY_NETWORK_GET_STRING_BANK_WALLET_BALANCE(WrenVM* vm)
    {

        const char* res = MONEY::NETWORK_GET_STRING_BANK_WALLET_BALANCE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotString(vm, 0, res);
    }

    static void WREN_MONEY_NETWORK_GET_CAN_SPEND_FROM_WALLET(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);
        int characterSlot = (int)wrenGetSlotDouble(vm, 2);

        BOOL res = MONEY::NETWORK_GET_CAN_SPEND_FROM_WALLET(amount, characterSlot);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MONEY_NETWORK_GET_CAN_SPEND_FROM_BANK(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = MONEY::NETWORK_GET_CAN_SPEND_FROM_BANK(amount);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MONEY_NETWORK_GET_CAN_SPEND_FROM_BANK_AND_WALLET(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);
        int characterSlot = (int)wrenGetSlotDouble(vm, 2);

        BOOL res = MONEY::NETWORK_GET_CAN_SPEND_FROM_BANK_AND_WALLET(amount, characterSlot);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MONEY_NETWORK_GET_PVC_TRANSFER_BALANCE(WrenVM* vm)
    {

        int res = MONEY::NETWORK_GET_PVC_TRANSFER_BALANCE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_MONEY_NETWORK_GET_CAN_TRANSFER_CASH(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = MONEY::NETWORK_GET_CAN_TRANSFER_CASH(amount);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MONEY_NETWORK_CAN_RECEIVE_PLAYER_CASH(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        BOOL res = MONEY::NETWORK_CAN_RECEIVE_PLAYER_CASH(p0, p1, p2, p3);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MONEY_NETWORK_GET_REMAINING_TRANSFER_BALANCE(WrenVM* vm)
    {

        int res = MONEY::NETWORK_GET_REMAINING_TRANSFER_BALANCE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_MONEY_WITHDRAW_VC(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);

        int res = MONEY::WITHDRAW_VC(amount);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_MONEY_DEPOSIT_VC(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = MONEY::DEPOSIT_VC(amount);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MONEY_HAS_VC_WITHDRAWAL_COMPLETED(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        BOOL res = MONEY::HAS_VC_WITHDRAWAL_COMPLETED(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_MONEY_WAS_VC_WITHDRAWAL_SUCCESSFUL(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        BOOL res = MONEY::WAS_VC_WITHDRAWAL_SUCCESSFUL(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }


    static void WREN_NETSHOPPING_NET_GAMESERVER_USE_SERVER_TRANSACTIONS(WrenVM* vm)
    {

        BOOL res = NETSHOPPING::NET_GAMESERVER_USE_SERVER_TRANSACTIONS();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETSHOPPING_NET_GAMESERVER_CATALOG_ITEM_IS_VALID(WrenVM* vm)
    {
        const char* name = wrenGetSlotString(vm, 1);

        BOOL res = NETSHOPPING::NET_GAMESERVER_CATALOG_ITEM_IS_VALID(name);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETSHOPPING_NET_GAMESERVER_CATALOG_ITEM_KEY_IS_VALID(WrenVM* vm)
    {
        Hash hash = (Hash)wrenGetSlotDouble(vm, 1);

        BOOL res = NETSHOPPING::NET_GAMESERVER_CATALOG_ITEM_KEY_IS_VALID(hash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETSHOPPING_NET_GAMESERVER_GET_PRICE(WrenVM* vm)
    {
        Hash itemHash = (Hash)wrenGetSlotDouble(vm, 1);
        Hash categoryHash = (Hash)wrenGetSlotDouble(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        int res = NETSHOPPING::NET_GAMESERVER_GET_PRICE(itemHash, categoryHash, p2);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETSHOPPING_NET_GAMESERVER_CATALOG_IS_VALID(WrenVM* vm)
    {

        BOOL res = NETSHOPPING::NET_GAMESERVER_CATALOG_IS_VALID();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETSHOPPING_NET_GAMESERVER_IS_CATALOG_CURRENT(WrenVM* vm)
    {

        BOOL res = NETSHOPPING::NET_GAMESERVER_IS_CATALOG_CURRENT();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETSHOPPING_NET_GAMESERVER_GET_CATALOG_CLOUD_CRC(WrenVM* vm)
    {

        Hash res = NETSHOPPING::NET_GAMESERVER_GET_CATALOG_CLOUD_CRC();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETSHOPPING_NET_GAMESERVER_REFRESH_SERVER_CATALOG(WrenVM* vm)
    {

        Any res = NETSHOPPING::NET_GAMESERVER_REFRESH_SERVER_CATALOG();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETSHOPPING_NET_GAMESERVER_RETRIEVE_CATALOG_REFRESH_STATUS(WrenVM* vm)
    {
        int state;

        BOOL res = NETSHOPPING::NET_GAMESERVER_RETRIEVE_CATALOG_REFRESH_STATUS(&state);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, state);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETSHOPPING_NET_GAMESERVER_INIT_SESSION(WrenVM* vm)
    {

        Any res = NETSHOPPING::NET_GAMESERVER_INIT_SESSION();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETSHOPPING_NET_GAMESERVER_RETRIEVE_INIT_SESSION_STATUS(WrenVM* vm)
    {
        int p0;

        BOOL res = NETSHOPPING::NET_GAMESERVER_RETRIEVE_INIT_SESSION_STATUS(&p0);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p0);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETSHOPPING_NET_GAMESERVER_START_SESSION(WrenVM* vm)
    {
        int charSlot = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = NETSHOPPING::NET_GAMESERVER_START_SESSION(charSlot);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETSHOPPING_NET_GAMESERVER_START_SESSION_PENDING(WrenVM* vm)
    {

        BOOL res = NETSHOPPING::NET_GAMESERVER_START_SESSION_PENDING();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETSHOPPING_NET_GAMESERVER_RETRIEVE_START_SESSION_STATUS(WrenVM* vm)
    {
        int p0;

        BOOL res = NETSHOPPING::NET_GAMESERVER_RETRIEVE_START_SESSION_STATUS(&p0);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p0);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETSHOPPING_NET_GAMESERVER_RETRIEVE_SESSION_ERROR_CODE(WrenVM* vm)
    {
        int p0;

        BOOL res = NETSHOPPING::NET_GAMESERVER_RETRIEVE_SESSION_ERROR_CODE(&p0);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p0);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETSHOPPING_NET_GAMESERVER_IS_SESSION_VALID(WrenVM* vm)
    {
        int charSlot = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = NETSHOPPING::NET_GAMESERVER_IS_SESSION_VALID(charSlot);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETSHOPPING_NET_GAMESERVER_CLEAR_SESSION(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);

        int res = NETSHOPPING::NET_GAMESERVER_CLEAR_SESSION(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETSHOPPING_NET_GAMESERVER_SESSION_APPLY_RECEIVED_DATA(WrenVM* vm)
    {
        int charSlot = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = NETSHOPPING::NET_GAMESERVER_SESSION_APPLY_RECEIVED_DATA(charSlot);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETSHOPPING_NET_GAMESERVER_IS_SESSION_REFRESH_PENDING(WrenVM* vm)
    {

        BOOL res = NETSHOPPING::NET_GAMESERVER_IS_SESSION_REFRESH_PENDING();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETSHOPPING_NET_GAMESERVER_START_SESSION_RESTART(WrenVM* vm)
    {
        BOOL inventory = (BOOL)wrenGetSlotBool(vm, 1);
        BOOL playerbalance = (BOOL)wrenGetSlotBool(vm, 2);

        BOOL res = NETSHOPPING::NET_GAMESERVER_START_SESSION_RESTART(inventory, playerbalance);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETSHOPPING_NET_GAMESERVER_TRANSACTION_IN_PROGRESS(WrenVM* vm)
    {

        BOOL res = NETSHOPPING::NET_GAMESERVER_TRANSACTION_IN_PROGRESS();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETSHOPPING_NET_GAMESERVER_GET_SESSION_STATE_AND_STATUS(WrenVM* vm)
    {
        int p0;
        BOOL p1;

        BOOL res = NETSHOPPING::NET_GAMESERVER_GET_SESSION_STATE_AND_STATUS(&p0, &p1);

        wrenEnsureSlots(vm, 6);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p0);
        wrenInsertInList(vm, 0, 1, 2);

        wrenSetSlotBool(vm, 3, (bool)p1);
        wrenInsertInList(vm, 0, 2, 3);

    }

    static void WREN_NETSHOPPING_NET_GAMESERVER_BASKET_START(WrenVM* vm)
    {
        int transactionId;
        Hash categoryHash = (Hash)wrenGetSlotDouble(vm, 1);
        Hash actionHash = (Hash)wrenGetSlotDouble(vm, 2);
        int flags = (int)wrenGetSlotDouble(vm, 3);

        BOOL res = NETSHOPPING::NET_GAMESERVER_BASKET_START(&transactionId, categoryHash, actionHash, flags);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, transactionId);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETSHOPPING_NET_GAMESERVER_BASKET_END(WrenVM* vm)
    {

        BOOL res = NETSHOPPING::NET_GAMESERVER_BASKET_END();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETSHOPPING_NET_GAMESERVER_BASKET_IS_ACTIVE(WrenVM* vm)
    {

        BOOL res = NETSHOPPING::NET_GAMESERVER_BASKET_IS_ACTIVE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETSHOPPING_NET_GAMESERVER_BASKET_ADD_ITEM(WrenVM* vm)
    {
        Any itemData;
        int quantity = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = NETSHOPPING::NET_GAMESERVER_BASKET_ADD_ITEM(&itemData, quantity);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, itemData);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETSHOPPING_NET_GAMESERVER_BASKET_IS_FULL(WrenVM* vm)
    {

        BOOL res = NETSHOPPING::NET_GAMESERVER_BASKET_IS_FULL();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETSHOPPING_NET_GAMESERVER_BASKET_APPLY_SERVER_DATA(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1;

        BOOL res = NETSHOPPING::NET_GAMESERVER_BASKET_APPLY_SERVER_DATA(p0, &p1);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p1);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETSHOPPING_NET_GAMESERVER_CHECKOUT_START(WrenVM* vm)
    {
        int transactionId = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = NETSHOPPING::NET_GAMESERVER_CHECKOUT_START(transactionId);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETSHOPPING_NET_GAMESERVER_BEGIN_SERVICE(WrenVM* vm)
    {
        int transactionId;
        Hash categoryHash = (Hash)wrenGetSlotDouble(vm, 1);
        Hash itemHash = (Hash)wrenGetSlotDouble(vm, 2);
        Hash actionTypeHash = (Hash)wrenGetSlotDouble(vm, 3);
        int value = (int)wrenGetSlotDouble(vm, 4);
        int flags = (int)wrenGetSlotDouble(vm, 5);

        BOOL res = NETSHOPPING::NET_GAMESERVER_BEGIN_SERVICE(&transactionId, categoryHash, itemHash, actionTypeHash, value, flags);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, transactionId);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETSHOPPING_NET_GAMESERVER_END_SERVICE(WrenVM* vm)
    {
        int transactionId = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = NETSHOPPING::NET_GAMESERVER_END_SERVICE(transactionId);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETSHOPPING_NET_GAMESERVER_DELETE_CHARACTER(WrenVM* vm)
    {
        int slot = (int)wrenGetSlotDouble(vm, 1);
        BOOL transfer = (BOOL)wrenGetSlotBool(vm, 2);
        Hash reason = (Hash)wrenGetSlotDouble(vm, 3);

        BOOL res = NETSHOPPING::NET_GAMESERVER_DELETE_CHARACTER(slot, transfer, reason);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETSHOPPING_NET_GAMESERVER_DELETE_CHARACTER_GET_STATUS(WrenVM* vm)
    {

        int res = NETSHOPPING::NET_GAMESERVER_DELETE_CHARACTER_GET_STATUS();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETSHOPPING_NET_GAMESERVER_DELETE_SET_TELEMETRY_NONCE_SEED(WrenVM* vm)
    {

        BOOL res = NETSHOPPING::NET_GAMESERVER_DELETE_SET_TELEMETRY_NONCE_SEED();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETSHOPPING_NET_GAMESERVER_TRANSFER_BANK_TO_WALLET(WrenVM* vm)
    {
        int charSlot = (int)wrenGetSlotDouble(vm, 1);
        int amount = (int)wrenGetSlotDouble(vm, 2);

        BOOL res = NETSHOPPING::NET_GAMESERVER_TRANSFER_BANK_TO_WALLET(charSlot, amount);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETSHOPPING_NET_GAMESERVER_TRANSFER_WALLET_TO_BANK(WrenVM* vm)
    {
        int charSlot = (int)wrenGetSlotDouble(vm, 1);
        int amount = (int)wrenGetSlotDouble(vm, 2);

        BOOL res = NETSHOPPING::NET_GAMESERVER_TRANSFER_WALLET_TO_BANK(charSlot, amount);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETSHOPPING_NET_GAMESERVER_TRANSFER_BANK_TO_WALLET_GET_STATUS(WrenVM* vm)
    {

        int res = NETSHOPPING::NET_GAMESERVER_TRANSFER_BANK_TO_WALLET_GET_STATUS();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETSHOPPING_NET_GAMESERVER_TRANSFER_WALLET_TO_BANK_GET_STATUS(WrenVM* vm)
    {

        int res = NETSHOPPING::NET_GAMESERVER_TRANSFER_WALLET_TO_BANK_GET_STATUS();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETSHOPPING_NET_GAMESERVER_TRANSFER_CASH_SET_TELEMETRY_NONCE_SEED(WrenVM* vm)
    {

        BOOL res = NETSHOPPING::NET_GAMESERVER_TRANSFER_CASH_SET_TELEMETRY_NONCE_SEED();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETSHOPPING_NET_GAMESERVER_SET_TELEMETRY_NONCE_SEED(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = NETSHOPPING::NET_GAMESERVER_SET_TELEMETRY_NONCE_SEED(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }


    static void WREN_NETWORK_GET_ONLINE_VERSION(WrenVM* vm)
    {

        const char* res = NETWORK::GET_ONLINE_VERSION();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotString(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_IS_SIGNED_IN(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_IS_SIGNED_IN();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_IS_SIGNED_ONLINE(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_IS_SIGNED_ONLINE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_IS_NP_AVAILABLE(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_IS_NP_AVAILABLE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_IS_NP_PENDING(WrenVM* vm)
    {

        Any res = NETWORK::NETWORK_IS_NP_PENDING();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_GET_NP_UNAVAILABLE_REASON(WrenVM* vm)
    {

        int res = NETWORK::NETWORK_GET_NP_UNAVAILABLE_REASON();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_IS_CONNETED_TO_NP_PRESENCE(WrenVM* vm)
    {

        Any res = NETWORK::NETWORK_IS_CONNETED_TO_NP_PRESENCE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_IS_LOGGED_IN_TO_PSN(WrenVM* vm)
    {

        Any res = NETWORK::NETWORK_IS_LOGGED_IN_TO_PSN();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_HAS_VALID_ROS_CREDENTIALS(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_HAS_VALID_ROS_CREDENTIALS();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_IS_REFRESHING_ROS_CREDENTIALS(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_IS_REFRESHING_ROS_CREDENTIALS();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_IS_CLOUD_AVAILABLE(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_IS_CLOUD_AVAILABLE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_HAS_SOCIAL_CLUB_ACCOUNT(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_HAS_SOCIAL_CLUB_ACCOUNT();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_ARE_SOCIAL_CLUB_POLICIES_CURRENT(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_ARE_SOCIAL_CLUB_POLICIES_CURRENT();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_IS_HOST(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_IS_HOST();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_GET_HOST_PLAYER_INDEX(WrenVM* vm)
    {

        Player res = NETWORK::NETWORK_GET_HOST_PLAYER_INDEX();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_WAS_GAME_SUSPENDED(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_WAS_GAME_SUSPENDED();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_HAVE_ONLINE_PRIVILEGES(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_HAVE_ONLINE_PRIVILEGES();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_HAS_AGE_RESTRICTIONS(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_HAS_AGE_RESTRICTIONS();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_HAVE_USER_CONTENT_PRIVILEGES(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::NETWORK_HAVE_USER_CONTENT_PRIVILEGES(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_HAVE_COMMUNICATION_PRIVILEGES(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);
        Player player = (Player)wrenGetSlotDouble(vm, 2);

        BOOL res = NETWORK::NETWORK_HAVE_COMMUNICATION_PRIVILEGES(p0, player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_CHECK_ONLINE_PRIVILEGES(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        BOOL res = NETWORK::NETWORK_CHECK_ONLINE_PRIVILEGES(p0, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_CHECK_USER_CONTENT_PRIVILEGES(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        BOOL res = NETWORK::NETWORK_CHECK_USER_CONTENT_PRIVILEGES(p0, p1, p2);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_CHECK_COMMUNICATION_PRIVILEGES(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        BOOL res = NETWORK::NETWORK_CHECK_COMMUNICATION_PRIVILEGES(p0, p1, p2);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_CHECK_TEXT_COMMUNICATION_PRIVILEGES(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);

        Any res = NETWORK::NETWORK_CHECK_TEXT_COMMUNICATION_PRIVILEGES(p0, p1, p2);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_IS_USING_ONLINE_PROMOTION(WrenVM* vm)
    {

        Any res = NETWORK::NETWORK_IS_USING_ONLINE_PROMOTION();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_SHOULD_SHOW_PROMOTION_ALERT_SCREEN(WrenVM* vm)
    {

        Any res = NETWORK::NETWORK_SHOULD_SHOW_PROMOTION_ALERT_SCREEN();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_HAS_SOCIAL_NETWORKING_SHARING_PRIV(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_HAS_SOCIAL_NETWORKING_SHARING_PRIV();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_GET_AGE_GROUP(WrenVM* vm)
    {

        int res = NETWORK::NETWORK_GET_AGE_GROUP();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_CHECK_PRIVILEGES(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);

        Any res = NETWORK::NETWORK_CHECK_PRIVILEGES(p0, p1, p2);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_IS_PRIVILEGE_CHECK_IN_PROGRESS(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_IS_PRIVILEGE_CHECK_IN_PROGRESS();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_SET_PRIVILEGE_CHECK_RESULT_NOT_NEEDED(WrenVM* vm)
    {

        NETWORK::NETWORK_SET_PRIVILEGE_CHECK_RESULT_NOT_NEEDED();
    }

    static void WREN_NETWORK_NETWORK_RESOLVE_PRIVILEGE_USER_CONTENT(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_RESOLVE_PRIVILEGE_USER_CONTENT();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_HAVE_PLATFORM_SUBSCRIPTION(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_HAVE_PLATFORM_SUBSCRIPTION();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_IS_PLATFORM_SUBSCRIPTION_CHECK_PENDING(WrenVM* vm)
    {

        Any res = NETWORK::NETWORK_IS_PLATFORM_SUBSCRIPTION_CHECK_PENDING();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_SHOW_ACCOUNT_UPGRADE_UI(WrenVM* vm)
    {

        NETWORK::NETWORK_SHOW_ACCOUNT_UPGRADE_UI();
    }

    static void WREN_NETWORK_NETWORK_IS_SHOWING_SYSTEM_UI_OR_RECENTLY_REQUESTED_UPSELL(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_IS_SHOWING_SYSTEM_UI_OR_RECENTLY_REQUESTED_UPSELL();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_NEED_TO_START_NEW_GAME_BUT_BLOCKED(WrenVM* vm)
    {

        Any res = NETWORK::NETWORK_NEED_TO_START_NEW_GAME_BUT_BLOCKED();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_CAN_BAIL(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_CAN_BAIL();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_BAIL(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);
        int p2 = (int)wrenGetSlotDouble(vm, 3);

        NETWORK::NETWORK_BAIL(p0, p1, p2);
    }

    static void WREN_NETWORK_NETWORK_ON_RETURN_TO_SINGLE_PLAYER(WrenVM* vm)
    {

        NETWORK::NETWORK_ON_RETURN_TO_SINGLE_PLAYER();
    }

    static void WREN_NETWORK_NETWORK_TRANSITION_START(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        Any res = NETWORK::NETWORK_TRANSITION_START(p0, p1, p2, p3);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_TRANSITION_ADD_STAGE(WrenVM* vm)
    {
        Hash hash = (Hash)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);
        int p2 = (int)wrenGetSlotDouble(vm, 3);
        int state = (int)wrenGetSlotDouble(vm, 4);
        int p4 = (int)wrenGetSlotDouble(vm, 5);

        NETWORK::NETWORK_TRANSITION_ADD_STAGE(hash, p1, p2, state, p4);
    }

    static void WREN_NETWORK_NETWORK_TRANSITION_FINISH(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);

        Any res = NETWORK::NETWORK_TRANSITION_FINISH(p0, p1, p2);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_CAN_ACCESS_MULTIPLAYER(WrenVM* vm)
    {
        int loadingState;

        BOOL res = NETWORK::NETWORK_CAN_ACCESS_MULTIPLAYER(&loadingState);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, loadingState);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_IS_MULTIPLAYER_DISABLED(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_IS_MULTIPLAYER_DISABLED();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_CAN_ENTER_MULTIPLAYER(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_CAN_ENTER_MULTIPLAYER();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_SESSION_DO_FREEROAM_QUICKMATCH(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        int maxPlayers = (int)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);
        Any p5 = (Any)wrenGetSlotDouble(vm, 6);

        Any res = NETWORK::NETWORK_SESSION_DO_FREEROAM_QUICKMATCH(p0, p1, p2, maxPlayers, p4, p5);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_SESSION_DO_FRIEND_MATCHMAKING(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);
        int maxPlayers = (int)wrenGetSlotDouble(vm, 3);
        BOOL p3 = (BOOL)wrenGetSlotBool(vm, 4);

        BOOL res = NETWORK::NETWORK_SESSION_DO_FRIEND_MATCHMAKING(p0, p1, maxPlayers, p3);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_SESSION_DO_CREW_MATCHMAKING(WrenVM* vm)
    {
        int crewId = (int)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);
        int p2 = (int)wrenGetSlotDouble(vm, 3);
        int maxPlayers = (int)wrenGetSlotDouble(vm, 4);
        BOOL p4 = (BOOL)wrenGetSlotBool(vm, 5);

        BOOL res = NETWORK::NETWORK_SESSION_DO_CREW_MATCHMAKING(crewId, p1, p2, maxPlayers, p4);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_SESSION_DO_ACTIVITY_QUICKMATCH(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);

        BOOL res = NETWORK::NETWORK_SESSION_DO_ACTIVITY_QUICKMATCH(p0, p1, p2, p3, p4);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_SESSION_HOST(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);
        int maxPlayers = (int)wrenGetSlotDouble(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        BOOL res = NETWORK::NETWORK_SESSION_HOST(p0, maxPlayers, p2);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_SESSION_HOST_CLOSED(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);
        int maxPlayers = (int)wrenGetSlotDouble(vm, 2);

        BOOL res = NETWORK::NETWORK_SESSION_HOST_CLOSED(p0, maxPlayers);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_SESSION_HOST_FRIENDS_ONLY(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);
        int maxPlayers = (int)wrenGetSlotDouble(vm, 2);

        BOOL res = NETWORK::NETWORK_SESSION_HOST_FRIENDS_ONLY(p0, maxPlayers);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_SESSION_IS_CLOSED_FRIENDS(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_SESSION_IS_CLOSED_FRIENDS();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_SESSION_IS_CLOSED_CREW(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_SESSION_IS_CLOSED_CREW();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_SESSION_IS_SOLO(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_SESSION_IS_SOLO();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_SESSION_IS_PRIVATE(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_SESSION_IS_PRIVATE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_SESSION_END(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        BOOL res = NETWORK::NETWORK_SESSION_END(p0, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_SESSION_LEAVE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        Any res = NETWORK::NETWORK_SESSION_LEAVE(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_SESSION_KICK_PLAYER(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        NETWORK::NETWORK_SESSION_KICK_PLAYER(player);
    }

    static void WREN_NETWORK_NETWORK_SESSION_GET_KICK_VOTE(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::NETWORK_SESSION_GET_KICK_VOTE(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_SESSION_RESERVE_SLOTS_TRANSITION(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);

        Any res = NETWORK::NETWORK_SESSION_RESERVE_SLOTS_TRANSITION(p0, p1, p2);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_JOIN_PREVIOUSLY_FAILED_SESSION(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_JOIN_PREVIOUSLY_FAILED_SESSION();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_JOIN_PREVIOUSLY_FAILED_TRANSITION(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_JOIN_PREVIOUSLY_FAILED_TRANSITION();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_SESSION_SET_MATCHMAKING_GROUP(WrenVM* vm)
    {
        int matchmakingGroup = (int)wrenGetSlotDouble(vm, 1);

        NETWORK::NETWORK_SESSION_SET_MATCHMAKING_GROUP(matchmakingGroup);
    }

    static void WREN_NETWORK_NETWORK_SESSION_SET_MATCHMAKING_GROUP_MAX(WrenVM* vm)
    {
        int playerType = (int)wrenGetSlotDouble(vm, 1);
        int playerCount = (int)wrenGetSlotDouble(vm, 2);

        NETWORK::NETWORK_SESSION_SET_MATCHMAKING_GROUP_MAX(playerType, playerCount);
    }

    static void WREN_NETWORK_NETWORK_SESSION_GET_MATCHMAKING_GROUP_FREE(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);

        int res = NETWORK::NETWORK_SESSION_GET_MATCHMAKING_GROUP_FREE(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_SESSION_ADD_ACTIVE_MATCHMAKING_GROUP(WrenVM* vm)
    {
        int groupId = (int)wrenGetSlotDouble(vm, 1);

        NETWORK::NETWORK_SESSION_ADD_ACTIVE_MATCHMAKING_GROUP(groupId);
    }

    static void WREN_NETWORK_NETWORK_SESSION_SET_UNIQUE_CREW_LIMIT(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        NETWORK::NETWORK_SESSION_SET_UNIQUE_CREW_LIMIT(p0);
    }

    static void WREN_NETWORK_NETWORK_SESSION_SET_UNIQUE_CREW_LIMIT_TRANSITION(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        NETWORK::NETWORK_SESSION_SET_UNIQUE_CREW_LIMIT_TRANSITION(p0);
    }

    static void WREN_NETWORK_NETWORK_SESSION_SET_UNIQUE_CREW_ONLY_CREWS_TRANSITION(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        NETWORK::NETWORK_SESSION_SET_UNIQUE_CREW_ONLY_CREWS_TRANSITION(p0);
    }

    static void WREN_NETWORK_NETWORK_SESSION_SET_CREW_LIMIT_MAX_MEMBERS_TRANSITION(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        NETWORK::NETWORK_SESSION_SET_CREW_LIMIT_MAX_MEMBERS_TRANSITION(p0);
    }

    static void WREN_NETWORK_NETWORK_SESSION_SET_MATCHMAKING_PROPERTY_ID(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        NETWORK::NETWORK_SESSION_SET_MATCHMAKING_PROPERTY_ID(p0);
    }

    static void WREN_NETWORK_NETWORK_SESSION_SET_MATCHMAKING_MENTAL_STATE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        NETWORK::NETWORK_SESSION_SET_MATCHMAKING_MENTAL_STATE(p0);
    }

    static void WREN_NETWORK_NETWORK_SESSION_SET_NUM_BOSSES(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        NETWORK::NETWORK_SESSION_SET_NUM_BOSSES(p0);
    }

    static void WREN_NETWORK_NETWORK_SESSION_SET_SCRIPT_VALIDATE_JOIN(WrenVM* vm)
    {

        NETWORK::NETWORK_SESSION_SET_SCRIPT_VALIDATE_JOIN();
    }

    static void WREN_NETWORK_NETWORK_SESSION_VALIDATE_JOIN(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        NETWORK::NETWORK_SESSION_VALIDATE_JOIN(p0);
    }

    static void WREN_NETWORK_NETWORK_ADD_FOLLOWERS(WrenVM* vm)
    {
        int p0;
        int p1 = (int)wrenGetSlotDouble(vm, 1);

        NETWORK::NETWORK_ADD_FOLLOWERS(&p0, p1);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_NETWORK_NETWORK_CLEAR_FOLLOWERS(WrenVM* vm)
    {

        NETWORK::NETWORK_CLEAR_FOLLOWERS();
    }

    static void WREN_NETWORK_NETWORK_GET_GLOBAL_MULTIPLAYER_CLOCK(WrenVM* vm)
    {
        int hours;
        int minutes;
        int seconds;

        NETWORK::NETWORK_GET_GLOBAL_MULTIPLAYER_CLOCK(&hours, &minutes, &seconds);

        wrenEnsureSlots(vm, 6);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, hours);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, minutes);
        wrenInsertInList(vm, 0, 1, 2);

        wrenSetSlotDouble(vm, 3, seconds);
        wrenInsertInList(vm, 0, 2, 3);

    }

    static void WREN_NETWORK_NETWORK_SESSION_SET_GAMEMODE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        NETWORK::NETWORK_SESSION_SET_GAMEMODE(p0);
    }

    static void WREN_NETWORK_NETWORK_SESSION_GET_HOST_AIM_PREFERENCE(WrenVM* vm)
    {

        int res = NETWORK::NETWORK_SESSION_GET_HOST_AIM_PREFERENCE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_FIND_GAMERS_IN_CREW(WrenVM* vm)
    {
        int crewId = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::NETWORK_FIND_GAMERS_IN_CREW(crewId);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_FIND_MATCHED_GAMERS(WrenVM* vm)
    {
        int attribute = (int)wrenGetSlotDouble(vm, 1);
        float fallbackLimit = (float)wrenGetSlotDouble(vm, 2);
        float lowerLimit = (float)wrenGetSlotDouble(vm, 3);
        float upperLimit = (float)wrenGetSlotDouble(vm, 4);

        BOOL res = NETWORK::NETWORK_FIND_MATCHED_GAMERS(attribute, fallbackLimit, lowerLimit, upperLimit);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_IS_FINDING_GAMERS(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_IS_FINDING_GAMERS();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_DID_FIND_GAMERS_SUCCEED(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_DID_FIND_GAMERS_SUCCEED();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_GET_NUM_FOUND_GAMERS(WrenVM* vm)
    {

        int res = NETWORK::NETWORK_GET_NUM_FOUND_GAMERS();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_GET_FOUND_GAMER(WrenVM* vm)
    {
        Any p0;
        Any p1 = (Any)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::NETWORK_GET_FOUND_GAMER(&p0, p1);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p0);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_CLEAR_FOUND_GAMERS(WrenVM* vm)
    {

        NETWORK::NETWORK_CLEAR_FOUND_GAMERS();
    }

    static void WREN_NETWORK_NETWORK_QUEUE_GAMER_FOR_STATUS(WrenVM* vm)
    {
        Any p0;

        BOOL res = NETWORK::NETWORK_QUEUE_GAMER_FOR_STATUS(&p0);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p0);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_GET_GAMER_STATUS_FROM_QUEUE(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_GET_GAMER_STATUS_FROM_QUEUE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_IS_GETTING_GAMER_STATUS(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_IS_GETTING_GAMER_STATUS();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_DID_GET_GAMER_STATUS_SUCCEED(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_DID_GET_GAMER_STATUS_SUCCEED();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_GET_GAMER_STATUS_RESULT(WrenVM* vm)
    {
        Any p0;
        Any p1 = (Any)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::NETWORK_GET_GAMER_STATUS_RESULT(&p0, p1);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p0);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_CLEAR_GET_GAMER_STATUS(WrenVM* vm)
    {

        NETWORK::NETWORK_CLEAR_GET_GAMER_STATUS();
    }

    static void WREN_NETWORK_NETWORK_SESSION_JOIN_INVITE(WrenVM* vm)
    {

        NETWORK::NETWORK_SESSION_JOIN_INVITE();
    }

    static void WREN_NETWORK_NETWORK_SESSION_CANCEL_INVITE(WrenVM* vm)
    {

        NETWORK::NETWORK_SESSION_CANCEL_INVITE();
    }

    static void WREN_NETWORK_NETWORK_SESSION_FORCE_CANCEL_INVITE(WrenVM* vm)
    {

        NETWORK::NETWORK_SESSION_FORCE_CANCEL_INVITE();
    }

    static void WREN_NETWORK_NETWORK_HAS_PENDING_INVITE(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_HAS_PENDING_INVITE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_HAS_CONFIRMED_INVITE(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_HAS_CONFIRMED_INVITE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_REQUEST_INVITE_CONFIRMED_EVENT(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_REQUEST_INVITE_CONFIRMED_EVENT();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_SESSION_WAS_INVITED(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_SESSION_WAS_INVITED();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_SESSION_GET_INVITER(WrenVM* vm)
    {
        Any gamerHandle;

        NETWORK::NETWORK_SESSION_GET_INVITER(&gamerHandle);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_NETWORK_NETWORK_SESSION_IS_AWAITING_INVITE_RESPONSE(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_SESSION_IS_AWAITING_INVITE_RESPONSE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_SESSION_IS_DISPLAYING_INVITE_CONFIRMATION(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_SESSION_IS_DISPLAYING_INVITE_CONFIRMATION();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_SUPPRESS_INVITE(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        NETWORK::NETWORK_SUPPRESS_INVITE(toggle);
    }

    static void WREN_NETWORK_NETWORK_BLOCK_INVITES(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        NETWORK::NETWORK_BLOCK_INVITES(toggle);
    }

    static void WREN_NETWORK_NETWORK_BLOCK_JOIN_QUEUE_INVITES(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        NETWORK::NETWORK_BLOCK_JOIN_QUEUE_INVITES(toggle);
    }

    static void WREN_NETWORK_NETWORK_SET_CAN_RECEIVE_RS_INVITES(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        NETWORK::NETWORK_SET_CAN_RECEIVE_RS_INVITES(p0);
    }

    static void WREN_NETWORK_NETWORK_STORE_INVITE_THROUGH_RESTART(WrenVM* vm)
    {

        NETWORK::NETWORK_STORE_INVITE_THROUGH_RESTART();
    }

    static void WREN_NETWORK_NETWORK_ALLOW_INVITE_PROCESS_IN_PLAYER_SWITCH(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        NETWORK::NETWORK_ALLOW_INVITE_PROCESS_IN_PLAYER_SWITCH(p0);
    }

    static void WREN_NETWORK_NETWORK_SET_SCRIPT_READY_FOR_EVENTS(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        NETWORK::NETWORK_SET_SCRIPT_READY_FOR_EVENTS(toggle);
    }

    static void WREN_NETWORK_NETWORK_IS_OFFLINE_INVITE_PENDING(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_IS_OFFLINE_INVITE_PENDING();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_CLEAR_OFFLINE_INVITE_PENDING(WrenVM* vm)
    {

        NETWORK::NETWORK_CLEAR_OFFLINE_INVITE_PENDING();
    }

    static void WREN_NETWORK_NETWORK_SESSION_HOST_SINGLE_PLAYER(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);

        NETWORK::NETWORK_SESSION_HOST_SINGLE_PLAYER(p0);
    }

    static void WREN_NETWORK_NETWORK_SESSION_LEAVE_SINGLE_PLAYER(WrenVM* vm)
    {

        NETWORK::NETWORK_SESSION_LEAVE_SINGLE_PLAYER();
    }

    static void WREN_NETWORK_NETWORK_IS_GAME_IN_PROGRESS(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_IS_GAME_IN_PROGRESS();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_IS_SESSION_ACTIVE(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_IS_SESSION_ACTIVE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_IS_IN_SESSION(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_IS_IN_SESSION();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_IS_SESSION_STARTED(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_IS_SESSION_STARTED();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_IS_SESSION_BUSY(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_IS_SESSION_BUSY();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_CAN_SESSION_END(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_CAN_SESSION_END();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_GET_GAME_MODE(WrenVM* vm)
    {

        Any res = NETWORK::NETWORK_GET_GAME_MODE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_SESSION_MARK_VISIBLE(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        NETWORK::NETWORK_SESSION_MARK_VISIBLE(toggle);
    }

    static void WREN_NETWORK_NETWORK_SESSION_IS_VISIBLE(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_SESSION_IS_VISIBLE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_SESSION_BLOCK_JOIN_REQUESTS(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        NETWORK::NETWORK_SESSION_BLOCK_JOIN_REQUESTS(toggle);
    }

    static void WREN_NETWORK_NETWORK_SESSION_CHANGE_SLOTS(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        NETWORK::NETWORK_SESSION_CHANGE_SLOTS(p0, p1);
    }

    static void WREN_NETWORK_NETWORK_SESSION_GET_PRIVATE_SLOTS(WrenVM* vm)
    {

        int res = NETWORK::NETWORK_SESSION_GET_PRIVATE_SLOTS();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_SESSION_VOICE_HOST(WrenVM* vm)
    {

        NETWORK::NETWORK_SESSION_VOICE_HOST();
    }

    static void WREN_NETWORK_NETWORK_SESSION_VOICE_LEAVE(WrenVM* vm)
    {

        NETWORK::NETWORK_SESSION_VOICE_LEAVE();
    }

    static void WREN_NETWORK_NETWORK_SESSION_VOICE_CONNECT_TO_PLAYER(WrenVM* vm)
    {
        Any p0;

        NETWORK::NETWORK_SESSION_VOICE_CONNECT_TO_PLAYER(&p0);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_NETWORK_NETWORK_SESSION_VOICE_RESPOND_TO_REQUEST(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);

        NETWORK::NETWORK_SESSION_VOICE_RESPOND_TO_REQUEST(p0, p1);
    }

    static void WREN_NETWORK_NETWORK_SESSION_VOICE_SET_TIMEOUT(WrenVM* vm)
    {
        int timeout = (int)wrenGetSlotDouble(vm, 1);

        NETWORK::NETWORK_SESSION_VOICE_SET_TIMEOUT(timeout);
    }

    static void WREN_NETWORK_NETWORK_SESSION_IS_IN_VOICE_SESSION(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_SESSION_IS_IN_VOICE_SESSION();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_SESSION_IS_VOICE_SESSION_ACTIVE(WrenVM* vm)
    {

        Any res = NETWORK::NETWORK_SESSION_IS_VOICE_SESSION_ACTIVE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_SESSION_IS_VOICE_SESSION_BUSY(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_SESSION_IS_VOICE_SESSION_BUSY();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_SEND_TEXT_MESSAGE(WrenVM* vm)
    {
        const char* message = wrenGetSlotString(vm, 1);
        Any gamerHandle;

        BOOL res = NETWORK::NETWORK_SEND_TEXT_MESSAGE(message, &gamerHandle);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, gamerHandle);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_SET_ACTIVITY_SPECTATOR(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        NETWORK::NETWORK_SET_ACTIVITY_SPECTATOR(toggle);
    }

    static void WREN_NETWORK_NETWORK_IS_ACTIVITY_SPECTATOR(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_IS_ACTIVITY_SPECTATOR();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_SET_ACTIVITY_PLAYER_MAX(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        NETWORK::NETWORK_SET_ACTIVITY_PLAYER_MAX(p0);
    }

    static void WREN_NETWORK_NETWORK_SET_ACTIVITY_SPECTATOR_MAX(WrenVM* vm)
    {
        int maxSpectators = (int)wrenGetSlotDouble(vm, 1);

        NETWORK::NETWORK_SET_ACTIVITY_SPECTATOR_MAX(maxSpectators);
    }

    static void WREN_NETWORK_NETWORK_GET_ACTIVITY_PLAYER_NUM(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        int res = NETWORK::NETWORK_GET_ACTIVITY_PLAYER_NUM(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_IS_ACTIVITY_SPECTATOR_FROM_HANDLE(WrenVM* vm)
    {
        Any gamerHandle;

        BOOL res = NETWORK::NETWORK_IS_ACTIVITY_SPECTATOR_FROM_HANDLE(&gamerHandle);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, gamerHandle);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_HOST_TRANSITION(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);
        int p2 = (int)wrenGetSlotDouble(vm, 3);
        int p3 = (int)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);
        BOOL p5 = (BOOL)wrenGetSlotBool(vm, 6);
        BOOL p6 = (BOOL)wrenGetSlotBool(vm, 7);
        int p7 = (int)wrenGetSlotDouble(vm, 8);
        Any p8 = (Any)wrenGetSlotDouble(vm, 9);
        int p9 = (int)wrenGetSlotDouble(vm, 10);

        BOOL res = NETWORK::NETWORK_HOST_TRANSITION(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_DO_TRANSITION_QUICKMATCH(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);
        Any p5 = (Any)wrenGetSlotDouble(vm, 6);

        BOOL res = NETWORK::NETWORK_DO_TRANSITION_QUICKMATCH(p0, p1, p2, p3, p4, p5);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_DO_TRANSITION_QUICKMATCH_ASYNC(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);
        Any p5 = (Any)wrenGetSlotDouble(vm, 6);

        BOOL res = NETWORK::NETWORK_DO_TRANSITION_QUICKMATCH_ASYNC(p0, p1, p2, p3, p4, p5);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_DO_TRANSITION_QUICKMATCH_WITH_GROUP(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);
        Any p4;
        Any p5 = (Any)wrenGetSlotDouble(vm, 5);
        Any p6 = (Any)wrenGetSlotDouble(vm, 6);
        Any p7 = (Any)wrenGetSlotDouble(vm, 7);

        BOOL res = NETWORK::NETWORK_DO_TRANSITION_QUICKMATCH_WITH_GROUP(p0, p1, p2, p3, &p4, p5, p6, p7);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p4);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_JOIN_GROUP_ACTIVITY(WrenVM* vm)
    {

        Any res = NETWORK::NETWORK_JOIN_GROUP_ACTIVITY();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_CLEAR_GROUP_ACTIVITY(WrenVM* vm)
    {

        NETWORK::NETWORK_CLEAR_GROUP_ACTIVITY();
    }

    static void WREN_NETWORK_NETWORK_RETAIN_ACTIVITY_GROUP(WrenVM* vm)
    {

        NETWORK::NETWORK_RETAIN_ACTIVITY_GROUP();
    }

    static void WREN_NETWORK_NETWORK_IS_TRANSITION_CLOSED_FRIENDS(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_IS_TRANSITION_CLOSED_FRIENDS();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_IS_TRANSITION_CLOSED_CREW(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_IS_TRANSITION_CLOSED_CREW();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_IS_TRANSITION_SOLO(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_IS_TRANSITION_SOLO();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_IS_TRANSITION_PRIVATE(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_IS_TRANSITION_PRIVATE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_GET_NUM_TRANSITION_NON_ASYNC_GAMERS(WrenVM* vm)
    {

        int res = NETWORK::NETWORK_GET_NUM_TRANSITION_NON_ASYNC_GAMERS();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_MARK_AS_PREFERRED_ACTIVITY(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        NETWORK::NETWORK_MARK_AS_PREFERRED_ACTIVITY(p0);
    }

    static void WREN_NETWORK_NETWORK_MARK_AS_WAITING_ASYNC(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        NETWORK::NETWORK_MARK_AS_WAITING_ASYNC(p0);
    }

    static void WREN_NETWORK_NETWORK_SET_IN_PROGRESS_FINISH_TIME(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        NETWORK::NETWORK_SET_IN_PROGRESS_FINISH_TIME(p0);
    }

    static void WREN_NETWORK_NETWORK_SET_TRANSITION_CREATOR_HANDLE(WrenVM* vm)
    {
        Any p0;

        NETWORK::NETWORK_SET_TRANSITION_CREATOR_HANDLE(&p0);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_NETWORK_NETWORK_CLEAR_TRANSITION_CREATOR_HANDLE(WrenVM* vm)
    {

        NETWORK::NETWORK_CLEAR_TRANSITION_CREATOR_HANDLE();
    }

    static void WREN_NETWORK_NETWORK_INVITE_GAMERS_TO_TRANSITION(WrenVM* vm)
    {
        Any p0;
        Any p1 = (Any)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::NETWORK_INVITE_GAMERS_TO_TRANSITION(&p0, p1);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p0);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_SET_GAMER_INVITED_TO_TRANSITION(WrenVM* vm)
    {
        Any gamerHandle;

        NETWORK::NETWORK_SET_GAMER_INVITED_TO_TRANSITION(&gamerHandle);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_NETWORK_NETWORK_LEAVE_TRANSITION(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_LEAVE_TRANSITION();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_LAUNCH_TRANSITION(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_LAUNCH_TRANSITION();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_SET_DO_NOT_LAUNCH_FROM_JOIN_AS_MIGRATED_HOST(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        NETWORK::NETWORK_SET_DO_NOT_LAUNCH_FROM_JOIN_AS_MIGRATED_HOST(toggle);
    }

    static void WREN_NETWORK_NETWORK_CANCEL_TRANSITION_MATCHMAKING(WrenVM* vm)
    {

        NETWORK::NETWORK_CANCEL_TRANSITION_MATCHMAKING();
    }

    static void WREN_NETWORK_NETWORK_BAIL_TRANSITION(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);
        int p2 = (int)wrenGetSlotDouble(vm, 3);

        NETWORK::NETWORK_BAIL_TRANSITION(p0, p1, p2);
    }

    static void WREN_NETWORK_NETWORK_DO_TRANSITION_TO_GAME(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);
        int maxPlayers = (int)wrenGetSlotDouble(vm, 2);

        BOOL res = NETWORK::NETWORK_DO_TRANSITION_TO_GAME(p0, maxPlayers);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_DO_TRANSITION_TO_NEW_GAME(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);
        int maxPlayers = (int)wrenGetSlotDouble(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        BOOL res = NETWORK::NETWORK_DO_TRANSITION_TO_NEW_GAME(p0, maxPlayers, p2);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_DO_TRANSITION_TO_FREEMODE(WrenVM* vm)
    {
        Any p0;
        Any p1 = (Any)wrenGetSlotDouble(vm, 1);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 2);
        int players = (int)wrenGetSlotDouble(vm, 3);
        BOOL p4 = (BOOL)wrenGetSlotBool(vm, 4);

        BOOL res = NETWORK::NETWORK_DO_TRANSITION_TO_FREEMODE(&p0, p1, p2, players, p4);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p0);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_DO_TRANSITION_TO_NEW_FREEMODE(WrenVM* vm)
    {
        Any p0;
        Any p1 = (Any)wrenGetSlotDouble(vm, 1);
        int players = (int)wrenGetSlotDouble(vm, 2);
        BOOL p3 = (BOOL)wrenGetSlotBool(vm, 3);
        BOOL p4 = (BOOL)wrenGetSlotBool(vm, 4);
        BOOL p5 = (BOOL)wrenGetSlotBool(vm, 5);

        BOOL res = NETWORK::NETWORK_DO_TRANSITION_TO_NEW_FREEMODE(&p0, p1, players, p3, p4, p5);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p0);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_IS_TRANSITION_TO_GAME(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_IS_TRANSITION_TO_GAME();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_GET_TRANSITION_MEMBERS(WrenVM* vm)
    {
        Any data;
        int dataCount = (int)wrenGetSlotDouble(vm, 1);

        int res = NETWORK::NETWORK_GET_TRANSITION_MEMBERS(&data, dataCount);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, data);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_APPLY_TRANSITION_PARAMETER(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);

        NETWORK::NETWORK_APPLY_TRANSITION_PARAMETER(p0, p1);
    }

    static void WREN_NETWORK_NETWORK_APPLY_TRANSITION_PARAMETER_STRING(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);
        const char* string = wrenGetSlotString(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        NETWORK::NETWORK_APPLY_TRANSITION_PARAMETER_STRING(p0, string, p2);
    }

    static void WREN_NETWORK_NETWORK_SEND_TRANSITION_GAMER_INSTRUCTION(WrenVM* vm)
    {
        Any gamerHandle;
        const char* p1 = wrenGetSlotString(vm, 1);
        int p2 = (int)wrenGetSlotDouble(vm, 2);
        int p3 = (int)wrenGetSlotDouble(vm, 3);
        BOOL p4 = (BOOL)wrenGetSlotBool(vm, 4);

        BOOL res = NETWORK::NETWORK_SEND_TRANSITION_GAMER_INSTRUCTION(&gamerHandle, p1, p2, p3, p4);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, gamerHandle);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_MARK_TRANSITION_GAMER_AS_FULLY_JOINED(WrenVM* vm)
    {
        Any p0;

        BOOL res = NETWORK::NETWORK_MARK_TRANSITION_GAMER_AS_FULLY_JOINED(&p0);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p0);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_IS_TRANSITION_HOST(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_IS_TRANSITION_HOST();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_IS_TRANSITION_HOST_FROM_HANDLE(WrenVM* vm)
    {
        Any gamerHandle;

        BOOL res = NETWORK::NETWORK_IS_TRANSITION_HOST_FROM_HANDLE(&gamerHandle);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, gamerHandle);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_GET_TRANSITION_HOST(WrenVM* vm)
    {
        Any gamerHandle;

        BOOL res = NETWORK::NETWORK_GET_TRANSITION_HOST(&gamerHandle);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, gamerHandle);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_IS_IN_TRANSITION(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_IS_IN_TRANSITION();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_IS_TRANSITION_STARTED(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_IS_TRANSITION_STARTED();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_IS_TRANSITION_BUSY(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_IS_TRANSITION_BUSY();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_IS_TRANSITION_MATCHMAKING(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_IS_TRANSITION_MATCHMAKING();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_IS_TRANSITION_LEAVE_POSTPONED(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_IS_TRANSITION_LEAVE_POSTPONED();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_TRANSITION_SET_IN_PROGRESS(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        NETWORK::NETWORK_TRANSITION_SET_IN_PROGRESS(p0);
    }

    static void WREN_NETWORK_NETWORK_TRANSITION_SET_CONTENT_CREATOR(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        NETWORK::NETWORK_TRANSITION_SET_CONTENT_CREATOR(p0);
    }

    static void WREN_NETWORK_NETWORK_TRANSITION_SET_ACTIVITY_ISLAND(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        NETWORK::NETWORK_TRANSITION_SET_ACTIVITY_ISLAND(p0);
    }

    static void WREN_NETWORK_NETWORK_OPEN_TRANSITION_MATCHMAKING(WrenVM* vm)
    {

        NETWORK::NETWORK_OPEN_TRANSITION_MATCHMAKING();
    }

    static void WREN_NETWORK_NETWORK_CLOSE_TRANSITION_MATCHMAKING(WrenVM* vm)
    {

        NETWORK::NETWORK_CLOSE_TRANSITION_MATCHMAKING();
    }

    static void WREN_NETWORK_NETWORK_IS_TRANSITION_OPEN_TO_MATCHMAKING(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_IS_TRANSITION_OPEN_TO_MATCHMAKING();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_SET_TRANSITION_VISIBILITY_LOCK(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        NETWORK::NETWORK_SET_TRANSITION_VISIBILITY_LOCK(p0, p1);
    }

    static void WREN_NETWORK_NETWORK_IS_TRANSITION_VISIBILITY_LOCKED(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_IS_TRANSITION_VISIBILITY_LOCKED();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_SET_TRANSITION_ACTIVITY_ID(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        NETWORK::NETWORK_SET_TRANSITION_ACTIVITY_ID(p0);
    }

    static void WREN_NETWORK_NETWORK_CHANGE_TRANSITION_SLOTS(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        NETWORK::NETWORK_CHANGE_TRANSITION_SLOTS(p0, p1);
    }

    static void WREN_NETWORK_NETWORK_TRANSITION_BLOCK_JOIN_REQUESTS(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        NETWORK::NETWORK_TRANSITION_BLOCK_JOIN_REQUESTS(p0);
    }

    static void WREN_NETWORK_NETWORK_HAS_PLAYER_STARTED_TRANSITION(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::NETWORK_HAS_PLAYER_STARTED_TRANSITION(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_ARE_TRANSITION_DETAILS_VALID(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::NETWORK_ARE_TRANSITION_DETAILS_VALID(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_JOIN_TRANSITION(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::NETWORK_JOIN_TRANSITION(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_HAS_INVITED_GAMER_TO_TRANSITION(WrenVM* vm)
    {
        Any p0;

        BOOL res = NETWORK::NETWORK_HAS_INVITED_GAMER_TO_TRANSITION(&p0);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p0);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_HAS_TRANSITION_INVITE_BEEN_ACKED(WrenVM* vm)
    {
        Any p0;

        BOOL res = NETWORK::NETWORK_HAS_TRANSITION_INVITE_BEEN_ACKED(&p0);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p0);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_IS_ACTIVITY_SESSION(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_IS_ACTIVITY_SESSION();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_DISABLE_REALTIME_MULTIPLAYER(WrenVM* vm)
    {

        NETWORK::NETWORK_DISABLE_REALTIME_MULTIPLAYER();
    }

    static void WREN_NETWORK_NETWORK_SET_PRESENCE_SESSION_INVITES_BLOCKED(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        NETWORK::NETWORK_SET_PRESENCE_SESSION_INVITES_BLOCKED(toggle);
    }

    static void WREN_NETWORK_NETWORK_SEND_INVITE_VIA_PRESENCE(WrenVM* vm)
    {
        Any gamerHandle;
        const char* p1 = wrenGetSlotString(vm, 1);
        Any p2 = (Any)wrenGetSlotDouble(vm, 2);
        Any p3 = (Any)wrenGetSlotDouble(vm, 3);

        BOOL res = NETWORK::NETWORK_SEND_INVITE_VIA_PRESENCE(&gamerHandle, p1, p2, p3);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, gamerHandle);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_SEND_TRANSITION_INVITE_VIA_PRESENCE(WrenVM* vm)
    {
        Any gamerHandle;
        const char* p1 = wrenGetSlotString(vm, 1);
        Any p2 = (Any)wrenGetSlotDouble(vm, 2);
        Any p3 = (Any)wrenGetSlotDouble(vm, 3);

        BOOL res = NETWORK::NETWORK_SEND_TRANSITION_INVITE_VIA_PRESENCE(&gamerHandle, p1, p2, p3);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, gamerHandle);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_SEND_IMPORTANT_TRANSITION_INVITE_VIA_PRESENCE(WrenVM* vm)
    {
        Any gamerHandle;
        const char* p1 = wrenGetSlotString(vm, 1);
        Any p2 = (Any)wrenGetSlotDouble(vm, 2);
        Any p3 = (Any)wrenGetSlotDouble(vm, 3);

        BOOL res = NETWORK::NETWORK_SEND_IMPORTANT_TRANSITION_INVITE_VIA_PRESENCE(&gamerHandle, p1, p2, p3);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, gamerHandle);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_GET_PRESENCE_INVITE_INDEX_BY_ID(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        Any res = NETWORK::NETWORK_GET_PRESENCE_INVITE_INDEX_BY_ID(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_GET_NUM_PRESENCE_INVITES(WrenVM* vm)
    {

        int res = NETWORK::NETWORK_GET_NUM_PRESENCE_INVITES();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_ACCEPT_PRESENCE_INVITE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::NETWORK_ACCEPT_PRESENCE_INVITE(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_REMOVE_PRESENCE_INVITE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::NETWORK_REMOVE_PRESENCE_INVITE(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_GET_PRESENCE_INVITE_ID(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        Any res = NETWORK::NETWORK_GET_PRESENCE_INVITE_ID(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_GET_PRESENCE_INVITE_INVITER(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        Any res = NETWORK::NETWORK_GET_PRESENCE_INVITE_INVITER(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_GET_PRESENCE_INVITE_HANDLE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1;

        BOOL res = NETWORK::NETWORK_GET_PRESENCE_INVITE_HANDLE(p0, &p1);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p1);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_GET_PRESENCE_INVITE_SESSION_ID(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        Any res = NETWORK::NETWORK_GET_PRESENCE_INVITE_SESSION_ID(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_GET_PRESENCE_INVITE_CONTENT_ID(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        Any res = NETWORK::NETWORK_GET_PRESENCE_INVITE_CONTENT_ID(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_GET_PRESENCE_INVITE_PLAYLIST_LENGTH(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        Any res = NETWORK::NETWORK_GET_PRESENCE_INVITE_PLAYLIST_LENGTH(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_GET_PRESENCE_INVITE_PLAYLIST_CURRENT(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        Any res = NETWORK::NETWORK_GET_PRESENCE_INVITE_PLAYLIST_CURRENT(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_GET_PRESENCE_INVITE_FROM_ADMIN(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::NETWORK_GET_PRESENCE_INVITE_FROM_ADMIN(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_GET_PRESENCE_INVITE_IS_TOURNAMENT(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::NETWORK_GET_PRESENCE_INVITE_IS_TOURNAMENT(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_HAS_FOLLOW_INVITE(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_HAS_FOLLOW_INVITE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_ACTION_FOLLOW_INVITE(WrenVM* vm)
    {

        Any res = NETWORK::NETWORK_ACTION_FOLLOW_INVITE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_CLEAR_FOLLOW_INVITE(WrenVM* vm)
    {

        Any res = NETWORK::NETWORK_CLEAR_FOLLOW_INVITE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_REMOVE_AND_CANCEL_ALL_INVITES(WrenVM* vm)
    {

        NETWORK::NETWORK_REMOVE_AND_CANCEL_ALL_INVITES();
    }

    static void WREN_NETWORK_NETWORK_REMOVE_TRANSITION_INVITE(WrenVM* vm)
    {
        Any p0;

        NETWORK::NETWORK_REMOVE_TRANSITION_INVITE(&p0);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_NETWORK_NETWORK_REMOVE_ALL_TRANSITION_INVITE(WrenVM* vm)
    {

        NETWORK::NETWORK_REMOVE_ALL_TRANSITION_INVITE();
    }

    static void WREN_NETWORK_NETWORK_REMOVE_AND_CANCEL_ALL_TRANSITION_INVITES(WrenVM* vm)
    {

        NETWORK::NETWORK_REMOVE_AND_CANCEL_ALL_TRANSITION_INVITES();
    }

    static void WREN_NETWORK_NETWORK_INVITE_GAMERS(WrenVM* vm)
    {
        Any p0;
        Any p1 = (Any)wrenGetSlotDouble(vm, 1);
        Any p2;
        Any p3;

        BOOL res = NETWORK::NETWORK_INVITE_GAMERS(&p0, p1, &p2, &p3);

        wrenEnsureSlots(vm, 8);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p0);
        wrenInsertInList(vm, 0, 1, 2);

        wrenSetSlotDouble(vm, 3, p2);
        wrenInsertInList(vm, 0, 2, 3);

        wrenSetSlotDouble(vm, 4, p3);
        wrenInsertInList(vm, 0, 3, 4);

    }

    static void WREN_NETWORK_NETWORK_HAS_INVITED_GAMER(WrenVM* vm)
    {
        Any p0;

        BOOL res = NETWORK::NETWORK_HAS_INVITED_GAMER(&p0);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p0);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_HAS_MADE_INVITE_DECISION(WrenVM* vm)
    {
        Any gamerHandle;

        BOOL res = NETWORK::NETWORK_HAS_MADE_INVITE_DECISION(&gamerHandle);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, gamerHandle);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_GET_INVITE_REPLY_STATUS(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        Any res = NETWORK::NETWORK_GET_INVITE_REPLY_STATUS(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_GET_CURRENTLY_SELECTED_GAMER_HANDLE_FROM_INVITE_MENU(WrenVM* vm)
    {
        Any p0;

        BOOL res = NETWORK::NETWORK_GET_CURRENTLY_SELECTED_GAMER_HANDLE_FROM_INVITE_MENU(&p0);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p0);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_SET_CURRENTLY_SELECTED_GAMER_HANDLE_FROM_INVITE_MENU(WrenVM* vm)
    {
        Any p0;

        BOOL res = NETWORK::NETWORK_SET_CURRENTLY_SELECTED_GAMER_HANDLE_FROM_INVITE_MENU(&p0);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p0);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_SET_INVITE_ON_CALL_FOR_INVITE_MENU(WrenVM* vm)
    {
        Any p0;

        NETWORK::NETWORK_SET_INVITE_ON_CALL_FOR_INVITE_MENU(&p0);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_NETWORK_NETWORK_CHECK_DATA_MANAGER_SUCCEEDED_FOR_HANDLE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1;

        BOOL res = NETWORK::NETWORK_CHECK_DATA_MANAGER_SUCCEEDED_FOR_HANDLE(p0, &p1);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p1);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_CHECK_DATA_MANAGER_FOR_HANDLE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        Any res = NETWORK::NETWORK_CHECK_DATA_MANAGER_FOR_HANDLE(p0, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_SET_INVITE_FAILED_MESSAGE_FOR_INVITE_MENU(WrenVM* vm)
    {
        Any p0;
        Any p1;

        NETWORK::NETWORK_SET_INVITE_FAILED_MESSAGE_FOR_INVITE_MENU(&p0, &p1);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, p0);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p1);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_FILLOUT_PM_PLAYER_LIST(WrenVM* vm)
    {
        Any gamerHandle;
        Any p1 = (Any)wrenGetSlotDouble(vm, 1);
        Any p2 = (Any)wrenGetSlotDouble(vm, 2);

        BOOL res = NETWORK::FILLOUT_PM_PLAYER_LIST(&gamerHandle, p1, p2);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, gamerHandle);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_FILLOUT_PM_PLAYER_LIST_WITH_NAMES(WrenVM* vm)
    {
        Any p0;
        Any p1;
        Any p2 = (Any)wrenGetSlotDouble(vm, 1);
        Any p3 = (Any)wrenGetSlotDouble(vm, 2);

        BOOL res = NETWORK::FILLOUT_PM_PLAYER_LIST_WITH_NAMES(&p0, &p1, p2, p3);

        wrenEnsureSlots(vm, 6);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p0);
        wrenInsertInList(vm, 0, 1, 2);

        wrenSetSlotDouble(vm, 3, p1);
        wrenInsertInList(vm, 0, 2, 3);

    }

    static void WREN_NETWORK_REFRESH_PLAYER_LIST_STATS(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::REFRESH_PLAYER_LIST_STATS(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_SET_CURRENT_DATA_MANAGER_HANDLE(WrenVM* vm)
    {
        Any p0;

        BOOL res = NETWORK::NETWORK_SET_CURRENT_DATA_MANAGER_HANDLE(&p0);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p0);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_IS_IN_PLATFORM_PARTY(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_IS_IN_PLATFORM_PARTY();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_GET_PLATFORM_PARTY_MEMBER_COUNT(WrenVM* vm)
    {

        int res = NETWORK::NETWORK_GET_PLATFORM_PARTY_MEMBER_COUNT();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_GET_PLATFORM_PARTY_MEMBERS(WrenVM* vm)
    {
        Any data;
        int dataSize = (int)wrenGetSlotDouble(vm, 1);

        int res = NETWORK::NETWORK_GET_PLATFORM_PARTY_MEMBERS(&data, dataSize);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, data);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_IS_IN_PLATFORM_PARTY_CHAT(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_IS_IN_PLATFORM_PARTY_CHAT();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_IS_CHATTING_IN_PLATFORM_PARTY(WrenVM* vm)
    {
        Any gamerHandle;

        BOOL res = NETWORK::NETWORK_IS_CHATTING_IN_PLATFORM_PARTY(&gamerHandle);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, gamerHandle);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_CAN_QUEUE_FOR_PREVIOUS_SESSION_JOIN(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_CAN_QUEUE_FOR_PREVIOUS_SESSION_JOIN();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_IS_QUEUING_FOR_SESSION_JOIN(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_IS_QUEUING_FOR_SESSION_JOIN();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_CLEAR_QUEUED_JOIN_REQUEST(WrenVM* vm)
    {

        NETWORK::NETWORK_CLEAR_QUEUED_JOIN_REQUEST();
    }

    static void WREN_NETWORK_NETWORK_SEND_QUEUED_JOIN_REQUEST(WrenVM* vm)
    {

        NETWORK::NETWORK_SEND_QUEUED_JOIN_REQUEST();
    }

    static void WREN_NETWORK_NETWORK_REMOVE_ALL_QUEUED_JOIN_REQUESTS(WrenVM* vm)
    {

        NETWORK::NETWORK_REMOVE_ALL_QUEUED_JOIN_REQUESTS();
    }

    static void WREN_NETWORK_NETWORK_SEED_RANDOM_NUMBER_GENERATOR(WrenVM* vm)
    {
        int seed = (int)wrenGetSlotDouble(vm, 1);

        NETWORK::NETWORK_SEED_RANDOM_NUMBER_GENERATOR(seed);
    }

    static void WREN_NETWORK_NETWORK_GET_RANDOM_INT(WrenVM* vm)
    {

        int res = NETWORK::NETWORK_GET_RANDOM_INT();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_GET_RANDOM_INT_RANGED(WrenVM* vm)
    {
        int rangeStart = (int)wrenGetSlotDouble(vm, 1);
        int rangeEnd = (int)wrenGetSlotDouble(vm, 2);

        int res = NETWORK::NETWORK_GET_RANDOM_INT_RANGED(rangeStart, rangeEnd);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_PLAYER_IS_CHEATER(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_PLAYER_IS_CHEATER();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_PLAYER_GET_CHEATER_REASON(WrenVM* vm)
    {

        int res = NETWORK::NETWORK_PLAYER_GET_CHEATER_REASON();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_PLAYER_IS_BADSPORT(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_PLAYER_IS_BADSPORT();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_TRIGGER_PLAYER_CRC_HACKER_CHECK(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);
        Hash scriptHash = (Hash)wrenGetSlotDouble(vm, 3);

        BOOL res = NETWORK::TRIGGER_PLAYER_CRC_HACKER_CHECK(player, p1, scriptHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_TRIGGER_TUNING_CRC_HACKER_CHECK(WrenVM* vm)
    {

        Any res = NETWORK::TRIGGER_TUNING_CRC_HACKER_CHECK();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_TRIGGER_FILE_CRC_HACKER_CHECK(WrenVM* vm)
    {

        Any res = NETWORK::TRIGGER_FILE_CRC_HACKER_CHECK();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_REMOTE_CHEATER_PLAYER_DETECTED(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        int a = (int)wrenGetSlotDouble(vm, 2);
        int b = (int)wrenGetSlotDouble(vm, 3);

        BOOL res = NETWORK::REMOTE_CHEATER_PLAYER_DETECTED(player, a, b);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_BAD_SPORT_PLAYER_LEFT_DETECTED(WrenVM* vm)
    {
        Any gamerHandle;
        int event = (int)wrenGetSlotDouble(vm, 1);
        int amountReceived = (int)wrenGetSlotDouble(vm, 2);

        BOOL res = NETWORK::BAD_SPORT_PLAYER_LEFT_DETECTED(&gamerHandle, event, amountReceived);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, gamerHandle);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_ADD_INVALID_OBJECT_MODEL(WrenVM* vm)
    {
        Hash modelHash = (Hash)wrenGetSlotDouble(vm, 1);

        NETWORK::NETWORK_ADD_INVALID_OBJECT_MODEL(modelHash);
    }

    static void WREN_NETWORK_NETWORK_REMOVE_INVALID_OBJECT_MODEL(WrenVM* vm)
    {
        Hash modelHash = (Hash)wrenGetSlotDouble(vm, 1);

        NETWORK::NETWORK_REMOVE_INVALID_OBJECT_MODEL(modelHash);
    }

    static void WREN_NETWORK_NETWORK_CLEAR_INVALID_OBJECT_MODELS(WrenVM* vm)
    {

        NETWORK::NETWORK_CLEAR_INVALID_OBJECT_MODELS();
    }

    static void WREN_NETWORK_NETWORK_APPLY_PED_SCAR_DATA(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);

        NETWORK::NETWORK_APPLY_PED_SCAR_DATA(ped, p1);
    }

    static void WREN_NETWORK_NETWORK_SET_THIS_SCRIPT_IS_NETWORK_SCRIPT(WrenVM* vm)
    {
        int maxNumMissionParticipants = (int)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        int instanceId = (int)wrenGetSlotDouble(vm, 3);

        NETWORK::NETWORK_SET_THIS_SCRIPT_IS_NETWORK_SCRIPT(maxNumMissionParticipants, p1, instanceId);
    }

    static void WREN_NETWORK_NETWORK_TRY_TO_SET_THIS_SCRIPT_IS_NETWORK_SCRIPT(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);

        BOOL res = NETWORK::NETWORK_TRY_TO_SET_THIS_SCRIPT_IS_NETWORK_SCRIPT(p0, p1, p2);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_GET_THIS_SCRIPT_IS_NETWORK_SCRIPT(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_GET_THIS_SCRIPT_IS_NETWORK_SCRIPT();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_GET_MAX_NUM_PARTICIPANTS(WrenVM* vm)
    {

        int res = NETWORK::NETWORK_GET_MAX_NUM_PARTICIPANTS();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_GET_NUM_PARTICIPANTS(WrenVM* vm)
    {

        int res = NETWORK::NETWORK_GET_NUM_PARTICIPANTS();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_GET_SCRIPT_STATUS(WrenVM* vm)
    {

        int res = NETWORK::NETWORK_GET_SCRIPT_STATUS();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_REGISTER_HOST_BROADCAST_VARIABLES(WrenVM* vm)
    {
        int vars;
        int numVars = (int)wrenGetSlotDouble(vm, 1);
        const char* debugName = wrenGetSlotString(vm, 2);

        NETWORK::NETWORK_REGISTER_HOST_BROADCAST_VARIABLES(&vars, numVars, debugName);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_NETWORK_NETWORK_REGISTER_PLAYER_BROADCAST_VARIABLES(WrenVM* vm)
    {
        int vars;
        int numVars = (int)wrenGetSlotDouble(vm, 1);
        const char* debugName = wrenGetSlotString(vm, 2);

        NETWORK::NETWORK_REGISTER_PLAYER_BROADCAST_VARIABLES(&vars, numVars, debugName);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_NETWORK_NETWORK_REGISTER_HIGH_FREQUENCY_HOST_BROADCAST_VARIABLES(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);

        NETWORK::NETWORK_REGISTER_HIGH_FREQUENCY_HOST_BROADCAST_VARIABLES(p0, p1, p2);
    }

    static void WREN_NETWORK_NETWORK_REGISTER_HIGH_FREQUENCY_PLAYER_BROADCAST_VARIABLES(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);

        NETWORK::NETWORK_REGISTER_HIGH_FREQUENCY_PLAYER_BROADCAST_VARIABLES(p0, p1, p2);
    }

    static void WREN_NETWORK_NETWORK_FINISH_BROADCASTING_DATA(WrenVM* vm)
    {

        NETWORK::NETWORK_FINISH_BROADCASTING_DATA();
    }

    static void WREN_NETWORK_NETWORK_HAS_RECEIVED_HOST_BROADCAST_DATA(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_HAS_RECEIVED_HOST_BROADCAST_DATA();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_GET_PLAYER_INDEX(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        int res = NETWORK::NETWORK_GET_PLAYER_INDEX(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_GET_PARTICIPANT_INDEX(WrenVM* vm)
    {
        int index = (int)wrenGetSlotDouble(vm, 1);

        int res = NETWORK::NETWORK_GET_PARTICIPANT_INDEX(index);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_GET_PLAYER_INDEX_FROM_PED(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        Player res = NETWORK::NETWORK_GET_PLAYER_INDEX_FROM_PED(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_GET_NUM_CONNECTED_PLAYERS(WrenVM* vm)
    {

        int res = NETWORK::NETWORK_GET_NUM_CONNECTED_PLAYERS();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_IS_PLAYER_CONNECTED(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::NETWORK_IS_PLAYER_CONNECTED(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_GET_TOTAL_NUM_PLAYERS(WrenVM* vm)
    {

        int res = NETWORK::NETWORK_GET_TOTAL_NUM_PLAYERS();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_IS_PARTICIPANT_ACTIVE(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::NETWORK_IS_PARTICIPANT_ACTIVE(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_IS_PLAYER_ACTIVE(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::NETWORK_IS_PLAYER_ACTIVE(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_IS_PLAYER_A_PARTICIPANT(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::NETWORK_IS_PLAYER_A_PARTICIPANT(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_IS_HOST_OF_THIS_SCRIPT(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_IS_HOST_OF_THIS_SCRIPT();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_GET_HOST_OF_THIS_SCRIPT(WrenVM* vm)
    {

        Player res = NETWORK::NETWORK_GET_HOST_OF_THIS_SCRIPT();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_GET_HOST_OF_SCRIPT(WrenVM* vm)
    {
        const char* scriptName = wrenGetSlotString(vm, 1);
        int instance_id = (int)wrenGetSlotDouble(vm, 2);
        int position_hash = (int)wrenGetSlotDouble(vm, 3);

        Player res = NETWORK::NETWORK_GET_HOST_OF_SCRIPT(scriptName, instance_id, position_hash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_SET_MISSION_FINISHED(WrenVM* vm)
    {

        NETWORK::NETWORK_SET_MISSION_FINISHED();
    }

    static void WREN_NETWORK_NETWORK_IS_SCRIPT_ACTIVE(WrenVM* vm)
    {
        const char* scriptName = wrenGetSlotString(vm, 1);
        int instance_id = (int)wrenGetSlotDouble(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);
        int position_hash = (int)wrenGetSlotDouble(vm, 4);

        BOOL res = NETWORK::NETWORK_IS_SCRIPT_ACTIVE(scriptName, instance_id, p2, position_hash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_IS_SCRIPT_ACTIVE_BY_HASH(WrenVM* vm)
    {
        Hash scriptHash = (Hash)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);
        int p3 = (int)wrenGetSlotDouble(vm, 4);

        BOOL res = NETWORK::NETWORK_IS_SCRIPT_ACTIVE_BY_HASH(scriptHash, p1, p2, p3);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_IS_THREAD_A_NETWORK_SCRIPT(WrenVM* vm)
    {
        int threadId = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::NETWORK_IS_THREAD_A_NETWORK_SCRIPT(threadId);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_GET_NUM_SCRIPT_PARTICIPANTS(WrenVM* vm)
    {
        const char* scriptName = wrenGetSlotString(vm, 1);
        int instance_id = (int)wrenGetSlotDouble(vm, 2);
        int position_hash = (int)wrenGetSlotDouble(vm, 3);

        int res = NETWORK::NETWORK_GET_NUM_SCRIPT_PARTICIPANTS(scriptName, instance_id, position_hash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_GET_INSTANCE_ID_OF_THIS_SCRIPT(WrenVM* vm)
    {

        int res = NETWORK::NETWORK_GET_INSTANCE_ID_OF_THIS_SCRIPT();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_GET_POSITION_HASH_OF_THIS_SCRIPT(WrenVM* vm)
    {

        Hash res = NETWORK::NETWORK_GET_POSITION_HASH_OF_THIS_SCRIPT();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_IS_PLAYER_A_PARTICIPANT_ON_SCRIPT(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        const char* script = wrenGetSlotString(vm, 2);
        int instance_id = (int)wrenGetSlotDouble(vm, 3);

        BOOL res = NETWORK::NETWORK_IS_PLAYER_A_PARTICIPANT_ON_SCRIPT(player, script, instance_id);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_PREVENT_SCRIPT_HOST_MIGRATION(WrenVM* vm)
    {

        NETWORK::NETWORK_PREVENT_SCRIPT_HOST_MIGRATION();
    }

    static void WREN_NETWORK_NETWORK_REQUEST_TO_BE_HOST_OF_THIS_SCRIPT(WrenVM* vm)
    {

        NETWORK::NETWORK_REQUEST_TO_BE_HOST_OF_THIS_SCRIPT();
    }

    static void WREN_NETWORK_PARTICIPANT_ID(WrenVM* vm)
    {

        Player res = NETWORK::PARTICIPANT_ID();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_PARTICIPANT_ID_TO_INT(WrenVM* vm)
    {

        int res = NETWORK::PARTICIPANT_ID_TO_INT();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_GET_KILLER_OF_PLAYER(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        Hash weaponHash;

        Any res = NETWORK::NETWORK_GET_KILLER_OF_PLAYER(player, &weaponHash);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, weaponHash);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_GET_DESTROYER_OF_NETWORK_ID(WrenVM* vm)
    {
        int netId = (int)wrenGetSlotDouble(vm, 1);
        Hash weaponHash;

        int res = NETWORK::NETWORK_GET_DESTROYER_OF_NETWORK_ID(netId, &weaponHash);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, weaponHash);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_GET_DESTROYER_OF_ENTITY(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        Hash weaponHash;

        Any res = NETWORK::NETWORK_GET_DESTROYER_OF_ENTITY(entity, &weaponHash);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, weaponHash);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_GET_ASSISTED_KILL_OF_ENTITY(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        Entity entity = (Entity)wrenGetSlotDouble(vm, 2);
        int p2;

        BOOL res = NETWORK::NETWORK_GET_ASSISTED_KILL_OF_ENTITY(player, entity, &p2);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p2);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_GET_ASSISTED_DAMAGE_OF_ENTITY(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        Entity entity = (Entity)wrenGetSlotDouble(vm, 2);
        int p2;

        BOOL res = NETWORK::NETWORK_GET_ASSISTED_DAMAGE_OF_ENTITY(player, entity, &p2);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p2);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_GET_ENTITY_KILLER_OF_PLAYER(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        Hash weaponHash;

        Entity res = NETWORK::NETWORK_GET_ENTITY_KILLER_OF_PLAYER(player, &weaponHash);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, weaponHash);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_SET_CURRENT_PUBLIC_CONTENT_ID(WrenVM* vm)
    {
        const char* missionId = wrenGetSlotString(vm, 1);

        NETWORK::NETWORK_SET_CURRENT_PUBLIC_CONTENT_ID(missionId);
    }

    static void WREN_NETWORK_NETWORK_SET_CURRENT_SPAWN_LOCATION_OPTION(WrenVM* vm)
    {
        Hash mpSettingSpawn = (Hash)wrenGetSlotDouble(vm, 1);

        NETWORK::NETWORK_SET_CURRENT_SPAWN_LOCATION_OPTION(mpSettingSpawn);
    }

    static void WREN_NETWORK_NETWORK_SET_VEHICLE_DRIVEN_IN_TEST_DRIVE(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        NETWORK::NETWORK_SET_VEHICLE_DRIVEN_IN_TEST_DRIVE(toggle);
    }

    static void WREN_NETWORK_NETWORK_RESURRECT_LOCAL_PLAYER(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        float heading = (float)wrenGetSlotDouble(vm, 4);
        BOOL unk = (BOOL)wrenGetSlotBool(vm, 5);
        BOOL changetime = (BOOL)wrenGetSlotBool(vm, 6);
        BOOL p6 = (BOOL)wrenGetSlotBool(vm, 7);
        int p7 = (int)wrenGetSlotDouble(vm, 8);
        int p8 = (int)wrenGetSlotDouble(vm, 9);

        NETWORK::NETWORK_RESURRECT_LOCAL_PLAYER(x, y, z, heading, unk, changetime, p6, p7, p8);
    }

    static void WREN_NETWORK_NETWORK_SET_LOCAL_PLAYER_INVINCIBLE_TIME(WrenVM* vm)
    {
        int time = (int)wrenGetSlotDouble(vm, 1);

        NETWORK::NETWORK_SET_LOCAL_PLAYER_INVINCIBLE_TIME(time);
    }

    static void WREN_NETWORK_NETWORK_IS_LOCAL_PLAYER_INVINCIBLE(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_IS_LOCAL_PLAYER_INVINCIBLE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_DISABLE_INVINCIBLE_FLASHING(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        NETWORK::NETWORK_DISABLE_INVINCIBLE_FLASHING(player, toggle);
    }

    static void WREN_NETWORK_NETWORK_PATCH_POST_CUTSCENE_HS4F_TUN_ENT(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        NETWORK::NETWORK_PATCH_POST_CUTSCENE_HS4F_TUN_ENT(ped);
    }

    static void WREN_NETWORK_NETWORK_SET_LOCAL_PLAYER_SYNC_LOOK_AT(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        NETWORK::NETWORK_SET_LOCAL_PLAYER_SYNC_LOOK_AT(toggle);
    }

    static void WREN_NETWORK_NETWORK_HAS_ENTITY_BEEN_REGISTERED_WITH_THIS_THREAD(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::NETWORK_HAS_ENTITY_BEEN_REGISTERED_WITH_THIS_THREAD(entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_GET_NETWORK_ID_FROM_ENTITY(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        int res = NETWORK::NETWORK_GET_NETWORK_ID_FROM_ENTITY(entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_GET_ENTITY_FROM_NETWORK_ID(WrenVM* vm)
    {
        int netId = (int)wrenGetSlotDouble(vm, 1);

        Entity res = NETWORK::NETWORK_GET_ENTITY_FROM_NETWORK_ID(netId);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_GET_ENTITY_IS_NETWORKED(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::NETWORK_GET_ENTITY_IS_NETWORKED(entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_GET_ENTITY_IS_LOCAL(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::NETWORK_GET_ENTITY_IS_LOCAL(entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_REGISTER_ENTITY_AS_NETWORKED(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        NETWORK::NETWORK_REGISTER_ENTITY_AS_NETWORKED(entity);
    }

    static void WREN_NETWORK_NETWORK_UNREGISTER_NETWORKED_ENTITY(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        NETWORK::NETWORK_UNREGISTER_NETWORKED_ENTITY(entity);
    }

    static void WREN_NETWORK_NETWORK_DOES_NETWORK_ID_EXIST(WrenVM* vm)
    {
        int netId = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::NETWORK_DOES_NETWORK_ID_EXIST(netId);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_DOES_ENTITY_EXIST_WITH_NETWORK_ID(WrenVM* vm)
    {
        int netId = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::NETWORK_DOES_ENTITY_EXIST_WITH_NETWORK_ID(netId);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_REQUEST_CONTROL_OF_NETWORK_ID(WrenVM* vm)
    {
        int netId = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::NETWORK_REQUEST_CONTROL_OF_NETWORK_ID(netId);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_HAS_CONTROL_OF_NETWORK_ID(WrenVM* vm)
    {
        int netId = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::NETWORK_HAS_CONTROL_OF_NETWORK_ID(netId);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_IS_NETWORK_ID_REMOTELY_CONTROLLED(WrenVM* vm)
    {
        int netId = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::NETWORK_IS_NETWORK_ID_REMOTELY_CONTROLLED(netId);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_REQUEST_CONTROL_OF_ENTITY(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_REQUEST_CONTROL_OF_DOOR(WrenVM* vm)
    {
        int doorID = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::NETWORK_REQUEST_CONTROL_OF_DOOR(doorID);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_HAS_CONTROL_OF_ENTITY(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::NETWORK_HAS_CONTROL_OF_ENTITY(entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_HAS_CONTROL_OF_PICKUP(WrenVM* vm)
    {
        Pickup pickup = (Pickup)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::NETWORK_HAS_CONTROL_OF_PICKUP(pickup);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_HAS_CONTROL_OF_DOOR(WrenVM* vm)
    {
        Hash doorHash = (Hash)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::NETWORK_HAS_CONTROL_OF_DOOR(doorHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_IS_DOOR_NETWORKED(WrenVM* vm)
    {
        Hash doorHash = (Hash)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::NETWORK_IS_DOOR_NETWORKED(doorHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_VEH_TO_NET(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        int res = NETWORK::VEH_TO_NET(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_PED_TO_NET(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        int res = NETWORK::PED_TO_NET(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_OBJ_TO_NET(WrenVM* vm)
    {
        Object object = (Object)wrenGetSlotDouble(vm, 1);

        int res = NETWORK::OBJ_TO_NET(object);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NET_TO_VEH(WrenVM* vm)
    {
        int netHandle = (int)wrenGetSlotDouble(vm, 1);

        Vehicle res = NETWORK::NET_TO_VEH(netHandle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NET_TO_PED(WrenVM* vm)
    {
        int netHandle = (int)wrenGetSlotDouble(vm, 1);

        Ped res = NETWORK::NET_TO_PED(netHandle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NET_TO_OBJ(WrenVM* vm)
    {
        int netHandle = (int)wrenGetSlotDouble(vm, 1);

        Object res = NETWORK::NET_TO_OBJ(netHandle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NET_TO_ENT(WrenVM* vm)
    {
        int netHandle = (int)wrenGetSlotDouble(vm, 1);

        Entity res = NETWORK::NET_TO_ENT(netHandle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_GET_LOCAL_HANDLE(WrenVM* vm)
    {
        Any gamerHandle;
        int gamerHandleSize = (int)wrenGetSlotDouble(vm, 1);

        NETWORK::NETWORK_GET_LOCAL_HANDLE(&gamerHandle, gamerHandleSize);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_NETWORK_NETWORK_HANDLE_FROM_USER_ID(WrenVM* vm)
    {
        const char* userId = wrenGetSlotString(vm, 1);
        Any gamerHandle;
        int gamerHandleSize = (int)wrenGetSlotDouble(vm, 2);

        NETWORK::NETWORK_HANDLE_FROM_USER_ID(userId, &gamerHandle, gamerHandleSize);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_NETWORK_NETWORK_HANDLE_FROM_MEMBER_ID(WrenVM* vm)
    {
        const char* memberId = wrenGetSlotString(vm, 1);
        Any gamerHandle;
        int gamerHandleSize = (int)wrenGetSlotDouble(vm, 2);

        NETWORK::NETWORK_HANDLE_FROM_MEMBER_ID(memberId, &gamerHandle, gamerHandleSize);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_NETWORK_NETWORK_HANDLE_FROM_PLAYER(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        Any gamerHandle;
        int gamerHandleSize = (int)wrenGetSlotDouble(vm, 2);

        NETWORK::NETWORK_HANDLE_FROM_PLAYER(player, &gamerHandle, gamerHandleSize);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_NETWORK_NETWORK_HASH_FROM_PLAYER_HANDLE(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        Hash res = NETWORK::NETWORK_HASH_FROM_PLAYER_HANDLE(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_HASH_FROM_GAMER_HANDLE(WrenVM* vm)
    {
        Any gamerHandle;

        Hash res = NETWORK::NETWORK_HASH_FROM_GAMER_HANDLE(&gamerHandle);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, gamerHandle);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_HANDLE_FROM_FRIEND(WrenVM* vm)
    {
        int friendIndex = (int)wrenGetSlotDouble(vm, 1);
        Any gamerHandle;
        int gamerHandleSize = (int)wrenGetSlotDouble(vm, 2);

        NETWORK::NETWORK_HANDLE_FROM_FRIEND(friendIndex, &gamerHandle, gamerHandleSize);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_NETWORK_NETWORK_GAMERTAG_FROM_HANDLE_START(WrenVM* vm)
    {
        Any gamerHandle;

        BOOL res = NETWORK::NETWORK_GAMERTAG_FROM_HANDLE_START(&gamerHandle);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, gamerHandle);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_GAMERTAG_FROM_HANDLE_PENDING(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_GAMERTAG_FROM_HANDLE_PENDING();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_GAMERTAG_FROM_HANDLE_SUCCEEDED(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_GAMERTAG_FROM_HANDLE_SUCCEEDED();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_GET_GAMERTAG_FROM_HANDLE(WrenVM* vm)
    {
        Any gamerHandle;

        const char* res = NETWORK::NETWORK_GET_GAMERTAG_FROM_HANDLE(&gamerHandle);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotString(vm, 1, res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, gamerHandle);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_DISPLAYNAMES_FROM_HANDLES_START(WrenVM* vm)
    {
        Any p0;
        Any p1 = (Any)wrenGetSlotDouble(vm, 1);

        int res = NETWORK::NETWORK_DISPLAYNAMES_FROM_HANDLES_START(&p0, p1);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p0);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_GET_DISPLAYNAMES_FROM_HANDLES(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);

        int res = NETWORK::NETWORK_GET_DISPLAYNAMES_FROM_HANDLES(p0, p1, p2);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_ARE_HANDLES_THE_SAME(WrenVM* vm)
    {
        Any gamerHandle1;
        Any gamerHandle2;

        BOOL res = NETWORK::NETWORK_ARE_HANDLES_THE_SAME(&gamerHandle1, &gamerHandle2);

        wrenEnsureSlots(vm, 6);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, gamerHandle1);
        wrenInsertInList(vm, 0, 1, 2);

        wrenSetSlotDouble(vm, 3, gamerHandle2);
        wrenInsertInList(vm, 0, 2, 3);

    }

    static void WREN_NETWORK_NETWORK_IS_HANDLE_VALID(WrenVM* vm)
    {
        Any gamerHandle;
        int gamerHandleSize = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::NETWORK_IS_HANDLE_VALID(&gamerHandle, gamerHandleSize);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, gamerHandle);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_GET_PLAYER_FROM_GAMER_HANDLE(WrenVM* vm)
    {
        Any gamerHandle;

        Player res = NETWORK::NETWORK_GET_PLAYER_FROM_GAMER_HANDLE(&gamerHandle);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, gamerHandle);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_MEMBER_ID_FROM_GAMER_HANDLE(WrenVM* vm)
    {
        Any gamerHandle;

        const char* res = NETWORK::NETWORK_MEMBER_ID_FROM_GAMER_HANDLE(&gamerHandle);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotString(vm, 1, res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, gamerHandle);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_IS_GAMER_IN_MY_SESSION(WrenVM* vm)
    {
        Any gamerHandle;

        BOOL res = NETWORK::NETWORK_IS_GAMER_IN_MY_SESSION(&gamerHandle);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, gamerHandle);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_SHOW_PROFILE_UI(WrenVM* vm)
    {
        Any gamerHandle;

        NETWORK::NETWORK_SHOW_PROFILE_UI(&gamerHandle);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_NETWORK_NETWORK_PLAYER_GET_NAME(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        const char* res = NETWORK::NETWORK_PLAYER_GET_NAME(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotString(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_PLAYER_GET_USERID(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        int userID;

        const char* res = NETWORK::NETWORK_PLAYER_GET_USERID(player, &userID);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotString(vm, 1, res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, userID);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_PLAYER_IS_ROCKSTAR_DEV(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::NETWORK_PLAYER_IS_ROCKSTAR_DEV(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_PLAYER_INDEX_IS_CHEATER(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::NETWORK_PLAYER_INDEX_IS_CHEATER(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_ENTITY_GET_OBJECT_ID(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        int res = NETWORK::NETWORK_ENTITY_GET_OBJECT_ID(entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_GET_ENTITY_FROM_OBJECT_ID(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        int res = NETWORK::NETWORK_GET_ENTITY_FROM_OBJECT_ID(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_IS_INACTIVE_PROFILE(WrenVM* vm)
    {
        Any p0;

        BOOL res = NETWORK::NETWORK_IS_INACTIVE_PROFILE(&p0);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p0);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_GET_MAX_FRIENDS(WrenVM* vm)
    {

        int res = NETWORK::NETWORK_GET_MAX_FRIENDS();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_GET_FRIEND_COUNT(WrenVM* vm)
    {

        int res = NETWORK::NETWORK_GET_FRIEND_COUNT();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_GET_FRIEND_NAME(WrenVM* vm)
    {
        int friendIndex = (int)wrenGetSlotDouble(vm, 1);

        const char* res = NETWORK::NETWORK_GET_FRIEND_NAME(friendIndex);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotString(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_GET_FRIEND_DISPLAY_NAME(WrenVM* vm)
    {
        int friendIndex = (int)wrenGetSlotDouble(vm, 1);

        const char* res = NETWORK::NETWORK_GET_FRIEND_DISPLAY_NAME(friendIndex);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotString(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_IS_FRIEND_ONLINE(WrenVM* vm)
    {
        const char* name = wrenGetSlotString(vm, 1);

        BOOL res = NETWORK::NETWORK_IS_FRIEND_ONLINE(name);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_IS_FRIEND_HANDLE_ONLINE(WrenVM* vm)
    {
        Any gamerHandle;

        BOOL res = NETWORK::NETWORK_IS_FRIEND_HANDLE_ONLINE(&gamerHandle);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, gamerHandle);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_IS_FRIEND_IN_SAME_TITLE(WrenVM* vm)
    {
        const char* friendName = wrenGetSlotString(vm, 1);

        BOOL res = NETWORK::NETWORK_IS_FRIEND_IN_SAME_TITLE(friendName);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_IS_FRIEND_IN_MULTIPLAYER(WrenVM* vm)
    {
        const char* friendName = wrenGetSlotString(vm, 1);

        BOOL res = NETWORK::NETWORK_IS_FRIEND_IN_MULTIPLAYER(friendName);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_IS_FRIEND(WrenVM* vm)
    {
        Any gamerHandle;

        BOOL res = NETWORK::NETWORK_IS_FRIEND(&gamerHandle);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, gamerHandle);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_IS_PENDING_FRIEND(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        Any res = NETWORK::NETWORK_IS_PENDING_FRIEND(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_IS_ADDING_FRIEND(WrenVM* vm)
    {

        Any res = NETWORK::NETWORK_IS_ADDING_FRIEND();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_ADD_FRIEND(WrenVM* vm)
    {
        Any gamerHandle;
        const char* message = wrenGetSlotString(vm, 1);

        BOOL res = NETWORK::NETWORK_ADD_FRIEND(&gamerHandle, message);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, gamerHandle);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_IS_FRIEND_INDEX_ONLINE(WrenVM* vm)
    {
        int friendIndex = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::NETWORK_IS_FRIEND_INDEX_ONLINE(friendIndex);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_SET_PLAYER_IS_PASSIVE(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        NETWORK::NETWORK_SET_PLAYER_IS_PASSIVE(toggle);
    }

    static void WREN_NETWORK_NETWORK_GET_PLAYER_OWNS_WAYPOINT(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::NETWORK_GET_PLAYER_OWNS_WAYPOINT(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_CAN_SET_WAYPOINT(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_CAN_SET_WAYPOINT();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_IGNORE_REMOTE_WAYPOINTS(WrenVM* vm)
    {

        NETWORK::NETWORK_IGNORE_REMOTE_WAYPOINTS();
    }

    static void WREN_NETWORK_NETWORK_SET_SCRIPT_AUTOMUTED(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        Any res = NETWORK::NETWORK_SET_SCRIPT_AUTOMUTED(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_HAS_AUTOMUTE_OVERRIDE(WrenVM* vm)
    {

        Any res = NETWORK::NETWORK_HAS_AUTOMUTE_OVERRIDE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_HAS_HEADSET(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_HAS_HEADSET();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_SET_LOOK_AT_TALKERS(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        NETWORK::NETWORK_SET_LOOK_AT_TALKERS(p0);
    }

    static void WREN_NETWORK_NETWORK_IS_PUSH_TO_TALK_ACTIVE(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_IS_PUSH_TO_TALK_ACTIVE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_GAMER_HAS_HEADSET(WrenVM* vm)
    {
        Any gamerHandle;

        BOOL res = NETWORK::NETWORK_GAMER_HAS_HEADSET(&gamerHandle);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, gamerHandle);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_IS_GAMER_TALKING(WrenVM* vm)
    {
        Any gamerHandle;

        BOOL res = NETWORK::NETWORK_IS_GAMER_TALKING(&gamerHandle);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, gamerHandle);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_PERMISSIONS_HAS_GAMER_RECORD(WrenVM* vm)
    {
        Any gamerHandle;

        BOOL res = NETWORK::NETWORK_PERMISSIONS_HAS_GAMER_RECORD(&gamerHandle);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, gamerHandle);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_CAN_COMMUNICATE_WITH_GAMER(WrenVM* vm)
    {
        Any gamerHandle;

        BOOL res = NETWORK::NETWORK_CAN_COMMUNICATE_WITH_GAMER(&gamerHandle);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, gamerHandle);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_CAN_TEXT_CHAT_WITH_GAMER(WrenVM* vm)
    {
        Any gamerHandle;

        BOOL res = NETWORK::NETWORK_CAN_TEXT_CHAT_WITH_GAMER(&gamerHandle);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, gamerHandle);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_IS_GAMER_MUTED_BY_ME(WrenVM* vm)
    {
        Any gamerHandle;

        BOOL res = NETWORK::NETWORK_IS_GAMER_MUTED_BY_ME(&gamerHandle);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, gamerHandle);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_AM_I_MUTED_BY_GAMER(WrenVM* vm)
    {
        Any gamerHandle;

        BOOL res = NETWORK::NETWORK_AM_I_MUTED_BY_GAMER(&gamerHandle);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, gamerHandle);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_IS_GAMER_BLOCKED_BY_ME(WrenVM* vm)
    {
        Any gamerHandle;

        BOOL res = NETWORK::NETWORK_IS_GAMER_BLOCKED_BY_ME(&gamerHandle);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, gamerHandle);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_AM_I_BLOCKED_BY_GAMER(WrenVM* vm)
    {
        Any gamerHandle;

        BOOL res = NETWORK::NETWORK_AM_I_BLOCKED_BY_GAMER(&gamerHandle);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, gamerHandle);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_CAN_VIEW_GAMER_USER_CONTENT(WrenVM* vm)
    {
        Any gamerHandle;

        BOOL res = NETWORK::NETWORK_CAN_VIEW_GAMER_USER_CONTENT(&gamerHandle);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, gamerHandle);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_HAS_VIEW_GAMER_USER_CONTENT_RESULT(WrenVM* vm)
    {
        Any gamerHandle;

        BOOL res = NETWORK::NETWORK_HAS_VIEW_GAMER_USER_CONTENT_RESULT(&gamerHandle);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, gamerHandle);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_CAN_PLAY_MULTIPLAYER_WITH_GAMER(WrenVM* vm)
    {
        Any gamerHandle;

        BOOL res = NETWORK::NETWORK_CAN_PLAY_MULTIPLAYER_WITH_GAMER(&gamerHandle);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, gamerHandle);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_CAN_GAMER_PLAY_MULTIPLAYER_WITH_ME(WrenVM* vm)
    {
        Any gamerHandle;

        BOOL res = NETWORK::NETWORK_CAN_GAMER_PLAY_MULTIPLAYER_WITH_ME(&gamerHandle);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, gamerHandle);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_CAN_SEND_LOCAL_INVITE(WrenVM* vm)
    {
        Any gamerHandle;

        BOOL res = NETWORK::NETWORK_CAN_SEND_LOCAL_INVITE(&gamerHandle);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, gamerHandle);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_CAN_RECEIVE_LOCAL_INVITE(WrenVM* vm)
    {
        Any gamerHandle;

        BOOL res = NETWORK::NETWORK_CAN_RECEIVE_LOCAL_INVITE(&gamerHandle);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, gamerHandle);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_IS_PLAYER_TALKING(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::NETWORK_IS_PLAYER_TALKING(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_PLAYER_HAS_HEADSET(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::NETWORK_PLAYER_HAS_HEADSET(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_IS_PLAYER_MUTED_BY_ME(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::NETWORK_IS_PLAYER_MUTED_BY_ME(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_AM_I_MUTED_BY_PLAYER(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::NETWORK_AM_I_MUTED_BY_PLAYER(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_IS_PLAYER_BLOCKED_BY_ME(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::NETWORK_IS_PLAYER_BLOCKED_BY_ME(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_AM_I_BLOCKED_BY_PLAYER(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::NETWORK_AM_I_BLOCKED_BY_PLAYER(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_GET_PLAYER_LOUDNESS(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        float res = NETWORK::NETWORK_GET_PLAYER_LOUDNESS(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_SET_TALKER_PROXIMITY(WrenVM* vm)
    {
        float value = (float)wrenGetSlotDouble(vm, 1);

        NETWORK::NETWORK_SET_TALKER_PROXIMITY(value);
    }

    static void WREN_NETWORK_NETWORK_GET_TALKER_PROXIMITY(WrenVM* vm)
    {

        float res = NETWORK::NETWORK_GET_TALKER_PROXIMITY();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_SET_VOICE_ACTIVE(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        NETWORK::NETWORK_SET_VOICE_ACTIVE(toggle);
    }

    static void WREN_NETWORK_NETWORK_REMAIN_IN_GAME_CHAT(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        NETWORK::NETWORK_REMAIN_IN_GAME_CHAT(p0);
    }

    static void WREN_NETWORK_NETWORK_OVERRIDE_TRANSITION_CHAT(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        NETWORK::NETWORK_OVERRIDE_TRANSITION_CHAT(p0);
    }

    static void WREN_NETWORK_NETWORK_SET_TEAM_ONLY_CHAT(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        NETWORK::NETWORK_SET_TEAM_ONLY_CHAT(toggle);
    }

    static void WREN_NETWORK_NETWORK_SET_SCRIPT_CONTROLLING_TEAMS(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        NETWORK::NETWORK_SET_SCRIPT_CONTROLLING_TEAMS(p0);
    }

    static void WREN_NETWORK_NETWORK_SET_SAME_TEAM_AS_LOCAL_PLAYER(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        Any res = NETWORK::NETWORK_SET_SAME_TEAM_AS_LOCAL_PLAYER(p0, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_OVERRIDE_TEAM_RESTRICTIONS(WrenVM* vm)
    {
        int team = (int)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        NETWORK::NETWORK_OVERRIDE_TEAM_RESTRICTIONS(team, toggle);
    }

    static void WREN_NETWORK_NETWORK_SET_OVERRIDE_SPECTATOR_MODE(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        NETWORK::NETWORK_SET_OVERRIDE_SPECTATOR_MODE(toggle);
    }

    static void WREN_NETWORK_NETWORK_SET_OVERRIDE_TUTORIAL_SESSION_CHAT(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        NETWORK::NETWORK_SET_OVERRIDE_TUTORIAL_SESSION_CHAT(toggle);
    }

    static void WREN_NETWORK_NETWORK_SET_PROXIMITY_AFFECTS_TEAM(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        NETWORK::NETWORK_SET_PROXIMITY_AFFECTS_TEAM(toggle);
    }

    static void WREN_NETWORK_NETWORK_SET_NO_SPECTATOR_CHAT(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        NETWORK::NETWORK_SET_NO_SPECTATOR_CHAT(toggle);
    }

    static void WREN_NETWORK_NETWORK_SET_IGNORE_SPECTATOR_CHAT_LIMITS_SAME_TEAM(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        NETWORK::NETWORK_SET_IGNORE_SPECTATOR_CHAT_LIMITS_SAME_TEAM(toggle);
    }

    static void WREN_NETWORK_NETWORK_OVERRIDE_CHAT_RESTRICTIONS(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        NETWORK::NETWORK_OVERRIDE_CHAT_RESTRICTIONS(player, toggle);
    }

    static void WREN_NETWORK_NETWORK_OVERRIDE_SEND_RESTRICTIONS(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        NETWORK::NETWORK_OVERRIDE_SEND_RESTRICTIONS(player, toggle);
    }

    static void WREN_NETWORK_NETWORK_OVERRIDE_SEND_RESTRICTIONS_ALL(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        NETWORK::NETWORK_OVERRIDE_SEND_RESTRICTIONS_ALL(toggle);
    }

    static void WREN_NETWORK_NETWORK_OVERRIDE_RECEIVE_RESTRICTIONS(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        NETWORK::NETWORK_OVERRIDE_RECEIVE_RESTRICTIONS(player, toggle);
    }

    static void WREN_NETWORK_NETWORK_OVERRIDE_RECEIVE_RESTRICTIONS_ALL(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        NETWORK::NETWORK_OVERRIDE_RECEIVE_RESTRICTIONS_ALL(toggle);
    }

    static void WREN_NETWORK_NETWORK_SET_VOICE_CHANNEL(WrenVM* vm)
    {
        int channel = (int)wrenGetSlotDouble(vm, 1);

        NETWORK::NETWORK_SET_VOICE_CHANNEL(channel);
    }

    static void WREN_NETWORK_NETWORK_CLEAR_VOICE_CHANNEL(WrenVM* vm)
    {

        NETWORK::NETWORK_CLEAR_VOICE_CHANNEL();
    }

    static void WREN_NETWORK_NETWORK_APPLY_VOICE_PROXIMITY_OVERRIDE(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);

        NETWORK::NETWORK_APPLY_VOICE_PROXIMITY_OVERRIDE(x, y, z);
    }

    static void WREN_NETWORK_NETWORK_CLEAR_VOICE_PROXIMITY_OVERRIDE(WrenVM* vm)
    {

        NETWORK::NETWORK_CLEAR_VOICE_PROXIMITY_OVERRIDE();
    }

    static void WREN_NETWORK_NETWORK_ENABLE_VOICE_BANDWIDTH_RESTRICTION(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        NETWORK::NETWORK_ENABLE_VOICE_BANDWIDTH_RESTRICTION(player);
    }

    static void WREN_NETWORK_NETWORK_DISABLE_VOICE_BANDWIDTH_RESTRICTION(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        NETWORK::NETWORK_DISABLE_VOICE_BANDWIDTH_RESTRICTION(player);
    }

    static void WREN_NETWORK_NETWORK_GET_MUTE_COUNT_FOR_PLAYER(WrenVM* vm)
    {
        Player p0 = (Player)wrenGetSlotDouble(vm, 1);
        float p1;
        float p2;

        NETWORK::NETWORK_GET_MUTE_COUNT_FOR_PLAYER(p0, &p1, &p2);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, p1);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p2);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_SET_SPECTATOR_TO_NON_SPECTATOR_TEXT_CHAT(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        NETWORK::NETWORK_SET_SPECTATOR_TO_NON_SPECTATOR_TEXT_CHAT(toggle);
    }

    static void WREN_NETWORK_NETWORK_TEXT_CHAT_IS_TYPING(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_TEXT_CHAT_IS_TYPING();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_SHUTDOWN_AND_LAUNCH_SINGLE_PLAYER_GAME(WrenVM* vm)
    {

        NETWORK::SHUTDOWN_AND_LAUNCH_SINGLE_PLAYER_GAME();
    }

    static void WREN_NETWORK_SHUTDOWN_AND_LOAD_MOST_RECENT_SAVE(WrenVM* vm)
    {

        BOOL res = NETWORK::SHUTDOWN_AND_LOAD_MOST_RECENT_SAVE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_SET_FRIENDLY_FIRE_OPTION(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        NETWORK::NETWORK_SET_FRIENDLY_FIRE_OPTION(toggle);
    }

    static void WREN_NETWORK_NETWORK_SET_RICH_PRESENCE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        NETWORK::NETWORK_SET_RICH_PRESENCE(p0, p1, p2, p3);
    }

    static void WREN_NETWORK_NETWORK_SET_RICH_PRESENCE_STRING(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);
        const char* textLabel = wrenGetSlotString(vm, 2);

        NETWORK::NETWORK_SET_RICH_PRESENCE_STRING(p0, textLabel);
    }

    static void WREN_NETWORK_NETWORK_GET_TIMEOUT_TIME(WrenVM* vm)
    {

        int res = NETWORK::NETWORK_GET_TIMEOUT_TIME();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_LEAVE_PED_BEHIND_BEFORE_WARP(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);
        BOOL p4 = (BOOL)wrenGetSlotBool(vm, 5);
        BOOL p5 = (BOOL)wrenGetSlotBool(vm, 6);

        NETWORK::NETWORK_LEAVE_PED_BEHIND_BEFORE_WARP(player, x, y, z, p4, p5);
    }

    static void WREN_NETWORK_NETWORK_LEAVE_PED_BEHIND_BEFORE_CUTSCENE(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        NETWORK::NETWORK_LEAVE_PED_BEHIND_BEFORE_CUTSCENE(player, p1);
    }

    static void WREN_NETWORK_REMOVE_ALL_STICKY_BOMBS_FROM_ENTITY(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        Ped ped = (Ped)wrenGetSlotDouble(vm, 2);

        NETWORK::REMOVE_ALL_STICKY_BOMBS_FROM_ENTITY(entity, ped);
    }

    static void WREN_NETWORK_NETWORK_KEEP_ENTITY_COLLISION_DISABLED_AFTER_ANIM_SCENE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        NETWORK::NETWORK_KEEP_ENTITY_COLLISION_DISABLED_AFTER_ANIM_SCENE(p0, p1);
    }

    static void WREN_NETWORK_NETWORK_IS_ANY_PLAYER_NEAR(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);
        Any p5 = (Any)wrenGetSlotDouble(vm, 6);
        Any p6 = (Any)wrenGetSlotDouble(vm, 7);

        Any res = NETWORK::NETWORK_IS_ANY_PLAYER_NEAR(p0, p1, p2, p3, p4, p5, p6);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_CLAN_SERVICE_IS_VALID(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_CLAN_SERVICE_IS_VALID();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_CLAN_PLAYER_IS_ACTIVE(WrenVM* vm)
    {
        Any gamerHandle;

        BOOL res = NETWORK::NETWORK_CLAN_PLAYER_IS_ACTIVE(&gamerHandle);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, gamerHandle);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_CLAN_PLAYER_GET_DESC(WrenVM* vm)
    {
        Any clanDesc;
        int bufferSize = (int)wrenGetSlotDouble(vm, 1);
        Any gamerHandle;

        BOOL res = NETWORK::NETWORK_CLAN_PLAYER_GET_DESC(&clanDesc, bufferSize, &gamerHandle);

        wrenEnsureSlots(vm, 6);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, clanDesc);
        wrenInsertInList(vm, 0, 1, 2);

        wrenSetSlotDouble(vm, 3, gamerHandle);
        wrenInsertInList(vm, 0, 2, 3);

    }

    static void WREN_NETWORK_NETWORK_CLAN_IS_ROCKSTAR_CLAN(WrenVM* vm)
    {
        Any clanDesc;
        int bufferSize = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::NETWORK_CLAN_IS_ROCKSTAR_CLAN(&clanDesc, bufferSize);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, clanDesc);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_CLAN_GET_UI_FORMATTED_TAG(WrenVM* vm)
    {
        Any clanDesc;
        int bufferSize = (int)wrenGetSlotDouble(vm, 1);
        char formattedTag;

        NETWORK::NETWORK_CLAN_GET_UI_FORMATTED_TAG(&clanDesc, bufferSize, &formattedTag);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, clanDesc);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, formattedTag);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_CLAN_GET_LOCAL_MEMBERSHIPS_COUNT(WrenVM* vm)
    {

        int res = NETWORK::NETWORK_CLAN_GET_LOCAL_MEMBERSHIPS_COUNT();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_CLAN_GET_MEMBERSHIP_DESC(WrenVM* vm)
    {
        Any memberDesc;
        int p1 = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::NETWORK_CLAN_GET_MEMBERSHIP_DESC(&memberDesc, p1);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, memberDesc);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_CLAN_DOWNLOAD_MEMBERSHIP(WrenVM* vm)
    {
        Any gamerHandle;

        BOOL res = NETWORK::NETWORK_CLAN_DOWNLOAD_MEMBERSHIP(&gamerHandle);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, gamerHandle);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_CLAN_DOWNLOAD_MEMBERSHIP_PENDING(WrenVM* vm)
    {
        Any p0;

        BOOL res = NETWORK::NETWORK_CLAN_DOWNLOAD_MEMBERSHIP_PENDING(&p0);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p0);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_CLAN_ANY_DOWNLOAD_MEMBERSHIP_PENDING(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_CLAN_ANY_DOWNLOAD_MEMBERSHIP_PENDING();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_CLAN_REMOTE_MEMBERSHIPS_ARE_IN_CACHE(WrenVM* vm)
    {
        int p0;

        BOOL res = NETWORK::NETWORK_CLAN_REMOTE_MEMBERSHIPS_ARE_IN_CACHE(&p0);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p0);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_CLAN_GET_MEMBERSHIP_COUNT(WrenVM* vm)
    {
        int p0;

        int res = NETWORK::NETWORK_CLAN_GET_MEMBERSHIP_COUNT(&p0);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p0);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_CLAN_GET_MEMBERSHIP_VALID(WrenVM* vm)
    {
        int p0;
        Any p1 = (Any)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::NETWORK_CLAN_GET_MEMBERSHIP_VALID(&p0, p1);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p0);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_CLAN_GET_MEMBERSHIP(WrenVM* vm)
    {
        int p0;
        Any clanMembership;
        int p2 = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::NETWORK_CLAN_GET_MEMBERSHIP(&p0, &clanMembership, p2);

        wrenEnsureSlots(vm, 6);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p0);
        wrenInsertInList(vm, 0, 1, 2);

        wrenSetSlotDouble(vm, 3, clanMembership);
        wrenInsertInList(vm, 0, 2, 3);

    }

    static void WREN_NETWORK_NETWORK_CLAN_JOIN(WrenVM* vm)
    {
        int clanDesc = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::NETWORK_CLAN_JOIN(clanDesc);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_CLAN_CREWINFO_GET_STRING_VALUE(WrenVM* vm)
    {
        const char* animDict = wrenGetSlotString(vm, 1);
        const char* animName = wrenGetSlotString(vm, 2);

        BOOL res = NETWORK::NETWORK_CLAN_CREWINFO_GET_STRING_VALUE(animDict, animName);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_CLAN_CREWINFO_GET_CREWRANKTITLE(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);
        const char* p1 = wrenGetSlotString(vm, 2);

        BOOL res = NETWORK::NETWORK_CLAN_CREWINFO_GET_CREWRANKTITLE(p0, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_CLAN_HAS_CREWINFO_METADATA_BEEN_RECEIVED(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_CLAN_HAS_CREWINFO_METADATA_BEEN_RECEIVED();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_CLAN_GET_EMBLEM_TXD_NAME(WrenVM* vm)
    {
        Any netHandle;
        char txdName;

        BOOL res = NETWORK::NETWORK_CLAN_GET_EMBLEM_TXD_NAME(&netHandle, &txdName);

        wrenEnsureSlots(vm, 6);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, netHandle);
        wrenInsertInList(vm, 0, 1, 2);

        wrenSetSlotDouble(vm, 3, txdName);
        wrenInsertInList(vm, 0, 2, 3);

    }

    static void WREN_NETWORK_NETWORK_CLAN_REQUEST_EMBLEM(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::NETWORK_CLAN_REQUEST_EMBLEM(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_CLAN_IS_EMBLEM_READY(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1;

        BOOL res = NETWORK::NETWORK_CLAN_IS_EMBLEM_READY(p0, &p1);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p1);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_CLAN_RELEASE_EMBLEM(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        NETWORK::NETWORK_CLAN_RELEASE_EMBLEM(p0);
    }

    static void WREN_NETWORK_NETWORK_GET_PRIMARY_CLAN_DATA_CLEAR(WrenVM* vm)
    {

        Any res = NETWORK::NETWORK_GET_PRIMARY_CLAN_DATA_CLEAR();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_GET_PRIMARY_CLAN_DATA_CANCEL(WrenVM* vm)
    {

        NETWORK::NETWORK_GET_PRIMARY_CLAN_DATA_CANCEL();
    }

    static void WREN_NETWORK_NETWORK_GET_PRIMARY_CLAN_DATA_START(WrenVM* vm)
    {
        Any p0;
        Any p1 = (Any)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::NETWORK_GET_PRIMARY_CLAN_DATA_START(&p0, p1);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p0);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_GET_PRIMARY_CLAN_DATA_PENDING(WrenVM* vm)
    {

        Any res = NETWORK::NETWORK_GET_PRIMARY_CLAN_DATA_PENDING();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_GET_PRIMARY_CLAN_DATA_SUCCESS(WrenVM* vm)
    {

        Any res = NETWORK::NETWORK_GET_PRIMARY_CLAN_DATA_SUCCESS();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_GET_PRIMARY_CLAN_DATA_NEW(WrenVM* vm)
    {
        Any p0;
        Any p1;

        BOOL res = NETWORK::NETWORK_GET_PRIMARY_CLAN_DATA_NEW(&p0, &p1);

        wrenEnsureSlots(vm, 6);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p0);
        wrenInsertInList(vm, 0, 1, 2);

        wrenSetSlotDouble(vm, 3, p1);
        wrenInsertInList(vm, 0, 2, 3);

    }

    static void WREN_NETWORK_SET_NETWORK_ID_CAN_MIGRATE(WrenVM* vm)
    {
        int netId = (int)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        NETWORK::SET_NETWORK_ID_CAN_MIGRATE(netId, toggle);
    }

    static void WREN_NETWORK_SET_NETWORK_ID_EXISTS_ON_ALL_MACHINES(WrenVM* vm)
    {
        int netId = (int)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        NETWORK::SET_NETWORK_ID_EXISTS_ON_ALL_MACHINES(netId, toggle);
    }

    static void WREN_NETWORK_SET_NETWORK_ID_ALWAYS_EXISTS_FOR_PLAYER(WrenVM* vm)
    {
        int netId = (int)wrenGetSlotDouble(vm, 1);
        Player player = (Player)wrenGetSlotDouble(vm, 2);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 3);

        NETWORK::SET_NETWORK_ID_ALWAYS_EXISTS_FOR_PLAYER(netId, player, toggle);
    }

    static void WREN_NETWORK_SET_NETWORK_ID_CAN_BE_REASSIGNED(WrenVM* vm)
    {
        int netId = (int)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        NETWORK::SET_NETWORK_ID_CAN_BE_REASSIGNED(netId, toggle);
    }

    static void WREN_NETWORK_NETWORK_SET_ENTITY_CAN_BLEND(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        NETWORK::NETWORK_SET_ENTITY_CAN_BLEND(entity, toggle);
    }

    static void WREN_NETWORK_NETWORK_SET_OBJECT_CAN_BLEND_WHEN_FIXED(WrenVM* vm)
    {
        Object object = (Object)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        NETWORK::NETWORK_SET_OBJECT_CAN_BLEND_WHEN_FIXED(object, toggle);
    }

    static void WREN_NETWORK_NETWORK_SET_ENTITY_ONLY_EXISTS_FOR_PARTICIPANTS(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        NETWORK::NETWORK_SET_ENTITY_ONLY_EXISTS_FOR_PARTICIPANTS(entity, toggle);
    }

    static void WREN_NETWORK_SET_NETWORK_ID_VISIBLE_IN_CUTSCENE(WrenVM* vm)
    {
        int netId = (int)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        NETWORK::SET_NETWORK_ID_VISIBLE_IN_CUTSCENE(netId, p1, p2);
    }

    static void WREN_NETWORK_SET_NETWORK_ID_VISIBLE_IN_CUTSCENE_HACK(WrenVM* vm)
    {
        int netId = (int)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        NETWORK::SET_NETWORK_ID_VISIBLE_IN_CUTSCENE_HACK(netId, p1, p2);
    }

    static void WREN_NETWORK_SET_NETWORK_ID_VISIBLE_IN_CUTSCENE_REMAIN_HACK(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        NETWORK::SET_NETWORK_ID_VISIBLE_IN_CUTSCENE_REMAIN_HACK(p0, p1);
    }

    static void WREN_NETWORK_SET_NETWORK_CUTSCENE_ENTITIES(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        NETWORK::SET_NETWORK_CUTSCENE_ENTITIES(toggle);
    }

    static void WREN_NETWORK_ARE_CUTSCENE_ENTITIES_NETWORKED(WrenVM* vm)
    {

        BOOL res = NETWORK::ARE_CUTSCENE_ENTITIES_NETWORKED();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_SET_NETWORK_ID_PASS_CONTROL_IN_TUTORIAL(WrenVM* vm)
    {
        int netId = (int)wrenGetSlotDouble(vm, 1);
        BOOL state = (BOOL)wrenGetSlotBool(vm, 2);

        NETWORK::SET_NETWORK_ID_PASS_CONTROL_IN_TUTORIAL(netId, state);
    }

    static void WREN_NETWORK_IS_NETWORK_ID_OWNED_BY_PARTICIPANT(WrenVM* vm)
    {
        int netId = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::IS_NETWORK_ID_OWNED_BY_PARTICIPANT(netId);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_SET_LOCAL_PLAYER_VISIBLE_IN_CUTSCENE(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        NETWORK::SET_LOCAL_PLAYER_VISIBLE_IN_CUTSCENE(p0, p1);
    }

    static void WREN_NETWORK_SET_LOCAL_PLAYER_INVISIBLE_LOCALLY(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        NETWORK::SET_LOCAL_PLAYER_INVISIBLE_LOCALLY(p0);
    }

    static void WREN_NETWORK_SET_LOCAL_PLAYER_VISIBLE_LOCALLY(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        NETWORK::SET_LOCAL_PLAYER_VISIBLE_LOCALLY(p0);
    }

    static void WREN_NETWORK_SET_PLAYER_INVISIBLE_LOCALLY(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        NETWORK::SET_PLAYER_INVISIBLE_LOCALLY(player, toggle);
    }

    static void WREN_NETWORK_SET_PLAYER_VISIBLE_LOCALLY(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        NETWORK::SET_PLAYER_VISIBLE_LOCALLY(player, toggle);
    }

    static void WREN_NETWORK_FADE_OUT_LOCAL_PLAYER(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        NETWORK::FADE_OUT_LOCAL_PLAYER(p0);
    }

    static void WREN_NETWORK_NETWORK_FADE_OUT_ENTITY(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        BOOL normal = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL slow = (BOOL)wrenGetSlotBool(vm, 3);

        NETWORK::NETWORK_FADE_OUT_ENTITY(entity, normal, slow);
    }

    static void WREN_NETWORK_NETWORK_FADE_IN_ENTITY(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        BOOL state = (BOOL)wrenGetSlotBool(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);

        NETWORK::NETWORK_FADE_IN_ENTITY(entity, state, p2);
    }

    static void WREN_NETWORK_NETWORK_IS_PLAYER_FADING(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::NETWORK_IS_PLAYER_FADING(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_IS_ENTITY_FADING(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::NETWORK_IS_ENTITY_FADING(entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_IS_PLAYER_IN_CUTSCENE(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::IS_PLAYER_IN_CUTSCENE(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_SET_ENTITY_VISIBLE_IN_CUTSCENE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        NETWORK::SET_ENTITY_VISIBLE_IN_CUTSCENE(p0, p1, p2);
    }

    static void WREN_NETWORK_SET_ENTITY_LOCALLY_INVISIBLE(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        NETWORK::SET_ENTITY_LOCALLY_INVISIBLE(entity);
    }

    static void WREN_NETWORK_SET_ENTITY_LOCALLY_VISIBLE(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        NETWORK::SET_ENTITY_LOCALLY_VISIBLE(entity);
    }

    static void WREN_NETWORK_IS_DAMAGE_TRACKER_ACTIVE_ON_NETWORK_ID(WrenVM* vm)
    {
        int netID = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::IS_DAMAGE_TRACKER_ACTIVE_ON_NETWORK_ID(netID);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_ACTIVATE_DAMAGE_TRACKER_ON_NETWORK_ID(WrenVM* vm)
    {
        int netID = (int)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        NETWORK::ACTIVATE_DAMAGE_TRACKER_ON_NETWORK_ID(netID, toggle);
    }

    static void WREN_NETWORK_IS_DAMAGE_TRACKER_ACTIVE_ON_PLAYER(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::IS_DAMAGE_TRACKER_ACTIVE_ON_PLAYER(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_ACTIVATE_DAMAGE_TRACKER_ON_PLAYER(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        NETWORK::ACTIVATE_DAMAGE_TRACKER_ON_PLAYER(player, toggle);
    }

    static void WREN_NETWORK_IS_SPHERE_VISIBLE_TO_ANOTHER_MACHINE(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);
        float p2 = (float)wrenGetSlotDouble(vm, 3);
        float p3 = (float)wrenGetSlotDouble(vm, 4);

        BOOL res = NETWORK::IS_SPHERE_VISIBLE_TO_ANOTHER_MACHINE(p0, p1, p2, p3);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_IS_SPHERE_VISIBLE_TO_PLAYER(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);
        float p2 = (float)wrenGetSlotDouble(vm, 3);
        float p3 = (float)wrenGetSlotDouble(vm, 4);
        float p4 = (float)wrenGetSlotDouble(vm, 5);

        BOOL res = NETWORK::IS_SPHERE_VISIBLE_TO_PLAYER(p0, p1, p2, p3, p4);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_RESERVE_NETWORK_MISSION_OBJECTS(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);

        NETWORK::RESERVE_NETWORK_MISSION_OBJECTS(amount);
    }

    static void WREN_NETWORK_RESERVE_NETWORK_MISSION_PEDS(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);

        NETWORK::RESERVE_NETWORK_MISSION_PEDS(amount);
    }

    static void WREN_NETWORK_RESERVE_NETWORK_MISSION_VEHICLES(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);

        NETWORK::RESERVE_NETWORK_MISSION_VEHICLES(amount);
    }

    static void WREN_NETWORK_RESERVE_LOCAL_NETWORK_MISSION_OBJECTS(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);

        NETWORK::RESERVE_LOCAL_NETWORK_MISSION_OBJECTS(amount);
    }

    static void WREN_NETWORK_RESERVE_LOCAL_NETWORK_MISSION_PEDS(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);

        NETWORK::RESERVE_LOCAL_NETWORK_MISSION_PEDS(amount);
    }

    static void WREN_NETWORK_RESERVE_LOCAL_NETWORK_MISSION_VEHICLES(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);

        NETWORK::RESERVE_LOCAL_NETWORK_MISSION_VEHICLES(amount);
    }

    static void WREN_NETWORK_CAN_REGISTER_MISSION_OBJECTS(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::CAN_REGISTER_MISSION_OBJECTS(amount);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_CAN_REGISTER_MISSION_PEDS(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::CAN_REGISTER_MISSION_PEDS(amount);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_CAN_REGISTER_MISSION_VEHICLES(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::CAN_REGISTER_MISSION_VEHICLES(amount);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_CAN_REGISTER_MISSION_PICKUPS(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::CAN_REGISTER_MISSION_PICKUPS(amount);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_CAN_REGISTER_MISSION_DOORS(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        Any res = NETWORK::CAN_REGISTER_MISSION_DOORS(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_CAN_REGISTER_MISSION_ENTITIES(WrenVM* vm)
    {
        int ped_amt = (int)wrenGetSlotDouble(vm, 1);
        int vehicle_amt = (int)wrenGetSlotDouble(vm, 2);
        int object_amt = (int)wrenGetSlotDouble(vm, 3);
        int pickup_amt = (int)wrenGetSlotDouble(vm, 4);

        BOOL res = NETWORK::CAN_REGISTER_MISSION_ENTITIES(ped_amt, vehicle_amt, object_amt, pickup_amt);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_GET_NUM_RESERVED_MISSION_OBJECTS(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        int res = NETWORK::GET_NUM_RESERVED_MISSION_OBJECTS(p0, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_GET_NUM_RESERVED_MISSION_PEDS(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        int res = NETWORK::GET_NUM_RESERVED_MISSION_PEDS(p0, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_GET_NUM_RESERVED_MISSION_VEHICLES(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        int res = NETWORK::GET_NUM_RESERVED_MISSION_VEHICLES(p0, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_GET_NUM_CREATED_MISSION_OBJECTS(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        int res = NETWORK::GET_NUM_CREATED_MISSION_OBJECTS(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_GET_NUM_CREATED_MISSION_PEDS(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        int res = NETWORK::GET_NUM_CREATED_MISSION_PEDS(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_GET_NUM_CREATED_MISSION_VEHICLES(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        int res = NETWORK::GET_NUM_CREATED_MISSION_VEHICLES(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_GET_RESERVED_MISSION_ENTITIES_IN_AREA(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);
        Any p5 = (Any)wrenGetSlotDouble(vm, 6);
        Any p6 = (Any)wrenGetSlotDouble(vm, 7);

        NETWORK::GET_RESERVED_MISSION_ENTITIES_IN_AREA(p0, p1, p2, p3, p4, p5, p6);
    }

    static void WREN_NETWORK_GET_MAX_NUM_NETWORK_OBJECTS(WrenVM* vm)
    {

        int res = NETWORK::GET_MAX_NUM_NETWORK_OBJECTS();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_GET_MAX_NUM_NETWORK_PEDS(WrenVM* vm)
    {

        int res = NETWORK::GET_MAX_NUM_NETWORK_PEDS();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_GET_MAX_NUM_NETWORK_VEHICLES(WrenVM* vm)
    {

        int res = NETWORK::GET_MAX_NUM_NETWORK_VEHICLES();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_GET_MAX_NUM_NETWORK_PICKUPS(WrenVM* vm)
    {

        int res = NETWORK::GET_MAX_NUM_NETWORK_PICKUPS();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_SET_OBJECT_SCOPE_DISTANCE(WrenVM* vm)
    {
        Object object = (Object)wrenGetSlotDouble(vm, 1);
        float range = (float)wrenGetSlotDouble(vm, 2);

        NETWORK::NETWORK_SET_OBJECT_SCOPE_DISTANCE(object, range);
    }

    static void WREN_NETWORK_NETWORK_ALLOW_CLONING_WHILE_IN_TUTORIAL(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        NETWORK::NETWORK_ALLOW_CLONING_WHILE_IN_TUTORIAL(p0, p1);
    }

    static void WREN_NETWORK_NETWORK_SET_TASK_CUTSCENE_INSCOPE_MULTIPLER(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        NETWORK::NETWORK_SET_TASK_CUTSCENE_INSCOPE_MULTIPLER(p0);
    }

    static void WREN_NETWORK_GET_NETWORK_TIME(WrenVM* vm)
    {

        int res = NETWORK::GET_NETWORK_TIME();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_GET_NETWORK_TIME_ACCURATE(WrenVM* vm)
    {

        int res = NETWORK::GET_NETWORK_TIME_ACCURATE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_HAS_NETWORK_TIME_STARTED(WrenVM* vm)
    {

        BOOL res = NETWORK::HAS_NETWORK_TIME_STARTED();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_GET_TIME_OFFSET(WrenVM* vm)
    {
        int timeA = (int)wrenGetSlotDouble(vm, 1);
        int timeB = (int)wrenGetSlotDouble(vm, 2);

        int res = NETWORK::GET_TIME_OFFSET(timeA, timeB);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_IS_TIME_LESS_THAN(WrenVM* vm)
    {
        int timeA = (int)wrenGetSlotDouble(vm, 1);
        int timeB = (int)wrenGetSlotDouble(vm, 2);

        BOOL res = NETWORK::IS_TIME_LESS_THAN(timeA, timeB);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_IS_TIME_MORE_THAN(WrenVM* vm)
    {
        int timeA = (int)wrenGetSlotDouble(vm, 1);
        int timeB = (int)wrenGetSlotDouble(vm, 2);

        BOOL res = NETWORK::IS_TIME_MORE_THAN(timeA, timeB);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_IS_TIME_EQUAL_TO(WrenVM* vm)
    {
        int timeA = (int)wrenGetSlotDouble(vm, 1);
        int timeB = (int)wrenGetSlotDouble(vm, 2);

        BOOL res = NETWORK::IS_TIME_EQUAL_TO(timeA, timeB);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_GET_TIME_DIFFERENCE(WrenVM* vm)
    {
        int timeA = (int)wrenGetSlotDouble(vm, 1);
        int timeB = (int)wrenGetSlotDouble(vm, 2);

        int res = NETWORK::GET_TIME_DIFFERENCE(timeA, timeB);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_GET_TIME_AS_STRING(WrenVM* vm)
    {
        int time = (int)wrenGetSlotDouble(vm, 1);

        const char* res = NETWORK::GET_TIME_AS_STRING(time);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotString(vm, 0, res);
    }

    static void WREN_NETWORK_GET_CLOUD_TIME_AS_STRING(WrenVM* vm)
    {

        const char* res = NETWORK::GET_CLOUD_TIME_AS_STRING();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotString(vm, 0, res);
    }

    static void WREN_NETWORK_GET_CLOUD_TIME_AS_INT(WrenVM* vm)
    {

        int res = NETWORK::GET_CLOUD_TIME_AS_INT();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_CONVERT_POSIX_TIME(WrenVM* vm)
    {
        int posixTime = (int)wrenGetSlotDouble(vm, 1);
        Any timeStructure;

        NETWORK::CONVERT_POSIX_TIME(posixTime, &timeStructure);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_NETWORK_NETWORK_SET_IN_SPECTATOR_MODE(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);
        Ped playerPed = (Ped)wrenGetSlotDouble(vm, 2);

        NETWORK::NETWORK_SET_IN_SPECTATOR_MODE(toggle, playerPed);
    }

    static void WREN_NETWORK_NETWORK_SET_IN_SPECTATOR_MODE_EXTENDED(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);
        Ped playerPed = (Ped)wrenGetSlotDouble(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        NETWORK::NETWORK_SET_IN_SPECTATOR_MODE_EXTENDED(toggle, playerPed, p2);
    }

    static void WREN_NETWORK_NETWORK_SET_IN_FREE_CAM_MODE(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        NETWORK::NETWORK_SET_IN_FREE_CAM_MODE(toggle);
    }

    static void WREN_NETWORK_NETWORK_SET_ANTAGONISTIC_TO_PLAYER(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);
        Player player = (Player)wrenGetSlotDouble(vm, 2);

        NETWORK::NETWORK_SET_ANTAGONISTIC_TO_PLAYER(toggle, player);
    }

    static void WREN_NETWORK_NETWORK_IS_IN_SPECTATOR_MODE(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_IS_IN_SPECTATOR_MODE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_SET_IN_MP_CUTSCENE(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        NETWORK::NETWORK_SET_IN_MP_CUTSCENE(p0, p1);
    }

    static void WREN_NETWORK_NETWORK_IS_IN_MP_CUTSCENE(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_IS_IN_MP_CUTSCENE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_IS_PLAYER_IN_MP_CUTSCENE(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::NETWORK_IS_PLAYER_IN_MP_CUTSCENE(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_HIDE_PROJECTILE_IN_CUTSCENE(WrenVM* vm)
    {

        NETWORK::NETWORK_HIDE_PROJECTILE_IN_CUTSCENE();
    }

    static void WREN_NETWORK_SET_NETWORK_VEHICLE_RESPOT_TIMER(WrenVM* vm)
    {
        int netId = (int)wrenGetSlotDouble(vm, 1);
        int time = (int)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        NETWORK::SET_NETWORK_VEHICLE_RESPOT_TIMER(netId, time, p2, p3);
    }

    static void WREN_NETWORK_SET_NETWORK_VEHICLE_AS_GHOST(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        NETWORK::SET_NETWORK_VEHICLE_AS_GHOST(vehicle, toggle);
    }

    static void WREN_NETWORK_SET_NETWORK_VEHICLE_MAX_POSITION_DELTA_MULTIPLIER(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        float multiplier = (float)wrenGetSlotDouble(vm, 2);

        NETWORK::SET_NETWORK_VEHICLE_MAX_POSITION_DELTA_MULTIPLIER(vehicle, multiplier);
    }

    static void WREN_NETWORK_SET_NETWORK_ENABLE_HIGH_SPEED_EDGE_FALL_DETECTION(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        NETWORK::SET_NETWORK_ENABLE_HIGH_SPEED_EDGE_FALL_DETECTION(vehicle, toggle);
    }

    static void WREN_NETWORK_SET_LOCAL_PLAYER_AS_GHOST(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        NETWORK::SET_LOCAL_PLAYER_AS_GHOST(toggle, p1);
    }

    static void WREN_NETWORK_IS_ENTITY_A_GHOST(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::IS_ENTITY_A_GHOST(entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_SET_NON_PARTICIPANTS_OF_THIS_SCRIPT_AS_GHOSTS(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        NETWORK::SET_NON_PARTICIPANTS_OF_THIS_SCRIPT_AS_GHOSTS(p0);
    }

    static void WREN_NETWORK_SET_REMOTE_PLAYER_AS_GHOST(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        NETWORK::SET_REMOTE_PLAYER_AS_GHOST(player, p1);
    }

    static void WREN_NETWORK_SET_GHOST_ALPHA(WrenVM* vm)
    {
        int alpha = (int)wrenGetSlotDouble(vm, 1);

        NETWORK::SET_GHOST_ALPHA(alpha);
    }

    static void WREN_NETWORK_RESET_GHOST_ALPHA(WrenVM* vm)
    {

        NETWORK::RESET_GHOST_ALPHA();
    }

    static void WREN_NETWORK_SET_ENTITY_GHOSTED_FOR_GHOST_PLAYERS(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        NETWORK::SET_ENTITY_GHOSTED_FOR_GHOST_PLAYERS(entity, p1);
    }

    static void WREN_NETWORK_SET_INVERT_GHOSTING(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        NETWORK::SET_INVERT_GHOSTING(p0);
    }

    static void WREN_NETWORK_IS_ENTITY_IN_GHOST_COLLISION(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::IS_ENTITY_IN_GHOST_COLLISION(entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_USE_PLAYER_COLOUR_INSTEAD_OF_TEAM_COLOUR(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        NETWORK::USE_PLAYER_COLOUR_INSTEAD_OF_TEAM_COLOUR(toggle);
    }

    static void WREN_NETWORK_NETWORK_CREATE_SYNCHRONISED_SCENE(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        float xRot = (float)wrenGetSlotDouble(vm, 4);
        float yRot = (float)wrenGetSlotDouble(vm, 5);
        float zRot = (float)wrenGetSlotDouble(vm, 6);
        int rotationOrder = (int)wrenGetSlotDouble(vm, 7);
        BOOL useOcclusionPortal = (BOOL)wrenGetSlotBool(vm, 8);
        BOOL looped = (BOOL)wrenGetSlotBool(vm, 9);
        float p9 = (float)wrenGetSlotDouble(vm, 10);
        float animTime = (float)wrenGetSlotDouble(vm, 11);
        float p11 = (float)wrenGetSlotDouble(vm, 12);

        int res = NETWORK::NETWORK_CREATE_SYNCHRONISED_SCENE(x, y, z, xRot, yRot, zRot, rotationOrder, useOcclusionPortal, looped, p9, animTime, p11);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_ADD_PED_TO_SYNCHRONISED_SCENE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int netScene = (int)wrenGetSlotDouble(vm, 2);
        const char* animDict = wrenGetSlotString(vm, 3);
        const char* animnName = wrenGetSlotString(vm, 4);
        float speed = (float)wrenGetSlotDouble(vm, 5);
        float speedMultiplier = (float)wrenGetSlotDouble(vm, 6);
        int duration = (int)wrenGetSlotDouble(vm, 7);
        int flag = (int)wrenGetSlotDouble(vm, 8);
        float playbackRate = (float)wrenGetSlotDouble(vm, 9);
        Any p9 = (Any)wrenGetSlotDouble(vm, 10);

        NETWORK::NETWORK_ADD_PED_TO_SYNCHRONISED_SCENE(ped, netScene, animDict, animnName, speed, speedMultiplier, duration, flag, playbackRate, p9);
    }

    static void WREN_NETWORK_NETWORK_ADD_PED_TO_SYNCHRONISED_SCENE_WITH_IK(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);
        Any p5 = (Any)wrenGetSlotDouble(vm, 6);
        Any p6 = (Any)wrenGetSlotDouble(vm, 7);
        Any p7 = (Any)wrenGetSlotDouble(vm, 8);
        Any p8 = (Any)wrenGetSlotDouble(vm, 9);
        Any p9 = (Any)wrenGetSlotDouble(vm, 10);

        NETWORK::NETWORK_ADD_PED_TO_SYNCHRONISED_SCENE_WITH_IK(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
    }

    static void WREN_NETWORK_NETWORK_ADD_ENTITY_TO_SYNCHRONISED_SCENE(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        int netScene = (int)wrenGetSlotDouble(vm, 2);
        const char* animDict = wrenGetSlotString(vm, 3);
        const char* animName = wrenGetSlotString(vm, 4);
        float speed = (float)wrenGetSlotDouble(vm, 5);
        float speedMulitiplier = (float)wrenGetSlotDouble(vm, 6);
        int flag = (int)wrenGetSlotDouble(vm, 7);

        NETWORK::NETWORK_ADD_ENTITY_TO_SYNCHRONISED_SCENE(entity, netScene, animDict, animName, speed, speedMulitiplier, flag);
    }

    static void WREN_NETWORK_NETWORK_ADD_MAP_ENTITY_TO_SYNCHRONISED_SCENE(WrenVM* vm)
    {
        int netScene = (int)wrenGetSlotDouble(vm, 1);
        Hash modelHash = (Hash)wrenGetSlotDouble(vm, 2);
        float x = (float)wrenGetSlotDouble(vm, 3);
        float y = (float)wrenGetSlotDouble(vm, 4);
        float z = (float)wrenGetSlotDouble(vm, 5);
        float p5 = (float)wrenGetSlotDouble(vm, 6);
        const char* p6 = wrenGetSlotString(vm, 7);
        float p7 = (float)wrenGetSlotDouble(vm, 8);
        float p8 = (float)wrenGetSlotDouble(vm, 9);
        int flags = (int)wrenGetSlotDouble(vm, 10);

        NETWORK::NETWORK_ADD_MAP_ENTITY_TO_SYNCHRONISED_SCENE(netScene, modelHash, x, y, z, p5, p6, p7, p8, flags);
    }

    static void WREN_NETWORK_NETWORK_ADD_SYNCHRONISED_SCENE_CAMERA(WrenVM* vm)
    {
        int netScene = (int)wrenGetSlotDouble(vm, 1);
        const char* animDict = wrenGetSlotString(vm, 2);
        const char* animName = wrenGetSlotString(vm, 3);

        NETWORK::NETWORK_ADD_SYNCHRONISED_SCENE_CAMERA(netScene, animDict, animName);
    }

    static void WREN_NETWORK_NETWORK_ATTACH_SYNCHRONISED_SCENE_TO_ENTITY(WrenVM* vm)
    {
        int netScene = (int)wrenGetSlotDouble(vm, 1);
        Entity entity = (Entity)wrenGetSlotDouble(vm, 2);
        int bone = (int)wrenGetSlotDouble(vm, 3);

        NETWORK::NETWORK_ATTACH_SYNCHRONISED_SCENE_TO_ENTITY(netScene, entity, bone);
    }

    static void WREN_NETWORK_NETWORK_START_SYNCHRONISED_SCENE(WrenVM* vm)
    {
        int netScene = (int)wrenGetSlotDouble(vm, 1);

        NETWORK::NETWORK_START_SYNCHRONISED_SCENE(netScene);
    }

    static void WREN_NETWORK_NETWORK_STOP_SYNCHRONISED_SCENE(WrenVM* vm)
    {
        int netScene = (int)wrenGetSlotDouble(vm, 1);

        NETWORK::NETWORK_STOP_SYNCHRONISED_SCENE(netScene);
    }

    static void WREN_NETWORK_NETWORK_GET_LOCAL_SCENE_FROM_NETWORK_ID(WrenVM* vm)
    {
        int netId = (int)wrenGetSlotDouble(vm, 1);

        int res = NETWORK::NETWORK_GET_LOCAL_SCENE_FROM_NETWORK_ID(netId);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_FORCE_LOCAL_USE_OF_SYNCED_SCENE_CAMERA(WrenVM* vm)
    {
        int netScene = (int)wrenGetSlotDouble(vm, 1);

        NETWORK::NETWORK_FORCE_LOCAL_USE_OF_SYNCED_SCENE_CAMERA(netScene);
    }

    static void WREN_NETWORK_NETWORK_ALLOW_REMOTE_SYNCED_SCENE_LOCAL_PLAYER_REQUESTS(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        NETWORK::NETWORK_ALLOW_REMOTE_SYNCED_SCENE_LOCAL_PLAYER_REQUESTS(p0);
    }

    static void WREN_NETWORK_NETWORK_FIND_LARGEST_BUNCH_OF_PLAYERS(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        Any res = NETWORK::NETWORK_FIND_LARGEST_BUNCH_OF_PLAYERS(p0, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_START_RESPAWN_SEARCH_FOR_PLAYER(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);
        float radius = (float)wrenGetSlotDouble(vm, 5);
        float p5 = (float)wrenGetSlotDouble(vm, 6);
        float p6 = (float)wrenGetSlotDouble(vm, 7);
        float p7 = (float)wrenGetSlotDouble(vm, 8);
        int flags = (int)wrenGetSlotDouble(vm, 9);

        BOOL res = NETWORK::NETWORK_START_RESPAWN_SEARCH_FOR_PLAYER(player, x, y, z, radius, p5, p6, p7, flags);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_START_RESPAWN_SEARCH_IN_ANGLED_AREA_FOR_PLAYER(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        float x1 = (float)wrenGetSlotDouble(vm, 2);
        float y1 = (float)wrenGetSlotDouble(vm, 3);
        float z1 = (float)wrenGetSlotDouble(vm, 4);
        float x2 = (float)wrenGetSlotDouble(vm, 5);
        float y2 = (float)wrenGetSlotDouble(vm, 6);
        float z2 = (float)wrenGetSlotDouble(vm, 7);
        float width = (float)wrenGetSlotDouble(vm, 8);
        float p8 = (float)wrenGetSlotDouble(vm, 9);
        float p9 = (float)wrenGetSlotDouble(vm, 10);
        float p10 = (float)wrenGetSlotDouble(vm, 11);
        int flags = (int)wrenGetSlotDouble(vm, 12);

        BOOL res = NETWORK::NETWORK_START_RESPAWN_SEARCH_IN_ANGLED_AREA_FOR_PLAYER(player, x1, y1, z1, x2, y2, z2, width, p8, p9, p10, flags);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_QUERY_RESPAWN_RESULTS(WrenVM* vm)
    {
        Any p0;

        Any res = NETWORK::NETWORK_QUERY_RESPAWN_RESULTS(&p0);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p0);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_CANCEL_RESPAWN_SEARCH(WrenVM* vm)
    {

        NETWORK::NETWORK_CANCEL_RESPAWN_SEARCH();
    }

    static void WREN_NETWORK_NETWORK_GET_RESPAWN_RESULT(WrenVM* vm)
    {
        int randomInt = (int)wrenGetSlotDouble(vm, 1);
        Vector3 coordinates;
        float heading;

        NETWORK::NETWORK_GET_RESPAWN_RESULT(randomInt, &coordinates, &heading);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenGetVariable(vm, "natives", "Vector3", 1);
        Vector3* wren_coordinates = (Vector3*)wrenSetSlotNewForeign(vm, 2, 1, sizeof(Vector3));
        wren_coordinates->x = coordinates.x;
        wren_coordinates->y = coordinates.y;
        wren_coordinates->z = coordinates.z;
        wrenInsertInList(vm, 0, 0, 2);

        wrenSetSlotDouble(vm, 3, heading);
        wrenInsertInList(vm, 0, 1, 3);

    }

    static void WREN_NETWORK_NETWORK_GET_RESPAWN_RESULT_FLAGS(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);

        int res = NETWORK::NETWORK_GET_RESPAWN_RESULT_FLAGS(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_START_SOLO_TUTORIAL_SESSION(WrenVM* vm)
    {

        NETWORK::NETWORK_START_SOLO_TUTORIAL_SESSION();
    }

    static void WREN_NETWORK_NETWORK_ALLOW_GANG_TO_JOIN_TUTORIAL_SESSION(WrenVM* vm)
    {
        int teamId = (int)wrenGetSlotDouble(vm, 1);
        int instanceId = (int)wrenGetSlotDouble(vm, 2);

        NETWORK::NETWORK_ALLOW_GANG_TO_JOIN_TUTORIAL_SESSION(teamId, instanceId);
    }

    static void WREN_NETWORK_NETWORK_END_TUTORIAL_SESSION(WrenVM* vm)
    {

        NETWORK::NETWORK_END_TUTORIAL_SESSION();
    }

    static void WREN_NETWORK_NETWORK_IS_IN_TUTORIAL_SESSION(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_IS_IN_TUTORIAL_SESSION();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_WAITING_POP_CLEAR_TUTORIAL_SESSION(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_WAITING_POP_CLEAR_TUTORIAL_SESSION();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_IS_TUTORIAL_SESSION_CHANGE_PENDING(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_IS_TUTORIAL_SESSION_CHANGE_PENDING();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_GET_PLAYER_TUTORIAL_SESSION_INSTANCE(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        int res = NETWORK::NETWORK_GET_PLAYER_TUTORIAL_SESSION_INSTANCE(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_ARE_PLAYERS_IN_SAME_TUTORIAL_SESSION(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        int index = (int)wrenGetSlotDouble(vm, 2);

        BOOL res = NETWORK::NETWORK_ARE_PLAYERS_IN_SAME_TUTORIAL_SESSION(player, index);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_BLOCK_PROXY_MIGRATION_BETWEEN_TUTORIAL_SESSIONS(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        NETWORK::NETWORK_BLOCK_PROXY_MIGRATION_BETWEEN_TUTORIAL_SESSIONS(p0);
    }

    static void WREN_NETWORK_NETWORK_CONCEAL_PLAYER(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        NETWORK::NETWORK_CONCEAL_PLAYER(player, toggle, p2);
    }

    static void WREN_NETWORK_NETWORK_IS_PLAYER_CONCEALED(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::NETWORK_IS_PLAYER_CONCEALED(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_CONCEAL_ENTITY(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        NETWORK::NETWORK_CONCEAL_ENTITY(entity, toggle);
    }

    static void WREN_NETWORK_NETWORK_IS_ENTITY_CONCEALED(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::NETWORK_IS_ENTITY_CONCEALED(entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_OVERRIDE_CLOCK_TIME(WrenVM* vm)
    {
        int hours = (int)wrenGetSlotDouble(vm, 1);
        int minutes = (int)wrenGetSlotDouble(vm, 2);
        int seconds = (int)wrenGetSlotDouble(vm, 3);

        NETWORK::NETWORK_OVERRIDE_CLOCK_TIME(hours, minutes, seconds);
    }

    static void WREN_NETWORK_NETWORK_OVERRIDE_CLOCK_RATE(WrenVM* vm)
    {
        int ms = (int)wrenGetSlotDouble(vm, 1);

        NETWORK::NETWORK_OVERRIDE_CLOCK_RATE(ms);
    }

    static void WREN_NETWORK_NETWORK_CLEAR_CLOCK_TIME_OVERRIDE(WrenVM* vm)
    {

        NETWORK::NETWORK_CLEAR_CLOCK_TIME_OVERRIDE();
    }

    static void WREN_NETWORK_NETWORK_IS_CLOCK_TIME_OVERRIDDEN(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_IS_CLOCK_TIME_OVERRIDDEN();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_ADD_ENTITY_AREA(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);
        float p2 = (float)wrenGetSlotDouble(vm, 3);
        float p3 = (float)wrenGetSlotDouble(vm, 4);
        float p4 = (float)wrenGetSlotDouble(vm, 5);
        float p5 = (float)wrenGetSlotDouble(vm, 6);

        Any res = NETWORK::NETWORK_ADD_ENTITY_AREA(p0, p1, p2, p3, p4, p5);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_ADD_ENTITY_ANGLED_AREA(WrenVM* vm)
    {
        float x1 = (float)wrenGetSlotDouble(vm, 1);
        float y1 = (float)wrenGetSlotDouble(vm, 2);
        float z1 = (float)wrenGetSlotDouble(vm, 3);
        float x2 = (float)wrenGetSlotDouble(vm, 4);
        float y2 = (float)wrenGetSlotDouble(vm, 5);
        float z2 = (float)wrenGetSlotDouble(vm, 6);
        float width = (float)wrenGetSlotDouble(vm, 7);

        Any res = NETWORK::NETWORK_ADD_ENTITY_ANGLED_AREA(x1, y1, z1, x2, y2, z2, width);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_ADD_CLIENT_ENTITY_AREA(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);
        float p2 = (float)wrenGetSlotDouble(vm, 3);
        float p3 = (float)wrenGetSlotDouble(vm, 4);
        float p4 = (float)wrenGetSlotDouble(vm, 5);
        float p5 = (float)wrenGetSlotDouble(vm, 6);

        Any res = NETWORK::NETWORK_ADD_CLIENT_ENTITY_AREA(p0, p1, p2, p3, p4, p5);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_ADD_CLIENT_ENTITY_ANGLED_AREA(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);
        Any p5 = (Any)wrenGetSlotDouble(vm, 6);
        Any p6 = (Any)wrenGetSlotDouble(vm, 7);

        Any res = NETWORK::NETWORK_ADD_CLIENT_ENTITY_ANGLED_AREA(p0, p1, p2, p3, p4, p5, p6);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_REMOVE_ENTITY_AREA(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::NETWORK_REMOVE_ENTITY_AREA(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_ENTITY_AREA_DOES_EXIST(WrenVM* vm)
    {
        int areaHandle = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::NETWORK_ENTITY_AREA_DOES_EXIST(areaHandle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_ENTITY_AREA_HAVE_ALL_REPLIED(WrenVM* vm)
    {
        int areaHandle = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::NETWORK_ENTITY_AREA_HAVE_ALL_REPLIED(areaHandle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_ENTITY_AREA_IS_OCCUPIED(WrenVM* vm)
    {
        int areaHandle = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::NETWORK_ENTITY_AREA_IS_OCCUPIED(areaHandle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_USE_HIGH_PRECISION_BLENDING(WrenVM* vm)
    {
        int netID = (int)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        NETWORK::NETWORK_USE_HIGH_PRECISION_BLENDING(netID, toggle);
    }

    static void WREN_NETWORK_NETWORK_SET_CUSTOM_ARENA_BALL_PARAMS(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        NETWORK::NETWORK_SET_CUSTOM_ARENA_BALL_PARAMS(p0);
    }

    static void WREN_NETWORK_NETWORK_ENTITY_USE_HIGH_PRECISION_ROTATION(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        NETWORK::NETWORK_ENTITY_USE_HIGH_PRECISION_ROTATION(p0, p1);
    }

    static void WREN_NETWORK_NETWORK_REQUEST_CLOUD_BACKGROUND_SCRIPTS(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_REQUEST_CLOUD_BACKGROUND_SCRIPTS();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_IS_CLOUD_BACKGROUND_SCRIPT_REQUEST_PENDING(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_IS_CLOUD_BACKGROUND_SCRIPT_REQUEST_PENDING();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_REQUEST_CLOUD_TUNABLES(WrenVM* vm)
    {

        NETWORK::NETWORK_REQUEST_CLOUD_TUNABLES();
    }

    static void WREN_NETWORK_NETWORK_IS_TUNABLE_CLOUD_REQUEST_PENDING(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_IS_TUNABLE_CLOUD_REQUEST_PENDING();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_GET_TUNABLE_CLOUD_CRC(WrenVM* vm)
    {

        int res = NETWORK::NETWORK_GET_TUNABLE_CLOUD_CRC();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_DOES_TUNABLE_EXIST(WrenVM* vm)
    {
        const char* tunableContext = wrenGetSlotString(vm, 1);
        const char* tunableName = wrenGetSlotString(vm, 2);

        BOOL res = NETWORK::NETWORK_DOES_TUNABLE_EXIST(tunableContext, tunableName);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_ACCESS_TUNABLE_INT(WrenVM* vm)
    {
        const char* tunableContext = wrenGetSlotString(vm, 1);
        const char* tunableName = wrenGetSlotString(vm, 2);
        int value;

        BOOL res = NETWORK::NETWORK_ACCESS_TUNABLE_INT(tunableContext, tunableName, &value);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, value);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_ACCESS_TUNABLE_FLOAT(WrenVM* vm)
    {
        const char* tunableContext = wrenGetSlotString(vm, 1);
        const char* tunableName = wrenGetSlotString(vm, 2);
        float value;

        BOOL res = NETWORK::NETWORK_ACCESS_TUNABLE_FLOAT(tunableContext, tunableName, &value);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, value);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_ACCESS_TUNABLE_BOOL(WrenVM* vm)
    {
        const char* tunableContext = wrenGetSlotString(vm, 1);
        const char* tunableName = wrenGetSlotString(vm, 2);

        BOOL res = NETWORK::NETWORK_ACCESS_TUNABLE_BOOL(tunableContext, tunableName);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_DOES_TUNABLE_EXIST_HASH(WrenVM* vm)
    {
        Hash tunableContext = (Hash)wrenGetSlotDouble(vm, 1);
        Hash tunableName = (Hash)wrenGetSlotDouble(vm, 2);

        BOOL res = NETWORK::NETWORK_DOES_TUNABLE_EXIST_HASH(tunableContext, tunableName);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_ACCESS_TUNABLE_MODIFICATION_DETECTION_CLEAR(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_ACCESS_TUNABLE_MODIFICATION_DETECTION_CLEAR();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_ACCESS_TUNABLE_INT_HASH(WrenVM* vm)
    {
        Hash tunableContext = (Hash)wrenGetSlotDouble(vm, 1);
        Hash tunableName = (Hash)wrenGetSlotDouble(vm, 2);
        int value;

        BOOL res = NETWORK::NETWORK_ACCESS_TUNABLE_INT_HASH(tunableContext, tunableName, &value);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, value);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_ACCESS_TUNABLE_INT_MODIFICATION_DETECTION_REGISTRATION_HASH(WrenVM* vm)
    {
        Hash contextHash = (Hash)wrenGetSlotDouble(vm, 1);
        Hash nameHash = (Hash)wrenGetSlotDouble(vm, 2);
        int value;

        BOOL res = NETWORK::NETWORK_ACCESS_TUNABLE_INT_MODIFICATION_DETECTION_REGISTRATION_HASH(contextHash, nameHash, &value);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, value);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_ACCESS_TUNABLE_FLOAT_HASH(WrenVM* vm)
    {
        Hash tunableContext = (Hash)wrenGetSlotDouble(vm, 1);
        Hash tunableName = (Hash)wrenGetSlotDouble(vm, 2);
        float value;

        BOOL res = NETWORK::NETWORK_ACCESS_TUNABLE_FLOAT_HASH(tunableContext, tunableName, &value);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, value);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_ACCESS_TUNABLE_FLOAT_MODIFICATION_DETECTION_REGISTRATION_HASH(WrenVM* vm)
    {
        Hash contextHash = (Hash)wrenGetSlotDouble(vm, 1);
        Hash nameHash = (Hash)wrenGetSlotDouble(vm, 2);
        float value;

        BOOL res = NETWORK::NETWORK_ACCESS_TUNABLE_FLOAT_MODIFICATION_DETECTION_REGISTRATION_HASH(contextHash, nameHash, &value);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, value);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_ACCESS_TUNABLE_BOOL_HASH(WrenVM* vm)
    {
        Hash tunableContext = (Hash)wrenGetSlotDouble(vm, 1);
        Hash tunableName = (Hash)wrenGetSlotDouble(vm, 2);

        BOOL res = NETWORK::NETWORK_ACCESS_TUNABLE_BOOL_HASH(tunableContext, tunableName);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_ACCESS_TUNABLE_BOOL_MODIFICATION_DETECTION_REGISTRATION_HASH(WrenVM* vm)
    {
        Hash contextHash = (Hash)wrenGetSlotDouble(vm, 1);
        Hash nameHash = (Hash)wrenGetSlotDouble(vm, 2);
        BOOL value;

        BOOL res = NETWORK::NETWORK_ACCESS_TUNABLE_BOOL_MODIFICATION_DETECTION_REGISTRATION_HASH(contextHash, nameHash, &value);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotBool(vm, 2, (bool)value);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_TRY_ACCESS_TUNABLE_BOOL_HASH(WrenVM* vm)
    {
        Hash tunableContext = (Hash)wrenGetSlotDouble(vm, 1);
        Hash tunableName = (Hash)wrenGetSlotDouble(vm, 2);
        BOOL defaultValue = (BOOL)wrenGetSlotBool(vm, 3);

        BOOL res = NETWORK::NETWORK_TRY_ACCESS_TUNABLE_BOOL_HASH(tunableContext, tunableName, defaultValue);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_GET_CONTENT_MODIFIER_LIST_ID(WrenVM* vm)
    {
        Hash contentHash = (Hash)wrenGetSlotDouble(vm, 1);

        int res = NETWORK::NETWORK_GET_CONTENT_MODIFIER_LIST_ID(contentHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_GET_BONE_ID_OF_FATAL_HIT(WrenVM* vm)
    {

        int res = NETWORK::NETWORK_GET_BONE_ID_OF_FATAL_HIT();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_RESET_BODY_TRACKER(WrenVM* vm)
    {

        NETWORK::NETWORK_RESET_BODY_TRACKER();
    }

    static void WREN_NETWORK_NETWORK_GET_NUMBER_BODY_TRACKER_HITS(WrenVM* vm)
    {

        int res = NETWORK::NETWORK_GET_NUMBER_BODY_TRACKER_HITS();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_HAS_BONE_BEEN_HIT_BY_KILLER(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::NETWORK_HAS_BONE_BEEN_HIT_BY_KILLER(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_SET_ATTRIBUTE_DAMAGE_TO_PLAYER(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Player player = (Player)wrenGetSlotDouble(vm, 2);

        BOOL res = NETWORK::NETWORK_SET_ATTRIBUTE_DAMAGE_TO_PLAYER(ped, player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_TRIGGER_DAMAGE_EVENT_FOR_ZERO_DAMAGE(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        NETWORK::NETWORK_TRIGGER_DAMAGE_EVENT_FOR_ZERO_DAMAGE(entity, toggle);
    }

    static void WREN_NETWORK_NETWORK_TRIGGER_DAMAGE_EVENT_FOR_ZERO_WEAPON_HASH(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        NETWORK::NETWORK_TRIGGER_DAMAGE_EVENT_FOR_ZERO_WEAPON_HASH(entity, toggle);
    }

    static void WREN_NETWORK_NETWORK_SET_NO_LONGER_NEEDED(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        NETWORK::NETWORK_SET_NO_LONGER_NEEDED(p0, p1);
    }

    static void WREN_NETWORK_NETWORK_EXPLODE_VEHICLE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL isAudible = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL isInvisible = (BOOL)wrenGetSlotBool(vm, 3);
        int netId = (int)wrenGetSlotDouble(vm, 4);

        NETWORK::NETWORK_EXPLODE_VEHICLE(vehicle, isAudible, isInvisible, netId);
    }

    static void WREN_NETWORK_NETWORK_EXPLODE_HELI(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL isAudible = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL isInvisible = (BOOL)wrenGetSlotBool(vm, 3);
        int netId = (int)wrenGetSlotDouble(vm, 4);

        NETWORK::NETWORK_EXPLODE_HELI(vehicle, isAudible, isInvisible, netId);
    }

    static void WREN_NETWORK_NETWORK_USE_LOGARITHMIC_BLENDING_THIS_FRAME(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        NETWORK::NETWORK_USE_LOGARITHMIC_BLENDING_THIS_FRAME(entity);
    }

    static void WREN_NETWORK_NETWORK_OVERRIDE_COORDS_AND_HEADING(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);
        float heading = (float)wrenGetSlotDouble(vm, 5);

        NETWORK::NETWORK_OVERRIDE_COORDS_AND_HEADING(entity, x, y, z, heading);
    }

    static void WREN_NETWORK_NETWORK_ENABLE_EXTRA_VEHICLE_ORIENTATION_BLEND_CHECKS(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        NETWORK::NETWORK_ENABLE_EXTRA_VEHICLE_ORIENTATION_BLEND_CHECKS(p0, p1);
    }

    static void WREN_NETWORK_NETWORK_DISABLE_PROXIMITY_MIGRATION(WrenVM* vm)
    {
        int netID = (int)wrenGetSlotDouble(vm, 1);

        NETWORK::NETWORK_DISABLE_PROXIMITY_MIGRATION(netID);
    }

    static void WREN_NETWORK_NETWORK_SET_PROPERTY_ID(WrenVM* vm)
    {
        int id = (int)wrenGetSlotDouble(vm, 1);

        NETWORK::NETWORK_SET_PROPERTY_ID(id);
    }

    static void WREN_NETWORK_NETWORK_CLEAR_PROPERTY_ID(WrenVM* vm)
    {

        NETWORK::NETWORK_CLEAR_PROPERTY_ID();
    }

    static void WREN_NETWORK_NETWORK_SET_PLAYER_MENTAL_STATE(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);

        NETWORK::NETWORK_SET_PLAYER_MENTAL_STATE(p0);
    }

    static void WREN_NETWORK_NETWORK_SET_MINIMUM_RANK_FOR_MISSION(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        NETWORK::NETWORK_SET_MINIMUM_RANK_FOR_MISSION(p0);
    }

    static void WREN_NETWORK_NETWORK_CACHE_LOCAL_PLAYER_HEAD_BLEND_DATA(WrenVM* vm)
    {

        NETWORK::NETWORK_CACHE_LOCAL_PLAYER_HEAD_BLEND_DATA();
    }

    static void WREN_NETWORK_NETWORK_HAS_CACHED_PLAYER_HEAD_BLEND_DATA(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::NETWORK_HAS_CACHED_PLAYER_HEAD_BLEND_DATA(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_APPLY_CACHED_PLAYER_HEAD_BLEND_DATA(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Player player = (Player)wrenGetSlotDouble(vm, 2);

        BOOL res = NETWORK::NETWORK_APPLY_CACHED_PLAYER_HEAD_BLEND_DATA(ped, player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_GET_NUM_COMMERCE_ITEMS(WrenVM* vm)
    {

        int res = NETWORK::GET_NUM_COMMERCE_ITEMS();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_IS_COMMERCE_DATA_VALID(WrenVM* vm)
    {

        BOOL res = NETWORK::IS_COMMERCE_DATA_VALID();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_TRIGGER_COMMERCE_DATA_FETCH(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        NETWORK::TRIGGER_COMMERCE_DATA_FETCH(p0);
    }

    static void WREN_NETWORK_IS_COMMERCE_DATA_FETCH_IN_PROGRESS(WrenVM* vm)
    {

        BOOL res = NETWORK::IS_COMMERCE_DATA_FETCH_IN_PROGRESS();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_GET_COMMERCE_ITEM_ID(WrenVM* vm)
    {
        int index = (int)wrenGetSlotDouble(vm, 1);

        const char* res = NETWORK::GET_COMMERCE_ITEM_ID(index);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotString(vm, 0, res);
    }

    static void WREN_NETWORK_GET_COMMERCE_ITEM_NAME(WrenVM* vm)
    {
        int index = (int)wrenGetSlotDouble(vm, 1);

        const char* res = NETWORK::GET_COMMERCE_ITEM_NAME(index);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotString(vm, 0, res);
    }

    static void WREN_NETWORK_GET_COMMERCE_PRODUCT_PRICE(WrenVM* vm)
    {
        int index = (int)wrenGetSlotDouble(vm, 1);

        const char* res = NETWORK::GET_COMMERCE_PRODUCT_PRICE(index);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotString(vm, 0, res);
    }

    static void WREN_NETWORK_GET_COMMERCE_ITEM_NUM_CATS(WrenVM* vm)
    {
        int index = (int)wrenGetSlotDouble(vm, 1);

        int res = NETWORK::GET_COMMERCE_ITEM_NUM_CATS(index);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_GET_COMMERCE_ITEM_CAT(WrenVM* vm)
    {
        int index = (int)wrenGetSlotDouble(vm, 1);
        int index2 = (int)wrenGetSlotDouble(vm, 2);

        const char* res = NETWORK::GET_COMMERCE_ITEM_CAT(index, index2);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotString(vm, 0, res);
    }

    static void WREN_NETWORK_OPEN_COMMERCE_STORE(WrenVM* vm)
    {
        const char* p0 = wrenGetSlotString(vm, 1);
        const char* p1 = wrenGetSlotString(vm, 2);
        int p2 = (int)wrenGetSlotDouble(vm, 3);

        NETWORK::OPEN_COMMERCE_STORE(p0, p1, p2);
    }

    static void WREN_NETWORK_IS_COMMERCE_STORE_OPEN(WrenVM* vm)
    {

        BOOL res = NETWORK::IS_COMMERCE_STORE_OPEN();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_SET_STORE_ENABLED(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        NETWORK::SET_STORE_ENABLED(toggle);
    }

    static void WREN_NETWORK_REQUEST_COMMERCE_ITEM_IMAGE(WrenVM* vm)
    {
        int index = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::REQUEST_COMMERCE_ITEM_IMAGE(index);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_RELEASE_ALL_COMMERCE_ITEM_IMAGES(WrenVM* vm)
    {

        NETWORK::RELEASE_ALL_COMMERCE_ITEM_IMAGES();
    }

    static void WREN_NETWORK_GET_COMMERCE_ITEM_TEXTURENAME(WrenVM* vm)
    {
        int index = (int)wrenGetSlotDouble(vm, 1);

        const char* res = NETWORK::GET_COMMERCE_ITEM_TEXTURENAME(index);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotString(vm, 0, res);
    }

    static void WREN_NETWORK_IS_STORE_AVAILABLE_TO_USER(WrenVM* vm)
    {

        BOOL res = NETWORK::IS_STORE_AVAILABLE_TO_USER();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_DELAY_MP_STORE_OPEN(WrenVM* vm)
    {

        NETWORK::DELAY_MP_STORE_OPEN();
    }

    static void WREN_NETWORK_RESET_STORE_NETWORK_GAME_TRACKING(WrenVM* vm)
    {

        NETWORK::RESET_STORE_NETWORK_GAME_TRACKING();
    }

    static void WREN_NETWORK_IS_USER_OLD_ENOUGH_TO_ACCESS_STORE(WrenVM* vm)
    {

        BOOL res = NETWORK::IS_USER_OLD_ENOUGH_TO_ACCESS_STORE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_SET_LAST_VIEWED_SHOP_ITEM(WrenVM* vm)
    {
        Hash p0 = (Hash)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);
        Hash p2 = (Hash)wrenGetSlotDouble(vm, 3);

        NETWORK::SET_LAST_VIEWED_SHOP_ITEM(p0, p1, p2);
    }

    static void WREN_NETWORK_GET_USER_PREMIUM_ACCESS(WrenVM* vm)
    {

        int res = NETWORK::GET_USER_PREMIUM_ACCESS();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_GET_USER_STARTER_ACCESS(WrenVM* vm)
    {

        int res = NETWORK::GET_USER_STARTER_ACCESS();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_CLOUD_DELETE_MEMBER_FILE(WrenVM* vm)
    {
        const char* p0 = wrenGetSlotString(vm, 1);

        int res = NETWORK::CLOUD_DELETE_MEMBER_FILE(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_CLOUD_HAS_REQUEST_COMPLETED(WrenVM* vm)
    {
        int handle = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::CLOUD_HAS_REQUEST_COMPLETED(handle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_CLOUD_DID_REQUEST_SUCCEED(WrenVM* vm)
    {
        int handle = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::CLOUD_DID_REQUEST_SUCCEED(handle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_CLOUD_CHECK_AVAILABILITY(WrenVM* vm)
    {

        NETWORK::CLOUD_CHECK_AVAILABILITY();
    }

    static void WREN_NETWORK_CLOUD_IS_CHECKING_AVAILABILITY(WrenVM* vm)
    {

        BOOL res = NETWORK::CLOUD_IS_CHECKING_AVAILABILITY();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_CLOUD_GET_AVAILABILITY_CHECK_RESULT(WrenVM* vm)
    {

        BOOL res = NETWORK::CLOUD_GET_AVAILABILITY_CHECK_RESULT();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_GET_CONTENT_TO_LOAD_TYPE(WrenVM* vm)
    {

        Any res = NETWORK::GET_CONTENT_TO_LOAD_TYPE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_GET_IS_LAUNCH_FROM_LIVE_AREA(WrenVM* vm)
    {

        Any res = NETWORK::GET_IS_LAUNCH_FROM_LIVE_AREA();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_GET_IS_LIVE_AREA_LAUNCH_WITH_CONTENT(WrenVM* vm)
    {

        Any res = NETWORK::GET_IS_LIVE_AREA_LAUNCH_WITH_CONTENT();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_CLEAR_SERVICE_EVENT_ARGUMENTS(WrenVM* vm)
    {

        NETWORK::CLEAR_SERVICE_EVENT_ARGUMENTS();
    }

    static void WREN_NETWORK_UGC_COPY_CONTENT(WrenVM* vm)
    {
        Any p0;
        Any p1;

        BOOL res = NETWORK::UGC_COPY_CONTENT(&p0, &p1);

        wrenEnsureSlots(vm, 6);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p0);
        wrenInsertInList(vm, 0, 1, 2);

        wrenSetSlotDouble(vm, 3, p1);
        wrenInsertInList(vm, 0, 2, 3);

    }

    static void WREN_NETWORK_UGC_IS_CREATING(WrenVM* vm)
    {

        BOOL res = NETWORK::UGC_IS_CREATING();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_UGC_HAS_CREATE_FINISHED(WrenVM* vm)
    {

        BOOL res = NETWORK::UGC_HAS_CREATE_FINISHED();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_UGC_DID_CREATE_SUCCEED(WrenVM* vm)
    {

        Any res = NETWORK::UGC_DID_CREATE_SUCCEED();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_UGC_GET_CREATE_RESULT(WrenVM* vm)
    {

        Any res = NETWORK::UGC_GET_CREATE_RESULT();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_UGC_GET_CREATE_CONTENT_ID(WrenVM* vm)
    {

        Any res = NETWORK::UGC_GET_CREATE_CONTENT_ID();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_UGC_CLEAR_CREATE_RESULT(WrenVM* vm)
    {

        NETWORK::UGC_CLEAR_CREATE_RESULT();
    }

    static void WREN_NETWORK_UGC_QUERY_MY_CONTENT(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2;
        Any p3 = (Any)wrenGetSlotDouble(vm, 3);
        Any p4 = (Any)wrenGetSlotDouble(vm, 4);
        Any p5 = (Any)wrenGetSlotDouble(vm, 5);

        BOOL res = NETWORK::UGC_QUERY_MY_CONTENT(p0, p1, &p2, p3, p4, p5);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p2);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_UGC_QUERY_BY_CATEGORY(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        const char* p3 = wrenGetSlotString(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);
        BOOL p5 = (BOOL)wrenGetSlotBool(vm, 6);

        BOOL res = NETWORK::UGC_QUERY_BY_CATEGORY(p0, p1, p2, p3, p4, p5);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_UGC_QUERY_BY_CONTENT_ID(WrenVM* vm)
    {
        const char* contentId = wrenGetSlotString(vm, 1);
        BOOL latestVersion = (BOOL)wrenGetSlotBool(vm, 2);
        const char* contentTypeName = wrenGetSlotString(vm, 3);

        BOOL res = NETWORK::UGC_QUERY_BY_CONTENT_ID(contentId, latestVersion, contentTypeName);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_UGC_QUERY_BY_CONTENT_IDS(WrenVM* vm)
    {
        Any data;
        int count = (int)wrenGetSlotDouble(vm, 1);
        BOOL latestVersion = (BOOL)wrenGetSlotBool(vm, 2);
        const char* contentTypeName = wrenGetSlotString(vm, 3);

        BOOL res = NETWORK::UGC_QUERY_BY_CONTENT_IDS(&data, count, latestVersion, contentTypeName);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, data);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_UGC_QUERY_MOST_RECENTLY_CREATED_CONTENT(WrenVM* vm)
    {
        int offset = (int)wrenGetSlotDouble(vm, 1);
        int count = (int)wrenGetSlotDouble(vm, 2);
        const char* contentTypeName = wrenGetSlotString(vm, 3);
        int p3 = (int)wrenGetSlotDouble(vm, 4);

        BOOL res = NETWORK::UGC_QUERY_MOST_RECENTLY_CREATED_CONTENT(offset, count, contentTypeName, p3);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_UGC_GET_BOOKMARKED_CONTENT(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        const char* p2 = wrenGetSlotString(vm, 3);
        Any p3;

        BOOL res = NETWORK::UGC_GET_BOOKMARKED_CONTENT(p0, p1, p2, &p3);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p3);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_UGC_GET_MY_CONTENT(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        const char* p2 = wrenGetSlotString(vm, 3);
        Any p3;

        BOOL res = NETWORK::UGC_GET_MY_CONTENT(p0, p1, p2, &p3);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p3);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_UGC_GET_FRIEND_CONTENT(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        const char* p2 = wrenGetSlotString(vm, 3);
        Any p3;

        BOOL res = NETWORK::UGC_GET_FRIEND_CONTENT(p0, p1, p2, &p3);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p3);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_UGC_GET_CREW_CONTENT(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        const char* p3 = wrenGetSlotString(vm, 4);
        Any p4;

        BOOL res = NETWORK::UGC_GET_CREW_CONTENT(p0, p1, p2, p3, &p4);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p4);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_UGC_GET_GET_BY_CATEGORY(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        const char* p3 = wrenGetSlotString(vm, 4);
        Any p4;

        BOOL res = NETWORK::UGC_GET_GET_BY_CATEGORY(p0, p1, p2, p3, &p4);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p4);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_UGC_GET_GET_BY_CONTENT_ID(WrenVM* vm)
    {
        const char* contentId = wrenGetSlotString(vm, 1);
        const char* contentTypeName = wrenGetSlotString(vm, 2);

        BOOL res = NETWORK::UGC_GET_GET_BY_CONTENT_ID(contentId, contentTypeName);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_UGC_GET_GET_BY_CONTENT_IDS(WrenVM* vm)
    {
        Any data;
        int dataCount = (int)wrenGetSlotDouble(vm, 1);
        const char* contentTypeName = wrenGetSlotString(vm, 2);

        BOOL res = NETWORK::UGC_GET_GET_BY_CONTENT_IDS(&data, dataCount, contentTypeName);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, data);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_UGC_GET_MOST_RECENTLY_CREATED_CONTENT(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2;
        Any p3;

        BOOL res = NETWORK::UGC_GET_MOST_RECENTLY_CREATED_CONTENT(p0, p1, &p2, &p3);

        wrenEnsureSlots(vm, 6);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p2);
        wrenInsertInList(vm, 0, 1, 2);

        wrenSetSlotDouble(vm, 3, p3);
        wrenInsertInList(vm, 0, 2, 3);

    }

    static void WREN_NETWORK_UGC_GET_MOST_RECENTLY_PLAYED_CONTENT(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2;
        Any p3;

        BOOL res = NETWORK::UGC_GET_MOST_RECENTLY_PLAYED_CONTENT(p0, p1, &p2, &p3);

        wrenEnsureSlots(vm, 6);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p2);
        wrenInsertInList(vm, 0, 1, 2);

        wrenSetSlotDouble(vm, 3, p3);
        wrenInsertInList(vm, 0, 2, 3);

    }

    static void WREN_NETWORK_UGC_GET_TOP_RATED_CONTENT(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2;
        Any p3;

        BOOL res = NETWORK::UGC_GET_TOP_RATED_CONTENT(p0, p1, &p2, &p3);

        wrenEnsureSlots(vm, 6);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p2);
        wrenInsertInList(vm, 0, 1, 2);

        wrenSetSlotDouble(vm, 3, p3);
        wrenInsertInList(vm, 0, 2, 3);

    }

    static void WREN_NETWORK_UGC_CANCEL_QUERY(WrenVM* vm)
    {

        NETWORK::UGC_CANCEL_QUERY();
    }

    static void WREN_NETWORK_UGC_IS_GETTING(WrenVM* vm)
    {

        BOOL res = NETWORK::UGC_IS_GETTING();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_UGC_HAS_GET_FINISHED(WrenVM* vm)
    {

        BOOL res = NETWORK::UGC_HAS_GET_FINISHED();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_UGC_DID_GET_SUCCEED(WrenVM* vm)
    {

        Any res = NETWORK::UGC_DID_GET_SUCCEED();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_UGC_WAS_QUERY_FORCE_CANCELLED(WrenVM* vm)
    {

        Any res = NETWORK::UGC_WAS_QUERY_FORCE_CANCELLED();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_UGC_GET_QUERY_RESULT(WrenVM* vm)
    {

        Any res = NETWORK::UGC_GET_QUERY_RESULT();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_UGC_GET_CONTENT_NUM(WrenVM* vm)
    {

        Any res = NETWORK::UGC_GET_CONTENT_NUM();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_UGC_GET_CONTENT_TOTAL(WrenVM* vm)
    {

        Any res = NETWORK::UGC_GET_CONTENT_TOTAL();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_UGC_GET_CONTENT_HASH(WrenVM* vm)
    {

        Hash res = NETWORK::UGC_GET_CONTENT_HASH();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_UGC_CLEAR_QUERY_RESULTS(WrenVM* vm)
    {

        NETWORK::UGC_CLEAR_QUERY_RESULTS();
    }

    static void WREN_NETWORK_UGC_GET_CONTENT_USER_ID(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);

        const char* res = NETWORK::UGC_GET_CONTENT_USER_ID(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotString(vm, 0, res);
    }

    static void WREN_NETWORK_UGC_GET_CONTENT_CREATOR_GAMER_HANDLE(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);
        Any p1;

        BOOL res = NETWORK::UGC_GET_CONTENT_CREATOR_GAMER_HANDLE(p0, &p1);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p1);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_UGC_GET_CONTENT_CREATED_BY_LOCAL_PLAYER(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::UGC_GET_CONTENT_CREATED_BY_LOCAL_PLAYER(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_UGC_GET_CONTENT_USER_NAME(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        Any res = NETWORK::UGC_GET_CONTENT_USER_NAME(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_UGC_GET_CONTENT_IS_USING_SC_NICKNAME(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::UGC_GET_CONTENT_IS_USING_SC_NICKNAME(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_UGC_GET_CONTENT_CATEGORY(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);

        int res = NETWORK::UGC_GET_CONTENT_CATEGORY(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_UGC_GET_CONTENT_ID(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);

        const char* res = NETWORK::UGC_GET_CONTENT_ID(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotString(vm, 0, res);
    }

    static void WREN_NETWORK_UGC_GET_ROOT_CONTENT_ID(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);

        const char* res = NETWORK::UGC_GET_ROOT_CONTENT_ID(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotString(vm, 0, res);
    }

    static void WREN_NETWORK_UGC_GET_CONTENT_NAME(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        Any res = NETWORK::UGC_GET_CONTENT_NAME(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_UGC_GET_CONTENT_DESCRIPTION_HASH(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        int res = NETWORK::UGC_GET_CONTENT_DESCRIPTION_HASH(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_UGC_GET_CONTENT_PATH(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);

        const char* res = NETWORK::UGC_GET_CONTENT_PATH(p0, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotString(vm, 0, res);
    }

    static void WREN_NETWORK_UGC_GET_CONTENT_UPDATED_DATE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1;

        NETWORK::UGC_GET_CONTENT_UPDATED_DATE(p0, &p1);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_NETWORK_UGC_GET_CONTENT_FILE_VERSION(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        Any res = NETWORK::UGC_GET_CONTENT_FILE_VERSION(p0, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_UGC_GET_CONTENT_HAS_LO_RES_PHOTO(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::UGC_GET_CONTENT_HAS_LO_RES_PHOTO(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_UGC_GET_CONTENT_HAS_HI_RES_PHOTO(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::UGC_GET_CONTENT_HAS_HI_RES_PHOTO(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_UGC_GET_CONTENT_LANGUAGE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        Any res = NETWORK::UGC_GET_CONTENT_LANGUAGE(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_UGC_GET_CONTENT_IS_PUBLISHED(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::UGC_GET_CONTENT_IS_PUBLISHED(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_UGC_GET_CONTENT_IS_VERIFIED(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::UGC_GET_CONTENT_IS_VERIFIED(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_UGC_GET_CONTENT_RATING(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        Any res = NETWORK::UGC_GET_CONTENT_RATING(p0, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_UGC_GET_CONTENT_RATING_COUNT(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        Any res = NETWORK::UGC_GET_CONTENT_RATING_COUNT(p0, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_UGC_GET_CONTENT_RATING_POSITIVE_COUNT(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        Any res = NETWORK::UGC_GET_CONTENT_RATING_POSITIVE_COUNT(p0, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_UGC_GET_CONTENT_RATING_NEGATIVE_COUNT(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        Any res = NETWORK::UGC_GET_CONTENT_RATING_NEGATIVE_COUNT(p0, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_UGC_GET_CONTENT_HAS_PLAYER_RECORD(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::UGC_GET_CONTENT_HAS_PLAYER_RECORD(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_UGC_GET_CONTENT_HAS_PLAYER_BOOKMARKED(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::UGC_GET_CONTENT_HAS_PLAYER_BOOKMARKED(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_UGC_REQUEST_CONTENT_DATA_FROM_INDEX(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);

        int res = NETWORK::UGC_REQUEST_CONTENT_DATA_FROM_INDEX(p0, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_UGC_REQUEST_CONTENT_DATA_FROM_PARAMS(WrenVM* vm)
    {
        const char* contentTypeName = wrenGetSlotString(vm, 1);
        const char* contentId = wrenGetSlotString(vm, 2);
        int p2 = (int)wrenGetSlotDouble(vm, 3);
        int p3 = (int)wrenGetSlotDouble(vm, 4);
        int p4 = (int)wrenGetSlotDouble(vm, 5);

        int res = NETWORK::UGC_REQUEST_CONTENT_DATA_FROM_PARAMS(contentTypeName, contentId, p2, p3, p4);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_UGC_REQUEST_CACHED_DESCRIPTION(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);

        int res = NETWORK::UGC_REQUEST_CACHED_DESCRIPTION(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_UGC_IS_DESCRIPTION_REQUEST_IN_PROGRESS(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::UGC_IS_DESCRIPTION_REQUEST_IN_PROGRESS(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_UGC_HAS_DESCRIPTION_REQUEST_FINISHED(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::UGC_HAS_DESCRIPTION_REQUEST_FINISHED(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_UGC_DID_DESCRIPTION_REQUEST_SUCCEED(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::UGC_DID_DESCRIPTION_REQUEST_SUCCEED(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_UGC_GET_CACHED_DESCRIPTION(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        Any res = NETWORK::UGC_GET_CACHED_DESCRIPTION(p0, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_UGC_RELEASE_CACHED_DESCRIPTION(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::UGC_RELEASE_CACHED_DESCRIPTION(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_UGC_RELEASE_ALL_CACHED_DESCRIPTIONS(WrenVM* vm)
    {

        NETWORK::UGC_RELEASE_ALL_CACHED_DESCRIPTIONS();
    }

    static void WREN_NETWORK_UGC_PUBLISH(WrenVM* vm)
    {
        const char* contentId = wrenGetSlotString(vm, 1);
        const char* baseContentId = wrenGetSlotString(vm, 2);
        const char* contentTypeName = wrenGetSlotString(vm, 3);

        BOOL res = NETWORK::UGC_PUBLISH(contentId, baseContentId, contentTypeName);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_UGC_SET_BOOKMARKED(WrenVM* vm)
    {
        const char* contentId = wrenGetSlotString(vm, 1);
        BOOL bookmarked = (BOOL)wrenGetSlotBool(vm, 2);
        const char* contentTypeName = wrenGetSlotString(vm, 3);

        BOOL res = NETWORK::UGC_SET_BOOKMARKED(contentId, bookmarked, contentTypeName);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_UGC_SET_DELETED(WrenVM* vm)
    {
        Any p0;
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 1);
        const char* p2 = wrenGetSlotString(vm, 2);

        BOOL res = NETWORK::UGC_SET_DELETED(&p0, p1, p2);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p0);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_UGC_IS_MODIFYING(WrenVM* vm)
    {

        BOOL res = NETWORK::UGC_IS_MODIFYING();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_UGC_HAS_MODIFY_FINISHED(WrenVM* vm)
    {

        BOOL res = NETWORK::UGC_HAS_MODIFY_FINISHED();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_UGC_DID_MODIFY_SUCCEED(WrenVM* vm)
    {

        BOOL res = NETWORK::UGC_DID_MODIFY_SUCCEED();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_UGC_GET_MODIFY_RESULT(WrenVM* vm)
    {

        Any res = NETWORK::UGC_GET_MODIFY_RESULT();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_UGC_CLEAR_MODIFY_RESULT(WrenVM* vm)
    {

        NETWORK::UGC_CLEAR_MODIFY_RESULT();
    }

    static void WREN_NETWORK_UGC_GET_CREATORS_BY_USER_ID(WrenVM* vm)
    {
        Any p0;
        Any p1;

        BOOL res = NETWORK::UGC_GET_CREATORS_BY_USER_ID(&p0, &p1);

        wrenEnsureSlots(vm, 6);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p0);
        wrenInsertInList(vm, 0, 1, 2);

        wrenSetSlotDouble(vm, 3, p1);
        wrenInsertInList(vm, 0, 2, 3);

    }

    static void WREN_NETWORK_UGC_HAS_QUERY_CREATORS_FINISHED(WrenVM* vm)
    {

        Any res = NETWORK::UGC_HAS_QUERY_CREATORS_FINISHED();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_UGC_DID_QUERY_CREATORS_SUCCEED(WrenVM* vm)
    {

        Any res = NETWORK::UGC_DID_QUERY_CREATORS_SUCCEED();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_UGC_GET_CREATOR_NUM(WrenVM* vm)
    {

        Any res = NETWORK::UGC_GET_CREATOR_NUM();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_UGC_LOAD_OFFLINE_QUERY(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::UGC_LOAD_OFFLINE_QUERY(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_UGC_CLEAR_OFFLINE_QUERY(WrenVM* vm)
    {

        NETWORK::UGC_CLEAR_OFFLINE_QUERY();
    }

    static void WREN_NETWORK_UGC_SET_QUERY_DATA_FROM_OFFLINE(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        NETWORK::UGC_SET_QUERY_DATA_FROM_OFFLINE(p0);
    }

    static void WREN_NETWORK_UGC_SET_USING_OFFLINE_CONTENT(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        NETWORK::UGC_SET_USING_OFFLINE_CONTENT(p0);
    }

    static void WREN_NETWORK_UGC_IS_LANGUAGE_SUPPORTED(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::UGC_IS_LANGUAGE_SUPPORTED(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_FACEBOOK_POST_COMPLETED_HEIST(WrenVM* vm)
    {
        const char* heistName = wrenGetSlotString(vm, 1);
        int cashEarned = (int)wrenGetSlotDouble(vm, 2);
        int xpEarned = (int)wrenGetSlotDouble(vm, 3);

        BOOL res = NETWORK::FACEBOOK_POST_COMPLETED_HEIST(heistName, cashEarned, xpEarned);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_FACEBOOK_POST_CREATE_CHARACTER(WrenVM* vm)
    {

        BOOL res = NETWORK::FACEBOOK_POST_CREATE_CHARACTER();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_FACEBOOK_POST_COMPLETED_MILESTONE(WrenVM* vm)
    {
        int milestoneId = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::FACEBOOK_POST_COMPLETED_MILESTONE(milestoneId);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_FACEBOOK_HAS_POST_COMPLETED(WrenVM* vm)
    {

        BOOL res = NETWORK::FACEBOOK_HAS_POST_COMPLETED();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_FACEBOOK_DID_POST_SUCCEED(WrenVM* vm)
    {

        BOOL res = NETWORK::FACEBOOK_DID_POST_SUCCEED();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_FACEBOOK_CAN_POST_TO_FACEBOOK(WrenVM* vm)
    {

        BOOL res = NETWORK::FACEBOOK_CAN_POST_TO_FACEBOOK();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_TEXTURE_DOWNLOAD_REQUEST(WrenVM* vm)
    {
        Any gamerHandle;
        const char* filePath = wrenGetSlotString(vm, 1);
        const char* name = wrenGetSlotString(vm, 2);
        BOOL p3 = (BOOL)wrenGetSlotBool(vm, 3);

        int res = NETWORK::TEXTURE_DOWNLOAD_REQUEST(&gamerHandle, filePath, name, p3);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, gamerHandle);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_TITLE_TEXTURE_DOWNLOAD_REQUEST(WrenVM* vm)
    {
        const char* filePath = wrenGetSlotString(vm, 1);
        const char* name = wrenGetSlotString(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        int res = NETWORK::TITLE_TEXTURE_DOWNLOAD_REQUEST(filePath, name, p2);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_UGC_TEXTURE_DOWNLOAD_REQUEST(WrenVM* vm)
    {
        const char* p0 = wrenGetSlotString(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);
        int p2 = (int)wrenGetSlotDouble(vm, 3);
        int p3 = (int)wrenGetSlotDouble(vm, 4);
        const char* p4 = wrenGetSlotString(vm, 5);
        BOOL p5 = (BOOL)wrenGetSlotBool(vm, 6);

        Any res = NETWORK::UGC_TEXTURE_DOWNLOAD_REQUEST(p0, p1, p2, p3, p4, p5);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_TEXTURE_DOWNLOAD_RELEASE(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);

        NETWORK::TEXTURE_DOWNLOAD_RELEASE(p0);
    }

    static void WREN_NETWORK_TEXTURE_DOWNLOAD_HAS_FAILED(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::TEXTURE_DOWNLOAD_HAS_FAILED(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_TEXTURE_DOWNLOAD_GET_NAME(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);

        const char* res = NETWORK::TEXTURE_DOWNLOAD_GET_NAME(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotString(vm, 0, res);
    }

    static void WREN_NETWORK_GET_STATUS_OF_TEXTURE_DOWNLOAD(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);

        int res = NETWORK::GET_STATUS_OF_TEXTURE_DOWNLOAD(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_CHECK_ROS_LINK_WENTDOWN_NOT_NET(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_CHECK_ROS_LINK_WENTDOWN_NOT_NET();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_SHOULD_SHOW_STRICT_NAT_WARNING(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_SHOULD_SHOW_STRICT_NAT_WARNING();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_IS_CABLE_CONNECTED(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_IS_CABLE_CONNECTED();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_HAVE_SCS_PRIVATE_MSG_PRIV(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_HAVE_SCS_PRIVATE_MSG_PRIV();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_HAVE_ROS_SOCIAL_CLUB_PRIV(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_HAVE_ROS_SOCIAL_CLUB_PRIV();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_HAVE_ROS_BANNED_PRIV(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_HAVE_ROS_BANNED_PRIV();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_HAVE_ROS_CREATE_TICKET_PRIV(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_HAVE_ROS_CREATE_TICKET_PRIV();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_HAVE_ROS_MULTIPLAYER_PRIV(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_HAVE_ROS_MULTIPLAYER_PRIV();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_HAVE_ROS_LEADERBOARD_WRITE_PRIV(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_HAVE_ROS_LEADERBOARD_WRITE_PRIV();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_HAS_ROS_PRIVILEGE(WrenVM* vm)
    {
        int index = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::NETWORK_HAS_ROS_PRIVILEGE(index);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_HAS_ROS_PRIVILEGE_END_DATE(WrenVM* vm)
    {
        int privilege = (int)wrenGetSlotDouble(vm, 1);
        int banType;
        Any timeData;

        BOOL res = NETWORK::NETWORK_HAS_ROS_PRIVILEGE_END_DATE(privilege, &banType, &timeData);

        wrenEnsureSlots(vm, 6);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, banType);
        wrenInsertInList(vm, 0, 1, 2);

        wrenSetSlotDouble(vm, 3, timeData);
        wrenInsertInList(vm, 0, 2, 3);

    }

    static void WREN_NETWORK_NETWORK_HAS_ROS_PRIVILEGE_PLAYED_LAST_GEN(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_HAS_ROS_PRIVILEGE_PLAYED_LAST_GEN();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_HAS_ROS_PRIVILEGE_SPECIAL_EDITION_CONTENT(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_HAS_ROS_PRIVILEGE_SPECIAL_EDITION_CONTENT();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_START_COMMUNICATION_PERMISSIONS_CHECK(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        Any res = NETWORK::NETWORK_START_COMMUNICATION_PERMISSIONS_CHECK(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_START_USER_CONTENT_PERMISSIONS_CHECK(WrenVM* vm)
    {
        Any netHandle;

        int res = NETWORK::NETWORK_START_USER_CONTENT_PERMISSIONS_CHECK(&netHandle);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, netHandle);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_NETWORK_NETWORK_SKIP_RADIO_RESET_NEXT_CLOSE(WrenVM* vm)
    {

        NETWORK::NETWORK_SKIP_RADIO_RESET_NEXT_CLOSE();
    }

    static void WREN_NETWORK_NETWORK_SKIP_RADIO_RESET_NEXT_OPEN(WrenVM* vm)
    {

        NETWORK::NETWORK_SKIP_RADIO_RESET_NEXT_OPEN();
    }

    static void WREN_NETWORK_NETWORK_SKIP_RADIO_WARNING(WrenVM* vm)
    {

        BOOL res = NETWORK::NETWORK_SKIP_RADIO_WARNING();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_FORCE_LOCAL_PLAYER_SCAR_SYNC(WrenVM* vm)
    {

        NETWORK::NETWORK_FORCE_LOCAL_PLAYER_SCAR_SYNC();
    }

    static void WREN_NETWORK_NETWORK_DISABLE_LEAVE_REMOTE_PED_BEHIND(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        NETWORK::NETWORK_DISABLE_LEAVE_REMOTE_PED_BEHIND(toggle);
    }

    static void WREN_NETWORK_NETWORK_ALLOW_REMOTE_ATTACHMENT_MODIFICATION(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        NETWORK::NETWORK_ALLOW_REMOTE_ATTACHMENT_MODIFICATION(entity, toggle);
    }

    static void WREN_NETWORK_NETWORK_SHOW_CHAT_RESTRICTION_MSC(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        NETWORK::NETWORK_SHOW_CHAT_RESTRICTION_MSC(player);
    }

    static void WREN_NETWORK_NETWORK_SHOW_PSN_UGC_RESTRICTION(WrenVM* vm)
    {

        NETWORK::NETWORK_SHOW_PSN_UGC_RESTRICTION();
    }

    static void WREN_NETWORK_NETWORK_IS_TITLE_UPDATE_REQUIRED(WrenVM* vm)
    {

        Any res = NETWORK::NETWORK_IS_TITLE_UPDATE_REQUIRED();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_QUIT_MP_TO_DESKTOP(WrenVM* vm)
    {

        NETWORK::NETWORK_QUIT_MP_TO_DESKTOP();
    }

    static void WREN_NETWORK_NETWORK_IS_CONNECTED_VIA_RELAY(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        BOOL res = NETWORK::NETWORK_IS_CONNECTED_VIA_RELAY(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_NETWORK_NETWORK_GET_AVERAGE_LATENCY(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        float res = NETWORK::NETWORK_GET_AVERAGE_LATENCY(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_GET_AVERAGE_PING(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        float res = NETWORK::NETWORK_GET_AVERAGE_PING(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_GET_AVERAGE_PACKET_LOSS(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        float res = NETWORK::NETWORK_GET_AVERAGE_PACKET_LOSS(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_GET_NUM_UNACKED_RELIABLES(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        int res = NETWORK::NETWORK_GET_NUM_UNACKED_RELIABLES(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_GET_UNRELIABLE_RESEND_COUNT(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        int res = NETWORK::NETWORK_GET_UNRELIABLE_RESEND_COUNT(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_GET_HIGHEST_RELIABLE_RESEND_COUNT(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        int res = NETWORK::NETWORK_GET_HIGHEST_RELIABLE_RESEND_COUNT(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_REPORT_CODE_TAMPER(WrenVM* vm)
    {

        NETWORK::NETWORK_REPORT_CODE_TAMPER();
    }

    static void WREN_NETWORK_NETWORK_GET_LAST_ENTITY_POS_RECEIVED_OVER_NETWORK(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        Vector3 res = NETWORK::NETWORK_GET_LAST_ENTITY_POS_RECEIVED_OVER_NETWORK(entity);

        wrenEnsureSlots(vm, 1);

        wrenGetVariable(vm, "natives", "Vector3", 0);
        Vector3* wren_res = (Vector3*)wrenSetSlotNewForeign(vm, 0, 0, sizeof(Vector3));
        wren_res->x = res.x;
        wren_res->y = res.y;
        wren_res->z = res.z;
    }

    static void WREN_NETWORK_NETWORK_GET_LAST_PLAYER_POS_RECEIVED_OVER_NETWORK(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        Vector3 res = NETWORK::NETWORK_GET_LAST_PLAYER_POS_RECEIVED_OVER_NETWORK(player);

        wrenEnsureSlots(vm, 1);

        wrenGetVariable(vm, "natives", "Vector3", 0);
        Vector3* wren_res = (Vector3*)wrenSetSlotNewForeign(vm, 0, 0, sizeof(Vector3));
        wren_res->x = res.x;
        wren_res->y = res.y;
        wren_res->z = res.z;
    }

    static void WREN_NETWORK_NETWORK_GET_LAST_VEL_RECEIVED_OVER_NETWORK(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        Vector3 res = NETWORK::NETWORK_GET_LAST_VEL_RECEIVED_OVER_NETWORK(entity);

        wrenEnsureSlots(vm, 1);

        wrenGetVariable(vm, "natives", "Vector3", 0);
        Vector3* wren_res = (Vector3*)wrenSetSlotNewForeign(vm, 0, 0, sizeof(Vector3));
        wren_res->x = res.x;
        wren_res->y = res.y;
        wren_res->z = res.z;
    }

    static void WREN_NETWORK_NETWORK_GET_PREDICTED_VELOCITY(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        Vector3 res = NETWORK::NETWORK_GET_PREDICTED_VELOCITY(entity);

        wrenEnsureSlots(vm, 1);

        wrenGetVariable(vm, "natives", "Vector3", 0);
        Vector3* wren_res = (Vector3*)wrenSetSlotNewForeign(vm, 0, 0, sizeof(Vector3));
        wren_res->x = res.x;
        wren_res->y = res.y;
        wren_res->z = res.z;
    }

    static void WREN_NETWORK_NETWORK_DUMP_NET_IF_CONFIG(WrenVM* vm)
    {

        Any res = NETWORK::NETWORK_DUMP_NET_IF_CONFIG();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_GET_SIGNALLING_INFO(WrenVM* vm)
    {

        Any res = NETWORK::NETWORK_GET_SIGNALLING_INFO();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_GET_NET_STATISTICS_INFO(WrenVM* vm)
    {

        Any res = NETWORK::NETWORK_GET_NET_STATISTICS_INFO();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_GET_PLAYER_ACCOUNT_ID(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        int res = NETWORK::NETWORK_GET_PLAYER_ACCOUNT_ID(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_NETWORK_NETWORK_UGC_NAV(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        NETWORK::NETWORK_UGC_NAV(p0, p1);
    }


    static void WREN_OBJECT_CREATE_OBJECT(WrenVM* vm)
    {
        Hash modelHash = (Hash)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);
        BOOL isNetwork = (BOOL)wrenGetSlotBool(vm, 5);
        BOOL bScriptHostObj = (BOOL)wrenGetSlotBool(vm, 6);
        BOOL dynamic = (BOOL)wrenGetSlotBool(vm, 7);

        Object res = OBJECT::CREATE_OBJECT(modelHash, x, y, z, isNetwork, bScriptHostObj, dynamic);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_OBJECT_CREATE_OBJECT_NO_OFFSET(WrenVM* vm)
    {
        Hash modelHash = (Hash)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);
        BOOL isNetwork = (BOOL)wrenGetSlotBool(vm, 5);
        BOOL bScriptHostObj = (BOOL)wrenGetSlotBool(vm, 6);
        BOOL dynamic = (BOOL)wrenGetSlotBool(vm, 7);

        Object res = OBJECT::CREATE_OBJECT_NO_OFFSET(modelHash, x, y, z, isNetwork, bScriptHostObj, dynamic);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_OBJECT_DELETE_OBJECT(WrenVM* vm)
    {
        Object object;

        OBJECT::DELETE_OBJECT(&object);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_OBJECT_PLACE_OBJECT_ON_GROUND_PROPERLY(WrenVM* vm)
    {
        Object object = (Object)wrenGetSlotDouble(vm, 1);

        BOOL res = OBJECT::PLACE_OBJECT_ON_GROUND_PROPERLY(object);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_OBJECT_PLACE_OBJECT_ON_GROUND_OR_OBJECT_PROPERLY(WrenVM* vm)
    {
        Object object = (Object)wrenGetSlotDouble(vm, 1);

        BOOL res = OBJECT::PLACE_OBJECT_ON_GROUND_OR_OBJECT_PROPERLY(object);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_OBJECT_ROTATE_OBJECT(WrenVM* vm)
    {
        Object object = (Object)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);
        float p2 = (float)wrenGetSlotDouble(vm, 3);
        BOOL p3 = (BOOL)wrenGetSlotBool(vm, 4);

        BOOL res = OBJECT::ROTATE_OBJECT(object, p1, p2, p3);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_OBJECT_SLIDE_OBJECT(WrenVM* vm)
    {
        Object object = (Object)wrenGetSlotDouble(vm, 1);
        float toX = (float)wrenGetSlotDouble(vm, 2);
        float toY = (float)wrenGetSlotDouble(vm, 3);
        float toZ = (float)wrenGetSlotDouble(vm, 4);
        float speedX = (float)wrenGetSlotDouble(vm, 5);
        float speedY = (float)wrenGetSlotDouble(vm, 6);
        float speedZ = (float)wrenGetSlotDouble(vm, 7);
        BOOL collision = (BOOL)wrenGetSlotBool(vm, 8);

        BOOL res = OBJECT::SLIDE_OBJECT(object, toX, toY, toZ, speedX, speedY, speedZ, collision);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_OBJECT_SET_OBJECT_TARGETTABLE(WrenVM* vm)
    {
        Object object = (Object)wrenGetSlotDouble(vm, 1);
        BOOL targettable = (BOOL)wrenGetSlotBool(vm, 2);

        OBJECT::SET_OBJECT_TARGETTABLE(object, targettable);
    }

    static void WREN_OBJECT_SET_OBJECT_FORCE_VEHICLES_TO_AVOID(WrenVM* vm)
    {
        Object object = (Object)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        OBJECT::SET_OBJECT_FORCE_VEHICLES_TO_AVOID(object, toggle);
    }

    static void WREN_OBJECT_GET_CLOSEST_OBJECT_OF_TYPE(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        float radius = (float)wrenGetSlotDouble(vm, 4);
        Hash modelHash = (Hash)wrenGetSlotDouble(vm, 5);
        BOOL isMission = (BOOL)wrenGetSlotBool(vm, 6);
        BOOL p6 = (BOOL)wrenGetSlotBool(vm, 7);
        BOOL p7 = (BOOL)wrenGetSlotBool(vm, 8);

        Object res = OBJECT::GET_CLOSEST_OBJECT_OF_TYPE(x, y, z, radius, modelHash, isMission, p6, p7);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_OBJECT_HAS_OBJECT_BEEN_BROKEN(WrenVM* vm)
    {
        Object object = (Object)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        BOOL res = OBJECT::HAS_OBJECT_BEEN_BROKEN(object, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_OBJECT_HAS_CLOSEST_OBJECT_OF_TYPE_BEEN_BROKEN(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);
        float p2 = (float)wrenGetSlotDouble(vm, 3);
        float p3 = (float)wrenGetSlotDouble(vm, 4);
        Hash modelHash = (Hash)wrenGetSlotDouble(vm, 5);
        Any p5 = (Any)wrenGetSlotDouble(vm, 6);

        BOOL res = OBJECT::HAS_CLOSEST_OBJECT_OF_TYPE_BEEN_BROKEN(p0, p1, p2, p3, modelHash, p5);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_OBJECT_HAS_CLOSEST_OBJECT_OF_TYPE_BEEN_COMPLETELY_DESTROYED(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        float radius = (float)wrenGetSlotDouble(vm, 4);
        Hash modelHash = (Hash)wrenGetSlotDouble(vm, 5);
        BOOL p5 = (BOOL)wrenGetSlotBool(vm, 6);

        BOOL res = OBJECT::HAS_CLOSEST_OBJECT_OF_TYPE_BEEN_COMPLETELY_DESTROYED(x, y, z, radius, modelHash, p5);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_OBJECT_GET_HAS_OBJECT_BEEN_COMPLETELY_DESTROYED(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        Any res = OBJECT::GET_HAS_OBJECT_BEEN_COMPLETELY_DESTROYED(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_OBJECT_GET_OFFSET_FROM_COORD_AND_HEADING_IN_WORLD_COORDS(WrenVM* vm)
    {
        float xPos = (float)wrenGetSlotDouble(vm, 1);
        float yPos = (float)wrenGetSlotDouble(vm, 2);
        float zPos = (float)wrenGetSlotDouble(vm, 3);
        float heading = (float)wrenGetSlotDouble(vm, 4);
        float xOffset = (float)wrenGetSlotDouble(vm, 5);
        float yOffset = (float)wrenGetSlotDouble(vm, 6);
        float zOffset = (float)wrenGetSlotDouble(vm, 7);

        Vector3 res = OBJECT::GET_OFFSET_FROM_COORD_AND_HEADING_IN_WORLD_COORDS(xPos, yPos, zPos, heading, xOffset, yOffset, zOffset);

        wrenEnsureSlots(vm, 1);

        wrenGetVariable(vm, "natives", "Vector3", 0);
        Vector3* wren_res = (Vector3*)wrenSetSlotNewForeign(vm, 0, 0, sizeof(Vector3));
        wren_res->x = res.x;
        wren_res->y = res.y;
        wren_res->z = res.z;
    }

    static void WREN_OBJECT_GET_COORDS_AND_ROTATION_OF_CLOSEST_OBJECT_OF_TYPE(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        float radius = (float)wrenGetSlotDouble(vm, 4);
        Hash modelHash = (Hash)wrenGetSlotDouble(vm, 5);
        Vector3 outPosition;
        Vector3 outRotation;
        int rotationOrder = (int)wrenGetSlotDouble(vm, 6);

        Any res = OBJECT::GET_COORDS_AND_ROTATION_OF_CLOSEST_OBJECT_OF_TYPE(x, y, z, radius, modelHash, &outPosition, &outRotation, rotationOrder);

        wrenEnsureSlots(vm, 6);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenGetVariable(vm, "natives", "Vector3", 2);
        Vector3* wren_outPosition = (Vector3*)wrenSetSlotNewForeign(vm, 3, 2, sizeof(Vector3));
        wren_outPosition->x = outPosition.x;
        wren_outPosition->y = outPosition.y;
        wren_outPosition->z = outPosition.z;
        wrenInsertInList(vm, 0, 1, 3);

        Vector3* wren_outRotation = (Vector3*)wrenSetSlotNewForeign(vm, 4, 2, sizeof(Vector3));
        wren_outRotation->x = outRotation.x;
        wren_outRotation->y = outRotation.y;
        wren_outRotation->z = outRotation.z;
        wrenInsertInList(vm, 0, 2, 4);

    }

    static void WREN_OBJECT_SET_STATE_OF_CLOSEST_DOOR_OF_TYPE(WrenVM* vm)
    {
        Hash type = (Hash)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);
        BOOL locked = (BOOL)wrenGetSlotBool(vm, 5);
        float heading = (float)wrenGetSlotDouble(vm, 6);
        BOOL p6 = (BOOL)wrenGetSlotBool(vm, 7);

        OBJECT::SET_STATE_OF_CLOSEST_DOOR_OF_TYPE(type, x, y, z, locked, heading, p6);
    }

    static void WREN_OBJECT_GET_STATE_OF_CLOSEST_DOOR_OF_TYPE(WrenVM* vm)
    {
        Hash type = (Hash)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);
        BOOL locked;
        float heading;

        OBJECT::GET_STATE_OF_CLOSEST_DOOR_OF_TYPE(type, x, y, z, &locked, &heading);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)locked);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, heading);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_OBJECT_SET_LOCKED_UNSTREAMED_IN_DOOR_OF_TYPE(WrenVM* vm)
    {
        Hash modelHash = (Hash)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);
        BOOL locked = (BOOL)wrenGetSlotBool(vm, 5);
        float xRotMult = (float)wrenGetSlotDouble(vm, 6);
        float yRotMult = (float)wrenGetSlotDouble(vm, 7);
        float zRotMult = (float)wrenGetSlotDouble(vm, 8);

        OBJECT::SET_LOCKED_UNSTREAMED_IN_DOOR_OF_TYPE(modelHash, x, y, z, locked, xRotMult, yRotMult, zRotMult);
    }

    static void WREN_OBJECT_PLAY_OBJECT_AUTO_START_ANIM(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        OBJECT::PLAY_OBJECT_AUTO_START_ANIM(p0);
    }

    static void WREN_OBJECT_ADD_DOOR_TO_SYSTEM(WrenVM* vm)
    {
        Hash doorHash = (Hash)wrenGetSlotDouble(vm, 1);
        Hash modelHash = (Hash)wrenGetSlotDouble(vm, 2);
        float x = (float)wrenGetSlotDouble(vm, 3);
        float y = (float)wrenGetSlotDouble(vm, 4);
        float z = (float)wrenGetSlotDouble(vm, 5);
        BOOL p5 = (BOOL)wrenGetSlotBool(vm, 6);
        BOOL scriptDoor = (BOOL)wrenGetSlotBool(vm, 7);
        BOOL isLocal = (BOOL)wrenGetSlotBool(vm, 8);

        OBJECT::ADD_DOOR_TO_SYSTEM(doorHash, modelHash, x, y, z, p5, scriptDoor, isLocal);
    }

    static void WREN_OBJECT_REMOVE_DOOR_FROM_SYSTEM(WrenVM* vm)
    {
        Hash doorHash = (Hash)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        OBJECT::REMOVE_DOOR_FROM_SYSTEM(doorHash, p1);
    }

    static void WREN_OBJECT_DOOR_SYSTEM_SET_DOOR_STATE(WrenVM* vm)
    {
        Hash doorHash = (Hash)wrenGetSlotDouble(vm, 1);
        int state = (int)wrenGetSlotDouble(vm, 2);
        BOOL requestDoor = (BOOL)wrenGetSlotBool(vm, 3);
        BOOL forceUpdate = (BOOL)wrenGetSlotBool(vm, 4);

        OBJECT::DOOR_SYSTEM_SET_DOOR_STATE(doorHash, state, requestDoor, forceUpdate);
    }

    static void WREN_OBJECT_DOOR_SYSTEM_GET_DOOR_STATE(WrenVM* vm)
    {
        Hash doorHash = (Hash)wrenGetSlotDouble(vm, 1);

        int res = OBJECT::DOOR_SYSTEM_GET_DOOR_STATE(doorHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_OBJECT_DOOR_SYSTEM_GET_DOOR_PENDING_STATE(WrenVM* vm)
    {
        Hash doorHash = (Hash)wrenGetSlotDouble(vm, 1);

        int res = OBJECT::DOOR_SYSTEM_GET_DOOR_PENDING_STATE(doorHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_OBJECT_DOOR_SYSTEM_SET_AUTOMATIC_RATE(WrenVM* vm)
    {
        Hash doorHash = (Hash)wrenGetSlotDouble(vm, 1);
        float rate = (float)wrenGetSlotDouble(vm, 2);
        BOOL requestDoor = (BOOL)wrenGetSlotBool(vm, 3);
        BOOL forceUpdate = (BOOL)wrenGetSlotBool(vm, 4);

        OBJECT::DOOR_SYSTEM_SET_AUTOMATIC_RATE(doorHash, rate, requestDoor, forceUpdate);
    }

    static void WREN_OBJECT_DOOR_SYSTEM_SET_AUTOMATIC_DISTANCE(WrenVM* vm)
    {
        Hash doorHash = (Hash)wrenGetSlotDouble(vm, 1);
        float distance = (float)wrenGetSlotDouble(vm, 2);
        BOOL requestDoor = (BOOL)wrenGetSlotBool(vm, 3);
        BOOL forceUpdate = (BOOL)wrenGetSlotBool(vm, 4);

        OBJECT::DOOR_SYSTEM_SET_AUTOMATIC_DISTANCE(doorHash, distance, requestDoor, forceUpdate);
    }

    static void WREN_OBJECT_DOOR_SYSTEM_SET_OPEN_RATIO(WrenVM* vm)
    {
        Hash doorHash = (Hash)wrenGetSlotDouble(vm, 1);
        float ajar = (float)wrenGetSlotDouble(vm, 2);
        BOOL requestDoor = (BOOL)wrenGetSlotBool(vm, 3);
        BOOL forceUpdate = (BOOL)wrenGetSlotBool(vm, 4);

        OBJECT::DOOR_SYSTEM_SET_OPEN_RATIO(doorHash, ajar, requestDoor, forceUpdate);
    }

    static void WREN_OBJECT_DOOR_SYSTEM_GET_AUTOMATIC_DISTANCE(WrenVM* vm)
    {
        Hash doorHash = (Hash)wrenGetSlotDouble(vm, 1);

        Any res = OBJECT::DOOR_SYSTEM_GET_AUTOMATIC_DISTANCE(doorHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_OBJECT_DOOR_SYSTEM_GET_OPEN_RATIO(WrenVM* vm)
    {
        Hash doorHash = (Hash)wrenGetSlotDouble(vm, 1);

        float res = OBJECT::DOOR_SYSTEM_GET_OPEN_RATIO(doorHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_OBJECT_DOOR_SYSTEM_SET_SPRING_REMOVED(WrenVM* vm)
    {
        Hash doorHash = (Hash)wrenGetSlotDouble(vm, 1);
        BOOL removed = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL requestDoor = (BOOL)wrenGetSlotBool(vm, 3);
        BOOL forceUpdate = (BOOL)wrenGetSlotBool(vm, 4);

        OBJECT::DOOR_SYSTEM_SET_SPRING_REMOVED(doorHash, removed, requestDoor, forceUpdate);
    }

    static void WREN_OBJECT_DOOR_SYSTEM_SET_HOLD_OPEN(WrenVM* vm)
    {
        Hash doorHash = (Hash)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        OBJECT::DOOR_SYSTEM_SET_HOLD_OPEN(doorHash, toggle);
    }

    static void WREN_OBJECT_DOOR_SYSTEM_SET_DOOR_OPEN_FOR_RACES(WrenVM* vm)
    {
        Hash doorHash = (Hash)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        OBJECT::DOOR_SYSTEM_SET_DOOR_OPEN_FOR_RACES(doorHash, p1);
    }

    static void WREN_OBJECT_IS_DOOR_REGISTERED_WITH_SYSTEM(WrenVM* vm)
    {
        Hash doorHash = (Hash)wrenGetSlotDouble(vm, 1);

        BOOL res = OBJECT::IS_DOOR_REGISTERED_WITH_SYSTEM(doorHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_OBJECT_IS_DOOR_CLOSED(WrenVM* vm)
    {
        Hash doorHash = (Hash)wrenGetSlotDouble(vm, 1);

        BOOL res = OBJECT::IS_DOOR_CLOSED(doorHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_OBJECT_OPEN_ALL_BARRIERS_FOR_RACE(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        OBJECT::OPEN_ALL_BARRIERS_FOR_RACE(p0);
    }

    static void WREN_OBJECT_CLOSE_ALL_BARRIERS_FOR_RACE(WrenVM* vm)
    {

        OBJECT::CLOSE_ALL_BARRIERS_FOR_RACE();
    }

    static void WREN_OBJECT_DOOR_SYSTEM_GET_IS_PHYSICS_LOADED(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        BOOL res = OBJECT::DOOR_SYSTEM_GET_IS_PHYSICS_LOADED(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_OBJECT_DOOR_SYSTEM_FIND_EXISTING_DOOR(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        Hash modelHash = (Hash)wrenGetSlotDouble(vm, 4);
        Hash outDoorHash;

        BOOL res = OBJECT::DOOR_SYSTEM_FIND_EXISTING_DOOR(x, y, z, modelHash, &outDoorHash);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, outDoorHash);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_OBJECT_IS_GARAGE_EMPTY(WrenVM* vm)
    {
        Hash garageHash = (Hash)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        int p2 = (int)wrenGetSlotDouble(vm, 3);

        BOOL res = OBJECT::IS_GARAGE_EMPTY(garageHash, p1, p2);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_OBJECT_IS_PLAYER_ENTIRELY_INSIDE_GARAGE(WrenVM* vm)
    {
        Hash garageHash = (Hash)wrenGetSlotDouble(vm, 1);
        Player player = (Player)wrenGetSlotDouble(vm, 2);
        float p2 = (float)wrenGetSlotDouble(vm, 3);
        int p3 = (int)wrenGetSlotDouble(vm, 4);

        BOOL res = OBJECT::IS_PLAYER_ENTIRELY_INSIDE_GARAGE(garageHash, player, p2, p3);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_OBJECT_IS_PLAYER_PARTIALLY_INSIDE_GARAGE(WrenVM* vm)
    {
        Hash garageHash = (Hash)wrenGetSlotDouble(vm, 1);
        Player player = (Player)wrenGetSlotDouble(vm, 2);
        int p2 = (int)wrenGetSlotDouble(vm, 3);

        BOOL res = OBJECT::IS_PLAYER_PARTIALLY_INSIDE_GARAGE(garageHash, player, p2);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_OBJECT_ARE_ENTITIES_ENTIRELY_INSIDE_GARAGE(WrenVM* vm)
    {
        Hash garageHash = (Hash)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);
        BOOL p3 = (BOOL)wrenGetSlotBool(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);

        BOOL res = OBJECT::ARE_ENTITIES_ENTIRELY_INSIDE_GARAGE(garageHash, p1, p2, p3, p4);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_OBJECT_IS_ANY_ENTITY_ENTIRELY_INSIDE_GARAGE(WrenVM* vm)
    {
        Hash garageHash = (Hash)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);
        BOOL p3 = (BOOL)wrenGetSlotBool(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);

        BOOL res = OBJECT::IS_ANY_ENTITY_ENTIRELY_INSIDE_GARAGE(garageHash, p1, p2, p3, p4);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_OBJECT_IS_OBJECT_ENTIRELY_INSIDE_GARAGE(WrenVM* vm)
    {
        Hash garageHash = (Hash)wrenGetSlotDouble(vm, 1);
        Entity entity = (Entity)wrenGetSlotDouble(vm, 2);
        float p2 = (float)wrenGetSlotDouble(vm, 3);
        int p3 = (int)wrenGetSlotDouble(vm, 4);

        BOOL res = OBJECT::IS_OBJECT_ENTIRELY_INSIDE_GARAGE(garageHash, entity, p2, p3);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_OBJECT_IS_OBJECT_PARTIALLY_INSIDE_GARAGE(WrenVM* vm)
    {
        Hash garageHash = (Hash)wrenGetSlotDouble(vm, 1);
        Entity entity = (Entity)wrenGetSlotDouble(vm, 2);
        int p2 = (int)wrenGetSlotDouble(vm, 3);

        BOOL res = OBJECT::IS_OBJECT_PARTIALLY_INSIDE_GARAGE(garageHash, entity, p2);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_OBJECT_CLEAR_GARAGE(WrenVM* vm)
    {
        Hash garageHash = (Hash)wrenGetSlotDouble(vm, 1);
        BOOL isNetwork = (BOOL)wrenGetSlotBool(vm, 2);

        OBJECT::CLEAR_GARAGE(garageHash, isNetwork);
    }

    static void WREN_OBJECT_CLEAR_OBJECTS_INSIDE_GARAGE(WrenVM* vm)
    {
        Hash garageHash = (Hash)wrenGetSlotDouble(vm, 1);
        BOOL vehicles = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL peds = (BOOL)wrenGetSlotBool(vm, 3);
        BOOL objects = (BOOL)wrenGetSlotBool(vm, 4);
        BOOL isNetwork = (BOOL)wrenGetSlotBool(vm, 5);

        OBJECT::CLEAR_OBJECTS_INSIDE_GARAGE(garageHash, vehicles, peds, objects, isNetwork);
    }

    static void WREN_OBJECT_DISABLE_TIDYING_UP_IN_GARAGE(WrenVM* vm)
    {
        int id = (int)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        OBJECT::DISABLE_TIDYING_UP_IN_GARAGE(id, toggle);
    }

    static void WREN_OBJECT_ENABLE_SAVING_IN_GARAGE(WrenVM* vm)
    {
        Hash garageHash = (Hash)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        OBJECT::ENABLE_SAVING_IN_GARAGE(garageHash, toggle);
    }

    static void WREN_OBJECT_CLOSE_SAFEHOUSE_GARAGES(WrenVM* vm)
    {

        OBJECT::CLOSE_SAFEHOUSE_GARAGES();
    }

    static void WREN_OBJECT_DOES_OBJECT_OF_TYPE_EXIST_AT_COORDS(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        float radius = (float)wrenGetSlotDouble(vm, 4);
        Hash hash = (Hash)wrenGetSlotDouble(vm, 5);
        BOOL p5 = (BOOL)wrenGetSlotBool(vm, 6);

        BOOL res = OBJECT::DOES_OBJECT_OF_TYPE_EXIST_AT_COORDS(x, y, z, radius, hash, p5);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_OBJECT_IS_POINT_IN_ANGLED_AREA(WrenVM* vm)
    {
        float xPos = (float)wrenGetSlotDouble(vm, 1);
        float yPos = (float)wrenGetSlotDouble(vm, 2);
        float zPos = (float)wrenGetSlotDouble(vm, 3);
        float x1 = (float)wrenGetSlotDouble(vm, 4);
        float y1 = (float)wrenGetSlotDouble(vm, 5);
        float z1 = (float)wrenGetSlotDouble(vm, 6);
        float x2 = (float)wrenGetSlotDouble(vm, 7);
        float y2 = (float)wrenGetSlotDouble(vm, 8);
        float z2 = (float)wrenGetSlotDouble(vm, 9);
        float width = (float)wrenGetSlotDouble(vm, 10);
        BOOL debug = (BOOL)wrenGetSlotBool(vm, 11);
        BOOL includeZ = (BOOL)wrenGetSlotBool(vm, 12);

        BOOL res = OBJECT::IS_POINT_IN_ANGLED_AREA(xPos, yPos, zPos, x1, y1, z1, x2, y2, z2, width, debug, includeZ);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_OBJECT_SET_OBJECT_ALLOW_LOW_LOD_BUOYANCY(WrenVM* vm)
    {
        Object object = (Object)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        OBJECT::SET_OBJECT_ALLOW_LOW_LOD_BUOYANCY(object, toggle);
    }

    static void WREN_OBJECT_SET_OBJECT_PHYSICS_PARAMS(WrenVM* vm)
    {
        Object object = (Object)wrenGetSlotDouble(vm, 1);
        float weight = (float)wrenGetSlotDouble(vm, 2);
        float p2 = (float)wrenGetSlotDouble(vm, 3);
        float p3 = (float)wrenGetSlotDouble(vm, 4);
        float p4 = (float)wrenGetSlotDouble(vm, 5);
        float p5 = (float)wrenGetSlotDouble(vm, 6);
        float gravity = (float)wrenGetSlotDouble(vm, 7);
        float p7 = (float)wrenGetSlotDouble(vm, 8);
        float p8 = (float)wrenGetSlotDouble(vm, 9);
        float p9 = (float)wrenGetSlotDouble(vm, 10);
        float p10 = (float)wrenGetSlotDouble(vm, 11);
        float buoyancy = (float)wrenGetSlotDouble(vm, 12);

        OBJECT::SET_OBJECT_PHYSICS_PARAMS(object, weight, p2, p3, p4, p5, gravity, p7, p8, p9, p10, buoyancy);
    }

    static void WREN_OBJECT_GET_OBJECT_FRAGMENT_DAMAGE_HEALTH(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        float res = OBJECT::GET_OBJECT_FRAGMENT_DAMAGE_HEALTH(p0, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_OBJECT_SET_ACTIVATE_OBJECT_PHYSICS_AS_SOON_AS_IT_IS_UNFROZEN(WrenVM* vm)
    {
        Object object = (Object)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        OBJECT::SET_ACTIVATE_OBJECT_PHYSICS_AS_SOON_AS_IT_IS_UNFROZEN(object, toggle);
    }

    static void WREN_OBJECT_IS_ANY_OBJECT_NEAR_POINT(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        float range = (float)wrenGetSlotDouble(vm, 4);
        BOOL p4 = (BOOL)wrenGetSlotBool(vm, 5);

        BOOL res = OBJECT::IS_ANY_OBJECT_NEAR_POINT(x, y, z, range, p4);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_OBJECT_IS_OBJECT_NEAR_POINT(WrenVM* vm)
    {
        Hash objectHash = (Hash)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);
        float range = (float)wrenGetSlotDouble(vm, 5);

        BOOL res = OBJECT::IS_OBJECT_NEAR_POINT(objectHash, x, y, z, range);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_OBJECT_REMOVE_OBJECT_HIGH_DETAIL_MODEL(WrenVM* vm)
    {
        Object object = (Object)wrenGetSlotDouble(vm, 1);

        OBJECT::REMOVE_OBJECT_HIGH_DETAIL_MODEL(object);
    }

    static void WREN_OBJECT_BREAK_OBJECT_FRAGMENT_CHILD(WrenVM* vm)
    {
        Object p0 = (Object)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        OBJECT::BREAK_OBJECT_FRAGMENT_CHILD(p0, p1, p2);
    }

    static void WREN_OBJECT_DAMAGE_OBJECT_FRAGMENT_CHILD(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);

        OBJECT::DAMAGE_OBJECT_FRAGMENT_CHILD(p0, p1, p2);
    }

    static void WREN_OBJECT_FIX_OBJECT_FRAGMENT(WrenVM* vm)
    {
        Object object = (Object)wrenGetSlotDouble(vm, 1);

        OBJECT::FIX_OBJECT_FRAGMENT(object);
    }

    static void WREN_OBJECT_TRACK_OBJECT_VISIBILITY(WrenVM* vm)
    {
        Object object = (Object)wrenGetSlotDouble(vm, 1);

        OBJECT::TRACK_OBJECT_VISIBILITY(object);
    }

    static void WREN_OBJECT_IS_OBJECT_VISIBLE(WrenVM* vm)
    {
        Object object = (Object)wrenGetSlotDouble(vm, 1);

        BOOL res = OBJECT::IS_OBJECT_VISIBLE(object);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_OBJECT_SET_OBJECT_IS_SPECIAL_GOLFBALL(WrenVM* vm)
    {
        Object object = (Object)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        OBJECT::SET_OBJECT_IS_SPECIAL_GOLFBALL(object, toggle);
    }

    static void WREN_OBJECT_SET_OBJECT_TAKES_DAMAGE_FROM_COLLIDING_WITH_BUILDINGS(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        OBJECT::SET_OBJECT_TAKES_DAMAGE_FROM_COLLIDING_WITH_BUILDINGS(p0, p1);
    }

    static void WREN_OBJECT_ALLOW_DAMAGE_EVENTS_FOR_NON_NETWORKED_OBJECTS(WrenVM* vm)
    {
        BOOL value = (BOOL)wrenGetSlotBool(vm, 1);

        OBJECT::ALLOW_DAMAGE_EVENTS_FOR_NON_NETWORKED_OBJECTS(value);
    }

    static void WREN_OBJECT_SET_CUTSCENES_WEAPON_FLASHLIGHT_ON_THIS_FRAME(WrenVM* vm)
    {
        Object object = (Object)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        OBJECT::SET_CUTSCENES_WEAPON_FLASHLIGHT_ON_THIS_FRAME(object, toggle);
    }

    static void WREN_OBJECT_GET_RAYFIRE_MAP_OBJECT(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        float radius = (float)wrenGetSlotDouble(vm, 4);
        const char* name = wrenGetSlotString(vm, 5);

        Object res = OBJECT::GET_RAYFIRE_MAP_OBJECT(x, y, z, radius, name);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_OBJECT_SET_STATE_OF_RAYFIRE_MAP_OBJECT(WrenVM* vm)
    {
        Object object = (Object)wrenGetSlotDouble(vm, 1);
        int state = (int)wrenGetSlotDouble(vm, 2);

        OBJECT::SET_STATE_OF_RAYFIRE_MAP_OBJECT(object, state);
    }

    static void WREN_OBJECT_GET_STATE_OF_RAYFIRE_MAP_OBJECT(WrenVM* vm)
    {
        Object object = (Object)wrenGetSlotDouble(vm, 1);

        int res = OBJECT::GET_STATE_OF_RAYFIRE_MAP_OBJECT(object);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_OBJECT_DOES_RAYFIRE_MAP_OBJECT_EXIST(WrenVM* vm)
    {
        Object object = (Object)wrenGetSlotDouble(vm, 1);

        BOOL res = OBJECT::DOES_RAYFIRE_MAP_OBJECT_EXIST(object);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_OBJECT_GET_RAYFIRE_MAP_OBJECT_ANIM_PHASE(WrenVM* vm)
    {
        Object object = (Object)wrenGetSlotDouble(vm, 1);

        float res = OBJECT::GET_RAYFIRE_MAP_OBJECT_ANIM_PHASE(object);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_OBJECT_CREATE_PICKUP(WrenVM* vm)
    {
        Hash pickupHash = (Hash)wrenGetSlotDouble(vm, 1);
        float posX = (float)wrenGetSlotDouble(vm, 2);
        float posY = (float)wrenGetSlotDouble(vm, 3);
        float posZ = (float)wrenGetSlotDouble(vm, 4);
        int p4 = (int)wrenGetSlotDouble(vm, 5);
        int value = (int)wrenGetSlotDouble(vm, 6);
        BOOL p6 = (BOOL)wrenGetSlotBool(vm, 7);
        Hash modelHash = (Hash)wrenGetSlotDouble(vm, 8);

        Pickup res = OBJECT::CREATE_PICKUP(pickupHash, posX, posY, posZ, p4, value, p6, modelHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_OBJECT_CREATE_PICKUP_ROTATE(WrenVM* vm)
    {
        Hash pickupHash = (Hash)wrenGetSlotDouble(vm, 1);
        float posX = (float)wrenGetSlotDouble(vm, 2);
        float posY = (float)wrenGetSlotDouble(vm, 3);
        float posZ = (float)wrenGetSlotDouble(vm, 4);
        float rotX = (float)wrenGetSlotDouble(vm, 5);
        float rotY = (float)wrenGetSlotDouble(vm, 6);
        float rotZ = (float)wrenGetSlotDouble(vm, 7);
        int flag = (int)wrenGetSlotDouble(vm, 8);
        int amount = (int)wrenGetSlotDouble(vm, 9);
        Any p9 = (Any)wrenGetSlotDouble(vm, 10);
        BOOL p10 = (BOOL)wrenGetSlotBool(vm, 11);
        Hash modelHash = (Hash)wrenGetSlotDouble(vm, 12);

        Pickup res = OBJECT::CREATE_PICKUP_ROTATE(pickupHash, posX, posY, posZ, rotX, rotY, rotZ, flag, amount, p9, p10, modelHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_OBJECT_FORCE_PICKUP_ROTATE_FACE_UP(WrenVM* vm)
    {

        OBJECT::FORCE_PICKUP_ROTATE_FACE_UP();
    }

    static void WREN_OBJECT_SET_CUSTOM_PICKUP_WEAPON_HASH(WrenVM* vm)
    {
        Hash pickupHash = (Hash)wrenGetSlotDouble(vm, 1);
        Pickup pickup = (Pickup)wrenGetSlotDouble(vm, 2);

        OBJECT::SET_CUSTOM_PICKUP_WEAPON_HASH(pickupHash, pickup);
    }

    static void WREN_OBJECT_CREATE_AMBIENT_PICKUP(WrenVM* vm)
    {
        Hash pickupHash = (Hash)wrenGetSlotDouble(vm, 1);
        float posX = (float)wrenGetSlotDouble(vm, 2);
        float posY = (float)wrenGetSlotDouble(vm, 3);
        float posZ = (float)wrenGetSlotDouble(vm, 4);
        int flags = (int)wrenGetSlotDouble(vm, 5);
        int value = (int)wrenGetSlotDouble(vm, 6);
        Hash modelHash = (Hash)wrenGetSlotDouble(vm, 7);
        BOOL p7 = (BOOL)wrenGetSlotBool(vm, 8);
        BOOL p8 = (BOOL)wrenGetSlotBool(vm, 9);

        Pickup res = OBJECT::CREATE_AMBIENT_PICKUP(pickupHash, posX, posY, posZ, flags, value, modelHash, p7, p8);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_OBJECT_CREATE_NON_NETWORKED_AMBIENT_PICKUP(WrenVM* vm)
    {
        Hash pickupHash = (Hash)wrenGetSlotDouble(vm, 1);
        float posX = (float)wrenGetSlotDouble(vm, 2);
        float posY = (float)wrenGetSlotDouble(vm, 3);
        float posZ = (float)wrenGetSlotDouble(vm, 4);
        int flags = (int)wrenGetSlotDouble(vm, 5);
        int value = (int)wrenGetSlotDouble(vm, 6);
        Hash modelHash = (Hash)wrenGetSlotDouble(vm, 7);
        BOOL p7 = (BOOL)wrenGetSlotBool(vm, 8);
        BOOL p8 = (BOOL)wrenGetSlotBool(vm, 9);

        Pickup res = OBJECT::CREATE_NON_NETWORKED_AMBIENT_PICKUP(pickupHash, posX, posY, posZ, flags, value, modelHash, p7, p8);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_OBJECT_BLOCK_PLAYERS_FOR_AMBIENT_PICKUP(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        OBJECT::BLOCK_PLAYERS_FOR_AMBIENT_PICKUP(p0, p1);
    }

    static void WREN_OBJECT_CREATE_PORTABLE_PICKUP(WrenVM* vm)
    {
        Hash pickupHash = (Hash)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);
        BOOL placeOnGround = (BOOL)wrenGetSlotBool(vm, 5);
        Hash modelHash = (Hash)wrenGetSlotDouble(vm, 6);

        Object res = OBJECT::CREATE_PORTABLE_PICKUP(pickupHash, x, y, z, placeOnGround, modelHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_OBJECT_CREATE_NON_NETWORKED_PORTABLE_PICKUP(WrenVM* vm)
    {
        Hash pickupHash = (Hash)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);
        BOOL placeOnGround = (BOOL)wrenGetSlotBool(vm, 5);
        Hash modelHash = (Hash)wrenGetSlotDouble(vm, 6);

        Object res = OBJECT::CREATE_NON_NETWORKED_PORTABLE_PICKUP(pickupHash, x, y, z, placeOnGround, modelHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_OBJECT_ATTACH_PORTABLE_PICKUP_TO_PED(WrenVM* vm)
    {
        Object pickupObject = (Object)wrenGetSlotDouble(vm, 1);
        Ped ped = (Ped)wrenGetSlotDouble(vm, 2);

        OBJECT::ATTACH_PORTABLE_PICKUP_TO_PED(pickupObject, ped);
    }

    static void WREN_OBJECT_DETACH_PORTABLE_PICKUP_FROM_PED(WrenVM* vm)
    {
        Object pickupObject = (Object)wrenGetSlotDouble(vm, 1);

        OBJECT::DETACH_PORTABLE_PICKUP_FROM_PED(pickupObject);
    }

    static void WREN_OBJECT_FORCE_PORTABLE_PICKUP_LAST_ACCESSIBLE_POSITION_SETTING(WrenVM* vm)
    {
        Object object = (Object)wrenGetSlotDouble(vm, 1);

        OBJECT::FORCE_PORTABLE_PICKUP_LAST_ACCESSIBLE_POSITION_SETTING(object);
    }

    static void WREN_OBJECT_HIDE_PORTABLE_PICKUP_WHEN_DETACHED(WrenVM* vm)
    {
        Object pickupObject = (Object)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        OBJECT::HIDE_PORTABLE_PICKUP_WHEN_DETACHED(pickupObject, toggle);
    }

    static void WREN_OBJECT_SET_MAX_NUM_PORTABLE_PICKUPS_CARRIED_BY_PLAYER(WrenVM* vm)
    {
        Hash modelHash = (Hash)wrenGetSlotDouble(vm, 1);
        int number = (int)wrenGetSlotDouble(vm, 2);

        OBJECT::SET_MAX_NUM_PORTABLE_PICKUPS_CARRIED_BY_PLAYER(modelHash, number);
    }

    static void WREN_OBJECT_SET_LOCAL_PLAYER_CAN_COLLECT_PORTABLE_PICKUPS(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        OBJECT::SET_LOCAL_PLAYER_CAN_COLLECT_PORTABLE_PICKUPS(toggle);
    }

    static void WREN_OBJECT_GET_SAFE_PICKUP_COORDS(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        float p3 = (float)wrenGetSlotDouble(vm, 4);
        float p4 = (float)wrenGetSlotDouble(vm, 5);

        Vector3 res = OBJECT::GET_SAFE_PICKUP_COORDS(x, y, z, p3, p4);

        wrenEnsureSlots(vm, 1);

        wrenGetVariable(vm, "natives", "Vector3", 0);
        Vector3* wren_res = (Vector3*)wrenSetSlotNewForeign(vm, 0, 0, sizeof(Vector3));
        wren_res->x = res.x;
        wren_res->y = res.y;
        wren_res->z = res.z;
    }

    static void WREN_OBJECT_ADD_EXTENDED_PICKUP_PROBE_AREA(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        float radius = (float)wrenGetSlotDouble(vm, 4);

        OBJECT::ADD_EXTENDED_PICKUP_PROBE_AREA(x, y, z, radius);
    }

    static void WREN_OBJECT_CLEAR_EXTENDED_PICKUP_PROBE_AREAS(WrenVM* vm)
    {

        OBJECT::CLEAR_EXTENDED_PICKUP_PROBE_AREAS();
    }

    static void WREN_OBJECT_GET_PICKUP_COORDS(WrenVM* vm)
    {
        Pickup pickup = (Pickup)wrenGetSlotDouble(vm, 1);

        Vector3 res = OBJECT::GET_PICKUP_COORDS(pickup);

        wrenEnsureSlots(vm, 1);

        wrenGetVariable(vm, "natives", "Vector3", 0);
        Vector3* wren_res = (Vector3*)wrenSetSlotNewForeign(vm, 0, 0, sizeof(Vector3));
        wren_res->x = res.x;
        wren_res->y = res.y;
        wren_res->z = res.z;
    }

    static void WREN_OBJECT_SUPPRESS_PICKUP_SOUND_FOR_PICKUP(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        OBJECT::SUPPRESS_PICKUP_SOUND_FOR_PICKUP(p0, p1);
    }

    static void WREN_OBJECT_REMOVE_ALL_PICKUPS_OF_TYPE(WrenVM* vm)
    {
        Hash pickupHash = (Hash)wrenGetSlotDouble(vm, 1);

        OBJECT::REMOVE_ALL_PICKUPS_OF_TYPE(pickupHash);
    }

    static void WREN_OBJECT_HAS_PICKUP_BEEN_COLLECTED(WrenVM* vm)
    {
        Pickup pickup = (Pickup)wrenGetSlotDouble(vm, 1);

        BOOL res = OBJECT::HAS_PICKUP_BEEN_COLLECTED(pickup);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_OBJECT_REMOVE_PICKUP(WrenVM* vm)
    {
        Pickup pickup = (Pickup)wrenGetSlotDouble(vm, 1);

        OBJECT::REMOVE_PICKUP(pickup);
    }

    static void WREN_OBJECT_CREATE_MONEY_PICKUPS(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        int value = (int)wrenGetSlotDouble(vm, 4);
        int amount = (int)wrenGetSlotDouble(vm, 5);
        Hash model = (Hash)wrenGetSlotDouble(vm, 6);

        OBJECT::CREATE_MONEY_PICKUPS(x, y, z, value, amount, model);
    }

    static void WREN_OBJECT_DOES_PICKUP_EXIST(WrenVM* vm)
    {
        Pickup pickup = (Pickup)wrenGetSlotDouble(vm, 1);

        BOOL res = OBJECT::DOES_PICKUP_EXIST(pickup);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_OBJECT_DOES_PICKUP_OBJECT_EXIST(WrenVM* vm)
    {
        Object pickupObject = (Object)wrenGetSlotDouble(vm, 1);

        BOOL res = OBJECT::DOES_PICKUP_OBJECT_EXIST(pickupObject);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_OBJECT_GET_PICKUP_OBJECT(WrenVM* vm)
    {
        Pickup pickup = (Pickup)wrenGetSlotDouble(vm, 1);

        Object res = OBJECT::GET_PICKUP_OBJECT(pickup);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_OBJECT_IS_OBJECT_A_PICKUP(WrenVM* vm)
    {
        Object object = (Object)wrenGetSlotDouble(vm, 1);

        BOOL res = OBJECT::IS_OBJECT_A_PICKUP(object);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_OBJECT_IS_OBJECT_A_PORTABLE_PICKUP(WrenVM* vm)
    {
        Object object = (Object)wrenGetSlotDouble(vm, 1);

        BOOL res = OBJECT::IS_OBJECT_A_PORTABLE_PICKUP(object);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_OBJECT_DOES_PICKUP_OF_TYPE_EXIST_IN_AREA(WrenVM* vm)
    {
        Hash pickupHash = (Hash)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);
        float radius = (float)wrenGetSlotDouble(vm, 5);

        BOOL res = OBJECT::DOES_PICKUP_OF_TYPE_EXIST_IN_AREA(pickupHash, x, y, z, radius);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_OBJECT_SET_PICKUP_REGENERATION_TIME(WrenVM* vm)
    {
        Pickup pickup = (Pickup)wrenGetSlotDouble(vm, 1);
        int duration = (int)wrenGetSlotDouble(vm, 2);

        OBJECT::SET_PICKUP_REGENERATION_TIME(pickup, duration);
    }

    static void WREN_OBJECT_FORCE_PICKUP_REGENERATE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        OBJECT::FORCE_PICKUP_REGENERATE(p0);
    }

    static void WREN_OBJECT_SET_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_OF_TYPE(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        Hash pickupHash = (Hash)wrenGetSlotDouble(vm, 2);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 3);

        OBJECT::SET_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_OF_TYPE(player, pickupHash, toggle);
    }

    static void WREN_OBJECT_SET_LOCAL_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_WITH_MODEL(WrenVM* vm)
    {
        Hash modelHash = (Hash)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        OBJECT::SET_LOCAL_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_WITH_MODEL(modelHash, toggle);
    }

    static void WREN_OBJECT_ALLOW_ALL_PLAYERS_TO_COLLECT_PICKUPS_OF_TYPE(WrenVM* vm)
    {
        Hash pickupHash = (Hash)wrenGetSlotDouble(vm, 1);

        OBJECT::ALLOW_ALL_PLAYERS_TO_COLLECT_PICKUPS_OF_TYPE(pickupHash);
    }

    static void WREN_OBJECT_SET_TEAM_PICKUP_OBJECT(WrenVM* vm)
    {
        Object object = (Object)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        OBJECT::SET_TEAM_PICKUP_OBJECT(object, p1, p2);
    }

    static void WREN_OBJECT_PREVENT_COLLECTION_OF_PORTABLE_PICKUP(WrenVM* vm)
    {
        Object object = (Object)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        OBJECT::PREVENT_COLLECTION_OF_PORTABLE_PICKUP(object, p1, p2);
    }

    static void WREN_OBJECT_SET_PICKUP_OBJECT_GLOW_WHEN_UNCOLLECTABLE(WrenVM* vm)
    {
        Pickup pickup = (Pickup)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        OBJECT::SET_PICKUP_OBJECT_GLOW_WHEN_UNCOLLECTABLE(pickup, toggle);
    }

    static void WREN_OBJECT_SET_PICKUP_GLOW_OFFSET(WrenVM* vm)
    {
        Pickup pickup = (Pickup)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);

        OBJECT::SET_PICKUP_GLOW_OFFSET(pickup, p1);
    }

    static void WREN_OBJECT_SET_PICKUP_OBJECT_GLOW_OFFSET(WrenVM* vm)
    {
        Pickup pickup = (Pickup)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        OBJECT::SET_PICKUP_OBJECT_GLOW_OFFSET(pickup, p1, p2);
    }

    static void WREN_OBJECT_SET_OBJECT_GLOW_IN_SAME_TEAM(WrenVM* vm)
    {
        Pickup pickup = (Pickup)wrenGetSlotDouble(vm, 1);

        OBJECT::SET_OBJECT_GLOW_IN_SAME_TEAM(pickup);
    }

    static void WREN_OBJECT_SET_PICKUP_OBJECT_ARROW_MARKER(WrenVM* vm)
    {
        Pickup pickup = (Pickup)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        OBJECT::SET_PICKUP_OBJECT_ARROW_MARKER(pickup, toggle);
    }

    static void WREN_OBJECT_ALLOW_PICKUP_ARROW_MARKER_WHEN_UNCOLLECTABLE(WrenVM* vm)
    {
        Pickup pickup = (Pickup)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        OBJECT::ALLOW_PICKUP_ARROW_MARKER_WHEN_UNCOLLECTABLE(pickup, toggle);
    }

    static void WREN_OBJECT_GET_DEFAULT_AMMO_FOR_WEAPON_PICKUP(WrenVM* vm)
    {
        Hash pickupHash = (Hash)wrenGetSlotDouble(vm, 1);

        int res = OBJECT::GET_DEFAULT_AMMO_FOR_WEAPON_PICKUP(pickupHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_OBJECT_SET_PICKUP_GENERATION_RANGE_MULTIPLIER(WrenVM* vm)
    {
        float multiplier = (float)wrenGetSlotDouble(vm, 1);

        OBJECT::SET_PICKUP_GENERATION_RANGE_MULTIPLIER(multiplier);
    }

    static void WREN_OBJECT_GET_PICKUP_GENERATION_RANGE_MULTIPLIER(WrenVM* vm)
    {

        float res = OBJECT::GET_PICKUP_GENERATION_RANGE_MULTIPLIER();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_OBJECT_SET_ONLY_ALLOW_AMMO_COLLECTION_WHEN_LOW(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        OBJECT::SET_ONLY_ALLOW_AMMO_COLLECTION_WHEN_LOW(p0);
    }

    static void WREN_OBJECT_SET_PICKUP_UNCOLLECTABLE(WrenVM* vm)
    {
        Pickup pickup = (Pickup)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        OBJECT::SET_PICKUP_UNCOLLECTABLE(pickup, toggle);
    }

    static void WREN_OBJECT_SET_PICKUP_TRANSPARENT_WHEN_UNCOLLECTABLE(WrenVM* vm)
    {
        Pickup pickup = (Pickup)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        OBJECT::SET_PICKUP_TRANSPARENT_WHEN_UNCOLLECTABLE(pickup, toggle);
    }

    static void WREN_OBJECT_SET_PICKUP_HIDDEN_WHEN_UNCOLLECTABLE(WrenVM* vm)
    {
        Pickup pickup = (Pickup)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        OBJECT::SET_PICKUP_HIDDEN_WHEN_UNCOLLECTABLE(pickup, toggle);
    }

    static void WREN_OBJECT_SET_PICKUP_OBJECT_TRANSPARENT_WHEN_UNCOLLECTABLE(WrenVM* vm)
    {
        Pickup pickup = (Pickup)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        OBJECT::SET_PICKUP_OBJECT_TRANSPARENT_WHEN_UNCOLLECTABLE(pickup, toggle);
    }

    static void WREN_OBJECT_SET_PICKUP_OBJECT_ALPHA_WHEN_TRANSPARENT(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);

        OBJECT::SET_PICKUP_OBJECT_ALPHA_WHEN_TRANSPARENT(p0);
    }

    static void WREN_OBJECT_SET_PORTABLE_PICKUP_PERSIST(WrenVM* vm)
    {
        Pickup pickup = (Pickup)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        OBJECT::SET_PORTABLE_PICKUP_PERSIST(pickup, toggle);
    }

    static void WREN_OBJECT_ALLOW_PORTABLE_PICKUP_TO_MIGRATE_TO_NON_PARTICIPANTS(WrenVM* vm)
    {
        Pickup pickup = (Pickup)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        OBJECT::ALLOW_PORTABLE_PICKUP_TO_MIGRATE_TO_NON_PARTICIPANTS(pickup, toggle);
    }

    static void WREN_OBJECT_FORCE_ACTIVATE_PHYSICS_ON_UNFIXED_PICKUP(WrenVM* vm)
    {
        Pickup pickup = (Pickup)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        OBJECT::FORCE_ACTIVATE_PHYSICS_ON_UNFIXED_PICKUP(pickup, toggle);
    }

    static void WREN_OBJECT_ALLOW_PICKUP_BY_NONE_PARTICIPANT(WrenVM* vm)
    {
        Pickup pickup = (Pickup)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        OBJECT::ALLOW_PICKUP_BY_NONE_PARTICIPANT(pickup, toggle);
    }

    static void WREN_OBJECT_SUPPRESS_PICKUP_REWARD_TYPE(WrenVM* vm)
    {
        int rewardType = (int)wrenGetSlotDouble(vm, 1);
        BOOL suppress = (BOOL)wrenGetSlotBool(vm, 2);

        OBJECT::SUPPRESS_PICKUP_REWARD_TYPE(rewardType, suppress);
    }

    static void WREN_OBJECT_CLEAR_ALL_PICKUP_REWARD_TYPE_SUPPRESSION(WrenVM* vm)
    {

        OBJECT::CLEAR_ALL_PICKUP_REWARD_TYPE_SUPPRESSION();
    }

    static void WREN_OBJECT_CLEAR_PICKUP_REWARD_TYPE_SUPPRESSION(WrenVM* vm)
    {
        int rewardType = (int)wrenGetSlotDouble(vm, 1);

        OBJECT::CLEAR_PICKUP_REWARD_TYPE_SUPPRESSION(rewardType);
    }

    static void WREN_OBJECT_RENDER_FAKE_PICKUP_GLOW(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        int colorIndex = (int)wrenGetSlotDouble(vm, 4);

        OBJECT::RENDER_FAKE_PICKUP_GLOW(x, y, z, colorIndex);
    }

    static void WREN_OBJECT_SET_PICKUP_OBJECT_COLLECTABLE_IN_VEHICLE(WrenVM* vm)
    {
        Pickup pickup = (Pickup)wrenGetSlotDouble(vm, 1);

        OBJECT::SET_PICKUP_OBJECT_COLLECTABLE_IN_VEHICLE(pickup);
    }

    static void WREN_OBJECT_SET_PICKUP_TRACK_DAMAGE_EVENTS(WrenVM* vm)
    {
        Pickup pickup = (Pickup)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        OBJECT::SET_PICKUP_TRACK_DAMAGE_EVENTS(pickup, toggle);
    }

    static void WREN_OBJECT_SET_ENTITY_FLAG_SUPPRESS_SHADOW(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        OBJECT::SET_ENTITY_FLAG_SUPPRESS_SHADOW(entity, toggle);
    }

    static void WREN_OBJECT_SET_ENTITY_FLAG_RENDER_SMALL_SHADOW(WrenVM* vm)
    {
        Object object = (Object)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        OBJECT::SET_ENTITY_FLAG_RENDER_SMALL_SHADOW(object, toggle);
    }

    static void WREN_OBJECT_GET_WEAPON_TYPE_FROM_PICKUP_TYPE(WrenVM* vm)
    {
        Hash pickupHash = (Hash)wrenGetSlotDouble(vm, 1);

        Hash res = OBJECT::GET_WEAPON_TYPE_FROM_PICKUP_TYPE(pickupHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_OBJECT_GET_PICKUP_TYPE_FROM_WEAPON_HASH(WrenVM* vm)
    {
        Hash weaponHash = (Hash)wrenGetSlotDouble(vm, 1);

        Hash res = OBJECT::GET_PICKUP_TYPE_FROM_WEAPON_HASH(weaponHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_OBJECT_IS_PICKUP_WEAPON_OBJECT_VALID(WrenVM* vm)
    {
        Object object = (Object)wrenGetSlotDouble(vm, 1);

        BOOL res = OBJECT::IS_PICKUP_WEAPON_OBJECT_VALID(object);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_OBJECT_GET_OBJECT_TINT_INDEX(WrenVM* vm)
    {
        Object object = (Object)wrenGetSlotDouble(vm, 1);

        int res = OBJECT::GET_OBJECT_TINT_INDEX(object);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_OBJECT_SET_OBJECT_TINT_INDEX(WrenVM* vm)
    {
        Object object = (Object)wrenGetSlotDouble(vm, 1);
        int textureVariation = (int)wrenGetSlotDouble(vm, 2);

        OBJECT::SET_OBJECT_TINT_INDEX(object, textureVariation);
    }

    static void WREN_OBJECT_SET_TINT_INDEX_CLOSEST_BUILDING_OF_TYPE(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        float radius = (float)wrenGetSlotDouble(vm, 4);
        Hash modelHash = (Hash)wrenGetSlotDouble(vm, 5);
        int textureVariation = (int)wrenGetSlotDouble(vm, 6);

        BOOL res = OBJECT::SET_TINT_INDEX_CLOSEST_BUILDING_OF_TYPE(x, y, z, radius, modelHash, textureVariation);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_OBJECT_SET_PROP_TINT_INDEX(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        OBJECT::SET_PROP_TINT_INDEX(p0, p1);
    }

    static void WREN_OBJECT_SET_PROP_LIGHT_COLOR(WrenVM* vm)
    {
        Object object = (Object)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        int r = (int)wrenGetSlotDouble(vm, 3);
        int g = (int)wrenGetSlotDouble(vm, 4);
        int b = (int)wrenGetSlotDouble(vm, 5);

        Any res = OBJECT::SET_PROP_LIGHT_COLOR(object, p1, r, g, b);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_OBJECT_IS_PROP_LIGHT_OVERRIDEN(WrenVM* vm)
    {
        Object object = (Object)wrenGetSlotDouble(vm, 1);

        BOOL res = OBJECT::IS_PROP_LIGHT_OVERRIDEN(object);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_OBJECT_SET_OBJECT_IS_VISIBLE_IN_MIRRORS(WrenVM* vm)
    {
        Object object = (Object)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        OBJECT::SET_OBJECT_IS_VISIBLE_IN_MIRRORS(object, toggle);
    }

    static void WREN_OBJECT_SET_OBJECT_SPEED_BOOST_AMOUNT(WrenVM* vm)
    {
        Object object = (Object)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        OBJECT::SET_OBJECT_SPEED_BOOST_AMOUNT(object, p1);
    }

    static void WREN_OBJECT_SET_OBJECT_SPEED_BOOST_DURATION(WrenVM* vm)
    {
        Object object = (Object)wrenGetSlotDouble(vm, 1);
        float duration = (float)wrenGetSlotDouble(vm, 2);

        OBJECT::SET_OBJECT_SPEED_BOOST_DURATION(object, duration);
    }

    static void WREN_OBJECT_CONVERT_OLD_PICKUP_TYPE_TO_NEW(WrenVM* vm)
    {
        Hash pickupHash = (Hash)wrenGetSlotDouble(vm, 1);

        Hash res = OBJECT::CONVERT_OLD_PICKUP_TYPE_TO_NEW(pickupHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_OBJECT_SET_FORCE_OBJECT_THIS_FRAME(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        float p3 = (float)wrenGetSlotDouble(vm, 4);

        OBJECT::SET_FORCE_OBJECT_THIS_FRAME(x, y, z, p3);
    }

    static void WREN_OBJECT_ONLY_CLEAN_UP_OBJECT_WHEN_OUT_OF_RANGE(WrenVM* vm)
    {
        Object object = (Object)wrenGetSlotDouble(vm, 1);

        OBJECT::ONLY_CLEAN_UP_OBJECT_WHEN_OUT_OF_RANGE(object);
    }

    static void WREN_OBJECT_SET_DISABLE_COLLISIONS_BETWEEN_CARS_AND_CAR_PARACHUTE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        OBJECT::SET_DISABLE_COLLISIONS_BETWEEN_CARS_AND_CAR_PARACHUTE(p0);
    }

    static void WREN_OBJECT_SET_PROJECTILES_SHOULD_EXPLODE_ON_CONTACT(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        OBJECT::SET_PROJECTILES_SHOULD_EXPLODE_ON_CONTACT(p0, p1);
    }

    static void WREN_OBJECT_SET_DRIVE_ARTICULATED_JOINT(WrenVM* vm)
    {
        Object object = (Object)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);
        int p2 = (int)wrenGetSlotDouble(vm, 3);

        OBJECT::SET_DRIVE_ARTICULATED_JOINT(object, toggle, p2);
    }

    static void WREN_OBJECT_SET_DRIVE_ARTICULATED_JOINT_WITH_INFLICTOR(WrenVM* vm)
    {
        Object object = (Object)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);
        int p2 = (int)wrenGetSlotDouble(vm, 3);
        Ped ped = (Ped)wrenGetSlotDouble(vm, 4);

        OBJECT::SET_DRIVE_ARTICULATED_JOINT_WITH_INFLICTOR(object, toggle, p2, ped);
    }

    static void WREN_OBJECT_SET_OBJECT_IS_A_PRESSURE_PLATE(WrenVM* vm)
    {
        Object object = (Object)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        OBJECT::SET_OBJECT_IS_A_PRESSURE_PLATE(object, toggle);
    }

    static void WREN_OBJECT_SET_WEAPON_IMPACTS_APPLY_GREATER_FORCE(WrenVM* vm)
    {
        Object object = (Object)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        OBJECT::SET_WEAPON_IMPACTS_APPLY_GREATER_FORCE(object, p1);
    }

    static void WREN_OBJECT_GET_IS_ARTICULATED_JOINT_AT_MIN_ANGLE(WrenVM* vm)
    {
        Object object = (Object)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        BOOL res = OBJECT::GET_IS_ARTICULATED_JOINT_AT_MIN_ANGLE(object, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_OBJECT_GET_IS_ARTICULATED_JOINT_AT_MAX_ANGLE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        Any res = OBJECT::GET_IS_ARTICULATED_JOINT_AT_MAX_ANGLE(p0, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_OBJECT_SET_IS_OBJECT_ARTICULATED(WrenVM* vm)
    {
        Object object = (Object)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        OBJECT::SET_IS_OBJECT_ARTICULATED(object, toggle);
    }

    static void WREN_OBJECT_SET_IS_OBJECT_BALL(WrenVM* vm)
    {
        Object object = (Object)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        OBJECT::SET_IS_OBJECT_BALL(object, toggle);
    }


    static void WREN_PAD_IS_CONTROL_ENABLED(WrenVM* vm)
    {
        int padIndex = (int)wrenGetSlotDouble(vm, 1);
        int control = (int)wrenGetSlotDouble(vm, 2);

        BOOL res = PAD::IS_CONTROL_ENABLED(padIndex, control);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PAD_IS_CONTROL_PRESSED(WrenVM* vm)
    {
        int padIndex = (int)wrenGetSlotDouble(vm, 1);
        int control = (int)wrenGetSlotDouble(vm, 2);

        BOOL res = PAD::IS_CONTROL_PRESSED(padIndex, control);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PAD_IS_CONTROL_RELEASED(WrenVM* vm)
    {
        int padIndex = (int)wrenGetSlotDouble(vm, 1);
        int control = (int)wrenGetSlotDouble(vm, 2);

        BOOL res = PAD::IS_CONTROL_RELEASED(padIndex, control);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PAD_IS_CONTROL_JUST_PRESSED(WrenVM* vm)
    {
        int padIndex = (int)wrenGetSlotDouble(vm, 1);
        int control = (int)wrenGetSlotDouble(vm, 2);

        BOOL res = PAD::IS_CONTROL_JUST_PRESSED(padIndex, control);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PAD_IS_CONTROL_JUST_RELEASED(WrenVM* vm)
    {
        int padIndex = (int)wrenGetSlotDouble(vm, 1);
        int control = (int)wrenGetSlotDouble(vm, 2);

        BOOL res = PAD::IS_CONTROL_JUST_RELEASED(padIndex, control);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PAD_GET_CONTROL_VALUE(WrenVM* vm)
    {
        int padIndex = (int)wrenGetSlotDouble(vm, 1);
        int control = (int)wrenGetSlotDouble(vm, 2);

        int res = PAD::GET_CONTROL_VALUE(padIndex, control);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PAD_GET_CONTROL_NORMAL(WrenVM* vm)
    {
        int padIndex = (int)wrenGetSlotDouble(vm, 1);
        int control = (int)wrenGetSlotDouble(vm, 2);

        float res = PAD::GET_CONTROL_NORMAL(padIndex, control);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PAD_SET_USE_ADJUSTED_MOUSE_COORDS(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        PAD::SET_USE_ADJUSTED_MOUSE_COORDS(p0);
    }

    static void WREN_PAD_GET_CONTROL_UNBOUND_NORMAL(WrenVM* vm)
    {
        int padIndex = (int)wrenGetSlotDouble(vm, 1);
        int control = (int)wrenGetSlotDouble(vm, 2);

        float res = PAD::GET_CONTROL_UNBOUND_NORMAL(padIndex, control);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PAD_SET_CONTROL_VALUE_NEXT_FRAME(WrenVM* vm)
    {
        int padIndex = (int)wrenGetSlotDouble(vm, 1);
        int control = (int)wrenGetSlotDouble(vm, 2);
        float amount = (float)wrenGetSlotDouble(vm, 3);

        BOOL res = PAD::SET_CONTROL_VALUE_NEXT_FRAME(padIndex, control, amount);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PAD_IS_DISABLED_CONTROL_PRESSED(WrenVM* vm)
    {
        int padIndex = (int)wrenGetSlotDouble(vm, 1);
        int control = (int)wrenGetSlotDouble(vm, 2);

        BOOL res = PAD::IS_DISABLED_CONTROL_PRESSED(padIndex, control);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PAD_IS_DISABLED_CONTROL_RELEASED(WrenVM* vm)
    {
        int padIndex = (int)wrenGetSlotDouble(vm, 1);
        int control = (int)wrenGetSlotDouble(vm, 2);

        BOOL res = PAD::IS_DISABLED_CONTROL_RELEASED(padIndex, control);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PAD_IS_DISABLED_CONTROL_JUST_PRESSED(WrenVM* vm)
    {
        int padIndex = (int)wrenGetSlotDouble(vm, 1);
        int control = (int)wrenGetSlotDouble(vm, 2);

        BOOL res = PAD::IS_DISABLED_CONTROL_JUST_PRESSED(padIndex, control);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PAD_IS_DISABLED_CONTROL_JUST_RELEASED(WrenVM* vm)
    {
        int padIndex = (int)wrenGetSlotDouble(vm, 1);
        int control = (int)wrenGetSlotDouble(vm, 2);

        BOOL res = PAD::IS_DISABLED_CONTROL_JUST_RELEASED(padIndex, control);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PAD_GET_DISABLED_CONTROL_NORMAL(WrenVM* vm)
    {
        int padIndex = (int)wrenGetSlotDouble(vm, 1);
        int control = (int)wrenGetSlotDouble(vm, 2);

        float res = PAD::GET_DISABLED_CONTROL_NORMAL(padIndex, control);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PAD_GET_DISABLED_CONTROL_UNBOUND_NORMAL(WrenVM* vm)
    {
        int padIndex = (int)wrenGetSlotDouble(vm, 1);
        int control = (int)wrenGetSlotDouble(vm, 2);

        float res = PAD::GET_DISABLED_CONTROL_UNBOUND_NORMAL(padIndex, control);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PAD_GET_CONTROL_HOW_LONG_AGO(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);

        int res = PAD::GET_CONTROL_HOW_LONG_AGO(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PAD_IS_USING_KEYBOARD_AND_MOUSE(WrenVM* vm)
    {
        int padIndex = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = PAD::IS_USING_KEYBOARD_AND_MOUSE(padIndex);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PAD_IS_USING_CURSOR(WrenVM* vm)
    {
        int padIndex = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = PAD::IS_USING_CURSOR(padIndex);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PAD_SET_CURSOR_POSITION(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);

        BOOL res = PAD::SET_CURSOR_POSITION(x, y);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PAD_IS_USING_REMOTE_PLAY(WrenVM* vm)
    {
        int padIndex = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = PAD::IS_USING_REMOTE_PLAY(padIndex);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PAD_HAVE_CONTROLS_CHANGED(WrenVM* vm)
    {
        int padIndex = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = PAD::HAVE_CONTROLS_CHANGED(padIndex);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PAD_GET_CONTROL_INSTRUCTIONAL_BUTTONS_STRING(WrenVM* vm)
    {
        int padIndex = (int)wrenGetSlotDouble(vm, 1);
        int control = (int)wrenGetSlotDouble(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        const char* res = PAD::GET_CONTROL_INSTRUCTIONAL_BUTTONS_STRING(padIndex, control, p2);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotString(vm, 0, res);
    }

    static void WREN_PAD_GET_CONTROL_GROUP_INSTRUCTIONAL_BUTTONS_STRING(WrenVM* vm)
    {
        int padIndex = (int)wrenGetSlotDouble(vm, 1);
        int controlGroup = (int)wrenGetSlotDouble(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        const char* res = PAD::GET_CONTROL_GROUP_INSTRUCTIONAL_BUTTONS_STRING(padIndex, controlGroup, p2);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotString(vm, 0, res);
    }

    static void WREN_PAD_SET_CONTROL_LIGHT_EFFECT_COLOR(WrenVM* vm)
    {
        int padIndex = (int)wrenGetSlotDouble(vm, 1);
        int red = (int)wrenGetSlotDouble(vm, 2);
        int green = (int)wrenGetSlotDouble(vm, 3);
        int blue = (int)wrenGetSlotDouble(vm, 4);

        PAD::SET_CONTROL_LIGHT_EFFECT_COLOR(padIndex, red, green, blue);
    }

    static void WREN_PAD_CLEAR_CONTROL_LIGHT_EFFECT(WrenVM* vm)
    {
        int padIndex = (int)wrenGetSlotDouble(vm, 1);

        PAD::CLEAR_CONTROL_LIGHT_EFFECT(padIndex);
    }

    static void WREN_PAD_SET_CONTROL_SHAKE(WrenVM* vm)
    {
        int padIndex = (int)wrenGetSlotDouble(vm, 1);
        int duration = (int)wrenGetSlotDouble(vm, 2);
        int frequency = (int)wrenGetSlotDouble(vm, 3);

        PAD::SET_CONTROL_SHAKE(padIndex, duration, frequency);
    }

    static void WREN_PAD_SET_CONTROL_TRIGGER_SHAKE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);

        PAD::SET_CONTROL_TRIGGER_SHAKE(p0, p1, p2, p3, p4);
    }

    static void WREN_PAD_STOP_CONTROL_SHAKE(WrenVM* vm)
    {
        int padIndex = (int)wrenGetSlotDouble(vm, 1);

        PAD::STOP_CONTROL_SHAKE(padIndex);
    }

    static void WREN_PAD_SET_CONTROL_SHAKE_SUPPRESSED_ID(WrenVM* vm)
    {
        int padIndex = (int)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        PAD::SET_CONTROL_SHAKE_SUPPRESSED_ID(padIndex, p1);
    }

    static void WREN_PAD_CLEAR_CONTROL_SHAKE_SUPPRESSED_ID(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);

        PAD::CLEAR_CONTROL_SHAKE_SUPPRESSED_ID(p0);
    }

    static void WREN_PAD_IS_LOOK_INVERTED(WrenVM* vm)
    {

        BOOL res = PAD::IS_LOOK_INVERTED();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PAD_IS_MOUSE_LOOK_INVERTED(WrenVM* vm)
    {

        BOOL res = PAD::IS_MOUSE_LOOK_INVERTED();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PAD_GET_LOCAL_PLAYER_AIM_STATE(WrenVM* vm)
    {

        int res = PAD::GET_LOCAL_PLAYER_AIM_STATE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PAD_GET_LOCAL_PLAYER_GAMEPAD_AIM_STATE(WrenVM* vm)
    {

        int res = PAD::GET_LOCAL_PLAYER_GAMEPAD_AIM_STATE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PAD_GET_IS_USING_ALTERNATE_HANDBRAKE(WrenVM* vm)
    {

        BOOL res = PAD::GET_IS_USING_ALTERNATE_HANDBRAKE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PAD_GET_IS_USING_ALTERNATE_DRIVEBY(WrenVM* vm)
    {

        BOOL res = PAD::GET_IS_USING_ALTERNATE_DRIVEBY();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PAD_GET_ALLOW_MOVEMENT_WHILE_ZOOMED(WrenVM* vm)
    {

        BOOL res = PAD::GET_ALLOW_MOVEMENT_WHILE_ZOOMED();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PAD_SET_PLAYERPAD_SHAKES_WHEN_CONTROLLER_DISABLED(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        PAD::SET_PLAYERPAD_SHAKES_WHEN_CONTROLLER_DISABLED(toggle);
    }

    static void WREN_PAD_SET_INPUT_EXCLUSIVE(WrenVM* vm)
    {
        int padIndex = (int)wrenGetSlotDouble(vm, 1);
        int control = (int)wrenGetSlotDouble(vm, 2);

        PAD::SET_INPUT_EXCLUSIVE(padIndex, control);
    }

    static void WREN_PAD_DISABLE_CONTROL_ACTION(WrenVM* vm)
    {
        int padIndex = (int)wrenGetSlotDouble(vm, 1);
        int control = (int)wrenGetSlotDouble(vm, 2);
        BOOL disable = (BOOL)wrenGetSlotBool(vm, 3);

        PAD::DISABLE_CONTROL_ACTION(padIndex, control, disable);
    }

    static void WREN_PAD_ENABLE_CONTROL_ACTION(WrenVM* vm)
    {
        int padIndex = (int)wrenGetSlotDouble(vm, 1);
        int control = (int)wrenGetSlotDouble(vm, 2);
        BOOL enable = (BOOL)wrenGetSlotBool(vm, 3);

        PAD::ENABLE_CONTROL_ACTION(padIndex, control, enable);
    }

    static void WREN_PAD_DISABLE_ALL_CONTROL_ACTIONS(WrenVM* vm)
    {
        int padIndex = (int)wrenGetSlotDouble(vm, 1);

        PAD::DISABLE_ALL_CONTROL_ACTIONS(padIndex);
    }

    static void WREN_PAD_ENABLE_ALL_CONTROL_ACTIONS(WrenVM* vm)
    {
        int padIndex = (int)wrenGetSlotDouble(vm, 1);

        PAD::ENABLE_ALL_CONTROL_ACTIONS(padIndex);
    }

    static void WREN_PAD_INIT_PC_SCRIPTED_CONTROLS(WrenVM* vm)
    {
        const char* name = wrenGetSlotString(vm, 1);

        BOOL res = PAD::INIT_PC_SCRIPTED_CONTROLS(name);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PAD_SWITCH_PC_SCRIPTED_CONTROLS(WrenVM* vm)
    {
        const char* name = wrenGetSlotString(vm, 1);

        BOOL res = PAD::SWITCH_PC_SCRIPTED_CONTROLS(name);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PAD_SHUTDOWN_PC_SCRIPTED_CONTROLS(WrenVM* vm)
    {

        PAD::SHUTDOWN_PC_SCRIPTED_CONTROLS();
    }

    static void WREN_PAD_ALLOW_ALTERNATIVE_SCRIPT_CONTROLS_LAYOUT(WrenVM* vm)
    {
        int padIndex = (int)wrenGetSlotDouble(vm, 1);

        PAD::ALLOW_ALTERNATIVE_SCRIPT_CONTROLS_LAYOUT(padIndex);
    }


    static void WREN_PATHFIND_SET_ROADS_IN_AREA(WrenVM* vm)
    {
        float x1 = (float)wrenGetSlotDouble(vm, 1);
        float y1 = (float)wrenGetSlotDouble(vm, 2);
        float z1 = (float)wrenGetSlotDouble(vm, 3);
        float x2 = (float)wrenGetSlotDouble(vm, 4);
        float y2 = (float)wrenGetSlotDouble(vm, 5);
        float z2 = (float)wrenGetSlotDouble(vm, 6);
        BOOL nodeEnabled = (BOOL)wrenGetSlotBool(vm, 7);
        BOOL unknown2 = (BOOL)wrenGetSlotBool(vm, 8);

        PATHFIND::SET_ROADS_IN_AREA(x1, y1, z1, x2, y2, z2, nodeEnabled, unknown2);
    }

    static void WREN_PATHFIND_SET_ROADS_IN_ANGLED_AREA(WrenVM* vm)
    {
        float x1 = (float)wrenGetSlotDouble(vm, 1);
        float y1 = (float)wrenGetSlotDouble(vm, 2);
        float z1 = (float)wrenGetSlotDouble(vm, 3);
        float x2 = (float)wrenGetSlotDouble(vm, 4);
        float y2 = (float)wrenGetSlotDouble(vm, 5);
        float z2 = (float)wrenGetSlotDouble(vm, 6);
        float width = (float)wrenGetSlotDouble(vm, 7);
        BOOL unknown1 = (BOOL)wrenGetSlotBool(vm, 8);
        BOOL unknown2 = (BOOL)wrenGetSlotBool(vm, 9);
        BOOL unknown3 = (BOOL)wrenGetSlotBool(vm, 10);

        PATHFIND::SET_ROADS_IN_ANGLED_AREA(x1, y1, z1, x2, y2, z2, width, unknown1, unknown2, unknown3);
    }

    static void WREN_PATHFIND_SET_PED_PATHS_IN_AREA(WrenVM* vm)
    {
        float x1 = (float)wrenGetSlotDouble(vm, 1);
        float y1 = (float)wrenGetSlotDouble(vm, 2);
        float z1 = (float)wrenGetSlotDouble(vm, 3);
        float x2 = (float)wrenGetSlotDouble(vm, 4);
        float y2 = (float)wrenGetSlotDouble(vm, 5);
        float z2 = (float)wrenGetSlotDouble(vm, 6);
        BOOL unknown = (BOOL)wrenGetSlotBool(vm, 7);
        Any p7 = (Any)wrenGetSlotDouble(vm, 8);

        PATHFIND::SET_PED_PATHS_IN_AREA(x1, y1, z1, x2, y2, z2, unknown, p7);
    }

    static void WREN_PATHFIND_GET_SAFE_COORD_FOR_PED(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        BOOL onGround = (BOOL)wrenGetSlotBool(vm, 4);
        Vector3 outPosition;
        int flags = (int)wrenGetSlotDouble(vm, 5);

        BOOL res = PATHFIND::GET_SAFE_COORD_FOR_PED(x, y, z, onGround, &outPosition, flags);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenGetVariable(vm, "natives", "Vector3", 2);
        Vector3* wren_outPosition = (Vector3*)wrenSetSlotNewForeign(vm, 3, 2, sizeof(Vector3));
        wren_outPosition->x = outPosition.x;
        wren_outPosition->y = outPosition.y;
        wren_outPosition->z = outPosition.z;
        wrenInsertInList(vm, 0, 1, 3);

    }

    static void WREN_PATHFIND_GET_CLOSEST_VEHICLE_NODE(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        Vector3 outPosition;
        int nodeType = (int)wrenGetSlotDouble(vm, 4);
        float p5 = (float)wrenGetSlotDouble(vm, 5);
        float p6 = (float)wrenGetSlotDouble(vm, 6);

        BOOL res = PATHFIND::GET_CLOSEST_VEHICLE_NODE(x, y, z, &outPosition, nodeType, p5, p6);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenGetVariable(vm, "natives", "Vector3", 2);
        Vector3* wren_outPosition = (Vector3*)wrenSetSlotNewForeign(vm, 3, 2, sizeof(Vector3));
        wren_outPosition->x = outPosition.x;
        wren_outPosition->y = outPosition.y;
        wren_outPosition->z = outPosition.z;
        wrenInsertInList(vm, 0, 1, 3);

    }

    static void WREN_PATHFIND_GET_CLOSEST_MAJOR_VEHICLE_NODE(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        Vector3 outPosition;
        float unknown1 = (float)wrenGetSlotDouble(vm, 4);
        int unknown2 = (int)wrenGetSlotDouble(vm, 5);

        BOOL res = PATHFIND::GET_CLOSEST_MAJOR_VEHICLE_NODE(x, y, z, &outPosition, unknown1, unknown2);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenGetVariable(vm, "natives", "Vector3", 2);
        Vector3* wren_outPosition = (Vector3*)wrenSetSlotNewForeign(vm, 3, 2, sizeof(Vector3));
        wren_outPosition->x = outPosition.x;
        wren_outPosition->y = outPosition.y;
        wren_outPosition->z = outPosition.z;
        wrenInsertInList(vm, 0, 1, 3);

    }

    static void WREN_PATHFIND_GET_CLOSEST_VEHICLE_NODE_WITH_HEADING(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        Vector3 outPosition;
        float outHeading;
        int nodeType = (int)wrenGetSlotDouble(vm, 4);
        float p6 = (float)wrenGetSlotDouble(vm, 5);
        int p7 = (int)wrenGetSlotDouble(vm, 6);

        BOOL res = PATHFIND::GET_CLOSEST_VEHICLE_NODE_WITH_HEADING(x, y, z, &outPosition, &outHeading, nodeType, p6, p7);

        wrenEnsureSlots(vm, 6);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenGetVariable(vm, "natives", "Vector3", 2);
        Vector3* wren_outPosition = (Vector3*)wrenSetSlotNewForeign(vm, 3, 2, sizeof(Vector3));
        wren_outPosition->x = outPosition.x;
        wren_outPosition->y = outPosition.y;
        wren_outPosition->z = outPosition.z;
        wrenInsertInList(vm, 0, 1, 3);

        wrenSetSlotDouble(vm, 4, outHeading);
        wrenInsertInList(vm, 0, 2, 4);
    }

    static void WREN_PATHFIND_GET_NTH_CLOSEST_VEHICLE_NODE(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        int nthClosest = (int)wrenGetSlotDouble(vm, 4);
        Vector3 outPosition;
        Any unknown1 = (Any)wrenGetSlotDouble(vm, 5);
        Any unknown2 = (Any)wrenGetSlotDouble(vm, 6);
        Any unknown3 = (Any)wrenGetSlotDouble(vm, 7);

        BOOL res = PATHFIND::GET_NTH_CLOSEST_VEHICLE_NODE(x, y, z, nthClosest, &outPosition, unknown1, unknown2, unknown3);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenGetVariable(vm, "natives", "Vector3", 2);
        Vector3* wren_outPosition = (Vector3*)wrenSetSlotNewForeign(vm, 3, 2, sizeof(Vector3));
        wren_outPosition->x = outPosition.x;
        wren_outPosition->y = outPosition.y;
        wren_outPosition->z = outPosition.z;
        wrenInsertInList(vm, 0, 1, 3);

    }

    static void WREN_PATHFIND_GET_NTH_CLOSEST_VEHICLE_NODE_ID(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        int nth = (int)wrenGetSlotDouble(vm, 4);
        int nodetype = (int)wrenGetSlotDouble(vm, 5);
        float p5 = (float)wrenGetSlotDouble(vm, 6);
        float p6 = (float)wrenGetSlotDouble(vm, 7);

        int res = PATHFIND::GET_NTH_CLOSEST_VEHICLE_NODE_ID(x, y, z, nth, nodetype, p5, p6);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PATHFIND_GET_NTH_CLOSEST_VEHICLE_NODE_WITH_HEADING(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        int nthClosest = (int)wrenGetSlotDouble(vm, 4);
        Vector3 outPosition;
        float outHeading;
        Any unknown1;
        int unknown2 = (int)wrenGetSlotDouble(vm, 5);
        float unknown3 = (float)wrenGetSlotDouble(vm, 6);
        float unknown4 = (float)wrenGetSlotDouble(vm, 7);

        BOOL res = PATHFIND::GET_NTH_CLOSEST_VEHICLE_NODE_WITH_HEADING(x, y, z, nthClosest, &outPosition, &outHeading, &unknown1, unknown2, unknown3, unknown4);

        wrenEnsureSlots(vm, 8);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenGetVariable(vm, "natives", "Vector3", 2);
        Vector3* wren_outPosition = (Vector3*)wrenSetSlotNewForeign(vm, 3, 2, sizeof(Vector3));
        wren_outPosition->x = outPosition.x;
        wren_outPosition->y = outPosition.y;
        wren_outPosition->z = outPosition.z;
        wrenInsertInList(vm, 0, 1, 3);

        wrenSetSlotDouble(vm, 4, outHeading);
        wrenInsertInList(vm, 0, 2, 4);

        wrenSetSlotDouble(vm, 5, unknown1);
        wrenInsertInList(vm, 0, 3, 5);

    }

    static void WREN_PATHFIND_GET_NTH_CLOSEST_VEHICLE_NODE_ID_WITH_HEADING(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        int nthClosest = (int)wrenGetSlotDouble(vm, 4);
        Vector3 outPosition;
        float outHeading;
        Any p6 = (Any)wrenGetSlotDouble(vm, 5);
        float p7 = (float)wrenGetSlotDouble(vm, 6);
        float p8 = (float)wrenGetSlotDouble(vm, 7);

        int res = PATHFIND::GET_NTH_CLOSEST_VEHICLE_NODE_ID_WITH_HEADING(x, y, z, nthClosest, &outPosition, &outHeading, p6, p7, p8);

        wrenEnsureSlots(vm, 6);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenGetVariable(vm, "natives", "Vector3", 2);
        Vector3* wren_outPosition = (Vector3*)wrenSetSlotNewForeign(vm, 3, 2, sizeof(Vector3));
        wren_outPosition->x = outPosition.x;
        wren_outPosition->y = outPosition.y;
        wren_outPosition->z = outPosition.z;
        wrenInsertInList(vm, 0, 1, 3);

        wrenSetSlotDouble(vm, 4, outHeading);
        wrenInsertInList(vm, 0, 2, 4);

    }

    static void WREN_PATHFIND_GET_NTH_CLOSEST_VEHICLE_NODE_FAVOUR_DIRECTION(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        float desiredX = (float)wrenGetSlotDouble(vm, 4);
        float desiredY = (float)wrenGetSlotDouble(vm, 5);
        float desiredZ = (float)wrenGetSlotDouble(vm, 6);
        int nthClosest = (int)wrenGetSlotDouble(vm, 7);
        Vector3 outPosition;
        float outHeading;
        int nodetype = (int)wrenGetSlotDouble(vm, 8);
        float p10 = (float)wrenGetSlotDouble(vm, 9);
        Any p11 = (Any)wrenGetSlotDouble(vm, 10);

        BOOL res = PATHFIND::GET_NTH_CLOSEST_VEHICLE_NODE_FAVOUR_DIRECTION(x, y, z, desiredX, desiredY, desiredZ, nthClosest, &outPosition, &outHeading, nodetype, p10, p11);

        wrenEnsureSlots(vm, 6);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenGetVariable(vm, "natives", "Vector3", 2);
        Vector3* wren_outPosition = (Vector3*)wrenSetSlotNewForeign(vm, 3, 2, sizeof(Vector3));
        wren_outPosition->x = outPosition.x;
        wren_outPosition->y = outPosition.y;
        wren_outPosition->z = outPosition.z;
        wrenInsertInList(vm, 0, 1, 3);

        wrenSetSlotDouble(vm, 4, outHeading);
        wrenInsertInList(vm, 0, 2, 4);

    }

    static void WREN_PATHFIND_GET_VEHICLE_NODE_PROPERTIES(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        int density;
        int flags;

        BOOL res = PATHFIND::GET_VEHICLE_NODE_PROPERTIES(x, y, z, &density, &flags);

        wrenEnsureSlots(vm, 6);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, density);
        wrenInsertInList(vm, 0, 1, 2);

        wrenSetSlotDouble(vm, 3, flags);
        wrenInsertInList(vm, 0, 2, 3);

    }

    static void WREN_PATHFIND_IS_VEHICLE_NODE_ID_VALID(WrenVM* vm)
    {
        int vehicleNodeId = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = PATHFIND::IS_VEHICLE_NODE_ID_VALID(vehicleNodeId);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PATHFIND_GET_VEHICLE_NODE_POSITION(WrenVM* vm)
    {
        int nodeId = (int)wrenGetSlotDouble(vm, 1);
        Vector3 outPosition;

        PATHFIND::GET_VEHICLE_NODE_POSITION(nodeId, &outPosition);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_PATHFIND_GET_VEHICLE_NODE_IS_GPS_ALLOWED(WrenVM* vm)
    {
        int nodeID = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = PATHFIND::GET_VEHICLE_NODE_IS_GPS_ALLOWED(nodeID);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PATHFIND_GET_VEHICLE_NODE_IS_SWITCHED_OFF(WrenVM* vm)
    {
        int nodeID = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = PATHFIND::GET_VEHICLE_NODE_IS_SWITCHED_OFF(nodeID);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PATHFIND_GET_CLOSEST_ROAD(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        float p3 = (float)wrenGetSlotDouble(vm, 4);
        int p4 = (int)wrenGetSlotDouble(vm, 5);
        Vector3 p5;
        Vector3 p6;
        Any p7;
        Any p8;
        float p9;
        BOOL p10 = (BOOL)wrenGetSlotBool(vm, 6);

        Any res = PATHFIND::GET_CLOSEST_ROAD(x, y, z, p3, p4, &p5, &p6, &p7, &p8, &p9, p10);

        wrenEnsureSlots(vm, 12);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenGetVariable(vm, "natives", "Vector3", 2);
        Vector3* wren_p5 = (Vector3*)wrenSetSlotNewForeign(vm, 3, 2, sizeof(Vector3));
        wren_p5->x = p5.x;
        wren_p5->y = p5.y;
        wren_p5->z = p5.z;
        wrenInsertInList(vm, 0, 1, 3);

        Vector3* wren_p6 = (Vector3*)wrenSetSlotNewForeign(vm, 4, 2, sizeof(Vector3));
        wren_p6->x = p6.x;
        wren_p6->y = p6.y;
        wren_p6->z = p6.z;
        wrenInsertInList(vm, 0, 2, 4);

        wrenSetSlotDouble(vm, 5, p7);
        wrenInsertInList(vm, 0, 3, 5);

        wrenSetSlotDouble(vm, 6, p8);
        wrenInsertInList(vm, 0, 4, 6);

        wrenSetSlotDouble(vm, 7, p9);
        wrenInsertInList(vm, 0, 5, 7);

    }

    static void WREN_PATHFIND_SET_ALLOW_STREAM_PROLOGUE_NODES(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        PATHFIND::SET_ALLOW_STREAM_PROLOGUE_NODES(toggle);
    }

    static void WREN_PATHFIND_SET_ALLOW_STREAM_HEIST_ISLAND_NODES(WrenVM* vm)
    {
        int type = (int)wrenGetSlotDouble(vm, 1);

        PATHFIND::SET_ALLOW_STREAM_HEIST_ISLAND_NODES(type);
    }

    static void WREN_PATHFIND_ARE_NODES_LOADED_FOR_AREA(WrenVM* vm)
    {
        float x1 = (float)wrenGetSlotDouble(vm, 1);
        float y1 = (float)wrenGetSlotDouble(vm, 2);
        float x2 = (float)wrenGetSlotDouble(vm, 3);
        float y2 = (float)wrenGetSlotDouble(vm, 4);

        BOOL res = PATHFIND::ARE_NODES_LOADED_FOR_AREA(x1, y1, x2, y2);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PATHFIND_REQUEST_PATH_NODES_IN_AREA_THIS_FRAME(WrenVM* vm)
    {
        float x1 = (float)wrenGetSlotDouble(vm, 1);
        float y1 = (float)wrenGetSlotDouble(vm, 2);
        float x2 = (float)wrenGetSlotDouble(vm, 3);
        float y2 = (float)wrenGetSlotDouble(vm, 4);

        BOOL res = PATHFIND::REQUEST_PATH_NODES_IN_AREA_THIS_FRAME(x1, y1, x2, y2);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PATHFIND_SET_ROADS_BACK_TO_ORIGINAL(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);
        float p2 = (float)wrenGetSlotDouble(vm, 3);
        float p3 = (float)wrenGetSlotDouble(vm, 4);
        float p4 = (float)wrenGetSlotDouble(vm, 5);
        float p5 = (float)wrenGetSlotDouble(vm, 6);
        Any p6 = (Any)wrenGetSlotDouble(vm, 7);

        PATHFIND::SET_ROADS_BACK_TO_ORIGINAL(p0, p1, p2, p3, p4, p5, p6);
    }

    static void WREN_PATHFIND_SET_ROADS_BACK_TO_ORIGINAL_IN_ANGLED_AREA(WrenVM* vm)
    {
        float x1 = (float)wrenGetSlotDouble(vm, 1);
        float y1 = (float)wrenGetSlotDouble(vm, 2);
        float z1 = (float)wrenGetSlotDouble(vm, 3);
        float x2 = (float)wrenGetSlotDouble(vm, 4);
        float y2 = (float)wrenGetSlotDouble(vm, 5);
        float z2 = (float)wrenGetSlotDouble(vm, 6);
        float width = (float)wrenGetSlotDouble(vm, 7);
        Any p7 = (Any)wrenGetSlotDouble(vm, 8);

        PATHFIND::SET_ROADS_BACK_TO_ORIGINAL_IN_ANGLED_AREA(x1, y1, z1, x2, y2, z2, width, p7);
    }

    static void WREN_PATHFIND_SET_AMBIENT_PED_RANGE_MULTIPLIER_THIS_FRAME(WrenVM* vm)
    {
        float multiplier = (float)wrenGetSlotDouble(vm, 1);

        PATHFIND::SET_AMBIENT_PED_RANGE_MULTIPLIER_THIS_FRAME(multiplier);
    }

    static void WREN_PATHFIND_ADJUST_AMBIENT_PED_SPAWN_DENSITIES_THIS_FRAME(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);
        Any p5 = (Any)wrenGetSlotDouble(vm, 6);
        Any p6 = (Any)wrenGetSlotDouble(vm, 7);

        PATHFIND::ADJUST_AMBIENT_PED_SPAWN_DENSITIES_THIS_FRAME(p0, p1, p2, p3, p4, p5, p6);
    }

    static void WREN_PATHFIND_SET_PED_PATHS_BACK_TO_ORIGINAL(WrenVM* vm)
    {
        float x1 = (float)wrenGetSlotDouble(vm, 1);
        float y1 = (float)wrenGetSlotDouble(vm, 2);
        float z1 = (float)wrenGetSlotDouble(vm, 3);
        float x2 = (float)wrenGetSlotDouble(vm, 4);
        float y2 = (float)wrenGetSlotDouble(vm, 5);
        float z2 = (float)wrenGetSlotDouble(vm, 6);
        Any p6 = (Any)wrenGetSlotDouble(vm, 7);

        PATHFIND::SET_PED_PATHS_BACK_TO_ORIGINAL(x1, y1, z1, x2, y2, z2, p6);
    }

    static void WREN_PATHFIND_GET_RANDOM_VEHICLE_NODE(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        float radius = (float)wrenGetSlotDouble(vm, 4);
        BOOL p4 = (BOOL)wrenGetSlotBool(vm, 5);
        BOOL p5 = (BOOL)wrenGetSlotBool(vm, 6);
        BOOL p6 = (BOOL)wrenGetSlotBool(vm, 7);
        Vector3 outPosition;
        int nodeId;

        BOOL res = PATHFIND::GET_RANDOM_VEHICLE_NODE(x, y, z, radius, p4, p5, p6, &outPosition, &nodeId);

        wrenEnsureSlots(vm, 6);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenGetVariable(vm, "natives", "Vector3", 2);
        Vector3* wren_outPosition = (Vector3*)wrenSetSlotNewForeign(vm, 3, 2, sizeof(Vector3));
        wren_outPosition->x = outPosition.x;
        wren_outPosition->y = outPosition.y;
        wren_outPosition->z = outPosition.z;
        wrenInsertInList(vm, 0, 1, 3);

        wrenSetSlotDouble(vm, 4, nodeId);
        wrenInsertInList(vm, 0, 2, 4);

    }

    static void WREN_PATHFIND_GET_STREET_NAME_AT_COORD(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        Hash streetName;
        Hash crossingRoad;

        PATHFIND::GET_STREET_NAME_AT_COORD(x, y, z, &streetName, &crossingRoad);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, streetName);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, crossingRoad);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_PATHFIND_GENERATE_DIRECTIONS_TO_COORD(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        BOOL p3 = (BOOL)wrenGetSlotBool(vm, 4);
        int direction;
        float p5;
        float distToNxJunction;

        int res = PATHFIND::GENERATE_DIRECTIONS_TO_COORD(x, y, z, p3, &direction, &p5, &distToNxJunction);

        wrenEnsureSlots(vm, 8);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, direction);
        wrenInsertInList(vm, 0, 1, 2);

        wrenSetSlotDouble(vm, 3, p5);
        wrenInsertInList(vm, 0, 2, 3);

        wrenSetSlotDouble(vm, 4, distToNxJunction);
        wrenInsertInList(vm, 0, 3, 4);

    }

    static void WREN_PATHFIND_SET_IGNORE_NO_GPS_FLAG(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        PATHFIND::SET_IGNORE_NO_GPS_FLAG(toggle);
    }

    static void WREN_PATHFIND_SET_IGNORE_NO_GPS_FLAG_UNTIL_FIRST_NORMAL_NODE(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        PATHFIND::SET_IGNORE_NO_GPS_FLAG_UNTIL_FIRST_NORMAL_NODE(toggle);
    }

    static void WREN_PATHFIND_SET_GPS_DISABLED_ZONE(WrenVM* vm)
    {
        float x1 = (float)wrenGetSlotDouble(vm, 1);
        float y1 = (float)wrenGetSlotDouble(vm, 2);
        float z1 = (float)wrenGetSlotDouble(vm, 3);
        float x2 = (float)wrenGetSlotDouble(vm, 4);
        float y2 = (float)wrenGetSlotDouble(vm, 5);
        float z3 = (float)wrenGetSlotDouble(vm, 6);

        PATHFIND::SET_GPS_DISABLED_ZONE(x1, y1, z1, x2, y2, z3);
    }

    static void WREN_PATHFIND_GET_GPS_BLIP_ROUTE_LENGTH(WrenVM* vm)
    {

        int res = PATHFIND::GET_GPS_BLIP_ROUTE_LENGTH();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PATHFIND_GET_POS_ALONG_GPS_TYPE_ROUTE(WrenVM* vm)
    {
        Vector3 result;
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 1);
        float p2 = (float)wrenGetSlotDouble(vm, 2);
        int p3 = (int)wrenGetSlotDouble(vm, 3);

        BOOL res = PATHFIND::GET_POS_ALONG_GPS_TYPE_ROUTE(&result, p1, p2, p3);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenGetVariable(vm, "natives", "Vector3", 2);
        Vector3* wren_result = (Vector3*)wrenSetSlotNewForeign(vm, 3, 2, sizeof(Vector3));
        wren_result->x = result.x;
        wren_result->y = result.y;
        wren_result->z = result.z;
        wrenInsertInList(vm, 0, 1, 3);

    }

    static void WREN_PATHFIND_GET_GPS_BLIP_ROUTE_FOUND(WrenVM* vm)
    {

        BOOL res = PATHFIND::GET_GPS_BLIP_ROUTE_FOUND();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PATHFIND_GET_ROAD_BOUNDARY_USING_HEADING(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        float heading = (float)wrenGetSlotDouble(vm, 4);
        Vector3 outPosition;

        BOOL res = PATHFIND::GET_ROAD_BOUNDARY_USING_HEADING(x, y, z, heading, &outPosition);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenGetVariable(vm, "natives", "Vector3", 2);
        Vector3* wren_outPosition = (Vector3*)wrenSetSlotNewForeign(vm, 3, 2, sizeof(Vector3));
        wren_outPosition->x = outPosition.x;
        wren_outPosition->y = outPosition.y;
        wren_outPosition->z = outPosition.z;
        wrenInsertInList(vm, 0, 1, 3);

    }

    static void WREN_PATHFIND_GET_POSITION_BY_SIDE_OF_ROAD(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        int p3 = (int)wrenGetSlotDouble(vm, 4);
        Vector3 outPosition;

        BOOL res = PATHFIND::GET_POSITION_BY_SIDE_OF_ROAD(x, y, z, p3, &outPosition);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenGetVariable(vm, "natives", "Vector3", 2);
        Vector3* wren_outPosition = (Vector3*)wrenSetSlotNewForeign(vm, 3, 2, sizeof(Vector3));
        wren_outPosition->x = outPosition.x;
        wren_outPosition->y = outPosition.y;
        wren_outPosition->z = outPosition.z;
        wrenInsertInList(vm, 0, 1, 3);

    }

    static void WREN_PATHFIND_IS_POINT_ON_ROAD(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 4);

        BOOL res = PATHFIND::IS_POINT_ON_ROAD(x, y, z, vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PATHFIND_GET_NEXT_GPS_DISABLED_ZONE_INDEX(WrenVM* vm)
    {

        int res = PATHFIND::GET_NEXT_GPS_DISABLED_ZONE_INDEX();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PATHFIND_SET_GPS_DISABLED_ZONE_AT_INDEX(WrenVM* vm)
    {
        float x1 = (float)wrenGetSlotDouble(vm, 1);
        float y1 = (float)wrenGetSlotDouble(vm, 2);
        float z1 = (float)wrenGetSlotDouble(vm, 3);
        float x2 = (float)wrenGetSlotDouble(vm, 4);
        float y2 = (float)wrenGetSlotDouble(vm, 5);
        float z2 = (float)wrenGetSlotDouble(vm, 6);
        int index = (int)wrenGetSlotDouble(vm, 7);

        PATHFIND::SET_GPS_DISABLED_ZONE_AT_INDEX(x1, y1, z1, x2, y2, z2, index);
    }

    static void WREN_PATHFIND_CLEAR_GPS_DISABLED_ZONE_AT_INDEX(WrenVM* vm)
    {
        int index = (int)wrenGetSlotDouble(vm, 1);

        PATHFIND::CLEAR_GPS_DISABLED_ZONE_AT_INDEX(index);
    }

    static void WREN_PATHFIND_ADD_NAVMESH_REQUIRED_REGION(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float radius = (float)wrenGetSlotDouble(vm, 3);

        PATHFIND::ADD_NAVMESH_REQUIRED_REGION(x, y, radius);
    }

    static void WREN_PATHFIND_REMOVE_NAVMESH_REQUIRED_REGIONS(WrenVM* vm)
    {

        PATHFIND::REMOVE_NAVMESH_REQUIRED_REGIONS();
    }

    static void WREN_PATHFIND_IS_NAVMESH_REQUIRED_REGION_IN_USE(WrenVM* vm)
    {

        BOOL res = PATHFIND::IS_NAVMESH_REQUIRED_REGION_IN_USE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PATHFIND_DISABLE_NAVMESH_IN_AREA(WrenVM* vm)
    {
        float x1 = (float)wrenGetSlotDouble(vm, 1);
        float y1 = (float)wrenGetSlotDouble(vm, 2);
        float z1 = (float)wrenGetSlotDouble(vm, 3);
        float x2 = (float)wrenGetSlotDouble(vm, 4);
        float y2 = (float)wrenGetSlotDouble(vm, 5);
        float z2 = (float)wrenGetSlotDouble(vm, 6);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 7);

        PATHFIND::DISABLE_NAVMESH_IN_AREA(x1, y1, z1, x2, y2, z2, toggle);
    }

    static void WREN_PATHFIND_ARE_ALL_NAVMESH_REGIONS_LOADED(WrenVM* vm)
    {

        BOOL res = PATHFIND::ARE_ALL_NAVMESH_REGIONS_LOADED();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PATHFIND_IS_NAVMESH_LOADED_IN_AREA(WrenVM* vm)
    {
        float x1 = (float)wrenGetSlotDouble(vm, 1);
        float y1 = (float)wrenGetSlotDouble(vm, 2);
        float z1 = (float)wrenGetSlotDouble(vm, 3);
        float x2 = (float)wrenGetSlotDouble(vm, 4);
        float y2 = (float)wrenGetSlotDouble(vm, 5);
        float z2 = (float)wrenGetSlotDouble(vm, 6);

        BOOL res = PATHFIND::IS_NAVMESH_LOADED_IN_AREA(x1, y1, z1, x2, y2, z2);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PATHFIND_GET_NUM_NAVMESHES_EXISTING_IN_AREA(WrenVM* vm)
    {
        float x1 = (float)wrenGetSlotDouble(vm, 1);
        float y1 = (float)wrenGetSlotDouble(vm, 2);
        float z1 = (float)wrenGetSlotDouble(vm, 3);
        float x2 = (float)wrenGetSlotDouble(vm, 4);
        float y2 = (float)wrenGetSlotDouble(vm, 5);
        float z2 = (float)wrenGetSlotDouble(vm, 6);

        int res = PATHFIND::GET_NUM_NAVMESHES_EXISTING_IN_AREA(x1, y1, z1, x2, y2, z2);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PATHFIND_ADD_NAVMESH_BLOCKING_OBJECT(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);
        float p2 = (float)wrenGetSlotDouble(vm, 3);
        float p3 = (float)wrenGetSlotDouble(vm, 4);
        float p4 = (float)wrenGetSlotDouble(vm, 5);
        float p5 = (float)wrenGetSlotDouble(vm, 6);
        float p6 = (float)wrenGetSlotDouble(vm, 7);
        BOOL p7 = (BOOL)wrenGetSlotBool(vm, 8);
        Any p8 = (Any)wrenGetSlotDouble(vm, 9);

        Any res = PATHFIND::ADD_NAVMESH_BLOCKING_OBJECT(p0, p1, p2, p3, p4, p5, p6, p7, p8);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PATHFIND_UPDATE_NAVMESH_BLOCKING_OBJECT(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);
        float p2 = (float)wrenGetSlotDouble(vm, 3);
        float p3 = (float)wrenGetSlotDouble(vm, 4);
        float p4 = (float)wrenGetSlotDouble(vm, 5);
        float p5 = (float)wrenGetSlotDouble(vm, 6);
        float p6 = (float)wrenGetSlotDouble(vm, 7);
        float p7 = (float)wrenGetSlotDouble(vm, 8);
        Any p8 = (Any)wrenGetSlotDouble(vm, 9);

        PATHFIND::UPDATE_NAVMESH_BLOCKING_OBJECT(p0, p1, p2, p3, p4, p5, p6, p7, p8);
    }

    static void WREN_PATHFIND_REMOVE_NAVMESH_BLOCKING_OBJECT(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        PATHFIND::REMOVE_NAVMESH_BLOCKING_OBJECT(p0);
    }

    static void WREN_PATHFIND_DOES_NAVMESH_BLOCKING_OBJECT_EXIST(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        BOOL res = PATHFIND::DOES_NAVMESH_BLOCKING_OBJECT_EXIST(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PATHFIND_GET_APPROX_HEIGHT_FOR_POINT(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);

        float res = PATHFIND::GET_APPROX_HEIGHT_FOR_POINT(x, y);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PATHFIND_GET_APPROX_HEIGHT_FOR_AREA(WrenVM* vm)
    {
        float x1 = (float)wrenGetSlotDouble(vm, 1);
        float y1 = (float)wrenGetSlotDouble(vm, 2);
        float x2 = (float)wrenGetSlotDouble(vm, 3);
        float y2 = (float)wrenGetSlotDouble(vm, 4);

        float res = PATHFIND::GET_APPROX_HEIGHT_FOR_AREA(x1, y1, x2, y2);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PATHFIND_GET_APPROX_FLOOR_FOR_POINT(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);

        float res = PATHFIND::GET_APPROX_FLOOR_FOR_POINT(x, y);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PATHFIND_GET_APPROX_FLOOR_FOR_AREA(WrenVM* vm)
    {
        float x1 = (float)wrenGetSlotDouble(vm, 1);
        float y1 = (float)wrenGetSlotDouble(vm, 2);
        float x2 = (float)wrenGetSlotDouble(vm, 3);
        float y2 = (float)wrenGetSlotDouble(vm, 4);

        float res = PATHFIND::GET_APPROX_FLOOR_FOR_AREA(x1, y1, x2, y2);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PATHFIND_CALCULATE_TRAVEL_DISTANCE_BETWEEN_POINTS(WrenVM* vm)
    {
        float x1 = (float)wrenGetSlotDouble(vm, 1);
        float y1 = (float)wrenGetSlotDouble(vm, 2);
        float z1 = (float)wrenGetSlotDouble(vm, 3);
        float x2 = (float)wrenGetSlotDouble(vm, 4);
        float y2 = (float)wrenGetSlotDouble(vm, 5);
        float z2 = (float)wrenGetSlotDouble(vm, 6);

        float res = PATHFIND::CALCULATE_TRAVEL_DISTANCE_BETWEEN_POINTS(x1, y1, z1, x2, y2, z2);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }


    static void WREN_PED_CREATE_PED(WrenVM* vm)
    {
        int pedType = (int)wrenGetSlotDouble(vm, 1);
        Hash modelHash = (Hash)wrenGetSlotDouble(vm, 2);
        float x = (float)wrenGetSlotDouble(vm, 3);
        float y = (float)wrenGetSlotDouble(vm, 4);
        float z = (float)wrenGetSlotDouble(vm, 5);
        float heading = (float)wrenGetSlotDouble(vm, 6);
        BOOL isNetwork = (BOOL)wrenGetSlotBool(vm, 7);
        BOOL bScriptHostPed = (BOOL)wrenGetSlotBool(vm, 8);

        Ped res = PED::CREATE_PED(pedType, modelHash, x, y, z, heading, isNetwork, bScriptHostPed);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_DELETE_PED(WrenVM* vm)
    {
        Ped ped;

        PED::DELETE_PED(&ped);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_PED_CLONE_PED(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL isNetwork = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL bScriptHostPed = (BOOL)wrenGetSlotBool(vm, 3);
        BOOL copyHeadBlendFlag = (BOOL)wrenGetSlotBool(vm, 4);

        Ped res = PED::CLONE_PED(ped, isNetwork, bScriptHostPed, copyHeadBlendFlag);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_CLONE_PED_ALT(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL isNetwork = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL bScriptHostPed = (BOOL)wrenGetSlotBool(vm, 3);
        BOOL copyHeadBlendFlag = (BOOL)wrenGetSlotBool(vm, 4);
        BOOL p4 = (BOOL)wrenGetSlotBool(vm, 5);

        Ped res = PED::CLONE_PED_ALT(ped, isNetwork, bScriptHostPed, copyHeadBlendFlag, p4);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_CLONE_PED_TO_TARGET(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Ped targetPed = (Ped)wrenGetSlotDouble(vm, 2);

        PED::CLONE_PED_TO_TARGET(ped, targetPed);
    }

    static void WREN_PED_CLONE_PED_TO_TARGET_ALT(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Ped targetPed = (Ped)wrenGetSlotDouble(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        PED::CLONE_PED_TO_TARGET_ALT(ped, targetPed, p2);
    }

    static void WREN_PED_IS_PED_IN_VEHICLE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 2);
        BOOL atGetIn = (BOOL)wrenGetSlotBool(vm, 3);

        BOOL res = PED::IS_PED_IN_VEHICLE(ped, vehicle, atGetIn);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_IS_PED_IN_MODEL(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Hash modelHash = (Hash)wrenGetSlotDouble(vm, 2);

        BOOL res = PED::IS_PED_IN_MODEL(ped, modelHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_IS_PED_IN_ANY_VEHICLE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL atGetIn = (BOOL)wrenGetSlotBool(vm, 2);

        BOOL res = PED::IS_PED_IN_ANY_VEHICLE(ped, atGetIn);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_IS_COP_PED_IN_AREA_3D(WrenVM* vm)
    {
        float x1 = (float)wrenGetSlotDouble(vm, 1);
        float y1 = (float)wrenGetSlotDouble(vm, 2);
        float z1 = (float)wrenGetSlotDouble(vm, 3);
        float x2 = (float)wrenGetSlotDouble(vm, 4);
        float y2 = (float)wrenGetSlotDouble(vm, 5);
        float z2 = (float)wrenGetSlotDouble(vm, 6);

        BOOL res = PED::IS_COP_PED_IN_AREA_3D(x1, y1, z1, x2, y2, z2);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_IS_PED_INJURED(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_PED_INJURED(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_IS_PED_HURT(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_PED_HURT(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_IS_PED_FATALLY_INJURED(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_PED_FATALLY_INJURED(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_IS_PED_DEAD_OR_DYING(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        BOOL res = PED::IS_PED_DEAD_OR_DYING(ped, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_IS_CONVERSATION_PED_DEAD(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_CONVERSATION_PED_DEAD(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_IS_PED_AIMING_FROM_COVER(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_PED_AIMING_FROM_COVER(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_IS_PED_RELOADING(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_PED_RELOADING(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_IS_PED_A_PLAYER(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_PED_A_PLAYER(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_CREATE_PED_INSIDE_VEHICLE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int pedType = (int)wrenGetSlotDouble(vm, 2);
        Hash modelHash = (Hash)wrenGetSlotDouble(vm, 3);
        int seat = (int)wrenGetSlotDouble(vm, 4);
        BOOL isNetwork = (BOOL)wrenGetSlotBool(vm, 5);
        BOOL bScriptHostPed = (BOOL)wrenGetSlotBool(vm, 6);

        Ped res = PED::CREATE_PED_INSIDE_VEHICLE(vehicle, pedType, modelHash, seat, isNetwork, bScriptHostPed);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_SET_PED_DESIRED_HEADING(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float heading = (float)wrenGetSlotDouble(vm, 2);

        PED::SET_PED_DESIRED_HEADING(ped, heading);
    }

    static void WREN_PED_FORCE_ALL_HEADING_VALUES_TO_ALIGN(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        PED::FORCE_ALL_HEADING_VALUES_TO_ALIGN(ped);
    }

    static void WREN_PED_IS_PED_FACING_PED(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Ped otherPed = (Ped)wrenGetSlotDouble(vm, 2);
        float angle = (float)wrenGetSlotDouble(vm, 3);

        BOOL res = PED::IS_PED_FACING_PED(ped, otherPed, angle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_IS_PED_IN_MELEE_COMBAT(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_PED_IN_MELEE_COMBAT(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_IS_PED_STOPPED(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_PED_STOPPED(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_IS_PED_SHOOTING_IN_AREA(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float x1 = (float)wrenGetSlotDouble(vm, 2);
        float y1 = (float)wrenGetSlotDouble(vm, 3);
        float z1 = (float)wrenGetSlotDouble(vm, 4);
        float x2 = (float)wrenGetSlotDouble(vm, 5);
        float y2 = (float)wrenGetSlotDouble(vm, 6);
        float z2 = (float)wrenGetSlotDouble(vm, 7);
        BOOL p7 = (BOOL)wrenGetSlotBool(vm, 8);
        BOOL p8 = (BOOL)wrenGetSlotBool(vm, 9);

        BOOL res = PED::IS_PED_SHOOTING_IN_AREA(ped, x1, y1, z1, x2, y2, z2, p7, p8);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_IS_ANY_PED_SHOOTING_IN_AREA(WrenVM* vm)
    {
        float x1 = (float)wrenGetSlotDouble(vm, 1);
        float y1 = (float)wrenGetSlotDouble(vm, 2);
        float z1 = (float)wrenGetSlotDouble(vm, 3);
        float x2 = (float)wrenGetSlotDouble(vm, 4);
        float y2 = (float)wrenGetSlotDouble(vm, 5);
        float z2 = (float)wrenGetSlotDouble(vm, 6);
        BOOL p6 = (BOOL)wrenGetSlotBool(vm, 7);
        BOOL p7 = (BOOL)wrenGetSlotBool(vm, 8);

        BOOL res = PED::IS_ANY_PED_SHOOTING_IN_AREA(x1, y1, z1, x2, y2, z2, p6, p7);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_IS_PED_SHOOTING(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_PED_SHOOTING(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_SET_PED_ACCURACY(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int accuracy = (int)wrenGetSlotDouble(vm, 2);

        PED::SET_PED_ACCURACY(ped, accuracy);
    }

    static void WREN_PED_GET_PED_ACCURACY(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        int res = PED::GET_PED_ACCURACY(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_SET_AMBIENT_LAW_PED_ACCURACY_MODIFIER(WrenVM* vm)
    {
        float multiplier = (float)wrenGetSlotDouble(vm, 1);

        PED::SET_AMBIENT_LAW_PED_ACCURACY_MODIFIER(multiplier);
    }

    static void WREN_PED_IS_PED_MODEL(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Hash modelHash = (Hash)wrenGetSlotDouble(vm, 2);

        BOOL res = PED::IS_PED_MODEL(ped, modelHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_EXPLODE_PED_HEAD(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Hash weaponHash = (Hash)wrenGetSlotDouble(vm, 2);

        PED::EXPLODE_PED_HEAD(ped, weaponHash);
    }

    static void WREN_PED_REMOVE_PED_ELEGANTLY(WrenVM* vm)
    {
        Ped ped;

        PED::REMOVE_PED_ELEGANTLY(&ped);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_PED_ADD_ARMOUR_TO_PED(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int amount = (int)wrenGetSlotDouble(vm, 2);

        PED::ADD_ARMOUR_TO_PED(ped, amount);
    }

    static void WREN_PED_SET_PED_ARMOUR(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int amount = (int)wrenGetSlotDouble(vm, 2);

        PED::SET_PED_ARMOUR(ped, amount);
    }

    static void WREN_PED_SET_PED_INTO_VEHICLE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 2);
        int seatIndex = (int)wrenGetSlotDouble(vm, 3);

        PED::SET_PED_INTO_VEHICLE(ped, vehicle, seatIndex);
    }

    static void WREN_PED_SET_PED_ALLOW_VEHICLES_OVERRIDE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PED::SET_PED_ALLOW_VEHICLES_OVERRIDE(ped, toggle);
    }

    static void WREN_PED_CAN_CREATE_RANDOM_PED(WrenVM* vm)
    {
        BOOL unk = (BOOL)wrenGetSlotBool(vm, 1);

        BOOL res = PED::CAN_CREATE_RANDOM_PED(unk);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_CREATE_RANDOM_PED(WrenVM* vm)
    {
        float posX = (float)wrenGetSlotDouble(vm, 1);
        float posY = (float)wrenGetSlotDouble(vm, 2);
        float posZ = (float)wrenGetSlotDouble(vm, 3);

        Ped res = PED::CREATE_RANDOM_PED(posX, posY, posZ);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_CREATE_RANDOM_PED_AS_DRIVER(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL returnHandle = (BOOL)wrenGetSlotBool(vm, 2);

        Ped res = PED::CREATE_RANDOM_PED_AS_DRIVER(vehicle, returnHandle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_CAN_CREATE_RANDOM_DRIVER(WrenVM* vm)
    {

        BOOL res = PED::CAN_CREATE_RANDOM_DRIVER();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_CAN_CREATE_RANDOM_BIKE_RIDER(WrenVM* vm)
    {

        BOOL res = PED::CAN_CREATE_RANDOM_BIKE_RIDER();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_SET_PED_MOVE_ANIMS_BLEND_OUT(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        PED::SET_PED_MOVE_ANIMS_BLEND_OUT(ped);
    }

    static void WREN_PED_SET_PED_CAN_BE_DRAGGED_OUT(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PED::SET_PED_CAN_BE_DRAGGED_OUT(ped, toggle);
    }

    static void WREN_PED_SET_PED_ALLOW_HURT_COMBAT_FOR_ALL_MISSION_PEDS(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        PED::SET_PED_ALLOW_HURT_COMBAT_FOR_ALL_MISSION_PEDS(toggle);
    }

    static void WREN_PED_IS_PED_MALE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_PED_MALE(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_IS_PED_HUMAN(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_PED_HUMAN(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_GET_VEHICLE_PED_IS_IN(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL includeLastVehicle = (BOOL)wrenGetSlotBool(vm, 2);

        Vehicle res = PED::GET_VEHICLE_PED_IS_IN(ped, includeLastVehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_RESET_PED_LAST_VEHICLE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        PED::RESET_PED_LAST_VEHICLE(ped);
    }

    static void WREN_PED_SET_PED_DENSITY_MULTIPLIER_THIS_FRAME(WrenVM* vm)
    {
        float multiplier = (float)wrenGetSlotDouble(vm, 1);

        PED::SET_PED_DENSITY_MULTIPLIER_THIS_FRAME(multiplier);
    }

    static void WREN_PED_SET_SCENARIO_PED_DENSITY_MULTIPLIER_THIS_FRAME(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);

        PED::SET_SCENARIO_PED_DENSITY_MULTIPLIER_THIS_FRAME(p0, p1);
    }

    static void WREN_PED_SUPPRESS_AMBIENT_PED_AGGRESSIVE_CLEANUP_THIS_FRAME(WrenVM* vm)
    {

        PED::SUPPRESS_AMBIENT_PED_AGGRESSIVE_CLEANUP_THIS_FRAME();
    }

    static void WREN_PED_SET_SCRIPTED_CONVERSION_COORD_THIS_FRAME(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);

        PED::SET_SCRIPTED_CONVERSION_COORD_THIS_FRAME(x, y, z);
    }

    static void WREN_PED_SET_PED_NON_CREATION_AREA(WrenVM* vm)
    {
        float x1 = (float)wrenGetSlotDouble(vm, 1);
        float y1 = (float)wrenGetSlotDouble(vm, 2);
        float z1 = (float)wrenGetSlotDouble(vm, 3);
        float x2 = (float)wrenGetSlotDouble(vm, 4);
        float y2 = (float)wrenGetSlotDouble(vm, 5);
        float z2 = (float)wrenGetSlotDouble(vm, 6);

        PED::SET_PED_NON_CREATION_AREA(x1, y1, z1, x2, y2, z2);
    }

    static void WREN_PED_CLEAR_PED_NON_CREATION_AREA(WrenVM* vm)
    {

        PED::CLEAR_PED_NON_CREATION_AREA();
    }

    static void WREN_PED_INSTANTLY_FILL_PED_POPULATION(WrenVM* vm)
    {

        PED::INSTANTLY_FILL_PED_POPULATION();
    }

    static void WREN_PED_IS_PED_ON_MOUNT(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_PED_ON_MOUNT(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_GET_MOUNT(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        Ped res = PED::GET_MOUNT(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_IS_PED_ON_VEHICLE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_PED_ON_VEHICLE(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_IS_PED_ON_SPECIFIC_VEHICLE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 2);

        BOOL res = PED::IS_PED_ON_SPECIFIC_VEHICLE(ped, vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_SET_PED_MONEY(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int amount = (int)wrenGetSlotDouble(vm, 2);

        PED::SET_PED_MONEY(ped, amount);
    }

    static void WREN_PED_GET_PED_MONEY(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        int res = PED::GET_PED_MONEY(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_SET_HEALTH_SNACKS_CARRIED_BY_ALL_NEW_PEDS(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        PED::SET_HEALTH_SNACKS_CARRIED_BY_ALL_NEW_PEDS(p0, p1);
    }

    static void WREN_PED_SET_AMBIENT_PEDS_DROP_MONEY(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        PED::SET_AMBIENT_PEDS_DROP_MONEY(p0);
    }

    static void WREN_PED_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS_FOR_AMBIENT_PEDS_THIS_FRAME(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        PED::SET_BLOCKING_OF_NON_TEMPORARY_EVENTS_FOR_AMBIENT_PEDS_THIS_FRAME(p0);
    }

    static void WREN_PED_SET_PED_SUFFERS_CRITICAL_HITS(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PED::SET_PED_SUFFERS_CRITICAL_HITS(ped, toggle);
    }

    static void WREN_PED_SET_PED_UPPER_BODY_DAMAGE_ONLY(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PED::SET_PED_UPPER_BODY_DAMAGE_ONLY(ped, toggle);
    }

    static void WREN_PED_IS_PED_SITTING_IN_VEHICLE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 2);

        BOOL res = PED::IS_PED_SITTING_IN_VEHICLE(ped, vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_IS_PED_SITTING_IN_ANY_VEHICLE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_PED_SITTING_IN_ANY_VEHICLE(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_IS_PED_ON_FOOT(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_PED_ON_FOOT(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_IS_PED_ON_ANY_BIKE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_PED_ON_ANY_BIKE(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_IS_PED_PLANTING_BOMB(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_PED_PLANTING_BOMB(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_GET_DEAD_PED_PICKUP_COORDS(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);
        float p2 = (float)wrenGetSlotDouble(vm, 3);

        Vector3 res = PED::GET_DEAD_PED_PICKUP_COORDS(ped, p1, p2);

        wrenEnsureSlots(vm, 1);

        wrenGetVariable(vm, "natives", "Vector3", 0);
        Vector3* wren_res = (Vector3*)wrenSetSlotNewForeign(vm, 0, 0, sizeof(Vector3));
        wren_res->x = res.x;
        wren_res->y = res.y;
        wren_res->z = res.z;
    }

    static void WREN_PED_IS_PED_IN_ANY_BOAT(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_PED_IN_ANY_BOAT(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_IS_PED_IN_ANY_SUB(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_PED_IN_ANY_SUB(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_IS_PED_IN_ANY_HELI(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_PED_IN_ANY_HELI(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_IS_PED_IN_ANY_PLANE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_PED_IN_ANY_PLANE(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_IS_PED_IN_FLYING_VEHICLE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_PED_IN_FLYING_VEHICLE(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_SET_PED_DIES_IN_WATER(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PED::SET_PED_DIES_IN_WATER(ped, toggle);
    }

    static void WREN_PED_GET_PED_DIES_IN_WATER(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::GET_PED_DIES_IN_WATER(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_SET_PED_DIES_IN_SINKING_VEHICLE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PED::SET_PED_DIES_IN_SINKING_VEHICLE(ped, toggle);
    }

    static void WREN_PED_GET_PED_ARMOUR(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        int res = PED::GET_PED_ARMOUR(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_SET_PED_STAY_IN_VEHICLE_WHEN_JACKED(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PED::SET_PED_STAY_IN_VEHICLE_WHEN_JACKED(ped, toggle);
    }

    static void WREN_PED_SET_PED_CAN_BE_SHOT_IN_VEHICLE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PED::SET_PED_CAN_BE_SHOT_IN_VEHICLE(ped, toggle);
    }

    static void WREN_PED_GET_PED_LAST_DAMAGE_BONE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int outBone;

        BOOL res = PED::GET_PED_LAST_DAMAGE_BONE(ped, &outBone);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, outBone);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_PED_CLEAR_PED_LAST_DAMAGE_BONE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        PED::CLEAR_PED_LAST_DAMAGE_BONE(ped);
    }

    static void WREN_PED_SET_AI_WEAPON_DAMAGE_MODIFIER(WrenVM* vm)
    {
        float value = (float)wrenGetSlotDouble(vm, 1);

        PED::SET_AI_WEAPON_DAMAGE_MODIFIER(value);
    }

    static void WREN_PED_RESET_AI_WEAPON_DAMAGE_MODIFIER(WrenVM* vm)
    {

        PED::RESET_AI_WEAPON_DAMAGE_MODIFIER();
    }

    static void WREN_PED_SET_AI_MELEE_WEAPON_DAMAGE_MODIFIER(WrenVM* vm)
    {
        float modifier = (float)wrenGetSlotDouble(vm, 1);

        PED::SET_AI_MELEE_WEAPON_DAMAGE_MODIFIER(modifier);
    }

    static void WREN_PED_RESET_AI_MELEE_WEAPON_DAMAGE_MODIFIER(WrenVM* vm)
    {

        PED::RESET_AI_MELEE_WEAPON_DAMAGE_MODIFIER();
    }

    static void WREN_PED_SET_TREAT_AS_AMBIENT_PED_FOR_DRIVER_LOCKON(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        PED::SET_TREAT_AS_AMBIENT_PED_FOR_DRIVER_LOCKON(p0, p1);
    }

    static void WREN_PED_SET_PED_CAN_BE_TARGETTED(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PED::SET_PED_CAN_BE_TARGETTED(ped, toggle);
    }

    static void WREN_PED_SET_PED_CAN_BE_TARGETTED_BY_TEAM(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int team = (int)wrenGetSlotDouble(vm, 2);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 3);

        PED::SET_PED_CAN_BE_TARGETTED_BY_TEAM(ped, team, toggle);
    }

    static void WREN_PED_SET_PED_CAN_BE_TARGETTED_BY_PLAYER(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Player player = (Player)wrenGetSlotDouble(vm, 2);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 3);

        PED::SET_PED_CAN_BE_TARGETTED_BY_PLAYER(ped, player, toggle);
    }

    static void WREN_PED_SET_ALLOW_LOCKON_TO_PED_IF_FRIENDLY(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PED::SET_ALLOW_LOCKON_TO_PED_IF_FRIENDLY(ped, toggle);
    }

    static void WREN_PED_SET_USE_CAMERA_HEADING_FOR_DESIRED_DIRECTION_LOCK_ON_TEST(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PED::SET_USE_CAMERA_HEADING_FOR_DESIRED_DIRECTION_LOCK_ON_TEST(ped, toggle);
    }

    static void WREN_PED_IS_PED_IN_ANY_POLICE_VEHICLE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_PED_IN_ANY_POLICE_VEHICLE(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_FORCE_PED_TO_OPEN_PARACHUTE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        PED::FORCE_PED_TO_OPEN_PARACHUTE(ped);
    }

    static void WREN_PED_IS_PED_IN_PARACHUTE_FREE_FALL(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_PED_IN_PARACHUTE_FREE_FALL(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_IS_PED_FALLING(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_PED_FALLING(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_IS_PED_JUMPING(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_PED_JUMPING(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_IS_PED_LANDING(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        Any res = PED::IS_PED_LANDING(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_IS_PED_DOING_A_BEAST_JUMP(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        Any res = PED::IS_PED_DOING_A_BEAST_JUMP(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_IS_PED_CLIMBING(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_PED_CLIMBING(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_IS_PED_VAULTING(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_PED_VAULTING(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_IS_PED_DIVING(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_PED_DIVING(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_IS_PED_JUMPING_OUT_OF_VEHICLE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_PED_JUMPING_OUT_OF_VEHICLE(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_IS_PED_OPENING_DOOR(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_PED_OPENING_DOOR(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_GET_PED_PARACHUTE_STATE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        int res = PED::GET_PED_PARACHUTE_STATE(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_GET_PED_PARACHUTE_LANDING_TYPE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        int res = PED::GET_PED_PARACHUTE_LANDING_TYPE(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_SET_PED_PARACHUTE_TINT_INDEX(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int tintIndex = (int)wrenGetSlotDouble(vm, 2);

        PED::SET_PED_PARACHUTE_TINT_INDEX(ped, tintIndex);
    }

    static void WREN_PED_GET_PED_PARACHUTE_TINT_INDEX(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int outTintIndex;

        PED::GET_PED_PARACHUTE_TINT_INDEX(ped, &outTintIndex);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_PED_SET_PED_RESERVE_PARACHUTE_TINT_INDEX(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        PED::SET_PED_RESERVE_PARACHUTE_TINT_INDEX(ped, p1);
    }

    static void WREN_PED_CREATE_PARACHUTE_BAG_OBJECT(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        Object res = PED::CREATE_PARACHUTE_BAG_OBJECT(ped, p1, p2);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_SET_PED_DUCKING(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PED::SET_PED_DUCKING(ped, toggle);
    }

    static void WREN_PED_IS_PED_DUCKING(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_PED_DUCKING(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_IS_PED_IN_ANY_TAXI(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_PED_IN_ANY_TAXI(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_SET_PED_ID_RANGE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float value = (float)wrenGetSlotDouble(vm, 2);

        PED::SET_PED_ID_RANGE(ped, value);
    }

    static void WREN_PED_SET_PED_HIGHLY_PERCEPTIVE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PED::SET_PED_HIGHLY_PERCEPTIVE(ped, toggle);
    }

    static void WREN_PED_SET_COP_PERCEPTION_OVERRIDES(WrenVM* vm)
    {
        float seeingRange = (float)wrenGetSlotDouble(vm, 1);
        float seeingRangePeripheral = (float)wrenGetSlotDouble(vm, 2);
        float hearingRange = (float)wrenGetSlotDouble(vm, 3);
        float visualFieldMinAzimuthAngle = (float)wrenGetSlotDouble(vm, 4);
        float visualFieldMaxAzimuthAngle = (float)wrenGetSlotDouble(vm, 5);
        float fieldOfGazeMaxAngle = (float)wrenGetSlotDouble(vm, 6);
        float p6 = (float)wrenGetSlotDouble(vm, 7);

        PED::SET_COP_PERCEPTION_OVERRIDES(seeingRange, seeingRangePeripheral, hearingRange, visualFieldMinAzimuthAngle, visualFieldMaxAzimuthAngle, fieldOfGazeMaxAngle, p6);
    }

    static void WREN_PED_SET_PED_INJURED_ON_GROUND_BEHAVIOUR(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float unk = (float)wrenGetSlotDouble(vm, 2);

        PED::SET_PED_INJURED_ON_GROUND_BEHAVIOUR(ped, unk);
    }

    static void WREN_PED_DISABLE_PED_INJURED_ON_GROUND_BEHAVIOUR(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        PED::DISABLE_PED_INJURED_ON_GROUND_BEHAVIOUR(ped);
    }

    static void WREN_PED_SET_PED_SEEING_RANGE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float value = (float)wrenGetSlotDouble(vm, 2);

        PED::SET_PED_SEEING_RANGE(ped, value);
    }

    static void WREN_PED_SET_PED_HEARING_RANGE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float value = (float)wrenGetSlotDouble(vm, 2);

        PED::SET_PED_HEARING_RANGE(ped, value);
    }

    static void WREN_PED_SET_PED_VISUAL_FIELD_MIN_ANGLE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float value = (float)wrenGetSlotDouble(vm, 2);

        PED::SET_PED_VISUAL_FIELD_MIN_ANGLE(ped, value);
    }

    static void WREN_PED_SET_PED_VISUAL_FIELD_MAX_ANGLE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float value = (float)wrenGetSlotDouble(vm, 2);

        PED::SET_PED_VISUAL_FIELD_MAX_ANGLE(ped, value);
    }

    static void WREN_PED_SET_PED_VISUAL_FIELD_MIN_ELEVATION_ANGLE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float angle = (float)wrenGetSlotDouble(vm, 2);

        PED::SET_PED_VISUAL_FIELD_MIN_ELEVATION_ANGLE(ped, angle);
    }

    static void WREN_PED_SET_PED_VISUAL_FIELD_MAX_ELEVATION_ANGLE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float angle = (float)wrenGetSlotDouble(vm, 2);

        PED::SET_PED_VISUAL_FIELD_MAX_ELEVATION_ANGLE(ped, angle);
    }

    static void WREN_PED_SET_PED_VISUAL_FIELD_PERIPHERAL_RANGE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float range = (float)wrenGetSlotDouble(vm, 2);

        PED::SET_PED_VISUAL_FIELD_PERIPHERAL_RANGE(ped, range);
    }

    static void WREN_PED_SET_PED_VISUAL_FIELD_CENTER_ANGLE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float angle = (float)wrenGetSlotDouble(vm, 2);

        PED::SET_PED_VISUAL_FIELD_CENTER_ANGLE(ped, angle);
    }

    static void WREN_PED_GET_PED_VISUAL_FIELD_CENTER_ANGLE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        float res = PED::GET_PED_VISUAL_FIELD_CENTER_ANGLE(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_SET_PED_STEALTH_MOVEMENT(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        const char* action = wrenGetSlotString(vm, 3);

        PED::SET_PED_STEALTH_MOVEMENT(ped, p1, action);
    }

    static void WREN_PED_GET_PED_STEALTH_MOVEMENT(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::GET_PED_STEALTH_MOVEMENT(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_CREATE_GROUP(WrenVM* vm)
    {
        int unused = (int)wrenGetSlotDouble(vm, 1);

        int res = PED::CREATE_GROUP(unused);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_SET_PED_AS_GROUP_LEADER(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int groupId = (int)wrenGetSlotDouble(vm, 2);

        PED::SET_PED_AS_GROUP_LEADER(ped, groupId);
    }

    static void WREN_PED_SET_PED_AS_GROUP_MEMBER(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int groupId = (int)wrenGetSlotDouble(vm, 2);

        PED::SET_PED_AS_GROUP_MEMBER(ped, groupId);
    }

    static void WREN_PED_SET_PED_CAN_TELEPORT_TO_GROUP_LEADER(WrenVM* vm)
    {
        Ped pedHandle = (Ped)wrenGetSlotDouble(vm, 1);
        int groupHandle = (int)wrenGetSlotDouble(vm, 2);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 3);

        PED::SET_PED_CAN_TELEPORT_TO_GROUP_LEADER(pedHandle, groupHandle, toggle);
    }

    static void WREN_PED_REMOVE_GROUP(WrenVM* vm)
    {
        int groupId = (int)wrenGetSlotDouble(vm, 1);

        PED::REMOVE_GROUP(groupId);
    }

    static void WREN_PED_REMOVE_PED_FROM_GROUP(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        PED::REMOVE_PED_FROM_GROUP(ped);
    }

    static void WREN_PED_IS_PED_GROUP_MEMBER(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int groupId = (int)wrenGetSlotDouble(vm, 2);

        BOOL res = PED::IS_PED_GROUP_MEMBER(ped, groupId);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_IS_PED_HANGING_ON_TO_VEHICLE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_PED_HANGING_ON_TO_VEHICLE(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_SET_GROUP_SEPARATION_RANGE(WrenVM* vm)
    {
        int groupHandle = (int)wrenGetSlotDouble(vm, 1);
        float separationRange = (float)wrenGetSlotDouble(vm, 2);

        PED::SET_GROUP_SEPARATION_RANGE(groupHandle, separationRange);
    }

    static void WREN_PED_SET_PED_MIN_GROUND_TIME_FOR_STUNGUN(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int ms = (int)wrenGetSlotDouble(vm, 2);

        PED::SET_PED_MIN_GROUND_TIME_FOR_STUNGUN(ped, ms);
    }

    static void WREN_PED_IS_PED_PRONE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_PED_PRONE(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_IS_PED_IN_COMBAT(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Ped target = (Ped)wrenGetSlotDouble(vm, 2);

        BOOL res = PED::IS_PED_IN_COMBAT(ped, target);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_GET_PED_TARGET_FROM_COMBAT_PED(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        Entity res = PED::GET_PED_TARGET_FROM_COMBAT_PED(ped, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_CAN_PED_IN_COMBAT_SEE_TARGET(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Ped target = (Ped)wrenGetSlotDouble(vm, 2);

        BOOL res = PED::CAN_PED_IN_COMBAT_SEE_TARGET(ped, target);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_IS_PED_DOING_DRIVEBY(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_PED_DOING_DRIVEBY(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_IS_PED_JACKING(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_PED_JACKING(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_IS_PED_BEING_JACKED(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_PED_BEING_JACKED(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_IS_PED_BEING_STUNNED(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);

        BOOL res = PED::IS_PED_BEING_STUNNED(ped, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_GET_PEDS_JACKER(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        Ped res = PED::GET_PEDS_JACKER(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_GET_JACK_TARGET(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        Ped res = PED::GET_JACK_TARGET(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_IS_PED_FLEEING(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_PED_FLEEING(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_IS_PED_IN_COVER(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL exceptUseWeapon = (BOOL)wrenGetSlotBool(vm, 2);

        BOOL res = PED::IS_PED_IN_COVER(ped, exceptUseWeapon);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_IS_PED_IN_COVER_FACING_LEFT(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_PED_IN_COVER_FACING_LEFT(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_IS_PED_IN_HIGH_COVER(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_PED_IN_HIGH_COVER(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_IS_PED_GOING_INTO_COVER(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_PED_GOING_INTO_COVER(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_SET_PED_PINNED_DOWN(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL pinned = (BOOL)wrenGetSlotBool(vm, 2);
        int i = (int)wrenGetSlotDouble(vm, 3);

        Any res = PED::SET_PED_PINNED_DOWN(ped, pinned, i);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_GET_SEAT_PED_IS_TRYING_TO_ENTER(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        int res = PED::GET_SEAT_PED_IS_TRYING_TO_ENTER(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_GET_VEHICLE_PED_IS_TRYING_TO_ENTER(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        Vehicle res = PED::GET_VEHICLE_PED_IS_TRYING_TO_ENTER(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_GET_PED_SOURCE_OF_DEATH(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        Entity res = PED::GET_PED_SOURCE_OF_DEATH(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_GET_PED_CAUSE_OF_DEATH(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        Hash res = PED::GET_PED_CAUSE_OF_DEATH(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_GET_PED_TIME_OF_DEATH(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        int res = PED::GET_PED_TIME_OF_DEATH(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_COUNT_PEDS_IN_COMBAT_WITH_TARGET(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        int res = PED::COUNT_PEDS_IN_COMBAT_WITH_TARGET(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_COUNT_PEDS_IN_COMBAT_WITH_TARGET_WITHIN_RADIUS(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);
        float radius = (float)wrenGetSlotDouble(vm, 5);

        int res = PED::COUNT_PEDS_IN_COMBAT_WITH_TARGET_WITHIN_RADIUS(ped, x, y, z, radius);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_SET_PED_RELATIONSHIP_GROUP_DEFAULT_HASH(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Hash hash = (Hash)wrenGetSlotDouble(vm, 2);

        PED::SET_PED_RELATIONSHIP_GROUP_DEFAULT_HASH(ped, hash);
    }

    static void WREN_PED_SET_PED_RELATIONSHIP_GROUP_HASH(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Hash hash = (Hash)wrenGetSlotDouble(vm, 2);

        PED::SET_PED_RELATIONSHIP_GROUP_HASH(ped, hash);
    }

    static void WREN_PED_SET_RELATIONSHIP_BETWEEN_GROUPS(WrenVM* vm)
    {
        int relationship = (int)wrenGetSlotDouble(vm, 1);
        Hash group1 = (Hash)wrenGetSlotDouble(vm, 2);
        Hash group2 = (Hash)wrenGetSlotDouble(vm, 3);

        PED::SET_RELATIONSHIP_BETWEEN_GROUPS(relationship, group1, group2);
    }

    static void WREN_PED_CLEAR_RELATIONSHIP_BETWEEN_GROUPS(WrenVM* vm)
    {
        int relationship = (int)wrenGetSlotDouble(vm, 1);
        Hash group1 = (Hash)wrenGetSlotDouble(vm, 2);
        Hash group2 = (Hash)wrenGetSlotDouble(vm, 3);

        PED::CLEAR_RELATIONSHIP_BETWEEN_GROUPS(relationship, group1, group2);
    }

    static void WREN_PED_ADD_RELATIONSHIP_GROUP(WrenVM* vm)
    {
        const char* name = wrenGetSlotString(vm, 1);
        Hash groupHash;

        Any res = PED::ADD_RELATIONSHIP_GROUP(name, &groupHash);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, groupHash);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_PED_REMOVE_RELATIONSHIP_GROUP(WrenVM* vm)
    {
        Hash groupHash = (Hash)wrenGetSlotDouble(vm, 1);

        PED::REMOVE_RELATIONSHIP_GROUP(groupHash);
    }

    static void WREN_PED_DOES_RELATIONSHIP_GROUP_EXIST(WrenVM* vm)
    {
        Hash groupHash = (Hash)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::DOES_RELATIONSHIP_GROUP_EXIST(groupHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_GET_RELATIONSHIP_BETWEEN_PEDS(WrenVM* vm)
    {
        Ped ped1 = (Ped)wrenGetSlotDouble(vm, 1);
        Ped ped2 = (Ped)wrenGetSlotDouble(vm, 2);

        int res = PED::GET_RELATIONSHIP_BETWEEN_PEDS(ped1, ped2);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_GET_PED_RELATIONSHIP_GROUP_DEFAULT_HASH(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        Hash res = PED::GET_PED_RELATIONSHIP_GROUP_DEFAULT_HASH(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_GET_PED_RELATIONSHIP_GROUP_HASH(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        Hash res = PED::GET_PED_RELATIONSHIP_GROUP_HASH(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_GET_RELATIONSHIP_BETWEEN_GROUPS(WrenVM* vm)
    {
        Hash group1 = (Hash)wrenGetSlotDouble(vm, 1);
        Hash group2 = (Hash)wrenGetSlotDouble(vm, 2);

        int res = PED::GET_RELATIONSHIP_BETWEEN_GROUPS(group1, group2);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_SET_RELATIONSHIP_GROUP_AFFECTS_WANTED_LEVEL(WrenVM* vm)
    {
        Hash group = (Hash)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        PED::SET_RELATIONSHIP_GROUP_AFFECTS_WANTED_LEVEL(group, p1);
    }

    static void WREN_PED_TELL_GROUP_PEDS_IN_AREA_TO_ATTACK(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        float p2 = (float)wrenGetSlotDouble(vm, 3);
        Hash hash = (Hash)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);
        Any p5 = (Any)wrenGetSlotDouble(vm, 6);

        PED::TELL_GROUP_PEDS_IN_AREA_TO_ATTACK(ped, p1, p2, hash, p4, p5);
    }

    static void WREN_PED_SET_PED_CAN_BE_TARGETED_WITHOUT_LOS(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PED::SET_PED_CAN_BE_TARGETED_WITHOUT_LOS(ped, toggle);
    }

    static void WREN_PED_SET_PED_TO_INFORM_RESPECTED_FRIENDS(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float radius = (float)wrenGetSlotDouble(vm, 2);
        int maxFriends = (int)wrenGetSlotDouble(vm, 3);

        PED::SET_PED_TO_INFORM_RESPECTED_FRIENDS(ped, radius, maxFriends);
    }

    static void WREN_PED_IS_PED_RESPONDING_TO_EVENT(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Any event = (Any)wrenGetSlotDouble(vm, 2);

        BOOL res = PED::IS_PED_RESPONDING_TO_EVENT(ped, event);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_GET_POS_FROM_FIRED_EVENT(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int eventType = (int)wrenGetSlotDouble(vm, 2);
        Any outData;

        BOOL res = PED::GET_POS_FROM_FIRED_EVENT(ped, eventType, &outData);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, outData);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_PED_SET_PED_FIRING_PATTERN(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Hash patternHash = (Hash)wrenGetSlotDouble(vm, 2);

        PED::SET_PED_FIRING_PATTERN(ped, patternHash);
    }

    static void WREN_PED_SET_PED_SHOOT_RATE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int shootRate = (int)wrenGetSlotDouble(vm, 2);

        PED::SET_PED_SHOOT_RATE(ped, shootRate);
    }

    static void WREN_PED_SET_COMBAT_FLOAT(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int combatType = (int)wrenGetSlotDouble(vm, 2);
        float p2 = (float)wrenGetSlotDouble(vm, 3);

        PED::SET_COMBAT_FLOAT(ped, combatType, p2);
    }

    static void WREN_PED_GET_COMBAT_FLOAT(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);

        float res = PED::GET_COMBAT_FLOAT(ped, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_GET_GROUP_SIZE(WrenVM* vm)
    {
        int groupID = (int)wrenGetSlotDouble(vm, 1);
        Any unknown;
        int sizeInMembers;

        PED::GET_GROUP_SIZE(groupID, &unknown, &sizeInMembers);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, unknown);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, sizeInMembers);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_PED_DOES_GROUP_EXIST(WrenVM* vm)
    {
        int groupId = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::DOES_GROUP_EXIST(groupId);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_GET_PED_GROUP_INDEX(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        int res = PED::GET_PED_GROUP_INDEX(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_IS_PED_IN_GROUP(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_PED_IN_GROUP(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_GET_PLAYER_PED_IS_FOLLOWING(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        Player res = PED::GET_PLAYER_PED_IS_FOLLOWING(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_SET_GROUP_FORMATION(WrenVM* vm)
    {
        int groupId = (int)wrenGetSlotDouble(vm, 1);
        int formationType = (int)wrenGetSlotDouble(vm, 2);

        PED::SET_GROUP_FORMATION(groupId, formationType);
    }

    static void WREN_PED_SET_GROUP_FORMATION_SPACING(WrenVM* vm)
    {
        int groupId = (int)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);

        PED::SET_GROUP_FORMATION_SPACING(groupId, x, y, z);
    }

    static void WREN_PED_RESET_GROUP_FORMATION_DEFAULT_SPACING(WrenVM* vm)
    {
        int groupHandle = (int)wrenGetSlotDouble(vm, 1);

        PED::RESET_GROUP_FORMATION_DEFAULT_SPACING(groupHandle);
    }

    static void WREN_PED_GET_VEHICLE_PED_IS_USING(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        Vehicle res = PED::GET_VEHICLE_PED_IS_USING(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_GET_VEHICLE_PED_IS_ENTERING(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        Vehicle res = PED::GET_VEHICLE_PED_IS_ENTERING(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_SET_PED_GRAVITY(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PED::SET_PED_GRAVITY(ped, toggle);
    }

    static void WREN_PED_APPLY_DAMAGE_TO_PED(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int damageAmount = (int)wrenGetSlotDouble(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        PED::APPLY_DAMAGE_TO_PED(ped, damageAmount, p2, p3);
    }

    static void WREN_PED_GET_TIME_PED_DAMAGED_BY_WEAPON(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Hash weaponHash = (Hash)wrenGetSlotDouble(vm, 2);

        int res = PED::GET_TIME_PED_DAMAGED_BY_WEAPON(ped, weaponHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_SET_PED_ALLOWED_TO_DUCK(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PED::SET_PED_ALLOWED_TO_DUCK(ped, toggle);
    }

    static void WREN_PED_SET_PED_NEVER_LEAVES_GROUP(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PED::SET_PED_NEVER_LEAVES_GROUP(ped, toggle);
    }

    static void WREN_PED_GET_PED_TYPE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        int res = PED::GET_PED_TYPE(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_SET_PED_AS_COP(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PED::SET_PED_AS_COP(ped, toggle);
    }

    static void WREN_PED_SET_PED_HEALTH_PENDING_LAST_DAMAGE_EVENT_OVERRIDE_FLAG(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        PED::SET_PED_HEALTH_PENDING_LAST_DAMAGE_EVENT_OVERRIDE_FLAG(toggle);
    }

    static void WREN_PED_SET_PED_MAX_HEALTH(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int value = (int)wrenGetSlotDouble(vm, 2);

        PED::SET_PED_MAX_HEALTH(ped, value);
    }

    static void WREN_PED_GET_PED_MAX_HEALTH(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        int res = PED::GET_PED_MAX_HEALTH(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_SET_PED_MAX_TIME_IN_WATER(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float value = (float)wrenGetSlotDouble(vm, 2);

        PED::SET_PED_MAX_TIME_IN_WATER(ped, value);
    }

    static void WREN_PED_SET_PED_MAX_TIME_UNDERWATER(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float value = (float)wrenGetSlotDouble(vm, 2);

        PED::SET_PED_MAX_TIME_UNDERWATER(ped, value);
    }

    static void WREN_PED_SET_CORPSE_RAGDOLL_FRICTION(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);

        PED::SET_CORPSE_RAGDOLL_FRICTION(ped, p1);
    }

    static void WREN_PED_SET_PED_VEHICLE_FORCED_SEAT_USAGE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 2);
        int seatIndex = (int)wrenGetSlotDouble(vm, 3);
        int flags = (int)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);

        PED::SET_PED_VEHICLE_FORCED_SEAT_USAGE(ped, vehicle, seatIndex, flags, p4);
    }

    static void WREN_PED_CLEAR_ALL_PED_VEHICLE_FORCED_SEAT_USAGE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        PED::CLEAR_ALL_PED_VEHICLE_FORCED_SEAT_USAGE(ped);
    }

    static void WREN_PED_SET_PED_CAN_BE_KNOCKED_OFF_BIKE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        PED::SET_PED_CAN_BE_KNOCKED_OFF_BIKE(p0, p1);
    }

    static void WREN_PED_SET_PED_CAN_BE_KNOCKED_OFF_VEHICLE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int state = (int)wrenGetSlotDouble(vm, 2);

        PED::SET_PED_CAN_BE_KNOCKED_OFF_VEHICLE(ped, state);
    }

    static void WREN_PED_CAN_KNOCK_PED_OFF_VEHICLE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::CAN_KNOCK_PED_OFF_VEHICLE(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_KNOCK_PED_OFF_VEHICLE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        PED::KNOCK_PED_OFF_VEHICLE(ped);
    }

    static void WREN_PED_SET_PED_COORDS_NO_GANG(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float posX = (float)wrenGetSlotDouble(vm, 2);
        float posY = (float)wrenGetSlotDouble(vm, 3);
        float posZ = (float)wrenGetSlotDouble(vm, 4);

        PED::SET_PED_COORDS_NO_GANG(ped, posX, posY, posZ);
    }

    static void WREN_PED_GET_PED_AS_GROUP_MEMBER(WrenVM* vm)
    {
        int groupID = (int)wrenGetSlotDouble(vm, 1);
        int memberNumber = (int)wrenGetSlotDouble(vm, 2);

        Ped res = PED::GET_PED_AS_GROUP_MEMBER(groupID, memberNumber);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_GET_PED_AS_GROUP_LEADER(WrenVM* vm)
    {
        int groupID = (int)wrenGetSlotDouble(vm, 1);

        Ped res = PED::GET_PED_AS_GROUP_LEADER(groupID);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_SET_PED_KEEP_TASK(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PED::SET_PED_KEEP_TASK(ped, toggle);
    }

    static void WREN_PED_SET_PED_ALLOW_MINOR_REACTIONS_AS_MISSION_PED(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PED::SET_PED_ALLOW_MINOR_REACTIONS_AS_MISSION_PED(ped, toggle);
    }

    static void WREN_PED_IS_PED_SWIMMING(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_PED_SWIMMING(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_IS_PED_SWIMMING_UNDER_WATER(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_PED_SWIMMING_UNDER_WATER(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_SET_PED_COORDS_KEEP_VEHICLE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float posX = (float)wrenGetSlotDouble(vm, 2);
        float posY = (float)wrenGetSlotDouble(vm, 3);
        float posZ = (float)wrenGetSlotDouble(vm, 4);

        PED::SET_PED_COORDS_KEEP_VEHICLE(ped, posX, posY, posZ);
    }

    static void WREN_PED_SET_PED_DIES_IN_VEHICLE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PED::SET_PED_DIES_IN_VEHICLE(ped, toggle);
    }

    static void WREN_PED_SET_CREATE_RANDOM_COPS(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        PED::SET_CREATE_RANDOM_COPS(toggle);
    }

    static void WREN_PED_SET_CREATE_RANDOM_COPS_NOT_ON_SCENARIOS(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        PED::SET_CREATE_RANDOM_COPS_NOT_ON_SCENARIOS(toggle);
    }

    static void WREN_PED_SET_CREATE_RANDOM_COPS_ON_SCENARIOS(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        PED::SET_CREATE_RANDOM_COPS_ON_SCENARIOS(toggle);
    }

    static void WREN_PED_CAN_CREATE_RANDOM_COPS(WrenVM* vm)
    {

        BOOL res = PED::CAN_CREATE_RANDOM_COPS();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_SET_PED_AS_ENEMY(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PED::SET_PED_AS_ENEMY(ped, toggle);
    }

    static void WREN_PED_SET_PED_CAN_SMASH_GLASS(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        PED::SET_PED_CAN_SMASH_GLASS(ped, p1, p2);
    }

    static void WREN_PED_IS_PED_IN_ANY_TRAIN(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_PED_IN_ANY_TRAIN(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_IS_PED_GETTING_INTO_A_VEHICLE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_PED_GETTING_INTO_A_VEHICLE(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_IS_PED_TRYING_TO_ENTER_A_LOCKED_VEHICLE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_PED_TRYING_TO_ENTER_A_LOCKED_VEHICLE(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_SET_ENABLE_HANDCUFFS(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PED::SET_ENABLE_HANDCUFFS(ped, toggle);
    }

    static void WREN_PED_SET_ENABLE_BOUND_ANKLES(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PED::SET_ENABLE_BOUND_ANKLES(ped, toggle);
    }

    static void WREN_PED_SET_ENABLE_SCUBA(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PED::SET_ENABLE_SCUBA(ped, toggle);
    }

    static void WREN_PED_SET_CAN_ATTACK_FRIENDLY(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        PED::SET_CAN_ATTACK_FRIENDLY(ped, toggle, p2);
    }

    static void WREN_PED_GET_PED_ALERTNESS(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        int res = PED::GET_PED_ALERTNESS(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_SET_PED_ALERTNESS(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int value = (int)wrenGetSlotDouble(vm, 2);

        PED::SET_PED_ALERTNESS(ped, value);
    }

    static void WREN_PED_SET_PED_GET_OUT_UPSIDE_DOWN_VEHICLE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PED::SET_PED_GET_OUT_UPSIDE_DOWN_VEHICLE(ped, toggle);
    }

    static void WREN_PED_SET_PED_MOVEMENT_CLIPSET(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        const char* clipSet = wrenGetSlotString(vm, 2);
        float transitionSpeed = (float)wrenGetSlotDouble(vm, 3);

        PED::SET_PED_MOVEMENT_CLIPSET(ped, clipSet, transitionSpeed);
    }

    static void WREN_PED_RESET_PED_MOVEMENT_CLIPSET(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);

        PED::RESET_PED_MOVEMENT_CLIPSET(ped, p1);
    }

    static void WREN_PED_SET_PED_STRAFE_CLIPSET(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        const char* clipSet = wrenGetSlotString(vm, 2);

        PED::SET_PED_STRAFE_CLIPSET(ped, clipSet);
    }

    static void WREN_PED_RESET_PED_STRAFE_CLIPSET(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        PED::RESET_PED_STRAFE_CLIPSET(ped);
    }

    static void WREN_PED_SET_PED_WEAPON_MOVEMENT_CLIPSET(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        const char* clipSet = wrenGetSlotString(vm, 2);

        PED::SET_PED_WEAPON_MOVEMENT_CLIPSET(ped, clipSet);
    }

    static void WREN_PED_RESET_PED_WEAPON_MOVEMENT_CLIPSET(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        PED::RESET_PED_WEAPON_MOVEMENT_CLIPSET(ped);
    }

    static void WREN_PED_SET_PED_DRIVE_BY_CLIPSET_OVERRIDE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        const char* clipset = wrenGetSlotString(vm, 2);

        PED::SET_PED_DRIVE_BY_CLIPSET_OVERRIDE(ped, clipset);
    }

    static void WREN_PED_CLEAR_PED_DRIVE_BY_CLIPSET_OVERRIDE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        PED::CLEAR_PED_DRIVE_BY_CLIPSET_OVERRIDE(ped);
    }

    static void WREN_PED_SET_PED_MOTION_IN_COVER_CLIPSET_OVERRIDE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        const char* p1 = wrenGetSlotString(vm, 2);

        PED::SET_PED_MOTION_IN_COVER_CLIPSET_OVERRIDE(ped, p1);
    }

    static void WREN_PED_CLEAR_PED_MOTION_IN_COVER_CLIPSET_OVERRIDE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        PED::CLEAR_PED_MOTION_IN_COVER_CLIPSET_OVERRIDE(ped);
    }

    static void WREN_PED_CLEAR_PED_FALL_UPPER_BODY_CLIPSET_OVERRIDE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        PED::CLEAR_PED_FALL_UPPER_BODY_CLIPSET_OVERRIDE(ped);
    }

    static void WREN_PED_SET_PED_IN_VEHICLE_CONTEXT(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Hash context = (Hash)wrenGetSlotDouble(vm, 2);

        PED::SET_PED_IN_VEHICLE_CONTEXT(ped, context);
    }

    static void WREN_PED_RESET_PED_IN_VEHICLE_CONTEXT(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        PED::RESET_PED_IN_VEHICLE_CONTEXT(ped);
    }

    static void WREN_PED_IS_SCRIPTED_SCENARIO_PED_USING_CONDITIONAL_ANIM(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        const char* animDict = wrenGetSlotString(vm, 2);
        const char* anim = wrenGetSlotString(vm, 3);

        BOOL res = PED::IS_SCRIPTED_SCENARIO_PED_USING_CONDITIONAL_ANIM(ped, animDict, anim);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_SET_PED_ALTERNATE_WALK_ANIM(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        const char* animDict = wrenGetSlotString(vm, 2);
        const char* animName = wrenGetSlotString(vm, 3);
        float p3 = (float)wrenGetSlotDouble(vm, 4);
        BOOL p4 = (BOOL)wrenGetSlotBool(vm, 5);

        PED::SET_PED_ALTERNATE_WALK_ANIM(ped, animDict, animName, p3, p4);
    }

    static void WREN_PED_CLEAR_PED_ALTERNATE_WALK_ANIM(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);

        PED::CLEAR_PED_ALTERNATE_WALK_ANIM(ped, p1);
    }

    static void WREN_PED_SET_PED_ALTERNATE_MOVEMENT_ANIM(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int stance = (int)wrenGetSlotDouble(vm, 2);
        const char* animDictionary = wrenGetSlotString(vm, 3);
        const char* animationName = wrenGetSlotString(vm, 4);
        float p4 = (float)wrenGetSlotDouble(vm, 5);
        BOOL p5 = (BOOL)wrenGetSlotBool(vm, 6);

        PED::SET_PED_ALTERNATE_MOVEMENT_ANIM(ped, stance, animDictionary, animationName, p4, p5);
    }

    static void WREN_PED_CLEAR_PED_ALTERNATE_MOVEMENT_ANIM(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int stance = (int)wrenGetSlotDouble(vm, 2);
        float p2 = (float)wrenGetSlotDouble(vm, 3);

        PED::CLEAR_PED_ALTERNATE_MOVEMENT_ANIM(ped, stance, p2);
    }

    static void WREN_PED_SET_PED_GESTURE_GROUP(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        const char* animGroupGesture = wrenGetSlotString(vm, 2);

        PED::SET_PED_GESTURE_GROUP(ped, animGroupGesture);
    }

    static void WREN_PED_GET_ANIM_INITIAL_OFFSET_POSITION(WrenVM* vm)
    {
        const char* animDict = wrenGetSlotString(vm, 1);
        const char* animName = wrenGetSlotString(vm, 2);
        float x = (float)wrenGetSlotDouble(vm, 3);
        float y = (float)wrenGetSlotDouble(vm, 4);
        float z = (float)wrenGetSlotDouble(vm, 5);
        float xRot = (float)wrenGetSlotDouble(vm, 6);
        float yRot = (float)wrenGetSlotDouble(vm, 7);
        float zRot = (float)wrenGetSlotDouble(vm, 8);
        float p8 = (float)wrenGetSlotDouble(vm, 9);
        int p9 = (int)wrenGetSlotDouble(vm, 10);

        Vector3 res = PED::GET_ANIM_INITIAL_OFFSET_POSITION(animDict, animName, x, y, z, xRot, yRot, zRot, p8, p9);

        wrenEnsureSlots(vm, 1);

        wrenGetVariable(vm, "natives", "Vector3", 0);
        Vector3* wren_res = (Vector3*)wrenSetSlotNewForeign(vm, 0, 0, sizeof(Vector3));
        wren_res->x = res.x;
        wren_res->y = res.y;
        wren_res->z = res.z;
    }

    static void WREN_PED_GET_ANIM_INITIAL_OFFSET_ROTATION(WrenVM* vm)
    {
        const char* animDict = wrenGetSlotString(vm, 1);
        const char* animName = wrenGetSlotString(vm, 2);
        float x = (float)wrenGetSlotDouble(vm, 3);
        float y = (float)wrenGetSlotDouble(vm, 4);
        float z = (float)wrenGetSlotDouble(vm, 5);
        float xRot = (float)wrenGetSlotDouble(vm, 6);
        float yRot = (float)wrenGetSlotDouble(vm, 7);
        float zRot = (float)wrenGetSlotDouble(vm, 8);
        float p8 = (float)wrenGetSlotDouble(vm, 9);
        int p9 = (int)wrenGetSlotDouble(vm, 10);

        Vector3 res = PED::GET_ANIM_INITIAL_OFFSET_ROTATION(animDict, animName, x, y, z, xRot, yRot, zRot, p8, p9);

        wrenEnsureSlots(vm, 1);

        wrenGetVariable(vm, "natives", "Vector3", 0);
        Vector3* wren_res = (Vector3*)wrenSetSlotNewForeign(vm, 0, 0, sizeof(Vector3));
        wren_res->x = res.x;
        wren_res->y = res.y;
        wren_res->z = res.z;
    }

    static void WREN_PED_GET_PED_DRAWABLE_VARIATION(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int componentId = (int)wrenGetSlotDouble(vm, 2);

        int res = PED::GET_PED_DRAWABLE_VARIATION(ped, componentId);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_GET_NUMBER_OF_PED_DRAWABLE_VARIATIONS(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int componentId = (int)wrenGetSlotDouble(vm, 2);

        int res = PED::GET_NUMBER_OF_PED_DRAWABLE_VARIATIONS(ped, componentId);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_GET_PED_TEXTURE_VARIATION(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int componentId = (int)wrenGetSlotDouble(vm, 2);

        int res = PED::GET_PED_TEXTURE_VARIATION(ped, componentId);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_GET_NUMBER_OF_PED_TEXTURE_VARIATIONS(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int componentId = (int)wrenGetSlotDouble(vm, 2);
        int drawableId = (int)wrenGetSlotDouble(vm, 3);

        int res = PED::GET_NUMBER_OF_PED_TEXTURE_VARIATIONS(ped, componentId, drawableId);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_GET_NUMBER_OF_PED_PROP_DRAWABLE_VARIATIONS(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int propId = (int)wrenGetSlotDouble(vm, 2);

        int res = PED::GET_NUMBER_OF_PED_PROP_DRAWABLE_VARIATIONS(ped, propId);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int propId = (int)wrenGetSlotDouble(vm, 2);
        int drawableId = (int)wrenGetSlotDouble(vm, 3);

        int res = PED::GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS(ped, propId, drawableId);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_GET_PED_PALETTE_VARIATION(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int componentId = (int)wrenGetSlotDouble(vm, 2);

        int res = PED::GET_PED_PALETTE_VARIATION(ped, componentId);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_GET_MP_OUTFIT_DATA_FROM_METADATA(WrenVM* vm)
    {
        Any p0;
        Any p1;

        BOOL res = PED::GET_MP_OUTFIT_DATA_FROM_METADATA(&p0, &p1);

        wrenEnsureSlots(vm, 6);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p0);
        wrenInsertInList(vm, 0, 1, 2);

        wrenSetSlotDouble(vm, 3, p1);
        wrenInsertInList(vm, 0, 2, 3);

    }

    static void WREN_PED_GET_FM_MALE_SHOP_PED_APPAREL_ITEM_INDEX(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        Any res = PED::GET_FM_MALE_SHOP_PED_APPAREL_ITEM_INDEX(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_GET_FM_FEMALE_SHOP_PED_APPAREL_ITEM_INDEX(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        Any res = PED::GET_FM_FEMALE_SHOP_PED_APPAREL_ITEM_INDEX(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_IS_PED_COMPONENT_VARIATION_VALID(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int componentId = (int)wrenGetSlotDouble(vm, 2);
        int drawableId = (int)wrenGetSlotDouble(vm, 3);
        int textureId = (int)wrenGetSlotDouble(vm, 4);

        BOOL res = PED::IS_PED_COMPONENT_VARIATION_VALID(ped, componentId, drawableId, textureId);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_SET_PED_COMPONENT_VARIATION(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int componentId = (int)wrenGetSlotDouble(vm, 2);
        int drawableId = (int)wrenGetSlotDouble(vm, 3);
        int textureId = (int)wrenGetSlotDouble(vm, 4);
        int paletteId = (int)wrenGetSlotDouble(vm, 5);

        PED::SET_PED_COMPONENT_VARIATION(ped, componentId, drawableId, textureId, paletteId);
    }

    static void WREN_PED_SET_PED_RANDOM_COMPONENT_VARIATION(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);

        PED::SET_PED_RANDOM_COMPONENT_VARIATION(ped, p1);
    }

    static void WREN_PED_SET_PED_RANDOM_PROPS(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        PED::SET_PED_RANDOM_PROPS(ped);
    }

    static void WREN_PED_SET_PED_DEFAULT_COMPONENT_VARIATION(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        PED::SET_PED_DEFAULT_COMPONENT_VARIATION(ped);
    }

    static void WREN_PED_SET_PED_BLEND_FROM_PARENTS(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        float p3 = (float)wrenGetSlotDouble(vm, 4);
        float p4 = (float)wrenGetSlotDouble(vm, 5);

        PED::SET_PED_BLEND_FROM_PARENTS(ped, p1, p2, p3, p4);
    }

    static void WREN_PED_SET_PED_HEAD_BLEND_DATA(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int shapeFirstID = (int)wrenGetSlotDouble(vm, 2);
        int shapeSecondID = (int)wrenGetSlotDouble(vm, 3);
        int shapeThirdID = (int)wrenGetSlotDouble(vm, 4);
        int skinFirstID = (int)wrenGetSlotDouble(vm, 5);
        int skinSecondID = (int)wrenGetSlotDouble(vm, 6);
        int skinThirdID = (int)wrenGetSlotDouble(vm, 7);
        float shapeMix = (float)wrenGetSlotDouble(vm, 8);
        float skinMix = (float)wrenGetSlotDouble(vm, 9);
        float thirdMix = (float)wrenGetSlotDouble(vm, 10);
        BOOL isParent = (BOOL)wrenGetSlotBool(vm, 11);

        PED::SET_PED_HEAD_BLEND_DATA(ped, shapeFirstID, shapeSecondID, shapeThirdID, skinFirstID, skinSecondID, skinThirdID, shapeMix, skinMix, thirdMix, isParent);
    }

    static void WREN_PED_GET_PED_HEAD_BLEND_DATA(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Any headBlendData;

        BOOL res = PED::GET_PED_HEAD_BLEND_DATA(ped, &headBlendData);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, headBlendData);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_PED_UPDATE_PED_HEAD_BLEND_DATA(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float shapeMix = (float)wrenGetSlotDouble(vm, 2);
        float skinMix = (float)wrenGetSlotDouble(vm, 3);
        float thirdMix = (float)wrenGetSlotDouble(vm, 4);

        PED::UPDATE_PED_HEAD_BLEND_DATA(ped, shapeMix, skinMix, thirdMix);
    }

    static void WREN_PED_SET_HEAD_BLEND_EYE_COLOR(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int index = (int)wrenGetSlotDouble(vm, 2);

        PED::SET_HEAD_BLEND_EYE_COLOR(ped, index);
    }

    static void WREN_PED_GET_HEAD_BLEND_EYE_COLOR(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        int res = PED::GET_HEAD_BLEND_EYE_COLOR(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_SET_PED_HEAD_OVERLAY(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int overlayID = (int)wrenGetSlotDouble(vm, 2);
        int index = (int)wrenGetSlotDouble(vm, 3);
        float opacity = (float)wrenGetSlotDouble(vm, 4);

        PED::SET_PED_HEAD_OVERLAY(ped, overlayID, index, opacity);
    }

    static void WREN_PED_GET_PED_HEAD_OVERLAY(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int overlayID = (int)wrenGetSlotDouble(vm, 2);

        int res = PED::GET_PED_HEAD_OVERLAY(ped, overlayID);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_GET_PED_HEAD_OVERLAY_NUM(WrenVM* vm)
    {
        int overlayID = (int)wrenGetSlotDouble(vm, 1);

        int res = PED::GET_PED_HEAD_OVERLAY_NUM(overlayID);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_SET_PED_HEAD_OVERLAY_TINT(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int overlayID = (int)wrenGetSlotDouble(vm, 2);
        int colorType = (int)wrenGetSlotDouble(vm, 3);
        int colorID = (int)wrenGetSlotDouble(vm, 4);
        int secondColorID = (int)wrenGetSlotDouble(vm, 5);

        PED::SET_PED_HEAD_OVERLAY_TINT(ped, overlayID, colorType, colorID, secondColorID);
    }

    static void WREN_PED_SET_PED_HAIR_TINT(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int colorID = (int)wrenGetSlotDouble(vm, 2);
        int highlightColorID = (int)wrenGetSlotDouble(vm, 3);

        PED::SET_PED_HAIR_TINT(ped, colorID, highlightColorID);
    }

    static void WREN_PED_GET_NUM_PED_HAIR_TINTS(WrenVM* vm)
    {

        int res = PED::GET_NUM_PED_HAIR_TINTS();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_GET_NUM_PED_MAKEUP_TINTS(WrenVM* vm)
    {

        int res = PED::GET_NUM_PED_MAKEUP_TINTS();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_GET_PED_HAIR_TINT_COLOR(WrenVM* vm)
    {
        int hairColorIndex = (int)wrenGetSlotDouble(vm, 1);
        int outR;
        int outG;
        int outB;

        PED::GET_PED_HAIR_TINT_COLOR(hairColorIndex, &outR, &outG, &outB);

        wrenEnsureSlots(vm, 6);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, outR);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, outG);
        wrenInsertInList(vm, 0, 1, 2);

        wrenSetSlotDouble(vm, 3, outB);
        wrenInsertInList(vm, 0, 2, 3);

    }

    static void WREN_PED_GET_PED_MAKEUP_TINT_COLOR(WrenVM* vm)
    {
        int makeupColorIndex = (int)wrenGetSlotDouble(vm, 1);
        int outR;
        int outG;
        int outB;

        PED::GET_PED_MAKEUP_TINT_COLOR(makeupColorIndex, &outR, &outG, &outB);

        wrenEnsureSlots(vm, 6);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, outR);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, outG);
        wrenInsertInList(vm, 0, 1, 2);

        wrenSetSlotDouble(vm, 3, outB);
        wrenInsertInList(vm, 0, 2, 3);

    }

    static void WREN_PED_IS_PED_HAIR_TINT_FOR_CREATOR(WrenVM* vm)
    {
        int colorId = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_PED_HAIR_TINT_FOR_CREATOR(colorId);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_GET_DEFAULT_SECONDARY_TINT_FOR_CREATOR(WrenVM* vm)
    {
        int colorId = (int)wrenGetSlotDouble(vm, 1);

        int res = PED::GET_DEFAULT_SECONDARY_TINT_FOR_CREATOR(colorId);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_IS_PED_LIPSTICK_TINT_FOR_CREATOR(WrenVM* vm)
    {
        int colorId = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_PED_LIPSTICK_TINT_FOR_CREATOR(colorId);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_IS_PED_BLUSH_TINT_FOR_CREATOR(WrenVM* vm)
    {
        int colorId = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_PED_BLUSH_TINT_FOR_CREATOR(colorId);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_IS_PED_HAIR_TINT_FOR_BARBER(WrenVM* vm)
    {
        int colorID = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_PED_HAIR_TINT_FOR_BARBER(colorID);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_GET_DEFAULT_SECONDARY_TINT_FOR_BARBER(WrenVM* vm)
    {
        int colorID = (int)wrenGetSlotDouble(vm, 1);

        Any res = PED::GET_DEFAULT_SECONDARY_TINT_FOR_BARBER(colorID);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_IS_PED_LIPSTICK_TINT_FOR_BARBER(WrenVM* vm)
    {
        int colorID = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_PED_LIPSTICK_TINT_FOR_BARBER(colorID);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_IS_PED_BLUSH_TINT_FOR_BARBER(WrenVM* vm)
    {
        int colorID = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_PED_BLUSH_TINT_FOR_BARBER(colorID);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_IS_PED_BLUSH_FACEPAINT_TINT_FOR_BARBER(WrenVM* vm)
    {
        int colorId = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_PED_BLUSH_FACEPAINT_TINT_FOR_BARBER(colorId);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_GET_TINT_INDEX_FOR_LAST_GEN_HAIR_TEXTURE(WrenVM* vm)
    {
        Hash modelHash = (Hash)wrenGetSlotDouble(vm, 1);
        int drawableId = (int)wrenGetSlotDouble(vm, 2);
        int textureId = (int)wrenGetSlotDouble(vm, 3);

        Any res = PED::GET_TINT_INDEX_FOR_LAST_GEN_HAIR_TEXTURE(modelHash, drawableId, textureId);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_SET_PED_MICRO_MORPH(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int index = (int)wrenGetSlotDouble(vm, 2);
        float scale = (float)wrenGetSlotDouble(vm, 3);

        PED::SET_PED_MICRO_MORPH(ped, index, scale);
    }

    static void WREN_PED_HAS_PED_HEAD_BLEND_FINISHED(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::HAS_PED_HEAD_BLEND_FINISHED(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_FINALIZE_HEAD_BLEND(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        PED::FINALIZE_HEAD_BLEND(ped);
    }

    static void WREN_PED_SET_HEAD_BLEND_PALETTE_COLOR(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int r = (int)wrenGetSlotDouble(vm, 2);
        int g = (int)wrenGetSlotDouble(vm, 3);
        int b = (int)wrenGetSlotDouble(vm, 4);
        int id = (int)wrenGetSlotDouble(vm, 5);

        PED::SET_HEAD_BLEND_PALETTE_COLOR(ped, r, g, b, id);
    }

    static void WREN_PED_DISABLE_HEAD_BLEND_PALETTE_COLOR(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        PED::DISABLE_HEAD_BLEND_PALETTE_COLOR(ped);
    }

    static void WREN_PED_GET_PED_HEAD_BLEND_FIRST_INDEX(WrenVM* vm)
    {
        int type = (int)wrenGetSlotDouble(vm, 1);

        int res = PED::GET_PED_HEAD_BLEND_FIRST_INDEX(type);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_GET_PED_HEAD_BLEND_NUM_HEADS(WrenVM* vm)
    {
        int type = (int)wrenGetSlotDouble(vm, 1);

        int res = PED::GET_PED_HEAD_BLEND_NUM_HEADS(type);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_SET_PED_PRELOAD_VARIATION_DATA(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int slot = (int)wrenGetSlotDouble(vm, 2);
        int drawableId = (int)wrenGetSlotDouble(vm, 3);
        int textureId = (int)wrenGetSlotDouble(vm, 4);

        Any res = PED::SET_PED_PRELOAD_VARIATION_DATA(ped, slot, drawableId, textureId);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_HAS_PED_PRELOAD_VARIATION_DATA_FINISHED(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::HAS_PED_PRELOAD_VARIATION_DATA_FINISHED(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_RELEASE_PED_PRELOAD_VARIATION_DATA(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        PED::RELEASE_PED_PRELOAD_VARIATION_DATA(ped);
    }

    static void WREN_PED_SET_PED_PRELOAD_PROP_DATA(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int componentId = (int)wrenGetSlotDouble(vm, 2);
        int drawableId = (int)wrenGetSlotDouble(vm, 3);
        int TextureId = (int)wrenGetSlotDouble(vm, 4);

        BOOL res = PED::SET_PED_PRELOAD_PROP_DATA(ped, componentId, drawableId, TextureId);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_HAS_PED_PRELOAD_PROP_DATA_FINISHED(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::HAS_PED_PRELOAD_PROP_DATA_FINISHED(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_RELEASE_PED_PRELOAD_PROP_DATA(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        PED::RELEASE_PED_PRELOAD_PROP_DATA(ped);
    }

    static void WREN_PED_GET_PED_PROP_INDEX(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int componentId = (int)wrenGetSlotDouble(vm, 2);

        int res = PED::GET_PED_PROP_INDEX(ped, componentId);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_SET_PED_PROP_INDEX(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int componentId = (int)wrenGetSlotDouble(vm, 2);
        int drawableId = (int)wrenGetSlotDouble(vm, 3);
        int TextureId = (int)wrenGetSlotDouble(vm, 4);
        BOOL attach = (BOOL)wrenGetSlotBool(vm, 5);

        PED::SET_PED_PROP_INDEX(ped, componentId, drawableId, TextureId, attach);
    }

    static void WREN_PED_KNOCK_OFF_PED_PROP(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);
        BOOL p3 = (BOOL)wrenGetSlotBool(vm, 4);
        BOOL p4 = (BOOL)wrenGetSlotBool(vm, 5);

        PED::KNOCK_OFF_PED_PROP(ped, p1, p2, p3, p4);
    }

    static void WREN_PED_CLEAR_PED_PROP(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int propId = (int)wrenGetSlotDouble(vm, 2);

        PED::CLEAR_PED_PROP(ped, propId);
    }

    static void WREN_PED_CLEAR_ALL_PED_PROPS(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        PED::CLEAR_ALL_PED_PROPS(ped);
    }

    static void WREN_PED_DROP_AMBIENT_PROP(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        PED::DROP_AMBIENT_PROP(ped);
    }

    static void WREN_PED_GET_PED_PROP_TEXTURE_INDEX(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int componentId = (int)wrenGetSlotDouble(vm, 2);

        int res = PED::GET_PED_PROP_TEXTURE_INDEX(ped, componentId);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_CLEAR_PED_PARACHUTE_PACK_VARIATION(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        PED::CLEAR_PED_PARACHUTE_PACK_VARIATION(ped);
    }

    static void WREN_PED_SET_PED_SCUBA_GEAR_VARIATION(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        PED::SET_PED_SCUBA_GEAR_VARIATION(ped);
    }

    static void WREN_PED_CLEAR_PED_SCUBA_GEAR_VARIATION(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        PED::CLEAR_PED_SCUBA_GEAR_VARIATION(ped);
    }

    static void WREN_PED_IS_USING_PED_SCUBA_GEAR_VARIATION(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_USING_PED_SCUBA_GEAR_VARIATION(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PED::SET_BLOCKING_OF_NON_TEMPORARY_EVENTS(ped, toggle);
    }

    static void WREN_PED_SET_PED_BOUNDS_ORIENTATION(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);
        float p2 = (float)wrenGetSlotDouble(vm, 3);
        float p3 = (float)wrenGetSlotDouble(vm, 4);
        float p4 = (float)wrenGetSlotDouble(vm, 5);
        float p5 = (float)wrenGetSlotDouble(vm, 6);

        PED::SET_PED_BOUNDS_ORIENTATION(ped, p1, p2, p3, p4, p5);
    }

    static void WREN_PED_REGISTER_TARGET(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Ped target = (Ped)wrenGetSlotDouble(vm, 2);

        PED::REGISTER_TARGET(ped, target);
    }

    static void WREN_PED_REGISTER_HATED_TARGETS_AROUND_PED(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float radius = (float)wrenGetSlotDouble(vm, 2);

        PED::REGISTER_HATED_TARGETS_AROUND_PED(ped, radius);
    }

    static void WREN_PED_GET_RANDOM_PED_AT_COORD(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        float xRadius = (float)wrenGetSlotDouble(vm, 4);
        float yRadius = (float)wrenGetSlotDouble(vm, 5);
        float zRadius = (float)wrenGetSlotDouble(vm, 6);
        int pedType = (int)wrenGetSlotDouble(vm, 7);

        Ped res = PED::GET_RANDOM_PED_AT_COORD(x, y, z, xRadius, yRadius, zRadius, pedType);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_GET_CLOSEST_PED(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        float radius = (float)wrenGetSlotDouble(vm, 4);
        BOOL p4 = (BOOL)wrenGetSlotBool(vm, 5);
        BOOL p5 = (BOOL)wrenGetSlotBool(vm, 6);
        Ped outPed;
        BOOL p7 = (BOOL)wrenGetSlotBool(vm, 7);
        BOOL p8 = (BOOL)wrenGetSlotBool(vm, 8);
        int pedType = (int)wrenGetSlotDouble(vm, 9);

        BOOL res = PED::GET_CLOSEST_PED(x, y, z, radius, p4, p5, &outPed, p7, p8, pedType);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, outPed);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_PED_SET_SCENARIO_PEDS_TO_BE_RETURNED_BY_NEXT_COMMAND(WrenVM* vm)
    {
        BOOL value = (BOOL)wrenGetSlotBool(vm, 1);

        PED::SET_SCENARIO_PEDS_TO_BE_RETURNED_BY_NEXT_COMMAND(value);
    }

    static void WREN_PED_GET_CAN_PED_BE_GRABBED_BY_SCRIPT(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);
        BOOL p3 = (BOOL)wrenGetSlotBool(vm, 4);
        BOOL p4 = (BOOL)wrenGetSlotBool(vm, 5);
        BOOL p5 = (BOOL)wrenGetSlotBool(vm, 6);
        BOOL p6 = (BOOL)wrenGetSlotBool(vm, 7);
        BOOL p7 = (BOOL)wrenGetSlotBool(vm, 8);
        Any p8 = (Any)wrenGetSlotDouble(vm, 9);

        BOOL res = PED::GET_CAN_PED_BE_GRABBED_BY_SCRIPT(ped, p1, p2, p3, p4, p5, p6, p7, p8);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_SET_DRIVER_RACING_MODIFIER(WrenVM* vm)
    {
        Ped driver = (Ped)wrenGetSlotDouble(vm, 1);
        float modifier = (float)wrenGetSlotDouble(vm, 2);

        PED::SET_DRIVER_RACING_MODIFIER(driver, modifier);
    }

    static void WREN_PED_SET_DRIVER_ABILITY(WrenVM* vm)
    {
        Ped driver = (Ped)wrenGetSlotDouble(vm, 1);
        float ability = (float)wrenGetSlotDouble(vm, 2);

        PED::SET_DRIVER_ABILITY(driver, ability);
    }

    static void WREN_PED_SET_DRIVER_AGGRESSIVENESS(WrenVM* vm)
    {
        Ped driver = (Ped)wrenGetSlotDouble(vm, 1);
        float aggressiveness = (float)wrenGetSlotDouble(vm, 2);

        PED::SET_DRIVER_AGGRESSIVENESS(driver, aggressiveness);
    }

    static void WREN_PED_CAN_PED_RAGDOLL(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::CAN_PED_RAGDOLL(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_SET_PED_TO_RAGDOLL(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int time1 = (int)wrenGetSlotDouble(vm, 2);
        int time2 = (int)wrenGetSlotDouble(vm, 3);
        int ragdollType = (int)wrenGetSlotDouble(vm, 4);
        BOOL p4 = (BOOL)wrenGetSlotBool(vm, 5);
        BOOL p5 = (BOOL)wrenGetSlotBool(vm, 6);
        BOOL p6 = (BOOL)wrenGetSlotBool(vm, 7);

        BOOL res = PED::SET_PED_TO_RAGDOLL(ped, time1, time2, ragdollType, p4, p5, p6);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_SET_PED_TO_RAGDOLL_WITH_FALL(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int time = (int)wrenGetSlotDouble(vm, 2);
        int p2 = (int)wrenGetSlotDouble(vm, 3);
        int ragdollType = (int)wrenGetSlotDouble(vm, 4);
        float x = (float)wrenGetSlotDouble(vm, 5);
        float y = (float)wrenGetSlotDouble(vm, 6);
        float z = (float)wrenGetSlotDouble(vm, 7);
        float p7 = (float)wrenGetSlotDouble(vm, 8);
        float p8 = (float)wrenGetSlotDouble(vm, 9);
        float p9 = (float)wrenGetSlotDouble(vm, 10);
        float p10 = (float)wrenGetSlotDouble(vm, 11);
        float p11 = (float)wrenGetSlotDouble(vm, 12);
        float p12 = (float)wrenGetSlotDouble(vm, 13);
        float p13 = (float)wrenGetSlotDouble(vm, 14);

        BOOL res = PED::SET_PED_TO_RAGDOLL_WITH_FALL(ped, time, p2, ragdollType, x, y, z, p7, p8, p9, p10, p11, p12, p13);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_SET_PED_RAGDOLL_ON_COLLISION(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PED::SET_PED_RAGDOLL_ON_COLLISION(ped, toggle);
    }

    static void WREN_PED_IS_PED_RAGDOLL(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_PED_RAGDOLL(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_IS_PED_RUNNING_RAGDOLL_TASK(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_PED_RUNNING_RAGDOLL_TASK(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_SET_PED_RAGDOLL_FORCE_FALL(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        PED::SET_PED_RAGDOLL_FORCE_FALL(ped);
    }

    static void WREN_PED_RESET_PED_RAGDOLL_TIMER(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        PED::RESET_PED_RAGDOLL_TIMER(ped);
    }

    static void WREN_PED_SET_PED_CAN_RAGDOLL(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PED::SET_PED_CAN_RAGDOLL(ped, toggle);
    }

    static void WREN_PED_IS_PED_RUNNING_MELEE_TASK(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_PED_RUNNING_MELEE_TASK(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_IS_PED_RUNNING_MOBILE_PHONE_TASK(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_PED_RUNNING_MOBILE_PHONE_TASK(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_IS_MOBILE_PHONE_TO_PED_EAR(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_MOBILE_PHONE_TO_PED_EAR(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_SET_RAGDOLL_BLOCKING_FLAGS(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int flags = (int)wrenGetSlotDouble(vm, 2);

        PED::SET_RAGDOLL_BLOCKING_FLAGS(ped, flags);
    }

    static void WREN_PED_CLEAR_RAGDOLL_BLOCKING_FLAGS(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int flags = (int)wrenGetSlotDouble(vm, 2);

        PED::CLEAR_RAGDOLL_BLOCKING_FLAGS(ped, flags);
    }

    static void WREN_PED_SET_PED_ANGLED_DEFENSIVE_AREA(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);
        float p2 = (float)wrenGetSlotDouble(vm, 3);
        float p3 = (float)wrenGetSlotDouble(vm, 4);
        float p4 = (float)wrenGetSlotDouble(vm, 5);
        float p5 = (float)wrenGetSlotDouble(vm, 6);
        float p6 = (float)wrenGetSlotDouble(vm, 7);
        float p7 = (float)wrenGetSlotDouble(vm, 8);
        BOOL p8 = (BOOL)wrenGetSlotBool(vm, 9);
        BOOL p9 = (BOOL)wrenGetSlotBool(vm, 10);

        PED::SET_PED_ANGLED_DEFENSIVE_AREA(ped, p1, p2, p3, p4, p5, p6, p7, p8, p9);
    }

    static void WREN_PED_SET_PED_SPHERE_DEFENSIVE_AREA(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);
        float radius = (float)wrenGetSlotDouble(vm, 5);
        BOOL p5 = (BOOL)wrenGetSlotBool(vm, 6);
        BOOL p6 = (BOOL)wrenGetSlotBool(vm, 7);

        PED::SET_PED_SPHERE_DEFENSIVE_AREA(ped, x, y, z, radius, p5, p6);
    }

    static void WREN_PED_SET_PED_DEFENSIVE_SPHERE_ATTACHED_TO_PED(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Ped target = (Ped)wrenGetSlotDouble(vm, 2);
        float xOffset = (float)wrenGetSlotDouble(vm, 3);
        float yOffset = (float)wrenGetSlotDouble(vm, 4);
        float zOffset = (float)wrenGetSlotDouble(vm, 5);
        float radius = (float)wrenGetSlotDouble(vm, 6);
        BOOL p6 = (BOOL)wrenGetSlotBool(vm, 7);

        PED::SET_PED_DEFENSIVE_SPHERE_ATTACHED_TO_PED(ped, target, xOffset, yOffset, zOffset, radius, p6);
    }

    static void WREN_PED_SET_PED_DEFENSIVE_SPHERE_ATTACHED_TO_VEHICLE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Vehicle target = (Vehicle)wrenGetSlotDouble(vm, 2);
        float xOffset = (float)wrenGetSlotDouble(vm, 3);
        float yOffset = (float)wrenGetSlotDouble(vm, 4);
        float zOffset = (float)wrenGetSlotDouble(vm, 5);
        float radius = (float)wrenGetSlotDouble(vm, 6);
        BOOL p6 = (BOOL)wrenGetSlotBool(vm, 7);

        PED::SET_PED_DEFENSIVE_SPHERE_ATTACHED_TO_VEHICLE(ped, target, xOffset, yOffset, zOffset, radius, p6);
    }

    static void WREN_PED_SET_PED_DEFENSIVE_AREA_ATTACHED_TO_PED(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Ped attachPed = (Ped)wrenGetSlotDouble(vm, 2);
        float p2 = (float)wrenGetSlotDouble(vm, 3);
        float p3 = (float)wrenGetSlotDouble(vm, 4);
        float p4 = (float)wrenGetSlotDouble(vm, 5);
        float p5 = (float)wrenGetSlotDouble(vm, 6);
        float p6 = (float)wrenGetSlotDouble(vm, 7);
        float p7 = (float)wrenGetSlotDouble(vm, 8);
        float p8 = (float)wrenGetSlotDouble(vm, 9);
        BOOL p9 = (BOOL)wrenGetSlotBool(vm, 10);
        BOOL p10 = (BOOL)wrenGetSlotBool(vm, 11);

        PED::SET_PED_DEFENSIVE_AREA_ATTACHED_TO_PED(ped, attachPed, p2, p3, p4, p5, p6, p7, p8, p9, p10);
    }

    static void WREN_PED_SET_PED_DEFENSIVE_AREA_DIRECTION(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);
        float p2 = (float)wrenGetSlotDouble(vm, 3);
        float p3 = (float)wrenGetSlotDouble(vm, 4);
        BOOL p4 = (BOOL)wrenGetSlotBool(vm, 5);

        PED::SET_PED_DEFENSIVE_AREA_DIRECTION(ped, p1, p2, p3, p4);
    }

    static void WREN_PED_REMOVE_PED_DEFENSIVE_AREA(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PED::REMOVE_PED_DEFENSIVE_AREA(ped, toggle);
    }

    static void WREN_PED_GET_PED_DEFENSIVE_AREA_POSITION(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        Vector3 res = PED::GET_PED_DEFENSIVE_AREA_POSITION(ped, p1);

        wrenEnsureSlots(vm, 1);

        wrenGetVariable(vm, "natives", "Vector3", 0);
        Vector3* wren_res = (Vector3*)wrenSetSlotNewForeign(vm, 0, 0, sizeof(Vector3));
        wren_res->x = res.x;
        wren_res->y = res.y;
        wren_res->z = res.z;
    }

    static void WREN_PED_IS_PED_DEFENSIVE_AREA_ACTIVE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        BOOL res = PED::IS_PED_DEFENSIVE_AREA_ACTIVE(ped, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_SET_PED_PREFERRED_COVER_SET(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Any itemSet = (Any)wrenGetSlotDouble(vm, 2);

        PED::SET_PED_PREFERRED_COVER_SET(ped, itemSet);
    }

    static void WREN_PED_REMOVE_PED_PREFERRED_COVER_SET(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        PED::REMOVE_PED_PREFERRED_COVER_SET(ped);
    }

    static void WREN_PED_REVIVE_INJURED_PED(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        PED::REVIVE_INJURED_PED(ped);
    }

    static void WREN_PED_RESURRECT_PED(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        PED::RESURRECT_PED(ped);
    }

    static void WREN_PED_SET_PED_NAME_DEBUG(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        const char* name = wrenGetSlotString(vm, 2);

        PED::SET_PED_NAME_DEBUG(ped, name);
    }

    static void WREN_PED_GET_PED_EXTRACTED_DISPLACEMENT(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL worldSpace = (BOOL)wrenGetSlotBool(vm, 2);

        Vector3 res = PED::GET_PED_EXTRACTED_DISPLACEMENT(ped, worldSpace);

        wrenEnsureSlots(vm, 1);

        wrenGetVariable(vm, "natives", "Vector3", 0);
        Vector3* wren_res = (Vector3*)wrenSetSlotNewForeign(vm, 0, 0, sizeof(Vector3));
        wren_res->x = res.x;
        wren_res->y = res.y;
        wren_res->z = res.z;
    }

    static void WREN_PED_SET_PED_DIES_WHEN_INJURED(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PED::SET_PED_DIES_WHEN_INJURED(ped, toggle);
    }

    static void WREN_PED_SET_PED_ENABLE_WEAPON_BLOCKING(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PED::SET_PED_ENABLE_WEAPON_BLOCKING(ped, toggle);
    }

    static void WREN_PED_SPECIAL_FUNCTION_DO_NOT_USE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        PED::SPECIAL_FUNCTION_DO_NOT_USE(ped, p1);
    }

    static void WREN_PED_RESET_PED_VISIBLE_DAMAGE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        PED::RESET_PED_VISIBLE_DAMAGE(ped);
    }

    static void WREN_PED_APPLY_PED_BLOOD_DAMAGE_BY_ZONE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        float p2 = (float)wrenGetSlotDouble(vm, 3);
        float p3 = (float)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);

        PED::APPLY_PED_BLOOD_DAMAGE_BY_ZONE(ped, p1, p2, p3, p4);
    }

    static void WREN_PED_APPLY_PED_BLOOD(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int boneIndex = (int)wrenGetSlotDouble(vm, 2);
        float xRot = (float)wrenGetSlotDouble(vm, 3);
        float yRot = (float)wrenGetSlotDouble(vm, 4);
        float zRot = (float)wrenGetSlotDouble(vm, 5);
        const char* woundType = wrenGetSlotString(vm, 6);

        PED::APPLY_PED_BLOOD(ped, boneIndex, xRot, yRot, zRot, woundType);
    }

    static void WREN_PED_APPLY_PED_BLOOD_BY_ZONE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);
        float p2 = (float)wrenGetSlotDouble(vm, 3);
        float p3 = (float)wrenGetSlotDouble(vm, 4);
        const char* p4 = wrenGetSlotString(vm, 5);

        PED::APPLY_PED_BLOOD_BY_ZONE(ped, p1, p2, p3, p4);
    }

    static void WREN_PED_APPLY_PED_BLOOD_SPECIFIC(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);
        float p2 = (float)wrenGetSlotDouble(vm, 3);
        float p3 = (float)wrenGetSlotDouble(vm, 4);
        float p4 = (float)wrenGetSlotDouble(vm, 5);
        float p5 = (float)wrenGetSlotDouble(vm, 6);
        int p6 = (int)wrenGetSlotDouble(vm, 7);
        float p7 = (float)wrenGetSlotDouble(vm, 8);
        const char* p8 = wrenGetSlotString(vm, 9);

        PED::APPLY_PED_BLOOD_SPECIFIC(ped, p1, p2, p3, p4, p5, p6, p7, p8);
    }

    static void WREN_PED_APPLY_PED_DAMAGE_DECAL(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int damageZone = (int)wrenGetSlotDouble(vm, 2);
        float xOffset = (float)wrenGetSlotDouble(vm, 3);
        float yOffset = (float)wrenGetSlotDouble(vm, 4);
        float heading = (float)wrenGetSlotDouble(vm, 5);
        float scale = (float)wrenGetSlotDouble(vm, 6);
        float alpha = (float)wrenGetSlotDouble(vm, 7);
        int variation = (int)wrenGetSlotDouble(vm, 8);
        BOOL fadeIn = (BOOL)wrenGetSlotBool(vm, 9);
        const char* decalName = wrenGetSlotString(vm, 10);

        PED::APPLY_PED_DAMAGE_DECAL(ped, damageZone, xOffset, yOffset, heading, scale, alpha, variation, fadeIn, decalName);
    }

    static void WREN_PED_APPLY_PED_DAMAGE_PACK(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        const char* damagePack = wrenGetSlotString(vm, 2);
        float damage = (float)wrenGetSlotDouble(vm, 3);
        float mult = (float)wrenGetSlotDouble(vm, 4);

        PED::APPLY_PED_DAMAGE_PACK(ped, damagePack, damage, mult);
    }

    static void WREN_PED_CLEAR_PED_BLOOD_DAMAGE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        PED::CLEAR_PED_BLOOD_DAMAGE(ped);
    }

    static void WREN_PED_CLEAR_PED_BLOOD_DAMAGE_BY_ZONE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);

        PED::CLEAR_PED_BLOOD_DAMAGE_BY_ZONE(ped, p1);
    }

    static void WREN_PED_HIDE_PED_BLOOD_DAMAGE_BY_ZONE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        PED::HIDE_PED_BLOOD_DAMAGE_BY_ZONE(ped, p1, p2);
    }

    static void WREN_PED_CLEAR_PED_DAMAGE_DECAL_BY_ZONE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);
        const char* p2 = wrenGetSlotString(vm, 3);

        PED::CLEAR_PED_DAMAGE_DECAL_BY_ZONE(ped, p1, p2);
    }

    static void WREN_PED_GET_PED_DECORATIONS_STATE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        int res = PED::GET_PED_DECORATIONS_STATE(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_MARK_PED_DECORATIONS_AS_CLONED_FROM_LOCAL_PLAYER(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        PED::MARK_PED_DECORATIONS_AS_CLONED_FROM_LOCAL_PLAYER(ped, p1);
    }

    static void WREN_PED_CLEAR_PED_WETNESS(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        PED::CLEAR_PED_WETNESS(ped);
    }

    static void WREN_PED_SET_PED_WETNESS_HEIGHT(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float height = (float)wrenGetSlotDouble(vm, 2);

        PED::SET_PED_WETNESS_HEIGHT(ped, height);
    }

    static void WREN_PED_SET_PED_WETNESS_ENABLED_THIS_FRAME(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        PED::SET_PED_WETNESS_ENABLED_THIS_FRAME(ped);
    }

    static void WREN_PED_CLEAR_PED_ENV_DIRT(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        PED::CLEAR_PED_ENV_DIRT(ped);
    }

    static void WREN_PED_SET_PED_SWEAT(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float sweat = (float)wrenGetSlotDouble(vm, 2);

        PED::SET_PED_SWEAT(ped, sweat);
    }

    static void WREN_PED_ADD_PED_DECORATION_FROM_HASHES(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Hash collection = (Hash)wrenGetSlotDouble(vm, 2);
        Hash overlay = (Hash)wrenGetSlotDouble(vm, 3);

        PED::ADD_PED_DECORATION_FROM_HASHES(ped, collection, overlay);
    }

    static void WREN_PED_ADD_PED_DECORATION_FROM_HASHES_IN_CORONA(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Hash collection = (Hash)wrenGetSlotDouble(vm, 2);
        Hash overlay = (Hash)wrenGetSlotDouble(vm, 3);

        PED::ADD_PED_DECORATION_FROM_HASHES_IN_CORONA(ped, collection, overlay);
    }

    static void WREN_PED_GET_PED_DECORATION_ZONE_FROM_HASHES(WrenVM* vm)
    {
        Hash collection = (Hash)wrenGetSlotDouble(vm, 1);
        Hash overlay = (Hash)wrenGetSlotDouble(vm, 2);

        int res = PED::GET_PED_DECORATION_ZONE_FROM_HASHES(collection, overlay);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_CLEAR_PED_DECORATIONS(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        PED::CLEAR_PED_DECORATIONS(ped);
    }

    static void WREN_PED_CLEAR_PED_DECORATIONS_LEAVE_SCARS(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        PED::CLEAR_PED_DECORATIONS_LEAVE_SCARS(ped);
    }

    static void WREN_PED_WAS_PED_SKELETON_UPDATED(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::WAS_PED_SKELETON_UPDATED(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_GET_PED_BONE_COORDS(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int boneId = (int)wrenGetSlotDouble(vm, 2);
        float offsetX = (float)wrenGetSlotDouble(vm, 3);
        float offsetY = (float)wrenGetSlotDouble(vm, 4);
        float offsetZ = (float)wrenGetSlotDouble(vm, 5);

        Vector3 res = PED::GET_PED_BONE_COORDS(ped, boneId, offsetX, offsetY, offsetZ);

        wrenEnsureSlots(vm, 1);

        wrenGetVariable(vm, "natives", "Vector3", 0);
        Vector3* wren_res = (Vector3*)wrenSetSlotNewForeign(vm, 0, 0, sizeof(Vector3));
        wren_res->x = res.x;
        wren_res->y = res.y;
        wren_res->z = res.z;
    }

    static void WREN_PED_CREATE_NM_MESSAGE(WrenVM* vm)
    {
        BOOL startImmediately = (BOOL)wrenGetSlotBool(vm, 1);
        int messageId = (int)wrenGetSlotDouble(vm, 2);

        PED::CREATE_NM_MESSAGE(startImmediately, messageId);
    }

    static void WREN_PED_GIVE_PED_NM_MESSAGE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        PED::GIVE_PED_NM_MESSAGE(ped);
    }

    static void WREN_PED_ADD_SCENARIO_BLOCKING_AREA(WrenVM* vm)
    {
        float x1 = (float)wrenGetSlotDouble(vm, 1);
        float y1 = (float)wrenGetSlotDouble(vm, 2);
        float z1 = (float)wrenGetSlotDouble(vm, 3);
        float x2 = (float)wrenGetSlotDouble(vm, 4);
        float y2 = (float)wrenGetSlotDouble(vm, 5);
        float z2 = (float)wrenGetSlotDouble(vm, 6);
        BOOL p6 = (BOOL)wrenGetSlotBool(vm, 7);
        BOOL p7 = (BOOL)wrenGetSlotBool(vm, 8);
        BOOL p8 = (BOOL)wrenGetSlotBool(vm, 9);
        BOOL p9 = (BOOL)wrenGetSlotBool(vm, 10);

        int res = PED::ADD_SCENARIO_BLOCKING_AREA(x1, y1, z1, x2, y2, z2, p6, p7, p8, p9);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_REMOVE_SCENARIO_BLOCKING_AREAS(WrenVM* vm)
    {

        PED::REMOVE_SCENARIO_BLOCKING_AREAS();
    }

    static void WREN_PED_REMOVE_SCENARIO_BLOCKING_AREA(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        PED::REMOVE_SCENARIO_BLOCKING_AREA(p0, p1);
    }

    static void WREN_PED_SET_SCENARIO_PEDS_SPAWN_IN_SPHERE_AREA(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        float range = (float)wrenGetSlotDouble(vm, 4);
        int p4 = (int)wrenGetSlotDouble(vm, 5);

        PED::SET_SCENARIO_PEDS_SPAWN_IN_SPHERE_AREA(x, y, z, range, p4);
    }

    static void WREN_PED_DOES_SCENARIO_BLOCKING_AREA_EXISTS(WrenVM* vm)
    {
        float x1 = (float)wrenGetSlotDouble(vm, 1);
        float y1 = (float)wrenGetSlotDouble(vm, 2);
        float z1 = (float)wrenGetSlotDouble(vm, 3);
        float x2 = (float)wrenGetSlotDouble(vm, 4);
        float y2 = (float)wrenGetSlotDouble(vm, 5);
        float z2 = (float)wrenGetSlotDouble(vm, 6);

        BOOL res = PED::DOES_SCENARIO_BLOCKING_AREA_EXISTS(x1, y1, z1, x2, y2, z2);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_IS_PED_USING_SCENARIO(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        const char* scenario = wrenGetSlotString(vm, 2);

        BOOL res = PED::IS_PED_USING_SCENARIO(ped, scenario);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_IS_PED_USING_ANY_SCENARIO(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_PED_USING_ANY_SCENARIO(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_SET_PED_PANIC_EXIT_SCENARIO(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        Any res = PED::SET_PED_PANIC_EXIT_SCENARIO(p0, p1, p2, p3);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_TOGGLE_SCENARIO_PED_COWER_IN_PLACE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PED::TOGGLE_SCENARIO_PED_COWER_IN_PLACE(ped, toggle);
    }

    static void WREN_PED_TRIGGER_PED_SCENARIO_PANICEXITTOFLEE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        Any res = PED::TRIGGER_PED_SCENARIO_PANICEXITTOFLEE(p0, p1, p2, p3);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_SET_PED_SHOULD_PLAY_DIRECTED_NORMAL_SCENARIO_EXIT(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        Any res = PED::SET_PED_SHOULD_PLAY_DIRECTED_NORMAL_SCENARIO_EXIT(p0, p1, p2, p3);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_SET_PED_SHOULD_PLAY_NORMAL_SCENARIO_EXIT(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        PED::SET_PED_SHOULD_PLAY_NORMAL_SCENARIO_EXIT(ped);
    }

    static void WREN_PED_SET_PED_SHOULD_PLAY_IMMEDIATE_SCENARIO_EXIT(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        PED::SET_PED_SHOULD_PLAY_IMMEDIATE_SCENARIO_EXIT(ped);
    }

    static void WREN_PED_SET_PED_SHOULD_PLAY_FLEE_SCENARIO_EXIT(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        Any res = PED::SET_PED_SHOULD_PLAY_FLEE_SCENARIO_EXIT(ped, p1, p2, p3);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_SET_PED_SHOULD_IGNORE_SCENARIO_EXIT_COLLISION_CHECKS(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        PED::SET_PED_SHOULD_IGNORE_SCENARIO_EXIT_COLLISION_CHECKS(ped, p1);
    }

    static void WREN_PED_SET_PED_SHOULD_IGNORE_SCENARIO_NAV_CHECKS(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        PED::SET_PED_SHOULD_IGNORE_SCENARIO_NAV_CHECKS(p0, p1);
    }

    static void WREN_PED_SET_PED_SHOULD_PROBE_FOR_SCENARIO_EXITS_IN_ONE_FRAME(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        PED::SET_PED_SHOULD_PROBE_FOR_SCENARIO_EXITS_IN_ONE_FRAME(p0, p1);
    }

    static void WREN_PED_IS_PED_GESTURING(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        Any res = PED::IS_PED_GESTURING(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_PLAY_FACIAL_ANIM(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        const char* animName = wrenGetSlotString(vm, 2);
        const char* animDict = wrenGetSlotString(vm, 3);

        PED::PLAY_FACIAL_ANIM(ped, animName, animDict);
    }

    static void WREN_PED_SET_FACIAL_CLIPSET(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        const char* animDict = wrenGetSlotString(vm, 2);

        PED::SET_FACIAL_CLIPSET(ped, animDict);
    }

    static void WREN_PED_SET_FACIAL_IDLE_ANIM_OVERRIDE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        const char* animName = wrenGetSlotString(vm, 2);
        const char* animDict = wrenGetSlotString(vm, 3);

        PED::SET_FACIAL_IDLE_ANIM_OVERRIDE(ped, animName, animDict);
    }

    static void WREN_PED_CLEAR_FACIAL_IDLE_ANIM_OVERRIDE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        PED::CLEAR_FACIAL_IDLE_ANIM_OVERRIDE(ped);
    }

    static void WREN_PED_SET_PED_CAN_PLAY_GESTURE_ANIMS(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PED::SET_PED_CAN_PLAY_GESTURE_ANIMS(ped, toggle);
    }

    static void WREN_PED_SET_PED_CAN_PLAY_VISEME_ANIMS(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        PED::SET_PED_CAN_PLAY_VISEME_ANIMS(ped, toggle, p2);
    }

    static void WREN_PED_SET_PED_IS_IGNORED_BY_AUTO_OPEN_DOORS(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        PED::SET_PED_IS_IGNORED_BY_AUTO_OPEN_DOORS(ped, p1);
    }

    static void WREN_PED_SET_PED_CAN_PLAY_AMBIENT_ANIMS(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PED::SET_PED_CAN_PLAY_AMBIENT_ANIMS(ped, toggle);
    }

    static void WREN_PED_SET_PED_CAN_PLAY_AMBIENT_BASE_ANIMS(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PED::SET_PED_CAN_PLAY_AMBIENT_BASE_ANIMS(ped, toggle);
    }

    static void WREN_PED_TRIGGER_IDLE_ANIMATION_ON_PED(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        PED::TRIGGER_IDLE_ANIMATION_ON_PED(ped);
    }

    static void WREN_PED_SET_PED_CAN_ARM_IK(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PED::SET_PED_CAN_ARM_IK(ped, toggle);
    }

    static void WREN_PED_SET_PED_CAN_HEAD_IK(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PED::SET_PED_CAN_HEAD_IK(ped, toggle);
    }

    static void WREN_PED_SET_PED_CAN_LEG_IK(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PED::SET_PED_CAN_LEG_IK(ped, toggle);
    }

    static void WREN_PED_SET_PED_CAN_TORSO_IK(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PED::SET_PED_CAN_TORSO_IK(ped, toggle);
    }

    static void WREN_PED_SET_PED_CAN_TORSO_REACT_IK(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        PED::SET_PED_CAN_TORSO_REACT_IK(ped, p1);
    }

    static void WREN_PED_SET_PED_CAN_TORSO_VEHICLE_IK(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        PED::SET_PED_CAN_TORSO_VEHICLE_IK(ped, p1);
    }

    static void WREN_PED_SET_PED_CAN_USE_AUTO_CONVERSATION_LOOKAT(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PED::SET_PED_CAN_USE_AUTO_CONVERSATION_LOOKAT(ped, toggle);
    }

    static void WREN_PED_IS_PED_HEADTRACKING_PED(WrenVM* vm)
    {
        Ped ped1 = (Ped)wrenGetSlotDouble(vm, 1);
        Ped ped2 = (Ped)wrenGetSlotDouble(vm, 2);

        BOOL res = PED::IS_PED_HEADTRACKING_PED(ped1, ped2);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_IS_PED_HEADTRACKING_ENTITY(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Entity entity = (Entity)wrenGetSlotDouble(vm, 2);

        BOOL res = PED::IS_PED_HEADTRACKING_ENTITY(ped, entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_SET_PED_PRIMARY_LOOKAT(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Ped lookAt = (Ped)wrenGetSlotDouble(vm, 2);

        PED::SET_PED_PRIMARY_LOOKAT(ped, lookAt);
    }

    static void WREN_PED_SET_PED_CLOTH_PIN_FRAMES(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        PED::SET_PED_CLOTH_PIN_FRAMES(p0, p1);
    }

    static void WREN_PED_SET_PED_CLOTH_PACKAGE_INDEX(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        PED::SET_PED_CLOTH_PACKAGE_INDEX(p0, p1);
    }

    static void WREN_PED_SET_PED_CLOTH_PRONE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        PED::SET_PED_CLOTH_PRONE(p0, p1);
    }

    static void WREN_PED_SET_PED_CONFIG_FLAG(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int flagId = (int)wrenGetSlotDouble(vm, 2);
        BOOL value = (BOOL)wrenGetSlotBool(vm, 3);

        PED::SET_PED_CONFIG_FLAG(ped, flagId, value);
    }

    static void WREN_PED_SET_PED_RESET_FLAG(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int flagId = (int)wrenGetSlotDouble(vm, 2);
        BOOL doReset = (BOOL)wrenGetSlotBool(vm, 3);

        PED::SET_PED_RESET_FLAG(ped, flagId, doReset);
    }

    static void WREN_PED_GET_PED_CONFIG_FLAG(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int flagId = (int)wrenGetSlotDouble(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        BOOL res = PED::GET_PED_CONFIG_FLAG(ped, flagId, p2);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_GET_PED_RESET_FLAG(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int flagId = (int)wrenGetSlotDouble(vm, 2);

        BOOL res = PED::GET_PED_RESET_FLAG(ped, flagId);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_SET_PED_GROUP_MEMBER_PASSENGER_INDEX(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int index = (int)wrenGetSlotDouble(vm, 2);

        PED::SET_PED_GROUP_MEMBER_PASSENGER_INDEX(ped, index);
    }

    static void WREN_PED_SET_PED_CAN_EVASIVE_DIVE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PED::SET_PED_CAN_EVASIVE_DIVE(ped, toggle);
    }

    static void WREN_PED_IS_PED_EVASIVE_DIVING(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Entity evadingEntity;

        BOOL res = PED::IS_PED_EVASIVE_DIVING(ped, &evadingEntity);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, evadingEntity);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_PED_SET_PED_SHOOTS_AT_COORD(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 5);

        PED::SET_PED_SHOOTS_AT_COORD(ped, x, y, z, toggle);
    }

    static void WREN_PED_SET_PED_MODEL_IS_SUPPRESSED(WrenVM* vm)
    {
        Hash modelHash = (Hash)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PED::SET_PED_MODEL_IS_SUPPRESSED(modelHash, toggle);
    }

    static void WREN_PED_STOP_ANY_PED_MODEL_BEING_SUPPRESSED(WrenVM* vm)
    {

        PED::STOP_ANY_PED_MODEL_BEING_SUPPRESSED();
    }

    static void WREN_PED_SET_PED_CAN_BE_TARGETED_WHEN_INJURED(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PED::SET_PED_CAN_BE_TARGETED_WHEN_INJURED(ped, toggle);
    }

    static void WREN_PED_SET_PED_GENERATES_DEAD_BODY_EVENTS(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PED::SET_PED_GENERATES_DEAD_BODY_EVENTS(ped, toggle);
    }

    static void WREN_PED_BLOCK_PED_FROM_GENERATING_DEAD_BODY_EVENTS_WHEN_DEAD(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PED::BLOCK_PED_FROM_GENERATING_DEAD_BODY_EVENTS_WHEN_DEAD(ped, toggle);
    }

    static void WREN_PED_SET_PED_WILL_ONLY_ATTACK_WANTED_PLAYER(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        PED::SET_PED_WILL_ONLY_ATTACK_WANTED_PLAYER(p0, p1);
    }

    static void WREN_PED_SET_PED_CAN_RAGDOLL_FROM_PLAYER_IMPACT(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PED::SET_PED_CAN_RAGDOLL_FROM_PLAYER_IMPACT(ped, toggle);
    }

    static void WREN_PED_GIVE_PED_HELMET(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL cannotRemove = (BOOL)wrenGetSlotBool(vm, 2);
        int helmetFlag = (int)wrenGetSlotDouble(vm, 3);
        int textureIndex = (int)wrenGetSlotDouble(vm, 4);

        PED::GIVE_PED_HELMET(ped, cannotRemove, helmetFlag, textureIndex);
    }

    static void WREN_PED_REMOVE_PED_HELMET(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL instantly = (BOOL)wrenGetSlotBool(vm, 2);

        PED::REMOVE_PED_HELMET(ped, instantly);
    }

    static void WREN_PED_IS_PED_TAKING_OFF_HELMET(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_PED_TAKING_OFF_HELMET(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_SET_PED_HELMET(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL canWearHelmet = (BOOL)wrenGetSlotBool(vm, 2);

        PED::SET_PED_HELMET(ped, canWearHelmet);
    }

    static void WREN_PED_SET_PED_HELMET_FLAG(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int helmetFlag = (int)wrenGetSlotDouble(vm, 2);

        PED::SET_PED_HELMET_FLAG(ped, helmetFlag);
    }

    static void WREN_PED_SET_PED_HELMET_PROP_INDEX(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int propIndex = (int)wrenGetSlotDouble(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        PED::SET_PED_HELMET_PROP_INDEX(ped, propIndex, p2);
    }

    static void WREN_PED_SET_PED_HELMET_VISOR_PROP_INDICES(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        int p2 = (int)wrenGetSlotDouble(vm, 3);
        int p3 = (int)wrenGetSlotDouble(vm, 4);

        PED::SET_PED_HELMET_VISOR_PROP_INDICES(ped, p1, p2, p3);
    }

    static void WREN_PED_IS_PED_HELMET_VISOR_UP(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_PED_HELMET_VISOR_UP(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_SET_PED_HELMET_TEXTURE_INDEX(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int textureIndex = (int)wrenGetSlotDouble(vm, 2);

        PED::SET_PED_HELMET_TEXTURE_INDEX(ped, textureIndex);
    }

    static void WREN_PED_IS_PED_WEARING_HELMET(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_PED_WEARING_HELMET(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_CLEAR_PED_STORED_HAT_PROP(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        PED::CLEAR_PED_STORED_HAT_PROP(ped);
    }

    static void WREN_PED_GET_PED_HELMET_STORED_HAT_PROP_INDEX(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        Any res = PED::GET_PED_HELMET_STORED_HAT_PROP_INDEX(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_GET_PED_HELMET_STORED_HAT_TEX_INDEX(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        Any res = PED::GET_PED_HELMET_STORED_HAT_TEX_INDEX(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_IS_CURRENT_HEAD_PROP_A_HELMET(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_CURRENT_HEAD_PROP_A_HELMET(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_SET_PED_TO_LOAD_COVER(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PED::SET_PED_TO_LOAD_COVER(ped, toggle);
    }

    static void WREN_PED_SET_PED_CAN_COWER_IN_COVER(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PED::SET_PED_CAN_COWER_IN_COVER(ped, toggle);
    }

    static void WREN_PED_SET_PED_CAN_PEEK_IN_COVER(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PED::SET_PED_CAN_PEEK_IN_COVER(ped, toggle);
    }

    static void WREN_PED_SET_PED_PLAYS_HEAD_ON_HORN_ANIM_WHEN_DIES_IN_VEHICLE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PED::SET_PED_PLAYS_HEAD_ON_HORN_ANIM_WHEN_DIES_IN_VEHICLE(ped, toggle);
    }

    static void WREN_PED_SET_PED_LEG_IK_MODE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int mode = (int)wrenGetSlotDouble(vm, 2);

        PED::SET_PED_LEG_IK_MODE(ped, mode);
    }

    static void WREN_PED_SET_PED_MOTION_BLUR(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PED::SET_PED_MOTION_BLUR(ped, toggle);
    }

    static void WREN_PED_SET_PED_CAN_SWITCH_WEAPON(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PED::SET_PED_CAN_SWITCH_WEAPON(ped, toggle);
    }

    static void WREN_PED_SET_PED_DIES_INSTANTLY_IN_WATER(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PED::SET_PED_DIES_INSTANTLY_IN_WATER(ped, toggle);
    }

    static void WREN_PED_SET_LADDER_CLIMB_INPUT_STATE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);

        PED::SET_LADDER_CLIMB_INPUT_STATE(ped, p1);
    }

    static void WREN_PED_STOP_PED_WEAPON_FIRING_WHEN_DROPPED(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        PED::STOP_PED_WEAPON_FIRING_WHEN_DROPPED(ped);
    }

    static void WREN_PED_SET_SCRIPTED_ANIM_SEAT_OFFSET(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);

        PED::SET_SCRIPTED_ANIM_SEAT_OFFSET(ped, p1);
    }

    static void WREN_PED_SET_PED_COMBAT_MOVEMENT(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int combatMovement = (int)wrenGetSlotDouble(vm, 2);

        PED::SET_PED_COMBAT_MOVEMENT(ped, combatMovement);
    }

    static void WREN_PED_GET_PED_COMBAT_MOVEMENT(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        int res = PED::GET_PED_COMBAT_MOVEMENT(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_SET_PED_COMBAT_ABILITY(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int abilityLevel = (int)wrenGetSlotDouble(vm, 2);

        PED::SET_PED_COMBAT_ABILITY(ped, abilityLevel);
    }

    static void WREN_PED_SET_PED_COMBAT_RANGE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int combatRange = (int)wrenGetSlotDouble(vm, 2);

        PED::SET_PED_COMBAT_RANGE(ped, combatRange);
    }

    static void WREN_PED_GET_PED_COMBAT_RANGE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        int res = PED::GET_PED_COMBAT_RANGE(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_SET_PED_COMBAT_ATTRIBUTES(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int attributeId = (int)wrenGetSlotDouble(vm, 2);
        BOOL enabled = (BOOL)wrenGetSlotBool(vm, 3);

        PED::SET_PED_COMBAT_ATTRIBUTES(ped, attributeId, enabled);
    }

    static void WREN_PED_SET_PED_TARGET_LOSS_RESPONSE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int responseType = (int)wrenGetSlotDouble(vm, 2);

        PED::SET_PED_TARGET_LOSS_RESPONSE(ped, responseType);
    }

    static void WREN_PED_IS_PED_PERFORMING_MELEE_ACTION(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_PED_PERFORMING_MELEE_ACTION(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_IS_PED_PERFORMING_STEALTH_KILL(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_PED_PERFORMING_STEALTH_KILL(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_IS_PED_PERFORMING_A_COUNTER_ATTACK(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_PED_PERFORMING_A_COUNTER_ATTACK(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_IS_PED_BEING_STEALTH_KILLED(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_PED_BEING_STEALTH_KILLED(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_GET_MELEE_TARGET_FOR_PED(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        Ped res = PED::GET_MELEE_TARGET_FOR_PED(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_WAS_PED_KILLED_BY_STEALTH(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::WAS_PED_KILLED_BY_STEALTH(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_WAS_PED_KILLED_BY_TAKEDOWN(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::WAS_PED_KILLED_BY_TAKEDOWN(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_WAS_PED_KNOCKED_OUT(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::WAS_PED_KNOCKED_OUT(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_SET_PED_FLEE_ATTRIBUTES(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int attributeFlags = (int)wrenGetSlotDouble(vm, 2);
        BOOL enable = (BOOL)wrenGetSlotBool(vm, 3);

        PED::SET_PED_FLEE_ATTRIBUTES(ped, attributeFlags, enable);
    }

    static void WREN_PED_SET_PED_COWER_HASH(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        const char* p1 = wrenGetSlotString(vm, 2);

        PED::SET_PED_COWER_HASH(ped, p1);
    }

    static void WREN_PED_SET_PED_STEERS_AROUND_DEAD_BODIES(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PED::SET_PED_STEERS_AROUND_DEAD_BODIES(ped, toggle);
    }

    static void WREN_PED_SET_PED_STEERS_AROUND_PEDS(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PED::SET_PED_STEERS_AROUND_PEDS(ped, toggle);
    }

    static void WREN_PED_SET_PED_STEERS_AROUND_OBJECTS(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PED::SET_PED_STEERS_AROUND_OBJECTS(ped, toggle);
    }

    static void WREN_PED_SET_PED_STEERS_AROUND_VEHICLES(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PED::SET_PED_STEERS_AROUND_VEHICLES(ped, toggle);
    }

    static void WREN_PED_SET_PED_IS_AVOIDED_BY_OTHERS(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        PED::SET_PED_IS_AVOIDED_BY_OTHERS(p0, p1);
    }

    static void WREN_PED_SET_PED_INCREASED_AVOIDANCE_RADIUS(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        PED::SET_PED_INCREASED_AVOIDANCE_RADIUS(ped);
    }

    static void WREN_PED_SET_PED_BLOCKS_PATHING_WHEN_DEAD(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PED::SET_PED_BLOCKS_PATHING_WHEN_DEAD(ped, toggle);
    }

    static void WREN_PED_SET_PED_NO_TIME_DELAY_BEFORE_SHOT(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        PED::SET_PED_NO_TIME_DELAY_BEFORE_SHOT(p0);
    }

    static void WREN_PED_IS_ANY_PED_NEAR_POINT(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        float radius = (float)wrenGetSlotDouble(vm, 4);

        BOOL res = PED::IS_ANY_PED_NEAR_POINT(x, y, z, radius);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_FORCE_PED_AI_AND_ANIMATION_UPDATE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        PED::FORCE_PED_AI_AND_ANIMATION_UPDATE(ped, p1, p2);
    }

    static void WREN_PED_IS_PED_HEADING_TOWARDS_POSITION(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);
        float p4 = (float)wrenGetSlotDouble(vm, 5);

        BOOL res = PED::IS_PED_HEADING_TOWARDS_POSITION(ped, x, y, z, p4);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_REQUEST_PED_VISIBILITY_TRACKING(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        PED::REQUEST_PED_VISIBILITY_TRACKING(ped);
    }

    static void WREN_PED_REQUEST_PED_VEHICLE_VISIBILITY_TRACKING(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        PED::REQUEST_PED_VEHICLE_VISIBILITY_TRACKING(ped, p1);
    }

    static void WREN_PED_REQUEST_PED_RESTRICTED_VEHICLE_VISIBILITY_TRACKING(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        PED::REQUEST_PED_RESTRICTED_VEHICLE_VISIBILITY_TRACKING(ped, p1);
    }

    static void WREN_PED_REQUEST_PED_USE_SMALL_BBOX_VISIBILITY_TRACKING(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        PED::REQUEST_PED_USE_SMALL_BBOX_VISIBILITY_TRACKING(ped, p1);
    }

    static void WREN_PED_IS_TRACKED_PED_VISIBLE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_TRACKED_PED_VISIBLE(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_GET_TRACKED_PED_PIXELCOUNT(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        int res = PED::GET_TRACKED_PED_PIXELCOUNT(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_IS_PED_TRACKED(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_PED_TRACKED(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_HAS_PED_RECEIVED_EVENT(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int eventId = (int)wrenGetSlotDouble(vm, 2);

        BOOL res = PED::HAS_PED_RECEIVED_EVENT(ped, eventId);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_CAN_PED_SEE_HATED_PED(WrenVM* vm)
    {
        Ped ped1 = (Ped)wrenGetSlotDouble(vm, 1);
        Ped ped2 = (Ped)wrenGetSlotDouble(vm, 2);

        BOOL res = PED::CAN_PED_SEE_HATED_PED(ped1, ped2);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_CAN_PED_SHUFFLE_TO_OR_FROM_TURRET_SEAT(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int p1;

        BOOL res = PED::CAN_PED_SHUFFLE_TO_OR_FROM_TURRET_SEAT(ped, &p1);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p1);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_PED_CAN_PED_SHUFFLE_TO_OR_FROM_EXTRA_SEAT(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int p1;

        BOOL res = PED::CAN_PED_SHUFFLE_TO_OR_FROM_EXTRA_SEAT(ped, &p1);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p1);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_PED_GET_PED_BONE_INDEX(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int boneId = (int)wrenGetSlotDouble(vm, 2);

        int res = PED::GET_PED_BONE_INDEX(ped, boneId);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_GET_PED_RAGDOLL_BONE_INDEX(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int bone = (int)wrenGetSlotDouble(vm, 2);

        int res = PED::GET_PED_RAGDOLL_BONE_INDEX(ped, bone);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_SET_PED_ENVEFF_SCALE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float value = (float)wrenGetSlotDouble(vm, 2);

        PED::SET_PED_ENVEFF_SCALE(ped, value);
    }

    static void WREN_PED_GET_PED_ENVEFF_SCALE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        float res = PED::GET_PED_ENVEFF_SCALE(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_SET_ENABLE_PED_ENVEFF_SCALE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PED::SET_ENABLE_PED_ENVEFF_SCALE(ped, toggle);
    }

    static void WREN_PED_SET_PED_ENVEFF_CPV_ADD(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);

        PED::SET_PED_ENVEFF_CPV_ADD(ped, p1);
    }

    static void WREN_PED_SET_PED_ENVEFF_COLOR_MODULATOR(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);
        int p2 = (int)wrenGetSlotDouble(vm, 3);
        int p3 = (int)wrenGetSlotDouble(vm, 4);

        PED::SET_PED_ENVEFF_COLOR_MODULATOR(ped, p1, p2, p3);
    }

    static void WREN_PED_SET_PED_EMISSIVE_SCALE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float intensity = (float)wrenGetSlotDouble(vm, 2);

        PED::SET_PED_EMISSIVE_SCALE(ped, intensity);
    }

    static void WREN_PED_GET_PED_EMISSIVE_SCALE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        float res = PED::GET_PED_EMISSIVE_SCALE(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_IS_PED_SHADER_READY(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_PED_SHADER_READY(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_SET_PED_ENABLE_CREW_EMBLEM(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        PED::SET_PED_ENABLE_CREW_EMBLEM(p0, p1);
    }

    static void WREN_PED_REQUEST_RAGDOLL_BOUNDS_UPDATE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        PED::REQUEST_RAGDOLL_BOUNDS_UPDATE(p0, p1);
    }

    static void WREN_PED_SET_PED_AO_BLOB_RENDERING(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PED::SET_PED_AO_BLOB_RENDERING(ped, toggle);
    }

    static void WREN_PED_IS_PED_SHELTERED(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_PED_SHELTERED(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_CREATE_SYNCHRONIZED_SCENE(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        float roll = (float)wrenGetSlotDouble(vm, 4);
        float pitch = (float)wrenGetSlotDouble(vm, 5);
        float yaw = (float)wrenGetSlotDouble(vm, 6);
        int p6 = (int)wrenGetSlotDouble(vm, 7);

        int res = PED::CREATE_SYNCHRONIZED_SCENE(x, y, z, roll, pitch, yaw, p6);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_CREATE_SYNCHRONIZED_SCENE_AT_MAP_OBJECT(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        float radius = (float)wrenGetSlotDouble(vm, 4);
        Hash object = (Hash)wrenGetSlotDouble(vm, 5);

        int res = PED::CREATE_SYNCHRONIZED_SCENE_AT_MAP_OBJECT(x, y, z, radius, object);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_IS_SYNCHRONIZED_SCENE_RUNNING(WrenVM* vm)
    {
        int sceneId = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_SYNCHRONIZED_SCENE_RUNNING(sceneId);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_SET_SYNCHRONIZED_SCENE_ORIGIN(WrenVM* vm)
    {
        int sceneID = (int)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);
        float roll = (float)wrenGetSlotDouble(vm, 5);
        float pitch = (float)wrenGetSlotDouble(vm, 6);
        float yaw = (float)wrenGetSlotDouble(vm, 7);
        BOOL p7 = (BOOL)wrenGetSlotBool(vm, 8);

        PED::SET_SYNCHRONIZED_SCENE_ORIGIN(sceneID, x, y, z, roll, pitch, yaw, p7);
    }

    static void WREN_PED_SET_SYNCHRONIZED_SCENE_PHASE(WrenVM* vm)
    {
        int sceneID = (int)wrenGetSlotDouble(vm, 1);
        float phase = (float)wrenGetSlotDouble(vm, 2);

        PED::SET_SYNCHRONIZED_SCENE_PHASE(sceneID, phase);
    }

    static void WREN_PED_GET_SYNCHRONIZED_SCENE_PHASE(WrenVM* vm)
    {
        int sceneID = (int)wrenGetSlotDouble(vm, 1);

        float res = PED::GET_SYNCHRONIZED_SCENE_PHASE(sceneID);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_SET_SYNCHRONIZED_SCENE_RATE(WrenVM* vm)
    {
        int sceneID = (int)wrenGetSlotDouble(vm, 1);
        float rate = (float)wrenGetSlotDouble(vm, 2);

        PED::SET_SYNCHRONIZED_SCENE_RATE(sceneID, rate);
    }

    static void WREN_PED_GET_SYNCHRONIZED_SCENE_RATE(WrenVM* vm)
    {
        int sceneID = (int)wrenGetSlotDouble(vm, 1);

        float res = PED::GET_SYNCHRONIZED_SCENE_RATE(sceneID);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_SET_SYNCHRONIZED_SCENE_LOOPED(WrenVM* vm)
    {
        int sceneID = (int)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PED::SET_SYNCHRONIZED_SCENE_LOOPED(sceneID, toggle);
    }

    static void WREN_PED_IS_SYNCHRONIZED_SCENE_LOOPED(WrenVM* vm)
    {
        int sceneID = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_SYNCHRONIZED_SCENE_LOOPED(sceneID);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_SET_SYNCHRONIZED_SCENE_HOLD_LAST_FRAME(WrenVM* vm)
    {
        int sceneID = (int)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PED::SET_SYNCHRONIZED_SCENE_HOLD_LAST_FRAME(sceneID, toggle);
    }

    static void WREN_PED_IS_SYNCHRONIZED_SCENE_HOLD_LAST_FRAME(WrenVM* vm)
    {
        int sceneID = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_SYNCHRONIZED_SCENE_HOLD_LAST_FRAME(sceneID);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_ATTACH_SYNCHRONIZED_SCENE_TO_ENTITY(WrenVM* vm)
    {
        int sceneID = (int)wrenGetSlotDouble(vm, 1);
        Entity entity = (Entity)wrenGetSlotDouble(vm, 2);
        int boneIndex = (int)wrenGetSlotDouble(vm, 3);

        PED::ATTACH_SYNCHRONIZED_SCENE_TO_ENTITY(sceneID, entity, boneIndex);
    }

    static void WREN_PED_DETACH_SYNCHRONIZED_SCENE(WrenVM* vm)
    {
        int sceneID = (int)wrenGetSlotDouble(vm, 1);

        PED::DETACH_SYNCHRONIZED_SCENE(sceneID);
    }

    static void WREN_PED_TAKE_OWNERSHIP_OF_SYNCHRONIZED_SCENE(WrenVM* vm)
    {
        int scene = (int)wrenGetSlotDouble(vm, 1);

        PED::TAKE_OWNERSHIP_OF_SYNCHRONIZED_SCENE(scene);
    }

    static void WREN_PED_FORCE_PED_MOTION_STATE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Hash motionStateHash = (Hash)wrenGetSlotDouble(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);
        int p3 = (int)wrenGetSlotDouble(vm, 4);
        BOOL p4 = (BOOL)wrenGetSlotBool(vm, 5);

        BOOL res = PED::FORCE_PED_MOTION_STATE(ped, motionStateHash, p2, p3, p4);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_GET_PED_CURRENT_MOVE_BLEND_RATIO(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float speedX;
        float speedY;

        BOOL res = PED::GET_PED_CURRENT_MOVE_BLEND_RATIO(ped, &speedX, &speedY);

        wrenEnsureSlots(vm, 6);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, speedX);
        wrenInsertInList(vm, 0, 1, 2);

        wrenSetSlotDouble(vm, 3, speedY);
        wrenInsertInList(vm, 0, 2, 3);

    }

    static void WREN_PED_SET_PED_MAX_MOVE_BLEND_RATIO(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float value = (float)wrenGetSlotDouble(vm, 2);

        PED::SET_PED_MAX_MOVE_BLEND_RATIO(ped, value);
    }

    static void WREN_PED_SET_PED_MIN_MOVE_BLEND_RATIO(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float value = (float)wrenGetSlotDouble(vm, 2);

        PED::SET_PED_MIN_MOVE_BLEND_RATIO(ped, value);
    }

    static void WREN_PED_SET_PED_MOVE_RATE_OVERRIDE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float value = (float)wrenGetSlotDouble(vm, 2);

        PED::SET_PED_MOVE_RATE_OVERRIDE(ped, value);
    }

    static void WREN_PED_SET_PED_MOVE_RATE_IN_WATER_OVERRIDE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        PED::SET_PED_MOVE_RATE_IN_WATER_OVERRIDE(p0, p1);
    }

    static void WREN_PED_PED_HAS_SEXINESS_FLAG_SET(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int flag = (int)wrenGetSlotDouble(vm, 2);

        BOOL res = PED::PED_HAS_SEXINESS_FLAG_SET(ped, flag);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_GET_PED_NEARBY_VEHICLES(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Any sizeAndVehs;

        int res = PED::GET_PED_NEARBY_VEHICLES(ped, &sizeAndVehs);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, sizeAndVehs);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_PED_GET_PED_NEARBY_PEDS(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Any sizeAndPeds;
        int ignore = (int)wrenGetSlotDouble(vm, 2);

        int res = PED::GET_PED_NEARBY_PEDS(ped, &sizeAndPeds, ignore);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, sizeAndPeds);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_PED_HAVE_ALL_STREAMING_REQUESTS_COMPLETED(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::HAVE_ALL_STREAMING_REQUESTS_COMPLETED(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_IS_PED_USING_ACTION_MODE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_PED_USING_ACTION_MODE(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_SET_PED_USING_ACTION_MODE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        int p2 = (int)wrenGetSlotDouble(vm, 3);
        const char* action = wrenGetSlotString(vm, 4);

        PED::SET_PED_USING_ACTION_MODE(ped, p1, p2, action);
    }

    static void WREN_PED_SET_MOVEMENT_MODE_OVERRIDE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        const char* name = wrenGetSlotString(vm, 2);

        PED::SET_MOVEMENT_MODE_OVERRIDE(ped, name);
    }

    static void WREN_PED_SET_PED_CAPSULE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float value = (float)wrenGetSlotDouble(vm, 2);

        PED::SET_PED_CAPSULE(ped, value);
    }

    static void WREN_PED_REGISTER_PEDHEADSHOT(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        int res = PED::REGISTER_PEDHEADSHOT(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_REGISTER_PEDHEADSHOT_HIRES(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        int res = PED::REGISTER_PEDHEADSHOT_HIRES(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_REGISTER_PEDHEADSHOT_TRANSPARENT(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        int res = PED::REGISTER_PEDHEADSHOT_TRANSPARENT(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_UNREGISTER_PEDHEADSHOT(WrenVM* vm)
    {
        int id = (int)wrenGetSlotDouble(vm, 1);

        PED::UNREGISTER_PEDHEADSHOT(id);
    }

    static void WREN_PED_IS_PEDHEADSHOT_VALID(WrenVM* vm)
    {
        int id = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_PEDHEADSHOT_VALID(id);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_IS_PEDHEADSHOT_READY(WrenVM* vm)
    {
        int id = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_PEDHEADSHOT_READY(id);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_GET_PEDHEADSHOT_TXD_STRING(WrenVM* vm)
    {
        int id = (int)wrenGetSlotDouble(vm, 1);

        const char* res = PED::GET_PEDHEADSHOT_TXD_STRING(id);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotString(vm, 0, res);
    }

    static void WREN_PED_REQUEST_PEDHEADSHOT_IMG_UPLOAD(WrenVM* vm)
    {
        int id = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::REQUEST_PEDHEADSHOT_IMG_UPLOAD(id);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_RELEASE_PEDHEADSHOT_IMG_UPLOAD(WrenVM* vm)
    {
        int id = (int)wrenGetSlotDouble(vm, 1);

        PED::RELEASE_PEDHEADSHOT_IMG_UPLOAD(id);
    }

    static void WREN_PED_IS_PEDHEADSHOT_IMG_UPLOAD_AVAILABLE(WrenVM* vm)
    {

        BOOL res = PED::IS_PEDHEADSHOT_IMG_UPLOAD_AVAILABLE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_HAS_PEDHEADSHOT_IMG_UPLOAD_FAILED(WrenVM* vm)
    {

        BOOL res = PED::HAS_PEDHEADSHOT_IMG_UPLOAD_FAILED();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_HAS_PEDHEADSHOT_IMG_UPLOAD_SUCCEEDED(WrenVM* vm)
    {

        BOOL res = PED::HAS_PEDHEADSHOT_IMG_UPLOAD_SUCCEEDED();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_SET_PED_HEATSCALE_OVERRIDE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float heatScale = (float)wrenGetSlotDouble(vm, 2);

        PED::SET_PED_HEATSCALE_OVERRIDE(ped, heatScale);
    }

    static void WREN_PED_DISABLE_PED_HEATSCALE_OVERRIDE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        PED::DISABLE_PED_HEATSCALE_OVERRIDE(ped);
    }

    static void WREN_PED_SPAWNPOINTS_START_SEARCH(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);
        float p2 = (float)wrenGetSlotDouble(vm, 3);
        float p3 = (float)wrenGetSlotDouble(vm, 4);
        float p4 = (float)wrenGetSlotDouble(vm, 5);
        int interiorFlags = (int)wrenGetSlotDouble(vm, 6);
        float scale = (float)wrenGetSlotDouble(vm, 7);
        int duration = (int)wrenGetSlotDouble(vm, 8);

        PED::SPAWNPOINTS_START_SEARCH(p0, p1, p2, p3, p4, interiorFlags, scale, duration);
    }

    static void WREN_PED_SPAWNPOINTS_START_SEARCH_IN_ANGLED_AREA(WrenVM* vm)
    {
        float x1 = (float)wrenGetSlotDouble(vm, 1);
        float y1 = (float)wrenGetSlotDouble(vm, 2);
        float z1 = (float)wrenGetSlotDouble(vm, 3);
        float x2 = (float)wrenGetSlotDouble(vm, 4);
        float y2 = (float)wrenGetSlotDouble(vm, 5);
        float z2 = (float)wrenGetSlotDouble(vm, 6);
        float width = (float)wrenGetSlotDouble(vm, 7);
        int interiorFlags = (int)wrenGetSlotDouble(vm, 8);
        float scale = (float)wrenGetSlotDouble(vm, 9);
        int duration = (int)wrenGetSlotDouble(vm, 10);

        PED::SPAWNPOINTS_START_SEARCH_IN_ANGLED_AREA(x1, y1, z1, x2, y2, z2, width, interiorFlags, scale, duration);
    }

    static void WREN_PED_SPAWNPOINTS_CANCEL_SEARCH(WrenVM* vm)
    {

        PED::SPAWNPOINTS_CANCEL_SEARCH();
    }

    static void WREN_PED_SPAWNPOINTS_IS_SEARCH_ACTIVE(WrenVM* vm)
    {

        BOOL res = PED::SPAWNPOINTS_IS_SEARCH_ACTIVE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_SPAWNPOINTS_IS_SEARCH_COMPLETE(WrenVM* vm)
    {

        BOOL res = PED::SPAWNPOINTS_IS_SEARCH_COMPLETE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_SPAWNPOINTS_IS_SEARCH_FAILED(WrenVM* vm)
    {

        BOOL res = PED::SPAWNPOINTS_IS_SEARCH_FAILED();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_SPAWNPOINTS_GET_NUM_SEARCH_RESULTS(WrenVM* vm)
    {

        int res = PED::SPAWNPOINTS_GET_NUM_SEARCH_RESULTS();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PED_SPAWNPOINTS_GET_SEARCH_RESULT(WrenVM* vm)
    {
        int randomInt = (int)wrenGetSlotDouble(vm, 1);
        float x;
        float y;
        float z;

        PED::SPAWNPOINTS_GET_SEARCH_RESULT(randomInt, &x, &y, &z);

        wrenEnsureSlots(vm, 6);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, x);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, y);
        wrenInsertInList(vm, 0, 1, 2);

        wrenSetSlotDouble(vm, 3, z);
        wrenInsertInList(vm, 0, 2, 3);

    }

    static void WREN_PED_SPAWNPOINTS_GET_SEARCH_RESULT_FLAGS(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);
        int p1;

        PED::SPAWNPOINTS_GET_SEARCH_RESULT_FLAGS(p0, &p1);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_PED_SET_IK_TARGET(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int ikIndex = (int)wrenGetSlotDouble(vm, 2);
        Entity entityLookAt = (Entity)wrenGetSlotDouble(vm, 3);
        int boneLookAt = (int)wrenGetSlotDouble(vm, 4);
        float offsetX = (float)wrenGetSlotDouble(vm, 5);
        float offsetY = (float)wrenGetSlotDouble(vm, 6);
        float offsetZ = (float)wrenGetSlotDouble(vm, 7);
        Any p7 = (Any)wrenGetSlotDouble(vm, 8);
        int blendInDuration = (int)wrenGetSlotDouble(vm, 9);
        int blendOutDuration = (int)wrenGetSlotDouble(vm, 10);

        PED::SET_IK_TARGET(ped, ikIndex, entityLookAt, boneLookAt, offsetX, offsetY, offsetZ, p7, blendInDuration, blendOutDuration);
    }

    static void WREN_PED_FORCE_INSTANT_LEG_IK_SETUP(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        PED::FORCE_INSTANT_LEG_IK_SETUP(ped);
    }

    static void WREN_PED_REQUEST_ACTION_MODE_ASSET(WrenVM* vm)
    {
        const char* asset = wrenGetSlotString(vm, 1);

        PED::REQUEST_ACTION_MODE_ASSET(asset);
    }

    static void WREN_PED_HAS_ACTION_MODE_ASSET_LOADED(WrenVM* vm)
    {
        const char* asset = wrenGetSlotString(vm, 1);

        BOOL res = PED::HAS_ACTION_MODE_ASSET_LOADED(asset);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_REMOVE_ACTION_MODE_ASSET(WrenVM* vm)
    {
        const char* asset = wrenGetSlotString(vm, 1);

        PED::REMOVE_ACTION_MODE_ASSET(asset);
    }

    static void WREN_PED_REQUEST_STEALTH_MODE_ASSET(WrenVM* vm)
    {
        const char* asset = wrenGetSlotString(vm, 1);

        PED::REQUEST_STEALTH_MODE_ASSET(asset);
    }

    static void WREN_PED_HAS_STEALTH_MODE_ASSET_LOADED(WrenVM* vm)
    {
        const char* asset = wrenGetSlotString(vm, 1);

        BOOL res = PED::HAS_STEALTH_MODE_ASSET_LOADED(asset);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_REMOVE_STEALTH_MODE_ASSET(WrenVM* vm)
    {
        const char* asset = wrenGetSlotString(vm, 1);

        PED::REMOVE_STEALTH_MODE_ASSET(asset);
    }

    static void WREN_PED_SET_PED_LOD_MULTIPLIER(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float multiplier = (float)wrenGetSlotDouble(vm, 2);

        PED::SET_PED_LOD_MULTIPLIER(ped, multiplier);
    }

    static void WREN_PED_SET_PED_CAN_LOSE_PROPS_ON_DAMAGE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);
        int p2 = (int)wrenGetSlotDouble(vm, 3);

        PED::SET_PED_CAN_LOSE_PROPS_ON_DAMAGE(ped, toggle, p2);
    }

    static void WREN_PED_SET_FORCE_FOOTSTEP_UPDATE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PED::SET_FORCE_FOOTSTEP_UPDATE(ped, toggle);
    }

    static void WREN_PED_SET_FORCE_STEP_TYPE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        int type = (int)wrenGetSlotDouble(vm, 3);
        int p3 = (int)wrenGetSlotDouble(vm, 4);

        PED::SET_FORCE_STEP_TYPE(ped, p1, type, p3);
    }

    static void WREN_PED_IS_ANY_HOSTILE_PED_NEAR_POINT(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);
        float radius = (float)wrenGetSlotDouble(vm, 5);

        BOOL res = PED::IS_ANY_HOSTILE_PED_NEAR_POINT(ped, x, y, z, radius);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_SET_PED_CAN_PLAY_IN_CAR_IDLES(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PED::SET_PED_CAN_PLAY_IN_CAR_IDLES(ped, toggle);
    }

    static void WREN_PED_IS_TARGET_PED_IN_PERCEPTION_AREA(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Ped targetPed = (Ped)wrenGetSlotDouble(vm, 2);
        float p2 = (float)wrenGetSlotDouble(vm, 3);
        float p3 = (float)wrenGetSlotDouble(vm, 4);
        float p4 = (float)wrenGetSlotDouble(vm, 5);
        float p5 = (float)wrenGetSlotDouble(vm, 6);

        BOOL res = PED::IS_TARGET_PED_IN_PERCEPTION_AREA(ped, targetPed, p2, p3, p4, p5);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_SET_POP_CONTROL_SPHERE_THIS_FRAME(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        float min = (float)wrenGetSlotDouble(vm, 4);
        float max = (float)wrenGetSlotDouble(vm, 5);

        PED::SET_POP_CONTROL_SPHERE_THIS_FRAME(x, y, z, min, max);
    }

    static void WREN_PED_FORCE_ZERO_MASS_IN_COLLISIONS(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        PED::FORCE_ZERO_MASS_IN_COLLISIONS(ped);
    }

    static void WREN_PED_SET_DISABLE_HIGH_FALL_DEATH(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PED::SET_DISABLE_HIGH_FALL_DEATH(ped, toggle);
    }

    static void WREN_PED_SET_PED_PHONE_PALETTE_IDX(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        PED::SET_PED_PHONE_PALETTE_IDX(p0, p1);
    }

    static void WREN_PED_SET_PED_STEER_BIAS(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float value = (float)wrenGetSlotDouble(vm, 2);

        PED::SET_PED_STEER_BIAS(ped, value);
    }

    static void WREN_PED_IS_PED_SWITCHING_WEAPON(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::IS_PED_SWITCHING_WEAPON(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_SET_PED_TREATED_AS_FRIENDLY(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);

        PED::SET_PED_TREATED_AS_FRIENDLY(p0, p1, p2);
    }

    static void WREN_PED_SET_DISABLE_PED_MAP_COLLISION(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        PED::SET_DISABLE_PED_MAP_COLLISION(ped);
    }

    static void WREN_PED_ENABLE_MP_LIGHT(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PED::ENABLE_MP_LIGHT(ped, toggle);
    }

    static void WREN_PED_GET_MP_LIGHT_ENABLED(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = PED::GET_MP_LIGHT_ENABLED(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PED_CLEAR_COVER_POINT_FOR_PED(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        PED::CLEAR_COVER_POINT_FOR_PED(ped);
    }

    static void WREN_PED_SET_ALLOW_STUNT_JUMP_CAMERA(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PED::SET_ALLOW_STUNT_JUMP_CAMERA(ped, toggle);
    }


    static void WREN_PHYSICS_ADD_ROPE(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        float rotX = (float)wrenGetSlotDouble(vm, 4);
        float rotY = (float)wrenGetSlotDouble(vm, 5);
        float rotZ = (float)wrenGetSlotDouble(vm, 6);
        float length = (float)wrenGetSlotDouble(vm, 7);
        int ropeType = (int)wrenGetSlotDouble(vm, 8);
        float maxLength = (float)wrenGetSlotDouble(vm, 9);
        float minLength = (float)wrenGetSlotDouble(vm, 10);
        float windingSpeed = (float)wrenGetSlotDouble(vm, 11);
        BOOL p11 = (BOOL)wrenGetSlotBool(vm, 12);
        BOOL p12 = (BOOL)wrenGetSlotBool(vm, 13);
        BOOL rigid = (BOOL)wrenGetSlotBool(vm, 14);
        float p14 = (float)wrenGetSlotDouble(vm, 15);
        BOOL breakWhenShot = (BOOL)wrenGetSlotBool(vm, 16);
        Any unkPtr;

        int res = PHYSICS::ADD_ROPE(x, y, z, rotX, rotY, rotZ, length, ropeType, maxLength, minLength, windingSpeed, p11, p12, rigid, p14, breakWhenShot, &unkPtr);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, unkPtr);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_PHYSICS_DELETE_ROPE(WrenVM* vm)
    {
        int ropeId;

        PHYSICS::DELETE_ROPE(&ropeId);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_PHYSICS_DELETE_CHILD_ROPE(WrenVM* vm)
    {
        int ropeId = (int)wrenGetSlotDouble(vm, 1);

        PHYSICS::DELETE_CHILD_ROPE(ropeId);
    }

    static void WREN_PHYSICS_DOES_ROPE_EXIST(WrenVM* vm)
    {
        int ropeId;

        BOOL res = PHYSICS::DOES_ROPE_EXIST(&ropeId);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, ropeId);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_PHYSICS_ROPE_DRAW_ENABLED(WrenVM* vm)
    {
        int ropeId;
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 1);

        PHYSICS::ROPE_DRAW_ENABLED(&ropeId, p1);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_PHYSICS_ROPE_DRAW_SHADOW_ENABLED(WrenVM* vm)
    {
        int ropeId;
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        PHYSICS::ROPE_DRAW_SHADOW_ENABLED(&ropeId, toggle);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_PHYSICS_LOAD_ROPE_DATA(WrenVM* vm)
    {
        int ropeId = (int)wrenGetSlotDouble(vm, 1);
        const char* rope_preset = wrenGetSlotString(vm, 2);

        PHYSICS::LOAD_ROPE_DATA(ropeId, rope_preset);
    }

    static void WREN_PHYSICS_PIN_ROPE_VERTEX(WrenVM* vm)
    {
        int ropeId = (int)wrenGetSlotDouble(vm, 1);
        int vertex = (int)wrenGetSlotDouble(vm, 2);
        float x = (float)wrenGetSlotDouble(vm, 3);
        float y = (float)wrenGetSlotDouble(vm, 4);
        float z = (float)wrenGetSlotDouble(vm, 5);

        PHYSICS::PIN_ROPE_VERTEX(ropeId, vertex, x, y, z);
    }

    static void WREN_PHYSICS_UNPIN_ROPE_VERTEX(WrenVM* vm)
    {
        int ropeId = (int)wrenGetSlotDouble(vm, 1);
        int vertex = (int)wrenGetSlotDouble(vm, 2);

        PHYSICS::UNPIN_ROPE_VERTEX(ropeId, vertex);
    }

    static void WREN_PHYSICS_GET_ROPE_VERTEX_COUNT(WrenVM* vm)
    {
        int ropeId = (int)wrenGetSlotDouble(vm, 1);

        int res = PHYSICS::GET_ROPE_VERTEX_COUNT(ropeId);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PHYSICS_ATTACH_ENTITIES_TO_ROPE(WrenVM* vm)
    {
        int ropeId = (int)wrenGetSlotDouble(vm, 1);
        Entity ent1 = (Entity)wrenGetSlotDouble(vm, 2);
        Entity ent2 = (Entity)wrenGetSlotDouble(vm, 3);
        float ent1_x = (float)wrenGetSlotDouble(vm, 4);
        float ent1_y = (float)wrenGetSlotDouble(vm, 5);
        float ent1_z = (float)wrenGetSlotDouble(vm, 6);
        float ent2_x = (float)wrenGetSlotDouble(vm, 7);
        float ent2_y = (float)wrenGetSlotDouble(vm, 8);
        float ent2_z = (float)wrenGetSlotDouble(vm, 9);
        float length = (float)wrenGetSlotDouble(vm, 10);
        BOOL p10 = (BOOL)wrenGetSlotBool(vm, 11);
        BOOL p11 = (BOOL)wrenGetSlotBool(vm, 12);
        Any p12;
        Any p13;

        PHYSICS::ATTACH_ENTITIES_TO_ROPE(ropeId, ent1, ent2, ent1_x, ent1_y, ent1_z, ent2_x, ent2_y, ent2_z, length, p10, p11, &p12, &p13);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, p12);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p13);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_PHYSICS_ATTACH_ROPE_TO_ENTITY(WrenVM* vm)
    {
        int ropeId = (int)wrenGetSlotDouble(vm, 1);
        Entity entity = (Entity)wrenGetSlotDouble(vm, 2);
        float x = (float)wrenGetSlotDouble(vm, 3);
        float y = (float)wrenGetSlotDouble(vm, 4);
        float z = (float)wrenGetSlotDouble(vm, 5);
        BOOL p5 = (BOOL)wrenGetSlotBool(vm, 6);

        PHYSICS::ATTACH_ROPE_TO_ENTITY(ropeId, entity, x, y, z, p5);
    }

    static void WREN_PHYSICS_DETACH_ROPE_FROM_ENTITY(WrenVM* vm)
    {
        int ropeId = (int)wrenGetSlotDouble(vm, 1);
        Entity entity = (Entity)wrenGetSlotDouble(vm, 2);

        PHYSICS::DETACH_ROPE_FROM_ENTITY(ropeId, entity);
    }

    static void WREN_PHYSICS_ROPE_SET_UPDATE_PINVERTS(WrenVM* vm)
    {
        int ropeId = (int)wrenGetSlotDouble(vm, 1);

        PHYSICS::ROPE_SET_UPDATE_PINVERTS(ropeId);
    }

    static void WREN_PHYSICS_ROPE_SET_UPDATE_ORDER(WrenVM* vm)
    {
        int ropeId = (int)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        PHYSICS::ROPE_SET_UPDATE_ORDER(ropeId, p1);
    }

    static void WREN_PHYSICS_ROPE_SET_SMOOTH_REELIN(WrenVM* vm)
    {
        int ropeId = (int)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        PHYSICS::ROPE_SET_SMOOTH_REELIN(ropeId, p1);
    }

    static void WREN_PHYSICS_IS_ROPE_ATTACHED_AT_BOTH_ENDS(WrenVM* vm)
    {
        int ropeId;

        BOOL res = PHYSICS::IS_ROPE_ATTACHED_AT_BOTH_ENDS(&ropeId);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, ropeId);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_PHYSICS_GET_ROPE_LAST_VERTEX_COORD(WrenVM* vm)
    {
        int ropeId = (int)wrenGetSlotDouble(vm, 1);

        Vector3 res = PHYSICS::GET_ROPE_LAST_VERTEX_COORD(ropeId);

        wrenEnsureSlots(vm, 1);

        wrenGetVariable(vm, "natives", "Vector3", 0);
        Vector3* wren_res = (Vector3*)wrenSetSlotNewForeign(vm, 0, 0, sizeof(Vector3));
        wren_res->x = res.x;
        wren_res->y = res.y;
        wren_res->z = res.z;
    }

    static void WREN_PHYSICS_GET_ROPE_VERTEX_COORD(WrenVM* vm)
    {
        int ropeId = (int)wrenGetSlotDouble(vm, 1);
        int vertex = (int)wrenGetSlotDouble(vm, 2);

        Vector3 res = PHYSICS::GET_ROPE_VERTEX_COORD(ropeId, vertex);

        wrenEnsureSlots(vm, 1);

        wrenGetVariable(vm, "natives", "Vector3", 0);
        Vector3* wren_res = (Vector3*)wrenSetSlotNewForeign(vm, 0, 0, sizeof(Vector3));
        wren_res->x = res.x;
        wren_res->y = res.y;
        wren_res->z = res.z;
    }

    static void WREN_PHYSICS_START_ROPE_WINDING(WrenVM* vm)
    {
        int ropeId = (int)wrenGetSlotDouble(vm, 1);

        PHYSICS::START_ROPE_WINDING(ropeId);
    }

    static void WREN_PHYSICS_STOP_ROPE_WINDING(WrenVM* vm)
    {
        int ropeId = (int)wrenGetSlotDouble(vm, 1);

        PHYSICS::STOP_ROPE_WINDING(ropeId);
    }

    static void WREN_PHYSICS_START_ROPE_UNWINDING_FRONT(WrenVM* vm)
    {
        int ropeId = (int)wrenGetSlotDouble(vm, 1);

        PHYSICS::START_ROPE_UNWINDING_FRONT(ropeId);
    }

    static void WREN_PHYSICS_STOP_ROPE_UNWINDING_FRONT(WrenVM* vm)
    {
        int ropeId = (int)wrenGetSlotDouble(vm, 1);

        PHYSICS::STOP_ROPE_UNWINDING_FRONT(ropeId);
    }

    static void WREN_PHYSICS_ROPE_CONVERT_TO_SIMPLE(WrenVM* vm)
    {
        int ropeId = (int)wrenGetSlotDouble(vm, 1);

        PHYSICS::ROPE_CONVERT_TO_SIMPLE(ropeId);
    }

    static void WREN_PHYSICS_ROPE_LOAD_TEXTURES(WrenVM* vm)
    {

        PHYSICS::ROPE_LOAD_TEXTURES();
    }

    static void WREN_PHYSICS_ROPE_ARE_TEXTURES_LOADED(WrenVM* vm)
    {

        BOOL res = PHYSICS::ROPE_ARE_TEXTURES_LOADED();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PHYSICS_ROPE_UNLOAD_TEXTURES(WrenVM* vm)
    {

        PHYSICS::ROPE_UNLOAD_TEXTURES();
    }

    static void WREN_PHYSICS_DOES_SCRIPT_OWN_ROPE(WrenVM* vm)
    {
        int ropeId = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = PHYSICS::DOES_SCRIPT_OWN_ROPE(ropeId);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PHYSICS_ROPE_ATTACH_VIRTUAL_BOUND_GEOM(WrenVM* vm)
    {
        int ropeId = (int)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);
        float p2 = (float)wrenGetSlotDouble(vm, 3);
        float p3 = (float)wrenGetSlotDouble(vm, 4);
        float p4 = (float)wrenGetSlotDouble(vm, 5);
        float p5 = (float)wrenGetSlotDouble(vm, 6);
        float p6 = (float)wrenGetSlotDouble(vm, 7);
        float p7 = (float)wrenGetSlotDouble(vm, 8);
        float p8 = (float)wrenGetSlotDouble(vm, 9);
        float p9 = (float)wrenGetSlotDouble(vm, 10);
        float p10 = (float)wrenGetSlotDouble(vm, 11);
        float p11 = (float)wrenGetSlotDouble(vm, 12);
        float p12 = (float)wrenGetSlotDouble(vm, 13);
        float p13 = (float)wrenGetSlotDouble(vm, 14);

        PHYSICS::ROPE_ATTACH_VIRTUAL_BOUND_GEOM(ropeId, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13);
    }

    static void WREN_PHYSICS_ROPE_CHANGE_SCRIPT_OWNER(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        PHYSICS::ROPE_CHANGE_SCRIPT_OWNER(p0, p1, p2);
    }

    static void WREN_PHYSICS_ROPE_SET_REFFRAMEVELOCITY_COLLIDERORDER(WrenVM* vm)
    {
        int ropeId = (int)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);

        PHYSICS::ROPE_SET_REFFRAMEVELOCITY_COLLIDERORDER(ropeId, p1);
    }

    static void WREN_PHYSICS_ROPE_GET_DISTANCE_BETWEEN_ENDS(WrenVM* vm)
    {
        int ropeId = (int)wrenGetSlotDouble(vm, 1);

        float res = PHYSICS::ROPE_GET_DISTANCE_BETWEEN_ENDS(ropeId);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PHYSICS_ROPE_FORCE_LENGTH(WrenVM* vm)
    {
        int ropeId = (int)wrenGetSlotDouble(vm, 1);
        float length = (float)wrenGetSlotDouble(vm, 2);

        PHYSICS::ROPE_FORCE_LENGTH(ropeId, length);
    }

    static void WREN_PHYSICS_ROPE_RESET_LENGTH(WrenVM* vm)
    {
        int ropeId = (int)wrenGetSlotDouble(vm, 1);
        float length = (float)wrenGetSlotDouble(vm, 2);

        PHYSICS::ROPE_RESET_LENGTH(ropeId, length);
    }

    static void WREN_PHYSICS_APPLY_IMPULSE_TO_CLOTH(WrenVM* vm)
    {
        float posX = (float)wrenGetSlotDouble(vm, 1);
        float posY = (float)wrenGetSlotDouble(vm, 2);
        float posZ = (float)wrenGetSlotDouble(vm, 3);
        float vecX = (float)wrenGetSlotDouble(vm, 4);
        float vecY = (float)wrenGetSlotDouble(vm, 5);
        float vecZ = (float)wrenGetSlotDouble(vm, 6);
        float impulse = (float)wrenGetSlotDouble(vm, 7);

        PHYSICS::APPLY_IMPULSE_TO_CLOTH(posX, posY, posZ, vecX, vecY, vecZ, impulse);
    }

    static void WREN_PHYSICS_SET_DAMPING(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        int vertex = (int)wrenGetSlotDouble(vm, 2);
        float value = (float)wrenGetSlotDouble(vm, 3);

        PHYSICS::SET_DAMPING(entity, vertex, value);
    }

    static void WREN_PHYSICS_ACTIVATE_PHYSICS(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        PHYSICS::ACTIVATE_PHYSICS(entity);
    }

    static void WREN_PHYSICS_SET_CGOFFSET(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);

        PHYSICS::SET_CGOFFSET(entity, x, y, z);
    }

    static void WREN_PHYSICS_GET_CGOFFSET(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        Vector3 res = PHYSICS::GET_CGOFFSET(entity);

        wrenEnsureSlots(vm, 1);

        wrenGetVariable(vm, "natives", "Vector3", 0);
        Vector3* wren_res = (Vector3*)wrenSetSlotNewForeign(vm, 0, 0, sizeof(Vector3));
        wren_res->x = res.x;
        wren_res->y = res.y;
        wren_res->z = res.z;
    }

    static void WREN_PHYSICS_SET_CG_AT_BOUNDCENTER(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        PHYSICS::SET_CG_AT_BOUNDCENTER(entity);
    }

    static void WREN_PHYSICS_BREAK_ENTITY_GLASS(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);
        float p2 = (float)wrenGetSlotDouble(vm, 3);
        float p3 = (float)wrenGetSlotDouble(vm, 4);
        float p4 = (float)wrenGetSlotDouble(vm, 5);
        float p5 = (float)wrenGetSlotDouble(vm, 6);
        float p6 = (float)wrenGetSlotDouble(vm, 7);
        float p7 = (float)wrenGetSlotDouble(vm, 8);
        float p8 = (float)wrenGetSlotDouble(vm, 9);
        Any p9 = (Any)wrenGetSlotDouble(vm, 10);
        BOOL p10 = (BOOL)wrenGetSlotBool(vm, 11);

        PHYSICS::BREAK_ENTITY_GLASS(entity, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
    }

    static void WREN_PHYSICS_GET_IS_ENTITY_A_FRAG(WrenVM* vm)
    {
        Object object = (Object)wrenGetSlotDouble(vm, 1);

        BOOL res = PHYSICS::GET_IS_ENTITY_A_FRAG(object);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PHYSICS_SET_DISABLE_BREAKING(WrenVM* vm)
    {
        Object object = (Object)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PHYSICS::SET_DISABLE_BREAKING(object, toggle);
    }

    static void WREN_PHYSICS_RESET_DISABLE_BREAKING(WrenVM* vm)
    {
        Object object = (Object)wrenGetSlotDouble(vm, 1);

        PHYSICS::RESET_DISABLE_BREAKING(object);
    }

    static void WREN_PHYSICS_SET_DISABLE_FRAG_DAMAGE(WrenVM* vm)
    {
        Object object = (Object)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PHYSICS::SET_DISABLE_FRAG_DAMAGE(object, toggle);
    }

    static void WREN_PHYSICS_SET_USE_KINEMATIC_PHYSICS(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PHYSICS::SET_USE_KINEMATIC_PHYSICS(entity, toggle);
    }

    static void WREN_PHYSICS_SET_IN_STUNT_MODE(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        PHYSICS::SET_IN_STUNT_MODE(p0);
    }

    static void WREN_PHYSICS_SET_IN_ARENA_MODE(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        PHYSICS::SET_IN_ARENA_MODE(toggle);
    }


    static void WREN_PLAYER_GET_PLAYER_PED(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        Ped res = PLAYER::GET_PLAYER_PED(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PLAYER_GET_PLAYER_PED_SCRIPT_INDEX(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        Ped res = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PLAYER_SET_PLAYER_MODEL(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        Hash model = (Hash)wrenGetSlotDouble(vm, 2);

        PLAYER::SET_PLAYER_MODEL(player, model);
    }

    static void WREN_PLAYER_CHANGE_PLAYER_PED(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        Ped ped = (Ped)wrenGetSlotDouble(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);
        BOOL resetDamage = (BOOL)wrenGetSlotBool(vm, 4);

        PLAYER::CHANGE_PLAYER_PED(player, ped, p2, resetDamage);
    }

    static void WREN_PLAYER_GET_PLAYER_RGB_COLOUR(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        int r;
        int g;
        int b;

        PLAYER::GET_PLAYER_RGB_COLOUR(player, &r, &g, &b);

        wrenEnsureSlots(vm, 6);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, r);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, g);
        wrenInsertInList(vm, 0, 1, 2);

        wrenSetSlotDouble(vm, 3, b);
        wrenInsertInList(vm, 0, 2, 3);

    }

    static void WREN_PLAYER_GET_NUMBER_OF_PLAYERS(WrenVM* vm)
    {

        int res = PLAYER::GET_NUMBER_OF_PLAYERS();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PLAYER_GET_PLAYER_TEAM(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        int res = PLAYER::GET_PLAYER_TEAM(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PLAYER_SET_PLAYER_TEAM(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        int team = (int)wrenGetSlotDouble(vm, 2);

        PLAYER::SET_PLAYER_TEAM(player, team);
    }

    static void WREN_PLAYER_GET_NUMBER_OF_PLAYERS_IN_TEAM(WrenVM* vm)
    {
        int team = (int)wrenGetSlotDouble(vm, 1);

        int res = PLAYER::GET_NUMBER_OF_PLAYERS_IN_TEAM(team);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PLAYER_GET_PLAYER_NAME(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        const char* res = PLAYER::GET_PLAYER_NAME(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotString(vm, 0, res);
    }

    static void WREN_PLAYER_GET_WANTED_LEVEL_RADIUS(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        float res = PLAYER::GET_WANTED_LEVEL_RADIUS(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PLAYER_GET_PLAYER_WANTED_CENTRE_POSITION(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        Vector3 res = PLAYER::GET_PLAYER_WANTED_CENTRE_POSITION(player);

        wrenEnsureSlots(vm, 1);

        wrenGetVariable(vm, "natives", "Vector3", 0);
        Vector3* wren_res = (Vector3*)wrenSetSlotNewForeign(vm, 0, 0, sizeof(Vector3));
        wren_res->x = res.x;
        wren_res->y = res.y;
        wren_res->z = res.z;
    }

    static void WREN_PLAYER_SET_PLAYER_WANTED_CENTRE_POSITION(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        Vector3 position;
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p3 = (BOOL)wrenGetSlotBool(vm, 3);

        PLAYER::SET_PLAYER_WANTED_CENTRE_POSITION(player, &position, p2, p3);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_PLAYER_GET_WANTED_LEVEL_THRESHOLD(WrenVM* vm)
    {
        int wantedLevel = (int)wrenGetSlotDouble(vm, 1);

        int res = PLAYER::GET_WANTED_LEVEL_THRESHOLD(wantedLevel);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PLAYER_SET_PLAYER_WANTED_LEVEL(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        int wantedLevel = (int)wrenGetSlotDouble(vm, 2);
        BOOL disableNoMission = (BOOL)wrenGetSlotBool(vm, 3);

        PLAYER::SET_PLAYER_WANTED_LEVEL(player, wantedLevel, disableNoMission);
    }

    static void WREN_PLAYER_SET_PLAYER_WANTED_LEVEL_NO_DROP(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        int wantedLevel = (int)wrenGetSlotDouble(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        PLAYER::SET_PLAYER_WANTED_LEVEL_NO_DROP(player, wantedLevel, p2);
    }

    static void WREN_PLAYER_SET_PLAYER_WANTED_LEVEL_NOW(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        PLAYER::SET_PLAYER_WANTED_LEVEL_NOW(player, p1);
    }

    static void WREN_PLAYER_ARE_PLAYER_FLASHING_STARS_ABOUT_TO_DROP(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        BOOL res = PLAYER::ARE_PLAYER_FLASHING_STARS_ABOUT_TO_DROP(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PLAYER_ARE_PLAYER_STARS_GREYED_OUT(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        BOOL res = PLAYER::ARE_PLAYER_STARS_GREYED_OUT(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PLAYER_IS_WANTED_AND_HAS_BEEN_SEEN_BY_COPS(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        BOOL res = PLAYER::IS_WANTED_AND_HAS_BEEN_SEEN_BY_COPS(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PLAYER_SET_DISPATCH_COPS_FOR_PLAYER(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PLAYER::SET_DISPATCH_COPS_FOR_PLAYER(player, toggle);
    }

    static void WREN_PLAYER_IS_PLAYER_WANTED_LEVEL_GREATER(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        int wantedLevel = (int)wrenGetSlotDouble(vm, 2);

        BOOL res = PLAYER::IS_PLAYER_WANTED_LEVEL_GREATER(player, wantedLevel);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PLAYER_CLEAR_PLAYER_WANTED_LEVEL(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        PLAYER::CLEAR_PLAYER_WANTED_LEVEL(player);
    }

    static void WREN_PLAYER_IS_PLAYER_DEAD(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        BOOL res = PLAYER::IS_PLAYER_DEAD(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PLAYER_IS_PLAYER_PRESSING_HORN(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        BOOL res = PLAYER::IS_PLAYER_PRESSING_HORN(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PLAYER_SET_PLAYER_CONTROL(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        BOOL bHasControl = (BOOL)wrenGetSlotBool(vm, 2);
        int flags = (int)wrenGetSlotDouble(vm, 3);

        PLAYER::SET_PLAYER_CONTROL(player, bHasControl, flags);
    }

    static void WREN_PLAYER_GET_PLAYER_WANTED_LEVEL(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        int res = PLAYER::GET_PLAYER_WANTED_LEVEL(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PLAYER_SET_MAX_WANTED_LEVEL(WrenVM* vm)
    {
        int maxWantedLevel = (int)wrenGetSlotDouble(vm, 1);

        PLAYER::SET_MAX_WANTED_LEVEL(maxWantedLevel);
    }

    static void WREN_PLAYER_SET_POLICE_RADAR_BLIPS(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        PLAYER::SET_POLICE_RADAR_BLIPS(toggle);
    }

    static void WREN_PLAYER_SET_POLICE_IGNORE_PLAYER(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PLAYER::SET_POLICE_IGNORE_PLAYER(player, toggle);
    }

    static void WREN_PLAYER_IS_PLAYER_PLAYING(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        BOOL res = PLAYER::IS_PLAYER_PLAYING(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PLAYER_SET_EVERYONE_IGNORE_PLAYER(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PLAYER::SET_EVERYONE_IGNORE_PLAYER(player, toggle);
    }

    static void WREN_PLAYER_SET_ALL_RANDOM_PEDS_FLEE(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PLAYER::SET_ALL_RANDOM_PEDS_FLEE(player, toggle);
    }

    static void WREN_PLAYER_SET_ALL_RANDOM_PEDS_FLEE_THIS_FRAME(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        PLAYER::SET_ALL_RANDOM_PEDS_FLEE_THIS_FRAME(player);
    }

    static void WREN_PLAYER_SET_ALL_NEUTRAL_RANDOM_PEDS_FLEE(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PLAYER::SET_ALL_NEUTRAL_RANDOM_PEDS_FLEE(player, toggle);
    }

    static void WREN_PLAYER_SET_ALL_NEUTRAL_RANDOM_PEDS_FLEE_THIS_FRAME(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        PLAYER::SET_ALL_NEUTRAL_RANDOM_PEDS_FLEE_THIS_FRAME(player);
    }

    static void WREN_PLAYER_SET_LAW_PEDS_CAN_ATTACK_NON_WANTED_PLAYER_THIS_FRAME(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        PLAYER::SET_LAW_PEDS_CAN_ATTACK_NON_WANTED_PLAYER_THIS_FRAME(player);
    }

    static void WREN_PLAYER_SET_IGNORE_LOW_PRIORITY_SHOCKING_EVENTS(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PLAYER::SET_IGNORE_LOW_PRIORITY_SHOCKING_EVENTS(player, toggle);
    }

    static void WREN_PLAYER_SET_WANTED_LEVEL_MULTIPLIER(WrenVM* vm)
    {
        float multiplier = (float)wrenGetSlotDouble(vm, 1);

        PLAYER::SET_WANTED_LEVEL_MULTIPLIER(multiplier);
    }

    static void WREN_PLAYER_SET_WANTED_LEVEL_DIFFICULTY(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        float difficulty = (float)wrenGetSlotDouble(vm, 2);

        PLAYER::SET_WANTED_LEVEL_DIFFICULTY(player, difficulty);
    }

    static void WREN_PLAYER_RESET_WANTED_LEVEL_DIFFICULTY(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        PLAYER::RESET_WANTED_LEVEL_DIFFICULTY(player);
    }

    static void WREN_PLAYER_GET_WANTED_LEVEL_TIME_TO_ESCAPE(WrenVM* vm)
    {

        int res = PLAYER::GET_WANTED_LEVEL_TIME_TO_ESCAPE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PLAYER_SET_WANTED_LEVEL_HIDDEN_ESCAPE_TIME(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        int wantedLevel = (int)wrenGetSlotDouble(vm, 2);
        int lossTime = (int)wrenGetSlotDouble(vm, 3);

        PLAYER::SET_WANTED_LEVEL_HIDDEN_ESCAPE_TIME(player, wantedLevel, lossTime);
    }

    static void WREN_PLAYER_RESET_WANTED_LEVEL_HIDDEN_ESCAPE_TIME(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        PLAYER::RESET_WANTED_LEVEL_HIDDEN_ESCAPE_TIME(player);
    }

    static void WREN_PLAYER_START_FIRING_AMNESTY(WrenVM* vm)
    {
        int duration = (int)wrenGetSlotDouble(vm, 1);

        PLAYER::START_FIRING_AMNESTY(duration);
    }

    static void WREN_PLAYER_REPORT_CRIME(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        int crimeType = (int)wrenGetSlotDouble(vm, 2);
        int wantedLvlThresh = (int)wrenGetSlotDouble(vm, 3);

        PLAYER::REPORT_CRIME(player, crimeType, wantedLvlThresh);
    }

    static void WREN_PLAYER_SUPPRESS_CRIME_THIS_FRAME(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        int crimeType = (int)wrenGetSlotDouble(vm, 2);

        PLAYER::SUPPRESS_CRIME_THIS_FRAME(player, crimeType);
    }

    static void WREN_PLAYER_UPDATE_WANTED_POSITION_THIS_FRAME(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        PLAYER::UPDATE_WANTED_POSITION_THIS_FRAME(player);
    }

    static void WREN_PLAYER_SUPPRESS_LOSING_WANTED_LEVEL_IF_HIDDEN_THIS_FRAME(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        PLAYER::SUPPRESS_LOSING_WANTED_LEVEL_IF_HIDDEN_THIS_FRAME(player);
    }

    static void WREN_PLAYER_ALLOW_EVASION_HUD_IF_DISABLING_HIDDEN_EVASION_THIS_FRAME(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        PLAYER::ALLOW_EVASION_HUD_IF_DISABLING_HIDDEN_EVASION_THIS_FRAME(player, p1);
    }

    static void WREN_PLAYER_FORCE_START_HIDDEN_EVASION(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        PLAYER::FORCE_START_HIDDEN_EVASION(player);
    }

    static void WREN_PLAYER_SUPPRESS_WITNESSES_CALLING_POLICE_THIS_FRAME(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        PLAYER::SUPPRESS_WITNESSES_CALLING_POLICE_THIS_FRAME(player);
    }

    static void WREN_PLAYER_REPORT_POLICE_SPOTTED_PLAYER(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        PLAYER::REPORT_POLICE_SPOTTED_PLAYER(player);
    }

    static void WREN_PLAYER_SET_LAW_RESPONSE_DELAY_OVERRIDE(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);

        PLAYER::SET_LAW_RESPONSE_DELAY_OVERRIDE(p0);
    }

    static void WREN_PLAYER_RESET_LAW_RESPONSE_DELAY_OVERRIDE(WrenVM* vm)
    {

        PLAYER::RESET_LAW_RESPONSE_DELAY_OVERRIDE();
    }

    static void WREN_PLAYER_CAN_PLAYER_START_MISSION(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        BOOL res = PLAYER::CAN_PLAYER_START_MISSION(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PLAYER_IS_PLAYER_READY_FOR_CUTSCENE(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        BOOL res = PLAYER::IS_PLAYER_READY_FOR_CUTSCENE(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PLAYER_IS_PLAYER_TARGETTING_ENTITY(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        Entity entity = (Entity)wrenGetSlotDouble(vm, 2);

        BOOL res = PLAYER::IS_PLAYER_TARGETTING_ENTITY(player, entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PLAYER_GET_PLAYER_TARGET_ENTITY(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        Entity entity;

        BOOL res = PLAYER::GET_PLAYER_TARGET_ENTITY(player, &entity);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, entity);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_PLAYER_IS_PLAYER_FREE_AIMING(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        BOOL res = PLAYER::IS_PLAYER_FREE_AIMING(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PLAYER_IS_PLAYER_FREE_AIMING_AT_ENTITY(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        Entity entity = (Entity)wrenGetSlotDouble(vm, 2);

        BOOL res = PLAYER::IS_PLAYER_FREE_AIMING_AT_ENTITY(player, entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PLAYER_GET_ENTITY_PLAYER_IS_FREE_AIMING_AT(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        Entity entity;

        BOOL res = PLAYER::GET_ENTITY_PLAYER_IS_FREE_AIMING_AT(player, &entity);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, entity);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_PLAYER_SET_PLAYER_LOCKON_RANGE_OVERRIDE(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        float range = (float)wrenGetSlotDouble(vm, 2);

        PLAYER::SET_PLAYER_LOCKON_RANGE_OVERRIDE(player, range);
    }

    static void WREN_PLAYER_SET_PLAYER_CAN_DO_DRIVE_BY(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PLAYER::SET_PLAYER_CAN_DO_DRIVE_BY(player, toggle);
    }

    static void WREN_PLAYER_SET_PLAYER_CAN_BE_HASSLED_BY_GANGS(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PLAYER::SET_PLAYER_CAN_BE_HASSLED_BY_GANGS(player, toggle);
    }

    static void WREN_PLAYER_SET_PLAYER_CAN_USE_COVER(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PLAYER::SET_PLAYER_CAN_USE_COVER(player, toggle);
    }

    static void WREN_PLAYER_GET_MAX_WANTED_LEVEL(WrenVM* vm)
    {

        int res = PLAYER::GET_MAX_WANTED_LEVEL();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PLAYER_IS_PLAYER_TARGETTING_ANYTHING(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        BOOL res = PLAYER::IS_PLAYER_TARGETTING_ANYTHING(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PLAYER_SET_PLAYER_SPRINT(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PLAYER::SET_PLAYER_SPRINT(player, toggle);
    }

    static void WREN_PLAYER_RESET_PLAYER_STAMINA(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        PLAYER::RESET_PLAYER_STAMINA(player);
    }

    static void WREN_PLAYER_RESTORE_PLAYER_STAMINA(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);

        PLAYER::RESTORE_PLAYER_STAMINA(player, p1);
    }

    static void WREN_PLAYER_GET_PLAYER_SPRINT_STAMINA_REMAINING(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        float res = PLAYER::GET_PLAYER_SPRINT_STAMINA_REMAINING(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PLAYER_GET_PLAYER_SPRINT_TIME_REMAINING(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        float res = PLAYER::GET_PLAYER_SPRINT_TIME_REMAINING(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PLAYER_GET_PLAYER_UNDERWATER_TIME_REMAINING(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        float res = PLAYER::GET_PLAYER_UNDERWATER_TIME_REMAINING(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PLAYER_SET_PLAYER_UNDERWATER_BREATH_PERCENT_REMAINING(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        float time = (float)wrenGetSlotDouble(vm, 2);

        Any res = PLAYER::SET_PLAYER_UNDERWATER_BREATH_PERCENT_REMAINING(player, time);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PLAYER_GET_PLAYER_GROUP(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        int res = PLAYER::GET_PLAYER_GROUP(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PLAYER_GET_PLAYER_MAX_ARMOUR(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        int res = PLAYER::GET_PLAYER_MAX_ARMOUR(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PLAYER_IS_PLAYER_CONTROL_ON(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        BOOL res = PLAYER::IS_PLAYER_CONTROL_ON(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PLAYER_GET_ARE_CAMERA_CONTROLS_DISABLED(WrenVM* vm)
    {

        BOOL res = PLAYER::GET_ARE_CAMERA_CONTROLS_DISABLED();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PLAYER_IS_PLAYER_SCRIPT_CONTROL_ON(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        BOOL res = PLAYER::IS_PLAYER_SCRIPT_CONTROL_ON(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PLAYER_IS_PLAYER_CLIMBING(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        BOOL res = PLAYER::IS_PLAYER_CLIMBING(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PLAYER_IS_PLAYER_BEING_ARRESTED(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        BOOL atArresting = (BOOL)wrenGetSlotBool(vm, 2);

        BOOL res = PLAYER::IS_PLAYER_BEING_ARRESTED(player, atArresting);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PLAYER_RESET_PLAYER_ARREST_STATE(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        PLAYER::RESET_PLAYER_ARREST_STATE(player);
    }

    static void WREN_PLAYER_GET_PLAYERS_LAST_VEHICLE(WrenVM* vm)
    {

        Vehicle res = PLAYER::GET_PLAYERS_LAST_VEHICLE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PLAYER_GET_PLAYER_INDEX(WrenVM* vm)
    {

        Player res = PLAYER::GET_PLAYER_INDEX();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PLAYER_INT_TO_PLAYERINDEX(WrenVM* vm)
    {
        int value = (int)wrenGetSlotDouble(vm, 1);

        Player res = PLAYER::INT_TO_PLAYERINDEX(value);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PLAYER_INT_TO_PARTICIPANTINDEX(WrenVM* vm)
    {
        int value = (int)wrenGetSlotDouble(vm, 1);

        int res = PLAYER::INT_TO_PARTICIPANTINDEX(value);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PLAYER_GET_TIME_SINCE_PLAYER_HIT_VEHICLE(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        int res = PLAYER::GET_TIME_SINCE_PLAYER_HIT_VEHICLE(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PLAYER_GET_TIME_SINCE_PLAYER_HIT_PED(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        int res = PLAYER::GET_TIME_SINCE_PLAYER_HIT_PED(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PLAYER_GET_TIME_SINCE_PLAYER_DROVE_ON_PAVEMENT(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        int res = PLAYER::GET_TIME_SINCE_PLAYER_DROVE_ON_PAVEMENT(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PLAYER_GET_TIME_SINCE_PLAYER_DROVE_AGAINST_TRAFFIC(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        int res = PLAYER::GET_TIME_SINCE_PLAYER_DROVE_AGAINST_TRAFFIC(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PLAYER_IS_PLAYER_FREE_FOR_AMBIENT_TASK(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        BOOL res = PLAYER::IS_PLAYER_FREE_FOR_AMBIENT_TASK(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PLAYER_PLAYER_ID(WrenVM* vm)
    {

        Player res = PLAYER::PLAYER_ID();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PLAYER_PLAYER_PED_ID(WrenVM* vm)
    {

        Ped res = PLAYER::PLAYER_PED_ID();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PLAYER_NETWORK_PLAYER_ID_TO_INT(WrenVM* vm)
    {

        int res = PLAYER::NETWORK_PLAYER_ID_TO_INT();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PLAYER_HAS_FORCE_CLEANUP_OCCURRED(WrenVM* vm)
    {
        int cleanupFlags = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = PLAYER::HAS_FORCE_CLEANUP_OCCURRED(cleanupFlags);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PLAYER_FORCE_CLEANUP(WrenVM* vm)
    {
        int cleanupFlags = (int)wrenGetSlotDouble(vm, 1);

        PLAYER::FORCE_CLEANUP(cleanupFlags);
    }

    static void WREN_PLAYER_FORCE_CLEANUP_FOR_ALL_THREADS_WITH_THIS_NAME(WrenVM* vm)
    {
        const char* name = wrenGetSlotString(vm, 1);
        int cleanupFlags = (int)wrenGetSlotDouble(vm, 2);

        PLAYER::FORCE_CLEANUP_FOR_ALL_THREADS_WITH_THIS_NAME(name, cleanupFlags);
    }

    static void WREN_PLAYER_FORCE_CLEANUP_FOR_THREAD_WITH_THIS_ID(WrenVM* vm)
    {
        int id = (int)wrenGetSlotDouble(vm, 1);
        int cleanupFlags = (int)wrenGetSlotDouble(vm, 2);

        PLAYER::FORCE_CLEANUP_FOR_THREAD_WITH_THIS_ID(id, cleanupFlags);
    }

    static void WREN_PLAYER_GET_CAUSE_OF_MOST_RECENT_FORCE_CLEANUP(WrenVM* vm)
    {

        int res = PLAYER::GET_CAUSE_OF_MOST_RECENT_FORCE_CLEANUP();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PLAYER_SET_PLAYER_MAY_ONLY_ENTER_THIS_VEHICLE(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 2);

        PLAYER::SET_PLAYER_MAY_ONLY_ENTER_THIS_VEHICLE(player, vehicle);
    }

    static void WREN_PLAYER_SET_PLAYER_MAY_NOT_ENTER_ANY_VEHICLE(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        PLAYER::SET_PLAYER_MAY_NOT_ENTER_ANY_VEHICLE(player);
    }

    static void WREN_PLAYER_GIVE_ACHIEVEMENT_TO_PLAYER(WrenVM* vm)
    {
        int achievementId = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = PLAYER::GIVE_ACHIEVEMENT_TO_PLAYER(achievementId);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PLAYER_SET_ACHIEVEMENT_PROGRESS(WrenVM* vm)
    {
        int achievementId = (int)wrenGetSlotDouble(vm, 1);
        int progress = (int)wrenGetSlotDouble(vm, 2);

        BOOL res = PLAYER::SET_ACHIEVEMENT_PROGRESS(achievementId, progress);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PLAYER_GET_ACHIEVEMENT_PROGRESS(WrenVM* vm)
    {
        int achievementId = (int)wrenGetSlotDouble(vm, 1);

        int res = PLAYER::GET_ACHIEVEMENT_PROGRESS(achievementId);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PLAYER_HAS_ACHIEVEMENT_BEEN_PASSED(WrenVM* vm)
    {
        int achievementId = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = PLAYER::HAS_ACHIEVEMENT_BEEN_PASSED(achievementId);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PLAYER_IS_PLAYER_ONLINE(WrenVM* vm)
    {

        BOOL res = PLAYER::IS_PLAYER_ONLINE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PLAYER_IS_PLAYER_LOGGING_IN_NP(WrenVM* vm)
    {

        BOOL res = PLAYER::IS_PLAYER_LOGGING_IN_NP();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PLAYER_DISPLAY_SYSTEM_SIGNIN_UI(WrenVM* vm)
    {
        BOOL unk = (BOOL)wrenGetSlotBool(vm, 1);

        PLAYER::DISPLAY_SYSTEM_SIGNIN_UI(unk);
    }

    static void WREN_PLAYER_IS_SYSTEM_UI_BEING_DISPLAYED(WrenVM* vm)
    {

        BOOL res = PLAYER::IS_SYSTEM_UI_BEING_DISPLAYED();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PLAYER_SET_PLAYER_INVINCIBLE(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PLAYER::SET_PLAYER_INVINCIBLE(player, toggle);
    }

    static void WREN_PLAYER_GET_PLAYER_INVINCIBLE(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        BOOL res = PLAYER::GET_PLAYER_INVINCIBLE(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PLAYER_GET_PLAYER_DEBUG_INVINCIBLE(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        BOOL res = PLAYER::GET_PLAYER_DEBUG_INVINCIBLE(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PLAYER_SET_PLAYER_INVINCIBLE_BUT_HAS_REACTIONS(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PLAYER::SET_PLAYER_INVINCIBLE_BUT_HAS_REACTIONS(player, toggle);
    }

    static void WREN_PLAYER_SET_PLAYER_CAN_COLLECT_DROPPED_MONEY(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        PLAYER::SET_PLAYER_CAN_COLLECT_DROPPED_MONEY(player, p1);
    }

    static void WREN_PLAYER_REMOVE_PLAYER_HELMET(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 2);

        PLAYER::REMOVE_PLAYER_HELMET(player, p2);
    }

    static void WREN_PLAYER_GIVE_PLAYER_RAGDOLL_CONTROL(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PLAYER::GIVE_PLAYER_RAGDOLL_CONTROL(player, toggle);
    }

    static void WREN_PLAYER_SET_PLAYER_LOCKON(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PLAYER::SET_PLAYER_LOCKON(player, toggle);
    }

    static void WREN_PLAYER_SET_PLAYER_TARGETING_MODE(WrenVM* vm)
    {
        int targetMode = (int)wrenGetSlotDouble(vm, 1);

        PLAYER::SET_PLAYER_TARGETING_MODE(targetMode);
    }

    static void WREN_PLAYER_SET_PLAYER_TARGET_LEVEL(WrenVM* vm)
    {
        int targetLevel = (int)wrenGetSlotDouble(vm, 1);

        PLAYER::SET_PLAYER_TARGET_LEVEL(targetLevel);
    }

    static void WREN_PLAYER_GET_IS_USING_FPS_THIRD_PERSON_COVER(WrenVM* vm)
    {

        BOOL res = PLAYER::GET_IS_USING_FPS_THIRD_PERSON_COVER();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PLAYER_GET_IS_USING_HOOD_CAMERA(WrenVM* vm)
    {

        BOOL res = PLAYER::GET_IS_USING_HOOD_CAMERA();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PLAYER_CLEAR_PLAYER_HAS_DAMAGED_AT_LEAST_ONE_PED(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        PLAYER::CLEAR_PLAYER_HAS_DAMAGED_AT_LEAST_ONE_PED(player);
    }

    static void WREN_PLAYER_HAS_PLAYER_DAMAGED_AT_LEAST_ONE_PED(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        BOOL res = PLAYER::HAS_PLAYER_DAMAGED_AT_LEAST_ONE_PED(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PLAYER_CLEAR_PLAYER_HAS_DAMAGED_AT_LEAST_ONE_NON_ANIMAL_PED(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        PLAYER::CLEAR_PLAYER_HAS_DAMAGED_AT_LEAST_ONE_NON_ANIMAL_PED(player);
    }

    static void WREN_PLAYER_HAS_PLAYER_DAMAGED_AT_LEAST_ONE_NON_ANIMAL_PED(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        BOOL res = PLAYER::HAS_PLAYER_DAMAGED_AT_LEAST_ONE_NON_ANIMAL_PED(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PLAYER_SET_AIR_DRAG_MULTIPLIER_FOR_PLAYERS_VEHICLE(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        float multiplier = (float)wrenGetSlotDouble(vm, 2);

        PLAYER::SET_AIR_DRAG_MULTIPLIER_FOR_PLAYERS_VEHICLE(player, multiplier);
    }

    static void WREN_PLAYER_SET_SWIM_MULTIPLIER_FOR_PLAYER(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        float multiplier = (float)wrenGetSlotDouble(vm, 2);

        PLAYER::SET_SWIM_MULTIPLIER_FOR_PLAYER(player, multiplier);
    }

    static void WREN_PLAYER_SET_RUN_SPRINT_MULTIPLIER_FOR_PLAYER(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        float multiplier = (float)wrenGetSlotDouble(vm, 2);

        PLAYER::SET_RUN_SPRINT_MULTIPLIER_FOR_PLAYER(player, multiplier);
    }

    static void WREN_PLAYER_GET_TIME_SINCE_LAST_ARREST(WrenVM* vm)
    {

        int res = PLAYER::GET_TIME_SINCE_LAST_ARREST();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PLAYER_GET_TIME_SINCE_LAST_DEATH(WrenVM* vm)
    {

        int res = PLAYER::GET_TIME_SINCE_LAST_DEATH();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PLAYER_ASSISTED_MOVEMENT_CLOSE_ROUTE(WrenVM* vm)
    {

        PLAYER::ASSISTED_MOVEMENT_CLOSE_ROUTE();
    }

    static void WREN_PLAYER_ASSISTED_MOVEMENT_FLUSH_ROUTE(WrenVM* vm)
    {

        PLAYER::ASSISTED_MOVEMENT_FLUSH_ROUTE();
    }

    static void WREN_PLAYER_SET_PLAYER_FORCED_AIM(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PLAYER::SET_PLAYER_FORCED_AIM(player, toggle);
    }

    static void WREN_PLAYER_SET_PLAYER_FORCED_ZOOM(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PLAYER::SET_PLAYER_FORCED_ZOOM(player, toggle);
    }

    static void WREN_PLAYER_SET_PLAYER_FORCE_SKIP_AIM_INTRO(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PLAYER::SET_PLAYER_FORCE_SKIP_AIM_INTRO(player, toggle);
    }

    static void WREN_PLAYER_DISABLE_PLAYER_FIRING(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PLAYER::DISABLE_PLAYER_FIRING(player, toggle);
    }

    static void WREN_PLAYER_DISABLE_PLAYER_THROW_GRENADE_WHILE_USING_GUN(WrenVM* vm)
    {

        PLAYER::DISABLE_PLAYER_THROW_GRENADE_WHILE_USING_GUN();
    }

    static void WREN_PLAYER_SET_DISABLE_AMBIENT_MELEE_MOVE(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PLAYER::SET_DISABLE_AMBIENT_MELEE_MOVE(player, toggle);
    }

    static void WREN_PLAYER_SET_PLAYER_MAX_ARMOUR(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        int value = (int)wrenGetSlotDouble(vm, 2);

        PLAYER::SET_PLAYER_MAX_ARMOUR(player, value);
    }

    static void WREN_PLAYER_SPECIAL_ABILITY_ACTIVATE(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);

        PLAYER::SPECIAL_ABILITY_ACTIVATE(player, p1);
    }

    static void WREN_PLAYER_SET_SPECIAL_ABILITY_MP(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);

        PLAYER::SET_SPECIAL_ABILITY_MP(player, p1, p2);
    }

    static void WREN_PLAYER_SPECIAL_ABILITY_DEACTIVATE_MP(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);

        PLAYER::SPECIAL_ABILITY_DEACTIVATE_MP(player, p1);
    }

    static void WREN_PLAYER_SPECIAL_ABILITY_DEACTIVATE(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        PLAYER::SPECIAL_ABILITY_DEACTIVATE(player, p1);
    }

    static void WREN_PLAYER_SPECIAL_ABILITY_DEACTIVATE_FAST(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        PLAYER::SPECIAL_ABILITY_DEACTIVATE_FAST(player, p1);
    }

    static void WREN_PLAYER_SPECIAL_ABILITY_RESET(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        PLAYER::SPECIAL_ABILITY_RESET(player, p1);
    }

    static void WREN_PLAYER_SPECIAL_ABILITY_CHARGE_ON_MISSION_FAILED(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        PLAYER::SPECIAL_ABILITY_CHARGE_ON_MISSION_FAILED(player, p1);
    }

    static void WREN_PLAYER_SPECIAL_ABILITY_CHARGE_SMALL(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        PLAYER::SPECIAL_ABILITY_CHARGE_SMALL(player, p1, p2, p3);
    }

    static void WREN_PLAYER_SPECIAL_ABILITY_CHARGE_MEDIUM(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        PLAYER::SPECIAL_ABILITY_CHARGE_MEDIUM(player, p1, p2, p3);
    }

    static void WREN_PLAYER_SPECIAL_ABILITY_CHARGE_LARGE(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        PLAYER::SPECIAL_ABILITY_CHARGE_LARGE(player, p1, p2, p3);
    }

    static void WREN_PLAYER_SPECIAL_ABILITY_CHARGE_CONTINUOUS(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        Ped p1 = (Ped)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);

        PLAYER::SPECIAL_ABILITY_CHARGE_CONTINUOUS(player, p1, p2);
    }

    static void WREN_PLAYER_SPECIAL_ABILITY_CHARGE_ABSOLUTE(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        PLAYER::SPECIAL_ABILITY_CHARGE_ABSOLUTE(player, p1, p2, p3);
    }

    static void WREN_PLAYER_SPECIAL_ABILITY_CHARGE_NORMALIZED(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        float normalizedValue = (float)wrenGetSlotDouble(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        PLAYER::SPECIAL_ABILITY_CHARGE_NORMALIZED(player, normalizedValue, p2, p3);
    }

    static void WREN_PLAYER_SPECIAL_ABILITY_FILL_METER(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);

        PLAYER::SPECIAL_ABILITY_FILL_METER(player, p1, p2);
    }

    static void WREN_PLAYER_SPECIAL_ABILITY_DEPLETE_METER(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);

        PLAYER::SPECIAL_ABILITY_DEPLETE_METER(player, p1, p2);
    }

    static void WREN_PLAYER_SPECIAL_ABILITY_LOCK(WrenVM* vm)
    {
        Hash playerModel = (Hash)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        PLAYER::SPECIAL_ABILITY_LOCK(playerModel, p1);
    }

    static void WREN_PLAYER_SPECIAL_ABILITY_UNLOCK(WrenVM* vm)
    {
        Hash playerModel = (Hash)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        PLAYER::SPECIAL_ABILITY_UNLOCK(playerModel, p1);
    }

    static void WREN_PLAYER_IS_SPECIAL_ABILITY_UNLOCKED(WrenVM* vm)
    {
        Hash playerModel = (Hash)wrenGetSlotDouble(vm, 1);

        BOOL res = PLAYER::IS_SPECIAL_ABILITY_UNLOCKED(playerModel);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PLAYER_IS_SPECIAL_ABILITY_ACTIVE(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        BOOL res = PLAYER::IS_SPECIAL_ABILITY_ACTIVE(player, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PLAYER_IS_SPECIAL_ABILITY_METER_FULL(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        BOOL res = PLAYER::IS_SPECIAL_ABILITY_METER_FULL(player, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PLAYER_ENABLE_SPECIAL_ABILITY(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);

        PLAYER::ENABLE_SPECIAL_ABILITY(player, toggle, p2);
    }

    static void WREN_PLAYER_IS_SPECIAL_ABILITY_ENABLED(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        BOOL res = PLAYER::IS_SPECIAL_ABILITY_ENABLED(player, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PLAYER_SET_SPECIAL_ABILITY_MULTIPLIER(WrenVM* vm)
    {
        float multiplier = (float)wrenGetSlotDouble(vm, 1);

        PLAYER::SET_SPECIAL_ABILITY_MULTIPLIER(multiplier);
    }

    static void WREN_PLAYER_UPDATE_SPECIAL_ABILITY_FROM_STAT(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        PLAYER::UPDATE_SPECIAL_ABILITY_FROM_STAT(player, p1);
    }

    static void WREN_PLAYER_GET_IS_PLAYER_DRIVING_ON_HIGHWAY(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        BOOL res = PLAYER::GET_IS_PLAYER_DRIVING_ON_HIGHWAY(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PLAYER_GET_IS_PLAYER_DRIVING_WRECKLESS(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);

        BOOL res = PLAYER::GET_IS_PLAYER_DRIVING_WRECKLESS(player, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PLAYER_GET_IS_MOPPING_AREA_FREE_IN_FRONT_OF_PLAYER(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);

        BOOL res = PLAYER::GET_IS_MOPPING_AREA_FREE_IN_FRONT_OF_PLAYER(player, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PLAYER_START_PLAYER_TELEPORT(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);
        float heading = (float)wrenGetSlotDouble(vm, 5);
        BOOL p5 = (BOOL)wrenGetSlotBool(vm, 6);
        BOOL findCollisionLand = (BOOL)wrenGetSlotBool(vm, 7);
        BOOL p7 = (BOOL)wrenGetSlotBool(vm, 8);

        PLAYER::START_PLAYER_TELEPORT(player, x, y, z, heading, p5, findCollisionLand, p7);
    }

    static void WREN_PLAYER_UPDATE_PLAYER_TELEPORT(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        BOOL res = PLAYER::UPDATE_PLAYER_TELEPORT(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PLAYER_STOP_PLAYER_TELEPORT(WrenVM* vm)
    {

        PLAYER::STOP_PLAYER_TELEPORT();
    }

    static void WREN_PLAYER_IS_PLAYER_TELEPORT_ACTIVE(WrenVM* vm)
    {

        BOOL res = PLAYER::IS_PLAYER_TELEPORT_ACTIVE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PLAYER_GET_PLAYER_CURRENT_STEALTH_NOISE(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        float res = PLAYER::GET_PLAYER_CURRENT_STEALTH_NOISE(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PLAYER_SET_PLAYER_HEALTH_RECHARGE_MULTIPLIER(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        float regenRate = (float)wrenGetSlotDouble(vm, 2);

        PLAYER::SET_PLAYER_HEALTH_RECHARGE_MULTIPLIER(player, regenRate);
    }

    static void WREN_PLAYER_GET_PLAYER_HEALTH_RECHARGE_MAX_PERCENT(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        float res = PLAYER::GET_PLAYER_HEALTH_RECHARGE_MAX_PERCENT(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PLAYER_SET_PLAYER_HEALTH_RECHARGE_MAX_PERCENT(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        float limit = (float)wrenGetSlotDouble(vm, 2);

        PLAYER::SET_PLAYER_HEALTH_RECHARGE_MAX_PERCENT(player, limit);
    }

    static void WREN_PLAYER_SET_PLAYER_FALL_DISTANCE_TO_TRIGGER_RAGDOLL_OVERRIDE(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);

        PLAYER::SET_PLAYER_FALL_DISTANCE_TO_TRIGGER_RAGDOLL_OVERRIDE(player, p1);
    }

    static void WREN_PLAYER_SET_PLAYER_WEAPON_DAMAGE_MODIFIER(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        float modifier = (float)wrenGetSlotDouble(vm, 2);

        PLAYER::SET_PLAYER_WEAPON_DAMAGE_MODIFIER(player, modifier);
    }

    static void WREN_PLAYER_SET_PLAYER_WEAPON_DEFENSE_MODIFIER(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        float modifier = (float)wrenGetSlotDouble(vm, 2);

        PLAYER::SET_PLAYER_WEAPON_DEFENSE_MODIFIER(player, modifier);
    }

    static void WREN_PLAYER_SET_PLAYER_WEAPON_MINIGUN_DEFENSE_MODIFIER(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        float modifier = (float)wrenGetSlotDouble(vm, 2);

        PLAYER::SET_PLAYER_WEAPON_MINIGUN_DEFENSE_MODIFIER(player, modifier);
    }

    static void WREN_PLAYER_SET_PLAYER_MELEE_WEAPON_DAMAGE_MODIFIER(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        float modifier = (float)wrenGetSlotDouble(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        PLAYER::SET_PLAYER_MELEE_WEAPON_DAMAGE_MODIFIER(player, modifier, p2);
    }

    static void WREN_PLAYER_SET_PLAYER_MELEE_WEAPON_DEFENSE_MODIFIER(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        float modifier = (float)wrenGetSlotDouble(vm, 2);

        PLAYER::SET_PLAYER_MELEE_WEAPON_DEFENSE_MODIFIER(player, modifier);
    }

    static void WREN_PLAYER_SET_PLAYER_VEHICLE_DAMAGE_MODIFIER(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        float modifier = (float)wrenGetSlotDouble(vm, 2);

        PLAYER::SET_PLAYER_VEHICLE_DAMAGE_MODIFIER(player, modifier);
    }

    static void WREN_PLAYER_SET_PLAYER_VEHICLE_DEFENSE_MODIFIER(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        float modifier = (float)wrenGetSlotDouble(vm, 2);

        PLAYER::SET_PLAYER_VEHICLE_DEFENSE_MODIFIER(player, modifier);
    }

    static void WREN_PLAYER_SET_PLAYER_MAX_EXPLOSIVE_DAMAGE(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);

        PLAYER::SET_PLAYER_MAX_EXPLOSIVE_DAMAGE(player, p1);
    }

    static void WREN_PLAYER_SET_PLAYER_EXPLOSIVE_DAMAGE_MODIFIER(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        PLAYER::SET_PLAYER_EXPLOSIVE_DAMAGE_MODIFIER(player, p1);
    }

    static void WREN_PLAYER_SET_PLAYER_WEAPON_TAKEDOWN_DEFENSE_MODIFIER(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);

        PLAYER::SET_PLAYER_WEAPON_TAKEDOWN_DEFENSE_MODIFIER(player, p1);
    }

    static void WREN_PLAYER_SET_PLAYER_PARACHUTE_TINT_INDEX(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        int tintIndex = (int)wrenGetSlotDouble(vm, 2);

        PLAYER::SET_PLAYER_PARACHUTE_TINT_INDEX(player, tintIndex);
    }

    static void WREN_PLAYER_GET_PLAYER_PARACHUTE_TINT_INDEX(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        int tintIndex;

        PLAYER::GET_PLAYER_PARACHUTE_TINT_INDEX(player, &tintIndex);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_PLAYER_SET_PLAYER_RESERVE_PARACHUTE_TINT_INDEX(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        int index = (int)wrenGetSlotDouble(vm, 2);

        PLAYER::SET_PLAYER_RESERVE_PARACHUTE_TINT_INDEX(player, index);
    }

    static void WREN_PLAYER_GET_PLAYER_RESERVE_PARACHUTE_TINT_INDEX(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        int index;

        PLAYER::GET_PLAYER_RESERVE_PARACHUTE_TINT_INDEX(player, &index);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_PLAYER_SET_PLAYER_PARACHUTE_PACK_TINT_INDEX(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        int tintIndex = (int)wrenGetSlotDouble(vm, 2);

        PLAYER::SET_PLAYER_PARACHUTE_PACK_TINT_INDEX(player, tintIndex);
    }

    static void WREN_PLAYER_GET_PLAYER_PARACHUTE_PACK_TINT_INDEX(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        int tintIndex;

        PLAYER::GET_PLAYER_PARACHUTE_PACK_TINT_INDEX(player, &tintIndex);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_PLAYER_SET_PLAYER_HAS_RESERVE_PARACHUTE(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        PLAYER::SET_PLAYER_HAS_RESERVE_PARACHUTE(player);
    }

    static void WREN_PLAYER_GET_PLAYER_HAS_RESERVE_PARACHUTE(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        BOOL res = PLAYER::GET_PLAYER_HAS_RESERVE_PARACHUTE(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PLAYER_SET_PLAYER_CAN_LEAVE_PARACHUTE_SMOKE_TRAIL(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        BOOL enabled = (BOOL)wrenGetSlotBool(vm, 2);

        PLAYER::SET_PLAYER_CAN_LEAVE_PARACHUTE_SMOKE_TRAIL(player, enabled);
    }

    static void WREN_PLAYER_SET_PLAYER_PARACHUTE_SMOKE_TRAIL_COLOR(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        int r = (int)wrenGetSlotDouble(vm, 2);
        int g = (int)wrenGetSlotDouble(vm, 3);
        int b = (int)wrenGetSlotDouble(vm, 4);

        PLAYER::SET_PLAYER_PARACHUTE_SMOKE_TRAIL_COLOR(player, r, g, b);
    }

    static void WREN_PLAYER_GET_PLAYER_PARACHUTE_SMOKE_TRAIL_COLOR(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        int r;
        int g;
        int b;

        PLAYER::GET_PLAYER_PARACHUTE_SMOKE_TRAIL_COLOR(player, &r, &g, &b);

        wrenEnsureSlots(vm, 6);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, r);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, g);
        wrenInsertInList(vm, 0, 1, 2);

        wrenSetSlotDouble(vm, 3, b);
        wrenInsertInList(vm, 0, 2, 3);

    }

    static void WREN_PLAYER_SET_PLAYER_PHONE_PALETTE_IDX(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        int flags = (int)wrenGetSlotDouble(vm, 2);

        PLAYER::SET_PLAYER_PHONE_PALETTE_IDX(player, flags);
    }

    static void WREN_PLAYER_SET_PLAYER_NOISE_MULTIPLIER(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        float multiplier = (float)wrenGetSlotDouble(vm, 2);

        PLAYER::SET_PLAYER_NOISE_MULTIPLIER(player, multiplier);
    }

    static void WREN_PLAYER_SET_PLAYER_SNEAKING_NOISE_MULTIPLIER(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        float multiplier = (float)wrenGetSlotDouble(vm, 2);

        PLAYER::SET_PLAYER_SNEAKING_NOISE_MULTIPLIER(player, multiplier);
    }

    static void WREN_PLAYER_CAN_PED_HEAR_PLAYER(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        Ped ped = (Ped)wrenGetSlotDouble(vm, 2);

        BOOL res = PLAYER::CAN_PED_HEAR_PLAYER(player, ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PLAYER_SIMULATE_PLAYER_INPUT_GAIT(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        float amount = (float)wrenGetSlotDouble(vm, 2);
        int gaitType = (int)wrenGetSlotDouble(vm, 3);
        float speed = (float)wrenGetSlotDouble(vm, 4);
        BOOL p4 = (BOOL)wrenGetSlotBool(vm, 5);
        BOOL p5 = (BOOL)wrenGetSlotBool(vm, 6);

        PLAYER::SIMULATE_PLAYER_INPUT_GAIT(player, amount, gaitType, speed, p4, p5);
    }

    static void WREN_PLAYER_RESET_PLAYER_INPUT_GAIT(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        PLAYER::RESET_PLAYER_INPUT_GAIT(player);
    }

    static void WREN_PLAYER_SET_AUTO_GIVE_PARACHUTE_WHEN_ENTER_PLANE(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PLAYER::SET_AUTO_GIVE_PARACHUTE_WHEN_ENTER_PLANE(player, toggle);
    }

    static void WREN_PLAYER_SET_AUTO_GIVE_SCUBA_GEAR_WHEN_EXIT_VEHICLE(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PLAYER::SET_AUTO_GIVE_SCUBA_GEAR_WHEN_EXIT_VEHICLE(player, toggle);
    }

    static void WREN_PLAYER_SET_PLAYER_STEALTH_PERCEPTION_MODIFIER(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        float value = (float)wrenGetSlotDouble(vm, 2);

        PLAYER::SET_PLAYER_STEALTH_PERCEPTION_MODIFIER(player, value);
    }

    static void WREN_PLAYER_IS_REMOTE_PLAYER_IN_NON_CLONED_VEHICLE(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        BOOL res = PLAYER::IS_REMOTE_PLAYER_IN_NON_CLONED_VEHICLE(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PLAYER_INCREASE_PLAYER_JUMP_SUPPRESSION_RANGE(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        PLAYER::INCREASE_PLAYER_JUMP_SUPPRESSION_RANGE(player);
    }

    static void WREN_PLAYER_SET_PLAYER_SIMULATE_AIMING(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PLAYER::SET_PLAYER_SIMULATE_AIMING(player, toggle);
    }

    static void WREN_PLAYER_SET_PLAYER_CLOTH_PIN_FRAMES(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);

        PLAYER::SET_PLAYER_CLOTH_PIN_FRAMES(player, p1);
    }

    static void WREN_PLAYER_SET_PLAYER_CLOTH_PACKAGE_INDEX(WrenVM* vm)
    {
        int index = (int)wrenGetSlotDouble(vm, 1);

        PLAYER::SET_PLAYER_CLOTH_PACKAGE_INDEX(index);
    }

    static void WREN_PLAYER_SET_PLAYER_CLOTH_LOCK_COUNTER(WrenVM* vm)
    {
        int value = (int)wrenGetSlotDouble(vm, 1);

        PLAYER::SET_PLAYER_CLOTH_LOCK_COUNTER(value);
    }

    static void WREN_PLAYER_PLAYER_ATTACH_VIRTUAL_BOUND(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);
        float p2 = (float)wrenGetSlotDouble(vm, 3);
        float p3 = (float)wrenGetSlotDouble(vm, 4);
        float p4 = (float)wrenGetSlotDouble(vm, 5);
        float p5 = (float)wrenGetSlotDouble(vm, 6);
        float p6 = (float)wrenGetSlotDouble(vm, 7);
        float p7 = (float)wrenGetSlotDouble(vm, 8);

        PLAYER::PLAYER_ATTACH_VIRTUAL_BOUND(p0, p1, p2, p3, p4, p5, p6, p7);
    }

    static void WREN_PLAYER_PLAYER_DETACH_VIRTUAL_BOUND(WrenVM* vm)
    {

        PLAYER::PLAYER_DETACH_VIRTUAL_BOUND();
    }

    static void WREN_PLAYER_HAS_PLAYER_BEEN_SPOTTED_IN_STOLEN_VEHICLE(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        BOOL res = PLAYER::HAS_PLAYER_BEEN_SPOTTED_IN_STOLEN_VEHICLE(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PLAYER_IS_PLAYER_BATTLE_AWARE(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        BOOL res = PLAYER::IS_PLAYER_BATTLE_AWARE(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PLAYER_GET_PLAYER_RECEIVED_BATTLE_EVENT_RECENTLY(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        BOOL res = PLAYER::GET_PLAYER_RECEIVED_BATTLE_EVENT_RECENTLY(player, p1, p2);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PLAYER_EXTEND_WORLD_BOUNDARY_FOR_PLAYER(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);

        PLAYER::EXTEND_WORLD_BOUNDARY_FOR_PLAYER(x, y, z);
    }

    static void WREN_PLAYER_RESET_WORLD_BOUNDARY_FOR_PLAYER(WrenVM* vm)
    {

        PLAYER::RESET_WORLD_BOUNDARY_FOR_PLAYER();
    }

    static void WREN_PLAYER_IS_PLAYER_RIDING_TRAIN(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        BOOL res = PLAYER::IS_PLAYER_RIDING_TRAIN(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PLAYER_HAS_PLAYER_LEFT_THE_WORLD(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        BOOL res = PLAYER::HAS_PLAYER_LEFT_THE_WORLD(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PLAYER_SET_PLAYER_LEAVE_PED_BEHIND(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        PLAYER::SET_PLAYER_LEAVE_PED_BEHIND(player, toggle);
    }

    static void WREN_PLAYER_SET_PLAYER_PARACHUTE_VARIATION_OVERRIDE(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);
        BOOL p4 = (BOOL)wrenGetSlotBool(vm, 5);

        PLAYER::SET_PLAYER_PARACHUTE_VARIATION_OVERRIDE(player, p1, p2, p3, p4);
    }

    static void WREN_PLAYER_CLEAR_PLAYER_PARACHUTE_VARIATION_OVERRIDE(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        PLAYER::CLEAR_PLAYER_PARACHUTE_VARIATION_OVERRIDE(player);
    }

    static void WREN_PLAYER_SET_PLAYER_PARACHUTE_MODEL_OVERRIDE(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        Hash model = (Hash)wrenGetSlotDouble(vm, 2);

        PLAYER::SET_PLAYER_PARACHUTE_MODEL_OVERRIDE(player, model);
    }

    static void WREN_PLAYER_SET_PLAYER_RESERVE_PARACHUTE_MODEL_OVERRIDE(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        Hash model = (Hash)wrenGetSlotDouble(vm, 2);

        PLAYER::SET_PLAYER_RESERVE_PARACHUTE_MODEL_OVERRIDE(player, model);
    }

    static void WREN_PLAYER_GET_PLAYER_PARACHUTE_MODEL_OVERRIDE(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        Hash res = PLAYER::GET_PLAYER_PARACHUTE_MODEL_OVERRIDE(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PLAYER_GET_PLAYER_RESERVE_PARACHUTE_MODEL_OVERRIDE(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        Hash res = PLAYER::GET_PLAYER_RESERVE_PARACHUTE_MODEL_OVERRIDE(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PLAYER_CLEAR_PLAYER_PARACHUTE_MODEL_OVERRIDE(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        PLAYER::CLEAR_PLAYER_PARACHUTE_MODEL_OVERRIDE(player);
    }

    static void WREN_PLAYER_CLEAR_PLAYER_RESERVE_PARACHUTE_MODEL_OVERRIDE(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        PLAYER::CLEAR_PLAYER_RESERVE_PARACHUTE_MODEL_OVERRIDE(player);
    }

    static void WREN_PLAYER_SET_PLAYER_PARACHUTE_PACK_MODEL_OVERRIDE(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        Hash model = (Hash)wrenGetSlotDouble(vm, 2);

        PLAYER::SET_PLAYER_PARACHUTE_PACK_MODEL_OVERRIDE(player, model);
    }

    static void WREN_PLAYER_CLEAR_PLAYER_PARACHUTE_PACK_MODEL_OVERRIDE(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        PLAYER::CLEAR_PLAYER_PARACHUTE_PACK_MODEL_OVERRIDE(player);
    }

    static void WREN_PLAYER_DISABLE_PLAYER_VEHICLE_REWARDS(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        PLAYER::DISABLE_PLAYER_VEHICLE_REWARDS(player);
    }

    static void WREN_PLAYER_SET_PLAYER_SPECTATED_VEHICLE_RADIO_OVERRIDE(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        PLAYER::SET_PLAYER_SPECTATED_VEHICLE_RADIO_OVERRIDE(p0);
    }

    static void WREN_PLAYER_SET_PLAYER_BLUETOOTH_STATE(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        BOOL state = (BOOL)wrenGetSlotBool(vm, 2);

        PLAYER::SET_PLAYER_BLUETOOTH_STATE(player, state);
    }

    static void WREN_PLAYER_IS_PLAYER_BLUETOOTH_ENABLE(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        BOOL res = PLAYER::IS_PLAYER_BLUETOOTH_ENABLE(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_PLAYER_DISABLE_CAMERA_VIEW_MODE_CYCLE(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        PLAYER::DISABLE_CAMERA_VIEW_MODE_CYCLE(player);
    }

    static void WREN_PLAYER_GET_PLAYER_FAKE_WANTED_LEVEL(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);

        int res = PLAYER::GET_PLAYER_FAKE_WANTED_LEVEL(player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PLAYER_SET_PLAYER_CAN_DAMAGE_PLAYER(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);

        PLAYER::SET_PLAYER_CAN_DAMAGE_PLAYER(p0, p1, p2);
    }

    static void WREN_PLAYER_SET_APPLY_WAYPOINT_OF_PLAYER(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        PLAYER::SET_APPLY_WAYPOINT_OF_PLAYER(p0, p1);
    }

    static void WREN_PLAYER_IS_PLAYER_VEHICLE_WEAPON_TOGGLED_TO_NON_HOMING(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        Any res = PLAYER::IS_PLAYER_VEHICLE_WEAPON_TOGGLED_TO_NON_HOMING(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_PLAYER_SET_PLAYER_VEHICLE_WEAPON_TO_NON_HOMING(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        PLAYER::SET_PLAYER_VEHICLE_WEAPON_TO_NON_HOMING(p0);
    }

    static void WREN_PLAYER_SET_PLAYER_HOMING_DISABLED_FOR_ALL_VEHICLE_WEAPONS(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        PLAYER::SET_PLAYER_HOMING_DISABLED_FOR_ALL_VEHICLE_WEAPONS(p0, p1);
    }

    static void WREN_PLAYER_ADD_PLAYER_TARGETABLE_ENTITY(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        Entity entity = (Entity)wrenGetSlotDouble(vm, 2);

        PLAYER::ADD_PLAYER_TARGETABLE_ENTITY(player, entity);
    }

    static void WREN_PLAYER_REMOVE_PLAYER_TARGETABLE_ENTITY(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        Entity entity = (Entity)wrenGetSlotDouble(vm, 2);

        PLAYER::REMOVE_PLAYER_TARGETABLE_ENTITY(player, entity);
    }

    static void WREN_PLAYER_SET_PLAYER_PREVIOUS_VARIATION_DATA(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);
        Any p5 = (Any)wrenGetSlotDouble(vm, 6);

        PLAYER::SET_PLAYER_PREVIOUS_VARIATION_DATA(p0, p1, p2, p3, p4, p5);
    }

    static void WREN_PLAYER_REMOVE_SCRIPT_FIRE_POSITION(WrenVM* vm)
    {

        PLAYER::REMOVE_SCRIPT_FIRE_POSITION();
    }

    static void WREN_PLAYER_SET_SCRIPT_FIRE_POSITION(WrenVM* vm)
    {
        float coordX = (float)wrenGetSlotDouble(vm, 1);
        float coordY = (float)wrenGetSlotDouble(vm, 2);
        float coordZ = (float)wrenGetSlotDouble(vm, 3);

        PLAYER::SET_SCRIPT_FIRE_POSITION(coordX, coordY, coordZ);
    }


    static void WREN_RECORDING_REPLAY_START_EVENT(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);

        RECORDING::REPLAY_START_EVENT(p0);
    }

    static void WREN_RECORDING_REPLAY_STOP_EVENT(WrenVM* vm)
    {

        RECORDING::REPLAY_STOP_EVENT();
    }

    static void WREN_RECORDING_REPLAY_CANCEL_EVENT(WrenVM* vm)
    {

        RECORDING::REPLAY_CANCEL_EVENT();
    }

    static void WREN_RECORDING_REPLAY_RECORD_BACK_FOR_TIME(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);
        int p2 = (int)wrenGetSlotDouble(vm, 3);

        RECORDING::REPLAY_RECORD_BACK_FOR_TIME(p0, p1, p2);
    }

    static void WREN_RECORDING_REPLAY_CHECK_FOR_EVENT_THIS_FRAME(WrenVM* vm)
    {
        const char* missionNameLabel = wrenGetSlotString(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        RECORDING::REPLAY_CHECK_FOR_EVENT_THIS_FRAME(missionNameLabel, p1);
    }

    static void WREN_RECORDING_REPLAY_PREVENT_RECORDING_THIS_FRAME(WrenVM* vm)
    {

        RECORDING::REPLAY_PREVENT_RECORDING_THIS_FRAME();
    }

    static void WREN_RECORDING_REPLAY_RESET_EVENT_INFO(WrenVM* vm)
    {

        RECORDING::REPLAY_RESET_EVENT_INFO();
    }

    static void WREN_RECORDING_REPLAY_DISABLE_CAMERA_MOVEMENT_THIS_FRAME(WrenVM* vm)
    {

        RECORDING::REPLAY_DISABLE_CAMERA_MOVEMENT_THIS_FRAME();
    }

    static void WREN_RECORDING_RECORD_GREATEST_MOMENT(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);
        int p2 = (int)wrenGetSlotDouble(vm, 3);

        RECORDING::RECORD_GREATEST_MOMENT(p0, p1, p2);
    }

    static void WREN_RECORDING_START_REPLAY_RECORDING(WrenVM* vm)
    {
        int mode = (int)wrenGetSlotDouble(vm, 1);

        RECORDING::START_REPLAY_RECORDING(mode);
    }

    static void WREN_RECORDING_STOP_REPLAY_RECORDING(WrenVM* vm)
    {

        RECORDING::STOP_REPLAY_RECORDING();
    }

    static void WREN_RECORDING_CANCEL_REPLAY_RECORDING(WrenVM* vm)
    {

        RECORDING::CANCEL_REPLAY_RECORDING();
    }

    static void WREN_RECORDING_SAVE_REPLAY_RECORDING(WrenVM* vm)
    {

        BOOL res = RECORDING::SAVE_REPLAY_RECORDING();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_RECORDING_IS_REPLAY_RECORDING(WrenVM* vm)
    {

        BOOL res = RECORDING::IS_REPLAY_RECORDING();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_RECORDING_IS_REPLAY_INITIALIZED(WrenVM* vm)
    {

        Any res = RECORDING::IS_REPLAY_INITIALIZED();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_RECORDING_IS_REPLAY_AVAILABLE(WrenVM* vm)
    {

        Any res = RECORDING::IS_REPLAY_AVAILABLE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_RECORDING_IS_REPLAY_RECORD_SPACE_AVAILABLE(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        BOOL res = RECORDING::IS_REPLAY_RECORD_SPACE_AVAILABLE(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }


    static void WREN_REPLAY_REGISTER_EFFECT_FOR_REPLAY_EDITOR(WrenVM* vm)
    {
        const char* p0 = wrenGetSlotString(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        REPLAY::REGISTER_EFFECT_FOR_REPLAY_EDITOR(p0, p1);
    }

    static void WREN_REPLAY_REPLAY_SYSTEM_HAS_REQUESTED_A_SCRIPT_CLEANUP(WrenVM* vm)
    {

        BOOL res = REPLAY::REPLAY_SYSTEM_HAS_REQUESTED_A_SCRIPT_CLEANUP();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_REPLAY_SET_SCRIPTS_HAVE_CLEANED_UP_FOR_REPLAY_SYSTEM(WrenVM* vm)
    {

        REPLAY::SET_SCRIPTS_HAVE_CLEANED_UP_FOR_REPLAY_SYSTEM();
    }

    static void WREN_REPLAY_SET_REPLAY_SYSTEM_PAUSED_FOR_SAVE(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        REPLAY::SET_REPLAY_SYSTEM_PAUSED_FOR_SAVE(p0);
    }

    static void WREN_REPLAY_REPLAY_CONTROL_SHUTDOWN(WrenVM* vm)
    {

        REPLAY::REPLAY_CONTROL_SHUTDOWN();
    }

    static void WREN_REPLAY_ACTIVATE_ROCKSTAR_EDITOR(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);

        REPLAY::ACTIVATE_ROCKSTAR_EDITOR(p0);
    }


    static void WREN_SAVEMIGRATION_SAVEMIGRATION_IS_MP_ENABLED(WrenVM* vm)
    {

        BOOL res = SAVEMIGRATION::SAVEMIGRATION_IS_MP_ENABLED();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_SAVEMIGRATION_SAVEMIGRATION_MP_REQUEST_ACCOUNTS(WrenVM* vm)
    {

        BOOL res = SAVEMIGRATION::SAVEMIGRATION_MP_REQUEST_ACCOUNTS();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_SAVEMIGRATION_SAVEMIGRATION_MP_GET_ACCOUNTS_STATUS(WrenVM* vm)
    {

        int res = SAVEMIGRATION::SAVEMIGRATION_MP_GET_ACCOUNTS_STATUS();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_SAVEMIGRATION_SAVEMIGRATION_MP_NUM_ACCOUNTS(WrenVM* vm)
    {

        int res = SAVEMIGRATION::SAVEMIGRATION_MP_NUM_ACCOUNTS();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_SAVEMIGRATION_SAVEMIGRATION_MP_GET_ACCOUNT(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);
        Any p1;

        BOOL res = SAVEMIGRATION::SAVEMIGRATION_MP_GET_ACCOUNT(p0, &p1);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p1);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_SAVEMIGRATION_SAVEMIGRATION_MP_REQUEST_STATUS(WrenVM* vm)
    {

        BOOL res = SAVEMIGRATION::SAVEMIGRATION_MP_REQUEST_STATUS();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_SAVEMIGRATION_SAVEMIGRATION_MP_GET_STATUS(WrenVM* vm)
    {

        int res = SAVEMIGRATION::SAVEMIGRATION_MP_GET_STATUS();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }


    static void WREN_SCRIPT_REQUEST_SCRIPT(WrenVM* vm)
    {
        const char* scriptName = wrenGetSlotString(vm, 1);

        SCRIPT::REQUEST_SCRIPT(scriptName);
    }

    static void WREN_SCRIPT_SET_SCRIPT_AS_NO_LONGER_NEEDED(WrenVM* vm)
    {
        const char* scriptName = wrenGetSlotString(vm, 1);

        SCRIPT::SET_SCRIPT_AS_NO_LONGER_NEEDED(scriptName);
    }

    static void WREN_SCRIPT_HAS_SCRIPT_LOADED(WrenVM* vm)
    {
        const char* scriptName = wrenGetSlotString(vm, 1);

        BOOL res = SCRIPT::HAS_SCRIPT_LOADED(scriptName);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_SCRIPT_DOES_SCRIPT_EXIST(WrenVM* vm)
    {
        const char* scriptName = wrenGetSlotString(vm, 1);

        BOOL res = SCRIPT::DOES_SCRIPT_EXIST(scriptName);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_SCRIPT_REQUEST_SCRIPT_WITH_NAME_HASH(WrenVM* vm)
    {
        Hash scriptHash = (Hash)wrenGetSlotDouble(vm, 1);

        SCRIPT::REQUEST_SCRIPT_WITH_NAME_HASH(scriptHash);
    }

    static void WREN_SCRIPT_SET_SCRIPT_WITH_NAME_HASH_AS_NO_LONGER_NEEDED(WrenVM* vm)
    {
        Hash scriptHash = (Hash)wrenGetSlotDouble(vm, 1);

        SCRIPT::SET_SCRIPT_WITH_NAME_HASH_AS_NO_LONGER_NEEDED(scriptHash);
    }

    static void WREN_SCRIPT_HAS_SCRIPT_WITH_NAME_HASH_LOADED(WrenVM* vm)
    {
        Hash scriptHash = (Hash)wrenGetSlotDouble(vm, 1);

        BOOL res = SCRIPT::HAS_SCRIPT_WITH_NAME_HASH_LOADED(scriptHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_SCRIPT_DOES_SCRIPT_WITH_NAME_HASH_EXIST(WrenVM* vm)
    {
        Hash scriptHash = (Hash)wrenGetSlotDouble(vm, 1);

        BOOL res = SCRIPT::DOES_SCRIPT_WITH_NAME_HASH_EXIST(scriptHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_SCRIPT_TERMINATE_THREAD(WrenVM* vm)
    {
        int threadId = (int)wrenGetSlotDouble(vm, 1);

        SCRIPT::TERMINATE_THREAD(threadId);
    }

    static void WREN_SCRIPT_IS_THREAD_ACTIVE(WrenVM* vm)
    {
        int threadId = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = SCRIPT::IS_THREAD_ACTIVE(threadId);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_SCRIPT_GET_NAME_OF_SCRIPT_WITH_THIS_ID(WrenVM* vm)
    {
        int threadId = (int)wrenGetSlotDouble(vm, 1);

        const char* res = SCRIPT::GET_NAME_OF_SCRIPT_WITH_THIS_ID(threadId);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotString(vm, 0, res);
    }

    static void WREN_SCRIPT_SCRIPT_THREAD_ITERATOR_RESET(WrenVM* vm)
    {

        SCRIPT::SCRIPT_THREAD_ITERATOR_RESET();
    }

    static void WREN_SCRIPT_SCRIPT_THREAD_ITERATOR_GET_NEXT_THREAD_ID(WrenVM* vm)
    {

        int res = SCRIPT::SCRIPT_THREAD_ITERATOR_GET_NEXT_THREAD_ID();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_SCRIPT_GET_ID_OF_THIS_THREAD(WrenVM* vm)
    {

        int res = SCRIPT::GET_ID_OF_THIS_THREAD();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_SCRIPT_TERMINATE_THIS_THREAD(WrenVM* vm)
    {

        SCRIPT::TERMINATE_THIS_THREAD();
    }

    static void WREN_SCRIPT_GET_NUMBER_OF_THREADS_RUNNING_THE_SCRIPT_WITH_THIS_HASH(WrenVM* vm)
    {
        Hash scriptHash = (Hash)wrenGetSlotDouble(vm, 1);

        int res = SCRIPT::GET_NUMBER_OF_THREADS_RUNNING_THE_SCRIPT_WITH_THIS_HASH(scriptHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_SCRIPT_GET_THIS_SCRIPT_NAME(WrenVM* vm)
    {

        const char* res = SCRIPT::GET_THIS_SCRIPT_NAME();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotString(vm, 0, res);
    }

    static void WREN_SCRIPT_GET_HASH_OF_THIS_SCRIPT_NAME(WrenVM* vm)
    {

        Hash res = SCRIPT::GET_HASH_OF_THIS_SCRIPT_NAME();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_SCRIPT_GET_NUMBER_OF_EVENTS(WrenVM* vm)
    {
        int eventGroup = (int)wrenGetSlotDouble(vm, 1);

        int res = SCRIPT::GET_NUMBER_OF_EVENTS(eventGroup);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_SCRIPT_GET_EVENT_EXISTS(WrenVM* vm)
    {
        int eventGroup = (int)wrenGetSlotDouble(vm, 1);
        int eventIndex = (int)wrenGetSlotDouble(vm, 2);

        BOOL res = SCRIPT::GET_EVENT_EXISTS(eventGroup, eventIndex);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_SCRIPT_GET_EVENT_AT_INDEX(WrenVM* vm)
    {
        int eventGroup = (int)wrenGetSlotDouble(vm, 1);
        int eventIndex = (int)wrenGetSlotDouble(vm, 2);

        int res = SCRIPT::GET_EVENT_AT_INDEX(eventGroup, eventIndex);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_SCRIPT_GET_EVENT_DATA(WrenVM* vm)
    {
        int eventGroup = (int)wrenGetSlotDouble(vm, 1);
        int eventIndex = (int)wrenGetSlotDouble(vm, 2);
        Any eventData;
        int eventDataSize = (int)wrenGetSlotDouble(vm, 3);

        BOOL res = SCRIPT::GET_EVENT_DATA(eventGroup, eventIndex, &eventData, eventDataSize);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, eventData);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_SCRIPT_TRIGGER_SCRIPT_EVENT(WrenVM* vm)
    {
        int eventGroup = (int)wrenGetSlotDouble(vm, 1);
        Any eventData;
        int eventDataSize = (int)wrenGetSlotDouble(vm, 2);
        int playerBits = (int)wrenGetSlotDouble(vm, 3);

        SCRIPT::TRIGGER_SCRIPT_EVENT(eventGroup, &eventData, eventDataSize, playerBits);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_SCRIPT_SHUTDOWN_LOADING_SCREEN(WrenVM* vm)
    {

        SCRIPT::SHUTDOWN_LOADING_SCREEN();
    }

    static void WREN_SCRIPT_SET_NO_LOADING_SCREEN(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        SCRIPT::SET_NO_LOADING_SCREEN(toggle);
    }

    static void WREN_SCRIPT_GET_NO_LOADING_SCREEN(WrenVM* vm)
    {

        BOOL res = SCRIPT::GET_NO_LOADING_SCREEN();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_SCRIPT_COMMIT_TO_LOADINGSCREEN_SELCTION(WrenVM* vm)
    {

        SCRIPT::COMMIT_TO_LOADINGSCREEN_SELCTION();
    }

    static void WREN_SCRIPT_BG_IS_EXITFLAG_SET(WrenVM* vm)
    {

        BOOL res = SCRIPT::BG_IS_EXITFLAG_SET();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_SCRIPT_BG_SET_EXITFLAG_RESPONSE(WrenVM* vm)
    {

        SCRIPT::BG_SET_EXITFLAG_RESPONSE();
    }

    static void WREN_SCRIPT_BG_START_CONTEXT_HASH(WrenVM* vm)
    {
        Hash contextHash = (Hash)wrenGetSlotDouble(vm, 1);

        SCRIPT::BG_START_CONTEXT_HASH(contextHash);
    }

    static void WREN_SCRIPT_BG_END_CONTEXT_HASH(WrenVM* vm)
    {
        Hash contextHash = (Hash)wrenGetSlotDouble(vm, 1);

        SCRIPT::BG_END_CONTEXT_HASH(contextHash);
    }

    static void WREN_SCRIPT_BG_START_CONTEXT(WrenVM* vm)
    {
        const char* contextName = wrenGetSlotString(vm, 1);

        SCRIPT::BG_START_CONTEXT(contextName);
    }

    static void WREN_SCRIPT_BG_END_CONTEXT(WrenVM* vm)
    {
        const char* contextName = wrenGetSlotString(vm, 1);

        SCRIPT::BG_END_CONTEXT(contextName);
    }

    static void WREN_SCRIPT_BG_DOES_LAUNCH_PARAM_EXIST(WrenVM* vm)
    {
        int scriptIndex = (int)wrenGetSlotDouble(vm, 1);
        const char* p1 = wrenGetSlotString(vm, 2);

        BOOL res = SCRIPT::BG_DOES_LAUNCH_PARAM_EXIST(scriptIndex, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_SCRIPT_BG_GET_LAUNCH_PARAM_VALUE(WrenVM* vm)
    {
        int scriptIndex = (int)wrenGetSlotDouble(vm, 1);
        const char* p1 = wrenGetSlotString(vm, 2);

        int res = SCRIPT::BG_GET_LAUNCH_PARAM_VALUE(scriptIndex, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_SCRIPT_BG_GET_SCRIPT_ID_FROM_NAME_HASH(WrenVM* vm)
    {
        Hash p0 = (Hash)wrenGetSlotDouble(vm, 1);

        int res = SCRIPT::BG_GET_SCRIPT_ID_FROM_NAME_HASH(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_SCRIPT_SEND_TU_SCRIPT_EVENT(WrenVM* vm)
    {
        int eventGroup = (int)wrenGetSlotDouble(vm, 1);
        Any eventData;
        int eventDataSize = (int)wrenGetSlotDouble(vm, 2);
        int playerBits = (int)wrenGetSlotDouble(vm, 3);

        SCRIPT::SEND_TU_SCRIPT_EVENT(eventGroup, &eventData, eventDataSize, playerBits);

        wrenEnsureSlots(vm, 1);

    }


    static void WREN_SECURITY_REGISTER_SCRIPT_VARIABLE(WrenVM* vm)
    {
        Any variable;

        SECURITY::REGISTER_SCRIPT_VARIABLE(&variable);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_SECURITY_UNREGISTER_SCRIPT_VARIABLE(WrenVM* vm)
    {
        Any variable;

        SECURITY::UNREGISTER_SCRIPT_VARIABLE(&variable);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_SECURITY_FORCE_CHECK_SCRIPT_VARIABLES(WrenVM* vm)
    {

        SECURITY::FORCE_CHECK_SCRIPT_VARIABLES();
    }


    static void WREN_SHAPETEST_START_SHAPE_TEST_LOS_PROBE(WrenVM* vm)
    {
        float x1 = (float)wrenGetSlotDouble(vm, 1);
        float y1 = (float)wrenGetSlotDouble(vm, 2);
        float z1 = (float)wrenGetSlotDouble(vm, 3);
        float x2 = (float)wrenGetSlotDouble(vm, 4);
        float y2 = (float)wrenGetSlotDouble(vm, 5);
        float z2 = (float)wrenGetSlotDouble(vm, 6);
        int flags = (int)wrenGetSlotDouble(vm, 7);
        Entity entity = (Entity)wrenGetSlotDouble(vm, 8);
        int p8 = (int)wrenGetSlotDouble(vm, 9);

        int res = SHAPETEST::START_SHAPE_TEST_LOS_PROBE(x1, y1, z1, x2, y2, z2, flags, entity, p8);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_SHAPETEST_START_EXPENSIVE_SYNCHRONOUS_SHAPE_TEST_LOS_PROBE(WrenVM* vm)
    {
        float x1 = (float)wrenGetSlotDouble(vm, 1);
        float y1 = (float)wrenGetSlotDouble(vm, 2);
        float z1 = (float)wrenGetSlotDouble(vm, 3);
        float x2 = (float)wrenGetSlotDouble(vm, 4);
        float y2 = (float)wrenGetSlotDouble(vm, 5);
        float z2 = (float)wrenGetSlotDouble(vm, 6);
        int flags = (int)wrenGetSlotDouble(vm, 7);
        Entity entity = (Entity)wrenGetSlotDouble(vm, 8);
        int p8 = (int)wrenGetSlotDouble(vm, 9);

        int res = SHAPETEST::START_EXPENSIVE_SYNCHRONOUS_SHAPE_TEST_LOS_PROBE(x1, y1, z1, x2, y2, z2, flags, entity, p8);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_SHAPETEST_START_SHAPE_TEST_BOUNDING_BOX(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        int flags1 = (int)wrenGetSlotDouble(vm, 2);
        int flags2 = (int)wrenGetSlotDouble(vm, 3);

        int res = SHAPETEST::START_SHAPE_TEST_BOUNDING_BOX(entity, flags1, flags2);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_SHAPETEST_START_SHAPE_TEST_BOX(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        float x1 = (float)wrenGetSlotDouble(vm, 4);
        float y2 = (float)wrenGetSlotDouble(vm, 5);
        float z2 = (float)wrenGetSlotDouble(vm, 6);
        float rotX = (float)wrenGetSlotDouble(vm, 7);
        float rotY = (float)wrenGetSlotDouble(vm, 8);
        float rotZ = (float)wrenGetSlotDouble(vm, 9);
        Any p9 = (Any)wrenGetSlotDouble(vm, 10);
        int flags = (int)wrenGetSlotDouble(vm, 11);
        Entity entity = (Entity)wrenGetSlotDouble(vm, 12);
        Any p12 = (Any)wrenGetSlotDouble(vm, 13);

        int res = SHAPETEST::START_SHAPE_TEST_BOX(x, y, z, x1, y2, z2, rotX, rotY, rotZ, p9, flags, entity, p12);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_SHAPETEST_START_SHAPE_TEST_BOUND(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        int flags1 = (int)wrenGetSlotDouble(vm, 2);
        int flags2 = (int)wrenGetSlotDouble(vm, 3);

        int res = SHAPETEST::START_SHAPE_TEST_BOUND(entity, flags1, flags2);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_SHAPETEST_START_SHAPE_TEST_CAPSULE(WrenVM* vm)
    {
        float x1 = (float)wrenGetSlotDouble(vm, 1);
        float y1 = (float)wrenGetSlotDouble(vm, 2);
        float z1 = (float)wrenGetSlotDouble(vm, 3);
        float x2 = (float)wrenGetSlotDouble(vm, 4);
        float y2 = (float)wrenGetSlotDouble(vm, 5);
        float z2 = (float)wrenGetSlotDouble(vm, 6);
        float radius = (float)wrenGetSlotDouble(vm, 7);
        int flags = (int)wrenGetSlotDouble(vm, 8);
        Entity entity = (Entity)wrenGetSlotDouble(vm, 9);
        int p9 = (int)wrenGetSlotDouble(vm, 10);

        int res = SHAPETEST::START_SHAPE_TEST_CAPSULE(x1, y1, z1, x2, y2, z2, radius, flags, entity, p9);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_SHAPETEST_START_SHAPE_TEST_SWEPT_SPHERE(WrenVM* vm)
    {
        float x1 = (float)wrenGetSlotDouble(vm, 1);
        float y1 = (float)wrenGetSlotDouble(vm, 2);
        float z1 = (float)wrenGetSlotDouble(vm, 3);
        float x2 = (float)wrenGetSlotDouble(vm, 4);
        float y2 = (float)wrenGetSlotDouble(vm, 5);
        float z2 = (float)wrenGetSlotDouble(vm, 6);
        float radius = (float)wrenGetSlotDouble(vm, 7);
        int flags = (int)wrenGetSlotDouble(vm, 8);
        Entity entity = (Entity)wrenGetSlotDouble(vm, 9);
        Any p9 = (Any)wrenGetSlotDouble(vm, 10);

        int res = SHAPETEST::START_SHAPE_TEST_SWEPT_SPHERE(x1, y1, z1, x2, y2, z2, radius, flags, entity, p9);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_SHAPETEST_START_SHAPE_TEST_MOUSE_CURSOR_LOS_PROBE(WrenVM* vm)
    {
        Vector3 pVec1;
        Vector3 pVec2;
        int flag = (int)wrenGetSlotDouble(vm, 1);
        Entity entity = (Entity)wrenGetSlotDouble(vm, 2);
        int flag2 = (int)wrenGetSlotDouble(vm, 3);

        int res = SHAPETEST::START_SHAPE_TEST_MOUSE_CURSOR_LOS_PROBE(&pVec1, &pVec2, flag, entity, flag2);

        wrenEnsureSlots(vm, 6);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenGetVariable(vm, "natives", "Vector3", 2);
        Vector3* wren_pVec1 = (Vector3*)wrenSetSlotNewForeign(vm, 3, 2, sizeof(Vector3));
        wren_pVec1->x = pVec1.x;
        wren_pVec1->y = pVec1.y;
        wren_pVec1->z = pVec1.z;
        wrenInsertInList(vm, 0, 1, 3);

        Vector3* wren_pVec2 = (Vector3*)wrenSetSlotNewForeign(vm, 4, 2, sizeof(Vector3));
        wren_pVec2->x = pVec2.x;
        wren_pVec2->y = pVec2.y;
        wren_pVec2->z = pVec2.z;
        wrenInsertInList(vm, 0, 2, 4);

    }

    static void WREN_SHAPETEST_GET_SHAPE_TEST_RESULT(WrenVM* vm)
    {
        int shapeTestHandle = (int)wrenGetSlotDouble(vm, 1);
        BOOL hit;
        Vector3 endCoords;
        Vector3 surfaceNormal;
        Entity entityHit;

        int res = SHAPETEST::GET_SHAPE_TEST_RESULT(shapeTestHandle, &hit, &endCoords, &surfaceNormal, &entityHit);

        wrenEnsureSlots(vm, 10);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotBool(vm, 2, (bool)hit);
        wrenInsertInList(vm, 0, 1, 2);

        wrenGetVariable(vm, "natives", "Vector3", 3);
        Vector3* wren_endCoords = (Vector3*)wrenSetSlotNewForeign(vm, 4, 3, sizeof(Vector3));
        wren_endCoords->x = endCoords.x;
        wren_endCoords->y = endCoords.y;
        wren_endCoords->z = endCoords.z;
        wrenInsertInList(vm, 0, 2, 4);

        Vector3* wren_surfaceNormal = (Vector3*)wrenSetSlotNewForeign(vm, 5, 3, sizeof(Vector3));
        wren_surfaceNormal->x = surfaceNormal.x;
        wren_surfaceNormal->y = surfaceNormal.y;
        wren_surfaceNormal->z = surfaceNormal.z;
        wrenInsertInList(vm, 0, 3, 5);

        wrenSetSlotDouble(vm, 6, entityHit);
        wrenInsertInList(vm, 0, 4, 6);

    }

    static void WREN_SHAPETEST_GET_SHAPE_TEST_RESULT_INCLUDING_MATERIAL(WrenVM* vm)
    {
        int shapeTestHandle = (int)wrenGetSlotDouble(vm, 1);
        BOOL hit;
        Vector3 endCoords;
        Vector3 surfaceNormal;
        Hash materialHash;
        Entity entityHit;

        int res = SHAPETEST::GET_SHAPE_TEST_RESULT_INCLUDING_MATERIAL(shapeTestHandle, &hit, &endCoords, &surfaceNormal, &materialHash, &entityHit);

        wrenEnsureSlots(vm, 12);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotBool(vm, 2, (bool)hit);
        wrenInsertInList(vm, 0, 1, 2);

        wrenGetVariable(vm, "natives", "Vector3", 3);
        Vector3* wren_endCoords = (Vector3*)wrenSetSlotNewForeign(vm, 4, 3, sizeof(Vector3));
        wren_endCoords->x = endCoords.x;
        wren_endCoords->y = endCoords.y;
        wren_endCoords->z = endCoords.z;
        wrenInsertInList(vm, 0, 2, 4);

        Vector3* wren_surfaceNormal = (Vector3*)wrenSetSlotNewForeign(vm, 5, 3, sizeof(Vector3));
        wren_surfaceNormal->x = surfaceNormal.x;
        wren_surfaceNormal->y = surfaceNormal.y;
        wren_surfaceNormal->z = surfaceNormal.z;
        wrenInsertInList(vm, 0, 3, 5);

        wrenSetSlotDouble(vm, 6, materialHash);
        wrenInsertInList(vm, 0, 4, 6);

        wrenSetSlotDouble(vm, 7, entityHit);
        wrenInsertInList(vm, 0, 5, 7);

    }

    static void WREN_SHAPETEST_RELEASE_SCRIPT_GUID_FROM_ENTITY(WrenVM* vm)
    {
        Entity entityHit = (Entity)wrenGetSlotDouble(vm, 1);

        SHAPETEST::RELEASE_SCRIPT_GUID_FROM_ENTITY(entityHit);
    }


    static void WREN_SOCIALCLUB_SC_INBOX_GET_TOTAL_NUM_MESSAGES(WrenVM* vm)
    {

        int res = SOCIALCLUB::SC_INBOX_GET_TOTAL_NUM_MESSAGES();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_SOCIALCLUB_SC_INBOX_GET_MESSAGE_TYPE_AT_INDEX(WrenVM* vm)
    {
        int msgIndex = (int)wrenGetSlotDouble(vm, 1);

        Hash res = SOCIALCLUB::SC_INBOX_GET_MESSAGE_TYPE_AT_INDEX(msgIndex);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_SOCIALCLUB_SC_INBOX_GET_MESSAGE_IS_READ_AT_INDEX(WrenVM* vm)
    {
        int msgIndex = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = SOCIALCLUB::SC_INBOX_GET_MESSAGE_IS_READ_AT_INDEX(msgIndex);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_SOCIALCLUB_SC_INBOX_SET_MESSAGE_AS_READ_AT_INDEX(WrenVM* vm)
    {
        int msgIndex = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = SOCIALCLUB::SC_INBOX_SET_MESSAGE_AS_READ_AT_INDEX(msgIndex);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_SOCIALCLUB_SC_INBOX_MESSAGE_GET_DATA_INT(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);
        const char* context = wrenGetSlotString(vm, 2);
        int out;

        BOOL res = SOCIALCLUB::SC_INBOX_MESSAGE_GET_DATA_INT(p0, context, &out);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, out);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_SOCIALCLUB_SC_INBOX_MESSAGE_GET_DATA_BOOL(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);
        const char* p1 = wrenGetSlotString(vm, 2);

        BOOL res = SOCIALCLUB::SC_INBOX_MESSAGE_GET_DATA_BOOL(p0, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_SOCIALCLUB_SC_INBOX_MESSAGE_GET_DATA_STRING(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);
        const char* context = wrenGetSlotString(vm, 2);
        char out;

        BOOL res = SOCIALCLUB::SC_INBOX_MESSAGE_GET_DATA_STRING(p0, context, &out);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, out);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_SOCIALCLUB_SC_INBOX_MESSAGE_DO_APPLY(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = SOCIALCLUB::SC_INBOX_MESSAGE_DO_APPLY(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_SOCIALCLUB_SC_INBOX_MESSAGE_GET_RAW_TYPE_AT_INDEX(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);

        const char* res = SOCIALCLUB::SC_INBOX_MESSAGE_GET_RAW_TYPE_AT_INDEX(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotString(vm, 0, res);
    }

    static void WREN_SOCIALCLUB_SC_INBOX_MESSAGE_PUSH_GAMER_T0_RECIP_LIST(WrenVM* vm)
    {
        Any gamerHandle;

        SOCIALCLUB::SC_INBOX_MESSAGE_PUSH_GAMER_T0_RECIP_LIST(&gamerHandle);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_SOCIALCLUB_SC_INBOX_SEND_UGCSTATUPDATE_TO_RECIP_LIST(WrenVM* vm)
    {
        Any data;

        SOCIALCLUB::SC_INBOX_SEND_UGCSTATUPDATE_TO_RECIP_LIST(&data);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_SOCIALCLUB_SC_INBOX_MESSAGE_GET_UGCDATA(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);
        Any p1;

        BOOL res = SOCIALCLUB::SC_INBOX_MESSAGE_GET_UGCDATA(p0, &p1);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p1);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_SOCIALCLUB_SC_INBOX_SEND_BOUNTY_TO_RECIP_LIST(WrenVM* vm)
    {
        Any data;

        BOOL res = SOCIALCLUB::SC_INBOX_SEND_BOUNTY_TO_RECIP_LIST(&data);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, data);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_SOCIALCLUB_SC_INBOX_GET_BOUNTY_DATA_AT_INDEX(WrenVM* vm)
    {
        int index = (int)wrenGetSlotDouble(vm, 1);
        Any outData;

        BOOL res = SOCIALCLUB::SC_INBOX_GET_BOUNTY_DATA_AT_INDEX(index, &outData);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, outData);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_SOCIALCLUB_SC_EMAIL_RETRIEVE_EMAILS(WrenVM* vm)
    {
        int offset = (int)wrenGetSlotDouble(vm, 1);
        int limit = (int)wrenGetSlotDouble(vm, 2);

        SOCIALCLUB::SC_EMAIL_RETRIEVE_EMAILS(offset, limit);
    }

    static void WREN_SOCIALCLUB_SC_EMAIL_GET_RETRIEVAL_STATUS(WrenVM* vm)
    {

        Any res = SOCIALCLUB::SC_EMAIL_GET_RETRIEVAL_STATUS();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_SOCIALCLUB_SC_EMAIL_GET_NUM_RETRIEVED_EMAILS(WrenVM* vm)
    {

        Any res = SOCIALCLUB::SC_EMAIL_GET_NUM_RETRIEVED_EMAILS();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_SOCIALCLUB_SC_EMAIL_GET_EMAIL_AT_INDEX(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);
        Any p1;

        BOOL res = SOCIALCLUB::SC_EMAIL_GET_EMAIL_AT_INDEX(p0, &p1);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p1);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_SOCIALCLUB_SC_EMAIL_DELETE_EMAILS(WrenVM* vm)
    {
        Any p0;
        Any p1 = (Any)wrenGetSlotDouble(vm, 1);

        SOCIALCLUB::SC_EMAIL_DELETE_EMAILS(&p0, p1);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_SOCIALCLUB_SC_EMAIL_MESSAGE_PUSH_GAMER_TO_RECIP_LIST(WrenVM* vm)
    {
        Any gamerHandle;

        SOCIALCLUB::SC_EMAIL_MESSAGE_PUSH_GAMER_TO_RECIP_LIST(&gamerHandle);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_SOCIALCLUB_SC_EMAIL_MESSAGE_CLEAR_RECIP_LIST(WrenVM* vm)
    {

        SOCIALCLUB::SC_EMAIL_MESSAGE_CLEAR_RECIP_LIST();
    }

    static void WREN_SOCIALCLUB_SC_EMAIL_SEND_EMAIL(WrenVM* vm)
    {
        const char* p0 = wrenGetSlotString(vm, 1);

        SOCIALCLUB::SC_EMAIL_SEND_EMAIL(p0);
    }

    static void WREN_SOCIALCLUB_SC_EMAIL_SET_CURRENT_EMAIL_TAG(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        Any res = SOCIALCLUB::SC_EMAIL_SET_CURRENT_EMAIL_TAG(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_SOCIALCLUB_SC_CACHE_NEW_ROCKSTAR_MSGS(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        SOCIALCLUB::SC_CACHE_NEW_ROCKSTAR_MSGS(toggle);
    }

    static void WREN_SOCIALCLUB_SC_HAS_NEW_ROCKSTAR_MSG(WrenVM* vm)
    {

        BOOL res = SOCIALCLUB::SC_HAS_NEW_ROCKSTAR_MSG();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_SOCIALCLUB_SC_GET_NEW_ROCKSTAR_MSG(WrenVM* vm)
    {

        const char* res = SOCIALCLUB::SC_GET_NEW_ROCKSTAR_MSG();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotString(vm, 0, res);
    }

    static void WREN_SOCIALCLUB_SC_PRESENCE_ATTR_SET_INT(WrenVM* vm)
    {
        Hash attrHash = (Hash)wrenGetSlotDouble(vm, 1);
        int value = (int)wrenGetSlotDouble(vm, 2);

        BOOL res = SOCIALCLUB::SC_PRESENCE_ATTR_SET_INT(attrHash, value);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_SOCIALCLUB_SC_PRESENCE_ATTR_SET_FLOAT(WrenVM* vm)
    {
        Hash attrHash = (Hash)wrenGetSlotDouble(vm, 1);
        float value = (float)wrenGetSlotDouble(vm, 2);

        BOOL res = SOCIALCLUB::SC_PRESENCE_ATTR_SET_FLOAT(attrHash, value);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_SOCIALCLUB_SC_PRESENCE_ATTR_SET_STRING(WrenVM* vm)
    {
        Hash attrHash = (Hash)wrenGetSlotDouble(vm, 1);
        const char* value = wrenGetSlotString(vm, 2);

        BOOL res = SOCIALCLUB::SC_PRESENCE_ATTR_SET_STRING(attrHash, value);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_SOCIALCLUB_SC_PRESENCE_SET_ACTIVITY_RATING(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);

        BOOL res = SOCIALCLUB::SC_PRESENCE_SET_ACTIVITY_RATING(p0, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_SOCIALCLUB_SC_GAMERDATA_GET_INT(WrenVM* vm)
    {

        Any res = SOCIALCLUB::SC_GAMERDATA_GET_INT();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_SOCIALCLUB_SC_GAMERDATA_GET_FLOAT(WrenVM* vm)
    {

        Any res = SOCIALCLUB::SC_GAMERDATA_GET_FLOAT();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_SOCIALCLUB_SC_GAMERDATA_GET_BOOL(WrenVM* vm)
    {
        const char* name = wrenGetSlotString(vm, 1);

        BOOL res = SOCIALCLUB::SC_GAMERDATA_GET_BOOL(name);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_SOCIALCLUB_SC_GAMERDATA_GET_STRING(WrenVM* vm)
    {

        Any res = SOCIALCLUB::SC_GAMERDATA_GET_STRING();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_SOCIALCLUB_SC_GAMERDATA_GET_ACTIVE_XP_BONUS(WrenVM* vm)
    {

        Any res = SOCIALCLUB::SC_GAMERDATA_GET_ACTIVE_XP_BONUS();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_SOCIALCLUB_SC_PROFANITY_CHECK_STRING(WrenVM* vm)
    {
        const char* string = wrenGetSlotString(vm, 1);
        int token;

        BOOL res = SOCIALCLUB::SC_PROFANITY_CHECK_STRING(string, &token);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, token);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_SOCIALCLUB_SC_PROFANITY_CHECK_STRING_UGC(WrenVM* vm)
    {
        const char* string = wrenGetSlotString(vm, 1);
        int token;

        BOOL res = SOCIALCLUB::SC_PROFANITY_CHECK_STRING_UGC(string, &token);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, token);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_SOCIALCLUB_SC_PROFANITY_GET_CHECK_IS_VALID(WrenVM* vm)
    {
        int token = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = SOCIALCLUB::SC_PROFANITY_GET_CHECK_IS_VALID(token);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_SOCIALCLUB_SC_PROFANITY_GET_CHECK_IS_PENDING(WrenVM* vm)
    {
        int token = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = SOCIALCLUB::SC_PROFANITY_GET_CHECK_IS_PENDING(token);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_SOCIALCLUB_SC_PROFANITY_GET_STRING_PASSED(WrenVM* vm)
    {
        int token = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = SOCIALCLUB::SC_PROFANITY_GET_STRING_PASSED(token);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_SOCIALCLUB_SC_PROFANITY_GET_STRING_STATUS(WrenVM* vm)
    {
        int token = (int)wrenGetSlotDouble(vm, 1);

        int res = SOCIALCLUB::SC_PROFANITY_GET_STRING_STATUS(token);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_SOCIALCLUB_SC_LICENSEPLATE_CHECK_STRING(WrenVM* vm)
    {
        const char* p0 = wrenGetSlotString(vm, 1);
        int p1;

        BOOL res = SOCIALCLUB::SC_LICENSEPLATE_CHECK_STRING(p0, &p1);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p1);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_SOCIALCLUB_SC_LICENSEPLATE_GET_CHECK_IS_VALID(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        BOOL res = SOCIALCLUB::SC_LICENSEPLATE_GET_CHECK_IS_VALID(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_SOCIALCLUB_SC_LICENSEPLATE_GET_CHECK_IS_PENDING(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        Any res = SOCIALCLUB::SC_LICENSEPLATE_GET_CHECK_IS_PENDING(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_SOCIALCLUB_SC_LICENSEPLATE_GET_COUNT(WrenVM* vm)
    {
        int token = (int)wrenGetSlotDouble(vm, 1);

        int res = SOCIALCLUB::SC_LICENSEPLATE_GET_COUNT(token);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_SOCIALCLUB_SC_LICENSEPLATE_GET_PLATE(WrenVM* vm)
    {
        int token = (int)wrenGetSlotDouble(vm, 1);
        int plateIndex = (int)wrenGetSlotDouble(vm, 2);

        const char* res = SOCIALCLUB::SC_LICENSEPLATE_GET_PLATE(token, plateIndex);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotString(vm, 0, res);
    }

    static void WREN_SOCIALCLUB_SC_LICENSEPLATE_GET_PLATE_DATA(WrenVM* vm)
    {
        int token = (int)wrenGetSlotDouble(vm, 1);
        int plateIndex = (int)wrenGetSlotDouble(vm, 2);

        const char* res = SOCIALCLUB::SC_LICENSEPLATE_GET_PLATE_DATA(token, plateIndex);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotString(vm, 0, res);
    }

    static void WREN_SOCIALCLUB_SC_LICENSEPLATE_SET_PLATE_DATA(WrenVM* vm)
    {
        const char* oldPlateText = wrenGetSlotString(vm, 1);
        const char* newPlateText = wrenGetSlotString(vm, 2);
        Any plateData;

        BOOL res = SOCIALCLUB::SC_LICENSEPLATE_SET_PLATE_DATA(oldPlateText, newPlateText, &plateData);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, plateData);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_SOCIALCLUB_SC_LICENSEPLATE_ADD(WrenVM* vm)
    {
        const char* plateText = wrenGetSlotString(vm, 1);
        Any plateData;
        int token;

        BOOL res = SOCIALCLUB::SC_LICENSEPLATE_ADD(plateText, &plateData, &token);

        wrenEnsureSlots(vm, 6);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, plateData);
        wrenInsertInList(vm, 0, 1, 2);

        wrenSetSlotDouble(vm, 3, token);
        wrenInsertInList(vm, 0, 2, 3);

    }

    static void WREN_SOCIALCLUB_SC_LICENSEPLATE_GET_ADD_IS_PENDING(WrenVM* vm)
    {
        int token = (int)wrenGetSlotDouble(vm, 1);

        Any res = SOCIALCLUB::SC_LICENSEPLATE_GET_ADD_IS_PENDING(token);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_SOCIALCLUB_SC_LICENSEPLATE_GET_ADD_STATUS(WrenVM* vm)
    {
        int token = (int)wrenGetSlotDouble(vm, 1);

        Any res = SOCIALCLUB::SC_LICENSEPLATE_GET_ADD_STATUS(token);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_SOCIALCLUB_SC_LICENSEPLATE_ISVALID(WrenVM* vm)
    {
        const char* plateText = wrenGetSlotString(vm, 1);
        int token;

        BOOL res = SOCIALCLUB::SC_LICENSEPLATE_ISVALID(plateText, &token);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, token);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_SOCIALCLUB_SC_LICENSEPLATE_GET_ISVALID_IS_PENDING(WrenVM* vm)
    {
        int token = (int)wrenGetSlotDouble(vm, 1);

        int res = SOCIALCLUB::SC_LICENSEPLATE_GET_ISVALID_IS_PENDING(token);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_SOCIALCLUB_SC_LICENSEPLATE_GET_ISVALID_STATUS(WrenVM* vm)
    {
        int token = (int)wrenGetSlotDouble(vm, 1);

        int res = SOCIALCLUB::SC_LICENSEPLATE_GET_ISVALID_STATUS(token);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_SOCIALCLUB_SC_COMMUNITY_EVENT_IS_ACTIVE(WrenVM* vm)
    {

        BOOL res = SOCIALCLUB::SC_COMMUNITY_EVENT_IS_ACTIVE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_SOCIALCLUB_SC_COMMUNITY_EVENT_GET_EVENT_ID(WrenVM* vm)
    {

        int res = SOCIALCLUB::SC_COMMUNITY_EVENT_GET_EVENT_ID();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_SOCIALCLUB_SC_COMMUNITY_EVENT_GET_EXTRA_DATA_INT(WrenVM* vm)
    {
        const char* p0 = wrenGetSlotString(vm, 1);
        int p1;

        BOOL res = SOCIALCLUB::SC_COMMUNITY_EVENT_GET_EXTRA_DATA_INT(p0, &p1);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p1);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_SOCIALCLUB_SC_COMMUNITY_EVENT_GET_EXTRA_DATA_FLOAT(WrenVM* vm)
    {
        const char* p0 = wrenGetSlotString(vm, 1);
        float p1;

        BOOL res = SOCIALCLUB::SC_COMMUNITY_EVENT_GET_EXTRA_DATA_FLOAT(p0, &p1);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p1);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_SOCIALCLUB_SC_COMMUNITY_EVENT_GET_EXTRA_DATA_STRING(WrenVM* vm)
    {
        const char* p0 = wrenGetSlotString(vm, 1);
        char p1;

        BOOL res = SOCIALCLUB::SC_COMMUNITY_EVENT_GET_EXTRA_DATA_STRING(p0, &p1);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p1);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_SOCIALCLUB_SC_COMMUNITY_EVENT_GET_DISPLAY_NAME(WrenVM* vm)
    {
        char p0;

        BOOL res = SOCIALCLUB::SC_COMMUNITY_EVENT_GET_DISPLAY_NAME(&p0);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p0);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_SOCIALCLUB_SC_COMMUNITY_EVENT_IS_ACTIVE_FOR_TYPE(WrenVM* vm)
    {
        const char* p0 = wrenGetSlotString(vm, 1);

        BOOL res = SOCIALCLUB::SC_COMMUNITY_EVENT_IS_ACTIVE_FOR_TYPE(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_SOCIALCLUB_SC_COMMUNITY_EVENT_GET_EVENT_ID_FOR_TYPE(WrenVM* vm)
    {
        const char* p0 = wrenGetSlotString(vm, 1);

        int res = SOCIALCLUB::SC_COMMUNITY_EVENT_GET_EVENT_ID_FOR_TYPE(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_SOCIALCLUB_SC_COMMUNITY_EVENT_GET_EXTRA_DATA_INT_FOR_TYPE(WrenVM* vm)
    {
        const char* p0 = wrenGetSlotString(vm, 1);
        int p1;
        const char* p2 = wrenGetSlotString(vm, 2);

        BOOL res = SOCIALCLUB::SC_COMMUNITY_EVENT_GET_EXTRA_DATA_INT_FOR_TYPE(p0, &p1, p2);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p1);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_SOCIALCLUB_SC_COMMUNITY_EVENT_GET_EXTRA_DATA_FLOAT_FOR_TYPE(WrenVM* vm)
    {
        const char* p0 = wrenGetSlotString(vm, 1);
        float p1;
        const char* p2 = wrenGetSlotString(vm, 2);

        BOOL res = SOCIALCLUB::SC_COMMUNITY_EVENT_GET_EXTRA_DATA_FLOAT_FOR_TYPE(p0, &p1, p2);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p1);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_SOCIALCLUB_SC_COMMUNITY_EVENT_GET_EXTRA_DATA_STRING_FOR_TYPE(WrenVM* vm)
    {
        const char* p0 = wrenGetSlotString(vm, 1);
        char p1;
        const char* p2 = wrenGetSlotString(vm, 2);

        BOOL res = SOCIALCLUB::SC_COMMUNITY_EVENT_GET_EXTRA_DATA_STRING_FOR_TYPE(p0, &p1, p2);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p1);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_SOCIALCLUB_SC_COMMUNITY_EVENT_GET_DISPLAY_NAME_FOR_TYPE(WrenVM* vm)
    {
        char p0;
        const char* p1 = wrenGetSlotString(vm, 1);

        BOOL res = SOCIALCLUB::SC_COMMUNITY_EVENT_GET_DISPLAY_NAME_FOR_TYPE(&p0, p1);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p0);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_SOCIALCLUB_SC_COMMUNITY_EVENT_IS_ACTIVE_BY_ID(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = SOCIALCLUB::SC_COMMUNITY_EVENT_IS_ACTIVE_BY_ID(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_SOCIALCLUB_SC_COMMUNITY_EVENT_GET_EXTRA_DATA_INT_BY_ID(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);
        const char* p1 = wrenGetSlotString(vm, 2);
        int p2;

        BOOL res = SOCIALCLUB::SC_COMMUNITY_EVENT_GET_EXTRA_DATA_INT_BY_ID(p0, p1, &p2);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p2);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_SOCIALCLUB_SC_COMMUNITY_EVENT_GET_EXTRA_DATA_FLOAT_BY_ID(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);
        const char* p1 = wrenGetSlotString(vm, 2);
        float p2;

        BOOL res = SOCIALCLUB::SC_COMMUNITY_EVENT_GET_EXTRA_DATA_FLOAT_BY_ID(p0, p1, &p2);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p2);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_SOCIALCLUB_SC_COMMUNITY_EVENT_GET_EXTRA_DATA_STRING_BY_ID(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);
        const char* p1 = wrenGetSlotString(vm, 2);
        char p2;

        BOOL res = SOCIALCLUB::SC_COMMUNITY_EVENT_GET_EXTRA_DATA_STRING_BY_ID(p0, p1, &p2);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p2);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_SOCIALCLUB_SC_COMMUNITY_EVENT_GET_DISPLAY_NAME_BY_ID(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);
        char p1;

        BOOL res = SOCIALCLUB::SC_COMMUNITY_EVENT_GET_DISPLAY_NAME_BY_ID(p0, &p1);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p1);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_SOCIALCLUB_SC_TRANSITION_NEWS_SHOW(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        BOOL res = SOCIALCLUB::SC_TRANSITION_NEWS_SHOW(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_SOCIALCLUB_SC_TRANSITION_NEWS_SHOW_TIMED(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        BOOL res = SOCIALCLUB::SC_TRANSITION_NEWS_SHOW_TIMED(p0, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_SOCIALCLUB_SC_TRANSITION_NEWS_SHOW_NEXT_ITEM(WrenVM* vm)
    {

        Any res = SOCIALCLUB::SC_TRANSITION_NEWS_SHOW_NEXT_ITEM();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_SOCIALCLUB_SC_TRANSITION_NEWS_HAS_EXTRA_DATA_TU(WrenVM* vm)
    {

        BOOL res = SOCIALCLUB::SC_TRANSITION_NEWS_HAS_EXTRA_DATA_TU();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_SOCIALCLUB_SC_TRANSITION_NEWS_GET_EXTRA_DATA_INT_TU(WrenVM* vm)
    {
        const char* p0 = wrenGetSlotString(vm, 1);
        int p1;

        BOOL res = SOCIALCLUB::SC_TRANSITION_NEWS_GET_EXTRA_DATA_INT_TU(p0, &p1);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p1);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_SOCIALCLUB_SC_TRANSITION_NEWS_END(WrenVM* vm)
    {

        SOCIALCLUB::SC_TRANSITION_NEWS_END();
    }

    static void WREN_SOCIALCLUB_SC_PAUSE_NEWS_INIT_STARTER_PACK(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        Any res = SOCIALCLUB::SC_PAUSE_NEWS_INIT_STARTER_PACK(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_SOCIALCLUB_SC_PAUSE_NEWS_GET_PENDING_STORY(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        BOOL res = SOCIALCLUB::SC_PAUSE_NEWS_GET_PENDING_STORY(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_SOCIALCLUB_SC_PAUSE_NEWS_SHUTDOWN(WrenVM* vm)
    {

        SOCIALCLUB::SC_PAUSE_NEWS_SHUTDOWN();
    }

    static void WREN_SOCIALCLUB_SC_ACCOUNT_INFO_GET_NICKNAME(WrenVM* vm)
    {

        const char* res = SOCIALCLUB::SC_ACCOUNT_INFO_GET_NICKNAME();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotString(vm, 0, res);
    }

    static void WREN_SOCIALCLUB_SC_ACHIEVEMENT_INFO_STATUS(WrenVM* vm)
    {
        int p0;

        BOOL res = SOCIALCLUB::SC_ACHIEVEMENT_INFO_STATUS(&p0);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p0);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_SOCIALCLUB_SC_HAS_ACHIEVEMENT_BEEN_PASSED(WrenVM* vm)
    {
        int achievementId = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = SOCIALCLUB::SC_HAS_ACHIEVEMENT_BEEN_PASSED(achievementId);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }


    static void WREN_STATS_STAT_CLEAR_SLOT_FOR_RELOAD(WrenVM* vm)
    {
        int statSlot = (int)wrenGetSlotDouble(vm, 1);

        Any res = STATS::STAT_CLEAR_SLOT_FOR_RELOAD(statSlot);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_STATS_STAT_LOAD(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = STATS::STAT_LOAD(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_STATS_STAT_SAVE(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        int p2 = (int)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        BOOL res = STATS::STAT_SAVE(p0, p1, p2, p3);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_STATS_STAT_SET_OPEN_SAVETYPE_IN_JOB(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);

        STATS::STAT_SET_OPEN_SAVETYPE_IN_JOB(p0);
    }

    static void WREN_STATS_STAT_LOAD_PENDING(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        BOOL res = STATS::STAT_LOAD_PENDING(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_STATS_STAT_SAVE_PENDING(WrenVM* vm)
    {

        BOOL res = STATS::STAT_SAVE_PENDING();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_STATS_STAT_SAVE_PENDING_OR_REQUESTED(WrenVM* vm)
    {

        BOOL res = STATS::STAT_SAVE_PENDING_OR_REQUESTED();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_STATS_STAT_DELETE_SLOT(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        Any res = STATS::STAT_DELETE_SLOT(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_STATS_STAT_SLOT_IS_LOADED(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        BOOL res = STATS::STAT_SLOT_IS_LOADED(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_STATS_STAT_CLOUD_SLOT_LOAD_FAILED(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        BOOL res = STATS::STAT_CLOUD_SLOT_LOAD_FAILED(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_STATS_STAT_CLOUD_SLOT_LOAD_FAILED_CODE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        Any res = STATS::STAT_CLOUD_SLOT_LOAD_FAILED_CODE(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_STATS_STAT_SET_BLOCK_SAVES(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        STATS::STAT_SET_BLOCK_SAVES(toggle);
    }

    static void WREN_STATS_STAT_GET_BLOCK_SAVES(WrenVM* vm)
    {

        BOOL res = STATS::STAT_GET_BLOCK_SAVES();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_STATS_STAT_CLOUD_SLOT_SAVE_FAILED(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        BOOL res = STATS::STAT_CLOUD_SLOT_SAVE_FAILED(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_STATS_STAT_CLEAR_PENDING_SAVES(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        STATS::STAT_CLEAR_PENDING_SAVES(p0);
    }

    static void WREN_STATS_STAT_LOAD_DIRTY_READ_DETECTED(WrenVM* vm)
    {

        BOOL res = STATS::STAT_LOAD_DIRTY_READ_DETECTED();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_STATS_STAT_CLEAR_DIRTY_READ_DETECTED(WrenVM* vm)
    {

        STATS::STAT_CLEAR_DIRTY_READ_DETECTED();
    }

    static void WREN_STATS_STAT_GET_LOAD_SAFE_TO_PROGRESS_TO_MP_FROM_SP(WrenVM* vm)
    {

        Any res = STATS::STAT_GET_LOAD_SAFE_TO_PROGRESS_TO_MP_FROM_SP();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_STATS_STAT_SET_INT(WrenVM* vm)
    {
        Hash statName = (Hash)wrenGetSlotDouble(vm, 1);
        int value = (int)wrenGetSlotDouble(vm, 2);
        BOOL save = (BOOL)wrenGetSlotBool(vm, 3);

        BOOL res = STATS::STAT_SET_INT(statName, value, save);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_STATS_STAT_SET_FLOAT(WrenVM* vm)
    {
        Hash statName = (Hash)wrenGetSlotDouble(vm, 1);
        float value = (float)wrenGetSlotDouble(vm, 2);
        BOOL save = (BOOL)wrenGetSlotBool(vm, 3);

        BOOL res = STATS::STAT_SET_FLOAT(statName, value, save);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_STATS_STAT_SET_BOOL(WrenVM* vm)
    {
        Hash statName = (Hash)wrenGetSlotDouble(vm, 1);
        BOOL value = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL save = (BOOL)wrenGetSlotBool(vm, 3);

        BOOL res = STATS::STAT_SET_BOOL(statName, value, save);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_STATS_STAT_SET_GXT_LABEL(WrenVM* vm)
    {
        Hash statName = (Hash)wrenGetSlotDouble(vm, 1);
        const char* value = wrenGetSlotString(vm, 2);
        BOOL save = (BOOL)wrenGetSlotBool(vm, 3);

        BOOL res = STATS::STAT_SET_GXT_LABEL(statName, value, save);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_STATS_STAT_SET_DATE(WrenVM* vm)
    {
        Hash statName = (Hash)wrenGetSlotDouble(vm, 1);
        Any value;
        int numFields = (int)wrenGetSlotDouble(vm, 2);
        BOOL save = (BOOL)wrenGetSlotBool(vm, 3);

        BOOL res = STATS::STAT_SET_DATE(statName, &value, numFields, save);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, value);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_STATS_STAT_SET_STRING(WrenVM* vm)
    {
        Hash statName = (Hash)wrenGetSlotDouble(vm, 1);
        const char* value = wrenGetSlotString(vm, 2);
        BOOL save = (BOOL)wrenGetSlotBool(vm, 3);

        BOOL res = STATS::STAT_SET_STRING(statName, value, save);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_STATS_STAT_SET_POS(WrenVM* vm)
    {
        Hash statName = (Hash)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);
        BOOL save = (BOOL)wrenGetSlotBool(vm, 5);

        BOOL res = STATS::STAT_SET_POS(statName, x, y, z, save);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_STATS_STAT_SET_MASKED_INT(WrenVM* vm)
    {
        Hash statName = (Hash)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        int p3 = (int)wrenGetSlotDouble(vm, 4);
        BOOL save = (BOOL)wrenGetSlotBool(vm, 5);

        BOOL res = STATS::STAT_SET_MASKED_INT(statName, p1, p2, p3, save);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_STATS_STAT_SET_USER_ID(WrenVM* vm)
    {
        Hash statName = (Hash)wrenGetSlotDouble(vm, 1);
        const char* value = wrenGetSlotString(vm, 2);
        BOOL save = (BOOL)wrenGetSlotBool(vm, 3);

        BOOL res = STATS::STAT_SET_USER_ID(statName, value, save);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_STATS_STAT_SET_CURRENT_POSIX_TIME(WrenVM* vm)
    {
        Hash statName = (Hash)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        BOOL res = STATS::STAT_SET_CURRENT_POSIX_TIME(statName, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_STATS_STAT_GET_INT(WrenVM* vm)
    {
        Hash statHash = (Hash)wrenGetSlotDouble(vm, 1);
        int outValue;
        int p2 = (int)wrenGetSlotDouble(vm, 2);

        BOOL res = STATS::STAT_GET_INT(statHash, &outValue, p2);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, outValue);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_STATS_STAT_GET_FLOAT(WrenVM* vm)
    {
        Hash statHash = (Hash)wrenGetSlotDouble(vm, 1);
        float outValue;
        Any p2 = (Any)wrenGetSlotDouble(vm, 2);

        BOOL res = STATS::STAT_GET_FLOAT(statHash, &outValue, p2);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, outValue);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_STATS_STAT_GET_BOOL(WrenVM* vm)
    {
        Hash statHash = (Hash)wrenGetSlotDouble(vm, 1);
        BOOL outValue;
        Any p2 = (Any)wrenGetSlotDouble(vm, 2);

        BOOL res = STATS::STAT_GET_BOOL(statHash, &outValue, p2);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotBool(vm, 2, (bool)outValue);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_STATS_STAT_GET_DATE(WrenVM* vm)
    {
        Hash statHash = (Hash)wrenGetSlotDouble(vm, 1);
        Any p1;
        Any p2 = (Any)wrenGetSlotDouble(vm, 2);
        Any p3 = (Any)wrenGetSlotDouble(vm, 3);

        BOOL res = STATS::STAT_GET_DATE(statHash, &p1, p2, p3);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p1);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_STATS_STAT_GET_STRING(WrenVM* vm)
    {
        Hash statHash = (Hash)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);

        const char* res = STATS::STAT_GET_STRING(statHash, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotString(vm, 0, res);
    }

    static void WREN_STATS_STAT_GET_POS(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1;
        Any p2;
        Any p3;
        Any p4 = (Any)wrenGetSlotDouble(vm, 2);

        BOOL res = STATS::STAT_GET_POS(p0, &p1, &p2, &p3, p4);

        wrenEnsureSlots(vm, 8);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p1);
        wrenInsertInList(vm, 0, 1, 2);

        wrenSetSlotDouble(vm, 3, p2);
        wrenInsertInList(vm, 0, 2, 3);

        wrenSetSlotDouble(vm, 4, p3);
        wrenInsertInList(vm, 0, 3, 4);

    }

    static void WREN_STATS_STAT_GET_MASKED_INT(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1;
        Any p2 = (Any)wrenGetSlotDouble(vm, 2);
        Any p3 = (Any)wrenGetSlotDouble(vm, 3);
        Any p4 = (Any)wrenGetSlotDouble(vm, 4);

        BOOL res = STATS::STAT_GET_MASKED_INT(p0, &p1, p2, p3, p4);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p1);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_STATS_STAT_GET_USER_ID(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        const char* res = STATS::STAT_GET_USER_ID(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotString(vm, 0, res);
    }

    static void WREN_STATS_STAT_GET_LICENSE_PLATE(WrenVM* vm)
    {
        Hash statName = (Hash)wrenGetSlotDouble(vm, 1);

        const char* res = STATS::STAT_GET_LICENSE_PLATE(statName);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotString(vm, 0, res);
    }

    static void WREN_STATS_STAT_SET_LICENSE_PLATE(WrenVM* vm)
    {
        Hash statName = (Hash)wrenGetSlotDouble(vm, 1);
        const char* str = wrenGetSlotString(vm, 2);

        BOOL res = STATS::STAT_SET_LICENSE_PLATE(statName, str);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_STATS_STAT_INCREMENT(WrenVM* vm)
    {
        Hash statName = (Hash)wrenGetSlotDouble(vm, 1);
        float value = (float)wrenGetSlotDouble(vm, 2);

        STATS::STAT_INCREMENT(statName, value);
    }

    static void WREN_STATS_STAT_COMMUNITY_START_SYNCH(WrenVM* vm)
    {

        BOOL res = STATS::STAT_COMMUNITY_START_SYNCH();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_STATS_STAT_COMMUNITY_SYNCH_IS_PENDING(WrenVM* vm)
    {

        BOOL res = STATS::STAT_COMMUNITY_SYNCH_IS_PENDING();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_STATS_STAT_COMMUNITY_GET_HISTORY(WrenVM* vm)
    {
        Hash statName = (Hash)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);
        float outValue;

        BOOL res = STATS::STAT_COMMUNITY_GET_HISTORY(statName, p1, &outValue);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, outValue);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_STATS_STAT_RESET_ALL_ONLINE_CHARACTER_STATS(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);

        STATS::STAT_RESET_ALL_ONLINE_CHARACTER_STATS(p0);
    }

    static void WREN_STATS_STAT_LOCAL_RESET_ALL_ONLINE_CHARACTER_STATS(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);

        STATS::STAT_LOCAL_RESET_ALL_ONLINE_CHARACTER_STATS(p0);
    }

    static void WREN_STATS_STAT_GET_NUMBER_OF_DAYS(WrenVM* vm)
    {
        Hash statName = (Hash)wrenGetSlotDouble(vm, 1);

        int res = STATS::STAT_GET_NUMBER_OF_DAYS(statName);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_STATS_STAT_GET_NUMBER_OF_HOURS(WrenVM* vm)
    {
        Hash statName = (Hash)wrenGetSlotDouble(vm, 1);

        int res = STATS::STAT_GET_NUMBER_OF_HOURS(statName);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_STATS_STAT_GET_NUMBER_OF_MINUTES(WrenVM* vm)
    {
        Hash statName = (Hash)wrenGetSlotDouble(vm, 1);

        int res = STATS::STAT_GET_NUMBER_OF_MINUTES(statName);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_STATS_STAT_GET_NUMBER_OF_SECONDS(WrenVM* vm)
    {
        Hash statName = (Hash)wrenGetSlotDouble(vm, 1);

        int res = STATS::STAT_GET_NUMBER_OF_SECONDS(statName);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_STATS_STAT_SET_PROFILE_SETTING_VALUE(WrenVM* vm)
    {
        int profileSetting = (int)wrenGetSlotDouble(vm, 1);
        int value = (int)wrenGetSlotDouble(vm, 2);

        STATS::STAT_SET_PROFILE_SETTING_VALUE(profileSetting, value);
    }

    static void WREN_STATS_STATS_COMPLETED_CHARACTER_CREATION(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        STATS::STATS_COMPLETED_CHARACTER_CREATION(p0);
    }

    static void WREN_STATS_PACKED_STAT_GET_INT_STAT_INDEX(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);

        int res = STATS::PACKED_STAT_GET_INT_STAT_INDEX(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_STATS_GET_PACKED_INT_STAT_KEY(WrenVM* vm)
    {
        int index = (int)wrenGetSlotDouble(vm, 1);
        BOOL spStat = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL charStat = (BOOL)wrenGetSlotBool(vm, 3);
        int character = (int)wrenGetSlotDouble(vm, 4);

        Hash res = STATS::GET_PACKED_INT_STAT_KEY(index, spStat, charStat, character);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_STATS_GET_PACKED_TU_INT_STAT_KEY(WrenVM* vm)
    {
        int index = (int)wrenGetSlotDouble(vm, 1);
        BOOL spStat = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL charStat = (BOOL)wrenGetSlotBool(vm, 3);
        int character = (int)wrenGetSlotDouble(vm, 4);

        Hash res = STATS::GET_PACKED_TU_INT_STAT_KEY(index, spStat, charStat, character);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_STATS_GET_PACKED_NG_INT_STAT_KEY(WrenVM* vm)
    {
        int index = (int)wrenGetSlotDouble(vm, 1);
        BOOL spStat = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL charStat = (BOOL)wrenGetSlotBool(vm, 3);
        int character = (int)wrenGetSlotDouble(vm, 4);
        const char* section = wrenGetSlotString(vm, 5);

        Hash res = STATS::GET_PACKED_NG_INT_STAT_KEY(index, spStat, charStat, character, section);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_STATS_GET_PACKED_STAT_BOOL_CODE(WrenVM* vm)
    {
        int index = (int)wrenGetSlotDouble(vm, 1);
        int characterSlot = (int)wrenGetSlotDouble(vm, 2);

        BOOL res = STATS::GET_PACKED_STAT_BOOL_CODE(index, characterSlot);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_STATS_GET_PACKED_STAT_INT_CODE(WrenVM* vm)
    {
        int index = (int)wrenGetSlotDouble(vm, 1);
        int characterSlot = (int)wrenGetSlotDouble(vm, 2);

        int res = STATS::GET_PACKED_STAT_INT_CODE(index, characterSlot);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_STATS_SET_PACKED_STAT_BOOL_CODE(WrenVM* vm)
    {
        int index = (int)wrenGetSlotDouble(vm, 1);
        BOOL value = (BOOL)wrenGetSlotBool(vm, 2);
        int characterSlot = (int)wrenGetSlotDouble(vm, 3);

        STATS::SET_PACKED_STAT_BOOL_CODE(index, value, characterSlot);
    }

    static void WREN_STATS_SET_PACKED_STAT_INT_CODE(WrenVM* vm)
    {
        int index = (int)wrenGetSlotDouble(vm, 1);
        int value = (int)wrenGetSlotDouble(vm, 2);
        int characterSlot = (int)wrenGetSlotDouble(vm, 3);

        STATS::SET_PACKED_STAT_INT_CODE(index, value, characterSlot);
    }

    static void WREN_STATS_PLAYSTATS_BACKGROUND_SCRIPT_ACTION(WrenVM* vm)
    {
        const char* action = wrenGetSlotString(vm, 1);
        int value = (int)wrenGetSlotDouble(vm, 2);

        STATS::PLAYSTATS_BACKGROUND_SCRIPT_ACTION(action, value);
    }

    static void WREN_STATS_PLAYSTATS_NPC_INVITE(WrenVM* vm)
    {
        Any p0;

        STATS::PLAYSTATS_NPC_INVITE(&p0);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_STATS_PLAYSTATS_AWARD_XP(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);
        Hash type = (Hash)wrenGetSlotDouble(vm, 2);
        Hash category = (Hash)wrenGetSlotDouble(vm, 3);

        STATS::PLAYSTATS_AWARD_XP(amount, type, category);
    }

    static void WREN_STATS_PLAYSTATS_RANK_UP(WrenVM* vm)
    {
        int rank = (int)wrenGetSlotDouble(vm, 1);

        STATS::PLAYSTATS_RANK_UP(rank);
    }

    static void WREN_STATS_PLAYSTATS_STARTED_SESSION_IN_OFFLINEMODE(WrenVM* vm)
    {

        STATS::PLAYSTATS_STARTED_SESSION_IN_OFFLINEMODE();
    }

    static void WREN_STATS_PLAYSTATS_ACTIVITY_DONE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        STATS::PLAYSTATS_ACTIVITY_DONE(p0, p1);
    }

    static void WREN_STATS_PLAYSTATS_LEAVE_JOB_CHAIN(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);

        STATS::PLAYSTATS_LEAVE_JOB_CHAIN(p0, p1, p2, p3, p4);
    }

    static void WREN_STATS_PLAYSTATS_MISSION_STARTED(WrenVM* vm)
    {
        Any p0;
        Any p1 = (Any)wrenGetSlotDouble(vm, 1);
        Any p2 = (Any)wrenGetSlotDouble(vm, 2);
        BOOL p3 = (BOOL)wrenGetSlotBool(vm, 3);

        STATS::PLAYSTATS_MISSION_STARTED(&p0, p1, p2, p3);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_STATS_PLAYSTATS_MISSION_OVER(WrenVM* vm)
    {
        Any p0;
        Any p1 = (Any)wrenGetSlotDouble(vm, 1);
        Any p2 = (Any)wrenGetSlotDouble(vm, 2);
        BOOL p3 = (BOOL)wrenGetSlotBool(vm, 3);
        BOOL p4 = (BOOL)wrenGetSlotBool(vm, 4);
        BOOL p5 = (BOOL)wrenGetSlotBool(vm, 5);

        STATS::PLAYSTATS_MISSION_OVER(&p0, p1, p2, p3, p4, p5);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_STATS_PLAYSTATS_MISSION_CHECKPOINT(WrenVM* vm)
    {
        Any p0;
        Any p1 = (Any)wrenGetSlotDouble(vm, 1);
        Any p2 = (Any)wrenGetSlotDouble(vm, 2);
        Any p3 = (Any)wrenGetSlotDouble(vm, 3);

        STATS::PLAYSTATS_MISSION_CHECKPOINT(&p0, p1, p2, p3);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_STATS_PLAYSTATS_RANDOM_MISSION_DONE(WrenVM* vm)
    {
        const char* name = wrenGetSlotString(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        STATS::PLAYSTATS_RANDOM_MISSION_DONE(name, p1, p2, p3);
    }

    static void WREN_STATS_PLAYSTATS_ROS_BET(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);
        int act = (int)wrenGetSlotDouble(vm, 2);
        Player player = (Player)wrenGetSlotDouble(vm, 3);
        float cm = (float)wrenGetSlotDouble(vm, 4);

        STATS::PLAYSTATS_ROS_BET(amount, act, player, cm);
    }

    static void WREN_STATS_PLAYSTATS_RACE_CHECKPOINT(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);

        STATS::PLAYSTATS_RACE_CHECKPOINT(p0, p1, p2, p3, p4);
    }

    static void WREN_STATS_PLAYSTATS_CREATE_MATCH_HISTORY_ID_2(WrenVM* vm)
    {
        int playerAccountId;
        int posixTime;

        BOOL res = STATS::PLAYSTATS_CREATE_MATCH_HISTORY_ID_2(&playerAccountId, &posixTime);

        wrenEnsureSlots(vm, 6);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, playerAccountId);
        wrenInsertInList(vm, 0, 1, 2);

        wrenSetSlotDouble(vm, 3, posixTime);
        wrenInsertInList(vm, 0, 2, 3);

    }

    static void WREN_STATS_PLAYSTATS_MATCH_STARTED(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);

        STATS::PLAYSTATS_MATCH_STARTED(p0, p1, p2);
    }

    static void WREN_STATS_PLAYSTATS_SHOP_ITEM(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);

        STATS::PLAYSTATS_SHOP_ITEM(p0, p1, p2, p3, p4);
    }

    static void WREN_STATS_PLAYSTATS_CRATE_DROP_MISSION_DONE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);
        Any p5 = (Any)wrenGetSlotDouble(vm, 6);
        Any p6 = (Any)wrenGetSlotDouble(vm, 7);
        Any p7 = (Any)wrenGetSlotDouble(vm, 8);

        STATS::PLAYSTATS_CRATE_DROP_MISSION_DONE(p0, p1, p2, p3, p4, p5, p6, p7);
    }

    static void WREN_STATS_PLAYSTATS_CRATE_CREATED(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);
        float p2 = (float)wrenGetSlotDouble(vm, 3);

        STATS::PLAYSTATS_CRATE_CREATED(p0, p1, p2);
    }

    static void WREN_STATS_PLAYSTATS_HOLD_UP_MISSION_DONE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        STATS::PLAYSTATS_HOLD_UP_MISSION_DONE(p0, p1, p2, p3);
    }

    static void WREN_STATS_PLAYSTATS_IMPORT_EXPORT_MISSION_DONE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        STATS::PLAYSTATS_IMPORT_EXPORT_MISSION_DONE(p0, p1, p2, p3);
    }

    static void WREN_STATS_PLAYSTATS_RACE_TO_POINT_MISSION_DONE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        STATS::PLAYSTATS_RACE_TO_POINT_MISSION_DONE(p0, p1, p2, p3);
    }

    static void WREN_STATS_PLAYSTATS_ACQUIRED_HIDDEN_PACKAGE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        STATS::PLAYSTATS_ACQUIRED_HIDDEN_PACKAGE(p0);
    }

    static void WREN_STATS_PLAYSTATS_WEBSITE_VISITED(WrenVM* vm)
    {
        Hash scaleformHash = (Hash)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);

        STATS::PLAYSTATS_WEBSITE_VISITED(scaleformHash, p1);
    }

    static void WREN_STATS_PLAYSTATS_FRIEND_ACTIVITY(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        STATS::PLAYSTATS_FRIEND_ACTIVITY(p0, p1);
    }

    static void WREN_STATS_PLAYSTATS_ODDJOB_DONE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);

        STATS::PLAYSTATS_ODDJOB_DONE(p0, p1, p2);
    }

    static void WREN_STATS_PLAYSTATS_PROP_CHANGE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        STATS::PLAYSTATS_PROP_CHANGE(p0, p1, p2, p3);
    }

    static void WREN_STATS_PLAYSTATS_CLOTH_CHANGE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);

        STATS::PLAYSTATS_CLOTH_CHANGE(p0, p1, p2, p3, p4);
    }

    static void WREN_STATS_PLAYSTATS_WEAPON_MODE_CHANGE(WrenVM* vm)
    {
        Hash weaponHash = (Hash)wrenGetSlotDouble(vm, 1);
        Hash componentHashTo = (Hash)wrenGetSlotDouble(vm, 2);
        Hash componentHashFrom = (Hash)wrenGetSlotDouble(vm, 3);

        STATS::PLAYSTATS_WEAPON_MODE_CHANGE(weaponHash, componentHashTo, componentHashFrom);
    }

    static void WREN_STATS_PLAYSTATS_CHEAT_APPLIED(WrenVM* vm)
    {
        const char* cheat = wrenGetSlotString(vm, 1);

        STATS::PLAYSTATS_CHEAT_APPLIED(cheat);
    }

    static void WREN_STATS_PLAYSTATS_JOB_ACTIVITY_END(WrenVM* vm)
    {
        Any p0;
        Any p1;
        Any p2;
        Any p3;

        STATS::PLAYSTATS_JOB_ACTIVITY_END(&p0, &p1, &p2, &p3);

        wrenEnsureSlots(vm, 8);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, p0);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p1);
        wrenInsertInList(vm, 0, 1, 2);

        wrenSetSlotDouble(vm, 3, p2);
        wrenInsertInList(vm, 0, 2, 3);

        wrenSetSlotDouble(vm, 4, p3);
        wrenInsertInList(vm, 0, 3, 4);

    }

    static void WREN_STATS_PLAYSTATS_JOB_BEND(WrenVM* vm)
    {
        Any p0;
        Any p1;
        Any p2;
        Any p3;

        STATS::PLAYSTATS_JOB_BEND(&p0, &p1, &p2, &p3);

        wrenEnsureSlots(vm, 8);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, p0);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p1);
        wrenInsertInList(vm, 0, 1, 2);

        wrenSetSlotDouble(vm, 3, p2);
        wrenInsertInList(vm, 0, 2, 3);

        wrenSetSlotDouble(vm, 4, p3);
        wrenInsertInList(vm, 0, 3, 4);

    }

    static void WREN_STATS_PLAYSTATS_JOB_LTS_END(WrenVM* vm)
    {
        Any p0;
        Any p1;
        Any p2;
        Any p3;

        STATS::PLAYSTATS_JOB_LTS_END(&p0, &p1, &p2, &p3);

        wrenEnsureSlots(vm, 8);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, p0);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p1);
        wrenInsertInList(vm, 0, 1, 2);

        wrenSetSlotDouble(vm, 3, p2);
        wrenInsertInList(vm, 0, 2, 3);

        wrenSetSlotDouble(vm, 4, p3);
        wrenInsertInList(vm, 0, 3, 4);

    }

    static void WREN_STATS_PLAYSTATS_JOB_LTS_ROUND_END(WrenVM* vm)
    {
        Any p0;
        Any p1;
        Any p2;
        Any p3;

        STATS::PLAYSTATS_JOB_LTS_ROUND_END(&p0, &p1, &p2, &p3);

        wrenEnsureSlots(vm, 8);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, p0);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p1);
        wrenInsertInList(vm, 0, 1, 2);

        wrenSetSlotDouble(vm, 3, p2);
        wrenInsertInList(vm, 0, 2, 3);

        wrenSetSlotDouble(vm, 4, p3);
        wrenInsertInList(vm, 0, 3, 4);

    }

    static void WREN_STATS_PLAYSTATS_QUICKFIX_TOOL(WrenVM* vm)
    {
        int element = (int)wrenGetSlotDouble(vm, 1);
        const char* item = wrenGetSlotString(vm, 2);

        STATS::PLAYSTATS_QUICKFIX_TOOL(element, item);
    }

    static void WREN_STATS_PLAYSTATS_IDLE_KICK(WrenVM* vm)
    {
        int time = (int)wrenGetSlotDouble(vm, 1);

        STATS::PLAYSTATS_IDLE_KICK(time);
    }

    static void WREN_STATS_PLAYSTATS_SET_JOIN_TYPE(WrenVM* vm)
    {
        int joinType = (int)wrenGetSlotDouble(vm, 1);

        STATS::PLAYSTATS_SET_JOIN_TYPE(joinType);
    }

    static void WREN_STATS_PLAYSTATS_HEIST_SAVE_CHEAT(WrenVM* vm)
    {
        Hash hash = (Hash)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);

        STATS::PLAYSTATS_HEIST_SAVE_CHEAT(hash, p1);
    }

    static void WREN_STATS_PLAYSTATS_APPEND_DIRECTOR_METRIC(WrenVM* vm)
    {
        Any p0;

        STATS::PLAYSTATS_APPEND_DIRECTOR_METRIC(&p0);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_STATS_PLAYSTATS_AWARD_BAD_SPORT(WrenVM* vm)
    {
        int id = (int)wrenGetSlotDouble(vm, 1);

        STATS::PLAYSTATS_AWARD_BAD_SPORT(id);
    }

    static void WREN_STATS_PLAYSTATS_PEGASUS_AS_PERSONAL_AIRCRAFT(WrenVM* vm)
    {
        Hash modelHash = (Hash)wrenGetSlotDouble(vm, 1);

        STATS::PLAYSTATS_PEGASUS_AS_PERSONAL_AIRCRAFT(modelHash);
    }

    static void WREN_STATS_PLAYSTATS_FM_EVENT_CHALLENGES(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        STATS::PLAYSTATS_FM_EVENT_CHALLENGES(p0);
    }

    static void WREN_STATS_PLAYSTATS_FM_EVENT_VEHICLETARGET(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        STATS::PLAYSTATS_FM_EVENT_VEHICLETARGET(p0);
    }

    static void WREN_STATS_PLAYSTATS_FM_EVENT_URBANWARFARE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        STATS::PLAYSTATS_FM_EVENT_URBANWARFARE(p0);
    }

    static void WREN_STATS_PLAYSTATS_FM_EVENT_CHECKPOINTCOLLECTION(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        STATS::PLAYSTATS_FM_EVENT_CHECKPOINTCOLLECTION(p0);
    }

    static void WREN_STATS_PLAYSTATS_FM_EVENT_ATOB(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        STATS::PLAYSTATS_FM_EVENT_ATOB(p0);
    }

    static void WREN_STATS_PLAYSTATS_FM_EVENT_PENNEDIN(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        STATS::PLAYSTATS_FM_EVENT_PENNEDIN(p0);
    }

    static void WREN_STATS_PLAYSTATS_FM_EVENT_PASSTHEPARCEL(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        STATS::PLAYSTATS_FM_EVENT_PASSTHEPARCEL(p0);
    }

    static void WREN_STATS_PLAYSTATS_FM_EVENT_HOTPROPERTY(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        STATS::PLAYSTATS_FM_EVENT_HOTPROPERTY(p0);
    }

    static void WREN_STATS_PLAYSTATS_FM_EVENT_DEADDROP(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        STATS::PLAYSTATS_FM_EVENT_DEADDROP(p0);
    }

    static void WREN_STATS_PLAYSTATS_FM_EVENT_KINGOFTHECASTLE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        STATS::PLAYSTATS_FM_EVENT_KINGOFTHECASTLE(p0);
    }

    static void WREN_STATS_PLAYSTATS_FM_EVENT_CRIMINALDAMAGE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        STATS::PLAYSTATS_FM_EVENT_CRIMINALDAMAGE(p0);
    }

    static void WREN_STATS_PLAYSTATS_FM_EVENT_COMPETITIVEURBANWARFARE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        STATS::PLAYSTATS_FM_EVENT_COMPETITIVEURBANWARFARE(p0);
    }

    static void WREN_STATS_PLAYSTATS_FM_EVENT_HUNTBEAST(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        STATS::PLAYSTATS_FM_EVENT_HUNTBEAST(p0);
    }

    static void WREN_STATS_PLAYSTATS_PIMENU_HIDE_OPTIONS(WrenVM* vm)
    {
        Any data;

        STATS::PLAYSTATS_PIMENU_HIDE_OPTIONS(&data);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_STATS_LEADERBOARDS_GET_NUMBER_OF_COLUMNS(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        Any res = STATS::LEADERBOARDS_GET_NUMBER_OF_COLUMNS(p0, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_STATS_LEADERBOARDS_GET_COLUMN_ID(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);

        Any res = STATS::LEADERBOARDS_GET_COLUMN_ID(p0, p1, p2);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_STATS_LEADERBOARDS_GET_COLUMN_TYPE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);

        Any res = STATS::LEADERBOARDS_GET_COLUMN_TYPE(p0, p1, p2);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_STATS_LEADERBOARDS_READ_CLEAR_ALL(WrenVM* vm)
    {

        Any res = STATS::LEADERBOARDS_READ_CLEAR_ALL();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_STATS_LEADERBOARDS_READ_CLEAR(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);

        Any res = STATS::LEADERBOARDS_READ_CLEAR(p0, p1, p2);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_STATS_LEADERBOARDS_READ_PENDING(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);

        BOOL res = STATS::LEADERBOARDS_READ_PENDING(p0, p1, p2);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_STATS_LEADERBOARDS_READ_ANY_PENDING(WrenVM* vm)
    {

        BOOL res = STATS::LEADERBOARDS_READ_ANY_PENDING();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_STATS_LEADERBOARDS_READ_SUCCESSFUL(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);

        BOOL res = STATS::LEADERBOARDS_READ_SUCCESSFUL(p0, p1, p2);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_STATS_LEADERBOARDS2_READ_FRIENDS_BY_ROW(WrenVM* vm)
    {
        Any p0;
        Any p1;
        Any p2 = (Any)wrenGetSlotDouble(vm, 1);
        BOOL p3 = (BOOL)wrenGetSlotBool(vm, 2);
        Any p4 = (Any)wrenGetSlotDouble(vm, 3);
        Any p5 = (Any)wrenGetSlotDouble(vm, 4);

        BOOL res = STATS::LEADERBOARDS2_READ_FRIENDS_BY_ROW(&p0, &p1, p2, p3, p4, p5);

        wrenEnsureSlots(vm, 6);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p0);
        wrenInsertInList(vm, 0, 1, 2);

        wrenSetSlotDouble(vm, 3, p1);
        wrenInsertInList(vm, 0, 2, 3);

    }

    static void WREN_STATS_LEADERBOARDS2_READ_BY_HANDLE(WrenVM* vm)
    {
        Any p0;
        Any p1;

        BOOL res = STATS::LEADERBOARDS2_READ_BY_HANDLE(&p0, &p1);

        wrenEnsureSlots(vm, 6);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p0);
        wrenInsertInList(vm, 0, 1, 2);

        wrenSetSlotDouble(vm, 3, p1);
        wrenInsertInList(vm, 0, 2, 3);

    }

    static void WREN_STATS_LEADERBOARDS2_READ_BY_ROW(WrenVM* vm)
    {
        Any p0;
        Any p1;
        Any p2 = (Any)wrenGetSlotDouble(vm, 1);
        Any p3;
        Any p4 = (Any)wrenGetSlotDouble(vm, 2);
        Any p5;
        Any p6 = (Any)wrenGetSlotDouble(vm, 3);

        BOOL res = STATS::LEADERBOARDS2_READ_BY_ROW(&p0, &p1, p2, &p3, p4, &p5, p6);

        wrenEnsureSlots(vm, 10);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p0);
        wrenInsertInList(vm, 0, 1, 2);

        wrenSetSlotDouble(vm, 3, p1);
        wrenInsertInList(vm, 0, 2, 3);

        wrenSetSlotDouble(vm, 4, p3);
        wrenInsertInList(vm, 0, 3, 4);

        wrenSetSlotDouble(vm, 5, p5);
        wrenInsertInList(vm, 0, 4, 5);

    }

    static void WREN_STATS_LEADERBOARDS2_READ_BY_RANK(WrenVM* vm)
    {
        Any p0;
        Any p1 = (Any)wrenGetSlotDouble(vm, 1);
        Any p2 = (Any)wrenGetSlotDouble(vm, 2);

        BOOL res = STATS::LEADERBOARDS2_READ_BY_RANK(&p0, p1, p2);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p0);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_STATS_LEADERBOARDS2_READ_BY_RADIUS(WrenVM* vm)
    {
        Any p0;
        Any p1 = (Any)wrenGetSlotDouble(vm, 1);
        Any p2;

        BOOL res = STATS::LEADERBOARDS2_READ_BY_RADIUS(&p0, p1, &p2);

        wrenEnsureSlots(vm, 6);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p0);
        wrenInsertInList(vm, 0, 1, 2);

        wrenSetSlotDouble(vm, 3, p2);
        wrenInsertInList(vm, 0, 2, 3);

    }

    static void WREN_STATS_LEADERBOARDS2_READ_BY_SCORE_INT(WrenVM* vm)
    {
        Any p0;
        Any p1 = (Any)wrenGetSlotDouble(vm, 1);
        Any p2 = (Any)wrenGetSlotDouble(vm, 2);

        BOOL res = STATS::LEADERBOARDS2_READ_BY_SCORE_INT(&p0, p1, p2);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p0);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_STATS_LEADERBOARDS2_READ_BY_SCORE_FLOAT(WrenVM* vm)
    {
        Any p0;
        float p1 = (float)wrenGetSlotDouble(vm, 1);
        Any p2 = (Any)wrenGetSlotDouble(vm, 2);

        BOOL res = STATS::LEADERBOARDS2_READ_BY_SCORE_FLOAT(&p0, p1, p2);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p0);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_STATS_LEADERBOARDS2_READ_RANK_PREDICTION(WrenVM* vm)
    {
        Any p0;
        Any p1;
        Any p2;

        BOOL res = STATS::LEADERBOARDS2_READ_RANK_PREDICTION(&p0, &p1, &p2);

        wrenEnsureSlots(vm, 8);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p0);
        wrenInsertInList(vm, 0, 1, 2);

        wrenSetSlotDouble(vm, 3, p1);
        wrenInsertInList(vm, 0, 2, 3);

        wrenSetSlotDouble(vm, 4, p2);
        wrenInsertInList(vm, 0, 3, 4);

    }

    static void WREN_STATS_LEADERBOARDS2_READ_BY_PLAFORM(WrenVM* vm)
    {
        Any p0;
        const char* gamerHandleCsv = wrenGetSlotString(vm, 1);
        const char* platformName = wrenGetSlotString(vm, 2);

        BOOL res = STATS::LEADERBOARDS2_READ_BY_PLAFORM(&p0, gamerHandleCsv, platformName);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p0);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_STATS_LEADERBOARDS2_READ_GET_ROW_DATA_START(WrenVM* vm)
    {
        Any p0;

        BOOL res = STATS::LEADERBOARDS2_READ_GET_ROW_DATA_START(&p0);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p0);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_STATS_LEADERBOARDS2_READ_GET_ROW_DATA_END(WrenVM* vm)
    {

        STATS::LEADERBOARDS2_READ_GET_ROW_DATA_END();
    }

    static void WREN_STATS_LEADERBOARDS2_READ_GET_ROW_DATA_INFO(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1;

        BOOL res = STATS::LEADERBOARDS2_READ_GET_ROW_DATA_INFO(p0, &p1);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p1);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_STATS_LEADERBOARDS2_READ_GET_ROW_DATA_INT(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        Any res = STATS::LEADERBOARDS2_READ_GET_ROW_DATA_INT(p0, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_STATS_LEADERBOARDS2_READ_GET_ROW_DATA_FLOAT(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        float res = STATS::LEADERBOARDS2_READ_GET_ROW_DATA_FLOAT(p0, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_STATS_LEADERBOARDS2_WRITE_DATA(WrenVM* vm)
    {
        Any p0;

        BOOL res = STATS::LEADERBOARDS2_WRITE_DATA(&p0);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p0);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_STATS_LEADERBOARDS_WRITE_ADD_COLUMN(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        float p2 = (float)wrenGetSlotDouble(vm, 3);

        STATS::LEADERBOARDS_WRITE_ADD_COLUMN(p0, p1, p2);
    }

    static void WREN_STATS_LEADERBOARDS_WRITE_ADD_COLUMN_LONG(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);

        STATS::LEADERBOARDS_WRITE_ADD_COLUMN_LONG(p0, p1, p2);
    }

    static void WREN_STATS_LEADERBOARDS_CACHE_DATA_ROW(WrenVM* vm)
    {
        Any p0;

        BOOL res = STATS::LEADERBOARDS_CACHE_DATA_ROW(&p0);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p0);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_STATS_LEADERBOARDS_CLEAR_CACHE_DATA(WrenVM* vm)
    {

        STATS::LEADERBOARDS_CLEAR_CACHE_DATA();
    }

    static void WREN_STATS_LEADERBOARDS_CLEAR_CACHE_DATA_ID(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        STATS::LEADERBOARDS_CLEAR_CACHE_DATA_ID(p0);
    }

    static void WREN_STATS_LEADERBOARDS_GET_CACHE_EXISTS(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        BOOL res = STATS::LEADERBOARDS_GET_CACHE_EXISTS(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_STATS_LEADERBOARDS_GET_CACHE_TIME(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        Any res = STATS::LEADERBOARDS_GET_CACHE_TIME(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_STATS_LEADERBOARDS_GET_CACHE_NUMBER_OF_ROWS(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        int res = STATS::LEADERBOARDS_GET_CACHE_NUMBER_OF_ROWS(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_STATS_LEADERBOARDS_GET_CACHE_DATA_ROW(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2;

        BOOL res = STATS::LEADERBOARDS_GET_CACHE_DATA_ROW(p0, p1, &p2);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p2);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_STATS_PRESENCE_EVENT_UPDATESTAT_INT(WrenVM* vm)
    {
        Hash statHash = (Hash)wrenGetSlotDouble(vm, 1);
        int value = (int)wrenGetSlotDouble(vm, 2);
        int p2 = (int)wrenGetSlotDouble(vm, 3);

        STATS::PRESENCE_EVENT_UPDATESTAT_INT(statHash, value, p2);
    }

    static void WREN_STATS_PRESENCE_EVENT_UPDATESTAT_FLOAT(WrenVM* vm)
    {
        Hash statHash = (Hash)wrenGetSlotDouble(vm, 1);
        float value = (float)wrenGetSlotDouble(vm, 2);
        int p2 = (int)wrenGetSlotDouble(vm, 3);

        STATS::PRESENCE_EVENT_UPDATESTAT_FLOAT(statHash, value, p2);
    }

    static void WREN_STATS_PRESENCE_EVENT_UPDATESTAT_INT_WITH_STRING(WrenVM* vm)
    {
        Hash statHash = (Hash)wrenGetSlotDouble(vm, 1);
        int value = (int)wrenGetSlotDouble(vm, 2);
        int p2 = (int)wrenGetSlotDouble(vm, 3);
        const char* string = wrenGetSlotString(vm, 4);

        STATS::PRESENCE_EVENT_UPDATESTAT_INT_WITH_STRING(statHash, value, p2, string);
    }

    static void WREN_STATS_GET_PLAYER_HAS_DRIVEN_ALL_VEHICLES(WrenVM* vm)
    {

        BOOL res = STATS::GET_PLAYER_HAS_DRIVEN_ALL_VEHICLES();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_STATS_SET_HAS_POSTED_ALL_VEHICLES_DRIVEN(WrenVM* vm)
    {

        STATS::SET_HAS_POSTED_ALL_VEHICLES_DRIVEN();
    }

    static void WREN_STATS_SET_PROFILE_SETTING_PROLOGUE_COMPLETE(WrenVM* vm)
    {

        STATS::SET_PROFILE_SETTING_PROLOGUE_COMPLETE();
    }

    static void WREN_STATS_SET_PROFILE_SETTING_SP_CHOP_MISSION_COMPLETE(WrenVM* vm)
    {

        STATS::SET_PROFILE_SETTING_SP_CHOP_MISSION_COMPLETE();
    }

    static void WREN_STATS_SET_PROFILE_SETTING_CREATOR_RACES_DONE(WrenVM* vm)
    {
        int value = (int)wrenGetSlotDouble(vm, 1);

        STATS::SET_PROFILE_SETTING_CREATOR_RACES_DONE(value);
    }

    static void WREN_STATS_SET_PROFILE_SETTING_CREATOR_DM_DONE(WrenVM* vm)
    {
        int value = (int)wrenGetSlotDouble(vm, 1);

        STATS::SET_PROFILE_SETTING_CREATOR_DM_DONE(value);
    }

    static void WREN_STATS_SET_PROFILE_SETTING_CREATOR_CTF_DONE(WrenVM* vm)
    {
        int value = (int)wrenGetSlotDouble(vm, 1);

        STATS::SET_PROFILE_SETTING_CREATOR_CTF_DONE(value);
    }

    static void WREN_STATS_SET_JOB_ACTIVITY_ID_STARTED(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        STATS::SET_JOB_ACTIVITY_ID_STARTED(p0, p1);
    }

    static void WREN_STATS_SET_FREEMODE_PROLOGUE_DONE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        STATS::SET_FREEMODE_PROLOGUE_DONE(p0, p1);
    }

    static void WREN_STATS_SET_FREEMODE_STRAND_PROGRESSION_STATUS(WrenVM* vm)
    {
        int profileSetting = (int)wrenGetSlotDouble(vm, 1);
        int settingValue = (int)wrenGetSlotDouble(vm, 2);

        STATS::SET_FREEMODE_STRAND_PROGRESSION_STATUS(profileSetting, settingValue);
    }

    static void WREN_STATS_STAT_NETWORK_INCREMENT_ON_SUICIDE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);

        STATS::STAT_NETWORK_INCREMENT_ON_SUICIDE(p0, p1);
    }

    static void WREN_STATS_STAT_SET_CHEAT_IS_ACTIVE(WrenVM* vm)
    {

        STATS::STAT_SET_CHEAT_IS_ACTIVE();
    }

    static void WREN_STATS_LEADERBOARDS2_WRITE_DATA_FOR_EVENT_TYPE(WrenVM* vm)
    {
        Any p0;
        Any p1;

        BOOL res = STATS::LEADERBOARDS2_WRITE_DATA_FOR_EVENT_TYPE(&p0, &p1);

        wrenEnsureSlots(vm, 6);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p0);
        wrenInsertInList(vm, 0, 1, 2);

        wrenSetSlotDouble(vm, 3, p1);
        wrenInsertInList(vm, 0, 2, 3);

    }

    static void WREN_STATS_FORCE_CLOUD_MP_STATS_DOWNLOAD_AND_OVERWRITE_LOCAL_SAVE(WrenVM* vm)
    {

        STATS::FORCE_CLOUD_MP_STATS_DOWNLOAD_AND_OVERWRITE_LOCAL_SAVE();
    }

    static void WREN_STATS_STAT_MIGRATE_CLEAR_FOR_RESTART(WrenVM* vm)
    {

        STATS::STAT_MIGRATE_CLEAR_FOR_RESTART();
    }

    static void WREN_STATS_STAT_MIGRATE_SAVEGAME_START(WrenVM* vm)
    {
        const char* platformName = wrenGetSlotString(vm, 1);

        BOOL res = STATS::STAT_MIGRATE_SAVEGAME_START(platformName);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_STATS_STAT_MIGRATE_SAVEGAME_GET_STATUS(WrenVM* vm)
    {

        int res = STATS::STAT_MIGRATE_SAVEGAME_GET_STATUS();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_STATS_STAT_MIGRATE_CHECK_ALREADY_DONE(WrenVM* vm)
    {

        Any res = STATS::STAT_MIGRATE_CHECK_ALREADY_DONE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_STATS_STAT_MIGRATE_CHECK_START(WrenVM* vm)
    {

        Any res = STATS::STAT_MIGRATE_CHECK_START();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_STATS_STAT_MIGRATE_CHECK_GET_IS_PLATFORM_AVAILABLE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        Any res = STATS::STAT_MIGRATE_CHECK_GET_IS_PLATFORM_AVAILABLE(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_STATS_STAT_MIGRATE_CHECK_GET_PLATFORM_STATUS(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1;

        Any res = STATS::STAT_MIGRATE_CHECK_GET_PLATFORM_STATUS(p0, &p1);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p1);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_STATS_STAT_GET_SAVE_MIGRATION_STATUS(WrenVM* vm)
    {
        Any data;

        int res = STATS::STAT_GET_SAVE_MIGRATION_STATUS(&data);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, data);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_STATS_STAT_SAVE_MIGRATION_CANCEL_PENDING_OPERATION(WrenVM* vm)
    {

        BOOL res = STATS::STAT_SAVE_MIGRATION_CANCEL_PENDING_OPERATION();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_STATS_STAT_GET_CANCEL_SAVE_MIGRATION_STATUS(WrenVM* vm)
    {

        int res = STATS::STAT_GET_CANCEL_SAVE_MIGRATION_STATUS();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_STATS_STAT_SAVE_MIGRATION_CONSUME_CONTENT(WrenVM* vm)
    {
        Hash contentId = (Hash)wrenGetSlotDouble(vm, 1);
        const char* srcPlatform = wrenGetSlotString(vm, 2);
        const char* srcGamerHandle = wrenGetSlotString(vm, 3);

        BOOL res = STATS::STAT_SAVE_MIGRATION_CONSUME_CONTENT(contentId, srcPlatform, srcGamerHandle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_STATS_STAT_GET_SAVE_MIGRATION_CONSUME_CONTENT_STATUS(WrenVM* vm)
    {
        int p0;

        int res = STATS::STAT_GET_SAVE_MIGRATION_CONSUME_CONTENT_STATUS(&p0);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p0);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_STATS_STAT_ENABLE_STATS_TRACKING(WrenVM* vm)
    {

        STATS::STAT_ENABLE_STATS_TRACKING();
    }

    static void WREN_STATS_STAT_DISABLE_STATS_TRACKING(WrenVM* vm)
    {

        STATS::STAT_DISABLE_STATS_TRACKING();
    }

    static void WREN_STATS_STAT_IS_STATS_TRACKING_ENABLED(WrenVM* vm)
    {

        BOOL res = STATS::STAT_IS_STATS_TRACKING_ENABLED();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_STATS_STAT_START_RECORD_STAT(WrenVM* vm)
    {
        int statType = (int)wrenGetSlotDouble(vm, 1);
        int valueType = (int)wrenGetSlotDouble(vm, 2);

        Any res = STATS::STAT_START_RECORD_STAT(statType, valueType);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_STATS_STAT_STOP_RECORD_STAT(WrenVM* vm)
    {

        BOOL res = STATS::STAT_STOP_RECORD_STAT();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_STATS_STAT_GET_RECORDED_VALUE(WrenVM* vm)
    {
        float value;

        BOOL res = STATS::STAT_GET_RECORDED_VALUE(&value);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, value);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_STATS_STAT_IS_RECORDING_STAT(WrenVM* vm)
    {

        BOOL res = STATS::STAT_IS_RECORDING_STAT();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_STATS_STAT_GET_CURRENT_NEAR_MISS_NOCRASH_PRECISE(WrenVM* vm)
    {

        int res = STATS::STAT_GET_CURRENT_NEAR_MISS_NOCRASH_PRECISE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_STATS_STAT_GET_CURRENT_REAR_WHEEL_DISTANCE(WrenVM* vm)
    {

        float res = STATS::STAT_GET_CURRENT_REAR_WHEEL_DISTANCE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_STATS_STAT_GET_CURRENT_FRONT_WHEEL_DISTANCE(WrenVM* vm)
    {

        float res = STATS::STAT_GET_CURRENT_FRONT_WHEEL_DISTANCE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_STATS_STAT_GET_CURRENT_JUMP_DISTANCE(WrenVM* vm)
    {

        float res = STATS::STAT_GET_CURRENT_JUMP_DISTANCE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_STATS_STAT_GET_CURRENT_DRIVE_NOCRASH_DISTANCE(WrenVM* vm)
    {

        float res = STATS::STAT_GET_CURRENT_DRIVE_NOCRASH_DISTANCE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_STATS_STAT_GET_CURRENT_SPEED(WrenVM* vm)
    {

        float res = STATS::STAT_GET_CURRENT_SPEED();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_STATS_STAT_GET_CURRENT_DRIVING_REVERSE_DISTANCE(WrenVM* vm)
    {

        float res = STATS::STAT_GET_CURRENT_DRIVING_REVERSE_DISTANCE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_STATS_STAT_GET_CURRENT_SKYDIVING_DISTANCE(WrenVM* vm)
    {

        float res = STATS::STAT_GET_CURRENT_SKYDIVING_DISTANCE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_STATS_STAT_GET_CHALLENGE_FLYING_DIST(WrenVM* vm)
    {

        float res = STATS::STAT_GET_CHALLENGE_FLYING_DIST();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_STATS_STAT_GET_FLYING_ALTITUDE(WrenVM* vm)
    {
        float p0;

        BOOL res = STATS::STAT_GET_FLYING_ALTITUDE(&p0);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, p0);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_STATS_STAT_IS_PLAYER_VEHICLE_ABOVE_OCEAN(WrenVM* vm)
    {

        BOOL res = STATS::STAT_IS_PLAYER_VEHICLE_ABOVE_OCEAN();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_STATS_STAT_GET_VEHICLE_BAIL_DISTANCE(WrenVM* vm)
    {

        float res = STATS::STAT_GET_VEHICLE_BAIL_DISTANCE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_STATS_STAT_ROLLBACK_SAVE_MIGRATION(WrenVM* vm)
    {

        BOOL res = STATS::STAT_ROLLBACK_SAVE_MIGRATION();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_STATS_SET_HAS_SPECIALEDITION_CONTENT(WrenVM* vm)
    {
        int value = (int)wrenGetSlotDouble(vm, 1);

        STATS::SET_HAS_SPECIALEDITION_CONTENT(value);
    }

    static void WREN_STATS_SET_SAVE_MIGRATION_TRANSACTION_ID_WARNING(WrenVM* vm)
    {
        int transactionId = (int)wrenGetSlotDouble(vm, 1);

        STATS::SET_SAVE_MIGRATION_TRANSACTION_ID_WARNING(transactionId);
    }

    static void WREN_STATS_GET_BOSS_GOON_UUID(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);

        STATS::GET_BOSS_GOON_UUID(p0, p1, p2);
    }

    static void WREN_STATS_PLAYSTATS_BW_BOSSONBOSSDEATHMATCH(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        STATS::PLAYSTATS_BW_BOSSONBOSSDEATHMATCH(p0);
    }

    static void WREN_STATS_PLAYSTATS_BW_YATCHATTACK(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        STATS::PLAYSTATS_BW_YATCHATTACK(p0);
    }

    static void WREN_STATS_PLAYSTATS_BW_HUNT_THE_BOSS(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        STATS::PLAYSTATS_BW_HUNT_THE_BOSS(p0);
    }

    static void WREN_STATS_PLAYSTATS_BW_SIGHTSEER(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        STATS::PLAYSTATS_BW_SIGHTSEER(p0);
    }

    static void WREN_STATS_PLAYSTATS_BW_ASSAULT(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        STATS::PLAYSTATS_BW_ASSAULT(p0);
    }

    static void WREN_STATS_PLAYSTATS_BW_BELLY_OF_THE_BEAST(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        STATS::PLAYSTATS_BW_BELLY_OF_THE_BEAST(p0);
    }

    static void WREN_STATS_PLAYSTATS_BW_HEAD_HUNTER(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        STATS::PLAYSTATS_BW_HEAD_HUNTER(p0);
    }

    static void WREN_STATS_PLAYSTATS_BW_FRAGILE_GOODS(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        STATS::PLAYSTATS_BW_FRAGILE_GOODS(p0);
    }

    static void WREN_STATS_PLAYSTATS_BW_AIR_FREIGHT(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        STATS::PLAYSTATS_BW_AIR_FREIGHT(p0);
    }

    static void WREN_STATS_PLAYSTATS_BC_CAR_JACKING(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        STATS::PLAYSTATS_BC_CAR_JACKING(p0);
    }

    static void WREN_STATS_PLAYSTATS_BC_SMASH_AND_GRAB(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        STATS::PLAYSTATS_BC_SMASH_AND_GRAB(p0);
    }

    static void WREN_STATS_PLAYSTATS_BC_PROTECTION_RACKET(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        STATS::PLAYSTATS_BC_PROTECTION_RACKET(p0);
    }

    static void WREN_STATS_PLAYSTATS_BC_MOST_WANTED(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        STATS::PLAYSTATS_BC_MOST_WANTED(p0);
    }

    static void WREN_STATS_PLAYSTATS_BC_FINDERS_KEEPERS(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        STATS::PLAYSTATS_BC_FINDERS_KEEPERS(p0);
    }

    static void WREN_STATS_PLAYSTATS_BC_POINT_TO_POINT(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        STATS::PLAYSTATS_BC_POINT_TO_POINT(p0);
    }

    static void WREN_STATS_PLAYSTATS_BC_CASHING(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        STATS::PLAYSTATS_BC_CASHING(p0);
    }

    static void WREN_STATS_PLAYSTATS_BC_SALVAGE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        STATS::PLAYSTATS_BC_SALVAGE(p0);
    }

    static void WREN_STATS_PLAYSTATS_SPENT_PI_CUSTOM_LOADOUT(WrenVM* vm)
    {
        int amount = (int)wrenGetSlotDouble(vm, 1);

        STATS::PLAYSTATS_SPENT_PI_CUSTOM_LOADOUT(amount);
    }

    static void WREN_STATS_PLAYSTATS_BUY_CONTRABAND_MISSION(WrenVM* vm)
    {
        Any data;

        STATS::PLAYSTATS_BUY_CONTRABAND_MISSION(&data);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_STATS_PLAYSTATS_SELL_CONTRABAND_MISSION(WrenVM* vm)
    {
        Any data;

        STATS::PLAYSTATS_SELL_CONTRABAND_MISSION(&data);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_STATS_PLAYSTATS_DEFEND_CONTRABAND_MISSION(WrenVM* vm)
    {
        Any data;

        STATS::PLAYSTATS_DEFEND_CONTRABAND_MISSION(&data);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_STATS_PLAYSTATS_RECOVER_CONTRABAND_MISSION(WrenVM* vm)
    {
        Any data;

        STATS::PLAYSTATS_RECOVER_CONTRABAND_MISSION(&data);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_STATS_PLAYSTATS_HIT_CONTRABAND_DESTROY_LIMIT(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        STATS::PLAYSTATS_HIT_CONTRABAND_DESTROY_LIMIT(p0);
    }

    static void WREN_STATS_START_BEING_BOSS(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        STATS::START_BEING_BOSS(p0);
    }

    static void WREN_STATS_START_BEING_GOON(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);

        STATS::START_BEING_GOON(p0, p1, p2);
    }

    static void WREN_STATS_END_BEING_BOSS(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        STATS::END_BEING_BOSS(p0, p1);
    }

    static void WREN_STATS_END_BEING_GOON(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);

        STATS::END_BEING_GOON(p0, p1, p2, p3, p4);
    }

    static void WREN_STATS_HIRED_LIMO(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        STATS::HIRED_LIMO(p0, p1);
    }

    static void WREN_STATS_ORDER_BOSS_VEHICLE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Hash vehicleHash = (Hash)wrenGetSlotDouble(vm, 3);

        STATS::ORDER_BOSS_VEHICLE(p0, p1, vehicleHash);
    }

    static void WREN_STATS_CHANGE_UNIFORM(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);

        STATS::CHANGE_UNIFORM(p0, p1, p2);
    }

    static void WREN_STATS_CHANGE_GOON_LOOKING_FOR_WORK(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        STATS::CHANGE_GOON_LOOKING_FOR_WORK(p0);
    }

    static void WREN_STATS_SEND_METRIC_GHOSTING_TO_PLAYER(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        STATS::SEND_METRIC_GHOSTING_TO_PLAYER(p0);
    }

    static void WREN_STATS_SEND_METRIC_VIP_POACH(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);

        STATS::SEND_METRIC_VIP_POACH(p0, p1, p2);
    }

    static void WREN_STATS_SEND_METRIC_PUNISH_BODYGUARD(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        STATS::SEND_METRIC_PUNISH_BODYGUARD(p0);
    }

    static void WREN_STATS_PLAYSTATS_START_TRACKING_STUNTS(WrenVM* vm)
    {

        STATS::PLAYSTATS_START_TRACKING_STUNTS();
    }

    static void WREN_STATS_PLAYSTATS_STOP_TRACKING_STUNTS(WrenVM* vm)
    {

        STATS::PLAYSTATS_STOP_TRACKING_STUNTS();
    }

    static void WREN_STATS_PLAYSTATS_MISSION_ENDED(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        STATS::PLAYSTATS_MISSION_ENDED(p0);
    }

    static void WREN_STATS_PLAYSTATS_IMPEXP_MISSION_ENDED(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        STATS::PLAYSTATS_IMPEXP_MISSION_ENDED(p0);
    }

    static void WREN_STATS_PLAYSTATS_CHANGE_MC_ROLE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);
        Any p5 = (Any)wrenGetSlotDouble(vm, 6);
        Any p6 = (Any)wrenGetSlotDouble(vm, 7);

        STATS::PLAYSTATS_CHANGE_MC_ROLE(p0, p1, p2, p3, p4, p5, p6);
    }

    static void WREN_STATS_PLAYSTATS_CHANGE_MC_OUTFIT(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);

        STATS::PLAYSTATS_CHANGE_MC_OUTFIT(p0, p1, p2, p3, p4);
    }

    static void WREN_STATS_PLAYSTATS_SWITCH_MC_EMBLEM(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);

        STATS::PLAYSTATS_SWITCH_MC_EMBLEM(p0, p1, p2, p3, p4);
    }

    static void WREN_STATS_PLAYSTATS_MC_REQUEST_BIKE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);

        STATS::PLAYSTATS_MC_REQUEST_BIKE(p0, p1, p2, p3, p4);
    }

    static void WREN_STATS_PLAYSTATS_MC_KILLED_RIVAL_MC_MEMBER(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);

        STATS::PLAYSTATS_MC_KILLED_RIVAL_MC_MEMBER(p0, p1, p2, p3, p4);
    }

    static void WREN_STATS_PLAYSTATS_ABANDONED_MC(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);

        STATS::PLAYSTATS_ABANDONED_MC(p0, p1, p2, p3, p4);
    }

    static void WREN_STATS_PLAYSTATS_EARNED_MC_POINTS(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);
        Any p5 = (Any)wrenGetSlotDouble(vm, 6);

        STATS::PLAYSTATS_EARNED_MC_POINTS(p0, p1, p2, p3, p4, p5);
    }

    static void WREN_STATS_PLAYSTATS_MC_FORMATION_ENDS(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);
        Any p5 = (Any)wrenGetSlotDouble(vm, 6);
        Any p6 = (Any)wrenGetSlotDouble(vm, 7);

        STATS::PLAYSTATS_MC_FORMATION_ENDS(p0, p1, p2, p3, p4, p5, p6);
    }

    static void WREN_STATS_PLAYSTATS_MC_CLUBHOUSE_ACTIVITY(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);
        Any p5 = (Any)wrenGetSlotDouble(vm, 6);
        Any p6 = (Any)wrenGetSlotDouble(vm, 7);

        STATS::PLAYSTATS_MC_CLUBHOUSE_ACTIVITY(p0, p1, p2, p3, p4, p5, p6);
    }

    static void WREN_STATS_PLAYSTATS_RIVAL_BEHAVIOR(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);
        Any p5 = (Any)wrenGetSlotDouble(vm, 6);
        Any p6 = (Any)wrenGetSlotDouble(vm, 7);
        Any p7 = (Any)wrenGetSlotDouble(vm, 8);
        Any p8 = (Any)wrenGetSlotDouble(vm, 9);
        Any p9 = (Any)wrenGetSlotDouble(vm, 10);

        STATS::PLAYSTATS_RIVAL_BEHAVIOR(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
    }

    static void WREN_STATS_PLAYSTATS_COPY_RANK_INTO_NEW_SLOT(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);
        Any p5 = (Any)wrenGetSlotDouble(vm, 6);
        Any p6 = (Any)wrenGetSlotDouble(vm, 7);

        STATS::PLAYSTATS_COPY_RANK_INTO_NEW_SLOT(p0, p1, p2, p3, p4, p5, p6);
    }

    static void WREN_STATS_PLAYSTATS_DUPE_DETECTED(WrenVM* vm)
    {
        Any data;

        STATS::PLAYSTATS_DUPE_DETECTED(&data);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_STATS_PLAYSTATS_BAN_ALERT(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);

        STATS::PLAYSTATS_BAN_ALERT(p0);
    }

    static void WREN_STATS_PLAYSTATS_GUNRUNNING_MISSION_ENDED(WrenVM* vm)
    {
        Any data;

        STATS::PLAYSTATS_GUNRUNNING_MISSION_ENDED(&data);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_STATS_PLAYSTATS_GUNRUNNING_RND(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        STATS::PLAYSTATS_GUNRUNNING_RND(p0);
    }

    static void WREN_STATS_PLAYSTATS_BUSINESS_BATTLE_ENDED(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        STATS::PLAYSTATS_BUSINESS_BATTLE_ENDED(p0);
    }

    static void WREN_STATS_PLAYSTATS_WAREHOUSE_MISSION_ENDED(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        STATS::PLAYSTATS_WAREHOUSE_MISSION_ENDED(p0);
    }

    static void WREN_STATS_PLAYSTATS_NIGHTCLUB_MISSION_ENDED(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        STATS::PLAYSTATS_NIGHTCLUB_MISSION_ENDED(p0);
    }

    static void WREN_STATS_PLAYSTATS_DJ_USAGE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        STATS::PLAYSTATS_DJ_USAGE(p0, p1);
    }

    static void WREN_STATS_PLAYSTATS_MINIGAME_USAGE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);

        STATS::PLAYSTATS_MINIGAME_USAGE(p0, p1, p2);
    }

    static void WREN_STATS_PLAYSTATS_STONE_HATCHET_ENDED(WrenVM* vm)
    {
        Any data;

        STATS::PLAYSTATS_STONE_HATCHET_ENDED(&data);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_STATS_PLAYSTATS_SMUGGLER_MISSION_ENDED(WrenVM* vm)
    {
        Any data;

        STATS::PLAYSTATS_SMUGGLER_MISSION_ENDED(&data);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_STATS_PLAYSTATS_FM_HEIST_PREP_ENDED(WrenVM* vm)
    {
        Any data;

        STATS::PLAYSTATS_FM_HEIST_PREP_ENDED(&data);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_STATS_PLAYSTATS_INSTANCED_HEIST_ENDED(WrenVM* vm)
    {
        Any data;
        Any p1 = (Any)wrenGetSlotDouble(vm, 1);
        Any p2 = (Any)wrenGetSlotDouble(vm, 2);
        Any p3 = (Any)wrenGetSlotDouble(vm, 3);

        STATS::PLAYSTATS_INSTANCED_HEIST_ENDED(&data, p1, p2, p3);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_STATS_PLAYSTATS_DAR_CHECKPOINT(WrenVM* vm)
    {
        Any data;

        STATS::PLAYSTATS_DAR_CHECKPOINT(&data);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_STATS_PLAYSTATS_ENTER_SESSION_PACK(WrenVM* vm)
    {
        Any data;

        STATS::PLAYSTATS_ENTER_SESSION_PACK(&data);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_STATS_PLAYSTATS_DRONE_USAGE(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);
        int p2 = (int)wrenGetSlotDouble(vm, 3);

        STATS::PLAYSTATS_DRONE_USAGE(p0, p1, p2);
    }

    static void WREN_STATS_PLAYSTATS_SPIN_WHEEL(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);
        int p2 = (int)wrenGetSlotDouble(vm, 3);
        int p3 = (int)wrenGetSlotDouble(vm, 4);

        STATS::PLAYSTATS_SPIN_WHEEL(p0, p1, p2, p3);
    }

    static void WREN_STATS_PLAYSTATS_ARENA_WARS_SPECTATOR(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);
        int p2 = (int)wrenGetSlotDouble(vm, 3);
        int p3 = (int)wrenGetSlotDouble(vm, 4);
        int p4 = (int)wrenGetSlotDouble(vm, 5);

        STATS::PLAYSTATS_ARENA_WARS_SPECTATOR(p0, p1, p2, p3, p4);
    }

    static void WREN_STATS_PLAYSTATS_ARENA_WARS_ENDED(WrenVM* vm)
    {
        Any data;

        STATS::PLAYSTATS_ARENA_WARS_ENDED(&data);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_STATS_PLAYSTATS_SWITCH_PASSIVE_MODE(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);
        int p2 = (int)wrenGetSlotDouble(vm, 3);
        int p3 = (int)wrenGetSlotDouble(vm, 4);

        STATS::PLAYSTATS_SWITCH_PASSIVE_MODE(p0, p1, p2, p3);
    }

    static void WREN_STATS_PLAYSTATS_COLLECTIBLE_PICKED_UP(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);
        Any p5 = (Any)wrenGetSlotDouble(vm, 6);
        Any p6 = (Any)wrenGetSlotDouble(vm, 7);
        Any p7 = (Any)wrenGetSlotDouble(vm, 8);
        Any p8 = (Any)wrenGetSlotDouble(vm, 9);
        Any p9 = (Any)wrenGetSlotDouble(vm, 10);
        Any p10 = (Any)wrenGetSlotDouble(vm, 11);

        STATS::PLAYSTATS_COLLECTIBLE_PICKED_UP(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
    }

    static void WREN_STATS_PLAYSTATS_CASINO_STORY_MISSION_ENDED(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        STATS::PLAYSTATS_CASINO_STORY_MISSION_ENDED(p0, p1);
    }

    static void WREN_STATS_PLAYSTATS_CASINO_CHIP(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        STATS::PLAYSTATS_CASINO_CHIP(p0);
    }

    static void WREN_STATS_PLAYSTATS_CASINO_ROULETTE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        STATS::PLAYSTATS_CASINO_ROULETTE(p0);
    }

    static void WREN_STATS_PLAYSTATS_CASINO_BLACKJACK(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        STATS::PLAYSTATS_CASINO_BLACKJACK(p0);
    }

    static void WREN_STATS_PLAYSTATS_CASINO_THREE_CARD_POKER(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        STATS::PLAYSTATS_CASINO_THREE_CARD_POKER(p0);
    }

    static void WREN_STATS_PLAYSTATS_CASINO_SLOT_MACHINE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        STATS::PLAYSTATS_CASINO_SLOT_MACHINE(p0);
    }

    static void WREN_STATS_PLAYSTATS_CASINO_INSIDE_TRACK(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        STATS::PLAYSTATS_CASINO_INSIDE_TRACK(p0);
    }

    static void WREN_STATS_PLAYSTATS_CASINO_LUCKY_SEVEN(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        STATS::PLAYSTATS_CASINO_LUCKY_SEVEN(p0);
    }

    static void WREN_STATS_PLAYSTATS_CASINO_ROULETTE_LIGHT(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        STATS::PLAYSTATS_CASINO_ROULETTE_LIGHT(p0);
    }

    static void WREN_STATS_PLAYSTATS_CASINO_BLACKJACK_LIGHT(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        STATS::PLAYSTATS_CASINO_BLACKJACK_LIGHT(p0);
    }

    static void WREN_STATS_PLAYSTATS_CASINO_THREE_CARD_POKER_LIGHT(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        STATS::PLAYSTATS_CASINO_THREE_CARD_POKER_LIGHT(p0);
    }

    static void WREN_STATS_PLAYSTATS_CASINO_SLOT_MACHINE_LIGHT(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        STATS::PLAYSTATS_CASINO_SLOT_MACHINE_LIGHT(p0);
    }

    static void WREN_STATS_PLAYSTATS_CASINO_INSIDE_TRACK_LIGHT(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        STATS::PLAYSTATS_CASINO_INSIDE_TRACK_LIGHT(p0);
    }

    static void WREN_STATS_PLAYSTATS_ARCADE_GAME(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);
        Any p5 = (Any)wrenGetSlotDouble(vm, 6);
        Any p6 = (Any)wrenGetSlotDouble(vm, 7);

        STATS::PLAYSTATS_ARCADE_GAME(p0, p1, p2, p3, p4, p5, p6);
    }

    static void WREN_STATS_PLAYSTATS_ARCADE_LOVE_MATCH(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        STATS::PLAYSTATS_ARCADE_LOVE_MATCH(p0, p1);
    }

    static void WREN_STATS_PLAYSTATS_FREEMODE_CASINO_MISSION_ENDED(WrenVM* vm)
    {
        Any data;

        STATS::PLAYSTATS_FREEMODE_CASINO_MISSION_ENDED(&data);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_STATS_PLAYSTATS_HEIST3_DRONE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        STATS::PLAYSTATS_HEIST3_DRONE(p0);
    }

    static void WREN_STATS_PLAYSTATS_HEIST3_HACK(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);
        Any p5 = (Any)wrenGetSlotDouble(vm, 6);

        STATS::PLAYSTATS_HEIST3_HACK(p0, p1, p2, p3, p4, p5);
    }

    static void WREN_STATS_PLAYSTATS_NPC_PHONE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);
        Any p5 = (Any)wrenGetSlotDouble(vm, 6);

        STATS::PLAYSTATS_NPC_PHONE(p0, p1, p2, p3, p4, p5);
    }

    static void WREN_STATS_PLAYSTATS_ARCADE_CABINET(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        STATS::PLAYSTATS_ARCADE_CABINET(p0);
    }

    static void WREN_STATS_PLAYSTATS_HEIST3_FINALE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        STATS::PLAYSTATS_HEIST3_FINALE(p0);
    }

    static void WREN_STATS_PLAYSTATS_HEIST3_PREP(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        STATS::PLAYSTATS_HEIST3_PREP(p0);
    }

    static void WREN_STATS_PLAYSTATS_MASTER_CONTROL(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        STATS::PLAYSTATS_MASTER_CONTROL(p0, p1, p2, p3);
    }

    static void WREN_STATS_PLAYSTATS_QUIT_MODE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);

        STATS::PLAYSTATS_QUIT_MODE(p0, p1, p2, p3, p4);
    }

    static void WREN_STATS_PLAYSTATS_MISSION_VOTE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        STATS::PLAYSTATS_MISSION_VOTE(p0);
    }

    static void WREN_STATS_PLAYSTATS_NJVS_VOTE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        STATS::PLAYSTATS_NJVS_VOTE(p0);
    }

    static void WREN_STATS_PLAYSTATS_KILL_YOURSELF(WrenVM* vm)
    {

        STATS::PLAYSTATS_KILL_YOURSELF();
    }

    static void WREN_STATS_PLAYSTATS_FM_MISSION_END(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);

        STATS::PLAYSTATS_FM_MISSION_END(p0, p1, p2);
    }

    static void WREN_STATS_PLAYSTATS_HEIST4_PREP(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        STATS::PLAYSTATS_HEIST4_PREP(p0);
    }

    static void WREN_STATS_PLAYSTATS_HEIST4_FINALE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        STATS::PLAYSTATS_HEIST4_FINALE(p0);
    }

    static void WREN_STATS_PLAYSTATS_HEIST4_HACK(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);

        STATS::PLAYSTATS_HEIST4_HACK(p0, p1, p2, p3, p4);
    }

    static void WREN_STATS_PLAYSTATS_SUB_WEAP(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        STATS::PLAYSTATS_SUB_WEAP(p0, p1, p2, p3);
    }

    static void WREN_STATS_PLAYSTATS_FAST_TRVL(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);
        Any p5 = (Any)wrenGetSlotDouble(vm, 6);
        Any p6 = (Any)wrenGetSlotDouble(vm, 7);
        Any p7 = (Any)wrenGetSlotDouble(vm, 8);
        Any p8 = (Any)wrenGetSlotDouble(vm, 9);

        STATS::PLAYSTATS_FAST_TRVL(p0, p1, p2, p3, p4, p5, p6, p7, p8);
    }

    static void WREN_STATS_PLAYSTATS_HUB_ENTRY(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        STATS::PLAYSTATS_HUB_ENTRY(p0);
    }

    static void WREN_STATS_PLAYSTATS_DJ_MISSION_ENDED(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        STATS::PLAYSTATS_DJ_MISSION_ENDED(p0);
    }

    static void WREN_STATS_PLAYSTATS_ROBBERY_PREP(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        STATS::PLAYSTATS_ROBBERY_PREP(p0);
    }

    static void WREN_STATS_PLAYSTATS_ROBBERY_FINALE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        STATS::PLAYSTATS_ROBBERY_FINALE(p0);
    }

    static void WREN_STATS_PLAYSTATS_EXTRA_EVENT(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        STATS::PLAYSTATS_EXTRA_EVENT(p0);
    }

    static void WREN_STATS_PLAYSTATS_CARCLUB_POINTS(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        STATS::PLAYSTATS_CARCLUB_POINTS(p0);
    }

    static void WREN_STATS_PLAYSTATS_CARCLUB_CHALLENGE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        STATS::PLAYSTATS_CARCLUB_CHALLENGE(p0, p1, p2, p3);
    }

    static void WREN_STATS_PLAYSTATS_CARCLUB_PRIZE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        STATS::PLAYSTATS_CARCLUB_PRIZE(p0, p1);
    }

    static void WREN_STATS_PLAYSTATS_AWARD_NAV(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        STATS::PLAYSTATS_AWARD_NAV(p0, p1);
    }

    static void WREN_STATS_PLAYSTATS_INST_MISSION_END(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        STATS::PLAYSTATS_INST_MISSION_END(p0);
    }

    static void WREN_STATS_PLAYSTATS_HUB_EXIT(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        STATS::PLAYSTATS_HUB_EXIT(p0);
    }

    static void WREN_STATS_PLAYSTATS_INVENTORY(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        STATS::PLAYSTATS_INVENTORY(p0);
    }


    static void WREN_STREAMING_LOAD_ALL_OBJECTS_NOW(WrenVM* vm)
    {

        STREAMING::LOAD_ALL_OBJECTS_NOW();
    }

    static void WREN_STREAMING_LOAD_SCENE(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);

        STREAMING::LOAD_SCENE(x, y, z);
    }

    static void WREN_STREAMING_NETWORK_UPDATE_LOAD_SCENE(WrenVM* vm)
    {

        BOOL res = STREAMING::NETWORK_UPDATE_LOAD_SCENE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_STREAMING_IS_NETWORK_LOADING_SCENE(WrenVM* vm)
    {

        BOOL res = STREAMING::IS_NETWORK_LOADING_SCENE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_STREAMING_SET_INTERIOR_ACTIVE(WrenVM* vm)
    {
        int interiorID = (int)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        STREAMING::SET_INTERIOR_ACTIVE(interiorID, toggle);
    }

    static void WREN_STREAMING_REQUEST_MODEL(WrenVM* vm)
    {
        Hash model = (Hash)wrenGetSlotDouble(vm, 1);

        STREAMING::REQUEST_MODEL(model);
    }

    static void WREN_STREAMING_REQUEST_MENU_PED_MODEL(WrenVM* vm)
    {
        Hash model = (Hash)wrenGetSlotDouble(vm, 1);

        STREAMING::REQUEST_MENU_PED_MODEL(model);
    }

    static void WREN_STREAMING_HAS_MODEL_LOADED(WrenVM* vm)
    {
        Hash model = (Hash)wrenGetSlotDouble(vm, 1);

        BOOL res = STREAMING::HAS_MODEL_LOADED(model);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_STREAMING_REQUEST_MODELS_IN_ROOM(WrenVM* vm)
    {
        Interior interior = (Interior)wrenGetSlotDouble(vm, 1);
        const char* roomName = wrenGetSlotString(vm, 2);

        STREAMING::REQUEST_MODELS_IN_ROOM(interior, roomName);
    }

    static void WREN_STREAMING_SET_MODEL_AS_NO_LONGER_NEEDED(WrenVM* vm)
    {
        Hash model = (Hash)wrenGetSlotDouble(vm, 1);

        STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(model);
    }

    static void WREN_STREAMING_IS_MODEL_IN_CDIMAGE(WrenVM* vm)
    {
        Hash model = (Hash)wrenGetSlotDouble(vm, 1);

        BOOL res = STREAMING::IS_MODEL_IN_CDIMAGE(model);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_STREAMING_IS_MODEL_VALID(WrenVM* vm)
    {
        Hash model = (Hash)wrenGetSlotDouble(vm, 1);

        BOOL res = STREAMING::IS_MODEL_VALID(model);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_STREAMING_IS_MODEL_A_PED(WrenVM* vm)
    {
        Hash model = (Hash)wrenGetSlotDouble(vm, 1);

        BOOL res = STREAMING::IS_MODEL_A_PED(model);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_STREAMING_IS_MODEL_A_VEHICLE(WrenVM* vm)
    {
        Hash model = (Hash)wrenGetSlotDouble(vm, 1);

        BOOL res = STREAMING::IS_MODEL_A_VEHICLE(model);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_STREAMING_REQUEST_COLLISION_AT_COORD(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);

        STREAMING::REQUEST_COLLISION_AT_COORD(x, y, z);
    }

    static void WREN_STREAMING_REQUEST_COLLISION_FOR_MODEL(WrenVM* vm)
    {
        Hash model = (Hash)wrenGetSlotDouble(vm, 1);

        STREAMING::REQUEST_COLLISION_FOR_MODEL(model);
    }

    static void WREN_STREAMING_HAS_COLLISION_FOR_MODEL_LOADED(WrenVM* vm)
    {
        Hash model = (Hash)wrenGetSlotDouble(vm, 1);

        BOOL res = STREAMING::HAS_COLLISION_FOR_MODEL_LOADED(model);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_STREAMING_REQUEST_ADDITIONAL_COLLISION_AT_COORD(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);

        STREAMING::REQUEST_ADDITIONAL_COLLISION_AT_COORD(x, y, z);
    }

    static void WREN_STREAMING_DOES_ANIM_DICT_EXIST(WrenVM* vm)
    {
        const char* animDict = wrenGetSlotString(vm, 1);

        BOOL res = STREAMING::DOES_ANIM_DICT_EXIST(animDict);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_STREAMING_REQUEST_ANIM_DICT(WrenVM* vm)
    {
        const char* animDict = wrenGetSlotString(vm, 1);

        STREAMING::REQUEST_ANIM_DICT(animDict);
    }

    static void WREN_STREAMING_HAS_ANIM_DICT_LOADED(WrenVM* vm)
    {
        const char* animDict = wrenGetSlotString(vm, 1);

        BOOL res = STREAMING::HAS_ANIM_DICT_LOADED(animDict);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_STREAMING_REMOVE_ANIM_DICT(WrenVM* vm)
    {
        const char* animDict = wrenGetSlotString(vm, 1);

        STREAMING::REMOVE_ANIM_DICT(animDict);
    }

    static void WREN_STREAMING_REQUEST_ANIM_SET(WrenVM* vm)
    {
        const char* animSet = wrenGetSlotString(vm, 1);

        STREAMING::REQUEST_ANIM_SET(animSet);
    }

    static void WREN_STREAMING_HAS_ANIM_SET_LOADED(WrenVM* vm)
    {
        const char* animSet = wrenGetSlotString(vm, 1);

        BOOL res = STREAMING::HAS_ANIM_SET_LOADED(animSet);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_STREAMING_REMOVE_ANIM_SET(WrenVM* vm)
    {
        const char* animSet = wrenGetSlotString(vm, 1);

        STREAMING::REMOVE_ANIM_SET(animSet);
    }

    static void WREN_STREAMING_REQUEST_CLIP_SET(WrenVM* vm)
    {
        const char* clipSet = wrenGetSlotString(vm, 1);

        STREAMING::REQUEST_CLIP_SET(clipSet);
    }

    static void WREN_STREAMING_HAS_CLIP_SET_LOADED(WrenVM* vm)
    {
        const char* clipSet = wrenGetSlotString(vm, 1);

        BOOL res = STREAMING::HAS_CLIP_SET_LOADED(clipSet);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_STREAMING_REMOVE_CLIP_SET(WrenVM* vm)
    {
        const char* clipSet = wrenGetSlotString(vm, 1);

        STREAMING::REMOVE_CLIP_SET(clipSet);
    }

    static void WREN_STREAMING_REQUEST_IPL(WrenVM* vm)
    {
        const char* iplName = wrenGetSlotString(vm, 1);

        STREAMING::REQUEST_IPL(iplName);
    }

    static void WREN_STREAMING_REMOVE_IPL(WrenVM* vm)
    {
        const char* iplName = wrenGetSlotString(vm, 1);

        STREAMING::REMOVE_IPL(iplName);
    }

    static void WREN_STREAMING_IS_IPL_ACTIVE(WrenVM* vm)
    {
        const char* iplName = wrenGetSlotString(vm, 1);

        BOOL res = STREAMING::IS_IPL_ACTIVE(iplName);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_STREAMING_SET_STREAMING(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        STREAMING::SET_STREAMING(toggle);
    }

    static void WREN_STREAMING_LOAD_GLOBAL_WATER_FILE(WrenVM* vm)
    {
        int waterType = (int)wrenGetSlotDouble(vm, 1);

        STREAMING::LOAD_GLOBAL_WATER_FILE(waterType);
    }

    static void WREN_STREAMING_GET_GLOBAL_WATER_FILE(WrenVM* vm)
    {

        int res = STREAMING::GET_GLOBAL_WATER_FILE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_STREAMING_SET_GAME_PAUSES_FOR_STREAMING(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        STREAMING::SET_GAME_PAUSES_FOR_STREAMING(toggle);
    }

    static void WREN_STREAMING_SET_REDUCE_PED_MODEL_BUDGET(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        STREAMING::SET_REDUCE_PED_MODEL_BUDGET(toggle);
    }

    static void WREN_STREAMING_SET_REDUCE_VEHICLE_MODEL_BUDGET(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        STREAMING::SET_REDUCE_VEHICLE_MODEL_BUDGET(toggle);
    }

    static void WREN_STREAMING_SET_DITCH_POLICE_MODELS(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        STREAMING::SET_DITCH_POLICE_MODELS(toggle);
    }

    static void WREN_STREAMING_GET_NUMBER_OF_STREAMING_REQUESTS(WrenVM* vm)
    {

        int res = STREAMING::GET_NUMBER_OF_STREAMING_REQUESTS();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_STREAMING_REQUEST_PTFX_ASSET(WrenVM* vm)
    {

        STREAMING::REQUEST_PTFX_ASSET();
    }

    static void WREN_STREAMING_HAS_PTFX_ASSET_LOADED(WrenVM* vm)
    {

        BOOL res = STREAMING::HAS_PTFX_ASSET_LOADED();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_STREAMING_REMOVE_PTFX_ASSET(WrenVM* vm)
    {

        STREAMING::REMOVE_PTFX_ASSET();
    }

    static void WREN_STREAMING_REQUEST_NAMED_PTFX_ASSET(WrenVM* vm)
    {
        const char* fxName = wrenGetSlotString(vm, 1);

        STREAMING::REQUEST_NAMED_PTFX_ASSET(fxName);
    }

    static void WREN_STREAMING_HAS_NAMED_PTFX_ASSET_LOADED(WrenVM* vm)
    {
        const char* fxName = wrenGetSlotString(vm, 1);

        BOOL res = STREAMING::HAS_NAMED_PTFX_ASSET_LOADED(fxName);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_STREAMING_REMOVE_NAMED_PTFX_ASSET(WrenVM* vm)
    {
        const char* fxName = wrenGetSlotString(vm, 1);

        STREAMING::REMOVE_NAMED_PTFX_ASSET(fxName);
    }

    static void WREN_STREAMING_SET_VEHICLE_POPULATION_BUDGET(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);

        STREAMING::SET_VEHICLE_POPULATION_BUDGET(p0);
    }

    static void WREN_STREAMING_SET_PED_POPULATION_BUDGET(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);

        STREAMING::SET_PED_POPULATION_BUDGET(p0);
    }

    static void WREN_STREAMING_CLEAR_FOCUS(WrenVM* vm)
    {

        STREAMING::CLEAR_FOCUS();
    }

    static void WREN_STREAMING_SET_FOCUS_POS_AND_VEL(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        float offsetX = (float)wrenGetSlotDouble(vm, 4);
        float offsetY = (float)wrenGetSlotDouble(vm, 5);
        float offsetZ = (float)wrenGetSlotDouble(vm, 6);

        STREAMING::SET_FOCUS_POS_AND_VEL(x, y, z, offsetX, offsetY, offsetZ);
    }

    static void WREN_STREAMING_SET_FOCUS_ENTITY(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        STREAMING::SET_FOCUS_ENTITY(entity);
    }

    static void WREN_STREAMING_IS_ENTITY_FOCUS(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        BOOL res = STREAMING::IS_ENTITY_FOCUS(entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_STREAMING_SET_RESTORE_FOCUS_ENTITY(WrenVM* vm)
    {
        Entity p0 = (Entity)wrenGetSlotDouble(vm, 1);

        STREAMING::SET_RESTORE_FOCUS_ENTITY(p0);
    }

    static void WREN_STREAMING_SET_MAPDATACULLBOX_ENABLED(WrenVM* vm)
    {
        const char* name = wrenGetSlotString(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        STREAMING::SET_MAPDATACULLBOX_ENABLED(name, toggle);
    }

    static void WREN_STREAMING_SET_ALL_MAPDATA_CULLED(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        STREAMING::SET_ALL_MAPDATA_CULLED(p0);
    }

    static void WREN_STREAMING_STREAMVOL_CREATE_SPHERE(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        float rad = (float)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);
        Any p5 = (Any)wrenGetSlotDouble(vm, 6);

        Any res = STREAMING::STREAMVOL_CREATE_SPHERE(x, y, z, rad, p4, p5);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_STREAMING_STREAMVOL_CREATE_FRUSTUM(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);
        float p2 = (float)wrenGetSlotDouble(vm, 3);
        float p3 = (float)wrenGetSlotDouble(vm, 4);
        float p4 = (float)wrenGetSlotDouble(vm, 5);
        float p5 = (float)wrenGetSlotDouble(vm, 6);
        float p6 = (float)wrenGetSlotDouble(vm, 7);
        Any p7 = (Any)wrenGetSlotDouble(vm, 8);
        Any p8 = (Any)wrenGetSlotDouble(vm, 9);

        Any res = STREAMING::STREAMVOL_CREATE_FRUSTUM(p0, p1, p2, p3, p4, p5, p6, p7, p8);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_STREAMING_STREAMVOL_CREATE_LINE(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);
        float p2 = (float)wrenGetSlotDouble(vm, 3);
        float p3 = (float)wrenGetSlotDouble(vm, 4);
        float p4 = (float)wrenGetSlotDouble(vm, 5);
        float p5 = (float)wrenGetSlotDouble(vm, 6);
        Any p6 = (Any)wrenGetSlotDouble(vm, 7);

        Any res = STREAMING::STREAMVOL_CREATE_LINE(p0, p1, p2, p3, p4, p5, p6);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_STREAMING_STREAMVOL_DELETE(WrenVM* vm)
    {
        Any unused = (Any)wrenGetSlotDouble(vm, 1);

        STREAMING::STREAMVOL_DELETE(unused);
    }

    static void WREN_STREAMING_STREAMVOL_HAS_LOADED(WrenVM* vm)
    {
        Any unused = (Any)wrenGetSlotDouble(vm, 1);

        BOOL res = STREAMING::STREAMVOL_HAS_LOADED(unused);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_STREAMING_STREAMVOL_IS_VALID(WrenVM* vm)
    {
        Any unused = (Any)wrenGetSlotDouble(vm, 1);

        BOOL res = STREAMING::STREAMVOL_IS_VALID(unused);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_STREAMING_IS_STREAMVOL_ACTIVE(WrenVM* vm)
    {

        BOOL res = STREAMING::IS_STREAMVOL_ACTIVE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_STREAMING_NEW_LOAD_SCENE_START(WrenVM* vm)
    {
        float posX = (float)wrenGetSlotDouble(vm, 1);
        float posY = (float)wrenGetSlotDouble(vm, 2);
        float posZ = (float)wrenGetSlotDouble(vm, 3);
        float offsetX = (float)wrenGetSlotDouble(vm, 4);
        float offsetY = (float)wrenGetSlotDouble(vm, 5);
        float offsetZ = (float)wrenGetSlotDouble(vm, 6);
        float radius = (float)wrenGetSlotDouble(vm, 7);
        int p7 = (int)wrenGetSlotDouble(vm, 8);

        BOOL res = STREAMING::NEW_LOAD_SCENE_START(posX, posY, posZ, offsetX, offsetY, offsetZ, radius, p7);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_STREAMING_NEW_LOAD_SCENE_START_SPHERE(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        float radius = (float)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);

        BOOL res = STREAMING::NEW_LOAD_SCENE_START_SPHERE(x, y, z, radius, p4);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_STREAMING_NEW_LOAD_SCENE_STOP(WrenVM* vm)
    {

        STREAMING::NEW_LOAD_SCENE_STOP();
    }

    static void WREN_STREAMING_IS_NEW_LOAD_SCENE_ACTIVE(WrenVM* vm)
    {

        BOOL res = STREAMING::IS_NEW_LOAD_SCENE_ACTIVE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_STREAMING_IS_NEW_LOAD_SCENE_LOADED(WrenVM* vm)
    {

        BOOL res = STREAMING::IS_NEW_LOAD_SCENE_LOADED();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_STREAMING_IS_SAFE_TO_START_PLAYER_SWITCH(WrenVM* vm)
    {

        Any res = STREAMING::IS_SAFE_TO_START_PLAYER_SWITCH();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_STREAMING_START_PLAYER_SWITCH(WrenVM* vm)
    {
        Ped from = (Ped)wrenGetSlotDouble(vm, 1);
        Ped to = (Ped)wrenGetSlotDouble(vm, 2);
        int flags = (int)wrenGetSlotDouble(vm, 3);
        int switchType = (int)wrenGetSlotDouble(vm, 4);

        STREAMING::START_PLAYER_SWITCH(from, to, flags, switchType);
    }

    static void WREN_STREAMING_STOP_PLAYER_SWITCH(WrenVM* vm)
    {

        STREAMING::STOP_PLAYER_SWITCH();
    }

    static void WREN_STREAMING_IS_PLAYER_SWITCH_IN_PROGRESS(WrenVM* vm)
    {

        BOOL res = STREAMING::IS_PLAYER_SWITCH_IN_PROGRESS();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_STREAMING_GET_PLAYER_SWITCH_TYPE(WrenVM* vm)
    {

        int res = STREAMING::GET_PLAYER_SWITCH_TYPE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_STREAMING_GET_IDEAL_PLAYER_SWITCH_TYPE(WrenVM* vm)
    {
        float x1 = (float)wrenGetSlotDouble(vm, 1);
        float y1 = (float)wrenGetSlotDouble(vm, 2);
        float z1 = (float)wrenGetSlotDouble(vm, 3);
        float x2 = (float)wrenGetSlotDouble(vm, 4);
        float y2 = (float)wrenGetSlotDouble(vm, 5);
        float z2 = (float)wrenGetSlotDouble(vm, 6);

        int res = STREAMING::GET_IDEAL_PLAYER_SWITCH_TYPE(x1, y1, z1, x2, y2, z2);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_STREAMING_GET_PLAYER_SWITCH_STATE(WrenVM* vm)
    {

        int res = STREAMING::GET_PLAYER_SWITCH_STATE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_STREAMING_GET_PLAYER_SHORT_SWITCH_STATE(WrenVM* vm)
    {

        int res = STREAMING::GET_PLAYER_SHORT_SWITCH_STATE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_STREAMING_SET_PLAYER_SHORT_SWITCH_STYLE(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);

        STREAMING::SET_PLAYER_SHORT_SWITCH_STYLE(p0);
    }

    static void WREN_STREAMING_GET_PLAYER_SWITCH_JUMP_CUT_INDEX(WrenVM* vm)
    {

        int res = STREAMING::GET_PLAYER_SWITCH_JUMP_CUT_INDEX();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_STREAMING_SET_PLAYER_SWITCH_OUTRO(WrenVM* vm)
    {
        float cameraCoordX = (float)wrenGetSlotDouble(vm, 1);
        float cameraCoordY = (float)wrenGetSlotDouble(vm, 2);
        float cameraCoordZ = (float)wrenGetSlotDouble(vm, 3);
        float camRotationX = (float)wrenGetSlotDouble(vm, 4);
        float camRotationY = (float)wrenGetSlotDouble(vm, 5);
        float camRotationZ = (float)wrenGetSlotDouble(vm, 6);
        float camFov = (float)wrenGetSlotDouble(vm, 7);
        float camFarClip = (float)wrenGetSlotDouble(vm, 8);
        int rotationOrder = (int)wrenGetSlotDouble(vm, 9);

        STREAMING::SET_PLAYER_SWITCH_OUTRO(cameraCoordX, cameraCoordY, cameraCoordZ, camRotationX, camRotationY, camRotationZ, camFov, camFarClip, rotationOrder);
    }

    static void WREN_STREAMING_SET_PLAYER_SWITCH_ESTABLISHING_SHOT(WrenVM* vm)
    {
        const char* name = wrenGetSlotString(vm, 1);

        STREAMING::SET_PLAYER_SWITCH_ESTABLISHING_SHOT(name);
    }

    static void WREN_STREAMING_ALLOW_PLAYER_SWITCH_PAN(WrenVM* vm)
    {

        STREAMING::ALLOW_PLAYER_SWITCH_PAN();
    }

    static void WREN_STREAMING_ALLOW_PLAYER_SWITCH_OUTRO(WrenVM* vm)
    {

        STREAMING::ALLOW_PLAYER_SWITCH_OUTRO();
    }

    static void WREN_STREAMING_ALLOW_PLAYER_SWITCH_ASCENT(WrenVM* vm)
    {

        STREAMING::ALLOW_PLAYER_SWITCH_ASCENT();
    }

    static void WREN_STREAMING_ALLOW_PLAYER_SWITCH_DESCENT(WrenVM* vm)
    {

        STREAMING::ALLOW_PLAYER_SWITCH_DESCENT();
    }

    static void WREN_STREAMING_IS_SWITCH_READY_FOR_DESCENT(WrenVM* vm)
    {

        BOOL res = STREAMING::IS_SWITCH_READY_FOR_DESCENT();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_STREAMING_ENABLE_SWITCH_PAUSE_BEFORE_DESCENT(WrenVM* vm)
    {

        STREAMING::ENABLE_SWITCH_PAUSE_BEFORE_DESCENT();
    }

    static void WREN_STREAMING_DISABLE_SWITCH_OUTRO_FX(WrenVM* vm)
    {

        STREAMING::DISABLE_SWITCH_OUTRO_FX();
    }

    static void WREN_STREAMING_SWITCH_TO_MULTI_FIRSTPART(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int flags = (int)wrenGetSlotDouble(vm, 2);
        int switchType = (int)wrenGetSlotDouble(vm, 3);

        STREAMING::SWITCH_TO_MULTI_FIRSTPART(ped, flags, switchType);
    }

    static void WREN_STREAMING_SWITCH_TO_MULTI_SECONDPART(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        STREAMING::SWITCH_TO_MULTI_SECONDPART(ped);
    }

    static void WREN_STREAMING_IS_SWITCH_TO_MULTI_FIRSTPART_FINISHED(WrenVM* vm)
    {

        BOOL res = STREAMING::IS_SWITCH_TO_MULTI_FIRSTPART_FINISHED();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_STREAMING_GET_PLAYER_SWITCH_INTERP_OUT_DURATION(WrenVM* vm)
    {

        int res = STREAMING::GET_PLAYER_SWITCH_INTERP_OUT_DURATION();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_STREAMING_GET_PLAYER_SWITCH_INTERP_OUT_CURRENT_TIME(WrenVM* vm)
    {

        int res = STREAMING::GET_PLAYER_SWITCH_INTERP_OUT_CURRENT_TIME();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_STREAMING_IS_SWITCH_SKIPPING_DESCENT(WrenVM* vm)
    {

        BOOL res = STREAMING::IS_SWITCH_SKIPPING_DESCENT();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_STREAMING_SET_SCENE_STREAMING_TRACKS_CAM_POS_THIS_FRAME(WrenVM* vm)
    {

        STREAMING::SET_SCENE_STREAMING_TRACKS_CAM_POS_THIS_FRAME();
    }

    static void WREN_STREAMING_GET_LODSCALE(WrenVM* vm)
    {

        float res = STREAMING::GET_LODSCALE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_STREAMING_OVERRIDE_LODSCALE_THIS_FRAME(WrenVM* vm)
    {
        float scaling = (float)wrenGetSlotDouble(vm, 1);

        STREAMING::OVERRIDE_LODSCALE_THIS_FRAME(scaling);
    }

    static void WREN_STREAMING_REMAP_LODSCALE_RANGE_THIS_FRAME(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);
        float p2 = (float)wrenGetSlotDouble(vm, 3);
        float p3 = (float)wrenGetSlotDouble(vm, 4);

        STREAMING::REMAP_LODSCALE_RANGE_THIS_FRAME(p0, p1, p2, p3);
    }

    static void WREN_STREAMING_SUPPRESS_HD_MAP_STREAMING_THIS_FRAME(WrenVM* vm)
    {

        STREAMING::SUPPRESS_HD_MAP_STREAMING_THIS_FRAME();
    }

    static void WREN_STREAMING_SET_RENDER_HD_ONLY(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        STREAMING::SET_RENDER_HD_ONLY(toggle);
    }

    static void WREN_STREAMING_FORCE_ALLOW_TIME_BASED_FADING_THIS_FRAME(WrenVM* vm)
    {

        STREAMING::FORCE_ALLOW_TIME_BASED_FADING_THIS_FRAME();
    }

    static void WREN_STREAMING_IPL_GROUP_SWAP_START(WrenVM* vm)
    {
        const char* iplName1 = wrenGetSlotString(vm, 1);
        const char* iplName2 = wrenGetSlotString(vm, 2);

        STREAMING::IPL_GROUP_SWAP_START(iplName1, iplName2);
    }

    static void WREN_STREAMING_IPL_GROUP_SWAP_CANCEL(WrenVM* vm)
    {

        STREAMING::IPL_GROUP_SWAP_CANCEL();
    }

    static void WREN_STREAMING_IPL_GROUP_SWAP_IS_READY(WrenVM* vm)
    {

        BOOL res = STREAMING::IPL_GROUP_SWAP_IS_READY();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_STREAMING_IPL_GROUP_SWAP_FINISH(WrenVM* vm)
    {

        STREAMING::IPL_GROUP_SWAP_FINISH();
    }

    static void WREN_STREAMING_IPL_GROUP_SWAP_IS_ACTIVE(WrenVM* vm)
    {

        Any res = STREAMING::IPL_GROUP_SWAP_IS_ACTIVE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_STREAMING_PREFETCH_SRL(WrenVM* vm)
    {
        const char* srl = wrenGetSlotString(vm, 1);

        STREAMING::PREFETCH_SRL(srl);
    }

    static void WREN_STREAMING_IS_SRL_LOADED(WrenVM* vm)
    {

        BOOL res = STREAMING::IS_SRL_LOADED();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_STREAMING_BEGIN_SRL(WrenVM* vm)
    {

        STREAMING::BEGIN_SRL();
    }

    static void WREN_STREAMING_END_SRL(WrenVM* vm)
    {

        STREAMING::END_SRL();
    }

    static void WREN_STREAMING_SET_SRL_TIME(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);

        STREAMING::SET_SRL_TIME(p0);
    }

    static void WREN_STREAMING_SET_SRL_POST_CUTSCENE_CAMERA(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);
        Any p5 = (Any)wrenGetSlotDouble(vm, 6);

        STREAMING::SET_SRL_POST_CUTSCENE_CAMERA(p0, p1, p2, p3, p4, p5);
    }

    static void WREN_STREAMING_SET_SRL_READAHEAD_TIMES(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        STREAMING::SET_SRL_READAHEAD_TIMES(p0, p1, p2, p3);
    }

    static void WREN_STREAMING_SET_SRL_LONG_JUMP_MODE(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        STREAMING::SET_SRL_LONG_JUMP_MODE(p0);
    }

    static void WREN_STREAMING_SET_SRL_FORCE_PRESTREAM(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        STREAMING::SET_SRL_FORCE_PRESTREAM(p0);
    }

    static void WREN_STREAMING_SET_HD_AREA(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        float radius = (float)wrenGetSlotDouble(vm, 4);

        STREAMING::SET_HD_AREA(x, y, z, radius);
    }

    static void WREN_STREAMING_CLEAR_HD_AREA(WrenVM* vm)
    {

        STREAMING::CLEAR_HD_AREA();
    }

    static void WREN_STREAMING_INIT_CREATOR_BUDGET(WrenVM* vm)
    {

        STREAMING::INIT_CREATOR_BUDGET();
    }

    static void WREN_STREAMING_SHUTDOWN_CREATOR_BUDGET(WrenVM* vm)
    {

        STREAMING::SHUTDOWN_CREATOR_BUDGET();
    }

    static void WREN_STREAMING_ADD_MODEL_TO_CREATOR_BUDGET(WrenVM* vm)
    {
        Hash modelHash = (Hash)wrenGetSlotDouble(vm, 1);

        BOOL res = STREAMING::ADD_MODEL_TO_CREATOR_BUDGET(modelHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_STREAMING_REMOVE_MODEL_FROM_CREATOR_BUDGET(WrenVM* vm)
    {
        Hash modelHash = (Hash)wrenGetSlotDouble(vm, 1);

        STREAMING::REMOVE_MODEL_FROM_CREATOR_BUDGET(modelHash);
    }

    static void WREN_STREAMING_GET_USED_CREATOR_BUDGET(WrenVM* vm)
    {

        float res = STREAMING::GET_USED_CREATOR_BUDGET();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_STREAMING_SET_ISLAND_ENABLED(WrenVM* vm)
    {
        const char* name = wrenGetSlotString(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        STREAMING::SET_ISLAND_ENABLED(name, toggle);
    }


    static void WREN_TASK_TASK_PAUSE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int ms = (int)wrenGetSlotDouble(vm, 2);

        TASK::TASK_PAUSE(ped, ms);
    }

    static void WREN_TASK_TASK_STAND_STILL(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int time = (int)wrenGetSlotDouble(vm, 2);

        TASK::TASK_STAND_STILL(ped, time);
    }

    static void WREN_TASK_TASK_JUMP(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL usePlayerLaunchForce = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL doSuperJump = (BOOL)wrenGetSlotBool(vm, 3);
        BOOL useFullSuperJumpForce = (BOOL)wrenGetSlotBool(vm, 4);

        TASK::TASK_JUMP(ped, usePlayerLaunchForce, doSuperJump, useFullSuperJumpForce);
    }

    static void WREN_TASK_TASK_COWER(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int duration = (int)wrenGetSlotDouble(vm, 2);

        TASK::TASK_COWER(ped, duration);
    }

    static void WREN_TASK_TASK_HANDS_UP(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int duration = (int)wrenGetSlotDouble(vm, 2);
        Ped facingPed = (Ped)wrenGetSlotDouble(vm, 3);
        int timeToFacePed = (int)wrenGetSlotDouble(vm, 4);
        int flags = (int)wrenGetSlotDouble(vm, 5);

        TASK::TASK_HANDS_UP(ped, duration, facingPed, timeToFacePed, flags);
    }

    static void WREN_TASK_UPDATE_TASK_HANDS_UP_DURATION(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int duration = (int)wrenGetSlotDouble(vm, 2);

        TASK::UPDATE_TASK_HANDS_UP_DURATION(ped, duration);
    }

    static void WREN_TASK_TASK_OPEN_VEHICLE_DOOR(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 2);
        int timeOut = (int)wrenGetSlotDouble(vm, 3);
        int seat = (int)wrenGetSlotDouble(vm, 4);
        float speed = (float)wrenGetSlotDouble(vm, 5);

        TASK::TASK_OPEN_VEHICLE_DOOR(ped, vehicle, timeOut, seat, speed);
    }

    static void WREN_TASK_TASK_ENTER_VEHICLE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 2);
        int timeout = (int)wrenGetSlotDouble(vm, 3);
        int seat = (int)wrenGetSlotDouble(vm, 4);
        float speed = (float)wrenGetSlotDouble(vm, 5);
        int flag = (int)wrenGetSlotDouble(vm, 6);
        const char* overrideEntryClipsetName = wrenGetSlotString(vm, 7);

        TASK::TASK_ENTER_VEHICLE(ped, vehicle, timeout, seat, speed, flag, overrideEntryClipsetName);
    }

    static void WREN_TASK_TASK_LEAVE_VEHICLE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 2);
        int flags = (int)wrenGetSlotDouble(vm, 3);

        TASK::TASK_LEAVE_VEHICLE(ped, vehicle, flags);
    }

    static void WREN_TASK_TASK_GET_OFF_BOAT(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Vehicle boat = (Vehicle)wrenGetSlotDouble(vm, 2);

        TASK::TASK_GET_OFF_BOAT(ped, boat);
    }

    static void WREN_TASK_TASK_SKY_DIVE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL instant = (BOOL)wrenGetSlotBool(vm, 2);

        TASK::TASK_SKY_DIVE(ped, instant);
    }

    static void WREN_TASK_TASK_PARACHUTE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL giveParachuteItem = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL instant = (BOOL)wrenGetSlotBool(vm, 3);

        TASK::TASK_PARACHUTE(ped, giveParachuteItem, instant);
    }

    static void WREN_TASK_TASK_PARACHUTE_TO_TARGET(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);

        TASK::TASK_PARACHUTE_TO_TARGET(ped, x, y, z);
    }

    static void WREN_TASK_SET_PARACHUTE_TASK_TARGET(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);

        TASK::SET_PARACHUTE_TASK_TARGET(ped, x, y, z);
    }

    static void WREN_TASK_SET_PARACHUTE_TASK_THRUST(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float thrust = (float)wrenGetSlotDouble(vm, 2);

        TASK::SET_PARACHUTE_TASK_THRUST(ped, thrust);
    }

    static void WREN_TASK_TASK_RAPPEL_FROM_HELI(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float minHeightAboveGround = (float)wrenGetSlotDouble(vm, 2);

        TASK::TASK_RAPPEL_FROM_HELI(ped, minHeightAboveGround);
    }

    static void WREN_TASK_TASK_VEHICLE_DRIVE_TO_COORD(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 2);
        float x = (float)wrenGetSlotDouble(vm, 3);
        float y = (float)wrenGetSlotDouble(vm, 4);
        float z = (float)wrenGetSlotDouble(vm, 5);
        float speed = (float)wrenGetSlotDouble(vm, 6);
        Any p6 = (Any)wrenGetSlotDouble(vm, 7);
        Hash vehicleModel = (Hash)wrenGetSlotDouble(vm, 8);
        int drivingMode = (int)wrenGetSlotDouble(vm, 9);
        float stopRange = (float)wrenGetSlotDouble(vm, 10);
        float straightLineDistance = (float)wrenGetSlotDouble(vm, 11);

        TASK::TASK_VEHICLE_DRIVE_TO_COORD(ped, vehicle, x, y, z, speed, p6, vehicleModel, drivingMode, stopRange, straightLineDistance);
    }

    static void WREN_TASK_TASK_VEHICLE_DRIVE_TO_COORD_LONGRANGE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 2);
        float x = (float)wrenGetSlotDouble(vm, 3);
        float y = (float)wrenGetSlotDouble(vm, 4);
        float z = (float)wrenGetSlotDouble(vm, 5);
        float speed = (float)wrenGetSlotDouble(vm, 6);
        int driveMode = (int)wrenGetSlotDouble(vm, 7);
        float stopRange = (float)wrenGetSlotDouble(vm, 8);

        TASK::TASK_VEHICLE_DRIVE_TO_COORD_LONGRANGE(ped, vehicle, x, y, z, speed, driveMode, stopRange);
    }

    static void WREN_TASK_TASK_VEHICLE_DRIVE_WANDER(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 2);
        float speed = (float)wrenGetSlotDouble(vm, 3);
        int drivingStyle = (int)wrenGetSlotDouble(vm, 4);

        TASK::TASK_VEHICLE_DRIVE_WANDER(ped, vehicle, speed, drivingStyle);
    }

    static void WREN_TASK_TASK_FOLLOW_TO_OFFSET_OF_ENTITY(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Entity entity = (Entity)wrenGetSlotDouble(vm, 2);
        float offsetX = (float)wrenGetSlotDouble(vm, 3);
        float offsetY = (float)wrenGetSlotDouble(vm, 4);
        float offsetZ = (float)wrenGetSlotDouble(vm, 5);
        float movementSpeed = (float)wrenGetSlotDouble(vm, 6);
        int timeout = (int)wrenGetSlotDouble(vm, 7);
        float stoppingRange = (float)wrenGetSlotDouble(vm, 8);
        BOOL persistFollowing = (BOOL)wrenGetSlotBool(vm, 9);

        TASK::TASK_FOLLOW_TO_OFFSET_OF_ENTITY(ped, entity, offsetX, offsetY, offsetZ, movementSpeed, timeout, stoppingRange, persistFollowing);
    }

    static void WREN_TASK_TASK_GO_STRAIGHT_TO_COORD(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);
        float speed = (float)wrenGetSlotDouble(vm, 5);
        int timeout = (int)wrenGetSlotDouble(vm, 6);
        float targetHeading = (float)wrenGetSlotDouble(vm, 7);
        float distanceToSlide = (float)wrenGetSlotDouble(vm, 8);

        TASK::TASK_GO_STRAIGHT_TO_COORD(ped, x, y, z, speed, timeout, targetHeading, distanceToSlide);
    }

    static void WREN_TASK_TASK_GO_STRAIGHT_TO_COORD_RELATIVE_TO_ENTITY(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Entity entity = (Entity)wrenGetSlotDouble(vm, 2);
        float x = (float)wrenGetSlotDouble(vm, 3);
        float y = (float)wrenGetSlotDouble(vm, 4);
        float z = (float)wrenGetSlotDouble(vm, 5);
        float moveBlendRatio = (float)wrenGetSlotDouble(vm, 6);
        int time = (int)wrenGetSlotDouble(vm, 7);

        TASK::TASK_GO_STRAIGHT_TO_COORD_RELATIVE_TO_ENTITY(ped, entity, x, y, z, moveBlendRatio, time);
    }

    static void WREN_TASK_TASK_ACHIEVE_HEADING(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float heading = (float)wrenGetSlotDouble(vm, 2);
        int timeout = (int)wrenGetSlotDouble(vm, 3);

        TASK::TASK_ACHIEVE_HEADING(ped, heading, timeout);
    }

    static void WREN_TASK_TASK_FLUSH_ROUTE(WrenVM* vm)
    {

        TASK::TASK_FLUSH_ROUTE();
    }

    static void WREN_TASK_TASK_EXTEND_ROUTE(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);

        TASK::TASK_EXTEND_ROUTE(x, y, z);
    }

    static void WREN_TASK_TASK_FOLLOW_POINT_ROUTE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float speed = (float)wrenGetSlotDouble(vm, 2);
        int mode = (int)wrenGetSlotDouble(vm, 3);

        TASK::TASK_FOLLOW_POINT_ROUTE(ped, speed, mode);
    }

    static void WREN_TASK_TASK_GO_TO_ENTITY(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        Entity target = (Entity)wrenGetSlotDouble(vm, 2);
        int duration = (int)wrenGetSlotDouble(vm, 3);
        float distance = (float)wrenGetSlotDouble(vm, 4);
        float moveBlendRatio = (float)wrenGetSlotDouble(vm, 5);
        float slowDownDistance = (float)wrenGetSlotDouble(vm, 6);
        int flags = (int)wrenGetSlotDouble(vm, 7);

        TASK::TASK_GO_TO_ENTITY(entity, target, duration, distance, moveBlendRatio, slowDownDistance, flags);
    }

    static void WREN_TASK_TASK_SMART_FLEE_COORD(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);
        float distance = (float)wrenGetSlotDouble(vm, 5);
        int time = (int)wrenGetSlotDouble(vm, 6);
        BOOL perferPavements = (BOOL)wrenGetSlotBool(vm, 7);
        BOOL quitIfOutOfRange = (BOOL)wrenGetSlotBool(vm, 8);

        TASK::TASK_SMART_FLEE_COORD(ped, x, y, z, distance, time, perferPavements, quitIfOutOfRange);
    }

    static void WREN_TASK_TASK_SMART_FLEE_PED(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Ped fleeTarget = (Ped)wrenGetSlotDouble(vm, 2);
        float safeDistance = (float)wrenGetSlotDouble(vm, 3);
        int fleeTime = (int)wrenGetSlotDouble(vm, 4);
        BOOL perferPavements = (BOOL)wrenGetSlotBool(vm, 5);
        BOOL updateToNearestHatedPed = (BOOL)wrenGetSlotBool(vm, 6);

        TASK::TASK_SMART_FLEE_PED(ped, fleeTarget, safeDistance, fleeTime, perferPavements, updateToNearestHatedPed);
    }

    static void WREN_TASK_TASK_REACT_AND_FLEE_PED(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Ped fleeTarget = (Ped)wrenGetSlotDouble(vm, 2);

        TASK::TASK_REACT_AND_FLEE_PED(ped, fleeTarget);
    }

    static void WREN_TASK_TASK_SHOCKING_EVENT_REACT(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int eventHandle = (int)wrenGetSlotDouble(vm, 2);

        TASK::TASK_SHOCKING_EVENT_REACT(ped, eventHandle);
    }

    static void WREN_TASK_TASK_WANDER_IN_AREA(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);
        float radius = (float)wrenGetSlotDouble(vm, 5);
        float minimalLength = (float)wrenGetSlotDouble(vm, 6);
        float timeBetweenWalks = (float)wrenGetSlotDouble(vm, 7);

        TASK::TASK_WANDER_IN_AREA(ped, x, y, z, radius, minimalLength, timeBetweenWalks);
    }

    static void WREN_TASK_TASK_WANDER_STANDARD(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float heading = (float)wrenGetSlotDouble(vm, 2);
        int flags = (int)wrenGetSlotDouble(vm, 3);

        TASK::TASK_WANDER_STANDARD(ped, heading, flags);
    }

    static void WREN_TASK_TASK_WANDER_SPECIFIC(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        const char* conditionalAnimGroupStr = wrenGetSlotString(vm, 2);
        const char* conditionalAnimStr = wrenGetSlotString(vm, 3);
        float heading = (float)wrenGetSlotDouble(vm, 4);

        TASK::TASK_WANDER_SPECIFIC(ped, conditionalAnimGroupStr, conditionalAnimStr, heading);
    }

    static void WREN_TASK_TASK_VEHICLE_PARK(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 2);
        float x = (float)wrenGetSlotDouble(vm, 3);
        float y = (float)wrenGetSlotDouble(vm, 4);
        float z = (float)wrenGetSlotDouble(vm, 5);
        float heading = (float)wrenGetSlotDouble(vm, 6);
        int mode = (int)wrenGetSlotDouble(vm, 7);
        float radius = (float)wrenGetSlotDouble(vm, 8);
        BOOL keepEngineOn = (BOOL)wrenGetSlotBool(vm, 9);

        TASK::TASK_VEHICLE_PARK(ped, vehicle, x, y, z, heading, mode, radius, keepEngineOn);
    }

    static void WREN_TASK_TASK_STEALTH_KILL(WrenVM* vm)
    {
        Ped killer = (Ped)wrenGetSlotDouble(vm, 1);
        Ped target = (Ped)wrenGetSlotDouble(vm, 2);
        Hash stealthKillActionResultHash = (Hash)wrenGetSlotDouble(vm, 3);
        float desiredMoveBlendRatio = (float)wrenGetSlotDouble(vm, 4);
        int stealthFlags = (int)wrenGetSlotDouble(vm, 5);

        TASK::TASK_STEALTH_KILL(killer, target, stealthKillActionResultHash, desiredMoveBlendRatio, stealthFlags);
    }

    static void WREN_TASK_TASK_PLANT_BOMB(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);
        float heading = (float)wrenGetSlotDouble(vm, 5);

        TASK::TASK_PLANT_BOMB(ped, x, y, z, heading);
    }

    static void WREN_TASK_TASK_FOLLOW_NAV_MESH_TO_COORD(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);
        float moveBlendRatio = (float)wrenGetSlotDouble(vm, 5);
        int time = (int)wrenGetSlotDouble(vm, 6);
        float targetRadius = (float)wrenGetSlotDouble(vm, 7);
        int flags = (int)wrenGetSlotDouble(vm, 8);
        float targetHeading = (float)wrenGetSlotDouble(vm, 9);

        TASK::TASK_FOLLOW_NAV_MESH_TO_COORD(ped, x, y, z, moveBlendRatio, time, targetRadius, flags, targetHeading);
    }

    static void WREN_TASK_TASK_FOLLOW_NAV_MESH_TO_COORD_ADVANCED(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);
        float moveBlendRatio = (float)wrenGetSlotDouble(vm, 5);
        int time = (int)wrenGetSlotDouble(vm, 6);
        float targetRadius = (float)wrenGetSlotDouble(vm, 7);
        int flags = (int)wrenGetSlotDouble(vm, 8);
        float slideToCoordHeading = (float)wrenGetSlotDouble(vm, 9);
        float maxSlopeNavigable = (float)wrenGetSlotDouble(vm, 10);
        float clampMaxSearchDistance = (float)wrenGetSlotDouble(vm, 11);
        float targetHeading = (float)wrenGetSlotDouble(vm, 12);

        TASK::TASK_FOLLOW_NAV_MESH_TO_COORD_ADVANCED(ped, x, y, z, moveBlendRatio, time, targetRadius, flags, slideToCoordHeading, maxSlopeNavigable, clampMaxSearchDistance, targetHeading);
    }

    static void WREN_TASK_SET_PED_PATH_CAN_USE_CLIMBOVERS(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL Toggle = (BOOL)wrenGetSlotBool(vm, 2);

        TASK::SET_PED_PATH_CAN_USE_CLIMBOVERS(ped, Toggle);
    }

    static void WREN_TASK_SET_PED_PATH_CAN_USE_LADDERS(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL Toggle = (BOOL)wrenGetSlotBool(vm, 2);

        TASK::SET_PED_PATH_CAN_USE_LADDERS(ped, Toggle);
    }

    static void WREN_TASK_SET_PED_PATH_CAN_DROP_FROM_HEIGHT(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL Toggle = (BOOL)wrenGetSlotBool(vm, 2);

        TASK::SET_PED_PATH_CAN_DROP_FROM_HEIGHT(ped, Toggle);
    }

    static void WREN_TASK_SET_PED_PATH_CLIMB_COST_MODIFIER(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float modifier = (float)wrenGetSlotDouble(vm, 2);

        TASK::SET_PED_PATH_CLIMB_COST_MODIFIER(ped, modifier);
    }

    static void WREN_TASK_SET_PED_PATH_MAY_ENTER_WATER(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL mayEnterWater = (BOOL)wrenGetSlotBool(vm, 2);

        TASK::SET_PED_PATH_MAY_ENTER_WATER(ped, mayEnterWater);
    }

    static void WREN_TASK_SET_PED_PATH_PREFER_TO_AVOID_WATER(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL avoidWater = (BOOL)wrenGetSlotBool(vm, 2);

        TASK::SET_PED_PATH_PREFER_TO_AVOID_WATER(ped, avoidWater);
    }

    static void WREN_TASK_SET_PED_PATH_AVOID_FIRE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL avoidFire = (BOOL)wrenGetSlotBool(vm, 2);

        TASK::SET_PED_PATH_AVOID_FIRE(ped, avoidFire);
    }

    static void WREN_TASK_SET_GLOBAL_MIN_BIRD_FLIGHT_HEIGHT(WrenVM* vm)
    {
        float height = (float)wrenGetSlotDouble(vm, 1);

        TASK::SET_GLOBAL_MIN_BIRD_FLIGHT_HEIGHT(height);
    }

    static void WREN_TASK_GET_NAVMESH_ROUTE_DISTANCE_REMAINING(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float distanceRemaining;
        BOOL isPathReady;

        int res = TASK::GET_NAVMESH_ROUTE_DISTANCE_REMAINING(ped, &distanceRemaining, &isPathReady);

        wrenEnsureSlots(vm, 6);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, distanceRemaining);
        wrenInsertInList(vm, 0, 1, 2);

        wrenSetSlotBool(vm, 3, (bool)isPathReady);
        wrenInsertInList(vm, 0, 2, 3);

    }

    static void WREN_TASK_GET_NAVMESH_ROUTE_RESULT(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        int res = TASK::GET_NAVMESH_ROUTE_RESULT(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_TASK_IS_CONTROLLED_VEHICLE_UNABLE_TO_GET_TO_ROAD(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = TASK::IS_CONTROLLED_VEHICLE_UNABLE_TO_GET_TO_ROAD(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_TASK_TASK_GO_TO_COORD_ANY_MEANS(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);
        float moveBlendRatio = (float)wrenGetSlotDouble(vm, 5);
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 6);
        BOOL useLongRangeVehiclePathing = (BOOL)wrenGetSlotBool(vm, 7);
        int drivingFlags = (int)wrenGetSlotDouble(vm, 8);
        float maxRangeToShootTargets = (float)wrenGetSlotDouble(vm, 9);

        TASK::TASK_GO_TO_COORD_ANY_MEANS(ped, x, y, z, moveBlendRatio, vehicle, useLongRangeVehiclePathing, drivingFlags, maxRangeToShootTargets);
    }

    static void WREN_TASK_TASK_GO_TO_COORD_ANY_MEANS_EXTRA_PARAMS(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);
        float moveBlendRatio = (float)wrenGetSlotDouble(vm, 5);
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 6);
        BOOL useLongRangeVehiclePathing = (BOOL)wrenGetSlotBool(vm, 7);
        int drivingFlags = (int)wrenGetSlotDouble(vm, 8);
        float maxRangeToShootTargets = (float)wrenGetSlotDouble(vm, 9);
        float extraVehToTargetDistToPreferVehicle = (float)wrenGetSlotDouble(vm, 10);
        float driveStraightLineDistance = (float)wrenGetSlotDouble(vm, 11);
        int extraFlags = (int)wrenGetSlotDouble(vm, 12);
        float warpTimerMS = (float)wrenGetSlotDouble(vm, 13);

        TASK::TASK_GO_TO_COORD_ANY_MEANS_EXTRA_PARAMS(ped, x, y, z, moveBlendRatio, vehicle, useLongRangeVehiclePathing, drivingFlags, maxRangeToShootTargets, extraVehToTargetDistToPreferVehicle, driveStraightLineDistance, extraFlags, warpTimerMS);
    }

    static void WREN_TASK_TASK_GO_TO_COORD_ANY_MEANS_EXTRA_PARAMS_WITH_CRUISE_SPEED(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);
        float moveBlendRatio = (float)wrenGetSlotDouble(vm, 5);
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 6);
        BOOL useLongRangeVehiclePathing = (BOOL)wrenGetSlotBool(vm, 7);
        int drivingFlags = (int)wrenGetSlotDouble(vm, 8);
        float maxRangeToShootTargets = (float)wrenGetSlotDouble(vm, 9);
        float extraVehToTargetDistToPreferVehicle = (float)wrenGetSlotDouble(vm, 10);
        float driveStraightLineDistance = (float)wrenGetSlotDouble(vm, 11);
        int extraFlags = (int)wrenGetSlotDouble(vm, 12);
        float cruiseSpeed = (float)wrenGetSlotDouble(vm, 13);
        float targetArriveDist = (float)wrenGetSlotDouble(vm, 14);

        TASK::TASK_GO_TO_COORD_ANY_MEANS_EXTRA_PARAMS_WITH_CRUISE_SPEED(ped, x, y, z, moveBlendRatio, vehicle, useLongRangeVehiclePathing, drivingFlags, maxRangeToShootTargets, extraVehToTargetDistToPreferVehicle, driveStraightLineDistance, extraFlags, cruiseSpeed, targetArriveDist);
    }

    static void WREN_TASK_TASK_PLAY_ANIM(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        const char* animDictionary = wrenGetSlotString(vm, 2);
        const char* animationName = wrenGetSlotString(vm, 3);
        float blendInSpeed = (float)wrenGetSlotDouble(vm, 4);
        float blendOutSpeed = (float)wrenGetSlotDouble(vm, 5);
        int duration = (int)wrenGetSlotDouble(vm, 6);
        int flag = (int)wrenGetSlotDouble(vm, 7);
        float playbackRate = (float)wrenGetSlotDouble(vm, 8);
        BOOL lockX = (BOOL)wrenGetSlotBool(vm, 9);
        BOOL lockY = (BOOL)wrenGetSlotBool(vm, 10);
        BOOL lockZ = (BOOL)wrenGetSlotBool(vm, 11);

        TASK::TASK_PLAY_ANIM(ped, animDictionary, animationName, blendInSpeed, blendOutSpeed, duration, flag, playbackRate, lockX, lockY, lockZ);
    }

    static void WREN_TASK_TASK_PLAY_ANIM_ADVANCED(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        const char* animDict = wrenGetSlotString(vm, 2);
        const char* animName = wrenGetSlotString(vm, 3);
        float posX = (float)wrenGetSlotDouble(vm, 4);
        float posY = (float)wrenGetSlotDouble(vm, 5);
        float posZ = (float)wrenGetSlotDouble(vm, 6);
        float rotX = (float)wrenGetSlotDouble(vm, 7);
        float rotY = (float)wrenGetSlotDouble(vm, 8);
        float rotZ = (float)wrenGetSlotDouble(vm, 9);
        float animEnterSpeed = (float)wrenGetSlotDouble(vm, 10);
        float animExitSpeed = (float)wrenGetSlotDouble(vm, 11);
        int duration = (int)wrenGetSlotDouble(vm, 12);
        Any flag = (Any)wrenGetSlotDouble(vm, 13);
        float animTime = (float)wrenGetSlotDouble(vm, 14);
        int rotOrder = (int)wrenGetSlotDouble(vm, 15);
        int ikFlags = (int)wrenGetSlotDouble(vm, 16);

        TASK::TASK_PLAY_ANIM_ADVANCED(ped, animDict, animName, posX, posY, posZ, rotX, rotY, rotZ, animEnterSpeed, animExitSpeed, duration, flag, animTime, rotOrder, ikFlags);
    }

    static void WREN_TASK_STOP_ANIM_TASK(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        const char* animDictionary = wrenGetSlotString(vm, 2);
        const char* animationName = wrenGetSlotString(vm, 3);
        float blendDelta = (float)wrenGetSlotDouble(vm, 4);

        TASK::STOP_ANIM_TASK(entity, animDictionary, animationName, blendDelta);
    }

    static void WREN_TASK_TASK_SCRIPTED_ANIMATION(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int priorityLowData;
        int priorityMidData;
        int priorityHighData;
        float blendInDelta = (float)wrenGetSlotDouble(vm, 2);
        float blendOutDelta = (float)wrenGetSlotDouble(vm, 3);

        TASK::TASK_SCRIPTED_ANIMATION(ped, &priorityLowData, &priorityMidData, &priorityHighData, blendInDelta, blendOutDelta);

        wrenEnsureSlots(vm, 6);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, priorityLowData);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, priorityMidData);
        wrenInsertInList(vm, 0, 1, 2);

        wrenSetSlotDouble(vm, 3, priorityHighData);
        wrenInsertInList(vm, 0, 2, 3);

    }

    static void WREN_TASK_PLAY_ENTITY_SCRIPTED_ANIM(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        int priorityLowData;
        int priorityMidData;
        int priorityHighData;
        float blendInDelta = (float)wrenGetSlotDouble(vm, 2);
        float blendOutDelta = (float)wrenGetSlotDouble(vm, 3);

        TASK::PLAY_ENTITY_SCRIPTED_ANIM(entity, &priorityLowData, &priorityMidData, &priorityHighData, blendInDelta, blendOutDelta);

        wrenEnsureSlots(vm, 6);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, priorityLowData);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, priorityMidData);
        wrenInsertInList(vm, 0, 1, 2);

        wrenSetSlotDouble(vm, 3, priorityHighData);
        wrenInsertInList(vm, 0, 2, 3);

    }

    static void WREN_TASK_STOP_ANIM_PLAYBACK(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        int priority = (int)wrenGetSlotDouble(vm, 2);
        BOOL secondary = (BOOL)wrenGetSlotBool(vm, 3);

        TASK::STOP_ANIM_PLAYBACK(entity, priority, secondary);
    }

    static void WREN_TASK_SET_ANIM_WEIGHT(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        float weight = (float)wrenGetSlotDouble(vm, 2);
        int priority = (int)wrenGetSlotDouble(vm, 3);
        int index = (int)wrenGetSlotDouble(vm, 4);
        BOOL secondary = (BOOL)wrenGetSlotBool(vm, 5);

        TASK::SET_ANIM_WEIGHT(entity, weight, priority, index, secondary);
    }

    static void WREN_TASK_SET_ANIM_PHASE(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        float phase = (float)wrenGetSlotDouble(vm, 2);
        int priority = (int)wrenGetSlotDouble(vm, 3);
        BOOL secondary = (BOOL)wrenGetSlotBool(vm, 4);

        TASK::SET_ANIM_PHASE(entity, phase, priority, secondary);
    }

    static void WREN_TASK_SET_ANIM_RATE(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        float rate = (float)wrenGetSlotDouble(vm, 2);
        int priority = (int)wrenGetSlotDouble(vm, 3);
        BOOL secondary = (BOOL)wrenGetSlotBool(vm, 4);

        TASK::SET_ANIM_RATE(entity, rate, priority, secondary);
    }

    static void WREN_TASK_SET_ANIM_LOOPED(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        BOOL looped = (BOOL)wrenGetSlotBool(vm, 2);
        int priority = (int)wrenGetSlotDouble(vm, 3);
        BOOL secondary = (BOOL)wrenGetSlotBool(vm, 4);

        TASK::SET_ANIM_LOOPED(entity, looped, priority, secondary);
    }

    static void WREN_TASK_TASK_PLAY_PHONE_GESTURE_ANIMATION(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        const char* animDict = wrenGetSlotString(vm, 2);
        const char* animation = wrenGetSlotString(vm, 3);
        const char* boneMaskType = wrenGetSlotString(vm, 4);
        float blendInDuration = (float)wrenGetSlotDouble(vm, 5);
        float blendOutDuration = (float)wrenGetSlotDouble(vm, 6);
        BOOL isLooping = (BOOL)wrenGetSlotBool(vm, 7);
        BOOL holdLastFrame = (BOOL)wrenGetSlotBool(vm, 8);

        TASK::TASK_PLAY_PHONE_GESTURE_ANIMATION(ped, animDict, animation, boneMaskType, blendInDuration, blendOutDuration, isLooping, holdLastFrame);
    }

    static void WREN_TASK_TASK_STOP_PHONE_GESTURE_ANIMATION(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float blendOutOverride = (float)wrenGetSlotDouble(vm, 2);

        TASK::TASK_STOP_PHONE_GESTURE_ANIMATION(ped, blendOutOverride);
    }

    static void WREN_TASK_IS_PLAYING_PHONE_GESTURE_ANIM(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = TASK::IS_PLAYING_PHONE_GESTURE_ANIM(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_TASK_GET_PHONE_GESTURE_ANIM_CURRENT_TIME(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        float res = TASK::GET_PHONE_GESTURE_ANIM_CURRENT_TIME(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_TASK_GET_PHONE_GESTURE_ANIM_TOTAL_TIME(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        float res = TASK::GET_PHONE_GESTURE_ANIM_TOTAL_TIME(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_TASK_TASK_VEHICLE_PLAY_ANIM(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        const char* animationSet = wrenGetSlotString(vm, 2);
        const char* animationName = wrenGetSlotString(vm, 3);

        TASK::TASK_VEHICLE_PLAY_ANIM(vehicle, animationSet, animationName);
    }

    static void WREN_TASK_TASK_LOOK_AT_COORD(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);
        int duration = (int)wrenGetSlotDouble(vm, 5);
        int flags = (int)wrenGetSlotDouble(vm, 6);
        int priority = (int)wrenGetSlotDouble(vm, 7);

        TASK::TASK_LOOK_AT_COORD(entity, x, y, z, duration, flags, priority);
    }

    static void WREN_TASK_TASK_LOOK_AT_ENTITY(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Entity lookAt = (Entity)wrenGetSlotDouble(vm, 2);
        int duration = (int)wrenGetSlotDouble(vm, 3);
        int flags = (int)wrenGetSlotDouble(vm, 4);
        int priority = (int)wrenGetSlotDouble(vm, 5);

        TASK::TASK_LOOK_AT_ENTITY(ped, lookAt, duration, flags, priority);
    }

    static void WREN_TASK_TASK_CLEAR_LOOK_AT(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        TASK::TASK_CLEAR_LOOK_AT(ped);
    }

    static void WREN_TASK_OPEN_SEQUENCE_TASK(WrenVM* vm)
    {
        int taskSequenceId;

        TASK::OPEN_SEQUENCE_TASK(&taskSequenceId);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_TASK_CLOSE_SEQUENCE_TASK(WrenVM* vm)
    {
        int taskSequenceId = (int)wrenGetSlotDouble(vm, 1);

        TASK::CLOSE_SEQUENCE_TASK(taskSequenceId);
    }

    static void WREN_TASK_TASK_PERFORM_SEQUENCE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int taskSequenceId = (int)wrenGetSlotDouble(vm, 2);

        TASK::TASK_PERFORM_SEQUENCE(ped, taskSequenceId);
    }

    static void WREN_TASK_TASK_PERFORM_SEQUENCE_LOCALLY(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int taskSequenceId = (int)wrenGetSlotDouble(vm, 2);

        TASK::TASK_PERFORM_SEQUENCE_LOCALLY(ped, taskSequenceId);
    }

    static void WREN_TASK_CLEAR_SEQUENCE_TASK(WrenVM* vm)
    {
        int taskSequenceId;

        TASK::CLEAR_SEQUENCE_TASK(&taskSequenceId);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_TASK_SET_SEQUENCE_TO_REPEAT(WrenVM* vm)
    {
        int taskSequenceId = (int)wrenGetSlotDouble(vm, 1);
        BOOL repeat = (BOOL)wrenGetSlotBool(vm, 2);

        TASK::SET_SEQUENCE_TO_REPEAT(taskSequenceId, repeat);
    }

    static void WREN_TASK_GET_SEQUENCE_PROGRESS(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        int res = TASK::GET_SEQUENCE_PROGRESS(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_TASK_GET_IS_TASK_ACTIVE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int taskIndex = (int)wrenGetSlotDouble(vm, 2);

        BOOL res = TASK::GET_IS_TASK_ACTIVE(ped, taskIndex);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_TASK_GET_SCRIPT_TASK_STATUS(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Hash taskHash = (Hash)wrenGetSlotDouble(vm, 2);

        int res = TASK::GET_SCRIPT_TASK_STATUS(ped, taskHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_TASK_GET_ACTIVE_VEHICLE_MISSION_TYPE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        int res = TASK::GET_ACTIVE_VEHICLE_MISSION_TYPE(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_TASK_TASK_LEAVE_ANY_VEHICLE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int delayTime = (int)wrenGetSlotDouble(vm, 2);
        int flags = (int)wrenGetSlotDouble(vm, 3);

        TASK::TASK_LEAVE_ANY_VEHICLE(ped, delayTime, flags);
    }

    static void WREN_TASK_TASK_AIM_GUN_SCRIPTED(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Hash scriptTask = (Hash)wrenGetSlotDouble(vm, 2);
        BOOL disableBlockingClip = (BOOL)wrenGetSlotBool(vm, 3);
        BOOL instantBlendToAim = (BOOL)wrenGetSlotBool(vm, 4);

        TASK::TASK_AIM_GUN_SCRIPTED(ped, scriptTask, disableBlockingClip, instantBlendToAim);
    }

    static void WREN_TASK_TASK_AIM_GUN_SCRIPTED_WITH_TARGET(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Ped target = (Ped)wrenGetSlotDouble(vm, 2);
        float x = (float)wrenGetSlotDouble(vm, 3);
        float y = (float)wrenGetSlotDouble(vm, 4);
        float z = (float)wrenGetSlotDouble(vm, 5);
        int gunTaskType = (int)wrenGetSlotDouble(vm, 6);
        BOOL disableBlockingClip = (BOOL)wrenGetSlotBool(vm, 7);
        BOOL forceAim = (BOOL)wrenGetSlotBool(vm, 8);

        TASK::TASK_AIM_GUN_SCRIPTED_WITH_TARGET(ped, target, x, y, z, gunTaskType, disableBlockingClip, forceAim);
    }

    static void WREN_TASK_UPDATE_TASK_AIM_GUN_SCRIPTED_TARGET(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Ped target = (Ped)wrenGetSlotDouble(vm, 2);
        float x = (float)wrenGetSlotDouble(vm, 3);
        float y = (float)wrenGetSlotDouble(vm, 4);
        float z = (float)wrenGetSlotDouble(vm, 5);
        BOOL disableBlockingClip = (BOOL)wrenGetSlotBool(vm, 6);

        TASK::UPDATE_TASK_AIM_GUN_SCRIPTED_TARGET(ped, target, x, y, z, disableBlockingClip);
    }

    static void WREN_TASK_GET_CLIP_SET_FOR_SCRIPTED_GUN_TASK(WrenVM* vm)
    {
        int gunTaskType = (int)wrenGetSlotDouble(vm, 1);

        const char* res = TASK::GET_CLIP_SET_FOR_SCRIPTED_GUN_TASK(gunTaskType);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotString(vm, 0, res);
    }

    static void WREN_TASK_TASK_AIM_GUN_AT_ENTITY(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Entity entity = (Entity)wrenGetSlotDouble(vm, 2);
        int duration = (int)wrenGetSlotDouble(vm, 3);
        BOOL instantBlendToAim = (BOOL)wrenGetSlotBool(vm, 4);

        TASK::TASK_AIM_GUN_AT_ENTITY(ped, entity, duration, instantBlendToAim);
    }

    static void WREN_TASK_TASK_TURN_PED_TO_FACE_ENTITY(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Entity entity = (Entity)wrenGetSlotDouble(vm, 2);
        int duration = (int)wrenGetSlotDouble(vm, 3);

        TASK::TASK_TURN_PED_TO_FACE_ENTITY(ped, entity, duration);
    }

    static void WREN_TASK_TASK_AIM_GUN_AT_COORD(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);
        int time = (int)wrenGetSlotDouble(vm, 5);
        BOOL instantBlendToAim = (BOOL)wrenGetSlotBool(vm, 6);
        BOOL playAnimIntro = (BOOL)wrenGetSlotBool(vm, 7);

        TASK::TASK_AIM_GUN_AT_COORD(ped, x, y, z, time, instantBlendToAim, playAnimIntro);
    }

    static void WREN_TASK_TASK_SHOOT_AT_COORD(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);
        int duration = (int)wrenGetSlotDouble(vm, 5);
        Hash firingPattern = (Hash)wrenGetSlotDouble(vm, 6);

        TASK::TASK_SHOOT_AT_COORD(ped, x, y, z, duration, firingPattern);
    }

    static void WREN_TASK_TASK_SHUFFLE_TO_NEXT_VEHICLE_SEAT(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 2);
        BOOL useAlternateShuffle = (BOOL)wrenGetSlotBool(vm, 3);

        TASK::TASK_SHUFFLE_TO_NEXT_VEHICLE_SEAT(ped, vehicle, useAlternateShuffle);
    }

    static void WREN_TASK_CLEAR_PED_TASKS(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        TASK::CLEAR_PED_TASKS(ped);
    }

    static void WREN_TASK_CLEAR_PED_SECONDARY_TASK(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        TASK::CLEAR_PED_SECONDARY_TASK(ped);
    }

    static void WREN_TASK_TASK_EVERYONE_LEAVE_VEHICLE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        TASK::TASK_EVERYONE_LEAVE_VEHICLE(vehicle);
    }

    static void WREN_TASK_TASK_GOTO_ENTITY_OFFSET(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Entity entity = (Entity)wrenGetSlotDouble(vm, 2);
        int time = (int)wrenGetSlotDouble(vm, 3);
        float seekRadius = (float)wrenGetSlotDouble(vm, 4);
        float seekAngleDeg = (float)wrenGetSlotDouble(vm, 5);
        float moveBlendRatio = (float)wrenGetSlotDouble(vm, 6);
        int gotoEntityOffsetFlags = (int)wrenGetSlotDouble(vm, 7);

        TASK::TASK_GOTO_ENTITY_OFFSET(ped, entity, time, seekRadius, seekAngleDeg, moveBlendRatio, gotoEntityOffsetFlags);
    }

    static void WREN_TASK_TASK_GOTO_ENTITY_OFFSET_XY(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Entity entity = (Entity)wrenGetSlotDouble(vm, 2);
        int duration = (int)wrenGetSlotDouble(vm, 3);
        float targetRadius = (float)wrenGetSlotDouble(vm, 4);
        float offsetX = (float)wrenGetSlotDouble(vm, 5);
        float offsetY = (float)wrenGetSlotDouble(vm, 6);
        float moveBlendRatio = (float)wrenGetSlotDouble(vm, 7);
        int gotoEntityOffsetFlags = (int)wrenGetSlotDouble(vm, 8);

        TASK::TASK_GOTO_ENTITY_OFFSET_XY(ped, entity, duration, targetRadius, offsetX, offsetY, moveBlendRatio, gotoEntityOffsetFlags);
    }

    static void WREN_TASK_TASK_TURN_PED_TO_FACE_COORD(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);
        int duration = (int)wrenGetSlotDouble(vm, 5);

        TASK::TASK_TURN_PED_TO_FACE_COORD(ped, x, y, z, duration);
    }

    static void WREN_TASK_TASK_VEHICLE_TEMP_ACTION(WrenVM* vm)
    {
        Ped driver = (Ped)wrenGetSlotDouble(vm, 1);
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 2);
        int action = (int)wrenGetSlotDouble(vm, 3);
        int time = (int)wrenGetSlotDouble(vm, 4);

        TASK::TASK_VEHICLE_TEMP_ACTION(driver, vehicle, action, time);
    }

    static void WREN_TASK_TASK_VEHICLE_MISSION(WrenVM* vm)
    {
        Ped driver = (Ped)wrenGetSlotDouble(vm, 1);
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 2);
        Vehicle vehicleTarget = (Vehicle)wrenGetSlotDouble(vm, 3);
        int missionType = (int)wrenGetSlotDouble(vm, 4);
        float cruiseSpeed = (float)wrenGetSlotDouble(vm, 5);
        int drivingStyle = (int)wrenGetSlotDouble(vm, 6);
        float targetReached = (float)wrenGetSlotDouble(vm, 7);
        float straightLineDistance = (float)wrenGetSlotDouble(vm, 8);
        BOOL DriveAgainstTraffic = (BOOL)wrenGetSlotBool(vm, 9);

        TASK::TASK_VEHICLE_MISSION(driver, vehicle, vehicleTarget, missionType, cruiseSpeed, drivingStyle, targetReached, straightLineDistance, DriveAgainstTraffic);
    }

    static void WREN_TASK_TASK_VEHICLE_MISSION_PED_TARGET(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 2);
        Ped pedTarget = (Ped)wrenGetSlotDouble(vm, 3);
        int missionType = (int)wrenGetSlotDouble(vm, 4);
        float maxSpeed = (float)wrenGetSlotDouble(vm, 5);
        int drivingStyle = (int)wrenGetSlotDouble(vm, 6);
        float minDistance = (float)wrenGetSlotDouble(vm, 7);
        float straightLineDistance = (float)wrenGetSlotDouble(vm, 8);
        BOOL DriveAgainstTraffic = (BOOL)wrenGetSlotBool(vm, 9);

        TASK::TASK_VEHICLE_MISSION_PED_TARGET(ped, vehicle, pedTarget, missionType, maxSpeed, drivingStyle, minDistance, straightLineDistance, DriveAgainstTraffic);
    }

    static void WREN_TASK_TASK_VEHICLE_MISSION_COORS_TARGET(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 2);
        float x = (float)wrenGetSlotDouble(vm, 3);
        float y = (float)wrenGetSlotDouble(vm, 4);
        float z = (float)wrenGetSlotDouble(vm, 5);
        int mission = (int)wrenGetSlotDouble(vm, 6);
        float cruiseSpeed = (float)wrenGetSlotDouble(vm, 7);
        int drivingStyle = (int)wrenGetSlotDouble(vm, 8);
        float targetReached = (float)wrenGetSlotDouble(vm, 9);
        float straightLineDistance = (float)wrenGetSlotDouble(vm, 10);
        BOOL DriveAgainstTraffic = (BOOL)wrenGetSlotBool(vm, 11);

        TASK::TASK_VEHICLE_MISSION_COORS_TARGET(ped, vehicle, x, y, z, mission, cruiseSpeed, drivingStyle, targetReached, straightLineDistance, DriveAgainstTraffic);
    }

    static void WREN_TASK_TASK_VEHICLE_ESCORT(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 2);
        Vehicle targetVehicle = (Vehicle)wrenGetSlotDouble(vm, 3);
        int mode = (int)wrenGetSlotDouble(vm, 4);
        float speed = (float)wrenGetSlotDouble(vm, 5);
        int drivingStyle = (int)wrenGetSlotDouble(vm, 6);
        float minDistance = (float)wrenGetSlotDouble(vm, 7);
        int minHeightAboveTerrain = (int)wrenGetSlotDouble(vm, 8);
        float noRoadsDistance = (float)wrenGetSlotDouble(vm, 9);

        TASK::TASK_VEHICLE_ESCORT(ped, vehicle, targetVehicle, mode, speed, drivingStyle, minDistance, minHeightAboveTerrain, noRoadsDistance);
    }

    static void WREN_TASK_TASK_VEHICLE_FOLLOW(WrenVM* vm)
    {
        Ped driver = (Ped)wrenGetSlotDouble(vm, 1);
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 2);
        Entity targetEntity = (Entity)wrenGetSlotDouble(vm, 3);
        float speed = (float)wrenGetSlotDouble(vm, 4);
        int drivingStyle = (int)wrenGetSlotDouble(vm, 5);
        int minDistance = (int)wrenGetSlotDouble(vm, 6);

        TASK::TASK_VEHICLE_FOLLOW(driver, vehicle, targetEntity, speed, drivingStyle, minDistance);
    }

    static void WREN_TASK_TASK_VEHICLE_CHASE(WrenVM* vm)
    {
        Ped driver = (Ped)wrenGetSlotDouble(vm, 1);
        Entity targetEnt = (Entity)wrenGetSlotDouble(vm, 2);

        TASK::TASK_VEHICLE_CHASE(driver, targetEnt);
    }

    static void WREN_TASK_TASK_VEHICLE_HELI_PROTECT(WrenVM* vm)
    {
        Ped pilot = (Ped)wrenGetSlotDouble(vm, 1);
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 2);
        Entity entityToFollow = (Entity)wrenGetSlotDouble(vm, 3);
        float targetSpeed = (float)wrenGetSlotDouble(vm, 4);
        int drivingFlags = (int)wrenGetSlotDouble(vm, 5);
        float radius = (float)wrenGetSlotDouble(vm, 6);
        int altitude = (int)wrenGetSlotDouble(vm, 7);
        int heliFlags = (int)wrenGetSlotDouble(vm, 8);

        TASK::TASK_VEHICLE_HELI_PROTECT(pilot, vehicle, entityToFollow, targetSpeed, drivingFlags, radius, altitude, heliFlags);
    }

    static void WREN_TASK_SET_TASK_VEHICLE_CHASE_BEHAVIOR_FLAG(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int flag = (int)wrenGetSlotDouble(vm, 2);
        BOOL set = (BOOL)wrenGetSlotBool(vm, 3);

        TASK::SET_TASK_VEHICLE_CHASE_BEHAVIOR_FLAG(ped, flag, set);
    }

    static void WREN_TASK_SET_TASK_VEHICLE_CHASE_IDEAL_PURSUIT_DISTANCE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float distance = (float)wrenGetSlotDouble(vm, 2);

        TASK::SET_TASK_VEHICLE_CHASE_IDEAL_PURSUIT_DISTANCE(ped, distance);
    }

    static void WREN_TASK_TASK_HELI_CHASE(WrenVM* vm)
    {
        Ped pilot = (Ped)wrenGetSlotDouble(vm, 1);
        Entity entityToFollow = (Entity)wrenGetSlotDouble(vm, 2);
        float x = (float)wrenGetSlotDouble(vm, 3);
        float y = (float)wrenGetSlotDouble(vm, 4);
        float z = (float)wrenGetSlotDouble(vm, 5);

        TASK::TASK_HELI_CHASE(pilot, entityToFollow, x, y, z);
    }

    static void WREN_TASK_TASK_PLANE_CHASE(WrenVM* vm)
    {
        Ped pilot = (Ped)wrenGetSlotDouble(vm, 1);
        Entity entityToFollow = (Entity)wrenGetSlotDouble(vm, 2);
        float x = (float)wrenGetSlotDouble(vm, 3);
        float y = (float)wrenGetSlotDouble(vm, 4);
        float z = (float)wrenGetSlotDouble(vm, 5);

        TASK::TASK_PLANE_CHASE(pilot, entityToFollow, x, y, z);
    }

    static void WREN_TASK_TASK_PLANE_LAND(WrenVM* vm)
    {
        Ped pilot = (Ped)wrenGetSlotDouble(vm, 1);
        Vehicle plane = (Vehicle)wrenGetSlotDouble(vm, 2);
        float runwayStartX = (float)wrenGetSlotDouble(vm, 3);
        float runwayStartY = (float)wrenGetSlotDouble(vm, 4);
        float runwayStartZ = (float)wrenGetSlotDouble(vm, 5);
        float runwayEndX = (float)wrenGetSlotDouble(vm, 6);
        float runwayEndY = (float)wrenGetSlotDouble(vm, 7);
        float runwayEndZ = (float)wrenGetSlotDouble(vm, 8);

        TASK::TASK_PLANE_LAND(pilot, plane, runwayStartX, runwayStartY, runwayStartZ, runwayEndX, runwayEndY, runwayEndZ);
    }

    static void WREN_TASK_CLEAR_DEFAULT_PRIMARY_TASK(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        TASK::CLEAR_DEFAULT_PRIMARY_TASK(ped);
    }

    static void WREN_TASK_CLEAR_PRIMARY_VEHICLE_TASK(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        TASK::CLEAR_PRIMARY_VEHICLE_TASK(vehicle);
    }

    static void WREN_TASK_CLEAR_VEHICLE_CRASH_TASK(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        TASK::CLEAR_VEHICLE_CRASH_TASK(vehicle);
    }

    static void WREN_TASK_TASK_PLANE_GOTO_PRECISE_VTOL(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 2);
        float x = (float)wrenGetSlotDouble(vm, 3);
        float y = (float)wrenGetSlotDouble(vm, 4);
        float z = (float)wrenGetSlotDouble(vm, 5);
        int flightHeight = (int)wrenGetSlotDouble(vm, 6);
        int minHeightAboveTerrain = (int)wrenGetSlotDouble(vm, 7);
        BOOL useDesiredOrientation = (BOOL)wrenGetSlotBool(vm, 8);
        float desiredOrientation = (float)wrenGetSlotDouble(vm, 9);
        BOOL autopilot = (BOOL)wrenGetSlotBool(vm, 10);

        TASK::TASK_PLANE_GOTO_PRECISE_VTOL(ped, vehicle, x, y, z, flightHeight, minHeightAboveTerrain, useDesiredOrientation, desiredOrientation, autopilot);
    }

    static void WREN_TASK_TASK_SUBMARINE_GOTO_AND_STOP(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Vehicle submarine = (Vehicle)wrenGetSlotDouble(vm, 2);
        float x = (float)wrenGetSlotDouble(vm, 3);
        float y = (float)wrenGetSlotDouble(vm, 4);
        float z = (float)wrenGetSlotDouble(vm, 5);
        BOOL autopilot = (BOOL)wrenGetSlotBool(vm, 6);

        TASK::TASK_SUBMARINE_GOTO_AND_STOP(ped, submarine, x, y, z, autopilot);
    }

    static void WREN_TASK_TASK_HELI_MISSION(WrenVM* vm)
    {
        Ped pilot = (Ped)wrenGetSlotDouble(vm, 1);
        Vehicle aircraft = (Vehicle)wrenGetSlotDouble(vm, 2);
        Vehicle targetVehicle = (Vehicle)wrenGetSlotDouble(vm, 3);
        Ped targetPed = (Ped)wrenGetSlotDouble(vm, 4);
        float destinationX = (float)wrenGetSlotDouble(vm, 5);
        float destinationY = (float)wrenGetSlotDouble(vm, 6);
        float destinationZ = (float)wrenGetSlotDouble(vm, 7);
        int missionFlag = (int)wrenGetSlotDouble(vm, 8);
        float maxSpeed = (float)wrenGetSlotDouble(vm, 9);
        float radius = (float)wrenGetSlotDouble(vm, 10);
        float targetHeading = (float)wrenGetSlotDouble(vm, 11);
        int maxHeight = (int)wrenGetSlotDouble(vm, 12);
        int minHeight = (int)wrenGetSlotDouble(vm, 13);
        float slowDownDistance = (float)wrenGetSlotDouble(vm, 14);
        int behaviorFlags = (int)wrenGetSlotDouble(vm, 15);

        TASK::TASK_HELI_MISSION(pilot, aircraft, targetVehicle, targetPed, destinationX, destinationY, destinationZ, missionFlag, maxSpeed, radius, targetHeading, maxHeight, minHeight, slowDownDistance, behaviorFlags);
    }

    static void WREN_TASK_TASK_HELI_ESCORT_HELI(WrenVM* vm)
    {
        Ped pilot = (Ped)wrenGetSlotDouble(vm, 1);
        Vehicle heli1 = (Vehicle)wrenGetSlotDouble(vm, 2);
        Vehicle heli2 = (Vehicle)wrenGetSlotDouble(vm, 3);
        float offsetX = (float)wrenGetSlotDouble(vm, 4);
        float offsetY = (float)wrenGetSlotDouble(vm, 5);
        float offsetZ = (float)wrenGetSlotDouble(vm, 6);

        TASK::TASK_HELI_ESCORT_HELI(pilot, heli1, heli2, offsetX, offsetY, offsetZ);
    }

    static void WREN_TASK_TASK_PLANE_MISSION(WrenVM* vm)
    {
        Ped pilot = (Ped)wrenGetSlotDouble(vm, 1);
        Vehicle aircraft = (Vehicle)wrenGetSlotDouble(vm, 2);
        Vehicle targetVehicle = (Vehicle)wrenGetSlotDouble(vm, 3);
        Ped targetPed = (Ped)wrenGetSlotDouble(vm, 4);
        float destinationX = (float)wrenGetSlotDouble(vm, 5);
        float destinationY = (float)wrenGetSlotDouble(vm, 6);
        float destinationZ = (float)wrenGetSlotDouble(vm, 7);
        int missionFlag = (int)wrenGetSlotDouble(vm, 8);
        float angularDrag = (float)wrenGetSlotDouble(vm, 9);
        float targetReached = (float)wrenGetSlotDouble(vm, 10);
        float targetHeading = (float)wrenGetSlotDouble(vm, 11);
        float maxZ = (float)wrenGetSlotDouble(vm, 12);
        float minZ = (float)wrenGetSlotDouble(vm, 13);
        BOOL precise = (BOOL)wrenGetSlotBool(vm, 14);

        TASK::TASK_PLANE_MISSION(pilot, aircraft, targetVehicle, targetPed, destinationX, destinationY, destinationZ, missionFlag, angularDrag, targetReached, targetHeading, maxZ, minZ, precise);
    }

    static void WREN_TASK_TASK_PLANE_TAXI(WrenVM* vm)
    {
        Ped pilot = (Ped)wrenGetSlotDouble(vm, 1);
        Vehicle aircraft = (Vehicle)wrenGetSlotDouble(vm, 2);
        float x = (float)wrenGetSlotDouble(vm, 3);
        float y = (float)wrenGetSlotDouble(vm, 4);
        float z = (float)wrenGetSlotDouble(vm, 5);
        float cruiseSpeed = (float)wrenGetSlotDouble(vm, 6);
        float targetReached = (float)wrenGetSlotDouble(vm, 7);

        TASK::TASK_PLANE_TAXI(pilot, aircraft, x, y, z, cruiseSpeed, targetReached);
    }

    static void WREN_TASK_TASK_BOAT_MISSION(WrenVM* vm)
    {
        Ped pedDriver = (Ped)wrenGetSlotDouble(vm, 1);
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 2);
        Vehicle targetVehicle = (Vehicle)wrenGetSlotDouble(vm, 3);
        Ped targetPed = (Ped)wrenGetSlotDouble(vm, 4);
        float x = (float)wrenGetSlotDouble(vm, 5);
        float y = (float)wrenGetSlotDouble(vm, 6);
        float z = (float)wrenGetSlotDouble(vm, 7);
        int mission = (int)wrenGetSlotDouble(vm, 8);
        float maxSpeed = (float)wrenGetSlotDouble(vm, 9);
        int drivingStyle = (int)wrenGetSlotDouble(vm, 10);
        float targetReached = (float)wrenGetSlotDouble(vm, 11);
        Any boatFlags = (Any)wrenGetSlotDouble(vm, 12);

        TASK::TASK_BOAT_MISSION(pedDriver, vehicle, targetVehicle, targetPed, x, y, z, mission, maxSpeed, drivingStyle, targetReached, boatFlags);
    }

    static void WREN_TASK_TASK_DRIVE_BY(WrenVM* vm)
    {
        Ped driverPed = (Ped)wrenGetSlotDouble(vm, 1);
        Ped targetPed = (Ped)wrenGetSlotDouble(vm, 2);
        Vehicle targetVehicle = (Vehicle)wrenGetSlotDouble(vm, 3);
        float targetX = (float)wrenGetSlotDouble(vm, 4);
        float targetY = (float)wrenGetSlotDouble(vm, 5);
        float targetZ = (float)wrenGetSlotDouble(vm, 6);
        float distanceToShoot = (float)wrenGetSlotDouble(vm, 7);
        int pedAccuracy = (int)wrenGetSlotDouble(vm, 8);
        BOOL pushUnderneathDrivingTaskIfDriving = (BOOL)wrenGetSlotBool(vm, 9);
        Hash firingPattern = (Hash)wrenGetSlotDouble(vm, 10);

        TASK::TASK_DRIVE_BY(driverPed, targetPed, targetVehicle, targetX, targetY, targetZ, distanceToShoot, pedAccuracy, pushUnderneathDrivingTaskIfDriving, firingPattern);
    }

    static void WREN_TASK_SET_DRIVEBY_TASK_TARGET(WrenVM* vm)
    {
        Ped shootingPed = (Ped)wrenGetSlotDouble(vm, 1);
        Ped targetPed = (Ped)wrenGetSlotDouble(vm, 2);
        Vehicle targetVehicle = (Vehicle)wrenGetSlotDouble(vm, 3);
        float x = (float)wrenGetSlotDouble(vm, 4);
        float y = (float)wrenGetSlotDouble(vm, 5);
        float z = (float)wrenGetSlotDouble(vm, 6);

        TASK::SET_DRIVEBY_TASK_TARGET(shootingPed, targetPed, targetVehicle, x, y, z);
    }

    static void WREN_TASK_CLEAR_DRIVEBY_TASK_UNDERNEATH_DRIVING_TASK(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        TASK::CLEAR_DRIVEBY_TASK_UNDERNEATH_DRIVING_TASK(ped);
    }

    static void WREN_TASK_IS_DRIVEBY_TASK_UNDERNEATH_DRIVING_TASK(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = TASK::IS_DRIVEBY_TASK_UNDERNEATH_DRIVING_TASK(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_TASK_CONTROL_MOUNTED_WEAPON(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = TASK::CONTROL_MOUNTED_WEAPON(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_TASK_SET_MOUNTED_WEAPON_TARGET(WrenVM* vm)
    {
        Ped shootingPed = (Ped)wrenGetSlotDouble(vm, 1);
        Ped targetPed = (Ped)wrenGetSlotDouble(vm, 2);
        Vehicle targetVehicle = (Vehicle)wrenGetSlotDouble(vm, 3);
        float x = (float)wrenGetSlotDouble(vm, 4);
        float y = (float)wrenGetSlotDouble(vm, 5);
        float z = (float)wrenGetSlotDouble(vm, 6);
        int taskMode = (int)wrenGetSlotDouble(vm, 7);
        BOOL ignoreTargetVehDeadCheck = (BOOL)wrenGetSlotBool(vm, 8);

        TASK::SET_MOUNTED_WEAPON_TARGET(shootingPed, targetPed, targetVehicle, x, y, z, taskMode, ignoreTargetVehDeadCheck);
    }

    static void WREN_TASK_IS_MOUNTED_WEAPON_TASK_UNDERNEATH_DRIVING_TASK(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = TASK::IS_MOUNTED_WEAPON_TASK_UNDERNEATH_DRIVING_TASK(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_TASK_TASK_USE_MOBILE_PHONE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL usePhone = (BOOL)wrenGetSlotBool(vm, 2);
        int desiredPhoneMode = (int)wrenGetSlotDouble(vm, 3);

        TASK::TASK_USE_MOBILE_PHONE(ped, usePhone, desiredPhoneMode);
    }

    static void WREN_TASK_TASK_USE_MOBILE_PHONE_TIMED(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int duration = (int)wrenGetSlotDouble(vm, 2);

        TASK::TASK_USE_MOBILE_PHONE_TIMED(ped, duration);
    }

    static void WREN_TASK_TASK_CHAT_TO_PED(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Ped target = (Ped)wrenGetSlotDouble(vm, 2);
        int flags = (int)wrenGetSlotDouble(vm, 3);
        float goToLocationX = (float)wrenGetSlotDouble(vm, 4);
        float goToLocationY = (float)wrenGetSlotDouble(vm, 5);
        float goToLocationZ = (float)wrenGetSlotDouble(vm, 6);
        float headingDegs = (float)wrenGetSlotDouble(vm, 7);
        float idleTime = (float)wrenGetSlotDouble(vm, 8);

        TASK::TASK_CHAT_TO_PED(ped, target, flags, goToLocationX, goToLocationY, goToLocationZ, headingDegs, idleTime);
    }

    static void WREN_TASK_TASK_WARP_PED_INTO_VEHICLE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 2);
        int seat = (int)wrenGetSlotDouble(vm, 3);

        TASK::TASK_WARP_PED_INTO_VEHICLE(ped, vehicle, seat);
    }

    static void WREN_TASK_TASK_SHOOT_AT_ENTITY(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        Entity target = (Entity)wrenGetSlotDouble(vm, 2);
        int duration = (int)wrenGetSlotDouble(vm, 3);
        Hash firingPattern = (Hash)wrenGetSlotDouble(vm, 4);

        TASK::TASK_SHOOT_AT_ENTITY(entity, target, duration, firingPattern);
    }

    static void WREN_TASK_TASK_CLIMB(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL usePlayerLaunchForce = (BOOL)wrenGetSlotBool(vm, 2);

        TASK::TASK_CLIMB(ped, usePlayerLaunchForce);
    }

    static void WREN_TASK_TASK_CLIMB_LADDER(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL fast = (BOOL)wrenGetSlotBool(vm, 2);

        TASK::TASK_CLIMB_LADDER(ped, fast);
    }

    static void WREN_TASK_TASK_RAPPEL_DOWN_WALL_USING_CLIPSET_OVERRIDE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float x1 = (float)wrenGetSlotDouble(vm, 2);
        float y1 = (float)wrenGetSlotDouble(vm, 3);
        float z1 = (float)wrenGetSlotDouble(vm, 4);
        float x2 = (float)wrenGetSlotDouble(vm, 5);
        float y2 = (float)wrenGetSlotDouble(vm, 6);
        float z2 = (float)wrenGetSlotDouble(vm, 7);
        float minZ = (float)wrenGetSlotDouble(vm, 8);
        int ropeHandle = (int)wrenGetSlotDouble(vm, 9);
        const char* clipSet = wrenGetSlotString(vm, 10);
        Any p10 = (Any)wrenGetSlotDouble(vm, 11);

        TASK::TASK_RAPPEL_DOWN_WALL_USING_CLIPSET_OVERRIDE(ped, x1, y1, z1, x2, y2, z2, minZ, ropeHandle, clipSet, p10);
    }

    static void WREN_TASK_GET_TASK_RAPPEL_DOWN_WALL_STATE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        int res = TASK::GET_TASK_RAPPEL_DOWN_WALL_STATE(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_TASK_CLEAR_PED_TASKS_IMMEDIATELY(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        TASK::CLEAR_PED_TASKS_IMMEDIATELY(ped);
    }

    static void WREN_TASK_TASK_PERFORM_SEQUENCE_FROM_PROGRESS(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int taskIndex = (int)wrenGetSlotDouble(vm, 2);
        int progress1 = (int)wrenGetSlotDouble(vm, 3);
        int progress2 = (int)wrenGetSlotDouble(vm, 4);

        TASK::TASK_PERFORM_SEQUENCE_FROM_PROGRESS(ped, taskIndex, progress1, progress2);
    }

    static void WREN_TASK_SET_NEXT_DESIRED_MOVE_STATE(WrenVM* vm)
    {
        float nextMoveState = (float)wrenGetSlotDouble(vm, 1);

        TASK::SET_NEXT_DESIRED_MOVE_STATE(nextMoveState);
    }

    static void WREN_TASK_SET_PED_DESIRED_MOVE_BLEND_RATIO(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float newMoveBlendRatio = (float)wrenGetSlotDouble(vm, 2);

        TASK::SET_PED_DESIRED_MOVE_BLEND_RATIO(ped, newMoveBlendRatio);
    }

    static void WREN_TASK_GET_PED_DESIRED_MOVE_BLEND_RATIO(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        float res = TASK::GET_PED_DESIRED_MOVE_BLEND_RATIO(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_TASK_TASK_GOTO_ENTITY_AIMING(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Entity target = (Entity)wrenGetSlotDouble(vm, 2);
        float distanceToStopAt = (float)wrenGetSlotDouble(vm, 3);
        float StartAimingDist = (float)wrenGetSlotDouble(vm, 4);

        TASK::TASK_GOTO_ENTITY_AIMING(ped, target, distanceToStopAt, StartAimingDist);
    }

    static void WREN_TASK_TASK_SET_DECISION_MAKER(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Hash decisionMakerId = (Hash)wrenGetSlotDouble(vm, 2);

        TASK::TASK_SET_DECISION_MAKER(ped, decisionMakerId);
    }

    static void WREN_TASK_TASK_SET_SPHERE_DEFENSIVE_AREA(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);
        float radius = (float)wrenGetSlotDouble(vm, 5);

        TASK::TASK_SET_SPHERE_DEFENSIVE_AREA(ped, x, y, z, radius);
    }

    static void WREN_TASK_TASK_CLEAR_DEFENSIVE_AREA(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        TASK::TASK_CLEAR_DEFENSIVE_AREA(ped);
    }

    static void WREN_TASK_TASK_PED_SLIDE_TO_COORD(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);
        float heading = (float)wrenGetSlotDouble(vm, 5);
        float speed = (float)wrenGetSlotDouble(vm, 6);

        TASK::TASK_PED_SLIDE_TO_COORD(ped, x, y, z, heading, speed);
    }

    static void WREN_TASK_TASK_PED_SLIDE_TO_COORD_HDG_RATE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);
        float heading = (float)wrenGetSlotDouble(vm, 5);
        float speed = (float)wrenGetSlotDouble(vm, 6);
        float headingChangeRate = (float)wrenGetSlotDouble(vm, 7);

        TASK::TASK_PED_SLIDE_TO_COORD_HDG_RATE(ped, x, y, z, heading, speed, headingChangeRate);
    }

    static void WREN_TASK_ADD_COVER_POINT(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        float direction = (float)wrenGetSlotDouble(vm, 4);
        int usage = (int)wrenGetSlotDouble(vm, 5);
        int height = (int)wrenGetSlotDouble(vm, 6);
        int arc = (int)wrenGetSlotDouble(vm, 7);
        BOOL isPriority = (BOOL)wrenGetSlotBool(vm, 8);

        ScrHandle res = TASK::ADD_COVER_POINT(x, y, z, direction, usage, height, arc, isPriority);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_TASK_REMOVE_COVER_POINT(WrenVM* vm)
    {
        ScrHandle coverpoint = (ScrHandle)wrenGetSlotDouble(vm, 1);

        TASK::REMOVE_COVER_POINT(coverpoint);
    }

    static void WREN_TASK_DOES_SCRIPTED_COVER_POINT_EXIST_AT_COORDS(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);

        BOOL res = TASK::DOES_SCRIPTED_COVER_POINT_EXIST_AT_COORDS(x, y, z);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_TASK_GET_SCRIPTED_COVER_POINT_COORDS(WrenVM* vm)
    {
        ScrHandle coverpoint = (ScrHandle)wrenGetSlotDouble(vm, 1);

        Vector3 res = TASK::GET_SCRIPTED_COVER_POINT_COORDS(coverpoint);

        wrenEnsureSlots(vm, 1);

        wrenGetVariable(vm, "natives", "Vector3", 0);
        Vector3* wren_res = (Vector3*)wrenSetSlotNewForeign(vm, 0, 0, sizeof(Vector3));
        wren_res->x = res.x;
        wren_res->y = res.y;
        wren_res->z = res.z;
    }

    static void WREN_TASK_ADD_SCRIPTED_COVER_AREA(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        float radius = (float)wrenGetSlotDouble(vm, 4);

        TASK::ADD_SCRIPTED_COVER_AREA(x, y, z, radius);
    }

    static void WREN_TASK_TASK_COMBAT_PED(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Ped targetPed = (Ped)wrenGetSlotDouble(vm, 2);
        int combatFlags = (int)wrenGetSlotDouble(vm, 3);
        int threatResponseFlags = (int)wrenGetSlotDouble(vm, 4);

        TASK::TASK_COMBAT_PED(ped, targetPed, combatFlags, threatResponseFlags);
    }

    static void WREN_TASK_TASK_COMBAT_PED_TIMED(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Ped target = (Ped)wrenGetSlotDouble(vm, 2);
        int time = (int)wrenGetSlotDouble(vm, 3);
        int flags = (int)wrenGetSlotDouble(vm, 4);

        TASK::TASK_COMBAT_PED_TIMED(ped, target, time, flags);
    }

    static void WREN_TASK_TASK_SEEK_COVER_FROM_POS(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);
        int duration = (int)wrenGetSlotDouble(vm, 5);
        BOOL allowPeekingAndFiring = (BOOL)wrenGetSlotBool(vm, 6);

        TASK::TASK_SEEK_COVER_FROM_POS(ped, x, y, z, duration, allowPeekingAndFiring);
    }

    static void WREN_TASK_TASK_SEEK_COVER_FROM_PED(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Ped target = (Ped)wrenGetSlotDouble(vm, 2);
        int duration = (int)wrenGetSlotDouble(vm, 3);
        BOOL allowPeekingAndFiring = (BOOL)wrenGetSlotBool(vm, 4);

        TASK::TASK_SEEK_COVER_FROM_PED(ped, target, duration, allowPeekingAndFiring);
    }

    static void WREN_TASK_TASK_SEEK_COVER_TO_COVER_POINT(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        ScrHandle coverpoint = (ScrHandle)wrenGetSlotDouble(vm, 2);
        float x = (float)wrenGetSlotDouble(vm, 3);
        float y = (float)wrenGetSlotDouble(vm, 4);
        float z = (float)wrenGetSlotDouble(vm, 5);
        int time = (int)wrenGetSlotDouble(vm, 6);
        BOOL allowPeekingAndFiring = (BOOL)wrenGetSlotBool(vm, 7);

        TASK::TASK_SEEK_COVER_TO_COVER_POINT(ped, coverpoint, x, y, z, time, allowPeekingAndFiring);
    }

    static void WREN_TASK_TASK_SEEK_COVER_TO_COORDS(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float x1 = (float)wrenGetSlotDouble(vm, 2);
        float y1 = (float)wrenGetSlotDouble(vm, 3);
        float z1 = (float)wrenGetSlotDouble(vm, 4);
        float x2 = (float)wrenGetSlotDouble(vm, 5);
        float y2 = (float)wrenGetSlotDouble(vm, 6);
        float z2 = (float)wrenGetSlotDouble(vm, 7);
        int timeout = (int)wrenGetSlotDouble(vm, 8);
        BOOL shortRoute = (BOOL)wrenGetSlotBool(vm, 9);

        TASK::TASK_SEEK_COVER_TO_COORDS(ped, x1, y1, z1, x2, y2, z2, timeout, shortRoute);
    }

    static void WREN_TASK_TASK_PUT_PED_DIRECTLY_INTO_COVER(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);
        int time = (int)wrenGetSlotDouble(vm, 5);
        BOOL allowPeekingAndFiring = (BOOL)wrenGetSlotBool(vm, 6);
        float blendInDuration = (float)wrenGetSlotDouble(vm, 7);
        BOOL forceInitialFacingDirection = (BOOL)wrenGetSlotBool(vm, 8);
        BOOL forceFaceLeft = (BOOL)wrenGetSlotBool(vm, 9);
        int identifier = (int)wrenGetSlotDouble(vm, 10);
        BOOL doEntry = (BOOL)wrenGetSlotBool(vm, 11);

        TASK::TASK_PUT_PED_DIRECTLY_INTO_COVER(ped, x, y, z, time, allowPeekingAndFiring, blendInDuration, forceInitialFacingDirection, forceFaceLeft, identifier, doEntry);
    }

    static void WREN_TASK_TASK_WARP_PED_DIRECTLY_INTO_COVER(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int time = (int)wrenGetSlotDouble(vm, 2);
        BOOL allowPeekingAndFiring = (BOOL)wrenGetSlotBool(vm, 3);
        BOOL forceInitialFacingDirection = (BOOL)wrenGetSlotBool(vm, 4);
        BOOL forceFaceLeft = (BOOL)wrenGetSlotBool(vm, 5);
        int identifier = (int)wrenGetSlotDouble(vm, 6);

        TASK::TASK_WARP_PED_DIRECTLY_INTO_COVER(ped, time, allowPeekingAndFiring, forceInitialFacingDirection, forceFaceLeft, identifier);
    }

    static void WREN_TASK_TASK_EXIT_COVER(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int exitType = (int)wrenGetSlotDouble(vm, 2);
        float x = (float)wrenGetSlotDouble(vm, 3);
        float y = (float)wrenGetSlotDouble(vm, 4);
        float z = (float)wrenGetSlotDouble(vm, 5);

        TASK::TASK_EXIT_COVER(ped, exitType, x, y, z);
    }

    static void WREN_TASK_TASK_PUT_PED_DIRECTLY_INTO_MELEE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Ped meleeTarget = (Ped)wrenGetSlotDouble(vm, 2);
        float blendInDuration = (float)wrenGetSlotDouble(vm, 3);
        float timeInMelee = (float)wrenGetSlotDouble(vm, 4);
        float strafePhaseSync = (float)wrenGetSlotDouble(vm, 5);
        int aiCombatFlags = (int)wrenGetSlotDouble(vm, 6);

        TASK::TASK_PUT_PED_DIRECTLY_INTO_MELEE(ped, meleeTarget, blendInDuration, timeInMelee, strafePhaseSync, aiCombatFlags);
    }

    static void WREN_TASK_TASK_TOGGLE_DUCK(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int toggleType = (int)wrenGetSlotDouble(vm, 2);

        TASK::TASK_TOGGLE_DUCK(ped, toggleType);
    }

    static void WREN_TASK_TASK_GUARD_CURRENT_POSITION(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float maxPatrolProximity = (float)wrenGetSlotDouble(vm, 2);
        float defensiveAreaRadius = (float)wrenGetSlotDouble(vm, 3);
        BOOL setDefensiveArea = (BOOL)wrenGetSlotBool(vm, 4);

        TASK::TASK_GUARD_CURRENT_POSITION(ped, maxPatrolProximity, defensiveAreaRadius, setDefensiveArea);
    }

    static void WREN_TASK_TASK_GUARD_ASSIGNED_DEFENSIVE_AREA(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);
        float heading = (float)wrenGetSlotDouble(vm, 5);
        float maxPatrolProximity = (float)wrenGetSlotDouble(vm, 6);
        int timer = (int)wrenGetSlotDouble(vm, 7);

        TASK::TASK_GUARD_ASSIGNED_DEFENSIVE_AREA(ped, x, y, z, heading, maxPatrolProximity, timer);
    }

    static void WREN_TASK_TASK_GUARD_SPHERE_DEFENSIVE_AREA(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float defendPositionX = (float)wrenGetSlotDouble(vm, 2);
        float defendPositionY = (float)wrenGetSlotDouble(vm, 3);
        float defendPositionZ = (float)wrenGetSlotDouble(vm, 4);
        float heading = (float)wrenGetSlotDouble(vm, 5);
        float maxPatrolProximity = (float)wrenGetSlotDouble(vm, 6);
        int time = (int)wrenGetSlotDouble(vm, 7);
        float x = (float)wrenGetSlotDouble(vm, 8);
        float y = (float)wrenGetSlotDouble(vm, 9);
        float z = (float)wrenGetSlotDouble(vm, 10);
        float defensiveAreaRadius = (float)wrenGetSlotDouble(vm, 11);

        TASK::TASK_GUARD_SPHERE_DEFENSIVE_AREA(ped, defendPositionX, defendPositionY, defendPositionZ, heading, maxPatrolProximity, time, x, y, z, defensiveAreaRadius);
    }

    static void WREN_TASK_TASK_STAND_GUARD(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);
        float heading = (float)wrenGetSlotDouble(vm, 5);
        const char* scenarioName = wrenGetSlotString(vm, 6);

        TASK::TASK_STAND_GUARD(ped, x, y, z, heading, scenarioName);
    }

    static void WREN_TASK_SET_DRIVE_TASK_CRUISE_SPEED(WrenVM* vm)
    {
        Ped driver = (Ped)wrenGetSlotDouble(vm, 1);
        float cruiseSpeed = (float)wrenGetSlotDouble(vm, 2);

        TASK::SET_DRIVE_TASK_CRUISE_SPEED(driver, cruiseSpeed);
    }

    static void WREN_TASK_SET_DRIVE_TASK_MAX_CRUISE_SPEED(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float speed = (float)wrenGetSlotDouble(vm, 2);

        TASK::SET_DRIVE_TASK_MAX_CRUISE_SPEED(ped, speed);
    }

    static void WREN_TASK_SET_DRIVE_TASK_DRIVING_STYLE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int drivingStyle = (int)wrenGetSlotDouble(vm, 2);

        TASK::SET_DRIVE_TASK_DRIVING_STYLE(ped, drivingStyle);
    }

    static void WREN_TASK_ADD_COVER_BLOCKING_AREA(WrenVM* vm)
    {
        float startX = (float)wrenGetSlotDouble(vm, 1);
        float startY = (float)wrenGetSlotDouble(vm, 2);
        float startZ = (float)wrenGetSlotDouble(vm, 3);
        float endX = (float)wrenGetSlotDouble(vm, 4);
        float endY = (float)wrenGetSlotDouble(vm, 5);
        float endZ = (float)wrenGetSlotDouble(vm, 6);
        BOOL blockObjects = (BOOL)wrenGetSlotBool(vm, 7);
        BOOL blockVehicles = (BOOL)wrenGetSlotBool(vm, 8);
        BOOL blockMap = (BOOL)wrenGetSlotBool(vm, 9);
        BOOL blockPlayer = (BOOL)wrenGetSlotBool(vm, 10);

        TASK::ADD_COVER_BLOCKING_AREA(startX, startY, startZ, endX, endY, endZ, blockObjects, blockVehicles, blockMap, blockPlayer);
    }

    static void WREN_TASK_REMOVE_ALL_COVER_BLOCKING_AREAS(WrenVM* vm)
    {

        TASK::REMOVE_ALL_COVER_BLOCKING_AREAS();
    }

    static void WREN_TASK_REMOVE_COVER_BLOCKING_AREAS_AT_POSITION(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);

        TASK::REMOVE_COVER_BLOCKING_AREAS_AT_POSITION(x, y, z);
    }

    static void WREN_TASK_REMOVE_SPECIFIC_COVER_BLOCKING_AREAS(WrenVM* vm)
    {
        float startX = (float)wrenGetSlotDouble(vm, 1);
        float startY = (float)wrenGetSlotDouble(vm, 2);
        float startZ = (float)wrenGetSlotDouble(vm, 3);
        float endX = (float)wrenGetSlotDouble(vm, 4);
        float endY = (float)wrenGetSlotDouble(vm, 5);
        float endZ = (float)wrenGetSlotDouble(vm, 6);
        BOOL blockObjects = (BOOL)wrenGetSlotBool(vm, 7);
        BOOL blockVehicles = (BOOL)wrenGetSlotBool(vm, 8);
        BOOL blockMap = (BOOL)wrenGetSlotBool(vm, 9);
        BOOL blockPlayer = (BOOL)wrenGetSlotBool(vm, 10);

        TASK::REMOVE_SPECIFIC_COVER_BLOCKING_AREAS(startX, startY, startZ, endX, endY, endZ, blockObjects, blockVehicles, blockMap, blockPlayer);
    }

    static void WREN_TASK_TASK_START_SCENARIO_IN_PLACE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        const char* scenarioName = wrenGetSlotString(vm, 2);
        int unkDelay = (int)wrenGetSlotDouble(vm, 3);
        BOOL playEnterAnim = (BOOL)wrenGetSlotBool(vm, 4);

        TASK::TASK_START_SCENARIO_IN_PLACE(ped, scenarioName, unkDelay, playEnterAnim);
    }

    static void WREN_TASK_TASK_START_SCENARIO_AT_POSITION(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        const char* scenarioName = wrenGetSlotString(vm, 2);
        float x = (float)wrenGetSlotDouble(vm, 3);
        float y = (float)wrenGetSlotDouble(vm, 4);
        float z = (float)wrenGetSlotDouble(vm, 5);
        float heading = (float)wrenGetSlotDouble(vm, 6);
        int duration = (int)wrenGetSlotDouble(vm, 7);
        BOOL sittingScenario = (BOOL)wrenGetSlotBool(vm, 8);
        BOOL teleport = (BOOL)wrenGetSlotBool(vm, 9);

        TASK::TASK_START_SCENARIO_AT_POSITION(ped, scenarioName, x, y, z, heading, duration, sittingScenario, teleport);
    }

    static void WREN_TASK_TASK_USE_NEAREST_SCENARIO_TO_COORD(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);
        float distance = (float)wrenGetSlotDouble(vm, 5);
        int duration = (int)wrenGetSlotDouble(vm, 6);

        TASK::TASK_USE_NEAREST_SCENARIO_TO_COORD(ped, x, y, z, distance, duration);
    }

    static void WREN_TASK_TASK_USE_NEAREST_SCENARIO_TO_COORD_WARP(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);
        float radius = (float)wrenGetSlotDouble(vm, 5);
        int timeToLeave = (int)wrenGetSlotDouble(vm, 6);

        TASK::TASK_USE_NEAREST_SCENARIO_TO_COORD_WARP(ped, x, y, z, radius, timeToLeave);
    }

    static void WREN_TASK_TASK_USE_NEAREST_SCENARIO_CHAIN_TO_COORD(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);
        float maxRange = (float)wrenGetSlotDouble(vm, 5);
        int timeToLeave = (int)wrenGetSlotDouble(vm, 6);

        TASK::TASK_USE_NEAREST_SCENARIO_CHAIN_TO_COORD(ped, x, y, z, maxRange, timeToLeave);
    }

    static void WREN_TASK_TASK_USE_NEAREST_SCENARIO_CHAIN_TO_COORD_WARP(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);
        float radius = (float)wrenGetSlotDouble(vm, 5);
        int timeToLeave = (int)wrenGetSlotDouble(vm, 6);

        TASK::TASK_USE_NEAREST_SCENARIO_CHAIN_TO_COORD_WARP(ped, x, y, z, radius, timeToLeave);
    }

    static void WREN_TASK_DOES_SCENARIO_EXIST_IN_AREA(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        float radius = (float)wrenGetSlotDouble(vm, 4);
        BOOL mustBeFree = (BOOL)wrenGetSlotBool(vm, 5);

        BOOL res = TASK::DOES_SCENARIO_EXIST_IN_AREA(x, y, z, radius, mustBeFree);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_TASK_DOES_SCENARIO_OF_TYPE_EXIST_IN_AREA(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        const char* scenarioName = wrenGetSlotString(vm, 4);
        float radius = (float)wrenGetSlotDouble(vm, 5);
        BOOL mustBeFree = (BOOL)wrenGetSlotBool(vm, 6);

        BOOL res = TASK::DOES_SCENARIO_OF_TYPE_EXIST_IN_AREA(x, y, z, scenarioName, radius, mustBeFree);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_TASK_IS_SCENARIO_OCCUPIED(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        float maxRange = (float)wrenGetSlotDouble(vm, 4);
        BOOL onlyUsersActuallyAtScenario = (BOOL)wrenGetSlotBool(vm, 5);

        BOOL res = TASK::IS_SCENARIO_OCCUPIED(x, y, z, maxRange, onlyUsersActuallyAtScenario);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_TASK_PED_HAS_USE_SCENARIO_TASK(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = TASK::PED_HAS_USE_SCENARIO_TASK(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_TASK_PLAY_ANIM_ON_RUNNING_SCENARIO(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        const char* animDict = wrenGetSlotString(vm, 2);
        const char* animName = wrenGetSlotString(vm, 3);

        TASK::PLAY_ANIM_ON_RUNNING_SCENARIO(ped, animDict, animName);
    }

    static void WREN_TASK_DOES_SCENARIO_GROUP_EXIST(WrenVM* vm)
    {
        const char* scenarioGroup = wrenGetSlotString(vm, 1);

        BOOL res = TASK::DOES_SCENARIO_GROUP_EXIST(scenarioGroup);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_TASK_IS_SCENARIO_GROUP_ENABLED(WrenVM* vm)
    {
        const char* scenarioGroup = wrenGetSlotString(vm, 1);

        BOOL res = TASK::IS_SCENARIO_GROUP_ENABLED(scenarioGroup);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_TASK_SET_SCENARIO_GROUP_ENABLED(WrenVM* vm)
    {
        const char* scenarioGroup = wrenGetSlotString(vm, 1);
        BOOL enabled = (BOOL)wrenGetSlotBool(vm, 2);

        TASK::SET_SCENARIO_GROUP_ENABLED(scenarioGroup, enabled);
    }

    static void WREN_TASK_RESET_SCENARIO_GROUPS_ENABLED(WrenVM* vm)
    {

        TASK::RESET_SCENARIO_GROUPS_ENABLED();
    }

    static void WREN_TASK_SET_EXCLUSIVE_SCENARIO_GROUP(WrenVM* vm)
    {
        const char* scenarioGroup = wrenGetSlotString(vm, 1);

        TASK::SET_EXCLUSIVE_SCENARIO_GROUP(scenarioGroup);
    }

    static void WREN_TASK_RESET_EXCLUSIVE_SCENARIO_GROUP(WrenVM* vm)
    {

        TASK::RESET_EXCLUSIVE_SCENARIO_GROUP();
    }

    static void WREN_TASK_IS_SCENARIO_TYPE_ENABLED(WrenVM* vm)
    {
        const char* scenarioType = wrenGetSlotString(vm, 1);

        BOOL res = TASK::IS_SCENARIO_TYPE_ENABLED(scenarioType);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_TASK_SET_SCENARIO_TYPE_ENABLED(WrenVM* vm)
    {
        const char* scenarioType = wrenGetSlotString(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        TASK::SET_SCENARIO_TYPE_ENABLED(scenarioType, toggle);
    }

    static void WREN_TASK_RESET_SCENARIO_TYPES_ENABLED(WrenVM* vm)
    {

        TASK::RESET_SCENARIO_TYPES_ENABLED();
    }

    static void WREN_TASK_IS_PED_ACTIVE_IN_SCENARIO(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = TASK::IS_PED_ACTIVE_IN_SCENARIO(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_TASK_IS_PED_PLAYING_BASE_CLIP_IN_SCENARIO(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = TASK::IS_PED_PLAYING_BASE_CLIP_IN_SCENARIO(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_TASK_SET_PED_CAN_PLAY_AMBIENT_IDLES(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL blockIdleClips = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL removeIdleClipIfPlaying = (BOOL)wrenGetSlotBool(vm, 3);

        TASK::SET_PED_CAN_PLAY_AMBIENT_IDLES(ped, blockIdleClips, removeIdleClipIfPlaying);
    }

    static void WREN_TASK_TASK_COMBAT_HATED_TARGETS_IN_AREA(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);
        float radius = (float)wrenGetSlotDouble(vm, 5);
        int combatFlags = (int)wrenGetSlotDouble(vm, 6);

        TASK::TASK_COMBAT_HATED_TARGETS_IN_AREA(ped, x, y, z, radius, combatFlags);
    }

    static void WREN_TASK_TASK_COMBAT_HATED_TARGETS_AROUND_PED(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float radius = (float)wrenGetSlotDouble(vm, 2);
        int combatFlags = (int)wrenGetSlotDouble(vm, 3);

        TASK::TASK_COMBAT_HATED_TARGETS_AROUND_PED(ped, radius, combatFlags);
    }

    static void WREN_TASK_TASK_COMBAT_HATED_TARGETS_AROUND_PED_TIMED(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float radius = (float)wrenGetSlotDouble(vm, 2);
        int time = (int)wrenGetSlotDouble(vm, 3);
        int combatFlags = (int)wrenGetSlotDouble(vm, 4);

        TASK::TASK_COMBAT_HATED_TARGETS_AROUND_PED_TIMED(ped, radius, time, combatFlags);
    }

    static void WREN_TASK_TASK_THROW_PROJECTILE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);
        int ignoreCollisionEntityIndex = (int)wrenGetSlotDouble(vm, 5);
        BOOL createInvincibleProjectile = (BOOL)wrenGetSlotBool(vm, 6);

        TASK::TASK_THROW_PROJECTILE(ped, x, y, z, ignoreCollisionEntityIndex, createInvincibleProjectile);
    }

    static void WREN_TASK_TASK_SWAP_WEAPON(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL drawWeapon = (BOOL)wrenGetSlotBool(vm, 2);

        TASK::TASK_SWAP_WEAPON(ped, drawWeapon);
    }

    static void WREN_TASK_TASK_RELOAD_WEAPON(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL drawWeapon = (BOOL)wrenGetSlotBool(vm, 2);

        TASK::TASK_RELOAD_WEAPON(ped, drawWeapon);
    }

    static void WREN_TASK_IS_PED_GETTING_UP(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = TASK::IS_PED_GETTING_UP(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_TASK_TASK_WRITHE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Ped target = (Ped)wrenGetSlotDouble(vm, 2);
        int minFireLoops = (int)wrenGetSlotDouble(vm, 3);
        int startState = (int)wrenGetSlotDouble(vm, 4);
        BOOL forceShootOnGround = (BOOL)wrenGetSlotBool(vm, 5);
        int shootFromGroundTimer = (int)wrenGetSlotDouble(vm, 6);

        TASK::TASK_WRITHE(ped, target, minFireLoops, startState, forceShootOnGround, shootFromGroundTimer);
    }

    static void WREN_TASK_IS_PED_IN_WRITHE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = TASK::IS_PED_IN_WRITHE(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_TASK_OPEN_PATROL_ROUTE(WrenVM* vm)
    {
        const char* patrolRoute = wrenGetSlotString(vm, 1);

        TASK::OPEN_PATROL_ROUTE(patrolRoute);
    }

    static void WREN_TASK_CLOSE_PATROL_ROUTE(WrenVM* vm)
    {

        TASK::CLOSE_PATROL_ROUTE();
    }

    static void WREN_TASK_ADD_PATROL_ROUTE_NODE(WrenVM* vm)
    {
        int nodeId = (int)wrenGetSlotDouble(vm, 1);
        const char* nodeType = wrenGetSlotString(vm, 2);
        float posX = (float)wrenGetSlotDouble(vm, 3);
        float posY = (float)wrenGetSlotDouble(vm, 4);
        float posZ = (float)wrenGetSlotDouble(vm, 5);
        float headingX = (float)wrenGetSlotDouble(vm, 6);
        float headingY = (float)wrenGetSlotDouble(vm, 7);
        float headingZ = (float)wrenGetSlotDouble(vm, 8);
        int duration = (int)wrenGetSlotDouble(vm, 9);

        TASK::ADD_PATROL_ROUTE_NODE(nodeId, nodeType, posX, posY, posZ, headingX, headingY, headingZ, duration);
    }

    static void WREN_TASK_ADD_PATROL_ROUTE_LINK(WrenVM* vm)
    {
        int nodeId1 = (int)wrenGetSlotDouble(vm, 1);
        int nodeId2 = (int)wrenGetSlotDouble(vm, 2);

        TASK::ADD_PATROL_ROUTE_LINK(nodeId1, nodeId2);
    }

    static void WREN_TASK_CREATE_PATROL_ROUTE(WrenVM* vm)
    {

        TASK::CREATE_PATROL_ROUTE();
    }

    static void WREN_TASK_DELETE_PATROL_ROUTE(WrenVM* vm)
    {
        const char* patrolRoute = wrenGetSlotString(vm, 1);

        TASK::DELETE_PATROL_ROUTE(patrolRoute);
    }

    static void WREN_TASK_GET_PATROL_TASK_INFO(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int timeLeftAtNode;
        int nodeId;

        BOOL res = TASK::GET_PATROL_TASK_INFO(ped, &timeLeftAtNode, &nodeId);

        wrenEnsureSlots(vm, 6);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, timeLeftAtNode);
        wrenInsertInList(vm, 0, 1, 2);

        wrenSetSlotDouble(vm, 3, nodeId);
        wrenInsertInList(vm, 0, 2, 3);

    }

    static void WREN_TASK_TASK_PATROL(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        const char* patrolRouteName = wrenGetSlotString(vm, 2);
        int alertState = (int)wrenGetSlotDouble(vm, 3);
        BOOL canChatToPeds = (BOOL)wrenGetSlotBool(vm, 4);
        BOOL useHeadLookAt = (BOOL)wrenGetSlotBool(vm, 5);

        TASK::TASK_PATROL(ped, patrolRouteName, alertState, canChatToPeds, useHeadLookAt);
    }

    static void WREN_TASK_TASK_STAY_IN_COVER(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        TASK::TASK_STAY_IN_COVER(ped);
    }

    static void WREN_TASK_ADD_VEHICLE_SUBTASK_ATTACK_COORD(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);

        TASK::ADD_VEHICLE_SUBTASK_ATTACK_COORD(ped, x, y, z);
    }

    static void WREN_TASK_ADD_VEHICLE_SUBTASK_ATTACK_PED(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Ped target = (Ped)wrenGetSlotDouble(vm, 2);

        TASK::ADD_VEHICLE_SUBTASK_ATTACK_PED(ped, target);
    }

    static void WREN_TASK_TASK_VEHICLE_SHOOT_AT_PED(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Ped target = (Ped)wrenGetSlotDouble(vm, 2);
        float fireTolerance = (float)wrenGetSlotDouble(vm, 3);

        TASK::TASK_VEHICLE_SHOOT_AT_PED(ped, target, fireTolerance);
    }

    static void WREN_TASK_TASK_VEHICLE_AIM_AT_PED(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Ped target = (Ped)wrenGetSlotDouble(vm, 2);

        TASK::TASK_VEHICLE_AIM_AT_PED(ped, target);
    }

    static void WREN_TASK_TASK_VEHICLE_SHOOT_AT_COORD(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);
        float fireTolerance = (float)wrenGetSlotDouble(vm, 5);

        TASK::TASK_VEHICLE_SHOOT_AT_COORD(ped, x, y, z, fireTolerance);
    }

    static void WREN_TASK_TASK_VEHICLE_AIM_AT_COORD(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);

        TASK::TASK_VEHICLE_AIM_AT_COORD(ped, x, y, z);
    }

    static void WREN_TASK_TASK_VEHICLE_GOTO_NAVMESH(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 2);
        float x = (float)wrenGetSlotDouble(vm, 3);
        float y = (float)wrenGetSlotDouble(vm, 4);
        float z = (float)wrenGetSlotDouble(vm, 5);
        float speed = (float)wrenGetSlotDouble(vm, 6);
        int behaviorFlag = (int)wrenGetSlotDouble(vm, 7);
        float stoppingRange = (float)wrenGetSlotDouble(vm, 8);

        TASK::TASK_VEHICLE_GOTO_NAVMESH(ped, vehicle, x, y, z, speed, behaviorFlag, stoppingRange);
    }

    static void WREN_TASK_TASK_GO_TO_COORD_WHILE_AIMING_AT_COORD(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);
        float aimAtX = (float)wrenGetSlotDouble(vm, 5);
        float aimAtY = (float)wrenGetSlotDouble(vm, 6);
        float aimAtZ = (float)wrenGetSlotDouble(vm, 7);
        float moveBlendRatio = (float)wrenGetSlotDouble(vm, 8);
        BOOL shoot = (BOOL)wrenGetSlotBool(vm, 9);
        float targetRadius = (float)wrenGetSlotDouble(vm, 10);
        float slowDistance = (float)wrenGetSlotDouble(vm, 11);
        BOOL useNavMesh = (BOOL)wrenGetSlotBool(vm, 12);
        int navFlags = (int)wrenGetSlotDouble(vm, 13);
        BOOL instantBlendToAim = (BOOL)wrenGetSlotBool(vm, 14);
        Hash firingPattern = (Hash)wrenGetSlotDouble(vm, 15);

        TASK::TASK_GO_TO_COORD_WHILE_AIMING_AT_COORD(ped, x, y, z, aimAtX, aimAtY, aimAtZ, moveBlendRatio, shoot, targetRadius, slowDistance, useNavMesh, navFlags, instantBlendToAim, firingPattern);
    }

    static void WREN_TASK_TASK_GO_TO_COORD_WHILE_AIMING_AT_ENTITY(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);
        Entity aimAtID = (Entity)wrenGetSlotDouble(vm, 5);
        float moveBlendRatio = (float)wrenGetSlotDouble(vm, 6);
        BOOL shoot = (BOOL)wrenGetSlotBool(vm, 7);
        float targetRadius = (float)wrenGetSlotDouble(vm, 8);
        float slowDistance = (float)wrenGetSlotDouble(vm, 9);
        BOOL useNavMesh = (BOOL)wrenGetSlotBool(vm, 10);
        int navFlags = (int)wrenGetSlotDouble(vm, 11);
        BOOL instantBlendToAim = (BOOL)wrenGetSlotBool(vm, 12);
        Hash firingPattern = (Hash)wrenGetSlotDouble(vm, 13);
        int time = (int)wrenGetSlotDouble(vm, 14);

        TASK::TASK_GO_TO_COORD_WHILE_AIMING_AT_ENTITY(ped, x, y, z, aimAtID, moveBlendRatio, shoot, targetRadius, slowDistance, useNavMesh, navFlags, instantBlendToAim, firingPattern, time);
    }

    static void WREN_TASK_TASK_GO_TO_COORD_AND_AIM_AT_HATED_ENTITIES_NEAR_COORD(WrenVM* vm)
    {
        Ped pedHandle = (Ped)wrenGetSlotDouble(vm, 1);
        float goToLocationX = (float)wrenGetSlotDouble(vm, 2);
        float goToLocationY = (float)wrenGetSlotDouble(vm, 3);
        float goToLocationZ = (float)wrenGetSlotDouble(vm, 4);
        float focusLocationX = (float)wrenGetSlotDouble(vm, 5);
        float focusLocationY = (float)wrenGetSlotDouble(vm, 6);
        float focusLocationZ = (float)wrenGetSlotDouble(vm, 7);
        float speed = (float)wrenGetSlotDouble(vm, 8);
        BOOL shootAtEnemies = (BOOL)wrenGetSlotBool(vm, 9);
        float distanceToStopAt = (float)wrenGetSlotDouble(vm, 10);
        float noRoadsDistance = (float)wrenGetSlotDouble(vm, 11);
        BOOL useNavMesh = (BOOL)wrenGetSlotBool(vm, 12);
        int navFlags = (int)wrenGetSlotDouble(vm, 13);
        int taskFlags = (int)wrenGetSlotDouble(vm, 14);
        Hash firingPattern = (Hash)wrenGetSlotDouble(vm, 15);

        TASK::TASK_GO_TO_COORD_AND_AIM_AT_HATED_ENTITIES_NEAR_COORD(pedHandle, goToLocationX, goToLocationY, goToLocationZ, focusLocationX, focusLocationY, focusLocationZ, speed, shootAtEnemies, distanceToStopAt, noRoadsDistance, useNavMesh, navFlags, taskFlags, firingPattern);
    }

    static void WREN_TASK_TASK_GO_TO_ENTITY_WHILE_AIMING_AT_COORD(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Entity entity = (Entity)wrenGetSlotDouble(vm, 2);
        float aimX = (float)wrenGetSlotDouble(vm, 3);
        float aimY = (float)wrenGetSlotDouble(vm, 4);
        float aimZ = (float)wrenGetSlotDouble(vm, 5);
        float moveBlendRatio = (float)wrenGetSlotDouble(vm, 6);
        BOOL shoot = (BOOL)wrenGetSlotBool(vm, 7);
        float targetRadius = (float)wrenGetSlotDouble(vm, 8);
        float slowDistance = (float)wrenGetSlotDouble(vm, 9);
        BOOL useNavMesh = (BOOL)wrenGetSlotBool(vm, 10);
        BOOL instantBlendToAim = (BOOL)wrenGetSlotBool(vm, 11);
        Hash firingPattern = (Hash)wrenGetSlotDouble(vm, 12);

        TASK::TASK_GO_TO_ENTITY_WHILE_AIMING_AT_COORD(ped, entity, aimX, aimY, aimZ, moveBlendRatio, shoot, targetRadius, slowDistance, useNavMesh, instantBlendToAim, firingPattern);
    }

    static void WREN_TASK_TASK_GO_TO_ENTITY_WHILE_AIMING_AT_ENTITY(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Entity entityToWalkTo = (Entity)wrenGetSlotDouble(vm, 2);
        Entity entityToAimAt = (Entity)wrenGetSlotDouble(vm, 3);
        float speed = (float)wrenGetSlotDouble(vm, 4);
        BOOL shootatEntity = (BOOL)wrenGetSlotBool(vm, 5);
        float targetRadius = (float)wrenGetSlotDouble(vm, 6);
        float slowDistance = (float)wrenGetSlotDouble(vm, 7);
        BOOL useNavMesh = (BOOL)wrenGetSlotBool(vm, 8);
        BOOL instantBlendToAim = (BOOL)wrenGetSlotBool(vm, 9);
        Hash firingPattern = (Hash)wrenGetSlotDouble(vm, 10);

        TASK::TASK_GO_TO_ENTITY_WHILE_AIMING_AT_ENTITY(ped, entityToWalkTo, entityToAimAt, speed, shootatEntity, targetRadius, slowDistance, useNavMesh, instantBlendToAim, firingPattern);
    }

    static void WREN_TASK_SET_HIGH_FALL_TASK(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int minTime = (int)wrenGetSlotDouble(vm, 2);
        int maxTime = (int)wrenGetSlotDouble(vm, 3);
        int entryType = (int)wrenGetSlotDouble(vm, 4);

        TASK::SET_HIGH_FALL_TASK(ped, minTime, maxTime, entryType);
    }

    static void WREN_TASK_REQUEST_WAYPOINT_RECORDING(WrenVM* vm)
    {
        const char* name = wrenGetSlotString(vm, 1);

        TASK::REQUEST_WAYPOINT_RECORDING(name);
    }

    static void WREN_TASK_GET_IS_WAYPOINT_RECORDING_LOADED(WrenVM* vm)
    {
        const char* name = wrenGetSlotString(vm, 1);

        BOOL res = TASK::GET_IS_WAYPOINT_RECORDING_LOADED(name);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_TASK_REMOVE_WAYPOINT_RECORDING(WrenVM* vm)
    {
        const char* name = wrenGetSlotString(vm, 1);

        TASK::REMOVE_WAYPOINT_RECORDING(name);
    }

    static void WREN_TASK_WAYPOINT_RECORDING_GET_NUM_POINTS(WrenVM* vm)
    {
        const char* name = wrenGetSlotString(vm, 1);
        int points;

        BOOL res = TASK::WAYPOINT_RECORDING_GET_NUM_POINTS(name, &points);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, points);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_TASK_WAYPOINT_RECORDING_GET_COORD(WrenVM* vm)
    {
        const char* name = wrenGetSlotString(vm, 1);
        int point = (int)wrenGetSlotDouble(vm, 2);
        Vector3 coord;

        BOOL res = TASK::WAYPOINT_RECORDING_GET_COORD(name, point, &coord);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenGetVariable(vm, "natives", "Vector3", 2);
        Vector3* wren_coord = (Vector3*)wrenSetSlotNewForeign(vm, 3, 2, sizeof(Vector3));
        wren_coord->x = coord.x;
        wren_coord->y = coord.y;
        wren_coord->z = coord.z;
        wrenInsertInList(vm, 0, 1, 3);

    }

    static void WREN_TASK_WAYPOINT_RECORDING_GET_SPEED_AT_POINT(WrenVM* vm)
    {
        const char* name = wrenGetSlotString(vm, 1);
        int point = (int)wrenGetSlotDouble(vm, 2);

        float res = TASK::WAYPOINT_RECORDING_GET_SPEED_AT_POINT(name, point);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_TASK_WAYPOINT_RECORDING_GET_CLOSEST_WAYPOINT(WrenVM* vm)
    {
        const char* name = wrenGetSlotString(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);
        int point;

        BOOL res = TASK::WAYPOINT_RECORDING_GET_CLOSEST_WAYPOINT(name, x, y, z, &point);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, point);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_TASK_TASK_FOLLOW_WAYPOINT_RECORDING(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);

        TASK::TASK_FOLLOW_WAYPOINT_RECORDING(p0, p1, p2, p3, p4);
    }

    static void WREN_TASK_IS_WAYPOINT_PLAYBACK_GOING_ON_FOR_PED(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        BOOL res = TASK::IS_WAYPOINT_PLAYBACK_GOING_ON_FOR_PED(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_TASK_GET_PED_WAYPOINT_PROGRESS(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        int res = TASK::GET_PED_WAYPOINT_PROGRESS(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_TASK_GET_PED_WAYPOINT_DISTANCE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        float res = TASK::GET_PED_WAYPOINT_DISTANCE(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_TASK_SET_PED_WAYPOINT_ROUTE_OFFSET(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        Any res = TASK::SET_PED_WAYPOINT_ROUTE_OFFSET(p0, p1, p2, p3);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_TASK_GET_WAYPOINT_DISTANCE_ALONG_ROUTE(WrenVM* vm)
    {
        const char* p0 = wrenGetSlotString(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);

        float res = TASK::GET_WAYPOINT_DISTANCE_ALONG_ROUTE(p0, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_TASK_WAYPOINT_PLAYBACK_GET_IS_PAUSED(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        BOOL res = TASK::WAYPOINT_PLAYBACK_GET_IS_PAUSED(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_TASK_WAYPOINT_PLAYBACK_PAUSE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        TASK::WAYPOINT_PLAYBACK_PAUSE(p0, p1, p2);
    }

    static void WREN_TASK_WAYPOINT_PLAYBACK_RESUME(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        TASK::WAYPOINT_PLAYBACK_RESUME(p0, p1, p2, p3);
    }

    static void WREN_TASK_WAYPOINT_PLAYBACK_OVERRIDE_SPEED(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        TASK::WAYPOINT_PLAYBACK_OVERRIDE_SPEED(p0, p1, p2);
    }

    static void WREN_TASK_WAYPOINT_PLAYBACK_USE_DEFAULT_SPEED(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        TASK::WAYPOINT_PLAYBACK_USE_DEFAULT_SPEED(p0);
    }

    static void WREN_TASK_USE_WAYPOINT_RECORDING_AS_ASSISTED_MOVEMENT_ROUTE(WrenVM* vm)
    {
        const char* name = wrenGetSlotString(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        float p2 = (float)wrenGetSlotDouble(vm, 3);
        float p3 = (float)wrenGetSlotDouble(vm, 4);

        TASK::USE_WAYPOINT_RECORDING_AS_ASSISTED_MOVEMENT_ROUTE(name, p1, p2, p3);
    }

    static void WREN_TASK_WAYPOINT_PLAYBACK_START_AIMING_AT_PED(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        TASK::WAYPOINT_PLAYBACK_START_AIMING_AT_PED(p0, p1, p2);
    }

    static void WREN_TASK_WAYPOINT_PLAYBACK_START_AIMING_AT_COORD(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);
        float p2 = (float)wrenGetSlotDouble(vm, 3);
        float p3 = (float)wrenGetSlotDouble(vm, 4);
        BOOL p4 = (BOOL)wrenGetSlotBool(vm, 5);

        TASK::WAYPOINT_PLAYBACK_START_AIMING_AT_COORD(p0, p1, p2, p3, p4);
    }

    static void WREN_TASK_WAYPOINT_PLAYBACK_START_SHOOTING_AT_PED(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        TASK::WAYPOINT_PLAYBACK_START_SHOOTING_AT_PED(p0, p1, p2, p3);
    }

    static void WREN_TASK_WAYPOINT_PLAYBACK_START_SHOOTING_AT_COORD(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);
        float p2 = (float)wrenGetSlotDouble(vm, 3);
        float p3 = (float)wrenGetSlotDouble(vm, 4);
        BOOL p4 = (BOOL)wrenGetSlotBool(vm, 5);
        Any p5 = (Any)wrenGetSlotDouble(vm, 6);

        TASK::WAYPOINT_PLAYBACK_START_SHOOTING_AT_COORD(p0, p1, p2, p3, p4, p5);
    }

    static void WREN_TASK_WAYPOINT_PLAYBACK_STOP_AIMING_OR_SHOOTING(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        TASK::WAYPOINT_PLAYBACK_STOP_AIMING_OR_SHOOTING(p0);
    }

    static void WREN_TASK_ASSISTED_MOVEMENT_REQUEST_ROUTE(WrenVM* vm)
    {
        const char* route = wrenGetSlotString(vm, 1);

        TASK::ASSISTED_MOVEMENT_REQUEST_ROUTE(route);
    }

    static void WREN_TASK_ASSISTED_MOVEMENT_REMOVE_ROUTE(WrenVM* vm)
    {
        const char* route = wrenGetSlotString(vm, 1);

        TASK::ASSISTED_MOVEMENT_REMOVE_ROUTE(route);
    }

    static void WREN_TASK_ASSISTED_MOVEMENT_IS_ROUTE_LOADED(WrenVM* vm)
    {
        const char* route = wrenGetSlotString(vm, 1);

        BOOL res = TASK::ASSISTED_MOVEMENT_IS_ROUTE_LOADED(route);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_TASK_ASSISTED_MOVEMENT_SET_ROUTE_PROPERTIES(WrenVM* vm)
    {
        const char* route = wrenGetSlotString(vm, 1);
        int props = (int)wrenGetSlotDouble(vm, 2);

        TASK::ASSISTED_MOVEMENT_SET_ROUTE_PROPERTIES(route, props);
    }

    static void WREN_TASK_ASSISTED_MOVEMENT_OVERRIDE_LOAD_DISTANCE_THIS_FRAME(WrenVM* vm)
    {
        float dist = (float)wrenGetSlotDouble(vm, 1);

        TASK::ASSISTED_MOVEMENT_OVERRIDE_LOAD_DISTANCE_THIS_FRAME(dist);
    }

    static void WREN_TASK_TASK_VEHICLE_FOLLOW_WAYPOINT_RECORDING(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 2);
        const char* WPRecording = wrenGetSlotString(vm, 3);
        int p3 = (int)wrenGetSlotDouble(vm, 4);
        int p4 = (int)wrenGetSlotDouble(vm, 5);
        int p5 = (int)wrenGetSlotDouble(vm, 6);
        int p6 = (int)wrenGetSlotDouble(vm, 7);
        float p7 = (float)wrenGetSlotDouble(vm, 8);
        BOOL p8 = (BOOL)wrenGetSlotBool(vm, 9);
        float p9 = (float)wrenGetSlotDouble(vm, 10);

        TASK::TASK_VEHICLE_FOLLOW_WAYPOINT_RECORDING(ped, vehicle, WPRecording, p3, p4, p5, p6, p7, p8, p9);
    }

    static void WREN_TASK_IS_WAYPOINT_PLAYBACK_GOING_ON_FOR_VEHICLE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        BOOL res = TASK::IS_WAYPOINT_PLAYBACK_GOING_ON_FOR_VEHICLE(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_TASK_GET_VEHICLE_WAYPOINT_PROGRESS(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        int res = TASK::GET_VEHICLE_WAYPOINT_PROGRESS(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_TASK_GET_VEHICLE_WAYPOINT_TARGET_POINT(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        int res = TASK::GET_VEHICLE_WAYPOINT_TARGET_POINT(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_TASK_VEHICLE_WAYPOINT_PLAYBACK_PAUSE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        TASK::VEHICLE_WAYPOINT_PLAYBACK_PAUSE(vehicle);
    }

    static void WREN_TASK_VEHICLE_WAYPOINT_PLAYBACK_RESUME(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        TASK::VEHICLE_WAYPOINT_PLAYBACK_RESUME(vehicle);
    }

    static void WREN_TASK_VEHICLE_WAYPOINT_PLAYBACK_USE_DEFAULT_SPEED(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        TASK::VEHICLE_WAYPOINT_PLAYBACK_USE_DEFAULT_SPEED(vehicle);
    }

    static void WREN_TASK_VEHICLE_WAYPOINT_PLAYBACK_OVERRIDE_SPEED(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        float speed = (float)wrenGetSlotDouble(vm, 2);

        TASK::VEHICLE_WAYPOINT_PLAYBACK_OVERRIDE_SPEED(vehicle, speed);
    }

    static void WREN_TASK_TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        TASK::TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS(ped, toggle);
    }

    static void WREN_TASK_TASK_FORCE_MOTION_STATE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Hash state = (Hash)wrenGetSlotDouble(vm, 2);
        BOOL forceRestart = (BOOL)wrenGetSlotBool(vm, 3);

        TASK::TASK_FORCE_MOTION_STATE(ped, state, forceRestart);
    }

    static void WREN_TASK_TASK_MOVE_NETWORK_BY_NAME(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        const char* task = wrenGetSlotString(vm, 2);
        float multiplier = (float)wrenGetSlotDouble(vm, 3);
        BOOL allowOverrideCloneUpdate = (BOOL)wrenGetSlotBool(vm, 4);
        const char* animDict = wrenGetSlotString(vm, 5);
        int flags = (int)wrenGetSlotDouble(vm, 6);

        TASK::TASK_MOVE_NETWORK_BY_NAME(ped, task, multiplier, allowOverrideCloneUpdate, animDict, flags);
    }

    static void WREN_TASK_TASK_MOVE_NETWORK_ADVANCED_BY_NAME(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        const char* network = wrenGetSlotString(vm, 2);
        float x = (float)wrenGetSlotDouble(vm, 3);
        float y = (float)wrenGetSlotDouble(vm, 4);
        float z = (float)wrenGetSlotDouble(vm, 5);
        float rotX = (float)wrenGetSlotDouble(vm, 6);
        float rotY = (float)wrenGetSlotDouble(vm, 7);
        float rotZ = (float)wrenGetSlotDouble(vm, 8);
        int rotOrder = (int)wrenGetSlotDouble(vm, 9);
        float blendDuration = (float)wrenGetSlotDouble(vm, 10);
        BOOL allowOverrideCloneUpdate = (BOOL)wrenGetSlotBool(vm, 11);
        const char* animDict = wrenGetSlotString(vm, 12);
        int flags = (int)wrenGetSlotDouble(vm, 13);

        TASK::TASK_MOVE_NETWORK_ADVANCED_BY_NAME(ped, network, x, y, z, rotX, rotY, rotZ, rotOrder, blendDuration, allowOverrideCloneUpdate, animDict, flags);
    }

    static void WREN_TASK_TASK_MOVE_NETWORK_BY_NAME_WITH_INIT_PARAMS(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        const char* network = wrenGetSlotString(vm, 2);
        int initialParameters;
        float blendDuration = (float)wrenGetSlotDouble(vm, 3);
        BOOL allowOverrideCloneUpdate = (BOOL)wrenGetSlotBool(vm, 4);
        const char* animDict = wrenGetSlotString(vm, 5);
        int flags = (int)wrenGetSlotDouble(vm, 6);

        TASK::TASK_MOVE_NETWORK_BY_NAME_WITH_INIT_PARAMS(ped, network, &initialParameters, blendDuration, allowOverrideCloneUpdate, animDict, flags);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_TASK_TASK_MOVE_NETWORK_ADVANCED_BY_NAME_WITH_INIT_PARAMS(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        const char* network = wrenGetSlotString(vm, 2);
        int initialParameters;
        float x = (float)wrenGetSlotDouble(vm, 3);
        float y = (float)wrenGetSlotDouble(vm, 4);
        float z = (float)wrenGetSlotDouble(vm, 5);
        float rotX = (float)wrenGetSlotDouble(vm, 6);
        float rotY = (float)wrenGetSlotDouble(vm, 7);
        float rotZ = (float)wrenGetSlotDouble(vm, 8);
        int rotOrder = (int)wrenGetSlotDouble(vm, 9);
        float blendDuration = (float)wrenGetSlotDouble(vm, 10);
        BOOL allowOverrideCloneUpdate = (BOOL)wrenGetSlotBool(vm, 11);
        const char* dictionary = wrenGetSlotString(vm, 12);
        int flags = (int)wrenGetSlotDouble(vm, 13);

        TASK::TASK_MOVE_NETWORK_ADVANCED_BY_NAME_WITH_INIT_PARAMS(ped, network, &initialParameters, x, y, z, rotX, rotY, rotZ, rotOrder, blendDuration, allowOverrideCloneUpdate, dictionary, flags);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_TASK_IS_TASK_MOVE_NETWORK_ACTIVE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = TASK::IS_TASK_MOVE_NETWORK_ACTIVE(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_TASK_IS_TASK_MOVE_NETWORK_READY_FOR_TRANSITION(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = TASK::IS_TASK_MOVE_NETWORK_READY_FOR_TRANSITION(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_TASK_REQUEST_TASK_MOVE_NETWORK_STATE_TRANSITION(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        const char* name = wrenGetSlotString(vm, 2);

        BOOL res = TASK::REQUEST_TASK_MOVE_NETWORK_STATE_TRANSITION(ped, name);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_TASK_SET_EXPECTED_CLONE_NEXT_TASK_MOVE_NETWORK_STATE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        const char* state = wrenGetSlotString(vm, 2);

        Any res = TASK::SET_EXPECTED_CLONE_NEXT_TASK_MOVE_NETWORK_STATE(ped, state);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_TASK_GET_TASK_MOVE_NETWORK_STATE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        const char* res = TASK::GET_TASK_MOVE_NETWORK_STATE(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotString(vm, 0, res);
    }

    static void WREN_TASK_SET_TASK_MOVE_NETWORK_ANIM_SET(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Hash clipSet = (Hash)wrenGetSlotDouble(vm, 2);
        Hash variableClipSet = (Hash)wrenGetSlotDouble(vm, 3);

        TASK::SET_TASK_MOVE_NETWORK_ANIM_SET(ped, clipSet, variableClipSet);
    }

    static void WREN_TASK_SET_TASK_MOVE_NETWORK_SIGNAL_FLOAT(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        const char* signalName = wrenGetSlotString(vm, 2);
        float value = (float)wrenGetSlotDouble(vm, 3);

        TASK::SET_TASK_MOVE_NETWORK_SIGNAL_FLOAT(ped, signalName, value);
    }

    static void WREN_TASK_SET_TASK_MOVE_NETWORK_SIGNAL_LOCAL_FLOAT(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        const char* signalName = wrenGetSlotString(vm, 2);
        float value = (float)wrenGetSlotDouble(vm, 3);

        TASK::SET_TASK_MOVE_NETWORK_SIGNAL_LOCAL_FLOAT(ped, signalName, value);
    }

    static void WREN_TASK_SET_TASK_MOVE_NETWORK_SIGNAL_FLOAT_LERP_RATE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        const char* signalName = wrenGetSlotString(vm, 2);
        float value = (float)wrenGetSlotDouble(vm, 3);

        TASK::SET_TASK_MOVE_NETWORK_SIGNAL_FLOAT_LERP_RATE(ped, signalName, value);
    }

    static void WREN_TASK_SET_TASK_MOVE_NETWORK_SIGNAL_BOOL(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        const char* signalName = wrenGetSlotString(vm, 2);
        BOOL value = (BOOL)wrenGetSlotBool(vm, 3);

        TASK::SET_TASK_MOVE_NETWORK_SIGNAL_BOOL(ped, signalName, value);
    }

    static void WREN_TASK_GET_TASK_MOVE_NETWORK_SIGNAL_FLOAT(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        const char* signalName = wrenGetSlotString(vm, 2);

        float res = TASK::GET_TASK_MOVE_NETWORK_SIGNAL_FLOAT(ped, signalName);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_TASK_GET_TASK_MOVE_NETWORK_SIGNAL_BOOL(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        const char* signalName = wrenGetSlotString(vm, 2);

        BOOL res = TASK::GET_TASK_MOVE_NETWORK_SIGNAL_BOOL(ped, signalName);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_TASK_GET_TASK_MOVE_NETWORK_EVENT(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        const char* eventName = wrenGetSlotString(vm, 2);

        BOOL res = TASK::GET_TASK_MOVE_NETWORK_EVENT(ped, eventName);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_TASK_SET_TASK_MOVE_NETWORK_ENABLE_COLLISION_ON_NETWORK_CLONE_WHEN_FIXED(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL enable = (BOOL)wrenGetSlotBool(vm, 2);

        Any res = TASK::SET_TASK_MOVE_NETWORK_ENABLE_COLLISION_ON_NETWORK_CLONE_WHEN_FIXED(ped, enable);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_TASK_IS_MOVE_BLEND_RATIO_STILL(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = TASK::IS_MOVE_BLEND_RATIO_STILL(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_TASK_IS_MOVE_BLEND_RATIO_WALKING(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = TASK::IS_MOVE_BLEND_RATIO_WALKING(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_TASK_IS_MOVE_BLEND_RATIO_RUNNING(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = TASK::IS_MOVE_BLEND_RATIO_RUNNING(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_TASK_IS_MOVE_BLEND_RATIO_SPRINTING(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = TASK::IS_MOVE_BLEND_RATIO_SPRINTING(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_TASK_IS_PED_STILL(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = TASK::IS_PED_STILL(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_TASK_IS_PED_WALKING(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = TASK::IS_PED_WALKING(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_TASK_IS_PED_RUNNING(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = TASK::IS_PED_RUNNING(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_TASK_IS_PED_SPRINTING(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = TASK::IS_PED_SPRINTING(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_TASK_IS_PED_STRAFING(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = TASK::IS_PED_STRAFING(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_TASK_TASK_SYNCHRONIZED_SCENE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int scene = (int)wrenGetSlotDouble(vm, 2);
        const char* animDictionary = wrenGetSlotString(vm, 3);
        const char* animationName = wrenGetSlotString(vm, 4);
        float blendIn = (float)wrenGetSlotDouble(vm, 5);
        float blendOut = (float)wrenGetSlotDouble(vm, 6);
        int flags = (int)wrenGetSlotDouble(vm, 7);
        int ragdollBlockingFlags = (int)wrenGetSlotDouble(vm, 8);
        float moverBlendDelta = (float)wrenGetSlotDouble(vm, 9);
        int ikFlags = (int)wrenGetSlotDouble(vm, 10);

        TASK::TASK_SYNCHRONIZED_SCENE(ped, scene, animDictionary, animationName, blendIn, blendOut, flags, ragdollBlockingFlags, moverBlendDelta, ikFlags);
    }

    static void WREN_TASK_TASK_AGITATED_ACTION_CONFRONT_RESPONSE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Ped ped2 = (Ped)wrenGetSlotDouble(vm, 2);

        TASK::TASK_AGITATED_ACTION_CONFRONT_RESPONSE(ped, ped2);
    }

    static void WREN_TASK_TASK_SWEEP_AIM_ENTITY(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        const char* animDict = wrenGetSlotString(vm, 2);
        const char* lowAnimName = wrenGetSlotString(vm, 3);
        const char* medAnimName = wrenGetSlotString(vm, 4);
        const char* hiAnimName = wrenGetSlotString(vm, 5);
        int runtime = (int)wrenGetSlotDouble(vm, 6);
        Entity targetEntity = (Entity)wrenGetSlotDouble(vm, 7);
        float turnRate = (float)wrenGetSlotDouble(vm, 8);
        float blendInDuration = (float)wrenGetSlotDouble(vm, 9);

        TASK::TASK_SWEEP_AIM_ENTITY(ped, animDict, lowAnimName, medAnimName, hiAnimName, runtime, targetEntity, turnRate, blendInDuration);
    }

    static void WREN_TASK_UPDATE_TASK_SWEEP_AIM_ENTITY(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Entity entity = (Entity)wrenGetSlotDouble(vm, 2);

        TASK::UPDATE_TASK_SWEEP_AIM_ENTITY(ped, entity);
    }

    static void WREN_TASK_TASK_SWEEP_AIM_POSITION(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        const char* animDict = wrenGetSlotString(vm, 2);
        const char* lowAnimName = wrenGetSlotString(vm, 3);
        const char* medAnimName = wrenGetSlotString(vm, 4);
        const char* hiAnimName = wrenGetSlotString(vm, 5);
        int runtime = (int)wrenGetSlotDouble(vm, 6);
        float x = (float)wrenGetSlotDouble(vm, 7);
        float y = (float)wrenGetSlotDouble(vm, 8);
        float z = (float)wrenGetSlotDouble(vm, 9);
        float turnRate = (float)wrenGetSlotDouble(vm, 10);
        float blendInDuration = (float)wrenGetSlotDouble(vm, 11);

        TASK::TASK_SWEEP_AIM_POSITION(ped, animDict, lowAnimName, medAnimName, hiAnimName, runtime, x, y, z, turnRate, blendInDuration);
    }

    static void WREN_TASK_UPDATE_TASK_SWEEP_AIM_POSITION(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);

        TASK::UPDATE_TASK_SWEEP_AIM_POSITION(ped, x, y, z);
    }

    static void WREN_TASK_TASK_ARREST_PED(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Ped target = (Ped)wrenGetSlotDouble(vm, 2);

        TASK::TASK_ARREST_PED(ped, target);
    }

    static void WREN_TASK_IS_PED_RUNNING_ARREST_TASK(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = TASK::IS_PED_RUNNING_ARREST_TASK(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_TASK_IS_PED_BEING_ARRESTED(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = TASK::IS_PED_BEING_ARRESTED(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_TASK_UNCUFF_PED(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        TASK::UNCUFF_PED(ped);
    }

    static void WREN_TASK_IS_PED_CUFFED(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = TASK::IS_PED_CUFFED(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }


    static void WREN_VEHICLE_CREATE_VEHICLE(WrenVM* vm)
    {
        Hash modelHash = (Hash)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);
        float heading = (float)wrenGetSlotDouble(vm, 5);
        BOOL isNetwork = (BOOL)wrenGetSlotBool(vm, 6);
        BOOL bScriptHostVeh = (BOOL)wrenGetSlotBool(vm, 7);
        BOOL p7 = (BOOL)wrenGetSlotBool(vm, 8);

        Vehicle res = VEHICLE::CREATE_VEHICLE(modelHash, x, y, z, heading, isNetwork, bScriptHostVeh, p7);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_DELETE_VEHICLE(WrenVM* vm)
    {
        Vehicle vehicle;

        VEHICLE::DELETE_VEHICLE(&vehicle);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_VEHICLE_SET_VEHICLE_ALLOW_HOMING_MISSLE_LOCKON(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        VEHICLE::SET_VEHICLE_ALLOW_HOMING_MISSLE_LOCKON(vehicle, toggle, p2);
    }

    static void WREN_VEHICLE_SET_VEHICLE_ALLOW_HOMING_MISSLE_LOCKON_SYNCED(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL canBeLockedOn = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL unk = (BOOL)wrenGetSlotBool(vm, 3);

        VEHICLE::SET_VEHICLE_ALLOW_HOMING_MISSLE_LOCKON_SYNCED(vehicle, canBeLockedOn, unk);
    }

    static void WREN_VEHICLE_SET_VEHICLE_ALLOW_NO_PASSENGERS_LOCKON(WrenVM* vm)
    {
        Vehicle veh = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_VEHICLE_ALLOW_NO_PASSENGERS_LOCKON(veh, toggle);
    }

    static void WREN_VEHICLE_GET_VEHICLE_HOMING_LOCKON_STATE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        int res = VEHICLE::GET_VEHICLE_HOMING_LOCKON_STATE(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_GET_VEHICLE_HOMING_LOCKEDONTO_STATE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        Any res = VEHICLE::GET_VEHICLE_HOMING_LOCKEDONTO_STATE(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_SET_VEHICLE_HOMING_LOCKEDONTO_STATE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_VEHICLE_HOMING_LOCKEDONTO_STATE(p0, p1);
    }

    static void WREN_VEHICLE_IS_VEHICLE_MODEL(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        Hash model = (Hash)wrenGetSlotDouble(vm, 2);

        BOOL res = VEHICLE::IS_VEHICLE_MODEL(vehicle, model);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_DOES_SCRIPT_VEHICLE_GENERATOR_EXIST(WrenVM* vm)
    {
        int vehicleGenerator = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::DOES_SCRIPT_VEHICLE_GENERATOR_EXIST(vehicleGenerator);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_CREATE_SCRIPT_VEHICLE_GENERATOR(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        float heading = (float)wrenGetSlotDouble(vm, 4);
        float p4 = (float)wrenGetSlotDouble(vm, 5);
        float p5 = (float)wrenGetSlotDouble(vm, 6);
        Hash modelHash = (Hash)wrenGetSlotDouble(vm, 7);
        int p7 = (int)wrenGetSlotDouble(vm, 8);
        int p8 = (int)wrenGetSlotDouble(vm, 9);
        int p9 = (int)wrenGetSlotDouble(vm, 10);
        int p10 = (int)wrenGetSlotDouble(vm, 11);
        BOOL p11 = (BOOL)wrenGetSlotBool(vm, 12);
        BOOL p12 = (BOOL)wrenGetSlotBool(vm, 13);
        BOOL p13 = (BOOL)wrenGetSlotBool(vm, 14);
        BOOL p14 = (BOOL)wrenGetSlotBool(vm, 15);
        BOOL p15 = (BOOL)wrenGetSlotBool(vm, 16);
        int p16 = (int)wrenGetSlotDouble(vm, 17);

        int res = VEHICLE::CREATE_SCRIPT_VEHICLE_GENERATOR(x, y, z, heading, p4, p5, modelHash, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_DELETE_SCRIPT_VEHICLE_GENERATOR(WrenVM* vm)
    {
        int vehicleGenerator = (int)wrenGetSlotDouble(vm, 1);

        VEHICLE::DELETE_SCRIPT_VEHICLE_GENERATOR(vehicleGenerator);
    }

    static void WREN_VEHICLE_SET_SCRIPT_VEHICLE_GENERATOR(WrenVM* vm)
    {
        int vehicleGenerator = (int)wrenGetSlotDouble(vm, 1);
        BOOL enabled = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_SCRIPT_VEHICLE_GENERATOR(vehicleGenerator, enabled);
    }

    static void WREN_VEHICLE_SET_ALL_VEHICLE_GENERATORS_ACTIVE_IN_AREA(WrenVM* vm)
    {
        float x1 = (float)wrenGetSlotDouble(vm, 1);
        float y1 = (float)wrenGetSlotDouble(vm, 2);
        float z1 = (float)wrenGetSlotDouble(vm, 3);
        float x2 = (float)wrenGetSlotDouble(vm, 4);
        float y2 = (float)wrenGetSlotDouble(vm, 5);
        float z2 = (float)wrenGetSlotDouble(vm, 6);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 7);
        BOOL p7 = (BOOL)wrenGetSlotBool(vm, 8);

        VEHICLE::SET_ALL_VEHICLE_GENERATORS_ACTIVE_IN_AREA(x1, y1, z1, x2, y2, z2, toggle, p7);
    }

    static void WREN_VEHICLE_SET_ALL_VEHICLE_GENERATORS_ACTIVE(WrenVM* vm)
    {

        VEHICLE::SET_ALL_VEHICLE_GENERATORS_ACTIVE();
    }

    static void WREN_VEHICLE_SET_ALL_LOW_PRIORITY_VEHICLE_GENERATORS_ACTIVE(WrenVM* vm)
    {
        BOOL active = (BOOL)wrenGetSlotBool(vm, 1);

        VEHICLE::SET_ALL_LOW_PRIORITY_VEHICLE_GENERATORS_ACTIVE(active);
    }

    static void WREN_VEHICLE_SET_VEHICLE_GENERATOR_AREA_OF_INTEREST(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        float radius = (float)wrenGetSlotDouble(vm, 4);

        VEHICLE::SET_VEHICLE_GENERATOR_AREA_OF_INTEREST(x, y, z, radius);
    }

    static void WREN_VEHICLE_CLEAR_VEHICLE_GENERATOR_AREA_OF_INTEREST(WrenVM* vm)
    {

        VEHICLE::CLEAR_VEHICLE_GENERATOR_AREA_OF_INTEREST();
    }

    static void WREN_VEHICLE_SET_VEHICLE_ON_GROUND_PROPERLY(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);

        BOOL res = VEHICLE::SET_VEHICLE_ON_GROUND_PROPERLY(vehicle, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_SET_VEHICLE_USE_CUTSCENE_WHEEL_COMPRESSION(WrenVM* vm)
    {
        Vehicle p0 = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);
        BOOL p3 = (BOOL)wrenGetSlotBool(vm, 4);

        Any res = VEHICLE::SET_VEHICLE_USE_CUTSCENE_WHEEL_COMPRESSION(p0, p1, p2, p3);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_IS_VEHICLE_STUCK_ON_ROOF(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::IS_VEHICLE_STUCK_ON_ROOF(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_ADD_VEHICLE_UPSIDEDOWN_CHECK(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        VEHICLE::ADD_VEHICLE_UPSIDEDOWN_CHECK(vehicle);
    }

    static void WREN_VEHICLE_REMOVE_VEHICLE_UPSIDEDOWN_CHECK(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        VEHICLE::REMOVE_VEHICLE_UPSIDEDOWN_CHECK(vehicle);
    }

    static void WREN_VEHICLE_IS_VEHICLE_STOPPED(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::IS_VEHICLE_STOPPED(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_GET_VEHICLE_NUMBER_OF_PASSENGERS(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL includeDriver = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL includeDeadOccupants = (BOOL)wrenGetSlotBool(vm, 3);

        int res = VEHICLE::GET_VEHICLE_NUMBER_OF_PASSENGERS(vehicle, includeDriver, includeDeadOccupants);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_GET_VEHICLE_MAX_NUMBER_OF_PASSENGERS(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        int res = VEHICLE::GET_VEHICLE_MAX_NUMBER_OF_PASSENGERS(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_GET_VEHICLE_MODEL_NUMBER_OF_SEATS(WrenVM* vm)
    {
        Hash modelHash = (Hash)wrenGetSlotDouble(vm, 1);

        int res = VEHICLE::GET_VEHICLE_MODEL_NUMBER_OF_SEATS(modelHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_IS_SEAT_WARP_ONLY(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int seatIndex = (int)wrenGetSlotDouble(vm, 2);

        BOOL res = VEHICLE::IS_SEAT_WARP_ONLY(vehicle, seatIndex);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_IS_TURRET_SEAT(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int seatIndex = (int)wrenGetSlotDouble(vm, 2);

        BOOL res = VEHICLE::IS_TURRET_SEAT(vehicle, seatIndex);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_DOES_VEHICLE_ALLOW_RAPPEL(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::DOES_VEHICLE_ALLOW_RAPPEL(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_SET_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME(WrenVM* vm)
    {
        float multiplier = (float)wrenGetSlotDouble(vm, 1);

        VEHICLE::SET_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME(multiplier);
    }

    static void WREN_VEHICLE_SET_RANDOM_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME(WrenVM* vm)
    {
        float multiplier = (float)wrenGetSlotDouble(vm, 1);

        VEHICLE::SET_RANDOM_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME(multiplier);
    }

    static void WREN_VEHICLE_SET_PARKED_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME(WrenVM* vm)
    {
        float multiplier = (float)wrenGetSlotDouble(vm, 1);

        VEHICLE::SET_PARKED_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME(multiplier);
    }

    static void WREN_VEHICLE_SET_DISABLE_RANDOM_TRAINS_THIS_FRAME(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        VEHICLE::SET_DISABLE_RANDOM_TRAINS_THIS_FRAME(toggle);
    }

    static void WREN_VEHICLE_SET_AMBIENT_VEHICLE_RANGE_MULTIPLIER_THIS_FRAME(WrenVM* vm)
    {
        float value = (float)wrenGetSlotDouble(vm, 1);

        VEHICLE::SET_AMBIENT_VEHICLE_RANGE_MULTIPLIER_THIS_FRAME(value);
    }

    static void WREN_VEHICLE_SET_FAR_DRAW_VEHICLES(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        VEHICLE::SET_FAR_DRAW_VEHICLES(toggle);
    }

    static void WREN_VEHICLE_SET_NUMBER_OF_PARKED_VEHICLES(WrenVM* vm)
    {
        int value = (int)wrenGetSlotDouble(vm, 1);

        VEHICLE::SET_NUMBER_OF_PARKED_VEHICLES(value);
    }

    static void WREN_VEHICLE_SET_VEHICLE_DOORS_LOCKED(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int doorLockStatus = (int)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_VEHICLE_DOORS_LOCKED(vehicle, doorLockStatus);
    }

    static void WREN_VEHICLE_SET_VEHICLE_INDIVIDUAL_DOORS_LOCKED(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int doorId = (int)wrenGetSlotDouble(vm, 2);
        int doorLockStatus = (int)wrenGetSlotDouble(vm, 3);

        VEHICLE::SET_VEHICLE_INDIVIDUAL_DOORS_LOCKED(vehicle, doorId, doorLockStatus);
    }

    static void WREN_VEHICLE_SET_VEHICLE_HAS_MUTED_SIRENS(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_VEHICLE_HAS_MUTED_SIRENS(vehicle, toggle);
    }

    static void WREN_VEHICLE_SET_VEHICLE_DOORS_LOCKED_FOR_PLAYER(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        Player player = (Player)wrenGetSlotDouble(vm, 2);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 3);

        VEHICLE::SET_VEHICLE_DOORS_LOCKED_FOR_PLAYER(vehicle, player, toggle);
    }

    static void WREN_VEHICLE_GET_VEHICLE_DOORS_LOCKED_FOR_PLAYER(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        Player player = (Player)wrenGetSlotDouble(vm, 2);

        BOOL res = VEHICLE::GET_VEHICLE_DOORS_LOCKED_FOR_PLAYER(vehicle, player);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_SET_VEHICLE_DOORS_LOCKED_FOR_ALL_PLAYERS(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_VEHICLE_DOORS_LOCKED_FOR_ALL_PLAYERS(vehicle, toggle);
    }

    static void WREN_VEHICLE_SET_VEHICLE_DOORS_LOCKED_FOR_NON_SCRIPT_PLAYERS(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_VEHICLE_DOORS_LOCKED_FOR_NON_SCRIPT_PLAYERS(vehicle, toggle);
    }

    static void WREN_VEHICLE_SET_VEHICLE_DOORS_LOCKED_FOR_TEAM(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int team = (int)wrenGetSlotDouble(vm, 2);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 3);

        VEHICLE::SET_VEHICLE_DOORS_LOCKED_FOR_TEAM(vehicle, team, toggle);
    }

    static void WREN_VEHICLE_SET_VEHICLE_DOORS_LOCKED_FOR_ALL_TEAMS(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_VEHICLE_DOORS_LOCKED_FOR_ALL_TEAMS(vehicle, toggle);
    }

    static void WREN_VEHICLE_SET_VEHICLE_DONT_TERMINATE_TASK_WHEN_ACHIEVED(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        VEHICLE::SET_VEHICLE_DONT_TERMINATE_TASK_WHEN_ACHIEVED(vehicle);
    }

    static void WREN_VEHICLE_EXPLODE_VEHICLE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL isAudible = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL isInvisible = (BOOL)wrenGetSlotBool(vm, 3);

        VEHICLE::EXPLODE_VEHICLE(vehicle, isAudible, isInvisible);
    }

    static void WREN_VEHICLE_SET_VEHICLE_OUT_OF_CONTROL(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL killDriver = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL explodeOnImpact = (BOOL)wrenGetSlotBool(vm, 3);

        VEHICLE::SET_VEHICLE_OUT_OF_CONTROL(vehicle, killDriver, explodeOnImpact);
    }

    static void WREN_VEHICLE_SET_VEHICLE_TIMED_EXPLOSION(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        Ped ped = (Ped)wrenGetSlotDouble(vm, 2);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 3);

        VEHICLE::SET_VEHICLE_TIMED_EXPLOSION(vehicle, ped, toggle);
    }

    static void WREN_VEHICLE_ADD_VEHICLE_PHONE_EXPLOSIVE_DEVICE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        VEHICLE::ADD_VEHICLE_PHONE_EXPLOSIVE_DEVICE(vehicle);
    }

    static void WREN_VEHICLE_CLEAR_VEHICLE_PHONE_EXPLOSIVE_DEVICE(WrenVM* vm)
    {

        VEHICLE::CLEAR_VEHICLE_PHONE_EXPLOSIVE_DEVICE();
    }

    static void WREN_VEHICLE_HAS_VEHICLE_PHONE_EXPLOSIVE_DEVICE(WrenVM* vm)
    {

        BOOL res = VEHICLE::HAS_VEHICLE_PHONE_EXPLOSIVE_DEVICE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_DETONATE_VEHICLE_PHONE_EXPLOSIVE_DEVICE(WrenVM* vm)
    {

        VEHICLE::DETONATE_VEHICLE_PHONE_EXPLOSIVE_DEVICE();
    }

    static void WREN_VEHICLE_SET_TAXI_LIGHTS(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL state = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_TAXI_LIGHTS(vehicle, state);
    }

    static void WREN_VEHICLE_IS_TAXI_LIGHT_ON(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::IS_TAXI_LIGHT_ON(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_IS_VEHICLE_IN_GARAGE_AREA(WrenVM* vm)
    {
        const char* garageName = wrenGetSlotString(vm, 1);
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 2);

        BOOL res = VEHICLE::IS_VEHICLE_IN_GARAGE_AREA(garageName, vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_SET_VEHICLE_COLOURS(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int colorPrimary = (int)wrenGetSlotDouble(vm, 2);
        int colorSecondary = (int)wrenGetSlotDouble(vm, 3);

        VEHICLE::SET_VEHICLE_COLOURS(vehicle, colorPrimary, colorSecondary);
    }

    static void WREN_VEHICLE_SET_VEHICLE_FULLBEAM(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_VEHICLE_FULLBEAM(vehicle, toggle);
    }

    static void WREN_VEHICLE_SET_VEHICLE_IS_RACING(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_VEHICLE_IS_RACING(vehicle, toggle);
    }

    static void WREN_VEHICLE_SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int r = (int)wrenGetSlotDouble(vm, 2);
        int g = (int)wrenGetSlotDouble(vm, 3);
        int b = (int)wrenGetSlotDouble(vm, 4);

        VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(vehicle, r, g, b);
    }

    static void WREN_VEHICLE_GET_VEHICLE_CUSTOM_PRIMARY_COLOUR(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int r;
        int g;
        int b;

        VEHICLE::GET_VEHICLE_CUSTOM_PRIMARY_COLOUR(vehicle, &r, &g, &b);

        wrenEnsureSlots(vm, 6);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, r);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, g);
        wrenInsertInList(vm, 0, 1, 2);

        wrenSetSlotDouble(vm, 3, b);
        wrenInsertInList(vm, 0, 2, 3);

    }

    static void WREN_VEHICLE_CLEAR_VEHICLE_CUSTOM_PRIMARY_COLOUR(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        VEHICLE::CLEAR_VEHICLE_CUSTOM_PRIMARY_COLOUR(vehicle);
    }

    static void WREN_VEHICLE_GET_IS_VEHICLE_PRIMARY_COLOUR_CUSTOM(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::GET_IS_VEHICLE_PRIMARY_COLOUR_CUSTOM(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int r = (int)wrenGetSlotDouble(vm, 2);
        int g = (int)wrenGetSlotDouble(vm, 3);
        int b = (int)wrenGetSlotDouble(vm, 4);

        VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(vehicle, r, g, b);
    }

    static void WREN_VEHICLE_GET_VEHICLE_CUSTOM_SECONDARY_COLOUR(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int r;
        int g;
        int b;

        VEHICLE::GET_VEHICLE_CUSTOM_SECONDARY_COLOUR(vehicle, &r, &g, &b);

        wrenEnsureSlots(vm, 6);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, r);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, g);
        wrenInsertInList(vm, 0, 1, 2);

        wrenSetSlotDouble(vm, 3, b);
        wrenInsertInList(vm, 0, 2, 3);

    }

    static void WREN_VEHICLE_CLEAR_VEHICLE_CUSTOM_SECONDARY_COLOUR(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        VEHICLE::CLEAR_VEHICLE_CUSTOM_SECONDARY_COLOUR(vehicle);
    }

    static void WREN_VEHICLE_GET_IS_VEHICLE_SECONDARY_COLOUR_CUSTOM(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::GET_IS_VEHICLE_SECONDARY_COLOUR_CUSTOM(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_SET_VEHICLE_ENVEFF_SCALE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        float fade = (float)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_VEHICLE_ENVEFF_SCALE(vehicle, fade);
    }

    static void WREN_VEHICLE_GET_VEHICLE_ENVEFF_SCALE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        float res = VEHICLE::GET_VEHICLE_ENVEFF_SCALE(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_SET_CAN_RESPRAY_VEHICLE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL state = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_CAN_RESPRAY_VEHICLE(vehicle, state);
    }

    static void WREN_VEHICLE_SET_GOON_BOSS_VEHICLE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_GOON_BOSS_VEHICLE(p0, p1);
    }

    static void WREN_VEHICLE_SET_OPEN_REAR_DOORS_ON_EXPLOSION(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_OPEN_REAR_DOORS_ON_EXPLOSION(vehicle, toggle);
    }

    static void WREN_VEHICLE_FORCE_SUBMARINE_SURFACE_MODE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::FORCE_SUBMARINE_SURFACE_MODE(vehicle, toggle);
    }

    static void WREN_VEHICLE_FORCE_SUBMARINE_NEURTAL_BUOYANCY(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        VEHICLE::FORCE_SUBMARINE_NEURTAL_BUOYANCY(p0, p1);
    }

    static void WREN_VEHICLE_SET_SUBMARINE_CRUSH_DEPTHS(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        float depth1 = (float)wrenGetSlotDouble(vm, 3);
        float depth2 = (float)wrenGetSlotDouble(vm, 4);
        float depth3 = (float)wrenGetSlotDouble(vm, 5);

        VEHICLE::SET_SUBMARINE_CRUSH_DEPTHS(vehicle, p1, depth1, depth2, depth3);
    }

    static void WREN_VEHICLE_GET_SUBMARINE_IS_UNDER_DESIGN_DEPTH(WrenVM* vm)
    {
        Vehicle submarine = (Vehicle)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::GET_SUBMARINE_IS_UNDER_DESIGN_DEPTH(submarine);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_GET_SUBMARINE_NUMBER_OF_AIR_LEAKS(WrenVM* vm)
    {
        Vehicle submarine = (Vehicle)wrenGetSlotDouble(vm, 1);

        int res = VEHICLE::GET_SUBMARINE_NUMBER_OF_AIR_LEAKS(submarine);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_SET_BOAT_IGNORE_LAND_PROBES(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_BOAT_IGNORE_LAND_PROBES(p0, p1);
    }

    static void WREN_VEHICLE_SET_BOAT_ANCHOR(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_BOAT_ANCHOR(vehicle, toggle);
    }

    static void WREN_VEHICLE_CAN_ANCHOR_BOAT_HERE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::CAN_ANCHOR_BOAT_HERE(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_CAN_ANCHOR_BOAT_HERE_IGNORE_PLAYERS(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::CAN_ANCHOR_BOAT_HERE_IGNORE_PLAYERS(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_SET_BOAT_REMAINS_ANCHORED_WHILE_PLAYER_IS_DRIVER(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_BOAT_REMAINS_ANCHORED_WHILE_PLAYER_IS_DRIVER(vehicle, toggle);
    }

    static void WREN_VEHICLE_SET_FORCE_LOW_LOD_ANCHOR_MODE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_FORCE_LOW_LOD_ANCHOR_MODE(vehicle, p1);
    }

    static void WREN_VEHICLE_SET_BOAT_LOW_LOD_ANCHOR_DISTANCE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        float value = (float)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_BOAT_LOW_LOD_ANCHOR_DISTANCE(vehicle, value);
    }

    static void WREN_VEHICLE_IS_BOAT_ANCHORED(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::IS_BOAT_ANCHORED(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_SET_BOAT_SINKS_WHEN_WRECKED(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_BOAT_SINKS_WHEN_WRECKED(vehicle, toggle);
    }

    static void WREN_VEHICLE_SET_BOAT_WRECKED(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        VEHICLE::SET_BOAT_WRECKED(p0);
    }

    static void WREN_VEHICLE_SET_VEHICLE_SIREN(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_VEHICLE_SIREN(vehicle, toggle);
    }

    static void WREN_VEHICLE_IS_VEHICLE_SIREN_ON(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::IS_VEHICLE_SIREN_ON(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_IS_VEHICLE_SIREN_AUDIO_ON(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::IS_VEHICLE_SIREN_AUDIO_ON(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_SET_VEHICLE_STRONG(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_VEHICLE_STRONG(vehicle, toggle);
    }

    static void WREN_VEHICLE_REMOVE_VEHICLE_STUCK_CHECK(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        VEHICLE::REMOVE_VEHICLE_STUCK_CHECK(vehicle);
    }

    static void WREN_VEHICLE_GET_VEHICLE_COLOURS(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int colorPrimary;
        int colorSecondary;

        VEHICLE::GET_VEHICLE_COLOURS(vehicle, &colorPrimary, &colorSecondary);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, colorPrimary);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, colorSecondary);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_VEHICLE_IS_VEHICLE_SEAT_FREE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int seatIndex = (int)wrenGetSlotDouble(vm, 2);
        BOOL isTaskRunning = (BOOL)wrenGetSlotBool(vm, 3);

        BOOL res = VEHICLE::IS_VEHICLE_SEAT_FREE(vehicle, seatIndex, isTaskRunning);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_GET_PED_IN_VEHICLE_SEAT(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int seatIndex = (int)wrenGetSlotDouble(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        Ped res = VEHICLE::GET_PED_IN_VEHICLE_SEAT(vehicle, seatIndex, p2);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_GET_LAST_PED_IN_VEHICLE_SEAT(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int seatIndex = (int)wrenGetSlotDouble(vm, 2);

        Ped res = VEHICLE::GET_LAST_PED_IN_VEHICLE_SEAT(vehicle, seatIndex);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_GET_VEHICLE_LIGHTS_STATE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL lightsOn;
        BOOL highbeamsOn;

        BOOL res = VEHICLE::GET_VEHICLE_LIGHTS_STATE(vehicle, &lightsOn, &highbeamsOn);

        wrenEnsureSlots(vm, 6);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotBool(vm, 2, (bool)lightsOn);
        wrenInsertInList(vm, 0, 1, 2);

        wrenSetSlotBool(vm, 3, (bool)highbeamsOn);
        wrenInsertInList(vm, 0, 2, 3);

    }

    static void WREN_VEHICLE_IS_VEHICLE_TYRE_BURST(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int wheelID = (int)wrenGetSlotDouble(vm, 2);
        BOOL completely = (BOOL)wrenGetSlotBool(vm, 3);

        BOOL res = VEHICLE::IS_VEHICLE_TYRE_BURST(vehicle, wheelID, completely);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_SET_VEHICLE_FORWARD_SPEED(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        float speed = (float)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_VEHICLE_FORWARD_SPEED(vehicle, speed);
    }

    static void WREN_VEHICLE_SET_VEHICLE_FORWARD_SPEED_XY(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_VEHICLE_FORWARD_SPEED_XY(p0, p1);
    }

    static void WREN_VEHICLE_BRING_VEHICLE_TO_HALT(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        float distance = (float)wrenGetSlotDouble(vm, 2);
        int duration = (int)wrenGetSlotDouble(vm, 3);
        BOOL unknown = (BOOL)wrenGetSlotBool(vm, 4);

        VEHICLE::BRING_VEHICLE_TO_HALT(vehicle, distance, duration, unknown);
    }

    static void WREN_VEHICLE_SET_VEHICLE_STEER_FOR_BUILDINGS(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_VEHICLE_STEER_FOR_BUILDINGS(vehicle, p1);
    }

    static void WREN_VEHICLE_SET_VEHICLE_CAUSES_SWERVING(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_VEHICLE_CAUSES_SWERVING(vehicle, toggle);
    }

    static void WREN_VEHICLE_SET_IGNORE_PLANES_SMALL_PITCH_CHANGE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_IGNORE_PLANES_SMALL_PITCH_CHANGE(p0, p1);
    }

    static void WREN_VEHICLE_STOP_BRINGING_VEHICLE_TO_HALT(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        VEHICLE::STOP_BRINGING_VEHICLE_TO_HALT(vehicle);
    }

    static void WREN_VEHICLE_IS_VEHICLE_BEING_BROUGHT_TO_HALT(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::IS_VEHICLE_BEING_BROUGHT_TO_HALT(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_SET_FORKLIFT_FORK_HEIGHT(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        float height = (float)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_FORKLIFT_FORK_HEIGHT(vehicle, height);
    }

    static void WREN_VEHICLE_IS_ENTITY_ATTACHED_TO_HANDLER_FRAME(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        Entity entity = (Entity)wrenGetSlotDouble(vm, 2);

        BOOL res = VEHICLE::IS_ENTITY_ATTACHED_TO_HANDLER_FRAME(vehicle, entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_IS_ANY_ENTITY_ATTACHED_TO_HANDLER_FRAME(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::IS_ANY_ENTITY_ATTACHED_TO_HANDLER_FRAME(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_FIND_HANDLER_VEHICLE_CONTAINER_IS_ATTACHED_TO(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        Vehicle res = VEHICLE::FIND_HANDLER_VEHICLE_CONTAINER_IS_ATTACHED_TO(entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_IS_HANDLER_FRAME_LINED_UP_WITH_CONTAINER(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        Entity entity = (Entity)wrenGetSlotDouble(vm, 2);

        BOOL res = VEHICLE::IS_HANDLER_FRAME_LINED_UP_WITH_CONTAINER(vehicle, entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_ATTACH_CONTAINER_TO_HANDLER_FRAME_WHEN_LINED_UP(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        Entity entity = (Entity)wrenGetSlotDouble(vm, 2);

        VEHICLE::ATTACH_CONTAINER_TO_HANDLER_FRAME_WHEN_LINED_UP(vehicle, entity);
    }

    static void WREN_VEHICLE_DETACH_CONTAINER_FROM_HANDLER_FRAME(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        VEHICLE::DETACH_CONTAINER_FROM_HANDLER_FRAME(vehicle);
    }

    static void WREN_VEHICLE_SET_VEHICLE_DISABLE_HEIGHT_MAP_AVOIDANCE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_VEHICLE_DISABLE_HEIGHT_MAP_AVOIDANCE(vehicle, p1);
    }

    static void WREN_VEHICLE_SET_BOAT_DISABLE_AVOIDANCE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_BOAT_DISABLE_AVOIDANCE(vehicle, p1);
    }

    static void WREN_VEHICLE_IS_HELI_LANDING_AREA_BLOCKED(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::IS_HELI_LANDING_AREA_BLOCKED(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_SET_SHORT_SLOWDOWN_FOR_LANDING(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        VEHICLE::SET_SHORT_SLOWDOWN_FOR_LANDING(vehicle);
    }

    static void WREN_VEHICLE_SET_HELI_TURBULENCE_SCALAR(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_HELI_TURBULENCE_SCALAR(vehicle, p1);
    }

    static void WREN_VEHICLE_SET_CAR_BOOT_OPEN(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        VEHICLE::SET_CAR_BOOT_OPEN(vehicle);
    }

    static void WREN_VEHICLE_SET_VEHICLE_TYRE_BURST(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int index = (int)wrenGetSlotDouble(vm, 2);
        BOOL onRim = (BOOL)wrenGetSlotBool(vm, 3);
        float p3 = (float)wrenGetSlotDouble(vm, 4);

        VEHICLE::SET_VEHICLE_TYRE_BURST(vehicle, index, onRim, p3);
    }

    static void WREN_VEHICLE_SET_VEHICLE_DOORS_SHUT(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL closeInstantly = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_VEHICLE_DOORS_SHUT(vehicle, closeInstantly);
    }

    static void WREN_VEHICLE_SET_VEHICLE_TYRES_CAN_BURST(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_VEHICLE_TYRES_CAN_BURST(vehicle, toggle);
    }

    static void WREN_VEHICLE_GET_VEHICLE_TYRES_CAN_BURST(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::GET_VEHICLE_TYRES_CAN_BURST(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_SET_VEHICLE_WHEELS_CAN_BREAK(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL enabled = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_VEHICLE_WHEELS_CAN_BREAK(vehicle, enabled);
    }

    static void WREN_VEHICLE_SET_VEHICLE_DOOR_OPEN(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int doorId = (int)wrenGetSlotDouble(vm, 2);
        BOOL loose = (BOOL)wrenGetSlotBool(vm, 3);
        BOOL openInstantly = (BOOL)wrenGetSlotBool(vm, 4);

        VEHICLE::SET_VEHICLE_DOOR_OPEN(vehicle, doorId, loose, openInstantly);
    }

    static void WREN_VEHICLE_SET_VEHICLE_DOOR_AUTO_LOCK(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int doorId = (int)wrenGetSlotDouble(vm, 2);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 3);

        VEHICLE::SET_VEHICLE_DOOR_AUTO_LOCK(vehicle, doorId, toggle);
    }

    static void WREN_VEHICLE_SET_FLEEING_VEHICLES_USE_SWITCHED_OFF_NODES(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        VEHICLE::SET_FLEEING_VEHICLES_USE_SWITCHED_OFF_NODES(p0);
    }

    static void WREN_VEHICLE_REMOVE_VEHICLE_WINDOW(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int windowIndex = (int)wrenGetSlotDouble(vm, 2);

        VEHICLE::REMOVE_VEHICLE_WINDOW(vehicle, windowIndex);
    }

    static void WREN_VEHICLE_ROLL_DOWN_WINDOWS(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        VEHICLE::ROLL_DOWN_WINDOWS(vehicle);
    }

    static void WREN_VEHICLE_ROLL_DOWN_WINDOW(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int windowIndex = (int)wrenGetSlotDouble(vm, 2);

        VEHICLE::ROLL_DOWN_WINDOW(vehicle, windowIndex);
    }

    static void WREN_VEHICLE_ROLL_UP_WINDOW(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int windowIndex = (int)wrenGetSlotDouble(vm, 2);

        VEHICLE::ROLL_UP_WINDOW(vehicle, windowIndex);
    }

    static void WREN_VEHICLE_SMASH_VEHICLE_WINDOW(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int index = (int)wrenGetSlotDouble(vm, 2);

        VEHICLE::SMASH_VEHICLE_WINDOW(vehicle, index);
    }

    static void WREN_VEHICLE_FIX_VEHICLE_WINDOW(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int index = (int)wrenGetSlotDouble(vm, 2);

        VEHICLE::FIX_VEHICLE_WINDOW(vehicle, index);
    }

    static void WREN_VEHICLE_POP_OUT_VEHICLE_WINDSCREEN(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        VEHICLE::POP_OUT_VEHICLE_WINDSCREEN(vehicle);
    }

    static void WREN_VEHICLE_POP_OFF_VEHICLE_ROOF_WITH_IMPULSE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);

        VEHICLE::POP_OFF_VEHICLE_ROOF_WITH_IMPULSE(vehicle, x, y, z);
    }

    static void WREN_VEHICLE_SET_VEHICLE_LIGHTS(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int state = (int)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_VEHICLE_LIGHTS(vehicle, state);
    }

    static void WREN_VEHICLE_SET_VEHICLE_USE_PLAYER_LIGHT_SETTINGS(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_VEHICLE_USE_PLAYER_LIGHT_SETTINGS(vehicle, toggle);
    }

    static void WREN_VEHICLE_SET_VEHICLE_HEADLIGHT_SHADOWS(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_VEHICLE_HEADLIGHT_SHADOWS(vehicle, p1);
    }

    static void WREN_VEHICLE_SET_VEHICLE_ALARM(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL state = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_VEHICLE_ALARM(vehicle, state);
    }

    static void WREN_VEHICLE_START_VEHICLE_ALARM(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        VEHICLE::START_VEHICLE_ALARM(vehicle);
    }

    static void WREN_VEHICLE_IS_VEHICLE_ALARM_ACTIVATED(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::IS_VEHICLE_ALARM_ACTIVATED(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_SET_VEHICLE_INTERIORLIGHT(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_VEHICLE_INTERIORLIGHT(vehicle, toggle);
    }

    static void WREN_VEHICLE_SET_VEHICLE_FORCE_INTERIORLIGHT(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_VEHICLE_FORCE_INTERIORLIGHT(vehicle, toggle);
    }

    static void WREN_VEHICLE_SET_VEHICLE_LIGHT_MULTIPLIER(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        float multiplier = (float)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_VEHICLE_LIGHT_MULTIPLIER(vehicle, multiplier);
    }

    static void WREN_VEHICLE_ATTACH_VEHICLE_TO_TRAILER(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        Vehicle trailer = (Vehicle)wrenGetSlotDouble(vm, 2);
        float radius = (float)wrenGetSlotDouble(vm, 3);

        VEHICLE::ATTACH_VEHICLE_TO_TRAILER(vehicle, trailer, radius);
    }

    static void WREN_VEHICLE_ATTACH_VEHICLE_ON_TO_TRAILER(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        Vehicle trailer = (Vehicle)wrenGetSlotDouble(vm, 2);
        float offsetX = (float)wrenGetSlotDouble(vm, 3);
        float offsetY = (float)wrenGetSlotDouble(vm, 4);
        float offsetZ = (float)wrenGetSlotDouble(vm, 5);
        float coordsX = (float)wrenGetSlotDouble(vm, 6);
        float coordsY = (float)wrenGetSlotDouble(vm, 7);
        float coordsZ = (float)wrenGetSlotDouble(vm, 8);
        float rotationX = (float)wrenGetSlotDouble(vm, 9);
        float rotationY = (float)wrenGetSlotDouble(vm, 10);
        float rotationZ = (float)wrenGetSlotDouble(vm, 11);
        float disableCollisions = (float)wrenGetSlotDouble(vm, 12);

        VEHICLE::ATTACH_VEHICLE_ON_TO_TRAILER(vehicle, trailer, offsetX, offsetY, offsetZ, coordsX, coordsY, coordsZ, rotationX, rotationY, rotationZ, disableCollisions);
    }

    static void WREN_VEHICLE_STABILISE_ENTITY_ATTACHED_TO_HELI(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        Entity entity = (Entity)wrenGetSlotDouble(vm, 2);
        float p2 = (float)wrenGetSlotDouble(vm, 3);

        VEHICLE::STABILISE_ENTITY_ATTACHED_TO_HELI(vehicle, entity, p2);
    }

    static void WREN_VEHICLE_DETACH_VEHICLE_FROM_TRAILER(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        VEHICLE::DETACH_VEHICLE_FROM_TRAILER(vehicle);
    }

    static void WREN_VEHICLE_IS_VEHICLE_ATTACHED_TO_TRAILER(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::IS_VEHICLE_ATTACHED_TO_TRAILER(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_SET_TRAILER_INVERSE_MASS_SCALE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_TRAILER_INVERSE_MASS_SCALE(vehicle, p1);
    }

    static void WREN_VEHICLE_SET_TRAILER_LEGS_RAISED(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        VEHICLE::SET_TRAILER_LEGS_RAISED(vehicle);
    }

    static void WREN_VEHICLE_SET_TRAILER_LEGS_LOWERED(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        VEHICLE::SET_TRAILER_LEGS_LOWERED(p0);
    }

    static void WREN_VEHICLE_SET_VEHICLE_TYRE_FIXED(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int tyreIndex = (int)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_VEHICLE_TYRE_FIXED(vehicle, tyreIndex);
    }

    static void WREN_VEHICLE_SET_VEHICLE_NUMBER_PLATE_TEXT(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        const char* plateText = wrenGetSlotString(vm, 2);

        VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT(vehicle, plateText);
    }

    static void WREN_VEHICLE_GET_VEHICLE_NUMBER_PLATE_TEXT(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        const char* res = VEHICLE::GET_VEHICLE_NUMBER_PLATE_TEXT(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotString(vm, 0, res);
    }

    static void WREN_VEHICLE_GET_NUMBER_OF_VEHICLE_NUMBER_PLATES(WrenVM* vm)
    {

        int res = VEHICLE::GET_NUMBER_OF_VEHICLE_NUMBER_PLATES();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int plateIndex = (int)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(vehicle, plateIndex);
    }

    static void WREN_VEHICLE_GET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        int res = VEHICLE::GET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_SET_RANDOM_TRAINS(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        VEHICLE::SET_RANDOM_TRAINS(toggle);
    }

    static void WREN_VEHICLE_CREATE_MISSION_TRAIN(WrenVM* vm)
    {
        int variation = (int)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);
        BOOL direction = (BOOL)wrenGetSlotBool(vm, 5);
        Any p5 = (Any)wrenGetSlotDouble(vm, 6);
        Any p6 = (Any)wrenGetSlotDouble(vm, 7);

        Vehicle res = VEHICLE::CREATE_MISSION_TRAIN(variation, x, y, z, direction, p5, p6);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_SWITCH_TRAIN_TRACK(WrenVM* vm)
    {
        int trackId = (int)wrenGetSlotDouble(vm, 1);
        BOOL state = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SWITCH_TRAIN_TRACK(trackId, state);
    }

    static void WREN_VEHICLE_SET_TRAIN_TRACK_SPAWN_FREQUENCY(WrenVM* vm)
    {
        int trackIndex = (int)wrenGetSlotDouble(vm, 1);
        int frequency = (int)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_TRAIN_TRACK_SPAWN_FREQUENCY(trackIndex, frequency);
    }

    static void WREN_VEHICLE_ALLOW_TRAIN_TO_BE_REMOVED_BY_POPULATION(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        VEHICLE::ALLOW_TRAIN_TO_BE_REMOVED_BY_POPULATION(p0);
    }

    static void WREN_VEHICLE_DELETE_ALL_TRAINS(WrenVM* vm)
    {

        VEHICLE::DELETE_ALL_TRAINS();
    }

    static void WREN_VEHICLE_SET_TRAIN_SPEED(WrenVM* vm)
    {
        Vehicle train = (Vehicle)wrenGetSlotDouble(vm, 1);
        float speed = (float)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_TRAIN_SPEED(train, speed);
    }

    static void WREN_VEHICLE_SET_TRAIN_CRUISE_SPEED(WrenVM* vm)
    {
        Vehicle train = (Vehicle)wrenGetSlotDouble(vm, 1);
        float speed = (float)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_TRAIN_CRUISE_SPEED(train, speed);
    }

    static void WREN_VEHICLE_SET_RANDOM_BOATS(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        VEHICLE::SET_RANDOM_BOATS(toggle);
    }

    static void WREN_VEHICLE_SET_RANDOM_BOATS_MP(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        VEHICLE::SET_RANDOM_BOATS_MP(toggle);
    }

    static void WREN_VEHICLE_SET_GARBAGE_TRUCKS(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        VEHICLE::SET_GARBAGE_TRUCKS(toggle);
    }

    static void WREN_VEHICLE_DOES_VEHICLE_HAVE_STUCK_VEHICLE_CHECK(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::DOES_VEHICLE_HAVE_STUCK_VEHICLE_CHECK(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_GET_VEHICLE_RECORDING_ID(WrenVM* vm)
    {
        int recording = (int)wrenGetSlotDouble(vm, 1);
        const char* script = wrenGetSlotString(vm, 2);

        int res = VEHICLE::GET_VEHICLE_RECORDING_ID(recording, script);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_REQUEST_VEHICLE_RECORDING(WrenVM* vm)
    {
        int recording = (int)wrenGetSlotDouble(vm, 1);
        const char* script = wrenGetSlotString(vm, 2);

        VEHICLE::REQUEST_VEHICLE_RECORDING(recording, script);
    }

    static void WREN_VEHICLE_HAS_VEHICLE_RECORDING_BEEN_LOADED(WrenVM* vm)
    {
        int recording = (int)wrenGetSlotDouble(vm, 1);
        const char* script = wrenGetSlotString(vm, 2);

        BOOL res = VEHICLE::HAS_VEHICLE_RECORDING_BEEN_LOADED(recording, script);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_REMOVE_VEHICLE_RECORDING(WrenVM* vm)
    {
        int recording = (int)wrenGetSlotDouble(vm, 1);
        const char* script = wrenGetSlotString(vm, 2);

        VEHICLE::REMOVE_VEHICLE_RECORDING(recording, script);
    }

    static void WREN_VEHICLE_GET_POSITION_OF_VEHICLE_RECORDING_ID_AT_TIME(WrenVM* vm)
    {
        int id = (int)wrenGetSlotDouble(vm, 1);
        float time = (float)wrenGetSlotDouble(vm, 2);

        Vector3 res = VEHICLE::GET_POSITION_OF_VEHICLE_RECORDING_ID_AT_TIME(id, time);

        wrenEnsureSlots(vm, 1);

        wrenGetVariable(vm, "natives", "Vector3", 0);
        Vector3* wren_res = (Vector3*)wrenSetSlotNewForeign(vm, 0, 0, sizeof(Vector3));
        wren_res->x = res.x;
        wren_res->y = res.y;
        wren_res->z = res.z;
    }

    static void WREN_VEHICLE_GET_POSITION_OF_VEHICLE_RECORDING_AT_TIME(WrenVM* vm)
    {
        int recording = (int)wrenGetSlotDouble(vm, 1);
        float time = (float)wrenGetSlotDouble(vm, 2);
        const char* script = wrenGetSlotString(vm, 3);

        Vector3 res = VEHICLE::GET_POSITION_OF_VEHICLE_RECORDING_AT_TIME(recording, time, script);

        wrenEnsureSlots(vm, 1);

        wrenGetVariable(vm, "natives", "Vector3", 0);
        Vector3* wren_res = (Vector3*)wrenSetSlotNewForeign(vm, 0, 0, sizeof(Vector3));
        wren_res->x = res.x;
        wren_res->y = res.y;
        wren_res->z = res.z;
    }

    static void WREN_VEHICLE_GET_ROTATION_OF_VEHICLE_RECORDING_ID_AT_TIME(WrenVM* vm)
    {
        int id = (int)wrenGetSlotDouble(vm, 1);
        float time = (float)wrenGetSlotDouble(vm, 2);

        Vector3 res = VEHICLE::GET_ROTATION_OF_VEHICLE_RECORDING_ID_AT_TIME(id, time);

        wrenEnsureSlots(vm, 1);

        wrenGetVariable(vm, "natives", "Vector3", 0);
        Vector3* wren_res = (Vector3*)wrenSetSlotNewForeign(vm, 0, 0, sizeof(Vector3));
        wren_res->x = res.x;
        wren_res->y = res.y;
        wren_res->z = res.z;
    }

    static void WREN_VEHICLE_GET_ROTATION_OF_VEHICLE_RECORDING_AT_TIME(WrenVM* vm)
    {
        int recording = (int)wrenGetSlotDouble(vm, 1);
        float time = (float)wrenGetSlotDouble(vm, 2);
        const char* script = wrenGetSlotString(vm, 3);

        Vector3 res = VEHICLE::GET_ROTATION_OF_VEHICLE_RECORDING_AT_TIME(recording, time, script);

        wrenEnsureSlots(vm, 1);

        wrenGetVariable(vm, "natives", "Vector3", 0);
        Vector3* wren_res = (Vector3*)wrenSetSlotNewForeign(vm, 0, 0, sizeof(Vector3));
        wren_res->x = res.x;
        wren_res->y = res.y;
        wren_res->z = res.z;
    }

    static void WREN_VEHICLE_GET_TOTAL_DURATION_OF_VEHICLE_RECORDING_ID(WrenVM* vm)
    {
        int id = (int)wrenGetSlotDouble(vm, 1);

        float res = VEHICLE::GET_TOTAL_DURATION_OF_VEHICLE_RECORDING_ID(id);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_GET_TOTAL_DURATION_OF_VEHICLE_RECORDING(WrenVM* vm)
    {
        int recording = (int)wrenGetSlotDouble(vm, 1);
        const char* script = wrenGetSlotString(vm, 2);

        float res = VEHICLE::GET_TOTAL_DURATION_OF_VEHICLE_RECORDING(recording, script);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_GET_POSITION_IN_RECORDING(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        float res = VEHICLE::GET_POSITION_IN_RECORDING(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_GET_TIME_POSITION_IN_RECORDING(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        float res = VEHICLE::GET_TIME_POSITION_IN_RECORDING(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_START_PLAYBACK_RECORDED_VEHICLE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int recording = (int)wrenGetSlotDouble(vm, 2);
        const char* script = wrenGetSlotString(vm, 3);
        BOOL p3 = (BOOL)wrenGetSlotBool(vm, 4);

        VEHICLE::START_PLAYBACK_RECORDED_VEHICLE(vehicle, recording, script, p3);
    }

    static void WREN_VEHICLE_START_PLAYBACK_RECORDED_VEHICLE_WITH_FLAGS(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int recording = (int)wrenGetSlotDouble(vm, 2);
        const char* script = wrenGetSlotString(vm, 3);
        int flags = (int)wrenGetSlotDouble(vm, 4);
        int time = (int)wrenGetSlotDouble(vm, 5);
        int drivingStyle = (int)wrenGetSlotDouble(vm, 6);

        VEHICLE::START_PLAYBACK_RECORDED_VEHICLE_WITH_FLAGS(vehicle, recording, script, flags, time, drivingStyle);
    }

    static void WREN_VEHICLE_FORCE_PLAYBACK_RECORDED_VEHICLE_UPDATE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::FORCE_PLAYBACK_RECORDED_VEHICLE_UPDATE(vehicle, p1);
    }

    static void WREN_VEHICLE_STOP_PLAYBACK_RECORDED_VEHICLE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        VEHICLE::STOP_PLAYBACK_RECORDED_VEHICLE(vehicle);
    }

    static void WREN_VEHICLE_PAUSE_PLAYBACK_RECORDED_VEHICLE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        VEHICLE::PAUSE_PLAYBACK_RECORDED_VEHICLE(vehicle);
    }

    static void WREN_VEHICLE_UNPAUSE_PLAYBACK_RECORDED_VEHICLE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        VEHICLE::UNPAUSE_PLAYBACK_RECORDED_VEHICLE(vehicle);
    }

    static void WREN_VEHICLE_IS_PLAYBACK_GOING_ON_FOR_VEHICLE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::IS_PLAYBACK_GOING_ON_FOR_VEHICLE(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_IS_PLAYBACK_USING_AI_GOING_ON_FOR_VEHICLE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::IS_PLAYBACK_USING_AI_GOING_ON_FOR_VEHICLE(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_GET_CURRENT_PLAYBACK_FOR_VEHICLE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        int res = VEHICLE::GET_CURRENT_PLAYBACK_FOR_VEHICLE(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_SKIP_TO_END_AND_STOP_PLAYBACK_RECORDED_VEHICLE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        VEHICLE::SKIP_TO_END_AND_STOP_PLAYBACK_RECORDED_VEHICLE(vehicle);
    }

    static void WREN_VEHICLE_SET_PLAYBACK_SPEED(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        float speed = (float)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_PLAYBACK_SPEED(vehicle, speed);
    }

    static void WREN_VEHICLE_START_PLAYBACK_RECORDED_VEHICLE_USING_AI(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int recording = (int)wrenGetSlotDouble(vm, 2);
        const char* script = wrenGetSlotString(vm, 3);
        float speed = (float)wrenGetSlotDouble(vm, 4);
        int drivingStyle = (int)wrenGetSlotDouble(vm, 5);

        VEHICLE::START_PLAYBACK_RECORDED_VEHICLE_USING_AI(vehicle, recording, script, speed, drivingStyle);
    }

    static void WREN_VEHICLE_SKIP_TIME_IN_PLAYBACK_RECORDED_VEHICLE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        float time = (float)wrenGetSlotDouble(vm, 2);

        VEHICLE::SKIP_TIME_IN_PLAYBACK_RECORDED_VEHICLE(vehicle, time);
    }

    static void WREN_VEHICLE_SET_PLAYBACK_TO_USE_AI(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int drivingStyle = (int)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_PLAYBACK_TO_USE_AI(vehicle, drivingStyle);
    }

    static void WREN_VEHICLE_SET_PLAYBACK_TO_USE_AI_TRY_TO_REVERT_BACK_LATER(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int time = (int)wrenGetSlotDouble(vm, 2);
        int drivingStyle = (int)wrenGetSlotDouble(vm, 3);
        BOOL p3 = (BOOL)wrenGetSlotBool(vm, 4);

        VEHICLE::SET_PLAYBACK_TO_USE_AI_TRY_TO_REVERT_BACK_LATER(vehicle, time, drivingStyle, p3);
    }

    static void WREN_VEHICLE_SET_ADDITIONAL_ROTATION_FOR_RECORDED_VEHICLE_PLAYBACK(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);

        VEHICLE::SET_ADDITIONAL_ROTATION_FOR_RECORDED_VEHICLE_PLAYBACK(vehicle, x, y, z, p4);
    }

    static void WREN_VEHICLE_SET_POSITION_OFFSET_FOR_RECORDED_VEHICLE_PLAYBACK(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);
        float p2 = (float)wrenGetSlotDouble(vm, 3);
        float p3 = (float)wrenGetSlotDouble(vm, 4);

        VEHICLE::SET_POSITION_OFFSET_FOR_RECORDED_VEHICLE_PLAYBACK(p0, p1, p2, p3);
    }

    static void WREN_VEHICLE_SET_GLOBAL_POSITION_OFFSET_FOR_RECORDED_VEHICLE_PLAYBACK(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);
        float p2 = (float)wrenGetSlotDouble(vm, 3);
        float p3 = (float)wrenGetSlotDouble(vm, 4);

        VEHICLE::SET_GLOBAL_POSITION_OFFSET_FOR_RECORDED_VEHICLE_PLAYBACK(p0, p1, p2, p3);
    }

    static void WREN_VEHICLE_SET_SHOULD_LERP_FROM_AI_TO_FULL_RECORDING(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_SHOULD_LERP_FROM_AI_TO_FULL_RECORDING(vehicle, p1);
    }

    static void WREN_VEHICLE_EXPLODE_VEHICLE_IN_CUTSCENE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::EXPLODE_VEHICLE_IN_CUTSCENE(vehicle, p1);
    }

    static void WREN_VEHICLE_ADD_VEHICLE_STUCK_CHECK_WITH_WARP(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        BOOL p3 = (BOOL)wrenGetSlotBool(vm, 4);
        BOOL p4 = (BOOL)wrenGetSlotBool(vm, 5);
        BOOL p5 = (BOOL)wrenGetSlotBool(vm, 6);
        Any p6 = (Any)wrenGetSlotDouble(vm, 7);

        VEHICLE::ADD_VEHICLE_STUCK_CHECK_WITH_WARP(p0, p1, p2, p3, p4, p5, p6);
    }

    static void WREN_VEHICLE_SET_VEHICLE_MODEL_IS_SUPPRESSED(WrenVM* vm)
    {
        Hash model = (Hash)wrenGetSlotDouble(vm, 1);
        BOOL suppressed = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_VEHICLE_MODEL_IS_SUPPRESSED(model, suppressed);
    }

    static void WREN_VEHICLE_GET_RANDOM_VEHICLE_IN_SPHERE(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        float radius = (float)wrenGetSlotDouble(vm, 4);
        Hash modelHash = (Hash)wrenGetSlotDouble(vm, 5);
        int flags = (int)wrenGetSlotDouble(vm, 6);

        Vehicle res = VEHICLE::GET_RANDOM_VEHICLE_IN_SPHERE(x, y, z, radius, modelHash, flags);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_GET_RANDOM_VEHICLE_FRONT_BUMPER_IN_SPHERE(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);
        float p2 = (float)wrenGetSlotDouble(vm, 3);
        float p3 = (float)wrenGetSlotDouble(vm, 4);
        int p4 = (int)wrenGetSlotDouble(vm, 5);
        int p5 = (int)wrenGetSlotDouble(vm, 6);
        int p6 = (int)wrenGetSlotDouble(vm, 7);

        Vehicle res = VEHICLE::GET_RANDOM_VEHICLE_FRONT_BUMPER_IN_SPHERE(p0, p1, p2, p3, p4, p5, p6);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_GET_RANDOM_VEHICLE_BACK_BUMPER_IN_SPHERE(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);
        float p2 = (float)wrenGetSlotDouble(vm, 3);
        float p3 = (float)wrenGetSlotDouble(vm, 4);
        int p4 = (int)wrenGetSlotDouble(vm, 5);
        int p5 = (int)wrenGetSlotDouble(vm, 6);
        int p6 = (int)wrenGetSlotDouble(vm, 7);

        Vehicle res = VEHICLE::GET_RANDOM_VEHICLE_BACK_BUMPER_IN_SPHERE(p0, p1, p2, p3, p4, p5, p6);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_GET_CLOSEST_VEHICLE(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        float radius = (float)wrenGetSlotDouble(vm, 4);
        Hash modelHash = (Hash)wrenGetSlotDouble(vm, 5);
        int flags = (int)wrenGetSlotDouble(vm, 6);

        Vehicle res = VEHICLE::GET_CLOSEST_VEHICLE(x, y, z, radius, modelHash, flags);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_GET_TRAIN_CARRIAGE(WrenVM* vm)
    {
        Vehicle train = (Vehicle)wrenGetSlotDouble(vm, 1);
        int trailerNumber = (int)wrenGetSlotDouble(vm, 2);

        Entity res = VEHICLE::GET_TRAIN_CARRIAGE(train, trailerNumber);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_IS_MISSION_TRAIN(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::IS_MISSION_TRAIN(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_DELETE_MISSION_TRAIN(WrenVM* vm)
    {
        Vehicle train;

        VEHICLE::DELETE_MISSION_TRAIN(&train);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_VEHICLE_SET_MISSION_TRAIN_AS_NO_LONGER_NEEDED(WrenVM* vm)
    {
        Vehicle train;
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 1);

        VEHICLE::SET_MISSION_TRAIN_AS_NO_LONGER_NEEDED(&train, p1);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_VEHICLE_SET_MISSION_TRAIN_COORDS(WrenVM* vm)
    {
        Vehicle train = (Vehicle)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);

        VEHICLE::SET_MISSION_TRAIN_COORDS(train, x, y, z);
    }

    static void WREN_VEHICLE_IS_THIS_MODEL_A_BOAT(WrenVM* vm)
    {
        Hash model = (Hash)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::IS_THIS_MODEL_A_BOAT(model);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_IS_THIS_MODEL_A_JETSKI(WrenVM* vm)
    {
        Hash model = (Hash)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::IS_THIS_MODEL_A_JETSKI(model);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_IS_THIS_MODEL_A_PLANE(WrenVM* vm)
    {
        Hash model = (Hash)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::IS_THIS_MODEL_A_PLANE(model);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_IS_THIS_MODEL_A_HELI(WrenVM* vm)
    {
        Hash model = (Hash)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::IS_THIS_MODEL_A_HELI(model);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_IS_THIS_MODEL_A_CAR(WrenVM* vm)
    {
        Hash model = (Hash)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::IS_THIS_MODEL_A_CAR(model);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_IS_THIS_MODEL_A_TRAIN(WrenVM* vm)
    {
        Hash model = (Hash)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::IS_THIS_MODEL_A_TRAIN(model);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_IS_THIS_MODEL_A_BIKE(WrenVM* vm)
    {
        Hash model = (Hash)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::IS_THIS_MODEL_A_BIKE(model);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_IS_THIS_MODEL_A_BICYCLE(WrenVM* vm)
    {
        Hash model = (Hash)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::IS_THIS_MODEL_A_BICYCLE(model);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_IS_THIS_MODEL_A_QUADBIKE(WrenVM* vm)
    {
        Hash model = (Hash)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::IS_THIS_MODEL_A_QUADBIKE(model);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_IS_THIS_MODEL_AN_AMPHIBIOUS_CAR(WrenVM* vm)
    {
        Hash model = (Hash)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::IS_THIS_MODEL_AN_AMPHIBIOUS_CAR(model);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_IS_THIS_MODEL_AN_AMPHIBIOUS_QUADBIKE(WrenVM* vm)
    {
        Hash model = (Hash)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::IS_THIS_MODEL_AN_AMPHIBIOUS_QUADBIKE(model);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_SET_HELI_BLADES_FULL_SPEED(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        VEHICLE::SET_HELI_BLADES_FULL_SPEED(vehicle);
    }

    static void WREN_VEHICLE_SET_HELI_BLADES_SPEED(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        float speed = (float)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_HELI_BLADES_SPEED(vehicle, speed);
    }

    static void WREN_VEHICLE_FORCE_SUB_THROTTLE_FOR_TIME(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);
        float p2 = (float)wrenGetSlotDouble(vm, 3);

        VEHICLE::FORCE_SUB_THROTTLE_FOR_TIME(vehicle, p1, p2);
    }

    static void WREN_VEHICLE_SET_VEHICLE_CAN_BE_TARGETTED(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL state = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_VEHICLE_CAN_BE_TARGETTED(vehicle, state);
    }

    static void WREN_VEHICLE_SET_DONT_ALLOW_PLAYER_TO_ENTER_VEHICLE_IF_LOCKED_FOR_PLAYER(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_DONT_ALLOW_PLAYER_TO_ENTER_VEHICLE_IF_LOCKED_FOR_PLAYER(vehicle, p1);
    }

    static void WREN_VEHICLE_SET_VEHICLE_CAN_BE_VISIBLY_DAMAGED(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL state = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_VEHICLE_CAN_BE_VISIBLY_DAMAGED(vehicle, state);
    }

    static void WREN_VEHICLE_SET_VEHICLE_HAS_UNBREAKABLE_LIGHTS(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_VEHICLE_HAS_UNBREAKABLE_LIGHTS(vehicle, p1);
    }

    static void WREN_VEHICLE_SET_VEHICLE_RESPECTS_LOCKS_WHEN_HAS_DRIVER(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_VEHICLE_RESPECTS_LOCKS_WHEN_HAS_DRIVER(vehicle, p1);
    }

    static void WREN_VEHICLE_SET_VEHICLE_CAN_EJECT_PASSENGERS_IF_LOCKED(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_VEHICLE_CAN_EJECT_PASSENGERS_IF_LOCKED(p0, p1);
    }

    static void WREN_VEHICLE_GET_VEHICLE_DIRT_LEVEL(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        float res = VEHICLE::GET_VEHICLE_DIRT_LEVEL(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_SET_VEHICLE_DIRT_LEVEL(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        float dirtLevel = (float)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_VEHICLE_DIRT_LEVEL(vehicle, dirtLevel);
    }

    static void WREN_VEHICLE_GET_DOES_VEHICLE_HAVE_DAMAGE_DECALS(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::GET_DOES_VEHICLE_HAVE_DAMAGE_DECALS(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_IS_VEHICLE_DOOR_FULLY_OPEN(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int doorId = (int)wrenGetSlotDouble(vm, 2);

        BOOL res = VEHICLE::IS_VEHICLE_DOOR_FULLY_OPEN(vehicle, doorId);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_SET_VEHICLE_ENGINE_ON(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL value = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL instantly = (BOOL)wrenGetSlotBool(vm, 3);
        BOOL disableAutoStart = (BOOL)wrenGetSlotBool(vm, 4);

        VEHICLE::SET_VEHICLE_ENGINE_ON(vehicle, value, instantly, disableAutoStart);
    }

    static void WREN_VEHICLE_SET_VEHICLE_UNDRIVEABLE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_VEHICLE_UNDRIVEABLE(vehicle, toggle);
    }

    static void WREN_VEHICLE_SET_VEHICLE_PROVIDES_COVER(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_VEHICLE_PROVIDES_COVER(vehicle, toggle);
    }

    static void WREN_VEHICLE_SET_VEHICLE_DOOR_CONTROL(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int doorId = (int)wrenGetSlotDouble(vm, 2);
        int speed = (int)wrenGetSlotDouble(vm, 3);
        float angle = (float)wrenGetSlotDouble(vm, 4);

        VEHICLE::SET_VEHICLE_DOOR_CONTROL(vehicle, doorId, speed, angle);
    }

    static void WREN_VEHICLE_SET_VEHICLE_DOOR_LATCHED(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int doorId = (int)wrenGetSlotDouble(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);
        BOOL p3 = (BOOL)wrenGetSlotBool(vm, 4);
        BOOL p4 = (BOOL)wrenGetSlotBool(vm, 5);

        VEHICLE::SET_VEHICLE_DOOR_LATCHED(vehicle, doorId, p2, p3, p4);
    }

    static void WREN_VEHICLE_GET_VEHICLE_DOOR_ANGLE_RATIO(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int doorId = (int)wrenGetSlotDouble(vm, 2);

        float res = VEHICLE::GET_VEHICLE_DOOR_ANGLE_RATIO(vehicle, doorId);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_GET_PED_USING_VEHICLE_DOOR(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int doord = (int)wrenGetSlotDouble(vm, 2);

        Ped res = VEHICLE::GET_PED_USING_VEHICLE_DOOR(vehicle, doord);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_SET_VEHICLE_DOOR_SHUT(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int doorId = (int)wrenGetSlotDouble(vm, 2);
        BOOL closeInstantly = (BOOL)wrenGetSlotBool(vm, 3);

        VEHICLE::SET_VEHICLE_DOOR_SHUT(vehicle, doorId, closeInstantly);
    }

    static void WREN_VEHICLE_SET_VEHICLE_DOOR_BROKEN(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int doorId = (int)wrenGetSlotDouble(vm, 2);
        BOOL deleteDoor = (BOOL)wrenGetSlotBool(vm, 3);

        VEHICLE::SET_VEHICLE_DOOR_BROKEN(vehicle, doorId, deleteDoor);
    }

    static void WREN_VEHICLE_SET_VEHICLE_CAN_BREAK(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_VEHICLE_CAN_BREAK(vehicle, toggle);
    }

    static void WREN_VEHICLE_DOES_VEHICLE_HAVE_ROOF(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::DOES_VEHICLE_HAVE_ROOF(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_SET_VEHICLE_REMOVE_AGGRESSIVE_CARJACK_MISSION(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        VEHICLE::SET_VEHICLE_REMOVE_AGGRESSIVE_CARJACK_MISSION(p0);
    }

    static void WREN_VEHICLE_SET_VEHICLE_AVOID_PLAYER_VEHICLE_RIOT_VAN_MISSION(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        VEHICLE::SET_VEHICLE_AVOID_PLAYER_VEHICLE_RIOT_VAN_MISSION(p0);
    }

    static void WREN_VEHICLE_SET_CARJACK_MISSION_REMOVAL_PARAMETERS(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_CARJACK_MISSION_REMOVAL_PARAMETERS(p0, p1);
    }

    static void WREN_VEHICLE_IS_BIG_VEHICLE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::IS_BIG_VEHICLE(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_GET_NUMBER_OF_VEHICLE_COLOURS(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        int res = VEHICLE::GET_NUMBER_OF_VEHICLE_COLOURS(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_SET_VEHICLE_COLOUR_COMBINATION(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int colorCombination = (int)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_VEHICLE_COLOUR_COMBINATION(vehicle, colorCombination);
    }

    static void WREN_VEHICLE_GET_VEHICLE_COLOUR_COMBINATION(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        int res = VEHICLE::GET_VEHICLE_COLOUR_COMBINATION(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_SET_VEHICLE_XENON_LIGHT_COLOR_INDEX(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int colorIndex = (int)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_VEHICLE_XENON_LIGHT_COLOR_INDEX(vehicle, colorIndex);
    }

    static void WREN_VEHICLE_GET_VEHICLE_XENON_LIGHT_COLOR_INDEX(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        int res = VEHICLE::GET_VEHICLE_XENON_LIGHT_COLOR_INDEX(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_SET_VEHICLE_IS_CONSIDERED_BY_PLAYER(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_VEHICLE_IS_CONSIDERED_BY_PLAYER(vehicle, toggle);
    }

    static void WREN_VEHICLE_SET_VEHICLE_WILL_FORCE_OTHER_VEHICLES_TO_STOP(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_VEHICLE_WILL_FORCE_OTHER_VEHICLES_TO_STOP(vehicle, toggle);
    }

    static void WREN_VEHICLE_SET_VEHICLE_ACT_AS_IF_HAS_SIREN_ON(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_VEHICLE_ACT_AS_IF_HAS_SIREN_ON(vehicle, p1);
    }

    static void WREN_VEHICLE_SET_VEHICLE_USE_MORE_RESTRICTIVE_SPAWN_CHECKS(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_VEHICLE_USE_MORE_RESTRICTIVE_SPAWN_CHECKS(vehicle, p1);
    }

    static void WREN_VEHICLE_SET_VEHICLE_MAY_BE_USED_BY_GOTO_POINT_ANY_MEANS(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_VEHICLE_MAY_BE_USED_BY_GOTO_POINT_ANY_MEANS(vehicle, p1);
    }

    static void WREN_VEHICLE_GET_RANDOM_VEHICLE_MODEL_IN_MEMORY(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);
        Hash modelHash;
        int successIndicator;

        VEHICLE::GET_RANDOM_VEHICLE_MODEL_IN_MEMORY(p0, &modelHash, &successIndicator);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, modelHash);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, successIndicator);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_VEHICLE_GET_VEHICLE_DOOR_LOCK_STATUS(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        int res = VEHICLE::GET_VEHICLE_DOOR_LOCK_STATUS(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_GET_VEHICLE_INDIVIDUAL_DOOR_LOCK_STATUS(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int doorId = (int)wrenGetSlotDouble(vm, 2);

        int res = VEHICLE::GET_VEHICLE_INDIVIDUAL_DOOR_LOCK_STATUS(vehicle, doorId);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_IS_VEHICLE_DOOR_DAMAGED(WrenVM* vm)
    {
        Vehicle veh = (Vehicle)wrenGetSlotDouble(vm, 1);
        int doorID = (int)wrenGetSlotDouble(vm, 2);

        BOOL res = VEHICLE::IS_VEHICLE_DOOR_DAMAGED(veh, doorID);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_SET_DOOR_ALLOWED_TO_BE_BROKEN_OFF(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int doorId = (int)wrenGetSlotDouble(vm, 2);
        BOOL isBreakable = (BOOL)wrenGetSlotBool(vm, 3);

        VEHICLE::SET_DOOR_ALLOWED_TO_BE_BROKEN_OFF(vehicle, doorId, isBreakable);
    }

    static void WREN_VEHICLE_IS_VEHICLE_BUMPER_BOUNCING(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL frontBumper = (BOOL)wrenGetSlotBool(vm, 2);

        BOOL res = VEHICLE::IS_VEHICLE_BUMPER_BOUNCING(vehicle, frontBumper);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_IS_VEHICLE_BUMPER_BROKEN_OFF(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL front = (BOOL)wrenGetSlotBool(vm, 2);

        BOOL res = VEHICLE::IS_VEHICLE_BUMPER_BROKEN_OFF(vehicle, front);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_IS_COP_VEHICLE_IN_AREA_3D(WrenVM* vm)
    {
        float x1 = (float)wrenGetSlotDouble(vm, 1);
        float x2 = (float)wrenGetSlotDouble(vm, 2);
        float y1 = (float)wrenGetSlotDouble(vm, 3);
        float y2 = (float)wrenGetSlotDouble(vm, 4);
        float z1 = (float)wrenGetSlotDouble(vm, 5);
        float z2 = (float)wrenGetSlotDouble(vm, 6);

        BOOL res = VEHICLE::IS_COP_VEHICLE_IN_AREA_3D(x1, x2, y1, y2, z1, z2);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_IS_VEHICLE_ON_ALL_WHEELS(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::IS_VEHICLE_ON_ALL_WHEELS(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_GET_VEHICLE_MODEL_VALUE(WrenVM* vm)
    {
        Hash vehicleModel = (Hash)wrenGetSlotDouble(vm, 1);

        int res = VEHICLE::GET_VEHICLE_MODEL_VALUE(vehicleModel);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_GET_VEHICLE_LAYOUT_HASH(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        Hash res = VEHICLE::GET_VEHICLE_LAYOUT_HASH(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_GET_IN_VEHICLE_CLIPSET_HASH_FOR_SEAT(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);

        Any res = VEHICLE::GET_IN_VEHICLE_CLIPSET_HASH_FOR_SEAT(vehicle, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_SET_RENDER_TRAIN_AS_DERAILED(WrenVM* vm)
    {
        Vehicle train = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_RENDER_TRAIN_AS_DERAILED(train, toggle);
    }

    static void WREN_VEHICLE_SET_VEHICLE_EXTRA_COLOURS(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int pearlescentColor = (int)wrenGetSlotDouble(vm, 2);
        int wheelColor = (int)wrenGetSlotDouble(vm, 3);

        VEHICLE::SET_VEHICLE_EXTRA_COLOURS(vehicle, pearlescentColor, wheelColor);
    }

    static void WREN_VEHICLE_GET_VEHICLE_EXTRA_COLOURS(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int pearlescentColor;
        int wheelColor;

        VEHICLE::GET_VEHICLE_EXTRA_COLOURS(vehicle, &pearlescentColor, &wheelColor);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, pearlescentColor);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, wheelColor);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_VEHICLE_SET_VEHICLE_EXTRA_COLOUR_5(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int color = (int)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_VEHICLE_EXTRA_COLOUR_5(vehicle, color);
    }

    static void WREN_VEHICLE_GET_VEHICLE_EXTRA_COLOUR_5(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int color;

        VEHICLE::GET_VEHICLE_EXTRA_COLOUR_5(vehicle, &color);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_VEHICLE_SET_VEHICLE_EXTRA_COLOUR_6(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int color = (int)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_VEHICLE_EXTRA_COLOUR_6(vehicle, color);
    }

    static void WREN_VEHICLE_GET_VEHICLE_EXTRA_COLOUR_6(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int color;

        VEHICLE::GET_VEHICLE_EXTRA_COLOUR_6(vehicle, &color);

        wrenEnsureSlots(vm, 1);

    }

    static void WREN_VEHICLE_STOP_ALL_GARAGE_ACTIVITY(WrenVM* vm)
    {

        VEHICLE::STOP_ALL_GARAGE_ACTIVITY();
    }

    static void WREN_VEHICLE_SET_VEHICLE_FIXED(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        VEHICLE::SET_VEHICLE_FIXED(vehicle);
    }

    static void WREN_VEHICLE_SET_VEHICLE_DEFORMATION_FIXED(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        VEHICLE::SET_VEHICLE_DEFORMATION_FIXED(vehicle);
    }

    static void WREN_VEHICLE_SET_VEHICLE_CAN_ENGINE_MISSFIRE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_VEHICLE_CAN_ENGINE_MISSFIRE(vehicle, toggle);
    }

    static void WREN_VEHICLE_SET_VEHICLE_CAN_LEAK_OIL(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_VEHICLE_CAN_LEAK_OIL(vehicle, toggle);
    }

    static void WREN_VEHICLE_SET_VEHICLE_CAN_LEAK_PETROL(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_VEHICLE_CAN_LEAK_PETROL(vehicle, toggle);
    }

    static void WREN_VEHICLE_SET_DISABLE_VEHICLE_PETROL_TANK_FIRES(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_DISABLE_VEHICLE_PETROL_TANK_FIRES(vehicle, toggle);
    }

    static void WREN_VEHICLE_SET_DISABLE_VEHICLE_PETROL_TANK_DAMAGE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_DISABLE_VEHICLE_PETROL_TANK_DAMAGE(vehicle, toggle);
    }

    static void WREN_VEHICLE_SET_DISABLE_VEHICLE_ENGINE_FIRES(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_DISABLE_VEHICLE_ENGINE_FIRES(vehicle, toggle);
    }

    static void WREN_VEHICLE_SET_VEHICLE_LIMIT_SPEED_WHEN_PLAYER_INACTIVE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_VEHICLE_LIMIT_SPEED_WHEN_PLAYER_INACTIVE(vehicle, p1);
    }

    static void WREN_VEHICLE_SET_VEHICLE_STOP_INSTANTLY_WHEN_PLAYER_INACTIVE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_VEHICLE_STOP_INSTANTLY_WHEN_PLAYER_INACTIVE(vehicle, p1);
    }

    static void WREN_VEHICLE_SET_DISABLE_PRETEND_OCCUPANTS(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_DISABLE_PRETEND_OCCUPANTS(vehicle, toggle);
    }

    static void WREN_VEHICLE_REMOVE_VEHICLES_FROM_GENERATORS_IN_AREA(WrenVM* vm)
    {
        float x1 = (float)wrenGetSlotDouble(vm, 1);
        float y1 = (float)wrenGetSlotDouble(vm, 2);
        float z1 = (float)wrenGetSlotDouble(vm, 3);
        float x2 = (float)wrenGetSlotDouble(vm, 4);
        float y2 = (float)wrenGetSlotDouble(vm, 5);
        float z2 = (float)wrenGetSlotDouble(vm, 6);
        Any unk = (Any)wrenGetSlotDouble(vm, 7);

        VEHICLE::REMOVE_VEHICLES_FROM_GENERATORS_IN_AREA(x1, y1, z1, x2, y2, z2, unk);
    }

    static void WREN_VEHICLE_SET_VEHICLE_STEER_BIAS(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        float value = (float)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_VEHICLE_STEER_BIAS(vehicle, value);
    }

    static void WREN_VEHICLE_IS_VEHICLE_EXTRA_TURNED_ON(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int extraId = (int)wrenGetSlotDouble(vm, 2);

        BOOL res = VEHICLE::IS_VEHICLE_EXTRA_TURNED_ON(vehicle, extraId);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_SET_VEHICLE_EXTRA(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int extraId = (int)wrenGetSlotDouble(vm, 2);
        BOOL disable = (BOOL)wrenGetSlotBool(vm, 3);

        VEHICLE::SET_VEHICLE_EXTRA(vehicle, extraId, disable);
    }

    static void WREN_VEHICLE_DOES_EXTRA_EXIST(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int extraId = (int)wrenGetSlotDouble(vm, 2);

        BOOL res = VEHICLE::DOES_EXTRA_EXIST(vehicle, extraId);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_IS_EXTRA_BROKEN_OFF(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int tyreIndex = (int)wrenGetSlotDouble(vm, 2);

        BOOL res = VEHICLE::IS_EXTRA_BROKEN_OFF(vehicle, tyreIndex);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_SET_CONVERTIBLE_ROOF(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_CONVERTIBLE_ROOF(vehicle, p1);
    }

    static void WREN_VEHICLE_LOWER_CONVERTIBLE_ROOF(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL instantlyLower = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::LOWER_CONVERTIBLE_ROOF(vehicle, instantlyLower);
    }

    static void WREN_VEHICLE_RAISE_CONVERTIBLE_ROOF(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL instantlyRaise = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::RAISE_CONVERTIBLE_ROOF(vehicle, instantlyRaise);
    }

    static void WREN_VEHICLE_GET_CONVERTIBLE_ROOF_STATE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        int res = VEHICLE::GET_CONVERTIBLE_ROOF_STATE(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_IS_VEHICLE_A_CONVERTIBLE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        BOOL res = VEHICLE::IS_VEHICLE_A_CONVERTIBLE(vehicle, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_TRANSFORM_TO_SUBMARINE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL noAnimation = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::TRANSFORM_TO_SUBMARINE(vehicle, noAnimation);
    }

    static void WREN_VEHICLE_TRANSFORM_TO_CAR(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL noAnimation = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::TRANSFORM_TO_CAR(vehicle, noAnimation);
    }

    static void WREN_VEHICLE_IS_VEHICLE_IN_SUBMARINE_MODE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::IS_VEHICLE_IN_SUBMARINE_MODE(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_IS_VEHICLE_STOPPED_AT_TRAFFIC_LIGHTS(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::IS_VEHICLE_STOPPED_AT_TRAFFIC_LIGHTS(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_SET_VEHICLE_DAMAGE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        float xOffset = (float)wrenGetSlotDouble(vm, 2);
        float yOffset = (float)wrenGetSlotDouble(vm, 3);
        float zOffset = (float)wrenGetSlotDouble(vm, 4);
        float damage = (float)wrenGetSlotDouble(vm, 5);
        float radius = (float)wrenGetSlotDouble(vm, 6);
        BOOL focusOnModel = (BOOL)wrenGetSlotBool(vm, 7);

        VEHICLE::SET_VEHICLE_DAMAGE(vehicle, xOffset, yOffset, zOffset, damage, radius, focusOnModel);
    }

    static void WREN_VEHICLE_SET_VEHICLE_OCCUPANTS_TAKE_EXPLOSIVE_DAMAGE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_VEHICLE_OCCUPANTS_TAKE_EXPLOSIVE_DAMAGE(p0, p1);
    }

    static void WREN_VEHICLE_GET_VEHICLE_ENGINE_HEALTH(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        float res = VEHICLE::GET_VEHICLE_ENGINE_HEALTH(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_SET_VEHICLE_ENGINE_HEALTH(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        float health = (float)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_VEHICLE_ENGINE_HEALTH(vehicle, health);
    }

    static void WREN_VEHICLE_SET_PLANE_ENGINE_HEALTH(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        float health = (float)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_PLANE_ENGINE_HEALTH(vehicle, health);
    }

    static void WREN_VEHICLE_GET_VEHICLE_PETROL_TANK_HEALTH(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        float res = VEHICLE::GET_VEHICLE_PETROL_TANK_HEALTH(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_SET_VEHICLE_PETROL_TANK_HEALTH(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        float health = (float)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_VEHICLE_PETROL_TANK_HEALTH(vehicle, health);
    }

    static void WREN_VEHICLE_IS_VEHICLE_STUCK_TIMER_UP(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);
        int p2 = (int)wrenGetSlotDouble(vm, 3);

        BOOL res = VEHICLE::IS_VEHICLE_STUCK_TIMER_UP(vehicle, p1, p2);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_RESET_VEHICLE_STUCK_TIMER(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int nullAttributes = (int)wrenGetSlotDouble(vm, 2);

        VEHICLE::RESET_VEHICLE_STUCK_TIMER(vehicle, nullAttributes);
    }

    static void WREN_VEHICLE_IS_VEHICLE_DRIVEABLE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL isOnFireCheck = (BOOL)wrenGetSlotBool(vm, 2);

        BOOL res = VEHICLE::IS_VEHICLE_DRIVEABLE(vehicle, isOnFireCheck);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_SET_VEHICLE_HAS_BEEN_OWNED_BY_PLAYER(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL owned = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_VEHICLE_HAS_BEEN_OWNED_BY_PLAYER(vehicle, owned);
    }

    static void WREN_VEHICLE_SET_VEHICLE_NEEDS_TO_BE_HOTWIRED(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_VEHICLE_NEEDS_TO_BE_HOTWIRED(vehicle, toggle);
    }

    static void WREN_VEHICLE_SET_VEHICLE_BLIP_THROTTLE_RANDOMLY(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_VEHICLE_BLIP_THROTTLE_RANDOMLY(vehicle, p1);
    }

    static void WREN_VEHICLE_SET_POLICE_FOCUS_WILL_TRACK_VEHICLE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_POLICE_FOCUS_WILL_TRACK_VEHICLE(vehicle, toggle);
    }

    static void WREN_VEHICLE_START_VEHICLE_HORN(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int duration = (int)wrenGetSlotDouble(vm, 2);
        Hash mode = (Hash)wrenGetSlotDouble(vm, 3);
        BOOL forever = (BOOL)wrenGetSlotBool(vm, 4);

        VEHICLE::START_VEHICLE_HORN(vehicle, duration, mode, forever);
    }

    static void WREN_VEHICLE_SET_VEHICLE_IN_CAR_MOD_SHOP(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_VEHICLE_IN_CAR_MOD_SHOP(vehicle, toggle);
    }

    static void WREN_VEHICLE_SET_VEHICLE_HAS_STRONG_AXLES(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_VEHICLE_HAS_STRONG_AXLES(vehicle, toggle);
    }

    static void WREN_VEHICLE_GET_DISPLAY_NAME_FROM_VEHICLE_MODEL(WrenVM* vm)
    {
        Hash modelHash = (Hash)wrenGetSlotDouble(vm, 1);

        const char* res = VEHICLE::GET_DISPLAY_NAME_FROM_VEHICLE_MODEL(modelHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotString(vm, 0, res);
    }

    static void WREN_VEHICLE_GET_MAKE_NAME_FROM_VEHICLE_MODEL(WrenVM* vm)
    {
        Hash modelHash = (Hash)wrenGetSlotDouble(vm, 1);

        const char* res = VEHICLE::GET_MAKE_NAME_FROM_VEHICLE_MODEL(modelHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotString(vm, 0, res);
    }

    static void WREN_VEHICLE_GET_VEHICLE_DEFORMATION_AT_POS(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        float offsetX = (float)wrenGetSlotDouble(vm, 2);
        float offsetY = (float)wrenGetSlotDouble(vm, 3);
        float offsetZ = (float)wrenGetSlotDouble(vm, 4);

        Vector3 res = VEHICLE::GET_VEHICLE_DEFORMATION_AT_POS(vehicle, offsetX, offsetY, offsetZ);

        wrenEnsureSlots(vm, 1);

        wrenGetVariable(vm, "natives", "Vector3", 0);
        Vector3* wren_res = (Vector3*)wrenSetSlotNewForeign(vm, 0, 0, sizeof(Vector3));
        wren_res->x = res.x;
        wren_res->y = res.y;
        wren_res->z = res.z;
    }

    static void WREN_VEHICLE_SET_VEHICLE_LIVERY(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int livery = (int)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_VEHICLE_LIVERY(vehicle, livery);
    }

    static void WREN_VEHICLE_GET_VEHICLE_LIVERY(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        int res = VEHICLE::GET_VEHICLE_LIVERY(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_GET_VEHICLE_LIVERY_COUNT(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        int res = VEHICLE::GET_VEHICLE_LIVERY_COUNT(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_SET_VEHICLE_LIVERY2(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int livery = (int)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_VEHICLE_LIVERY2(vehicle, livery);
    }

    static void WREN_VEHICLE_GET_VEHICLE_LIVERY2(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        int res = VEHICLE::GET_VEHICLE_LIVERY2(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_GET_VEHICLE_LIVERY2_COUNT(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        int res = VEHICLE::GET_VEHICLE_LIVERY2_COUNT(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_IS_VEHICLE_WINDOW_INTACT(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int windowIndex = (int)wrenGetSlotDouble(vm, 2);

        BOOL res = VEHICLE::IS_VEHICLE_WINDOW_INTACT(vehicle, windowIndex);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_ARE_ALL_VEHICLE_WINDOWS_INTACT(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::ARE_ALL_VEHICLE_WINDOWS_INTACT(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_ARE_ANY_VEHICLE_SEATS_FREE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::ARE_ANY_VEHICLE_SEATS_FREE(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_RESET_VEHICLE_WHEELS(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::RESET_VEHICLE_WHEELS(vehicle, toggle);
    }

    static void WREN_VEHICLE_IS_HELI_PART_BROKEN(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);
        BOOL p3 = (BOOL)wrenGetSlotBool(vm, 4);

        BOOL res = VEHICLE::IS_HELI_PART_BROKEN(vehicle, p1, p2, p3);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_GET_HELI_MAIN_ROTOR_HEALTH(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        float res = VEHICLE::GET_HELI_MAIN_ROTOR_HEALTH(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_GET_HELI_TAIL_ROTOR_HEALTH(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        float res = VEHICLE::GET_HELI_TAIL_ROTOR_HEALTH(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_GET_HELI_TAIL_BOOM_HEALTH(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        float res = VEHICLE::GET_HELI_TAIL_BOOM_HEALTH(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_SET_HELI_MAIN_ROTOR_HEALTH(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        float health = (float)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_HELI_MAIN_ROTOR_HEALTH(vehicle, health);
    }

    static void WREN_VEHICLE_SET_HELI_TAIL_ROTOR_HEALTH(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        float health = (float)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_HELI_TAIL_ROTOR_HEALTH(vehicle, health);
    }

    static void WREN_VEHICLE_SET_HELI_TAIL_BOOM_CAN_BREAK_OFF(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_HELI_TAIL_BOOM_CAN_BREAK_OFF(vehicle, p1);
    }

    static void WREN_VEHICLE_SET_VEHICLE_NAME_DEBUG(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        const char* name = wrenGetSlotString(vm, 2);

        VEHICLE::SET_VEHICLE_NAME_DEBUG(vehicle, name);
    }

    static void WREN_VEHICLE_SET_VEHICLE_EXPLODES_ON_HIGH_EXPLOSION_DAMAGE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_VEHICLE_EXPLODES_ON_HIGH_EXPLOSION_DAMAGE(vehicle, toggle);
    }

    static void WREN_VEHICLE_SET_VEHICLE_EXPLODES_ON_EXPLOSION_DAMAGE_AT_ZERO_BODY_HEALTH(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_VEHICLE_EXPLODES_ON_EXPLOSION_DAMAGE_AT_ZERO_BODY_HEALTH(p0, p1);
    }

    static void WREN_VEHICLE_SET_ALLOW_VEHICLE_EXPLODES_ON_CONTACT(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_ALLOW_VEHICLE_EXPLODES_ON_CONTACT(vehicle, p1);
    }

    static void WREN_VEHICLE_SET_VEHICLE_DISABLE_TOWING(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_VEHICLE_DISABLE_TOWING(vehicle, toggle);
    }

    static void WREN_VEHICLE_GET_VEHICLE_HAS_LANDING_GEAR(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::GET_VEHICLE_HAS_LANDING_GEAR(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_CONTROL_LANDING_GEAR(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int state = (int)wrenGetSlotDouble(vm, 2);

        VEHICLE::CONTROL_LANDING_GEAR(vehicle, state);
    }

    static void WREN_VEHICLE_GET_LANDING_GEAR_STATE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        int res = VEHICLE::GET_LANDING_GEAR_STATE(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_IS_ANY_VEHICLE_NEAR_POINT(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        float radius = (float)wrenGetSlotDouble(vm, 4);

        BOOL res = VEHICLE::IS_ANY_VEHICLE_NEAR_POINT(x, y, z, radius);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_REQUEST_VEHICLE_HIGH_DETAIL_MODEL(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        VEHICLE::REQUEST_VEHICLE_HIGH_DETAIL_MODEL(vehicle);
    }

    static void WREN_VEHICLE_REMOVE_VEHICLE_HIGH_DETAIL_MODEL(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        VEHICLE::REMOVE_VEHICLE_HIGH_DETAIL_MODEL(vehicle);
    }

    static void WREN_VEHICLE_IS_VEHICLE_HIGH_DETAIL(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::IS_VEHICLE_HIGH_DETAIL(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_REQUEST_VEHICLE_ASSET(WrenVM* vm)
    {
        Hash vehicleHash = (Hash)wrenGetSlotDouble(vm, 1);
        int vehicleAsset = (int)wrenGetSlotDouble(vm, 2);

        VEHICLE::REQUEST_VEHICLE_ASSET(vehicleHash, vehicleAsset);
    }

    static void WREN_VEHICLE_HAS_VEHICLE_ASSET_LOADED(WrenVM* vm)
    {
        int vehicleAsset = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::HAS_VEHICLE_ASSET_LOADED(vehicleAsset);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_REMOVE_VEHICLE_ASSET(WrenVM* vm)
    {
        int vehicleAsset = (int)wrenGetSlotDouble(vm, 1);

        VEHICLE::REMOVE_VEHICLE_ASSET(vehicleAsset);
    }

    static void WREN_VEHICLE_SET_VEHICLE_TOW_TRUCK_ARM_POSITION(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        float position = (float)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_VEHICLE_TOW_TRUCK_ARM_POSITION(vehicle, position);
    }

    static void WREN_VEHICLE_ATTACH_VEHICLE_TO_TOW_TRUCK(WrenVM* vm)
    {
        Vehicle towTruck = (Vehicle)wrenGetSlotDouble(vm, 1);
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 2);
        BOOL rear = (BOOL)wrenGetSlotBool(vm, 3);
        float hookOffsetX = (float)wrenGetSlotDouble(vm, 4);
        float hookOffsetY = (float)wrenGetSlotDouble(vm, 5);
        float hookOffsetZ = (float)wrenGetSlotDouble(vm, 6);

        VEHICLE::ATTACH_VEHICLE_TO_TOW_TRUCK(towTruck, vehicle, rear, hookOffsetX, hookOffsetY, hookOffsetZ);
    }

    static void WREN_VEHICLE_DETACH_VEHICLE_FROM_TOW_TRUCK(WrenVM* vm)
    {
        Vehicle towTruck = (Vehicle)wrenGetSlotDouble(vm, 1);
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 2);

        VEHICLE::DETACH_VEHICLE_FROM_TOW_TRUCK(towTruck, vehicle);
    }

    static void WREN_VEHICLE_DETACH_VEHICLE_FROM_ANY_TOW_TRUCK(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::DETACH_VEHICLE_FROM_ANY_TOW_TRUCK(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_IS_VEHICLE_ATTACHED_TO_TOW_TRUCK(WrenVM* vm)
    {
        Vehicle towTruck = (Vehicle)wrenGetSlotDouble(vm, 1);
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 2);

        BOOL res = VEHICLE::IS_VEHICLE_ATTACHED_TO_TOW_TRUCK(towTruck, vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_GET_ENTITY_ATTACHED_TO_TOW_TRUCK(WrenVM* vm)
    {
        Vehicle towTruck = (Vehicle)wrenGetSlotDouble(vm, 1);

        Entity res = VEHICLE::GET_ENTITY_ATTACHED_TO_TOW_TRUCK(towTruck);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_SET_VEHICLE_AUTOMATICALLY_ATTACHES(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);

        Any res = VEHICLE::SET_VEHICLE_AUTOMATICALLY_ATTACHES(vehicle, p1, p2);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_SET_VEHICLE_BULLDOZER_ARM_POSITION(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        float position = (float)wrenGetSlotDouble(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        VEHICLE::SET_VEHICLE_BULLDOZER_ARM_POSITION(vehicle, position, p2);
    }

    static void WREN_VEHICLE_SET_VEHICLE_TANK_TURRET_POSITION(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        float position = (float)wrenGetSlotDouble(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        VEHICLE::SET_VEHICLE_TANK_TURRET_POSITION(vehicle, position, p2);
    }

    static void WREN_VEHICLE_SET_VEHICLE_TURRET_TARGET(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);
        Any p5 = (Any)wrenGetSlotDouble(vm, 6);

        VEHICLE::SET_VEHICLE_TURRET_TARGET(p0, p1, p2, p3, p4, p5);
    }

    static void WREN_VEHICLE_SET_VEHICLE_TANK_STATIONARY(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_VEHICLE_TANK_STATIONARY(p0, p1);
    }

    static void WREN_VEHICLE_SET_VEHICLE_TURRET_SPEED_THIS_FRAME(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        float speed = (float)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_VEHICLE_TURRET_SPEED_THIS_FRAME(vehicle, speed);
    }

    static void WREN_VEHICLE_DISABLE_VEHICLE_TURRET_MOVEMENT_THIS_FRAME(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        VEHICLE::DISABLE_VEHICLE_TURRET_MOVEMENT_THIS_FRAME(vehicle);
    }

    static void WREN_VEHICLE_SET_VEHICLE_FLIGHT_NOZZLE_POSITION(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        float angleRatio = (float)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_VEHICLE_FLIGHT_NOZZLE_POSITION(vehicle, angleRatio);
    }

    static void WREN_VEHICLE_SET_VEHICLE_FLIGHT_NOZZLE_POSITION_IMMEDIATE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        float angle = (float)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_VEHICLE_FLIGHT_NOZZLE_POSITION_IMMEDIATE(vehicle, angle);
    }

    static void WREN_VEHICLE_GET_VEHICLE_FLIGHT_NOZZLE_POSITION(WrenVM* vm)
    {
        Vehicle plane = (Vehicle)wrenGetSlotDouble(vm, 1);

        float res = VEHICLE::GET_VEHICLE_FLIGHT_NOZZLE_POSITION(plane);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_SET_DISABLE_VERTICAL_FLIGHT_MODE_TRANSITION(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_DISABLE_VERTICAL_FLIGHT_MODE_TRANSITION(vehicle, toggle);
    }

    static void WREN_VEHICLE_GENERATE_VEHICLE_CREATION_POS_FROM_PATHS(WrenVM* vm)
    {
        Vector3 outVec;
        Any p1 = (Any)wrenGetSlotDouble(vm, 1);
        Vector3 outVec1;
        Any p3 = (Any)wrenGetSlotDouble(vm, 2);
        Any p4 = (Any)wrenGetSlotDouble(vm, 3);
        Any p5 = (Any)wrenGetSlotDouble(vm, 4);
        Any p6 = (Any)wrenGetSlotDouble(vm, 5);
        Any p7 = (Any)wrenGetSlotDouble(vm, 6);
        Any p8 = (Any)wrenGetSlotDouble(vm, 7);

        BOOL res = VEHICLE::GENERATE_VEHICLE_CREATION_POS_FROM_PATHS(&outVec, p1, &outVec1, p3, p4, p5, p6, p7, p8);

        wrenEnsureSlots(vm, 6);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenGetVariable(vm, "natives", "Vector3", 2);
        Vector3* wren_outVec = (Vector3*)wrenSetSlotNewForeign(vm, 3, 2, sizeof(Vector3));
        wren_outVec->x = outVec.x;
        wren_outVec->y = outVec.y;
        wren_outVec->z = outVec.z;
        wrenInsertInList(vm, 0, 1, 3);

        Vector3* wren_outVec1 = (Vector3*)wrenSetSlotNewForeign(vm, 4, 2, sizeof(Vector3));
        wren_outVec1->x = outVec1.x;
        wren_outVec1->y = outVec1.y;
        wren_outVec1->z = outVec1.z;
        wrenInsertInList(vm, 0, 2, 4);

    }

    static void WREN_VEHICLE_SET_VEHICLE_BURNOUT(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_VEHICLE_BURNOUT(vehicle, toggle);
    }

    static void WREN_VEHICLE_IS_VEHICLE_IN_BURNOUT(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::IS_VEHICLE_IN_BURNOUT(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_SET_VEHICLE_REDUCE_GRIP(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_VEHICLE_REDUCE_GRIP(vehicle, toggle);
    }

    static void WREN_VEHICLE_SET_VEHICLE_REDUCE_GRIP_LEVEL(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int val = (int)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_VEHICLE_REDUCE_GRIP_LEVEL(vehicle, val);
    }

    static void WREN_VEHICLE_SET_VEHICLE_INDICATOR_LIGHTS(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int turnSignal = (int)wrenGetSlotDouble(vm, 2);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 3);

        VEHICLE::SET_VEHICLE_INDICATOR_LIGHTS(vehicle, turnSignal, toggle);
    }

    static void WREN_VEHICLE_SET_VEHICLE_BRAKE_LIGHTS(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_VEHICLE_BRAKE_LIGHTS(vehicle, toggle);
    }

    static void WREN_VEHICLE_SET_VEHICLE_HANDBRAKE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_VEHICLE_HANDBRAKE(vehicle, toggle);
    }

    static void WREN_VEHICLE_SET_VEHICLE_BRAKE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_VEHICLE_BRAKE(vehicle, toggle);
    }

    static void WREN_VEHICLE_INSTANTLY_FILL_VEHICLE_POPULATION(WrenVM* vm)
    {

        VEHICLE::INSTANTLY_FILL_VEHICLE_POPULATION();
    }

    static void WREN_VEHICLE_HAS_INSTANT_FILL_VEHICLE_POPULATION_FINISHED(WrenVM* vm)
    {

        BOOL res = VEHICLE::HAS_INSTANT_FILL_VEHICLE_POPULATION_FINISHED();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_NETWORK_ENABLE_EMPTY_CROWDING_VEHICLES_REMOVAL(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        VEHICLE::NETWORK_ENABLE_EMPTY_CROWDING_VEHICLES_REMOVAL(toggle);
    }

    static void WREN_VEHICLE_NETWORK_CAP_EMPTY_CROWDING_VEHICLES_REMOVAL(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);

        VEHICLE::NETWORK_CAP_EMPTY_CROWDING_VEHICLES_REMOVAL(p0);
    }

    static void WREN_VEHICLE_GET_VEHICLE_TRAILER_VEHICLE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        Vehicle trailer;

        BOOL res = VEHICLE::GET_VEHICLE_TRAILER_VEHICLE(vehicle, &trailer);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, trailer);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_VEHICLE_SET_VEHICLE_USES_LARGE_REAR_RAMP(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_VEHICLE_USES_LARGE_REAR_RAMP(vehicle, toggle);
    }

    static void WREN_VEHICLE_SET_VEHICLE_RUDDER_BROKEN(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_VEHICLE_RUDDER_BROKEN(vehicle, toggle);
    }

    static void WREN_VEHICLE_SET_CONVERTIBLE_ROOF_LATCH_STATE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL state = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_CONVERTIBLE_ROOF_LATCH_STATE(vehicle, state);
    }

    static void WREN_VEHICLE_GET_VEHICLE_ESTIMATED_MAX_SPEED(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        float res = VEHICLE::GET_VEHICLE_ESTIMATED_MAX_SPEED(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_GET_VEHICLE_MAX_BRAKING(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        float res = VEHICLE::GET_VEHICLE_MAX_BRAKING(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_GET_VEHICLE_MAX_TRACTION(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        float res = VEHICLE::GET_VEHICLE_MAX_TRACTION(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_GET_VEHICLE_ACCELERATION(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        float res = VEHICLE::GET_VEHICLE_ACCELERATION(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_GET_VEHICLE_MODEL_ESTIMATED_MAX_SPEED(WrenVM* vm)
    {
        Hash modelHash = (Hash)wrenGetSlotDouble(vm, 1);

        float res = VEHICLE::GET_VEHICLE_MODEL_ESTIMATED_MAX_SPEED(modelHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_GET_VEHICLE_MODEL_MAX_BRAKING(WrenVM* vm)
    {
        Hash modelHash = (Hash)wrenGetSlotDouble(vm, 1);

        float res = VEHICLE::GET_VEHICLE_MODEL_MAX_BRAKING(modelHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_GET_VEHICLE_MODEL_MAX_BRAKING_MAX_MODS(WrenVM* vm)
    {
        Hash modelHash = (Hash)wrenGetSlotDouble(vm, 1);

        float res = VEHICLE::GET_VEHICLE_MODEL_MAX_BRAKING_MAX_MODS(modelHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_GET_VEHICLE_MODEL_MAX_TRACTION(WrenVM* vm)
    {
        Hash modelHash = (Hash)wrenGetSlotDouble(vm, 1);

        float res = VEHICLE::GET_VEHICLE_MODEL_MAX_TRACTION(modelHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_GET_VEHICLE_MODEL_ACCELERATION(WrenVM* vm)
    {
        Hash modelHash = (Hash)wrenGetSlotDouble(vm, 1);

        float res = VEHICLE::GET_VEHICLE_MODEL_ACCELERATION(modelHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_GET_VEHICLE_MODEL_ACCELERATION_MAX_MODS(WrenVM* vm)
    {
        Hash modelHash = (Hash)wrenGetSlotDouble(vm, 1);

        float res = VEHICLE::GET_VEHICLE_MODEL_ACCELERATION_MAX_MODS(modelHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_GET_FLYING_VEHICLE_MODEL_AGILITY(WrenVM* vm)
    {
        Hash modelHash = (Hash)wrenGetSlotDouble(vm, 1);

        float res = VEHICLE::GET_FLYING_VEHICLE_MODEL_AGILITY(modelHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_GET_BOAT_VEHICLE_MODEL_AGILITY(WrenVM* vm)
    {
        Hash modelHash = (Hash)wrenGetSlotDouble(vm, 1);

        float res = VEHICLE::GET_BOAT_VEHICLE_MODEL_AGILITY(modelHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_GET_VEHICLE_CLASS_ESTIMATED_MAX_SPEED(WrenVM* vm)
    {
        int vehicleClass = (int)wrenGetSlotDouble(vm, 1);

        float res = VEHICLE::GET_VEHICLE_CLASS_ESTIMATED_MAX_SPEED(vehicleClass);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_GET_VEHICLE_CLASS_MAX_TRACTION(WrenVM* vm)
    {
        int vehicleClass = (int)wrenGetSlotDouble(vm, 1);

        float res = VEHICLE::GET_VEHICLE_CLASS_MAX_TRACTION(vehicleClass);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_GET_VEHICLE_CLASS_MAX_AGILITY(WrenVM* vm)
    {
        int vehicleClass = (int)wrenGetSlotDouble(vm, 1);

        float res = VEHICLE::GET_VEHICLE_CLASS_MAX_AGILITY(vehicleClass);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_GET_VEHICLE_CLASS_MAX_ACCELERATION(WrenVM* vm)
    {
        int vehicleClass = (int)wrenGetSlotDouble(vm, 1);

        float res = VEHICLE::GET_VEHICLE_CLASS_MAX_ACCELERATION(vehicleClass);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_GET_VEHICLE_CLASS_MAX_BRAKING(WrenVM* vm)
    {
        int vehicleClass = (int)wrenGetSlotDouble(vm, 1);

        float res = VEHICLE::GET_VEHICLE_CLASS_MAX_BRAKING(vehicleClass);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_ADD_ROAD_NODE_SPEED_ZONE(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        float radius = (float)wrenGetSlotDouble(vm, 4);
        float speed = (float)wrenGetSlotDouble(vm, 5);
        BOOL p5 = (BOOL)wrenGetSlotBool(vm, 6);

        int res = VEHICLE::ADD_ROAD_NODE_SPEED_ZONE(x, y, z, radius, speed, p5);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_REMOVE_ROAD_NODE_SPEED_ZONE(WrenVM* vm)
    {
        int speedzone = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::REMOVE_ROAD_NODE_SPEED_ZONE(speedzone);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_OPEN_BOMB_BAY_DOORS(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        VEHICLE::OPEN_BOMB_BAY_DOORS(vehicle);
    }

    static void WREN_VEHICLE_CLOSE_BOMB_BAY_DOORS(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        VEHICLE::CLOSE_BOMB_BAY_DOORS(vehicle);
    }

    static void WREN_VEHICLE_GET_ARE_BOMB_BAY_DOORS_OPEN(WrenVM* vm)
    {
        Vehicle aircraft = (Vehicle)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::GET_ARE_BOMB_BAY_DOORS_OPEN(aircraft);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_IS_VEHICLE_SEARCHLIGHT_ON(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::IS_VEHICLE_SEARCHLIGHT_ON(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_SET_VEHICLE_SEARCHLIGHT(WrenVM* vm)
    {
        Vehicle heli = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL canBeUsedByAI = (BOOL)wrenGetSlotBool(vm, 3);

        VEHICLE::SET_VEHICLE_SEARCHLIGHT(heli, toggle, canBeUsedByAI);
    }

    static void WREN_VEHICLE_DOES_VEHICLE_HAVE_SEARCHLIGHT(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::DOES_VEHICLE_HAVE_SEARCHLIGHT(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_IS_ENTRY_POINT_FOR_SEAT_CLEAR(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 2);
        int seatIndex = (int)wrenGetSlotDouble(vm, 3);
        BOOL side = (BOOL)wrenGetSlotBool(vm, 4);
        BOOL onEnter = (BOOL)wrenGetSlotBool(vm, 5);

        BOOL res = VEHICLE::IS_ENTRY_POINT_FOR_SEAT_CLEAR(ped, vehicle, seatIndex, side, onEnter);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_GET_ENTRY_POINT_POSITION(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int doorId = (int)wrenGetSlotDouble(vm, 2);

        Vector3 res = VEHICLE::GET_ENTRY_POINT_POSITION(vehicle, doorId);

        wrenEnsureSlots(vm, 1);

        wrenGetVariable(vm, "natives", "Vector3", 0);
        Vector3* wren_res = (Vector3*)wrenSetSlotNewForeign(vm, 0, 0, sizeof(Vector3));
        wren_res->x = res.x;
        wren_res->y = res.y;
        wren_res->z = res.z;
    }

    static void WREN_VEHICLE_CAN_SHUFFLE_SEAT(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int seatIndex = (int)wrenGetSlotDouble(vm, 2);

        BOOL res = VEHICLE::CAN_SHUFFLE_SEAT(vehicle, seatIndex);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_GET_NUM_MOD_KITS(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        int res = VEHICLE::GET_NUM_MOD_KITS(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_SET_VEHICLE_MOD_KIT(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int modKit = (int)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_VEHICLE_MOD_KIT(vehicle, modKit);
    }

    static void WREN_VEHICLE_GET_VEHICLE_MOD_KIT(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        int res = VEHICLE::GET_VEHICLE_MOD_KIT(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_GET_VEHICLE_MOD_KIT_TYPE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        int res = VEHICLE::GET_VEHICLE_MOD_KIT_TYPE(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_GET_VEHICLE_WHEEL_TYPE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        int res = VEHICLE::GET_VEHICLE_WHEEL_TYPE(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_SET_VEHICLE_WHEEL_TYPE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int WheelType = (int)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_VEHICLE_WHEEL_TYPE(vehicle, WheelType);
    }

    static void WREN_VEHICLE_GET_NUM_MOD_COLORS(WrenVM* vm)
    {
        int paintType = (int)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        int res = VEHICLE::GET_NUM_MOD_COLORS(paintType, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_SET_VEHICLE_MOD_COLOR_1(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int paintType = (int)wrenGetSlotDouble(vm, 2);
        int color = (int)wrenGetSlotDouble(vm, 3);
        int pearlescentColor = (int)wrenGetSlotDouble(vm, 4);

        VEHICLE::SET_VEHICLE_MOD_COLOR_1(vehicle, paintType, color, pearlescentColor);
    }

    static void WREN_VEHICLE_SET_VEHICLE_MOD_COLOR_2(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int paintType = (int)wrenGetSlotDouble(vm, 2);
        int color = (int)wrenGetSlotDouble(vm, 3);

        VEHICLE::SET_VEHICLE_MOD_COLOR_2(vehicle, paintType, color);
    }

    static void WREN_VEHICLE_GET_VEHICLE_MOD_COLOR_1(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int paintType;
        int color;
        int pearlescentColor;

        VEHICLE::GET_VEHICLE_MOD_COLOR_1(vehicle, &paintType, &color, &pearlescentColor);

        wrenEnsureSlots(vm, 6);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, paintType);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, color);
        wrenInsertInList(vm, 0, 1, 2);

        wrenSetSlotDouble(vm, 3, pearlescentColor);
        wrenInsertInList(vm, 0, 2, 3);

    }

    static void WREN_VEHICLE_GET_VEHICLE_MOD_COLOR_2(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int paintType;
        int color;

        VEHICLE::GET_VEHICLE_MOD_COLOR_2(vehicle, &paintType, &color);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, paintType);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, color);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_VEHICLE_GET_VEHICLE_MOD_COLOR_1_NAME(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        const char* res = VEHICLE::GET_VEHICLE_MOD_COLOR_1_NAME(vehicle, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotString(vm, 0, res);
    }

    static void WREN_VEHICLE_GET_VEHICLE_MOD_COLOR_2_NAME(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        const char* res = VEHICLE::GET_VEHICLE_MOD_COLOR_2_NAME(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotString(vm, 0, res);
    }

    static void WREN_VEHICLE_HAVE_VEHICLE_MODS_STREAMED_IN(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::HAVE_VEHICLE_MODS_STREAMED_IN(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_IS_VEHICLE_MOD_GEN9_EXCLUSIVE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int modType = (int)wrenGetSlotDouble(vm, 2);
        int modIndex = (int)wrenGetSlotDouble(vm, 3);

        BOOL res = VEHICLE::IS_VEHICLE_MOD_GEN9_EXCLUSIVE(vehicle, modType, modIndex);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_SET_VEHICLE_MOD(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int modType = (int)wrenGetSlotDouble(vm, 2);
        int modIndex = (int)wrenGetSlotDouble(vm, 3);
        BOOL customTires = (BOOL)wrenGetSlotBool(vm, 4);

        VEHICLE::SET_VEHICLE_MOD(vehicle, modType, modIndex, customTires);
    }

    static void WREN_VEHICLE_GET_VEHICLE_MOD(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int modType = (int)wrenGetSlotDouble(vm, 2);

        int res = VEHICLE::GET_VEHICLE_MOD(vehicle, modType);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_GET_VEHICLE_MOD_VARIATION(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int modType = (int)wrenGetSlotDouble(vm, 2);

        BOOL res = VEHICLE::GET_VEHICLE_MOD_VARIATION(vehicle, modType);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_GET_NUM_VEHICLE_MODS(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int modType = (int)wrenGetSlotDouble(vm, 2);

        int res = VEHICLE::GET_NUM_VEHICLE_MODS(vehicle, modType);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_REMOVE_VEHICLE_MOD(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int modType = (int)wrenGetSlotDouble(vm, 2);

        VEHICLE::REMOVE_VEHICLE_MOD(vehicle, modType);
    }

    static void WREN_VEHICLE_TOGGLE_VEHICLE_MOD(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int modType = (int)wrenGetSlotDouble(vm, 2);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 3);

        VEHICLE::TOGGLE_VEHICLE_MOD(vehicle, modType, toggle);
    }

    static void WREN_VEHICLE_IS_TOGGLE_MOD_ON(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int modType = (int)wrenGetSlotDouble(vm, 2);

        BOOL res = VEHICLE::IS_TOGGLE_MOD_ON(vehicle, modType);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_GET_MOD_TEXT_LABEL(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int modType = (int)wrenGetSlotDouble(vm, 2);
        int modValue = (int)wrenGetSlotDouble(vm, 3);

        const char* res = VEHICLE::GET_MOD_TEXT_LABEL(vehicle, modType, modValue);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotString(vm, 0, res);
    }

    static void WREN_VEHICLE_GET_MOD_SLOT_NAME(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int modType = (int)wrenGetSlotDouble(vm, 2);

        const char* res = VEHICLE::GET_MOD_SLOT_NAME(vehicle, modType);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotString(vm, 0, res);
    }

    static void WREN_VEHICLE_GET_LIVERY_NAME(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int liveryIndex = (int)wrenGetSlotDouble(vm, 2);

        const char* res = VEHICLE::GET_LIVERY_NAME(vehicle, liveryIndex);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotString(vm, 0, res);
    }

    static void WREN_VEHICLE_GET_VEHICLE_MOD_MODIFIER_VALUE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int modType = (int)wrenGetSlotDouble(vm, 2);
        int modIndex = (int)wrenGetSlotDouble(vm, 3);

        int res = VEHICLE::GET_VEHICLE_MOD_MODIFIER_VALUE(vehicle, modType, modIndex);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_GET_VEHICLE_MOD_IDENTIFIER_HASH(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int modType = (int)wrenGetSlotDouble(vm, 2);
        int modIndex = (int)wrenGetSlotDouble(vm, 3);

        Hash res = VEHICLE::GET_VEHICLE_MOD_IDENTIFIER_HASH(vehicle, modType, modIndex);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_PRELOAD_VEHICLE_MOD(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        int modType = (int)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);

        VEHICLE::PRELOAD_VEHICLE_MOD(p0, modType, p2);
    }

    static void WREN_VEHICLE_HAS_PRELOAD_MODS_FINISHED(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::HAS_PRELOAD_MODS_FINISHED(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_RELEASE_PRELOAD_MODS(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        VEHICLE::RELEASE_PRELOAD_MODS(vehicle);
    }

    static void WREN_VEHICLE_SET_VEHICLE_TYRE_SMOKE_COLOR(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int r = (int)wrenGetSlotDouble(vm, 2);
        int g = (int)wrenGetSlotDouble(vm, 3);
        int b = (int)wrenGetSlotDouble(vm, 4);

        VEHICLE::SET_VEHICLE_TYRE_SMOKE_COLOR(vehicle, r, g, b);
    }

    static void WREN_VEHICLE_GET_VEHICLE_TYRE_SMOKE_COLOR(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int r;
        int g;
        int b;

        VEHICLE::GET_VEHICLE_TYRE_SMOKE_COLOR(vehicle, &r, &g, &b);

        wrenEnsureSlots(vm, 6);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, r);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, g);
        wrenInsertInList(vm, 0, 1, 2);

        wrenSetSlotDouble(vm, 3, b);
        wrenInsertInList(vm, 0, 2, 3);

    }

    static void WREN_VEHICLE_SET_VEHICLE_WINDOW_TINT(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int tint = (int)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_VEHICLE_WINDOW_TINT(vehicle, tint);
    }

    static void WREN_VEHICLE_GET_VEHICLE_WINDOW_TINT(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        int res = VEHICLE::GET_VEHICLE_WINDOW_TINT(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_GET_NUM_VEHICLE_WINDOW_TINTS(WrenVM* vm)
    {

        int res = VEHICLE::GET_NUM_VEHICLE_WINDOW_TINTS();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_GET_VEHICLE_COLOR(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int r;
        int g;
        int b;

        VEHICLE::GET_VEHICLE_COLOR(vehicle, &r, &g, &b);

        wrenEnsureSlots(vm, 6);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, r);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, g);
        wrenInsertInList(vm, 0, 1, 2);

        wrenSetSlotDouble(vm, 3, b);
        wrenInsertInList(vm, 0, 2, 3);

    }

    static void WREN_VEHICLE_GET_VEHICLE_COLOURS_WHICH_CAN_BE_SET(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        int res = VEHICLE::GET_VEHICLE_COLOURS_WHICH_CAN_BE_SET(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_GET_VEHICLE_CAUSE_OF_DESTRUCTION(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        Hash res = VEHICLE::GET_VEHICLE_CAUSE_OF_DESTRUCTION(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_OVERRIDE_PLANE_DAMAGE_THREHSOLD(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        float health = (float)wrenGetSlotDouble(vm, 2);

        VEHICLE::OVERRIDE_PLANE_DAMAGE_THREHSOLD(vehicle, health);
    }

    static void WREN_VEHICLE_GET_IS_LEFT_VEHICLE_HEADLIGHT_DAMAGED(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::GET_IS_LEFT_VEHICLE_HEADLIGHT_DAMAGED(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_GET_IS_RIGHT_VEHICLE_HEADLIGHT_DAMAGED(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::GET_IS_RIGHT_VEHICLE_HEADLIGHT_DAMAGED(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_GET_BOTH_VEHICLE_HEADLIGHTS_DAMAGED(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::GET_BOTH_VEHICLE_HEADLIGHTS_DAMAGED(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_MODIFY_VEHICLE_TOP_SPEED(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        float value = (float)wrenGetSlotDouble(vm, 2);

        VEHICLE::MODIFY_VEHICLE_TOP_SPEED(vehicle, value);
    }

    static void WREN_VEHICLE_SET_VEHICLE_MAX_SPEED(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        float speed = (float)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_VEHICLE_MAX_SPEED(vehicle, speed);
    }

    static void WREN_VEHICLE_SET_VEHICLE_STAYS_FROZEN_WHEN_CLEANED_UP(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_VEHICLE_STAYS_FROZEN_WHEN_CLEANED_UP(vehicle, toggle);
    }

    static void WREN_VEHICLE_SET_VEHICLE_ACT_AS_IF_HIGH_SPEED_FOR_FRAG_SMASHING(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_VEHICLE_ACT_AS_IF_HIGH_SPEED_FOR_FRAG_SMASHING(vehicle, p1);
    }

    static void WREN_VEHICLE_SET_PEDS_CAN_FALL_OFF_THIS_VEHICLE_FROM_LARGE_FALL_DAMAGE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);
        float p2 = (float)wrenGetSlotDouble(vm, 3);

        VEHICLE::SET_PEDS_CAN_FALL_OFF_THIS_VEHICLE_FROM_LARGE_FALL_DAMAGE(vehicle, toggle, p2);
    }

    static void WREN_VEHICLE_ADD_VEHICLE_COMBAT_ANGLED_AVOIDANCE_AREA(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);
        float p2 = (float)wrenGetSlotDouble(vm, 3);
        float p3 = (float)wrenGetSlotDouble(vm, 4);
        float p4 = (float)wrenGetSlotDouble(vm, 5);
        float p5 = (float)wrenGetSlotDouble(vm, 6);
        float p6 = (float)wrenGetSlotDouble(vm, 7);

        Any res = VEHICLE::ADD_VEHICLE_COMBAT_ANGLED_AVOIDANCE_AREA(p0, p1, p2, p3, p4, p5, p6);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_REMOVE_VEHICLE_COMBAT_AVOIDANCE_AREA(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        VEHICLE::REMOVE_VEHICLE_COMBAT_AVOIDANCE_AREA(p0);
    }

    static void WREN_VEHICLE_IS_ANY_PED_RAPPELLING_FROM_HELI(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::IS_ANY_PED_RAPPELLING_FROM_HELI(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_SET_VEHICLE_CHEAT_POWER_INCREASE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        float value = (float)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_VEHICLE_CHEAT_POWER_INCREASE(vehicle, value);
    }

    static void WREN_VEHICLE_SET_VEHICLE_INFLUENCES_WANTED_LEVEL(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_VEHICLE_INFLUENCES_WANTED_LEVEL(p0, p1);
    }

    static void WREN_VEHICLE_SET_VEHICLE_IS_WANTED(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL state = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_VEHICLE_IS_WANTED(vehicle, state);
    }

    static void WREN_VEHICLE_SWING_BOAT_BOOM_TO_RATIO(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        float ratio = (float)wrenGetSlotDouble(vm, 2);

        VEHICLE::SWING_BOAT_BOOM_TO_RATIO(vehicle, ratio);
    }

    static void WREN_VEHICLE_SWING_BOAT_BOOM_FREELY(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SWING_BOAT_BOOM_FREELY(vehicle, p1);
    }

    static void WREN_VEHICLE_ALLOW_BOAT_BOOM_TO_ANIMATE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::ALLOW_BOAT_BOOM_TO_ANIMATE(vehicle, p1);
    }

    static void WREN_VEHICLE_GET_BOAT_BOOM_POSITION_RATIO(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        float res = VEHICLE::GET_BOAT_BOOM_POSITION_RATIO(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_DISABLE_PLANE_AILERON(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        VEHICLE::DISABLE_PLANE_AILERON(vehicle, p1, p2);
    }

    static void WREN_VEHICLE_GET_IS_VEHICLE_ENGINE_RUNNING(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::GET_IS_VEHICLE_ENGINE_RUNNING(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_SET_VEHICLE_USE_ALTERNATE_HANDLING(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_VEHICLE_USE_ALTERNATE_HANDLING(vehicle, toggle);
    }

    static void WREN_VEHICLE_SET_BIKE_ON_STAND(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);

        VEHICLE::SET_BIKE_ON_STAND(vehicle, x, y);
    }

    static void WREN_VEHICLE_SET_VEHICLE_NOT_STEALABLE_AMBIENTLY(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_VEHICLE_NOT_STEALABLE_AMBIENTLY(vehicle, p1);
    }

    static void WREN_VEHICLE_LOCK_DOORS_WHEN_NO_LONGER_NEEDED(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        VEHICLE::LOCK_DOORS_WHEN_NO_LONGER_NEEDED(vehicle);
    }

    static void WREN_VEHICLE_SET_LAST_DRIVEN_VEHICLE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        VEHICLE::SET_LAST_DRIVEN_VEHICLE(vehicle);
    }

    static void WREN_VEHICLE_GET_LAST_DRIVEN_VEHICLE(WrenVM* vm)
    {

        Vehicle res = VEHICLE::GET_LAST_DRIVEN_VEHICLE();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_CLEAR_LAST_DRIVEN_VEHICLE(WrenVM* vm)
    {

        VEHICLE::CLEAR_LAST_DRIVEN_VEHICLE();
    }

    static void WREN_VEHICLE_SET_VEHICLE_HAS_BEEN_DRIVEN_FLAG(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_VEHICLE_HAS_BEEN_DRIVEN_FLAG(vehicle, toggle);
    }

    static void WREN_VEHICLE_SET_TASK_VEHICLE_GOTO_PLANE_MIN_HEIGHT_ABOVE_TERRAIN(WrenVM* vm)
    {
        Vehicle plane = (Vehicle)wrenGetSlotDouble(vm, 1);
        int height = (int)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_TASK_VEHICLE_GOTO_PLANE_MIN_HEIGHT_ABOVE_TERRAIN(plane, height);
    }

    static void WREN_VEHICLE_SET_VEHICLE_LOD_MULTIPLIER(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        float multiplier = (float)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_VEHICLE_LOD_MULTIPLIER(vehicle, multiplier);
    }

    static void WREN_VEHICLE_SET_VEHICLE_CAN_SAVE_IN_GARAGE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_VEHICLE_CAN_SAVE_IN_GARAGE(vehicle, toggle);
    }

    static void WREN_VEHICLE_GET_VEHICLE_NUM_OF_BROKEN_OFF_PARTS(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        int res = VEHICLE::GET_VEHICLE_NUM_OF_BROKEN_OFF_PARTS(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_GET_VEHICLE_NUM_OF_BROKEN_LOOSEN_PARTS(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        int res = VEHICLE::GET_VEHICLE_NUM_OF_BROKEN_LOOSEN_PARTS(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_SET_FORCE_VEHICLE_ENGINE_DAMAGE_BY_BULLET(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_FORCE_VEHICLE_ENGINE_DAMAGE_BY_BULLET(p0, p1);
    }

    static void WREN_VEHICLE_SET_VEHICLE_GENERATES_ENGINE_SHOCKING_EVENTS(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_VEHICLE_GENERATES_ENGINE_SHOCKING_EVENTS(vehicle, toggle);
    }

    static void WREN_VEHICLE_COPY_VEHICLE_DAMAGES(WrenVM* vm)
    {
        Vehicle sourceVehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        Vehicle targetVehicle = (Vehicle)wrenGetSlotDouble(vm, 2);

        VEHICLE::COPY_VEHICLE_DAMAGES(sourceVehicle, targetVehicle);
    }

    static void WREN_VEHICLE_DISABLE_VEHICLE_EXPLOSION_BREAK_OFF_PARTS(WrenVM* vm)
    {

        VEHICLE::DISABLE_VEHICLE_EXPLOSION_BREAK_OFF_PARTS();
    }

    static void WREN_VEHICLE_SET_LIGHTS_CUTOFF_DISTANCE_TWEAK(WrenVM* vm)
    {
        float distance = (float)wrenGetSlotDouble(vm, 1);

        VEHICLE::SET_LIGHTS_CUTOFF_DISTANCE_TWEAK(distance);
    }

    static void WREN_VEHICLE_SET_VEHICLE_SHOOT_AT_TARGET(WrenVM* vm)
    {
        Ped driver = (Ped)wrenGetSlotDouble(vm, 1);
        Entity entity = (Entity)wrenGetSlotDouble(vm, 2);
        float xTarget = (float)wrenGetSlotDouble(vm, 3);
        float yTarget = (float)wrenGetSlotDouble(vm, 4);
        float zTarget = (float)wrenGetSlotDouble(vm, 5);

        VEHICLE::SET_VEHICLE_SHOOT_AT_TARGET(driver, entity, xTarget, yTarget, zTarget);
    }

    static void WREN_VEHICLE_GET_VEHICLE_LOCK_ON_TARGET(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        Entity entity;

        BOOL res = VEHICLE::GET_VEHICLE_LOCK_ON_TARGET(vehicle, &entity);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, entity);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_VEHICLE_SET_FORCE_HD_VEHICLE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_FORCE_HD_VEHICLE(vehicle, toggle);
    }

    static void WREN_VEHICLE_SET_VEHICLE_CUSTOM_PATH_NODE_STREAMING_RADIUS(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_VEHICLE_CUSTOM_PATH_NODE_STREAMING_RADIUS(vehicle, p1);
    }

    static void WREN_VEHICLE_GET_VEHICLE_PLATE_TYPE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        int res = VEHICLE::GET_VEHICLE_PLATE_TYPE(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_TRACK_VEHICLE_VISIBILITY(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        VEHICLE::TRACK_VEHICLE_VISIBILITY(vehicle);
    }

    static void WREN_VEHICLE_IS_VEHICLE_VISIBLE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::IS_VEHICLE_VISIBLE(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_SET_VEHICLE_GRAVITY(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_VEHICLE_GRAVITY(vehicle, toggle);
    }

    static void WREN_VEHICLE_SET_ENABLE_VEHICLE_SLIPSTREAMING(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        VEHICLE::SET_ENABLE_VEHICLE_SLIPSTREAMING(toggle);
    }

    static void WREN_VEHICLE_SET_VEHICLE_SLIPSTREAMING_SHOULD_TIME_OUT(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        VEHICLE::SET_VEHICLE_SLIPSTREAMING_SHOULD_TIME_OUT(p0);
    }

    static void WREN_VEHICLE_GET_VEHICLE_CURRENT_TIME_IN_SLIP_STREAM(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        float res = VEHICLE::GET_VEHICLE_CURRENT_TIME_IN_SLIP_STREAM(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_IS_VEHICLE_PRODUCING_SLIP_STREAM(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::IS_VEHICLE_PRODUCING_SLIP_STREAM(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_SET_VEHICLE_INACTIVE_DURING_PLAYBACK(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_VEHICLE_INACTIVE_DURING_PLAYBACK(vehicle, toggle);
    }

    static void WREN_VEHICLE_SET_VEHICLE_ACTIVE_DURING_PLAYBACK(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_VEHICLE_ACTIVE_DURING_PLAYBACK(p0, p1);
    }

    static void WREN_VEHICLE_IS_VEHICLE_SPRAYABLE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::IS_VEHICLE_SPRAYABLE(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_SET_VEHICLE_ENGINE_CAN_DEGRADE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_VEHICLE_ENGINE_CAN_DEGRADE(vehicle, toggle);
    }

    static void WREN_VEHICLE_DISABLE_VEHCILE_DYNAMIC_AMBIENT_SCALES(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);
        int p2 = (int)wrenGetSlotDouble(vm, 3);

        VEHICLE::DISABLE_VEHCILE_DYNAMIC_AMBIENT_SCALES(vehicle, p1, p2);
    }

    static void WREN_VEHICLE_ENABLE_VEHICLE_DYNAMIC_AMBIENT_SCALES(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        VEHICLE::ENABLE_VEHICLE_DYNAMIC_AMBIENT_SCALES(vehicle);
    }

    static void WREN_VEHICLE_IS_PLANE_LANDING_GEAR_INTACT(WrenVM* vm)
    {
        Vehicle plane = (Vehicle)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::IS_PLANE_LANDING_GEAR_INTACT(plane);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_ARE_PLANE_PROPELLERS_INTACT(WrenVM* vm)
    {
        Vehicle plane = (Vehicle)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::ARE_PLANE_PROPELLERS_INTACT(plane);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_SET_PLANE_PROPELLER_HEALTH(WrenVM* vm)
    {
        Vehicle plane = (Vehicle)wrenGetSlotDouble(vm, 1);
        float health = (float)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_PLANE_PROPELLER_HEALTH(plane, health);
    }

    static void WREN_VEHICLE_SET_VEHICLE_CAN_DEFORM_WHEELS(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_VEHICLE_CAN_DEFORM_WHEELS(vehicle, toggle);
    }

    static void WREN_VEHICLE_IS_VEHICLE_STOLEN(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::IS_VEHICLE_STOLEN(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_SET_VEHICLE_IS_STOLEN(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL isStolen = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_VEHICLE_IS_STOLEN(vehicle, isStolen);
    }

    static void WREN_VEHICLE_SET_PLANE_TURBULENCE_MULTIPLIER(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        float multiplier = (float)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_PLANE_TURBULENCE_MULTIPLIER(vehicle, multiplier);
    }

    static void WREN_VEHICLE_ARE_WINGS_OF_PLANE_INTACT(WrenVM* vm)
    {
        Vehicle plane = (Vehicle)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::ARE_WINGS_OF_PLANE_INTACT(plane);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_ALLOW_AMBIENT_VEHICLES_TO_AVOID_ADVERSE_CONDITIONS(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        VEHICLE::ALLOW_AMBIENT_VEHICLES_TO_AVOID_ADVERSE_CONDITIONS(vehicle);
    }

    static void WREN_VEHICLE_DETACH_VEHICLE_FROM_CARGOBOB(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        Vehicle cargobob = (Vehicle)wrenGetSlotDouble(vm, 2);

        VEHICLE::DETACH_VEHICLE_FROM_CARGOBOB(vehicle, cargobob);
    }

    static void WREN_VEHICLE_DETACH_VEHICLE_FROM_ANY_CARGOBOB(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::DETACH_VEHICLE_FROM_ANY_CARGOBOB(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_DETACH_ENTITY_FROM_CARGOBOB(WrenVM* vm)
    {
        Vehicle cargobob = (Vehicle)wrenGetSlotDouble(vm, 1);
        Entity entity = (Entity)wrenGetSlotDouble(vm, 2);

        Any res = VEHICLE::DETACH_ENTITY_FROM_CARGOBOB(cargobob, entity);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_IS_VEHICLE_ATTACHED_TO_CARGOBOB(WrenVM* vm)
    {
        Vehicle cargobob = (Vehicle)wrenGetSlotDouble(vm, 1);
        Vehicle vehicleAttached = (Vehicle)wrenGetSlotDouble(vm, 2);

        BOOL res = VEHICLE::IS_VEHICLE_ATTACHED_TO_CARGOBOB(cargobob, vehicleAttached);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_GET_VEHICLE_ATTACHED_TO_CARGOBOB(WrenVM* vm)
    {
        Vehicle cargobob = (Vehicle)wrenGetSlotDouble(vm, 1);

        Vehicle res = VEHICLE::GET_VEHICLE_ATTACHED_TO_CARGOBOB(cargobob);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_GET_ENTITY_ATTACHED_TO_CARGOBOB(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        Any res = VEHICLE::GET_ENTITY_ATTACHED_TO_CARGOBOB(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_ATTACH_VEHICLE_TO_CARGOBOB(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        Vehicle cargobob = (Vehicle)wrenGetSlotDouble(vm, 2);
        int p2 = (int)wrenGetSlotDouble(vm, 3);
        float x = (float)wrenGetSlotDouble(vm, 4);
        float y = (float)wrenGetSlotDouble(vm, 5);
        float z = (float)wrenGetSlotDouble(vm, 6);

        VEHICLE::ATTACH_VEHICLE_TO_CARGOBOB(vehicle, cargobob, p2, x, y, z);
    }

    static void WREN_VEHICLE_ATTACH_ENTITY_TO_CARGOBOB(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);
        Any p5 = (Any)wrenGetSlotDouble(vm, 6);

        VEHICLE::ATTACH_ENTITY_TO_CARGOBOB(p0, p1, p2, p3, p4, p5);
    }

    static void WREN_VEHICLE_SET_CARGOBOB_FORCE_DONT_DETACH_VEHICLE(WrenVM* vm)
    {
        Vehicle cargobob = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_CARGOBOB_FORCE_DONT_DETACH_VEHICLE(cargobob, toggle);
    }

    static void WREN_VEHICLE_SET_CARGOBOB_EXCLUDE_FROM_PICKUP_ENTITY(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_CARGOBOB_EXCLUDE_FROM_PICKUP_ENTITY(p0, p1);
    }

    static void WREN_VEHICLE_CAN_CARGOBOB_PICK_UP_ENTITY(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        Any res = VEHICLE::CAN_CARGOBOB_PICK_UP_ENTITY(p0, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_GET_ATTACHED_PICK_UP_HOOK_POSITION(WrenVM* vm)
    {
        Vehicle cargobob = (Vehicle)wrenGetSlotDouble(vm, 1);

        Vector3 res = VEHICLE::GET_ATTACHED_PICK_UP_HOOK_POSITION(cargobob);

        wrenEnsureSlots(vm, 1);

        wrenGetVariable(vm, "natives", "Vector3", 0);
        Vector3* wren_res = (Vector3*)wrenSetSlotNewForeign(vm, 0, 0, sizeof(Vector3));
        wren_res->x = res.x;
        wren_res->y = res.y;
        wren_res->z = res.z;
    }

    static void WREN_VEHICLE_DOES_CARGOBOB_HAVE_PICK_UP_ROPE(WrenVM* vm)
    {
        Vehicle cargobob = (Vehicle)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::DOES_CARGOBOB_HAVE_PICK_UP_ROPE(cargobob);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_CREATE_PICK_UP_ROPE_FOR_CARGOBOB(WrenVM* vm)
    {
        Vehicle cargobob = (Vehicle)wrenGetSlotDouble(vm, 1);
        int state = (int)wrenGetSlotDouble(vm, 2);

        VEHICLE::CREATE_PICK_UP_ROPE_FOR_CARGOBOB(cargobob, state);
    }

    static void WREN_VEHICLE_REMOVE_PICK_UP_ROPE_FOR_CARGOBOB(WrenVM* vm)
    {
        Vehicle cargobob = (Vehicle)wrenGetSlotDouble(vm, 1);

        VEHICLE::REMOVE_PICK_UP_ROPE_FOR_CARGOBOB(cargobob);
    }

    static void WREN_VEHICLE_SET_PICKUP_ROPE_LENGTH_FOR_CARGOBOB(WrenVM* vm)
    {
        Vehicle cargobob = (Vehicle)wrenGetSlotDouble(vm, 1);
        float length1 = (float)wrenGetSlotDouble(vm, 2);
        float length2 = (float)wrenGetSlotDouble(vm, 3);
        BOOL p3 = (BOOL)wrenGetSlotBool(vm, 4);

        VEHICLE::SET_PICKUP_ROPE_LENGTH_FOR_CARGOBOB(cargobob, length1, length2, p3);
    }

    static void WREN_VEHICLE_SET_PICKUP_ROPE_LENGTH_WITHOUT_CREATING_ROPE_FOR_CARGOBOB(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);

        VEHICLE::SET_PICKUP_ROPE_LENGTH_WITHOUT_CREATING_ROPE_FOR_CARGOBOB(p0, p1, p2);
    }

    static void WREN_VEHICLE_SET_CARGOBOB_PICKUP_ROPE_DAMPING_MULTIPLIER(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_CARGOBOB_PICKUP_ROPE_DAMPING_MULTIPLIER(p0, p1);
    }

    static void WREN_VEHICLE_SET_CARGOBOB_PICKUP_ROPE_TYPE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_CARGOBOB_PICKUP_ROPE_TYPE(p0, p1);
    }

    static void WREN_VEHICLE_DOES_CARGOBOB_HAVE_PICKUP_MAGNET(WrenVM* vm)
    {
        Vehicle cargobob = (Vehicle)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::DOES_CARGOBOB_HAVE_PICKUP_MAGNET(cargobob);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_SET_CARGOBOB_PICKUP_MAGNET_ACTIVE(WrenVM* vm)
    {
        Vehicle cargobob = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL isActive = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_CARGOBOB_PICKUP_MAGNET_ACTIVE(cargobob, isActive);
    }

    static void WREN_VEHICLE_SET_CARGOBOB_PICKUP_MAGNET_STRENGTH(WrenVM* vm)
    {
        Vehicle cargobob = (Vehicle)wrenGetSlotDouble(vm, 1);
        float strength = (float)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_CARGOBOB_PICKUP_MAGNET_STRENGTH(cargobob, strength);
    }

    static void WREN_VEHICLE_SET_CARGOBOB_PICKUP_MAGNET_FALLOFF(WrenVM* vm)
    {
        Vehicle cargobob = (Vehicle)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_CARGOBOB_PICKUP_MAGNET_FALLOFF(cargobob, p1);
    }

    static void WREN_VEHICLE_SET_CARGOBOB_PICKUP_MAGNET_REDUCED_STRENGTH(WrenVM* vm)
    {
        Vehicle cargobob = (Vehicle)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_CARGOBOB_PICKUP_MAGNET_REDUCED_STRENGTH(cargobob, p1);
    }

    static void WREN_VEHICLE_SET_CARGOBOB_PICKUP_MAGNET_REDUCED_FALLOFF(WrenVM* vm)
    {
        Vehicle cargobob = (Vehicle)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_CARGOBOB_PICKUP_MAGNET_REDUCED_FALLOFF(cargobob, p1);
    }

    static void WREN_VEHICLE_SET_CARGOBOB_PICKUP_MAGNET_PULL_STRENGTH(WrenVM* vm)
    {
        Vehicle cargobob = (Vehicle)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_CARGOBOB_PICKUP_MAGNET_PULL_STRENGTH(cargobob, p1);
    }

    static void WREN_VEHICLE_SET_CARGOBOB_PICKUP_MAGNET_PULL_ROPE_LENGTH(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_CARGOBOB_PICKUP_MAGNET_PULL_ROPE_LENGTH(vehicle, p1);
    }

    static void WREN_VEHICLE_SET_CARGOBOB_PICKUP_MAGNET_SET_TARGETED_MODE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        Vehicle cargobob = (Vehicle)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_CARGOBOB_PICKUP_MAGNET_SET_TARGETED_MODE(vehicle, cargobob);
    }

    static void WREN_VEHICLE_SET_CARGOBOB_PICKUP_MAGNET_SET_AMBIENT_MODE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        VEHICLE::SET_CARGOBOB_PICKUP_MAGNET_SET_AMBIENT_MODE(vehicle, p1, p2);
    }

    static void WREN_VEHICLE_SET_CARGOBOB_PICKUP_MAGNET_ENSURE_PICKUP_ENTITY_UPRIGHT(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_CARGOBOB_PICKUP_MAGNET_ENSURE_PICKUP_ENTITY_UPRIGHT(vehicle, p1);
    }

    static void WREN_VEHICLE_DOES_VEHICLE_HAVE_WEAPONS(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::DOES_VEHICLE_HAVE_WEAPONS(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_SET_VEHICLE_WILL_TELL_OTHERS_TO_HURRY(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_VEHICLE_WILL_TELL_OTHERS_TO_HURRY(vehicle, p1);
    }

    static void WREN_VEHICLE_DISABLE_VEHICLE_WEAPON(WrenVM* vm)
    {
        BOOL disabled = (BOOL)wrenGetSlotBool(vm, 1);
        Hash weaponHash = (Hash)wrenGetSlotDouble(vm, 2);
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 3);
        Ped owner = (Ped)wrenGetSlotDouble(vm, 4);

        VEHICLE::DISABLE_VEHICLE_WEAPON(disabled, weaponHash, vehicle, owner);
    }

    static void WREN_VEHICLE_IS_VEHICLE_WEAPON_DISABLED(WrenVM* vm)
    {
        Hash weaponHash = (Hash)wrenGetSlotDouble(vm, 1);
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 2);
        Ped owner = (Ped)wrenGetSlotDouble(vm, 3);

        BOOL res = VEHICLE::IS_VEHICLE_WEAPON_DISABLED(weaponHash, vehicle, owner);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_SET_VEHICLE_USED_FOR_PILOT_SCHOOL(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_VEHICLE_USED_FOR_PILOT_SCHOOL(p0, p1);
    }

    static void WREN_VEHICLE_SET_VEHICLE_ACTIVE_FOR_PED_NAVIGATION(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_VEHICLE_ACTIVE_FOR_PED_NAVIGATION(vehicle, toggle);
    }

    static void WREN_VEHICLE_GET_VEHICLE_CLASS(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        int res = VEHICLE::GET_VEHICLE_CLASS(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_GET_VEHICLE_CLASS_FROM_NAME(WrenVM* vm)
    {
        Hash modelHash = (Hash)wrenGetSlotDouble(vm, 1);

        int res = VEHICLE::GET_VEHICLE_CLASS_FROM_NAME(modelHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_SET_PLAYERS_LAST_VEHICLE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        VEHICLE::SET_PLAYERS_LAST_VEHICLE(vehicle);
    }

    static void WREN_VEHICLE_SET_VEHICLE_CAN_BE_USED_BY_FLEEING_PEDS(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_VEHICLE_CAN_BE_USED_BY_FLEEING_PEDS(vehicle, toggle);
    }

    static void WREN_VEHICLE_SET_AIRCRAFT_PILOT_SKILL_NOISE_SCALAR(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_AIRCRAFT_PILOT_SKILL_NOISE_SCALAR(vehicle, p1);
    }

    static void WREN_VEHICLE_SET_VEHICLE_DROPS_MONEY_WHEN_BLOWN_UP(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_VEHICLE_DROPS_MONEY_WHEN_BLOWN_UP(vehicle, toggle);
    }

    static void WREN_VEHICLE_SET_VEHICLE_KEEP_ENGINE_ON_WHEN_ABANDONED(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_VEHICLE_KEEP_ENGINE_ON_WHEN_ABANDONED(vehicle, toggle);
    }

    static void WREN_VEHICLE_SET_VEHICLE_IMPATIENCE_TIMER(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_VEHICLE_IMPATIENCE_TIMER(vehicle, p1);
    }

    static void WREN_VEHICLE_SET_VEHICLE_HANDLING_OVERRIDE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        Hash hash = (Hash)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_VEHICLE_HANDLING_OVERRIDE(vehicle, hash);
    }

    static void WREN_VEHICLE_SET_VEHICLE_EXTENDED_REMOVAL_RANGE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int range = (int)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_VEHICLE_EXTENDED_REMOVAL_RANGE(vehicle, range);
    }

    static void WREN_VEHICLE_SET_VEHICLE_STEERING_BIAS_SCALAR(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_VEHICLE_STEERING_BIAS_SCALAR(p0, p1);
    }

    static void WREN_VEHICLE_SET_HELI_CONTROL_LAGGING_RATE_SCALAR(WrenVM* vm)
    {
        Vehicle helicopter = (Vehicle)wrenGetSlotDouble(vm, 1);
        float multiplier = (float)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_HELI_CONTROL_LAGGING_RATE_SCALAR(helicopter, multiplier);
    }

    static void WREN_VEHICLE_SET_VEHICLE_FRICTION_OVERRIDE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        float friction = (float)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_VEHICLE_FRICTION_OVERRIDE(vehicle, friction);
    }

    static void WREN_VEHICLE_SET_VEHICLE_WHEELS_CAN_BREAK_OFF_WHEN_BLOW_UP(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_VEHICLE_WHEELS_CAN_BREAK_OFF_WHEN_BLOW_UP(vehicle, toggle);
    }

    static void WREN_VEHICLE_ARE_PLANE_CONTROL_PANELS_INTACT(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        BOOL res = VEHICLE::ARE_PLANE_CONTROL_PANELS_INTACT(vehicle, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_SET_VEHICLE_CEILING_HEIGHT(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        float height = (float)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_VEHICLE_CEILING_HEIGHT(vehicle, height);
    }

    static void WREN_VEHICLE_SET_VEHICLE_NO_EXPLOSION_DAMAGE_FROM_DRIVER(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_VEHICLE_NO_EXPLOSION_DAMAGE_FROM_DRIVER(vehicle, toggle);
    }

    static void WREN_VEHICLE_CLEAR_VEHICLE_ROUTE_HISTORY(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        VEHICLE::CLEAR_VEHICLE_ROUTE_HISTORY(vehicle);
    }

    static void WREN_VEHICLE_DOES_VEHICLE_EXIST_WITH_DECORATOR(WrenVM* vm)
    {
        const char* decorator = wrenGetSlotString(vm, 1);

        BOOL res = VEHICLE::DOES_VEHICLE_EXIST_WITH_DECORATOR(decorator);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_SET_VEHICLE_AI_CAN_USE_EXCLUSIVE_SEATS(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_VEHICLE_AI_CAN_USE_EXCLUSIVE_SEATS(vehicle, toggle);
    }

    static void WREN_VEHICLE_SET_VEHICLE_EXCLUSIVE_DRIVER(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        Ped ped = (Ped)wrenGetSlotDouble(vm, 2);
        int index = (int)wrenGetSlotDouble(vm, 3);

        VEHICLE::SET_VEHICLE_EXCLUSIVE_DRIVER(vehicle, ped, index);
    }

    static void WREN_VEHICLE_IS_PED_EXCLUSIVE_DRIVER_OF_VEHICLE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 2);
        int outIndex;

        BOOL res = VEHICLE::IS_PED_EXCLUSIVE_DRIVER_OF_VEHICLE(ped, vehicle, &outIndex);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, outIndex);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_VEHICLE_DISABLE_INDIVIDUAL_PLANE_PROPELLER(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int propeller = (int)wrenGetSlotDouble(vm, 2);

        VEHICLE::DISABLE_INDIVIDUAL_PLANE_PROPELLER(vehicle, propeller);
    }

    static void WREN_VEHICLE_SET_VEHICLE_FORCE_AFTERBURNER(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_VEHICLE_FORCE_AFTERBURNER(vehicle, toggle);
    }

    static void WREN_VEHICLE_SET_DONT_PROCESS_VEHICLE_GLASS(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_DONT_PROCESS_VEHICLE_GLASS(vehicle, toggle);
    }

    static void WREN_VEHICLE_SET_DISABLE_WANTED_CONES_RESPONSE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL togle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_DISABLE_WANTED_CONES_RESPONSE(vehicle, togle);
    }

    static void WREN_VEHICLE_SET_USE_DESIRED_Z_CRUISE_SPEED_FOR_LANDING(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_USE_DESIRED_Z_CRUISE_SPEED_FOR_LANDING(vehicle, toggle);
    }

    static void WREN_VEHICLE_SET_ARRIVE_DISTANCE_OVERRIDE_FOR_VEHICLE_PERSUIT_ATTACK(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_ARRIVE_DISTANCE_OVERRIDE_FOR_VEHICLE_PERSUIT_ATTACK(vehicle, p1);
    }

    static void WREN_VEHICLE_SET_VEHICLE_READY_FOR_CLEANUP(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        VEHICLE::SET_VEHICLE_READY_FOR_CLEANUP(p0);
    }

    static void WREN_VEHICLE_SET_DISTANT_CARS_ENABLED(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        VEHICLE::SET_DISTANT_CARS_ENABLED(toggle);
    }

    static void WREN_VEHICLE_SET_VEHICLE_NEON_COLOUR(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int r = (int)wrenGetSlotDouble(vm, 2);
        int g = (int)wrenGetSlotDouble(vm, 3);
        int b = (int)wrenGetSlotDouble(vm, 4);

        VEHICLE::SET_VEHICLE_NEON_COLOUR(vehicle, r, g, b);
    }

    static void WREN_VEHICLE_SET_VEHICLE_NEON_INDEX_COLOUR(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int index = (int)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_VEHICLE_NEON_INDEX_COLOUR(vehicle, index);
    }

    static void WREN_VEHICLE_GET_VEHICLE_NEON_COLOUR(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int r;
        int g;
        int b;

        VEHICLE::GET_VEHICLE_NEON_COLOUR(vehicle, &r, &g, &b);

        wrenEnsureSlots(vm, 6);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, r);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, g);
        wrenInsertInList(vm, 0, 1, 2);

        wrenSetSlotDouble(vm, 3, b);
        wrenInsertInList(vm, 0, 2, 3);

    }

    static void WREN_VEHICLE_SET_VEHICLE_NEON_ENABLED(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int index = (int)wrenGetSlotDouble(vm, 2);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 3);

        VEHICLE::SET_VEHICLE_NEON_ENABLED(vehicle, index, toggle);
    }

    static void WREN_VEHICLE_GET_VEHICLE_NEON_ENABLED(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int index = (int)wrenGetSlotDouble(vm, 2);

        BOOL res = VEHICLE::GET_VEHICLE_NEON_ENABLED(vehicle, index);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_SET_AMBIENT_VEHICLE_NEON_ENABLED(WrenVM* vm)
    {
        BOOL p0 = (BOOL)wrenGetSlotBool(vm, 1);

        VEHICLE::SET_AMBIENT_VEHICLE_NEON_ENABLED(p0);
    }

    static void WREN_VEHICLE_SUPPRESS_NEONS_ON_VEHICLE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SUPPRESS_NEONS_ON_VEHICLE(vehicle, toggle);
    }

    static void WREN_VEHICLE_SET_DISABLE_SUPERDUMMY(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_DISABLE_SUPERDUMMY(vehicle, p1);
    }

    static void WREN_VEHICLE_REQUEST_VEHICLE_DIAL(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        VEHICLE::REQUEST_VEHICLE_DIAL(vehicle);
    }

    static void WREN_VEHICLE_GET_VEHICLE_BODY_HEALTH(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        float res = VEHICLE::GET_VEHICLE_BODY_HEALTH(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_SET_VEHICLE_BODY_HEALTH(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        float value = (float)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_VEHICLE_BODY_HEALTH(vehicle, value);
    }

    static void WREN_VEHICLE_GET_VEHICLE_SIZE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        Vector3 out1;
        Vector3 out2;

        VEHICLE::GET_VEHICLE_SIZE(vehicle, &out1, &out2);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenGetVariable(vm, "natives", "Vector3", 1);
        Vector3* wren_out1 = (Vector3*)wrenSetSlotNewForeign(vm, 2, 1, sizeof(Vector3));
        wren_out1->x = out1.x;
        wren_out1->y = out1.y;
        wren_out1->z = out1.z;
        wrenInsertInList(vm, 0, 0, 2);

        Vector3* wren_out2 = (Vector3*)wrenSetSlotNewForeign(vm, 3, 1, sizeof(Vector3));
        wren_out2->x = out2.x;
        wren_out2->y = out2.y;
        wren_out2->z = out2.z;
        wrenInsertInList(vm, 0, 1, 3);

    }

    static void WREN_VEHICLE_GET_FAKE_SUSPENSION_LOWERING_AMOUNT(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        float res = VEHICLE::GET_FAKE_SUSPENSION_LOWERING_AMOUNT(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_SET_CAR_HIGH_SPEED_BUMP_SEVERITY_MULTIPLIER(WrenVM* vm)
    {
        float multiplier = (float)wrenGetSlotDouble(vm, 1);

        VEHICLE::SET_CAR_HIGH_SPEED_BUMP_SEVERITY_MULTIPLIER(multiplier);
    }

    static void WREN_VEHICLE_GET_NUMBER_OF_VEHICLE_DOORS(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        int res = VEHICLE::GET_NUMBER_OF_VEHICLE_DOORS(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_SET_HYDRAULICS_CONTROL(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_HYDRAULICS_CONTROL(p0, p1);
    }

    static void WREN_VEHICLE_SET_CAN_ADJUST_GROUND_CLEARANCE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_CAN_ADJUST_GROUND_CLEARANCE(vehicle, p1);
    }

    static void WREN_VEHICLE_GET_VEHICLE_HEALTH_PERCENTAGE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        float maxEngineHealth = (float)wrenGetSlotDouble(vm, 2);
        float maxPetrolTankHealth = (float)wrenGetSlotDouble(vm, 3);
        float maxBodyHealth = (float)wrenGetSlotDouble(vm, 4);
        float maxMainRotorHealth = (float)wrenGetSlotDouble(vm, 5);
        float maxTailRotorHealth = (float)wrenGetSlotDouble(vm, 6);
        float maxUnkHealth = (float)wrenGetSlotDouble(vm, 7);

        float res = VEHICLE::GET_VEHICLE_HEALTH_PERCENTAGE(vehicle, maxEngineHealth, maxPetrolTankHealth, maxBodyHealth, maxMainRotorHealth, maxTailRotorHealth, maxUnkHealth);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_GET_VEHICLE_IS_MERCENARY(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::GET_VEHICLE_IS_MERCENARY(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_SET_VEHICLE_BROKEN_PARTS_DONT_AFFECT_AI_HANDLING(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_VEHICLE_BROKEN_PARTS_DONT_AFFECT_AI_HANDLING(vehicle, p1);
    }

    static void WREN_VEHICLE_SET_VEHICLE_KERS_ALLOWED(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_VEHICLE_KERS_ALLOWED(vehicle, toggle);
    }

    static void WREN_VEHICLE_GET_VEHICLE_HAS_KERS(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::GET_VEHICLE_HAS_KERS(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_SET_PLANE_RESIST_TO_EXPLOSION(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_PLANE_RESIST_TO_EXPLOSION(vehicle, toggle);
    }

    static void WREN_VEHICLE_SET_HELI_RESIST_TO_EXPLOSION(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_HELI_RESIST_TO_EXPLOSION(vehicle, p1);
    }

    static void WREN_VEHICLE_SET_DISABLE_BMX_EXTRA_TRICK_FORCES(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        VEHICLE::SET_DISABLE_BMX_EXTRA_TRICK_FORCES(p0);
    }

    static void WREN_VEHICLE_SET_HYDRAULIC_SUSPENSION_RAISE_FACTOR(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int wheelId = (int)wrenGetSlotDouble(vm, 2);
        float value = (float)wrenGetSlotDouble(vm, 3);

        VEHICLE::SET_HYDRAULIC_SUSPENSION_RAISE_FACTOR(vehicle, wheelId, value);
    }

    static void WREN_VEHICLE_GET_HYDRAULIC_SUSPENSION_RAISE_FACTOR(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int wheelId = (int)wrenGetSlotDouble(vm, 2);

        float res = VEHICLE::GET_HYDRAULIC_SUSPENSION_RAISE_FACTOR(vehicle, wheelId);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_SET_CAN_USE_HYDRAULICS(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_CAN_USE_HYDRAULICS(p0, p1);
    }

    static void WREN_VEHICLE_SET_HYDRAULIC_VEHICLE_STATE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_HYDRAULIC_VEHICLE_STATE(p0, p1);
    }

    static void WREN_VEHICLE_SET_HYDRAULIC_WHEEL_STATE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int wheelId = (int)wrenGetSlotDouble(vm, 2);
        int state = (int)wrenGetSlotDouble(vm, 3);
        float value = (float)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);

        VEHICLE::SET_HYDRAULIC_WHEEL_STATE(vehicle, wheelId, state, value, p4);
    }

    static void WREN_VEHICLE_HAS_VEHICLE_PETROLTANK_SET_ON_FIRE_BY_ENTITY(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        Any res = VEHICLE::HAS_VEHICLE_PETROLTANK_SET_ON_FIRE_BY_ENTITY(p0, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_CLEAR_VEHICLE_PETROLTANK_FIRE_CULPRIT(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        VEHICLE::CLEAR_VEHICLE_PETROLTANK_FIRE_CULPRIT(vehicle);
    }

    static void WREN_VEHICLE_SET_VEHICLE_BOBBLEHEAD_VELOCITY(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);

        VEHICLE::SET_VEHICLE_BOBBLEHEAD_VELOCITY(p0, p1, p2);
    }

    static void WREN_VEHICLE_GET_VEHICLE_IS_DUMMY(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        Any res = VEHICLE::GET_VEHICLE_IS_DUMMY(p0);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_SET_VEHICLE_DAMAGE_SCALE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);

        Any res = VEHICLE::SET_VEHICLE_DAMAGE_SCALE(vehicle, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_SET_VEHICLE_WEAPON_DAMAGE_SCALE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        float multiplier = (float)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_VEHICLE_WEAPON_DAMAGE_SCALE(vehicle, multiplier);
    }

    static void WREN_VEHICLE_SET_DISABLE_DAMAGE_WITH_PICKED_UP_ENTITY(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        Any res = VEHICLE::SET_DISABLE_DAMAGE_WITH_PICKED_UP_ENTITY(p0, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_SET_VEHICLE_USES_MP_PLAYER_DAMAGE_MULTIPLIER(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_VEHICLE_USES_MP_PLAYER_DAMAGE_MULTIPLIER(p0, p1);
    }

    static void WREN_VEHICLE_SET_BIKE_EASY_TO_LAND(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_BIKE_EASY_TO_LAND(p0, p1);
    }

    static void WREN_VEHICLE_SET_INVERT_VEHICLE_CONTROLS(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL state = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_INVERT_VEHICLE_CONTROLS(vehicle, state);
    }

    static void WREN_VEHICLE_SET_SPEED_BOOST_EFFECT_DISABLED(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        VEHICLE::SET_SPEED_BOOST_EFFECT_DISABLED(p0);
    }

    static void WREN_VEHICLE_SET_SLOW_DOWN_EFFECT_DISABLED(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        VEHICLE::SET_SLOW_DOWN_EFFECT_DISABLED(p0);
    }

    static void WREN_VEHICLE_SET_FORMATION_LEADER(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);
        float p4 = (float)wrenGetSlotDouble(vm, 5);

        VEHICLE::SET_FORMATION_LEADER(vehicle, x, y, z, p4);
    }

    static void WREN_VEHICLE_RESET_FORMATION_LEADER(WrenVM* vm)
    {

        VEHICLE::RESET_FORMATION_LEADER();
    }

    static void WREN_VEHICLE_GET_IS_BOAT_CAPSIZED(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::GET_IS_BOAT_CAPSIZED(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_SET_ALLOW_RAMMING_SOOP_OR_RAMP(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_ALLOW_RAMMING_SOOP_OR_RAMP(p0, p1);
    }

    static void WREN_VEHICLE_SET_SCRIPT_RAMP_IMPULSE_SCALE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_SCRIPT_RAMP_IMPULSE_SCALE(p0, p1);
    }

    static void WREN_VEHICLE_GET_IS_DOOR_VALID(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int doorId = (int)wrenGetSlotDouble(vm, 2);

        BOOL res = VEHICLE::GET_IS_DOOR_VALID(vehicle, doorId);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_SET_SCRIPT_ROCKET_BOOST_RECHARGE_TIME(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        float seconds = (float)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_SCRIPT_ROCKET_BOOST_RECHARGE_TIME(vehicle, seconds);
    }

    static void WREN_VEHICLE_GET_HAS_ROCKET_BOOST(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::GET_HAS_ROCKET_BOOST(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_IS_ROCKET_BOOST_ACTIVE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::IS_ROCKET_BOOST_ACTIVE(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_SET_ROCKET_BOOST_ACTIVE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL active = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_ROCKET_BOOST_ACTIVE(vehicle, active);
    }

    static void WREN_VEHICLE_GET_HAS_RETRACTABLE_WHEELS(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::GET_HAS_RETRACTABLE_WHEELS(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_GET_IS_WHEELS_RETRACTED(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::GET_IS_WHEELS_RETRACTED(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_SET_WHEELS_EXTENDED_INSTANTLY(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        VEHICLE::SET_WHEELS_EXTENDED_INSTANTLY(vehicle);
    }

    static void WREN_VEHICLE_SET_WHEELS_RETRACTED_INSTANTLY(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        VEHICLE::SET_WHEELS_RETRACTED_INSTANTLY(vehicle);
    }

    static void WREN_VEHICLE_GET_CAR_HAS_JUMP(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::GET_CAR_HAS_JUMP(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_SET_USE_HIGHER_CAR_JUMP(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_USE_HIGHER_CAR_JUMP(vehicle, toggle);
    }

    static void WREN_VEHICLE_SET_CLEAR_FREEZE_WAITING_ON_COLLISION_ONCE_PLAYER_ENTERS(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_CLEAR_FREEZE_WAITING_ON_COLLISION_ONCE_PLAYER_ENTERS(vehicle, toggle);
    }

    static void WREN_VEHICLE_SET_VEHICLE_WEAPON_RESTRICTED_AMMO(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int weaponIndex = (int)wrenGetSlotDouble(vm, 2);
        int capacity = (int)wrenGetSlotDouble(vm, 3);

        VEHICLE::SET_VEHICLE_WEAPON_RESTRICTED_AMMO(vehicle, weaponIndex, capacity);
    }

    static void WREN_VEHICLE_GET_VEHICLE_WEAPON_RESTRICTED_AMMO(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int weaponIndex = (int)wrenGetSlotDouble(vm, 2);

        int res = VEHICLE::GET_VEHICLE_WEAPON_RESTRICTED_AMMO(vehicle, weaponIndex);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_GET_VEHICLE_HAS_PARACHUTE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::GET_VEHICLE_HAS_PARACHUTE(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_GET_VEHICLE_CAN_DEPLOY_PARACHUTE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::GET_VEHICLE_CAN_DEPLOY_PARACHUTE(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_VEHICLE_START_PARACHUTING(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL active = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::VEHICLE_START_PARACHUTING(vehicle, active);
    }

    static void WREN_VEHICLE_IS_VEHICLE_PARACHUTE_DEPLOYED(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::IS_VEHICLE_PARACHUTE_DEPLOYED(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_VEHICLE_SET_RAMP_AND_RAMMING_CARS_TAKE_DAMAGE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::VEHICLE_SET_RAMP_AND_RAMMING_CARS_TAKE_DAMAGE(vehicle, toggle);
    }

    static void WREN_VEHICLE_VEHICLE_SET_ENABLE_RAMP_CAR_SIDE_IMPULSE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        VEHICLE::VEHICLE_SET_ENABLE_RAMP_CAR_SIDE_IMPULSE(p0, p1);
    }

    static void WREN_VEHICLE_VEHICLE_SET_ENABLE_NORMALISE_RAMP_CAR_VERTICAL_VELOCTIY(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        VEHICLE::VEHICLE_SET_ENABLE_NORMALISE_RAMP_CAR_VERTICAL_VELOCTIY(p0, p1);
    }

    static void WREN_VEHICLE_VEHICLE_SET_JET_WASH_FORCE_ENABLED(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        VEHICLE::VEHICLE_SET_JET_WASH_FORCE_ENABLED(p0);
    }

    static void WREN_VEHICLE_SET_VEHICLE_WEAPON_CAN_TARGET_OBJECTS(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_VEHICLE_WEAPON_CAN_TARGET_OBJECTS(p0, p1);
    }

    static void WREN_VEHICLE_SET_VEHICLE_USE_BOOST_BUTTON_FOR_WHEEL_RETRACT(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        VEHICLE::SET_VEHICLE_USE_BOOST_BUTTON_FOR_WHEEL_RETRACT(p0);
    }

    static void WREN_VEHICLE_VEHICLE_SET_PARACHUTE_MODEL_OVERRIDE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        Hash modelHash = (Hash)wrenGetSlotDouble(vm, 2);

        VEHICLE::VEHICLE_SET_PARACHUTE_MODEL_OVERRIDE(vehicle, modelHash);
    }

    static void WREN_VEHICLE_VEHICLE_SET_PARACHUTE_MODEL_TINT_INDEX(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int textureVariation = (int)wrenGetSlotDouble(vm, 2);

        VEHICLE::VEHICLE_SET_PARACHUTE_MODEL_TINT_INDEX(vehicle, textureVariation);
    }

    static void WREN_VEHICLE_VEHICLE_SET_OVERRIDE_EXTENABLE_SIDE_RATIO(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        Any res = VEHICLE::VEHICLE_SET_OVERRIDE_EXTENABLE_SIDE_RATIO(p0, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_VEHICLE_SET_EXTENABLE_SIDE_TARGET_RATIO(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        Any res = VEHICLE::VEHICLE_SET_EXTENABLE_SIDE_TARGET_RATIO(p0, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_VEHICLE_SET_OVERRIDE_SIDE_RATIO(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        Any res = VEHICLE::VEHICLE_SET_OVERRIDE_SIDE_RATIO(p0, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_GET_ALL_VEHICLES(WrenVM* vm)
    {
        Any vehsStruct;

        int res = VEHICLE::GET_ALL_VEHICLES(&vehsStruct);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, vehsStruct);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_VEHICLE_SET_CARGOBOB_EXTA_PICKUP_RANGE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_CARGOBOB_EXTA_PICKUP_RANGE(p0, p1);
    }

    static void WREN_VEHICLE_SET_OVERRIDE_VEHICLE_DOOR_TORQUE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);

        VEHICLE::SET_OVERRIDE_VEHICLE_DOOR_TORQUE(p0, p1, p2);
    }

    static void WREN_VEHICLE_SET_WHEELIE_ENABLED(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_WHEELIE_ENABLED(p0, p1);
    }

    static void WREN_VEHICLE_SET_DISABLE_HELI_EXPLODE_FROM_BODY_DAMAGE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_DISABLE_HELI_EXPLODE_FROM_BODY_DAMAGE(p0, p1);
    }

    static void WREN_VEHICLE_SET_DISABLE_EXPLODE_FROM_BODY_DAMAGE_ON_COLLISION(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        float value = (float)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_DISABLE_EXPLODE_FROM_BODY_DAMAGE_ON_COLLISION(vehicle, value);
    }

    static void WREN_VEHICLE_SET_TRAILER_ATTACHMENT_ENABLED(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_TRAILER_ATTACHMENT_ENABLED(p0, p1);
    }

    static void WREN_VEHICLE_SET_ROCKET_BOOST_FILL(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        float percentage = (float)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_ROCKET_BOOST_FILL(vehicle, percentage);
    }

    static void WREN_VEHICLE_SET_GLIDER_ACTIVE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL state = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_GLIDER_ACTIVE(vehicle, state);
    }

    static void WREN_VEHICLE_SET_SHOULD_RESET_TURRET_IN_SCRIPTED_CAMERAS(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_SHOULD_RESET_TURRET_IN_SCRIPTED_CAMERAS(p0, p1);
    }

    static void WREN_VEHICLE_SET_VEHICLE_DISABLE_COLLISION_UPON_CREATION(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_VEHICLE_DISABLE_COLLISION_UPON_CREATION(p0, p1);
    }

    static void WREN_VEHICLE_SET_GROUND_EFFECT_REDUCES_DRAG(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);

        VEHICLE::SET_GROUND_EFFECT_REDUCES_DRAG(p0);
    }

    static void WREN_VEHICLE_SET_DISABLE_MAP_COLLISION(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        VEHICLE::SET_DISABLE_MAP_COLLISION(vehicle);
    }

    static void WREN_VEHICLE_SET_DISABLE_PED_STAND_ON_TOP(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_DISABLE_PED_STAND_ON_TOP(vehicle, toggle);
    }

    static void WREN_VEHICLE_SET_VEHICLE_DAMAGE_SCALES(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);
        Any p4 = (Any)wrenGetSlotDouble(vm, 5);

        VEHICLE::SET_VEHICLE_DAMAGE_SCALES(vehicle, p1, p2, p3, p4);
    }

    static void WREN_VEHICLE_SET_PLANE_SECTION_DAMAGE_SCALE(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);
        Any p2 = (Any)wrenGetSlotDouble(vm, 3);

        VEHICLE::SET_PLANE_SECTION_DAMAGE_SCALE(p0, p1, p2);
    }

    static void WREN_VEHICLE_SET_HELI_CAN_PICKUP_ENTITY_THAT_HAS_PICK_UP_DISABLED(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_HELI_CAN_PICKUP_ENTITY_THAT_HAS_PICK_UP_DISABLED(vehicle, toggle);
    }

    static void WREN_VEHICLE_SET_VEHICLE_BOMB_AMMO(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int bombCount = (int)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_VEHICLE_BOMB_AMMO(vehicle, bombCount);
    }

    static void WREN_VEHICLE_GET_VEHICLE_BOMB_AMMO(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        int res = VEHICLE::GET_VEHICLE_BOMB_AMMO(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_SET_VEHICLE_COUNTERMEASURE_AMMO(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int counterMeasureCount = (int)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_VEHICLE_COUNTERMEASURE_AMMO(vehicle, counterMeasureCount);
    }

    static void WREN_VEHICLE_GET_VEHICLE_COUNTERMEASURE_AMMO(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        int res = VEHICLE::GET_VEHICLE_COUNTERMEASURE_AMMO(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_SET_HELI_COMBAT_OFFSET(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);

        VEHICLE::SET_HELI_COMBAT_OFFSET(vehicle, x, y, z);
    }

    static void WREN_VEHICLE_GET_CAN_VEHICLE_BE_PLACED_HERE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);
        float rotX = (float)wrenGetSlotDouble(vm, 5);
        float rotY = (float)wrenGetSlotDouble(vm, 6);
        float rotZ = (float)wrenGetSlotDouble(vm, 7);
        int p7 = (int)wrenGetSlotDouble(vm, 8);
        Any p8 = (Any)wrenGetSlotDouble(vm, 9);

        BOOL res = VEHICLE::GET_CAN_VEHICLE_BE_PLACED_HERE(vehicle, x, y, z, rotX, rotY, rotZ, p7, p8);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_SET_DISABLE_AUTOMATIC_CRASH_TASK(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_DISABLE_AUTOMATIC_CRASH_TASK(vehicle, toggle);
    }

    static void WREN_VEHICLE_SET_SPECIAL_FLIGHT_MODE_RATIO(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        float ratio = (float)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_SPECIAL_FLIGHT_MODE_RATIO(vehicle, ratio);
    }

    static void WREN_VEHICLE_SET_SPECIAL_FLIGHT_MODE_TARGET_RATIO(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        float percentage = (float)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_SPECIAL_FLIGHT_MODE_TARGET_RATIO(vehicle, percentage);
    }

    static void WREN_VEHICLE_SET_SPECIAL_FLIGHT_MODE_ALLOWED(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_SPECIAL_FLIGHT_MODE_ALLOWED(vehicle, toggle);
    }

    static void WREN_VEHICLE_SET_DISABLE_HOVER_MODE_FLIGHT(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_DISABLE_HOVER_MODE_FLIGHT(vehicle, toggle);
    }

    static void WREN_VEHICLE_GET_OUTRIGGERS_DEPLOYED(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::GET_OUTRIGGERS_DEPLOYED(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_FIND_SPAWN_COORDINATES_FOR_HELI(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        Vector3 res = VEHICLE::FIND_SPAWN_COORDINATES_FOR_HELI(ped);

        wrenEnsureSlots(vm, 1);

        wrenGetVariable(vm, "natives", "Vector3", 0);
        Vector3* wren_res = (Vector3*)wrenSetSlotNewForeign(vm, 0, 0, sizeof(Vector3));
        wren_res->x = res.x;
        wren_res->y = res.y;
        wren_res->z = res.z;
    }

    static void WREN_VEHICLE_SET_DEPLOY_FOLDING_WINGS(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL deploy = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        VEHICLE::SET_DEPLOY_FOLDING_WINGS(vehicle, deploy, p2);
    }

    static void WREN_VEHICLE_ARE_FOLDING_WINGS_DEPLOYED(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::ARE_FOLDING_WINGS_DEPLOYED(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_SET_DIP_STRAIGHT_DOWN_WHEN_CRASHING_PLANE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_DIP_STRAIGHT_DOWN_WHEN_CRASHING_PLANE(vehicle, toggle);
    }

    static void WREN_VEHICLE_SET_TURRET_HIDDEN(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int index = (int)wrenGetSlotDouble(vm, 2);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 3);

        VEHICLE::SET_TURRET_HIDDEN(vehicle, index, toggle);
    }

    static void WREN_VEHICLE_SET_HOVER_MODE_WING_RATIO(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        float ratio = (float)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_HOVER_MODE_WING_RATIO(vehicle, ratio);
    }

    static void WREN_VEHICLE_SET_DISABLE_TURRET_MOVEMENT(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int turretId = (int)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_DISABLE_TURRET_MOVEMENT(vehicle, turretId);
    }

    static void WREN_VEHICLE_SET_FORCE_FIX_LINK_MATRICES(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        VEHICLE::SET_FORCE_FIX_LINK_MATRICES(vehicle);
    }

    static void WREN_VEHICLE_SET_TRANSFORM_RATE_FOR_ANIMATION(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        float value = (float)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_TRANSFORM_RATE_FOR_ANIMATION(vehicle, value);
    }

    static void WREN_VEHICLE_SET_TRANSFORM_TO_SUBMARINE_USES_ALTERNATE_INPUT(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL value = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_TRANSFORM_TO_SUBMARINE_USES_ALTERNATE_INPUT(vehicle, value);
    }

    static void WREN_VEHICLE_SET_VEHICLE_COMBAT_MODE(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        VEHICLE::SET_VEHICLE_COMBAT_MODE(toggle);
    }

    static void WREN_VEHICLE_SET_VEHICLE_DETONATION_MODE(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        VEHICLE::SET_VEHICLE_DETONATION_MODE(toggle);
    }

    static void WREN_VEHICLE_SET_VEHICLE_SHUNT_ON_STICK(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        VEHICLE::SET_VEHICLE_SHUNT_ON_STICK(toggle);
    }

    static void WREN_VEHICLE_GET_IS_VEHICLE_SHUNTING(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::GET_IS_VEHICLE_SHUNTING(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_GET_HAS_VEHICLE_BEEN_HIT_BY_SHUNT(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::GET_HAS_VEHICLE_BEEN_HIT_BY_SHUNT(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_GET_LAST_SHUNT_VEHICLE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        Vehicle res = VEHICLE::GET_LAST_SHUNT_VEHICLE(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_SET_DISABLE_VEHICLE_EXPLOSIONS_DAMAGE(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        VEHICLE::SET_DISABLE_VEHICLE_EXPLOSIONS_DAMAGE(toggle);
    }

    static void WREN_VEHICLE_SET_OVERRIDE_NITROUS_LEVEL(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);
        float level = (float)wrenGetSlotDouble(vm, 3);
        float power = (float)wrenGetSlotDouble(vm, 4);
        float rechargeTime = (float)wrenGetSlotDouble(vm, 5);
        BOOL disableSound = (BOOL)wrenGetSlotBool(vm, 6);

        VEHICLE::SET_OVERRIDE_NITROUS_LEVEL(vehicle, toggle, level, power, rechargeTime, disableSound);
    }

    static void WREN_VEHICLE_SET_INCREASE_WHEEL_CRUSH_DAMAGE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_INCREASE_WHEEL_CRUSH_DAMAGE(vehicle, toggle);
    }

    static void WREN_VEHICLE_SET_DISABLE_WEAPON_BLADE_FORCES(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        VEHICLE::SET_DISABLE_WEAPON_BLADE_FORCES(toggle);
    }

    static void WREN_VEHICLE_SET_USE_DOUBLE_CLICK_FOR_CAR_JUMP(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        VEHICLE::SET_USE_DOUBLE_CLICK_FOR_CAR_JUMP(toggle);
    }

    static void WREN_VEHICLE_GET_DOES_VEHICLE_HAVE_TOMBSTONE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::GET_DOES_VEHICLE_HAVE_TOMBSTONE(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_HIDE_TOMBSTONE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::HIDE_TOMBSTONE(vehicle, toggle);
    }

    static void WREN_VEHICLE_GET_IS_VEHICLE_DISABLED_BY_EMP(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::GET_IS_VEHICLE_DISABLED_BY_EMP(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_SET_DISABLE_RETRACTING_WEAPON_BLADES(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        VEHICLE::SET_DISABLE_RETRACTING_WEAPON_BLADES(toggle);
    }

    static void WREN_VEHICLE_GET_TYRE_HEALTH(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int wheelIndex = (int)wrenGetSlotDouble(vm, 2);

        float res = VEHICLE::GET_TYRE_HEALTH(vehicle, wheelIndex);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_SET_TYRE_HEALTH(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int wheelIndex = (int)wrenGetSlotDouble(vm, 2);
        float health = (float)wrenGetSlotDouble(vm, 3);

        VEHICLE::SET_TYRE_HEALTH(vehicle, wheelIndex, health);
    }

    static void WREN_VEHICLE_GET_TYRE_WEAR_RATE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int wheelIndex = (int)wrenGetSlotDouble(vm, 2);

        float res = VEHICLE::GET_TYRE_WEAR_RATE(vehicle, wheelIndex);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_VEHICLE_SET_TYRE_WEAR_RATE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int wheelIndex = (int)wrenGetSlotDouble(vm, 2);
        float multiplier = (float)wrenGetSlotDouble(vm, 3);

        VEHICLE::SET_TYRE_WEAR_RATE(vehicle, wheelIndex, multiplier);
    }

    static void WREN_VEHICLE_SET_TYRE_WEAR_RATE_SCALE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int wheelIndex = (int)wrenGetSlotDouble(vm, 2);
        float multiplier = (float)wrenGetSlotDouble(vm, 3);

        VEHICLE::SET_TYRE_WEAR_RATE_SCALE(vehicle, wheelIndex, multiplier);
    }

    static void WREN_VEHICLE_SET_TYRE_MAXIMUM_GRIP_DIFFERENCE_DUE_TO_WEAR_RATE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int wheelIndex = (int)wrenGetSlotDouble(vm, 2);
        float multiplier = (float)wrenGetSlotDouble(vm, 3);

        VEHICLE::SET_TYRE_MAXIMUM_GRIP_DIFFERENCE_DUE_TO_WEAR_RATE(vehicle, wheelIndex, multiplier);
    }

    static void WREN_VEHICLE_SET_AIRCRAFT_IGNORE_HIGHTMAP_OPTIMISATION(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);

        VEHICLE::SET_AIRCRAFT_IGNORE_HIGHTMAP_OPTIMISATION(vehicle, p1);
    }

    static void WREN_VEHICLE_SET_REDUCED_SUSPENSION_FORCE(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL enable = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_REDUCED_SUSPENSION_FORCE(vehicle, enable);
    }

    static void WREN_VEHICLE_SET_DRIFT_TYRES(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_DRIFT_TYRES(vehicle, toggle);
    }

    static void WREN_VEHICLE_GET_DRIFT_TYRES_SET(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);

        BOOL res = VEHICLE::GET_DRIFT_TYRES_SET(vehicle);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_VEHICLE_NETWORK_USE_HIGH_PRECISION_TRAIN_BLENDING(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::NETWORK_USE_HIGH_PRECISION_TRAIN_BLENDING(vehicle, toggle);
    }

    static void WREN_VEHICLE_SET_CHECK_FOR_ENOUGH_ROOM_FOR_PED(WrenVM* vm)
    {
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        VEHICLE::SET_CHECK_FOR_ENOUGH_ROOM_FOR_PED(vehicle, p1);
    }


    static void WREN_WATER_GET_WATER_HEIGHT(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        float height;

        BOOL res = WATER::GET_WATER_HEIGHT(x, y, z, &height);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, height);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_WATER_GET_WATER_HEIGHT_NO_WAVES(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        float height;

        BOOL res = WATER::GET_WATER_HEIGHT_NO_WAVES(x, y, z, &height);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, height);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_WATER_TEST_PROBE_AGAINST_WATER(WrenVM* vm)
    {
        float x1 = (float)wrenGetSlotDouble(vm, 1);
        float y1 = (float)wrenGetSlotDouble(vm, 2);
        float z1 = (float)wrenGetSlotDouble(vm, 3);
        float x2 = (float)wrenGetSlotDouble(vm, 4);
        float y2 = (float)wrenGetSlotDouble(vm, 5);
        float z2 = (float)wrenGetSlotDouble(vm, 6);
        Vector3 result;

        BOOL res = WATER::TEST_PROBE_AGAINST_WATER(x1, y1, z1, x2, y2, z2, &result);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenGetVariable(vm, "natives", "Vector3", 2);
        Vector3* wren_result = (Vector3*)wrenSetSlotNewForeign(vm, 3, 2, sizeof(Vector3));
        wren_result->x = result.x;
        wren_result->y = result.y;
        wren_result->z = result.z;
        wrenInsertInList(vm, 0, 1, 3);

    }

    static void WREN_WATER_TEST_PROBE_AGAINST_ALL_WATER(WrenVM* vm)
    {
        float x1 = (float)wrenGetSlotDouble(vm, 1);
        float y1 = (float)wrenGetSlotDouble(vm, 2);
        float z1 = (float)wrenGetSlotDouble(vm, 3);
        float x2 = (float)wrenGetSlotDouble(vm, 4);
        float y2 = (float)wrenGetSlotDouble(vm, 5);
        float z2 = (float)wrenGetSlotDouble(vm, 6);
        int flags = (int)wrenGetSlotDouble(vm, 7);
        float waterHeight;

        int res = WATER::TEST_PROBE_AGAINST_ALL_WATER(x1, y1, z1, x2, y2, z2, flags, &waterHeight);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, waterHeight);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_WATER_TEST_VERTICAL_PROBE_AGAINST_ALL_WATER(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        int flags = (int)wrenGetSlotDouble(vm, 4);
        float waterHeight;

        int res = WATER::TEST_VERTICAL_PROBE_AGAINST_ALL_WATER(x, y, z, flags, &waterHeight);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotDouble(vm, 1, res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, waterHeight);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_WATER_MODIFY_WATER(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float radius = (float)wrenGetSlotDouble(vm, 3);
        float height = (float)wrenGetSlotDouble(vm, 4);

        WATER::MODIFY_WATER(x, y, radius, height);
    }

    static void WREN_WATER_ADD_EXTRA_CALMING_QUAD(WrenVM* vm)
    {
        float xLow = (float)wrenGetSlotDouble(vm, 1);
        float yLow = (float)wrenGetSlotDouble(vm, 2);
        float xHigh = (float)wrenGetSlotDouble(vm, 3);
        float yHigh = (float)wrenGetSlotDouble(vm, 4);
        float height = (float)wrenGetSlotDouble(vm, 5);

        int res = WATER::ADD_EXTRA_CALMING_QUAD(xLow, yLow, xHigh, yHigh, height);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_WATER_REMOVE_EXTRA_CALMING_QUAD(WrenVM* vm)
    {
        int p0 = (int)wrenGetSlotDouble(vm, 1);

        WATER::REMOVE_EXTRA_CALMING_QUAD(p0);
    }

    static void WREN_WATER_SET_DEEP_OCEAN_SCALER(WrenVM* vm)
    {
        float intensity = (float)wrenGetSlotDouble(vm, 1);

        WATER::SET_DEEP_OCEAN_SCALER(intensity);
    }

    static void WREN_WATER_GET_DEEP_OCEAN_SCALER(WrenVM* vm)
    {

        float res = WATER::GET_DEEP_OCEAN_SCALER();

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_WATER_SET_CALMED_WAVE_HEIGHT_SCALER(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);

        WATER::SET_CALMED_WAVE_HEIGHT_SCALER(p0);
    }

    static void WREN_WATER_RESET_DEEP_OCEAN_SCALER(WrenVM* vm)
    {

        WATER::RESET_DEEP_OCEAN_SCALER();
    }


    static void WREN_WEAPON_ENABLE_LASER_SIGHT_RENDERING(WrenVM* vm)
    {
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 1);

        WEAPON::ENABLE_LASER_SIGHT_RENDERING(toggle);
    }

    static void WREN_WEAPON_GET_WEAPON_COMPONENT_TYPE_MODEL(WrenVM* vm)
    {
        Hash componentHash = (Hash)wrenGetSlotDouble(vm, 1);

        Hash res = WEAPON::GET_WEAPON_COMPONENT_TYPE_MODEL(componentHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_WEAPON_GET_WEAPONTYPE_MODEL(WrenVM* vm)
    {
        Hash weaponHash = (Hash)wrenGetSlotDouble(vm, 1);

        Hash res = WEAPON::GET_WEAPONTYPE_MODEL(weaponHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_WEAPON_GET_WEAPONTYPE_SLOT(WrenVM* vm)
    {
        Hash weaponHash = (Hash)wrenGetSlotDouble(vm, 1);

        Hash res = WEAPON::GET_WEAPONTYPE_SLOT(weaponHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_WEAPON_GET_WEAPONTYPE_GROUP(WrenVM* vm)
    {
        Hash weaponHash = (Hash)wrenGetSlotDouble(vm, 1);

        Hash res = WEAPON::GET_WEAPONTYPE_GROUP(weaponHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_WEAPON_GET_WEAPON_COMPONENT_VARIANT_EXTRA_COUNT(WrenVM* vm)
    {
        Hash componentHash = (Hash)wrenGetSlotDouble(vm, 1);

        int res = WEAPON::GET_WEAPON_COMPONENT_VARIANT_EXTRA_COUNT(componentHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_WEAPON_GET_WEAPON_COMPONENT_VARIANT_EXTRA_MODEL(WrenVM* vm)
    {
        Hash componentHash = (Hash)wrenGetSlotDouble(vm, 1);
        int extraComponentIndex = (int)wrenGetSlotDouble(vm, 2);

        Hash res = WEAPON::GET_WEAPON_COMPONENT_VARIANT_EXTRA_MODEL(componentHash, extraComponentIndex);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_WEAPON_SET_CURRENT_PED_WEAPON(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Hash weaponHash = (Hash)wrenGetSlotDouble(vm, 2);
        BOOL bForceInHand = (BOOL)wrenGetSlotBool(vm, 3);

        WEAPON::SET_CURRENT_PED_WEAPON(ped, weaponHash, bForceInHand);
    }

    static void WREN_WEAPON_GET_CURRENT_PED_WEAPON(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Hash weaponHash;
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 2);

        BOOL res = WEAPON::GET_CURRENT_PED_WEAPON(ped, &weaponHash, p2);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, weaponHash);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_WEAPON_GET_CURRENT_PED_WEAPON_ENTITY_INDEX(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        Entity res = WEAPON::GET_CURRENT_PED_WEAPON_ENTITY_INDEX(ped, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_WEAPON_GET_BEST_PED_WEAPON(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        Hash res = WEAPON::GET_BEST_PED_WEAPON(ped, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_WEAPON_SET_CURRENT_PED_VEHICLE_WEAPON(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Hash weaponHash = (Hash)wrenGetSlotDouble(vm, 2);

        BOOL res = WEAPON::SET_CURRENT_PED_VEHICLE_WEAPON(ped, weaponHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_WEAPON_GET_CURRENT_PED_VEHICLE_WEAPON(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Hash weaponHash;

        BOOL res = WEAPON::GET_CURRENT_PED_VEHICLE_WEAPON(ped, &weaponHash);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, weaponHash);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_WEAPON_SET_PED_CYCLE_VEHICLE_WEAPONS_ONLY(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        WEAPON::SET_PED_CYCLE_VEHICLE_WEAPONS_ONLY(ped);
    }

    static void WREN_WEAPON_IS_PED_ARMED(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int typeFlags = (int)wrenGetSlotDouble(vm, 2);

        BOOL res = WEAPON::IS_PED_ARMED(ped, typeFlags);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_WEAPON_IS_WEAPON_VALID(WrenVM* vm)
    {
        Hash weaponHash = (Hash)wrenGetSlotDouble(vm, 1);

        BOOL res = WEAPON::IS_WEAPON_VALID(weaponHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_WEAPON_HAS_PED_GOT_WEAPON(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Hash weaponHash = (Hash)wrenGetSlotDouble(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        BOOL res = WEAPON::HAS_PED_GOT_WEAPON(ped, weaponHash, p2);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_WEAPON_IS_PED_WEAPON_READY_TO_SHOOT(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = WEAPON::IS_PED_WEAPON_READY_TO_SHOOT(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_WEAPON_GET_PED_WEAPONTYPE_IN_SLOT(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Hash weaponSlot = (Hash)wrenGetSlotDouble(vm, 2);

        Hash res = WEAPON::GET_PED_WEAPONTYPE_IN_SLOT(ped, weaponSlot);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_WEAPON_GET_AMMO_IN_PED_WEAPON(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Hash weaponhash = (Hash)wrenGetSlotDouble(vm, 2);

        int res = WEAPON::GET_AMMO_IN_PED_WEAPON(ped, weaponhash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_WEAPON_ADD_AMMO_TO_PED(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Hash weaponHash = (Hash)wrenGetSlotDouble(vm, 2);
        int ammo = (int)wrenGetSlotDouble(vm, 3);

        WEAPON::ADD_AMMO_TO_PED(ped, weaponHash, ammo);
    }

    static void WREN_WEAPON_SET_PED_AMMO(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Hash weaponHash = (Hash)wrenGetSlotDouble(vm, 2);
        int ammo = (int)wrenGetSlotDouble(vm, 3);
        BOOL p3 = (BOOL)wrenGetSlotBool(vm, 4);

        WEAPON::SET_PED_AMMO(ped, weaponHash, ammo, p3);
    }

    static void WREN_WEAPON_SET_PED_INFINITE_AMMO(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);
        Hash weaponHash = (Hash)wrenGetSlotDouble(vm, 3);

        WEAPON::SET_PED_INFINITE_AMMO(ped, toggle, weaponHash);
    }

    static void WREN_WEAPON_SET_PED_INFINITE_AMMO_CLIP(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        WEAPON::SET_PED_INFINITE_AMMO_CLIP(ped, toggle);
    }

    static void WREN_WEAPON_SET_PED_STUN_GUN_FINITE_AMMO(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        WEAPON::SET_PED_STUN_GUN_FINITE_AMMO(p0, p1);
    }

    static void WREN_WEAPON_GIVE_WEAPON_TO_PED(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Hash weaponHash = (Hash)wrenGetSlotDouble(vm, 2);
        int ammoCount = (int)wrenGetSlotDouble(vm, 3);
        BOOL isHidden = (BOOL)wrenGetSlotBool(vm, 4);
        BOOL bForceInHand = (BOOL)wrenGetSlotBool(vm, 5);

        WEAPON::GIVE_WEAPON_TO_PED(ped, weaponHash, ammoCount, isHidden, bForceInHand);
    }

    static void WREN_WEAPON_GIVE_DELAYED_WEAPON_TO_PED(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Hash weaponHash = (Hash)wrenGetSlotDouble(vm, 2);
        int ammoCount = (int)wrenGetSlotDouble(vm, 3);
        BOOL bForceInHand = (BOOL)wrenGetSlotBool(vm, 4);

        WEAPON::GIVE_DELAYED_WEAPON_TO_PED(ped, weaponHash, ammoCount, bForceInHand);
    }

    static void WREN_WEAPON_REMOVE_ALL_PED_WEAPONS(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        WEAPON::REMOVE_ALL_PED_WEAPONS(ped, p1);
    }

    static void WREN_WEAPON_REMOVE_WEAPON_FROM_PED(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Hash weaponHash = (Hash)wrenGetSlotDouble(vm, 2);

        WEAPON::REMOVE_WEAPON_FROM_PED(ped, weaponHash);
    }

    static void WREN_WEAPON_HIDE_PED_WEAPON_FOR_SCRIPTED_CUTSCENE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        WEAPON::HIDE_PED_WEAPON_FOR_SCRIPTED_CUTSCENE(ped, toggle);
    }

    static void WREN_WEAPON_SET_PED_CURRENT_WEAPON_VISIBLE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL visible = (BOOL)wrenGetSlotBool(vm, 2);
        BOOL deselectWeapon = (BOOL)wrenGetSlotBool(vm, 3);
        BOOL p3 = (BOOL)wrenGetSlotBool(vm, 4);
        BOOL p4 = (BOOL)wrenGetSlotBool(vm, 5);

        WEAPON::SET_PED_CURRENT_WEAPON_VISIBLE(ped, visible, deselectWeapon, p3, p4);
    }

    static void WREN_WEAPON_SET_PED_DROPS_WEAPONS_WHEN_DEAD(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        WEAPON::SET_PED_DROPS_WEAPONS_WHEN_DEAD(ped, toggle);
    }

    static void WREN_WEAPON_HAS_PED_BEEN_DAMAGED_BY_WEAPON(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Hash weaponHash = (Hash)wrenGetSlotDouble(vm, 2);
        int weaponType = (int)wrenGetSlotDouble(vm, 3);

        BOOL res = WEAPON::HAS_PED_BEEN_DAMAGED_BY_WEAPON(ped, weaponHash, weaponType);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_WEAPON_CLEAR_PED_LAST_WEAPON_DAMAGE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        WEAPON::CLEAR_PED_LAST_WEAPON_DAMAGE(ped);
    }

    static void WREN_WEAPON_HAS_ENTITY_BEEN_DAMAGED_BY_WEAPON(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);
        Hash weaponHash = (Hash)wrenGetSlotDouble(vm, 2);
        int weaponType = (int)wrenGetSlotDouble(vm, 3);

        BOOL res = WEAPON::HAS_ENTITY_BEEN_DAMAGED_BY_WEAPON(entity, weaponHash, weaponType);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_WEAPON_CLEAR_ENTITY_LAST_WEAPON_DAMAGE(WrenVM* vm)
    {
        Entity entity = (Entity)wrenGetSlotDouble(vm, 1);

        WEAPON::CLEAR_ENTITY_LAST_WEAPON_DAMAGE(entity);
    }

    static void WREN_WEAPON_SET_PED_DROPS_WEAPON(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        WEAPON::SET_PED_DROPS_WEAPON(ped);
    }

    static void WREN_WEAPON_SET_PED_DROPS_INVENTORY_WEAPON(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Hash weaponHash = (Hash)wrenGetSlotDouble(vm, 2);
        float xOffset = (float)wrenGetSlotDouble(vm, 3);
        float yOffset = (float)wrenGetSlotDouble(vm, 4);
        float zOffset = (float)wrenGetSlotDouble(vm, 5);
        int ammoCount = (int)wrenGetSlotDouble(vm, 6);

        WEAPON::SET_PED_DROPS_INVENTORY_WEAPON(ped, weaponHash, xOffset, yOffset, zOffset, ammoCount);
    }

    static void WREN_WEAPON_GET_MAX_AMMO_IN_CLIP(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Hash weaponHash = (Hash)wrenGetSlotDouble(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        int res = WEAPON::GET_MAX_AMMO_IN_CLIP(ped, weaponHash, p2);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_WEAPON_GET_AMMO_IN_CLIP(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Hash weaponHash = (Hash)wrenGetSlotDouble(vm, 2);
        int ammo;

        BOOL res = WEAPON::GET_AMMO_IN_CLIP(ped, weaponHash, &ammo);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, ammo);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_WEAPON_SET_AMMO_IN_CLIP(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Hash weaponHash = (Hash)wrenGetSlotDouble(vm, 2);
        int ammo = (int)wrenGetSlotDouble(vm, 3);

        BOOL res = WEAPON::SET_AMMO_IN_CLIP(ped, weaponHash, ammo);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_WEAPON_GET_MAX_AMMO(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Hash weaponHash = (Hash)wrenGetSlotDouble(vm, 2);
        int ammo;

        BOOL res = WEAPON::GET_MAX_AMMO(ped, weaponHash, &ammo);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, ammo);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_WEAPON_GET_MAX_AMMO_BY_TYPE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Hash ammoTypeHash = (Hash)wrenGetSlotDouble(vm, 2);
        int ammo;

        BOOL res = WEAPON::GET_MAX_AMMO_BY_TYPE(ped, ammoTypeHash, &ammo);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, ammo);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_WEAPON_ADD_PED_AMMO_BY_TYPE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Hash ammoTypeHash = (Hash)wrenGetSlotDouble(vm, 2);
        int ammo = (int)wrenGetSlotDouble(vm, 3);

        WEAPON::ADD_PED_AMMO_BY_TYPE(ped, ammoTypeHash, ammo);
    }

    static void WREN_WEAPON_SET_PED_AMMO_BY_TYPE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Hash ammoTypeHash = (Hash)wrenGetSlotDouble(vm, 2);
        int ammo = (int)wrenGetSlotDouble(vm, 3);

        WEAPON::SET_PED_AMMO_BY_TYPE(ped, ammoTypeHash, ammo);
    }

    static void WREN_WEAPON_GET_PED_AMMO_BY_TYPE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Hash ammoTypeHash = (Hash)wrenGetSlotDouble(vm, 2);

        int res = WEAPON::GET_PED_AMMO_BY_TYPE(ped, ammoTypeHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_WEAPON_SET_PED_AMMO_TO_DROP(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);

        WEAPON::SET_PED_AMMO_TO_DROP(ped, p1);
    }

    static void WREN_WEAPON_SET_PICKUP_AMMO_AMOUNT_SCALER(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);

        WEAPON::SET_PICKUP_AMMO_AMOUNT_SCALER(p0);
    }

    static void WREN_WEAPON_GET_PED_AMMO_TYPE_FROM_WEAPON(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Hash weaponHash = (Hash)wrenGetSlotDouble(vm, 2);

        Hash res = WEAPON::GET_PED_AMMO_TYPE_FROM_WEAPON(ped, weaponHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_WEAPON_GET_PED_ORIGINAL_AMMO_TYPE_FROM_WEAPON(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Hash weaponHash = (Hash)wrenGetSlotDouble(vm, 2);

        Hash res = WEAPON::GET_PED_ORIGINAL_AMMO_TYPE_FROM_WEAPON(ped, weaponHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_WEAPON_GET_PED_LAST_WEAPON_IMPACT_COORD(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Vector3 coords;

        BOOL res = WEAPON::GET_PED_LAST_WEAPON_IMPACT_COORD(ped, &coords);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenGetVariable(vm, "natives", "Vector3", 2);
        Vector3* wren_coords = (Vector3*)wrenSetSlotNewForeign(vm, 3, 2, sizeof(Vector3));
        wren_coords->x = coords.x;
        wren_coords->y = coords.y;
        wren_coords->z = coords.z;
        wrenInsertInList(vm, 0, 1, 3);

    }

    static void WREN_WEAPON_SET_PED_GADGET(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Hash gadgetHash = (Hash)wrenGetSlotDouble(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        WEAPON::SET_PED_GADGET(ped, gadgetHash, p2);
    }

    static void WREN_WEAPON_GET_IS_PED_GADGET_EQUIPPED(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Hash gadgetHash = (Hash)wrenGetSlotDouble(vm, 2);

        BOOL res = WEAPON::GET_IS_PED_GADGET_EQUIPPED(ped, gadgetHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_WEAPON_GET_SELECTED_PED_WEAPON(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        Hash res = WEAPON::GET_SELECTED_PED_WEAPON(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_WEAPON_EXPLODE_PROJECTILES(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Hash weaponHash = (Hash)wrenGetSlotDouble(vm, 2);
        BOOL p2 = (BOOL)wrenGetSlotBool(vm, 3);

        WEAPON::EXPLODE_PROJECTILES(ped, weaponHash, p2);
    }

    static void WREN_WEAPON_REMOVE_ALL_PROJECTILES_OF_TYPE(WrenVM* vm)
    {
        Hash weaponHash = (Hash)wrenGetSlotDouble(vm, 1);
        BOOL explode = (BOOL)wrenGetSlotBool(vm, 2);

        WEAPON::REMOVE_ALL_PROJECTILES_OF_TYPE(weaponHash, explode);
    }

    static void WREN_WEAPON_GET_LOCKON_DISTANCE_OF_CURRENT_PED_WEAPON(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        float res = WEAPON::GET_LOCKON_DISTANCE_OF_CURRENT_PED_WEAPON(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_WEAPON_GET_MAX_RANGE_OF_CURRENT_PED_WEAPON(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        float res = WEAPON::GET_MAX_RANGE_OF_CURRENT_PED_WEAPON(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_WEAPON_HAS_VEHICLE_GOT_PROJECTILE_ATTACHED(WrenVM* vm)
    {
        Ped driver = (Ped)wrenGetSlotDouble(vm, 1);
        Vehicle vehicle = (Vehicle)wrenGetSlotDouble(vm, 2);
        Hash weaponHash = (Hash)wrenGetSlotDouble(vm, 3);
        Any p3 = (Any)wrenGetSlotDouble(vm, 4);

        BOOL res = WEAPON::HAS_VEHICLE_GOT_PROJECTILE_ATTACHED(driver, vehicle, weaponHash, p3);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_WEAPON_GIVE_WEAPON_COMPONENT_TO_PED(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Hash weaponHash = (Hash)wrenGetSlotDouble(vm, 2);
        Hash componentHash = (Hash)wrenGetSlotDouble(vm, 3);

        WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(ped, weaponHash, componentHash);
    }

    static void WREN_WEAPON_REMOVE_WEAPON_COMPONENT_FROM_PED(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Hash weaponHash = (Hash)wrenGetSlotDouble(vm, 2);
        Hash componentHash = (Hash)wrenGetSlotDouble(vm, 3);

        WEAPON::REMOVE_WEAPON_COMPONENT_FROM_PED(ped, weaponHash, componentHash);
    }

    static void WREN_WEAPON_HAS_PED_GOT_WEAPON_COMPONENT(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Hash weaponHash = (Hash)wrenGetSlotDouble(vm, 2);
        Hash componentHash = (Hash)wrenGetSlotDouble(vm, 3);

        BOOL res = WEAPON::HAS_PED_GOT_WEAPON_COMPONENT(ped, weaponHash, componentHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_WEAPON_IS_PED_WEAPON_COMPONENT_ACTIVE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Hash weaponHash = (Hash)wrenGetSlotDouble(vm, 2);
        Hash componentHash = (Hash)wrenGetSlotDouble(vm, 3);

        BOOL res = WEAPON::IS_PED_WEAPON_COMPONENT_ACTIVE(ped, weaponHash, componentHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_WEAPON_REFILL_AMMO_INSTANTLY(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = WEAPON::REFILL_AMMO_INSTANTLY(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_WEAPON_MAKE_PED_RELOAD(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = WEAPON::MAKE_PED_RELOAD(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_WEAPON_REQUEST_WEAPON_ASSET(WrenVM* vm)
    {
        Hash weaponHash = (Hash)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);
        int p2 = (int)wrenGetSlotDouble(vm, 3);

        WEAPON::REQUEST_WEAPON_ASSET(weaponHash, p1, p2);
    }

    static void WREN_WEAPON_HAS_WEAPON_ASSET_LOADED(WrenVM* vm)
    {
        Hash weaponHash = (Hash)wrenGetSlotDouble(vm, 1);

        BOOL res = WEAPON::HAS_WEAPON_ASSET_LOADED(weaponHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_WEAPON_REMOVE_WEAPON_ASSET(WrenVM* vm)
    {
        Hash weaponHash = (Hash)wrenGetSlotDouble(vm, 1);

        WEAPON::REMOVE_WEAPON_ASSET(weaponHash);
    }

    static void WREN_WEAPON_CREATE_WEAPON_OBJECT(WrenVM* vm)
    {
        Hash weaponHash = (Hash)wrenGetSlotDouble(vm, 1);
        int ammoCount = (int)wrenGetSlotDouble(vm, 2);
        float x = (float)wrenGetSlotDouble(vm, 3);
        float y = (float)wrenGetSlotDouble(vm, 4);
        float z = (float)wrenGetSlotDouble(vm, 5);
        BOOL showWorldModel = (BOOL)wrenGetSlotBool(vm, 6);
        float scale = (float)wrenGetSlotDouble(vm, 7);
        Any p7 = (Any)wrenGetSlotDouble(vm, 8);
        Any p8 = (Any)wrenGetSlotDouble(vm, 9);
        Any p9 = (Any)wrenGetSlotDouble(vm, 10);

        Object res = WEAPON::CREATE_WEAPON_OBJECT(weaponHash, ammoCount, x, y, z, showWorldModel, scale, p7, p8, p9);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_WEAPON_GIVE_WEAPON_COMPONENT_TO_WEAPON_OBJECT(WrenVM* vm)
    {
        Object weaponObject = (Object)wrenGetSlotDouble(vm, 1);
        Hash addonHash = (Hash)wrenGetSlotDouble(vm, 2);

        WEAPON::GIVE_WEAPON_COMPONENT_TO_WEAPON_OBJECT(weaponObject, addonHash);
    }

    static void WREN_WEAPON_REMOVE_WEAPON_COMPONENT_FROM_WEAPON_OBJECT(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        WEAPON::REMOVE_WEAPON_COMPONENT_FROM_WEAPON_OBJECT(p0, p1);
    }

    static void WREN_WEAPON_HAS_WEAPON_GOT_WEAPON_COMPONENT(WrenVM* vm)
    {
        Object weapon = (Object)wrenGetSlotDouble(vm, 1);
        Hash addonHash = (Hash)wrenGetSlotDouble(vm, 2);

        BOOL res = WEAPON::HAS_WEAPON_GOT_WEAPON_COMPONENT(weapon, addonHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_WEAPON_GIVE_WEAPON_OBJECT_TO_PED(WrenVM* vm)
    {
        Object weaponObject = (Object)wrenGetSlotDouble(vm, 1);
        Ped ped = (Ped)wrenGetSlotDouble(vm, 2);

        WEAPON::GIVE_WEAPON_OBJECT_TO_PED(weaponObject, ped);
    }

    static void WREN_WEAPON_DOES_WEAPON_TAKE_WEAPON_COMPONENT(WrenVM* vm)
    {
        Hash weaponHash = (Hash)wrenGetSlotDouble(vm, 1);
        Hash componentHash = (Hash)wrenGetSlotDouble(vm, 2);

        BOOL res = WEAPON::DOES_WEAPON_TAKE_WEAPON_COMPONENT(weaponHash, componentHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_WEAPON_GET_WEAPON_OBJECT_FROM_PED(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL p1 = (BOOL)wrenGetSlotBool(vm, 2);

        Object res = WEAPON::GET_WEAPON_OBJECT_FROM_PED(ped, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_WEAPON_GIVE_LOADOUT_TO_PED(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Hash loadoutHash = (Hash)wrenGetSlotDouble(vm, 2);

        WEAPON::GIVE_LOADOUT_TO_PED(ped, loadoutHash);
    }

    static void WREN_WEAPON_SET_PED_WEAPON_TINT_INDEX(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Hash weaponHash = (Hash)wrenGetSlotDouble(vm, 2);
        int tintIndex = (int)wrenGetSlotDouble(vm, 3);

        WEAPON::SET_PED_WEAPON_TINT_INDEX(ped, weaponHash, tintIndex);
    }

    static void WREN_WEAPON_GET_PED_WEAPON_TINT_INDEX(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Hash weaponHash = (Hash)wrenGetSlotDouble(vm, 2);

        int res = WEAPON::GET_PED_WEAPON_TINT_INDEX(ped, weaponHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_WEAPON_SET_WEAPON_OBJECT_TINT_INDEX(WrenVM* vm)
    {
        Object weapon = (Object)wrenGetSlotDouble(vm, 1);
        int tintIndex = (int)wrenGetSlotDouble(vm, 2);

        WEAPON::SET_WEAPON_OBJECT_TINT_INDEX(weapon, tintIndex);
    }

    static void WREN_WEAPON_GET_WEAPON_OBJECT_TINT_INDEX(WrenVM* vm)
    {
        Object weapon = (Object)wrenGetSlotDouble(vm, 1);

        int res = WEAPON::GET_WEAPON_OBJECT_TINT_INDEX(weapon);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_WEAPON_GET_WEAPON_TINT_COUNT(WrenVM* vm)
    {
        Hash weaponHash = (Hash)wrenGetSlotDouble(vm, 1);

        int res = WEAPON::GET_WEAPON_TINT_COUNT(weaponHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_WEAPON_SET_PED_WEAPON_COMPONENT_TINT_INDEX(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Hash weaponHash = (Hash)wrenGetSlotDouble(vm, 2);
        Hash camoComponentHash = (Hash)wrenGetSlotDouble(vm, 3);
        int colorIndex = (int)wrenGetSlotDouble(vm, 4);

        WEAPON::SET_PED_WEAPON_COMPONENT_TINT_INDEX(ped, weaponHash, camoComponentHash, colorIndex);
    }

    static void WREN_WEAPON_GET_PED_WEAPON_COMPONENT_TINT_INDEX(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Hash weaponHash = (Hash)wrenGetSlotDouble(vm, 2);
        Hash camoComponentHash = (Hash)wrenGetSlotDouble(vm, 3);

        int res = WEAPON::GET_PED_WEAPON_COMPONENT_TINT_INDEX(ped, weaponHash, camoComponentHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_WEAPON_SET_WEAPON_OBJECT_COMPONENT_TINT_INDEX(WrenVM* vm)
    {
        Object weaponObject = (Object)wrenGetSlotDouble(vm, 1);
        Hash camoComponentHash = (Hash)wrenGetSlotDouble(vm, 2);
        int colorIndex = (int)wrenGetSlotDouble(vm, 3);

        WEAPON::SET_WEAPON_OBJECT_COMPONENT_TINT_INDEX(weaponObject, camoComponentHash, colorIndex);
    }

    static void WREN_WEAPON_GET_WEAPON_OBJECT_COMPONENT_TINT_INDEX(WrenVM* vm)
    {
        Object weaponObject = (Object)wrenGetSlotDouble(vm, 1);
        Hash camoComponentHash = (Hash)wrenGetSlotDouble(vm, 2);

        int res = WEAPON::GET_WEAPON_OBJECT_COMPONENT_TINT_INDEX(weaponObject, camoComponentHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_WEAPON_GET_PED_WEAPON_CAMO_INDEX(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Hash weaponHash = (Hash)wrenGetSlotDouble(vm, 2);

        int res = WEAPON::GET_PED_WEAPON_CAMO_INDEX(ped, weaponHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_WEAPON_SET_WEAPON_OBJECT_CAMO_INDEX(WrenVM* vm)
    {
        Object weaponObject = (Object)wrenGetSlotDouble(vm, 1);
        int p1 = (int)wrenGetSlotDouble(vm, 2);

        WEAPON::SET_WEAPON_OBJECT_CAMO_INDEX(weaponObject, p1);
    }

    static void WREN_WEAPON_GET_WEAPON_HUD_STATS(WrenVM* vm)
    {
        Hash weaponHash = (Hash)wrenGetSlotDouble(vm, 1);
        Any outData;

        BOOL res = WEAPON::GET_WEAPON_HUD_STATS(weaponHash, &outData);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, outData);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_WEAPON_GET_WEAPON_COMPONENT_HUD_STATS(WrenVM* vm)
    {
        Hash componentHash = (Hash)wrenGetSlotDouble(vm, 1);
        Any outData;

        BOOL res = WEAPON::GET_WEAPON_COMPONENT_HUD_STATS(componentHash, &outData);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, outData);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_WEAPON_GET_WEAPON_DAMAGE(WrenVM* vm)
    {
        Hash weaponHash = (Hash)wrenGetSlotDouble(vm, 1);
        Hash componentHash = (Hash)wrenGetSlotDouble(vm, 2);

        float res = WEAPON::GET_WEAPON_DAMAGE(weaponHash, componentHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_WEAPON_GET_WEAPON_CLIP_SIZE(WrenVM* vm)
    {
        Hash weaponHash = (Hash)wrenGetSlotDouble(vm, 1);

        int res = WEAPON::GET_WEAPON_CLIP_SIZE(weaponHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_WEAPON_GET_WEAPON_TIME_BETWEEN_SHOTS(WrenVM* vm)
    {
        Hash weaponHash = (Hash)wrenGetSlotDouble(vm, 1);

        float res = WEAPON::GET_WEAPON_TIME_BETWEEN_SHOTS(weaponHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_WEAPON_SET_PED_CHANCE_OF_FIRING_BLANKS(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float xBias = (float)wrenGetSlotDouble(vm, 2);
        float yBias = (float)wrenGetSlotDouble(vm, 3);

        WEAPON::SET_PED_CHANCE_OF_FIRING_BLANKS(ped, xBias, yBias);
    }

    static void WREN_WEAPON_SET_PED_SHOOT_ORDNANCE_WEAPON(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);

        Object res = WEAPON::SET_PED_SHOOT_ORDNANCE_WEAPON(ped, p1);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_WEAPON_REQUEST_WEAPON_HIGH_DETAIL_MODEL(WrenVM* vm)
    {
        Entity weaponObject = (Entity)wrenGetSlotDouble(vm, 1);

        WEAPON::REQUEST_WEAPON_HIGH_DETAIL_MODEL(weaponObject);
    }

    static void WREN_WEAPON_SET_WEAPON_DAMAGE_MODIFIER(WrenVM* vm)
    {
        Hash weaponHash = (Hash)wrenGetSlotDouble(vm, 1);
        float damageMultiplier = (float)wrenGetSlotDouble(vm, 2);

        WEAPON::SET_WEAPON_DAMAGE_MODIFIER(weaponHash, damageMultiplier);
    }

    static void WREN_WEAPON_SET_WEAPON_AOE_MODIFIER(WrenVM* vm)
    {
        Hash weaponHash = (Hash)wrenGetSlotDouble(vm, 1);
        float multiplier = (float)wrenGetSlotDouble(vm, 2);

        WEAPON::SET_WEAPON_AOE_MODIFIER(weaponHash, multiplier);
    }

    static void WREN_WEAPON_SET_WEAPON_EFFECT_DURATION_MODIFIER(WrenVM* vm)
    {
        Any p0 = (Any)wrenGetSlotDouble(vm, 1);
        Any p1 = (Any)wrenGetSlotDouble(vm, 2);

        WEAPON::SET_WEAPON_EFFECT_DURATION_MODIFIER(p0, p1);
    }

    static void WREN_WEAPON_IS_PED_CURRENT_WEAPON_SILENCED(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = WEAPON::IS_PED_CURRENT_WEAPON_SILENCED(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_WEAPON_IS_FLASH_LIGHT_ON(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        BOOL res = WEAPON::IS_FLASH_LIGHT_ON(ped);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_WEAPON_SET_FLASH_LIGHT_FADE_DISTANCE(WrenVM* vm)
    {
        float distance = (float)wrenGetSlotDouble(vm, 1);

        Any res = WEAPON::SET_FLASH_LIGHT_FADE_DISTANCE(distance);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_WEAPON_SET_FLASH_LIGHT_ACTIVE_HISTORY(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        WEAPON::SET_FLASH_LIGHT_ACTIVE_HISTORY(ped, toggle);
    }

    static void WREN_WEAPON_SET_WEAPON_ANIMATION_OVERRIDE(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Hash animStyle = (Hash)wrenGetSlotDouble(vm, 2);

        WEAPON::SET_WEAPON_ANIMATION_OVERRIDE(ped, animStyle);
    }

    static void WREN_WEAPON_GET_WEAPON_DAMAGE_TYPE(WrenVM* vm)
    {
        Hash weaponHash = (Hash)wrenGetSlotDouble(vm, 1);

        int res = WEAPON::GET_WEAPON_DAMAGE_TYPE(weaponHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_WEAPON_SET_EQIPPED_WEAPON_START_SPINNING_AT_FULL_SPEED(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);

        WEAPON::SET_EQIPPED_WEAPON_START_SPINNING_AT_FULL_SPEED(ped);
    }

    static void WREN_WEAPON_CAN_USE_WEAPON_ON_PARACHUTE(WrenVM* vm)
    {
        Hash weaponHash = (Hash)wrenGetSlotDouble(vm, 1);

        BOOL res = WEAPON::CAN_USE_WEAPON_ON_PARACHUTE(weaponHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_WEAPON_CREATE_AIR_DEFENCE_SPHERE(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        float radius = (float)wrenGetSlotDouble(vm, 4);
        float p4 = (float)wrenGetSlotDouble(vm, 5);
        float p5 = (float)wrenGetSlotDouble(vm, 6);
        float p6 = (float)wrenGetSlotDouble(vm, 7);
        Hash weaponHash = (Hash)wrenGetSlotDouble(vm, 8);

        int res = WEAPON::CREATE_AIR_DEFENCE_SPHERE(x, y, z, radius, p4, p5, p6, weaponHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_WEAPON_CREATE_AIR_DEFENCE_ANGLED_AREA(WrenVM* vm)
    {
        float p0 = (float)wrenGetSlotDouble(vm, 1);
        float p1 = (float)wrenGetSlotDouble(vm, 2);
        float p2 = (float)wrenGetSlotDouble(vm, 3);
        float p3 = (float)wrenGetSlotDouble(vm, 4);
        float p4 = (float)wrenGetSlotDouble(vm, 5);
        float p5 = (float)wrenGetSlotDouble(vm, 6);
        float p6 = (float)wrenGetSlotDouble(vm, 7);
        float p7 = (float)wrenGetSlotDouble(vm, 8);
        float p8 = (float)wrenGetSlotDouble(vm, 9);
        float p9 = (float)wrenGetSlotDouble(vm, 10);
        Hash weaponHash = (Hash)wrenGetSlotDouble(vm, 11);

        int res = WEAPON::CREATE_AIR_DEFENCE_ANGLED_AREA(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, weaponHash);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_WEAPON_REMOVE_AIR_DEFENCE_SPHERE(WrenVM* vm)
    {
        int zoneId = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = WEAPON::REMOVE_AIR_DEFENCE_SPHERE(zoneId);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_WEAPON_REMOVE_ALL_AIR_DEFENCE_SPHERES(WrenVM* vm)
    {

        WEAPON::REMOVE_ALL_AIR_DEFENCE_SPHERES();
    }

    static void WREN_WEAPON_SET_PLAYER_TARGETTABLE_FOR_AIR_DEFENCE_SPHERE(WrenVM* vm)
    {
        Player player = (Player)wrenGetSlotDouble(vm, 1);
        int zoneId = (int)wrenGetSlotDouble(vm, 2);
        BOOL enable = (BOOL)wrenGetSlotBool(vm, 3);

        WEAPON::SET_PLAYER_TARGETTABLE_FOR_AIR_DEFENCE_SPHERE(player, zoneId, enable);
    }

    static void WREN_WEAPON_IS_AIR_DEFENCE_SPHERE_IN_AREA(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);
        float radius = (float)wrenGetSlotDouble(vm, 4);
        int outZoneId;

        BOOL res = WEAPON::IS_AIR_DEFENCE_SPHERE_IN_AREA(x, y, z, radius, &outZoneId);

        wrenEnsureSlots(vm, 4);

        wrenSetSlotNewList(vm, 0);

        wrenSetSlotBool(vm, 1, (bool)res);
        wrenInsertInList(vm, 0, 0, 1);

        wrenSetSlotDouble(vm, 2, outZoneId);
        wrenInsertInList(vm, 0, 1, 2);

    }

    static void WREN_WEAPON_FIRE_AIR_DEFENCE_SPHERE_WEAPON_AT_POSITION(WrenVM* vm)
    {
        int zoneId = (int)wrenGetSlotDouble(vm, 1);
        float x = (float)wrenGetSlotDouble(vm, 2);
        float y = (float)wrenGetSlotDouble(vm, 3);
        float z = (float)wrenGetSlotDouble(vm, 4);

        WEAPON::FIRE_AIR_DEFENCE_SPHERE_WEAPON_AT_POSITION(zoneId, x, y, z);
    }

    static void WREN_WEAPON_DOES_AIR_DEFENCE_SPHERE_EXIST(WrenVM* vm)
    {
        int zoneId = (int)wrenGetSlotDouble(vm, 1);

        BOOL res = WEAPON::DOES_AIR_DEFENCE_SPHERE_EXIST(zoneId);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotBool(vm, 0, (bool)res);
    }

    static void WREN_WEAPON_SET_CAN_PED_SELECT_INVENTORY_WEAPON(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        Hash weaponHash = (Hash)wrenGetSlotDouble(vm, 2);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 3);

        WEAPON::SET_CAN_PED_SELECT_INVENTORY_WEAPON(ped, weaponHash, toggle);
    }

    static void WREN_WEAPON_SET_CAN_PED_SELECT_ALL_WEAPONS(WrenVM* vm)
    {
        Ped ped = (Ped)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        WEAPON::SET_CAN_PED_SELECT_ALL_WEAPONS(ped, toggle);
    }


    static void WREN_ZONE_GET_ZONE_AT_COORDS(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);

        int res = ZONE::GET_ZONE_AT_COORDS(x, y, z);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_ZONE_GET_ZONE_FROM_NAME_ID(WrenVM* vm)
    {
        const char* zoneName = wrenGetSlotString(vm, 1);

        int res = ZONE::GET_ZONE_FROM_NAME_ID(zoneName);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_ZONE_GET_ZONE_POPSCHEDULE(WrenVM* vm)
    {
        int zoneId = (int)wrenGetSlotDouble(vm, 1);

        int res = ZONE::GET_ZONE_POPSCHEDULE(zoneId);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_ZONE_GET_NAME_OF_ZONE(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);

        const char* res = ZONE::GET_NAME_OF_ZONE(x, y, z);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotString(vm, 0, res);
    }

    static void WREN_ZONE_SET_ZONE_ENABLED(WrenVM* vm)
    {
        int zoneId = (int)wrenGetSlotDouble(vm, 1);
        BOOL toggle = (BOOL)wrenGetSlotBool(vm, 2);

        ZONE::SET_ZONE_ENABLED(zoneId, toggle);
    }

    static void WREN_ZONE_GET_ZONE_SCUMMINESS(WrenVM* vm)
    {
        int zoneId = (int)wrenGetSlotDouble(vm, 1);

        int res = ZONE::GET_ZONE_SCUMMINESS(zoneId);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }

    static void WREN_ZONE_OVERRIDE_POPSCHEDULE_VEHICLE_MODEL(WrenVM* vm)
    {
        int scheduleId = (int)wrenGetSlotDouble(vm, 1);
        Hash vehicleHash = (Hash)wrenGetSlotDouble(vm, 2);

        ZONE::OVERRIDE_POPSCHEDULE_VEHICLE_MODEL(scheduleId, vehicleHash);
    }

    static void WREN_ZONE_CLEAR_POPSCHEDULE_OVERRIDE_VEHICLE_MODEL(WrenVM* vm)
    {
        int scheduleId = (int)wrenGetSlotDouble(vm, 1);

        ZONE::CLEAR_POPSCHEDULE_OVERRIDE_VEHICLE_MODEL(scheduleId);
    }

    static void WREN_ZONE_GET_HASH_OF_MAP_AREA_AT_COORDS(WrenVM* vm)
    {
        float x = (float)wrenGetSlotDouble(vm, 1);
        float y = (float)wrenGetSlotDouble(vm, 2);
        float z = (float)wrenGetSlotDouble(vm, 3);

        Hash res = ZONE::GET_HASH_OF_MAP_AREA_AT_COORDS(x, y, z);

        wrenEnsureSlots(vm, 1);

        wrenSetSlotDouble(vm, 0, res);
    }


    static std::unordered_map<std::string_view, WrenForeignMethodFn> wren_natives_handlers =
    {
        { "WAIT(_)", WREN_SYSTEM_WAIT },
        { "START_NEW_SCRIPT(_,_)", WREN_SYSTEM_START_NEW_SCRIPT },
        { "START_NEW_SCRIPT_WITH_ARGS(_,_,_)", WREN_SYSTEM_START_NEW_SCRIPT_WITH_ARGS },
        { "START_NEW_SCRIPT_WITH_NAME_HASH(_,_)", WREN_SYSTEM_START_NEW_SCRIPT_WITH_NAME_HASH },
        { "START_NEW_SCRIPT_WITH_NAME_HASH_AND_ARGS(_,_,_)", WREN_SYSTEM_START_NEW_SCRIPT_WITH_NAME_HASH_AND_ARGS },
        { "TIMERA()", WREN_SYSTEM_TIMERA },
        { "TIMERB()", WREN_SYSTEM_TIMERB },
        { "SETTIMERA(_)", WREN_SYSTEM_SETTIMERA },
        { "SETTIMERB(_)", WREN_SYSTEM_SETTIMERB },
        { "TIMESTEP()", WREN_SYSTEM_TIMESTEP },
        { "SIN(_)", WREN_SYSTEM_SIN },
        { "COS(_)", WREN_SYSTEM_COS },
        { "SQRT(_)", WREN_SYSTEM_SQRT },
        { "POW(_,_)", WREN_SYSTEM_POW },
        { "LOG10(_)", WREN_SYSTEM_LOG10 },
        { "VMAG(_,_,_)", WREN_SYSTEM_VMAG },
        { "VMAG2(_,_,_)", WREN_SYSTEM_VMAG2 },
        { "VDIST(_,_,_,_,_,_)", WREN_SYSTEM_VDIST },
        { "VDIST2(_,_,_,_,_,_)", WREN_SYSTEM_VDIST2 },
        { "SHIFT_LEFT(_,_)", WREN_SYSTEM_SHIFT_LEFT },
        { "SHIFT_RIGHT(_,_)", WREN_SYSTEM_SHIFT_RIGHT },
        { "FLOOR(_)", WREN_SYSTEM_FLOOR },
        { "CEIL(_)", WREN_SYSTEM_CEIL },
        { "ROUND(_)", WREN_SYSTEM_ROUND },
        { "TO_FLOAT(_)", WREN_SYSTEM_TO_FLOAT },
        { "SET_THREAD_PRIORITY(_)", WREN_SYSTEM_SET_THREAD_PRIORITY },
        { "APP_DATA_VALID()", WREN_APP_APP_DATA_VALID },
        { "APP_GET_INT(_)", WREN_APP_APP_GET_INT },
        { "APP_GET_FLOAT(_)", WREN_APP_APP_GET_FLOAT },
        { "APP_GET_STRING(_)", WREN_APP_APP_GET_STRING },
        { "APP_SET_INT(_,_)", WREN_APP_APP_SET_INT },
        { "APP_SET_FLOAT(_,_)", WREN_APP_APP_SET_FLOAT },
        { "APP_SET_STRING(_,_)", WREN_APP_APP_SET_STRING },
        { "APP_SET_APP(_)", WREN_APP_APP_SET_APP },
        { "APP_SET_BLOCK(_)", WREN_APP_APP_SET_BLOCK },
        { "APP_CLEAR_BLOCK()", WREN_APP_APP_CLEAR_BLOCK },
        { "APP_CLOSE_APP()", WREN_APP_APP_CLOSE_APP },
        { "APP_CLOSE_BLOCK()", WREN_APP_APP_CLOSE_BLOCK },
        { "APP_HAS_LINKED_SOCIAL_CLUB_ACCOUNT()", WREN_APP_APP_HAS_LINKED_SOCIAL_CLUB_ACCOUNT },
        { "APP_HAS_SYNCED_DATA(_)", WREN_APP_APP_HAS_SYNCED_DATA },
        { "APP_SAVE_DATA()", WREN_APP_APP_SAVE_DATA },
        { "APP_GET_DELETED_FILE_STATUS()", WREN_APP_APP_GET_DELETED_FILE_STATUS },
        { "APP_DELETE_APP_DATA(_)", WREN_APP_APP_DELETE_APP_DATA },
        { "PLAY_PED_RINGTONE(_,_,_)", WREN_AUDIO_PLAY_PED_RINGTONE },
        { "IS_PED_RINGTONE_PLAYING(_)", WREN_AUDIO_IS_PED_RINGTONE_PLAYING },
        { "STOP_PED_RINGTONE(_)", WREN_AUDIO_STOP_PED_RINGTONE },
        { "IS_MOBILE_PHONE_CALL_ONGOING()", WREN_AUDIO_IS_MOBILE_PHONE_CALL_ONGOING },
        { "IS_MOBILE_INTERFERENCE_ACTIVE()", WREN_AUDIO_IS_MOBILE_INTERFERENCE_ACTIVE },
        { "CREATE_NEW_SCRIPTED_CONVERSATION()", WREN_AUDIO_CREATE_NEW_SCRIPTED_CONVERSATION },
        { "ADD_LINE_TO_CONVERSATION(_,_,_,_,_,_,_,_,_,_,_,_,_)", WREN_AUDIO_ADD_LINE_TO_CONVERSATION },
        { "ADD_PED_TO_CONVERSATION(_,_,_)", WREN_AUDIO_ADD_PED_TO_CONVERSATION },
        { "SET_POSITION_FOR_NULL_CONV_PED(_,_,_,_)", WREN_AUDIO_SET_POSITION_FOR_NULL_CONV_PED },
        { "SET_ENTITY_FOR_NULL_CONV_PED(_,_)", WREN_AUDIO_SET_ENTITY_FOR_NULL_CONV_PED },
        { "SET_MICROPHONE_POSITION(_,_,_,_,_,_,_,_,_,_)", WREN_AUDIO_SET_MICROPHONE_POSITION },
        { "SET_CONVERSATION_AUDIO_CONTROLLED_BY_ANIM(_)", WREN_AUDIO_SET_CONVERSATION_AUDIO_CONTROLLED_BY_ANIM },
        { "SET_CONVERSATION_AUDIO_PLACEHOLDER(_)", WREN_AUDIO_SET_CONVERSATION_AUDIO_PLACEHOLDER },
        { "START_SCRIPT_PHONE_CONVERSATION(_,_)", WREN_AUDIO_START_SCRIPT_PHONE_CONVERSATION },
        { "PRELOAD_SCRIPT_PHONE_CONVERSATION(_,_)", WREN_AUDIO_PRELOAD_SCRIPT_PHONE_CONVERSATION },
        { "START_SCRIPT_CONVERSATION(_,_,_,_)", WREN_AUDIO_START_SCRIPT_CONVERSATION },
        { "PRELOAD_SCRIPT_CONVERSATION(_,_,_,_)", WREN_AUDIO_PRELOAD_SCRIPT_CONVERSATION },
        { "START_PRELOADED_CONVERSATION()", WREN_AUDIO_START_PRELOADED_CONVERSATION },
        { "GET_IS_PRELOADED_CONVERSATION_READY()", WREN_AUDIO_GET_IS_PRELOADED_CONVERSATION_READY },
        { "IS_SCRIPTED_CONVERSATION_ONGOING()", WREN_AUDIO_IS_SCRIPTED_CONVERSATION_ONGOING },
        { "IS_SCRIPTED_CONVERSATION_LOADED()", WREN_AUDIO_IS_SCRIPTED_CONVERSATION_LOADED },
        { "GET_CURRENT_SCRIPTED_CONVERSATION_LINE()", WREN_AUDIO_GET_CURRENT_SCRIPTED_CONVERSATION_LINE },
        { "PAUSE_SCRIPTED_CONVERSATION(_)", WREN_AUDIO_PAUSE_SCRIPTED_CONVERSATION },
        { "RESTART_SCRIPTED_CONVERSATION()", WREN_AUDIO_RESTART_SCRIPTED_CONVERSATION },
        { "STOP_SCRIPTED_CONVERSATION(_)", WREN_AUDIO_STOP_SCRIPTED_CONVERSATION },
        { "SKIP_TO_NEXT_SCRIPTED_CONVERSATION_LINE()", WREN_AUDIO_SKIP_TO_NEXT_SCRIPTED_CONVERSATION_LINE },
        { "INTERRUPT_CONVERSATION(_,_,_)", WREN_AUDIO_INTERRUPT_CONVERSATION },
        { "INTERRUPT_CONVERSATION_AND_PAUSE(_,_,_)", WREN_AUDIO_INTERRUPT_CONVERSATION_AND_PAUSE },
        { "GET_VARIATION_CHOSEN_FOR_SCRIPTED_LINE()", WREN_AUDIO_GET_VARIATION_CHOSEN_FOR_SCRIPTED_LINE },
        { "SET_NO_DUCKING_FOR_CONVERSATION(_)", WREN_AUDIO_SET_NO_DUCKING_FOR_CONVERSATION },
        { "REGISTER_SCRIPT_WITH_AUDIO(_)", WREN_AUDIO_REGISTER_SCRIPT_WITH_AUDIO },
        { "UNREGISTER_SCRIPT_WITH_AUDIO()", WREN_AUDIO_UNREGISTER_SCRIPT_WITH_AUDIO },
        { "REQUEST_MISSION_AUDIO_BANK(_,_,_)", WREN_AUDIO_REQUEST_MISSION_AUDIO_BANK },
        { "REQUEST_AMBIENT_AUDIO_BANK(_,_,_)", WREN_AUDIO_REQUEST_AMBIENT_AUDIO_BANK },
        { "REQUEST_SCRIPT_AUDIO_BANK(_,_,_)", WREN_AUDIO_REQUEST_SCRIPT_AUDIO_BANK },
        { "HINT_MISSION_AUDIO_BANK(_,_,_)", WREN_AUDIO_HINT_MISSION_AUDIO_BANK },
        { "HINT_AMBIENT_AUDIO_BANK(_,_,_)", WREN_AUDIO_HINT_AMBIENT_AUDIO_BANK },
        { "HINT_SCRIPT_AUDIO_BANK(_,_,_)", WREN_AUDIO_HINT_SCRIPT_AUDIO_BANK },
        { "RELEASE_MISSION_AUDIO_BANK()", WREN_AUDIO_RELEASE_MISSION_AUDIO_BANK },
        { "RELEASE_AMBIENT_AUDIO_BANK()", WREN_AUDIO_RELEASE_AMBIENT_AUDIO_BANK },
        { "RELEASE_NAMED_SCRIPT_AUDIO_BANK(_)", WREN_AUDIO_RELEASE_NAMED_SCRIPT_AUDIO_BANK },
        { "RELEASE_SCRIPT_AUDIO_BANK()", WREN_AUDIO_RELEASE_SCRIPT_AUDIO_BANK },
        { "UNHINT_AMBIENT_AUDIO_BANK()", WREN_AUDIO_UNHINT_AMBIENT_AUDIO_BANK },
        { "UNHINT_SCRIPT_AUDIO_BANK()", WREN_AUDIO_UNHINT_SCRIPT_AUDIO_BANK },
        { "UNHINT_NAMED_SCRIPT_AUDIO_BANK(_)", WREN_AUDIO_UNHINT_NAMED_SCRIPT_AUDIO_BANK },
        { "GET_SOUND_ID()", WREN_AUDIO_GET_SOUND_ID },
        { "RELEASE_SOUND_ID(_)", WREN_AUDIO_RELEASE_SOUND_ID },
        { "PLAY_SOUND(_,_,_,_,_,_)", WREN_AUDIO_PLAY_SOUND },
        { "PLAY_SOUND_FRONTEND(_,_,_,_)", WREN_AUDIO_PLAY_SOUND_FRONTEND },
        { "PLAY_DEFERRED_SOUND_FRONTEND(_,_)", WREN_AUDIO_PLAY_DEFERRED_SOUND_FRONTEND },
        { "PLAY_SOUND_FROM_ENTITY(_,_,_,_,_,_)", WREN_AUDIO_PLAY_SOUND_FROM_ENTITY },
        { "PLAY_SOUND_FROM_ENTITY_HASH(_,_,_,_,_,_)", WREN_AUDIO_PLAY_SOUND_FROM_ENTITY_HASH },
        { "PLAY_SOUND_FROM_COORD(_,_,_,_,_,_,_,_,_)", WREN_AUDIO_PLAY_SOUND_FROM_COORD },
        { "UPDATE_SOUND_COORD(_,_,_,_)", WREN_AUDIO_UPDATE_SOUND_COORD },
        { "STOP_SOUND(_)", WREN_AUDIO_STOP_SOUND },
        { "GET_NETWORK_ID_FROM_SOUND_ID(_)", WREN_AUDIO_GET_NETWORK_ID_FROM_SOUND_ID },
        { "GET_SOUND_ID_FROM_NETWORK_ID(_)", WREN_AUDIO_GET_SOUND_ID_FROM_NETWORK_ID },
        { "SET_VARIABLE_ON_SOUND(_,_)", WREN_AUDIO_SET_VARIABLE_ON_SOUND },
        { "SET_VARIABLE_ON_STREAM(_,_)", WREN_AUDIO_SET_VARIABLE_ON_STREAM },
        { "OVERRIDE_UNDERWATER_STREAM(_)", WREN_AUDIO_OVERRIDE_UNDERWATER_STREAM },
        { "SET_VARIABLE_ON_UNDER_WATER_STREAM(_,_)", WREN_AUDIO_SET_VARIABLE_ON_UNDER_WATER_STREAM },
        { "HAS_SOUND_FINISHED(_)", WREN_AUDIO_HAS_SOUND_FINISHED },
        { "PLAY_PED_AMBIENT_SPEECH_NATIVE(_,_,_,_)", WREN_AUDIO_PLAY_PED_AMBIENT_SPEECH_NATIVE },
        { "PLAY_PED_AMBIENT_SPEECH_AND_CLONE_NATIVE(_,_,_,_)", WREN_AUDIO_PLAY_PED_AMBIENT_SPEECH_AND_CLONE_NATIVE },
        { "PLAY_PED_AMBIENT_SPEECH_WITH_VOICE_NATIVE(_,_,_,_,_)", WREN_AUDIO_PLAY_PED_AMBIENT_SPEECH_WITH_VOICE_NATIVE },
        { "PLAY_AMBIENT_SPEECH_FROM_POSITION_NATIVE(_,_,_,_,_,_)", WREN_AUDIO_PLAY_AMBIENT_SPEECH_FROM_POSITION_NATIVE },
        { "OVERRIDE_TREVOR_RAGE(_)", WREN_AUDIO_OVERRIDE_TREVOR_RAGE },
        { "RESET_TREVOR_RAGE()", WREN_AUDIO_RESET_TREVOR_RAGE },
        { "SET_PLAYER_ANGRY(_,_)", WREN_AUDIO_SET_PLAYER_ANGRY },
        { "PLAY_PAIN(_,_,_,_)", WREN_AUDIO_PLAY_PAIN },
        { "RELEASE_WEAPON_AUDIO()", WREN_AUDIO_RELEASE_WEAPON_AUDIO },
        { "ACTIVATE_AUDIO_SLOWMO_MODE(_)", WREN_AUDIO_ACTIVATE_AUDIO_SLOWMO_MODE },
        { "DEACTIVATE_AUDIO_SLOWMO_MODE(_)", WREN_AUDIO_DEACTIVATE_AUDIO_SLOWMO_MODE },
        { "SET_AMBIENT_VOICE_NAME(_,_)", WREN_AUDIO_SET_AMBIENT_VOICE_NAME },
        { "SET_AMBIENT_VOICE_NAME_HASH(_,_)", WREN_AUDIO_SET_AMBIENT_VOICE_NAME_HASH },
        { "GET_AMBIENT_VOICE_NAME_HASH(_)", WREN_AUDIO_GET_AMBIENT_VOICE_NAME_HASH },
        { "SET_PED_VOICE_FULL(_)", WREN_AUDIO_SET_PED_VOICE_FULL },
        { "SET_PED_RACE_AND_VOICE_GROUP(_,_,_)", WREN_AUDIO_SET_PED_RACE_AND_VOICE_GROUP },
        { "SET_PED_VOICE_GROUP(_,_)", WREN_AUDIO_SET_PED_VOICE_GROUP },
        { "SET_PED_VOICE_GROUP_FROM_RACE_TO_PVG(_,_)", WREN_AUDIO_SET_PED_VOICE_GROUP_FROM_RACE_TO_PVG },
        { "SET_PED_GENDER(_,_)", WREN_AUDIO_SET_PED_GENDER },
        { "STOP_CURRENT_PLAYING_SPEECH(_)", WREN_AUDIO_STOP_CURRENT_PLAYING_SPEECH },
        { "STOP_CURRENT_PLAYING_AMBIENT_SPEECH(_)", WREN_AUDIO_STOP_CURRENT_PLAYING_AMBIENT_SPEECH },
        { "IS_AMBIENT_SPEECH_PLAYING(_)", WREN_AUDIO_IS_AMBIENT_SPEECH_PLAYING },
        { "IS_SCRIPTED_SPEECH_PLAYING(_)", WREN_AUDIO_IS_SCRIPTED_SPEECH_PLAYING },
        { "IS_ANY_SPEECH_PLAYING(_)", WREN_AUDIO_IS_ANY_SPEECH_PLAYING },
        { "IS_ANY_POSITIONAL_SPEECH_PLAYING()", WREN_AUDIO_IS_ANY_POSITIONAL_SPEECH_PLAYING },
        { "DOES_CONTEXT_EXIST_FOR_THIS_PED(_,_,_)", WREN_AUDIO_DOES_CONTEXT_EXIST_FOR_THIS_PED },
        { "IS_PED_IN_CURRENT_CONVERSATION(_)", WREN_AUDIO_IS_PED_IN_CURRENT_CONVERSATION },
        { "SET_PED_IS_DRUNK(_,_)", WREN_AUDIO_SET_PED_IS_DRUNK },
        { "PLAY_ANIMAL_VOCALIZATION(_,_,_)", WREN_AUDIO_PLAY_ANIMAL_VOCALIZATION },
        { "IS_ANIMAL_VOCALIZATION_PLAYING(_)", WREN_AUDIO_IS_ANIMAL_VOCALIZATION_PLAYING },
        { "SET_ANIMAL_MOOD(_,_)", WREN_AUDIO_SET_ANIMAL_MOOD },
        { "IS_MOBILE_PHONE_RADIO_ACTIVE()", WREN_AUDIO_IS_MOBILE_PHONE_RADIO_ACTIVE },
        { "SET_MOBILE_PHONE_RADIO_STATE(_)", WREN_AUDIO_SET_MOBILE_PHONE_RADIO_STATE },
        { "GET_PLAYER_RADIO_STATION_INDEX()", WREN_AUDIO_GET_PLAYER_RADIO_STATION_INDEX },
        { "GET_PLAYER_RADIO_STATION_NAME()", WREN_AUDIO_GET_PLAYER_RADIO_STATION_NAME },
        { "GET_RADIO_STATION_NAME(_)", WREN_AUDIO_GET_RADIO_STATION_NAME },
        { "GET_PLAYER_RADIO_STATION_GENRE()", WREN_AUDIO_GET_PLAYER_RADIO_STATION_GENRE },
        { "IS_RADIO_RETUNING()", WREN_AUDIO_IS_RADIO_RETUNING },
        { "IS_RADIO_FADED_OUT()", WREN_AUDIO_IS_RADIO_FADED_OUT },
        { "SET_RADIO_RETUNE_UP()", WREN_AUDIO_SET_RADIO_RETUNE_UP },
        { "SET_RADIO_RETUNE_DOWN()", WREN_AUDIO_SET_RADIO_RETUNE_DOWN },
        { "SET_RADIO_TO_STATION_NAME(_)", WREN_AUDIO_SET_RADIO_TO_STATION_NAME },
        { "SET_VEH_RADIO_STATION(_,_)", WREN_AUDIO_SET_VEH_RADIO_STATION },
        { "SET_VEH_HAS_NORMAL_RADIO(_)", WREN_AUDIO_SET_VEH_HAS_NORMAL_RADIO },
        { "IS_VEHICLE_RADIO_ON(_)", WREN_AUDIO_IS_VEHICLE_RADIO_ON },
        { "SET_VEH_FORCED_RADIO_THIS_FRAME(_)", WREN_AUDIO_SET_VEH_FORCED_RADIO_THIS_FRAME },
        { "SET_EMITTER_RADIO_STATION(_,_)", WREN_AUDIO_SET_EMITTER_RADIO_STATION },
        { "SET_STATIC_EMITTER_ENABLED(_,_)", WREN_AUDIO_SET_STATIC_EMITTER_ENABLED },
        { "LINK_STATIC_EMITTER_TO_ENTITY(_,_)", WREN_AUDIO_LINK_STATIC_EMITTER_TO_ENTITY },
        { "SET_RADIO_TO_STATION_INDEX(_)", WREN_AUDIO_SET_RADIO_TO_STATION_INDEX },
        { "SET_FRONTEND_RADIO_ACTIVE(_)", WREN_AUDIO_SET_FRONTEND_RADIO_ACTIVE },
        { "UNLOCK_MISSION_NEWS_STORY(_)", WREN_AUDIO_UNLOCK_MISSION_NEWS_STORY },
        { "IS_MISSION_NEWS_STORY_UNLOCKED(_)", WREN_AUDIO_IS_MISSION_NEWS_STORY_UNLOCKED },
        { "GET_AUDIBLE_MUSIC_TRACK_TEXT_ID()", WREN_AUDIO_GET_AUDIBLE_MUSIC_TRACK_TEXT_ID },
        { "PLAY_END_CREDITS_MUSIC(_)", WREN_AUDIO_PLAY_END_CREDITS_MUSIC },
        { "SKIP_RADIO_FORWARD()", WREN_AUDIO_SKIP_RADIO_FORWARD },
        { "FREEZE_RADIO_STATION(_)", WREN_AUDIO_FREEZE_RADIO_STATION },
        { "UNFREEZE_RADIO_STATION(_)", WREN_AUDIO_UNFREEZE_RADIO_STATION },
        { "SET_RADIO_AUTO_UNFREEZE(_)", WREN_AUDIO_SET_RADIO_AUTO_UNFREEZE },
        { "SET_INITIAL_PLAYER_STATION(_)", WREN_AUDIO_SET_INITIAL_PLAYER_STATION },
        { "SET_USER_RADIO_CONTROL_ENABLED(_)", WREN_AUDIO_SET_USER_RADIO_CONTROL_ENABLED },
        { "SET_RADIO_TRACK(_,_)", WREN_AUDIO_SET_RADIO_TRACK },
        { "SET_RADIO_TRACK_WITH_START_OFFSET(_,_,_)", WREN_AUDIO_SET_RADIO_TRACK_WITH_START_OFFSET },
        { "SET_NEXT_RADIO_TRACK(_,_,_,_)", WREN_AUDIO_SET_NEXT_RADIO_TRACK },
        { "SET_VEHICLE_RADIO_LOUD(_,_)", WREN_AUDIO_SET_VEHICLE_RADIO_LOUD },
        { "CAN_VEHICLE_RECEIVE_CB_RADIO(_)", WREN_AUDIO_CAN_VEHICLE_RECEIVE_CB_RADIO },
        { "SET_MOBILE_RADIO_ENABLED_DURING_GAMEPLAY(_)", WREN_AUDIO_SET_MOBILE_RADIO_ENABLED_DURING_GAMEPLAY },
        { "DOES_PLAYER_VEH_HAVE_RADIO()", WREN_AUDIO_DOES_PLAYER_VEH_HAVE_RADIO },
        { "IS_PLAYER_VEH_RADIO_ENABLE()", WREN_AUDIO_IS_PLAYER_VEH_RADIO_ENABLE },
        { "SET_VEHICLE_RADIO_ENABLED(_,_)", WREN_AUDIO_SET_VEHICLE_RADIO_ENABLED },
        { "SET_POSITIONED_PLAYER_VEHICLE_RADIO_EMITTER_ENABLED(_)", WREN_AUDIO_SET_POSITIONED_PLAYER_VEHICLE_RADIO_EMITTER_ENABLED },
        { "SET_CUSTOM_RADIO_TRACK_LIST(_,_,_)", WREN_AUDIO_SET_CUSTOM_RADIO_TRACK_LIST },
        { "CLEAR_CUSTOM_RADIO_TRACK_LIST(_)", WREN_AUDIO_CLEAR_CUSTOM_RADIO_TRACK_LIST },
        { "GET_NUM_UNLOCKED_RADIO_STATIONS()", WREN_AUDIO_GET_NUM_UNLOCKED_RADIO_STATIONS },
        { "FIND_RADIO_STATION_INDEX(_)", WREN_AUDIO_FIND_RADIO_STATION_INDEX },
        { "SET_RADIO_STATION_MUSIC_ONLY(_,_)", WREN_AUDIO_SET_RADIO_STATION_MUSIC_ONLY },
        { "SET_RADIO_FRONTEND_FADE_TIME(_)", WREN_AUDIO_SET_RADIO_FRONTEND_FADE_TIME },
        { "UNLOCK_RADIO_STATION_TRACK_LIST(_,_)", WREN_AUDIO_UNLOCK_RADIO_STATION_TRACK_LIST },
        { "LOCK_RADIO_STATION_TRACK_LIST(_,_)", WREN_AUDIO_LOCK_RADIO_STATION_TRACK_LIST },
        { "UPDATE_UNLOCKABLE_DJ_RADIO_TRACKS(_)", WREN_AUDIO_UPDATE_UNLOCKABLE_DJ_RADIO_TRACKS },
        { "LOCK_RADIO_STATION(_,_)", WREN_AUDIO_LOCK_RADIO_STATION },
        { "SET_RADIO_STATION_AS_FAVOURITE(_,_)", WREN_AUDIO_SET_RADIO_STATION_AS_FAVOURITE },
        { "IS_RADIO_STATION_FAVOURITED(_)", WREN_AUDIO_IS_RADIO_STATION_FAVOURITED },
        { "GET_NEXT_AUDIBLE_BEAT()", WREN_AUDIO_GET_NEXT_AUDIBLE_BEAT },
        { "FORCE_MUSIC_TRACK_LIST(_,_,_)", WREN_AUDIO_FORCE_MUSIC_TRACK_LIST },
        { "GET_CURRENT_TRACK_PLAY_TIME(_)", WREN_AUDIO_GET_CURRENT_TRACK_PLAY_TIME },
        { "GET_CURRENT_TRACK_SOUND_NAME(_)", WREN_AUDIO_GET_CURRENT_TRACK_SOUND_NAME },
        { "SET_VEHICLE_MISSILE_WARNING_ENABLED(_,_)", WREN_AUDIO_SET_VEHICLE_MISSILE_WARNING_ENABLED },
        { "SET_AMBIENT_ZONE_STATE(_,_,_)", WREN_AUDIO_SET_AMBIENT_ZONE_STATE },
        { "CLEAR_AMBIENT_ZONE_STATE(_,_)", WREN_AUDIO_CLEAR_AMBIENT_ZONE_STATE },
        { "SET_AMBIENT_ZONE_LIST_STATE(_,_)", WREN_AUDIO_SET_AMBIENT_ZONE_LIST_STATE },
        { "CLEAR_AMBIENT_ZONE_LIST_STATE(_)", WREN_AUDIO_CLEAR_AMBIENT_ZONE_LIST_STATE },
        { "SET_AMBIENT_ZONE_STATE_PERSISTENT(_,_,_)", WREN_AUDIO_SET_AMBIENT_ZONE_STATE_PERSISTENT },
        { "SET_AMBIENT_ZONE_LIST_STATE_PERSISTENT(_,_,_)", WREN_AUDIO_SET_AMBIENT_ZONE_LIST_STATE_PERSISTENT },
        { "IS_AMBIENT_ZONE_ENABLED(_)", WREN_AUDIO_IS_AMBIENT_ZONE_ENABLED },
        { "REFRESH_CLOSEST_OCEAN_SHORELINE()", WREN_AUDIO_REFRESH_CLOSEST_OCEAN_SHORELINE },
        { "SET_CUTSCENE_AUDIO_OVERRIDE(_)", WREN_AUDIO_SET_CUTSCENE_AUDIO_OVERRIDE },
        { "SET_VARIABLE_ON_SYNCH_SCENE_AUDIO(_,_)", WREN_AUDIO_SET_VARIABLE_ON_SYNCH_SCENE_AUDIO },
        { "PLAY_POLICE_REPORT(_,_)", WREN_AUDIO_PLAY_POLICE_REPORT },
        { "CANCEL_ALL_POLICE_REPORTS()", WREN_AUDIO_CANCEL_ALL_POLICE_REPORTS },
        { "BLIP_SIREN(_)", WREN_AUDIO_BLIP_SIREN },
        { "OVERRIDE_VEH_HORN(_,_,_)", WREN_AUDIO_OVERRIDE_VEH_HORN },
        { "IS_HORN_ACTIVE(_)", WREN_AUDIO_IS_HORN_ACTIVE },
        { "SET_AGGRESSIVE_HORNS(_)", WREN_AUDIO_SET_AGGRESSIVE_HORNS },
        { "SET_RADIO_POSITION_AUDIO_MUTE(_)", WREN_AUDIO_SET_RADIO_POSITION_AUDIO_MUTE },
        { "SET_VEHICLE_CONVERSATIONS_PERSIST(_,_)", WREN_AUDIO_SET_VEHICLE_CONVERSATIONS_PERSIST },
        { "SET_VEHICLE_CONVERSATIONS_PERSIST_NEW(_,_,_)", WREN_AUDIO_SET_VEHICLE_CONVERSATIONS_PERSIST_NEW },
        { "IS_STREAM_PLAYING()", WREN_AUDIO_IS_STREAM_PLAYING },
        { "GET_STREAM_PLAY_TIME()", WREN_AUDIO_GET_STREAM_PLAY_TIME },
        { "LOAD_STREAM(_,_)", WREN_AUDIO_LOAD_STREAM },
        { "LOAD_STREAM_WITH_START_OFFSET(_,_,_)", WREN_AUDIO_LOAD_STREAM_WITH_START_OFFSET },
        { "PLAY_STREAM_FROM_PED(_)", WREN_AUDIO_PLAY_STREAM_FROM_PED },
        { "PLAY_STREAM_FROM_VEHICLE(_)", WREN_AUDIO_PLAY_STREAM_FROM_VEHICLE },
        { "PLAY_STREAM_FROM_OBJECT(_)", WREN_AUDIO_PLAY_STREAM_FROM_OBJECT },
        { "PLAY_STREAM_FRONTEND()", WREN_AUDIO_PLAY_STREAM_FRONTEND },
        { "PLAY_STREAM_FROM_POSITION(_,_,_)", WREN_AUDIO_PLAY_STREAM_FROM_POSITION },
        { "STOP_STREAM()", WREN_AUDIO_STOP_STREAM },
        { "STOP_PED_SPEAKING(_,_)", WREN_AUDIO_STOP_PED_SPEAKING },
        { "BLOCK_ALL_SPEECH_FROM_PED(_,_,_)", WREN_AUDIO_BLOCK_ALL_SPEECH_FROM_PED },
        { "STOP_PED_SPEAKING_SYNCED(_,_)", WREN_AUDIO_STOP_PED_SPEAKING_SYNCED },
        { "DISABLE_PED_PAIN_AUDIO(_,_)", WREN_AUDIO_DISABLE_PED_PAIN_AUDIO },
        { "IS_AMBIENT_SPEECH_DISABLED(_)", WREN_AUDIO_IS_AMBIENT_SPEECH_DISABLED },
        { "BLOCK_SPEECH_CONTEXT_GROUP(_,_)", WREN_AUDIO_BLOCK_SPEECH_CONTEXT_GROUP },
        { "UNBLOCK_SPEECH_CONTEXT_GROUP(_)", WREN_AUDIO_UNBLOCK_SPEECH_CONTEXT_GROUP },
        { "SET_SIREN_WITH_NO_DRIVER(_,_)", WREN_AUDIO_SET_SIREN_WITH_NO_DRIVER },
        { "SET_SIREN_BYPASS_MP_DRIVER_CHECK(_,_)", WREN_AUDIO_SET_SIREN_BYPASS_MP_DRIVER_CHECK },
        { "TRIGGER_SIREN_AUDIO(_)", WREN_AUDIO_TRIGGER_SIREN_AUDIO },
        { "SET_HORN_PERMANENTLY_ON(_)", WREN_AUDIO_SET_HORN_PERMANENTLY_ON },
        { "SET_HORN_ENABLED(_,_)", WREN_AUDIO_SET_HORN_ENABLED },
        { "SET_AUDIO_VEHICLE_PRIORITY(_,_)", WREN_AUDIO_SET_AUDIO_VEHICLE_PRIORITY },
        { "SET_HORN_PERMANENTLY_ON_TIME(_,_)", WREN_AUDIO_SET_HORN_PERMANENTLY_ON_TIME },
        { "USE_SIREN_AS_HORN(_,_)", WREN_AUDIO_USE_SIREN_AS_HORN },
        { "FORCE_USE_AUDIO_GAME_OBJECT(_,_)", WREN_AUDIO_FORCE_USE_AUDIO_GAME_OBJECT },
        { "PRELOAD_VEHICLE_AUDIO_BANK(_)", WREN_AUDIO_PRELOAD_VEHICLE_AUDIO_BANK },
        { "SET_VEHICLE_STARTUP_REV_SOUND(_,_,_)", WREN_AUDIO_SET_VEHICLE_STARTUP_REV_SOUND },
        { "RESET_VEHICLE_STARTUP_REV_SOUND(_)", WREN_AUDIO_RESET_VEHICLE_STARTUP_REV_SOUND },
        { "SET_VEHICLE_FORCE_REVERSE_WARNING(_,_)", WREN_AUDIO_SET_VEHICLE_FORCE_REVERSE_WARNING },
        { "IS_VEHICLE_AUDIBLY_DAMAGED(_)", WREN_AUDIO_IS_VEHICLE_AUDIBLY_DAMAGED },
        { "SET_VEHICLE_AUDIO_ENGINE_DAMAGE_FACTOR(_,_)", WREN_AUDIO_SET_VEHICLE_AUDIO_ENGINE_DAMAGE_FACTOR },
        { "SET_VEHICLE_AUDIO_BODY_DAMAGE_FACTOR(_,_)", WREN_AUDIO_SET_VEHICLE_AUDIO_BODY_DAMAGE_FACTOR },
        { "ENABLE_VEHICLE_FANBELT_DAMAGE(_,_)", WREN_AUDIO_ENABLE_VEHICLE_FANBELT_DAMAGE },
        { "ENABLE_VEHICLE_EXHAUST_POPS(_,_)", WREN_AUDIO_ENABLE_VEHICLE_EXHAUST_POPS },
        { "SET_VEHICLE_BOOST_ACTIVE(_,_)", WREN_AUDIO_SET_VEHICLE_BOOST_ACTIVE },
        { "SET_PLAYER_VEHICLE_ALARM_AUDIO_ACTIVE(_,_)", WREN_AUDIO_SET_PLAYER_VEHICLE_ALARM_AUDIO_ACTIVE },
        { "SET_SCRIPT_UPDATE_DOOR_AUDIO(_,_)", WREN_AUDIO_SET_SCRIPT_UPDATE_DOOR_AUDIO },
        { "PLAY_VEHICLE_DOOR_OPEN_SOUND(_,_)", WREN_AUDIO_PLAY_VEHICLE_DOOR_OPEN_SOUND },
        { "PLAY_VEHICLE_DOOR_CLOSE_SOUND(_,_)", WREN_AUDIO_PLAY_VEHICLE_DOOR_CLOSE_SOUND },
        { "ENABLE_STALL_WARNING_SOUNDS(_,_)", WREN_AUDIO_ENABLE_STALL_WARNING_SOUNDS },
        { "IS_GAME_IN_CONTROL_OF_MUSIC()", WREN_AUDIO_IS_GAME_IN_CONTROL_OF_MUSIC },
        { "SET_GPS_ACTIVE(_)", WREN_AUDIO_SET_GPS_ACTIVE },
        { "PLAY_MISSION_COMPLETE_AUDIO(_)", WREN_AUDIO_PLAY_MISSION_COMPLETE_AUDIO },
        { "IS_MISSION_COMPLETE_PLAYING()", WREN_AUDIO_IS_MISSION_COMPLETE_PLAYING },
        { "IS_MISSION_COMPLETE_READY_FOR_UI()", WREN_AUDIO_IS_MISSION_COMPLETE_READY_FOR_UI },
        { "BLOCK_DEATH_JINGLE(_)", WREN_AUDIO_BLOCK_DEATH_JINGLE },
        { "START_AUDIO_SCENE(_)", WREN_AUDIO_START_AUDIO_SCENE },
        { "STOP_AUDIO_SCENE(_)", WREN_AUDIO_STOP_AUDIO_SCENE },
        { "STOP_AUDIO_SCENES()", WREN_AUDIO_STOP_AUDIO_SCENES },
        { "IS_AUDIO_SCENE_ACTIVE(_)", WREN_AUDIO_IS_AUDIO_SCENE_ACTIVE },
        { "SET_AUDIO_SCENE_VARIABLE(_,_,_)", WREN_AUDIO_SET_AUDIO_SCENE_VARIABLE },
        { "SET_AUDIO_SCRIPT_CLEANUP_TIME(_)", WREN_AUDIO_SET_AUDIO_SCRIPT_CLEANUP_TIME },
        { "ADD_ENTITY_TO_AUDIO_MIX_GROUP(_,_,_)", WREN_AUDIO_ADD_ENTITY_TO_AUDIO_MIX_GROUP },
        { "REMOVE_ENTITY_FROM_AUDIO_MIX_GROUP(_,_)", WREN_AUDIO_REMOVE_ENTITY_FROM_AUDIO_MIX_GROUP },
        { "AUDIO_IS_MUSIC_PLAYING()", WREN_AUDIO_AUDIO_IS_MUSIC_PLAYING },
        { "AUDIO_IS_SCRIPTED_MUSIC_PLAYING()", WREN_AUDIO_AUDIO_IS_SCRIPTED_MUSIC_PLAYING },
        { "PREPARE_MUSIC_EVENT(_)", WREN_AUDIO_PREPARE_MUSIC_EVENT },
        { "CANCEL_MUSIC_EVENT(_)", WREN_AUDIO_CANCEL_MUSIC_EVENT },
        { "TRIGGER_MUSIC_EVENT(_)", WREN_AUDIO_TRIGGER_MUSIC_EVENT },
        { "IS_MUSIC_ONESHOT_PLAYING()", WREN_AUDIO_IS_MUSIC_ONESHOT_PLAYING },
        { "GET_MUSIC_PLAYTIME()", WREN_AUDIO_GET_MUSIC_PLAYTIME },
        { "SET_GLOBAL_RADIO_SIGNAL_LEVEL(_)", WREN_AUDIO_SET_GLOBAL_RADIO_SIGNAL_LEVEL },
        { "RECORD_BROKEN_GLASS(_,_,_,_)", WREN_AUDIO_RECORD_BROKEN_GLASS },
        { "CLEAR_ALL_BROKEN_GLASS()", WREN_AUDIO_CLEAR_ALL_BROKEN_GLASS },
        { "SCRIPT_OVERRIDES_WIND_ELEVATION(_,_)", WREN_AUDIO_SCRIPT_OVERRIDES_WIND_ELEVATION },
        { "SET_PED_WALLA_DENSITY(_,_)", WREN_AUDIO_SET_PED_WALLA_DENSITY },
        { "SET_PED_INTERIOR_WALLA_DENSITY(_,_)", WREN_AUDIO_SET_PED_INTERIOR_WALLA_DENSITY },
        { "FORCE_PED_PANIC_WALLA()", WREN_AUDIO_FORCE_PED_PANIC_WALLA },
        { "PREPARE_ALARM(_)", WREN_AUDIO_PREPARE_ALARM },
        { "START_ALARM(_,_)", WREN_AUDIO_START_ALARM },
        { "STOP_ALARM(_,_)", WREN_AUDIO_STOP_ALARM },
        { "STOP_ALL_ALARMS(_)", WREN_AUDIO_STOP_ALL_ALARMS },
        { "IS_ALARM_PLAYING(_)", WREN_AUDIO_IS_ALARM_PLAYING },
        { "GET_VEHICLE_DEFAULT_HORN(_)", WREN_AUDIO_GET_VEHICLE_DEFAULT_HORN },
        { "GET_VEHICLE_DEFAULT_HORN_IGNORE_MODS(_)", WREN_AUDIO_GET_VEHICLE_DEFAULT_HORN_IGNORE_MODS },
        { "RESET_PED_AUDIO_FLAGS(_)", WREN_AUDIO_RESET_PED_AUDIO_FLAGS },
        { "SET_PED_FOOTSTEPS_EVENTS_ENABLED(_,_)", WREN_AUDIO_SET_PED_FOOTSTEPS_EVENTS_ENABLED },
        { "SET_PED_CLOTH_EVENTS_ENABLED(_,_)", WREN_AUDIO_SET_PED_CLOTH_EVENTS_ENABLED },
        { "OVERRIDE_PLAYER_GROUND_MATERIAL(_,_)", WREN_AUDIO_OVERRIDE_PLAYER_GROUND_MATERIAL },
        { "USE_FOOTSTEP_SCRIPT_SWEETENERS(_,_,_)", WREN_AUDIO_USE_FOOTSTEP_SCRIPT_SWEETENERS },
        { "OVERRIDE_MICROPHONE_SETTINGS(_,_)", WREN_AUDIO_OVERRIDE_MICROPHONE_SETTINGS },
        { "FREEZE_MICROPHONE()", WREN_AUDIO_FREEZE_MICROPHONE },
        { "DISTANT_COP_CAR_SIRENS(_)", WREN_AUDIO_DISTANT_COP_CAR_SIRENS },
        { "SET_SIREN_CAN_BE_CONTROLLED_BY_AUDIO(_,_)", WREN_AUDIO_SET_SIREN_CAN_BE_CONTROLLED_BY_AUDIO },
        { "ENABLE_STUNT_JUMP_AUDIO()", WREN_AUDIO_ENABLE_STUNT_JUMP_AUDIO },
        { "SET_AUDIO_FLAG(_,_)", WREN_AUDIO_SET_AUDIO_FLAG },
        { "PREPARE_SYNCHRONIZED_AUDIO_EVENT(_,_)", WREN_AUDIO_PREPARE_SYNCHRONIZED_AUDIO_EVENT },
        { "PREPARE_SYNCHRONIZED_AUDIO_EVENT_FOR_SCENE(_)", WREN_AUDIO_PREPARE_SYNCHRONIZED_AUDIO_EVENT_FOR_SCENE },
        { "PLAY_SYNCHRONIZED_AUDIO_EVENT(_)", WREN_AUDIO_PLAY_SYNCHRONIZED_AUDIO_EVENT },
        { "STOP_SYNCHRONIZED_AUDIO_EVENT(_)", WREN_AUDIO_STOP_SYNCHRONIZED_AUDIO_EVENT },
        { "INIT_SYNCH_SCENE_AUDIO_WITH_POSITION(_,_,_)", WREN_AUDIO_INIT_SYNCH_SCENE_AUDIO_WITH_POSITION },
        { "INIT_SYNCH_SCENE_AUDIO_WITH_ENTITY(_,_)", WREN_AUDIO_INIT_SYNCH_SCENE_AUDIO_WITH_ENTITY },
        { "SET_AUDIO_SPECIAL_EFFECT_MODE(_)", WREN_AUDIO_SET_AUDIO_SPECIAL_EFFECT_MODE },
        { "SET_PORTAL_SETTINGS_OVERRIDE(_,_)", WREN_AUDIO_SET_PORTAL_SETTINGS_OVERRIDE },
        { "REMOVE_PORTAL_SETTINGS_OVERRIDE(_)", WREN_AUDIO_REMOVE_PORTAL_SETTINGS_OVERRIDE },
        { "STOP_SMOKE_GRENADE_EXPLOSION_SOUNDS()", WREN_AUDIO_STOP_SMOKE_GRENADE_EXPLOSION_SOUNDS },
        { "GET_MUSIC_VOL_SLIDER()", WREN_AUDIO_GET_MUSIC_VOL_SLIDER },
        { "REQUEST_TENNIS_BANKS(_)", WREN_AUDIO_REQUEST_TENNIS_BANKS },
        { "UNREQUEST_TENNIS_BANKS()", WREN_AUDIO_UNREQUEST_TENNIS_BANKS },
        { "SET_SKIP_MINIGUN_SPIN_UP_AUDIO(_)", WREN_AUDIO_SET_SKIP_MINIGUN_SPIN_UP_AUDIO },
        { "STOP_CUTSCENE_AUDIO()", WREN_AUDIO_STOP_CUTSCENE_AUDIO },
        { "HAS_LOADED_MP_DATA_SET()", WREN_AUDIO_HAS_LOADED_MP_DATA_SET },
        { "HAS_LOADED_SP_DATA_SET()", WREN_AUDIO_HAS_LOADED_SP_DATA_SET },
        { "GET_VEHICLE_HORN_SOUND_INDEX(_)", WREN_AUDIO_GET_VEHICLE_HORN_SOUND_INDEX },
        { "SET_VEHICLE_HORN_SOUND_INDEX(_,_)", WREN_AUDIO_SET_VEHICLE_HORN_SOUND_INDEX },
        { "ADD_SCRIPT_TO_RANDOM_PED(_,_,_,_)", WREN_BRAIN_ADD_SCRIPT_TO_RANDOM_PED },
        { "REGISTER_OBJECT_SCRIPT_BRAIN(_,_,_,_,_,_)", WREN_BRAIN_REGISTER_OBJECT_SCRIPT_BRAIN },
        { "IS_OBJECT_WITHIN_BRAIN_ACTIVATION_RANGE(_)", WREN_BRAIN_IS_OBJECT_WITHIN_BRAIN_ACTIVATION_RANGE },
        { "REGISTER_WORLD_POINT_SCRIPT_BRAIN(_,_,_)", WREN_BRAIN_REGISTER_WORLD_POINT_SCRIPT_BRAIN },
        { "IS_WORLD_POINT_WITHIN_BRAIN_ACTIVATION_RANGE()", WREN_BRAIN_IS_WORLD_POINT_WITHIN_BRAIN_ACTIVATION_RANGE },
        { "ENABLE_SCRIPT_BRAIN_SET(_)", WREN_BRAIN_ENABLE_SCRIPT_BRAIN_SET },
        { "DISABLE_SCRIPT_BRAIN_SET(_)", WREN_BRAIN_DISABLE_SCRIPT_BRAIN_SET },
        { "REACTIVATE_ALL_WORLD_BRAINS_THAT_ARE_WAITING_TILL_OUT_OF_RANGE()", WREN_BRAIN_REACTIVATE_ALL_WORLD_BRAINS_THAT_ARE_WAITING_TILL_OUT_OF_RANGE },
        { "REACTIVATE_ALL_OBJECT_BRAINS_THAT_ARE_WAITING_TILL_OUT_OF_RANGE()", WREN_BRAIN_REACTIVATE_ALL_OBJECT_BRAINS_THAT_ARE_WAITING_TILL_OUT_OF_RANGE },
        { "REACTIVATE_NAMED_WORLD_BRAINS_WAITING_TILL_OUT_OF_RANGE(_)", WREN_BRAIN_REACTIVATE_NAMED_WORLD_BRAINS_WAITING_TILL_OUT_OF_RANGE },
        { "REACTIVATE_NAMED_OBJECT_BRAINS_WAITING_TILL_OUT_OF_RANGE(_)", WREN_BRAIN_REACTIVATE_NAMED_OBJECT_BRAINS_WAITING_TILL_OUT_OF_RANGE },
        { "RENDER_SCRIPT_CAMS(_,_,_,_,_,_)", WREN_CAM_RENDER_SCRIPT_CAMS },
        { "STOP_RENDERING_SCRIPT_CAMS_USING_CATCH_UP(_,_,_,_)", WREN_CAM_STOP_RENDERING_SCRIPT_CAMS_USING_CATCH_UP },
        { "CREATE_CAM(_,_)", WREN_CAM_CREATE_CAM },
        { "CREATE_CAM_WITH_PARAMS(_,_,_,_,_,_,_,_,_,_)", WREN_CAM_CREATE_CAM_WITH_PARAMS },
        { "CREATE_CAMERA(_,_)", WREN_CAM_CREATE_CAMERA },
        { "CREATE_CAMERA_WITH_PARAMS(_,_,_,_,_,_,_,_,_,_)", WREN_CAM_CREATE_CAMERA_WITH_PARAMS },
        { "DESTROY_CAM(_,_)", WREN_CAM_DESTROY_CAM },
        { "DESTROY_ALL_CAMS(_)", WREN_CAM_DESTROY_ALL_CAMS },
        { "DOES_CAM_EXIST(_)", WREN_CAM_DOES_CAM_EXIST },
        { "SET_CAM_ACTIVE(_,_)", WREN_CAM_SET_CAM_ACTIVE },
        { "IS_CAM_ACTIVE(_)", WREN_CAM_IS_CAM_ACTIVE },
        { "IS_CAM_RENDERING(_)", WREN_CAM_IS_CAM_RENDERING },
        { "GET_RENDERING_CAM()", WREN_CAM_GET_RENDERING_CAM },
        { "GET_CAM_COORD(_)", WREN_CAM_GET_CAM_COORD },
        { "GET_CAM_ROT(_,_)", WREN_CAM_GET_CAM_ROT },
        { "GET_CAM_FOV(_)", WREN_CAM_GET_CAM_FOV },
        { "GET_CAM_NEAR_CLIP(_)", WREN_CAM_GET_CAM_NEAR_CLIP },
        { "GET_CAM_FAR_CLIP(_)", WREN_CAM_GET_CAM_FAR_CLIP },
        { "GET_CAM_NEAR_DOF(_)", WREN_CAM_GET_CAM_NEAR_DOF },
        { "GET_CAM_FAR_DOF(_)", WREN_CAM_GET_CAM_FAR_DOF },
        { "GET_CAM_DOF_STRENGTH(_)", WREN_CAM_GET_CAM_DOF_STRENGTH },
        { "SET_CAM_PARAMS(_,_,_,_,_,_,_,_,_,_,_,_)", WREN_CAM_SET_CAM_PARAMS },
        { "SET_CAM_COORD(_,_,_,_)", WREN_CAM_SET_CAM_COORD },
        { "SET_CAM_ROT(_,_,_,_,_)", WREN_CAM_SET_CAM_ROT },
        { "SET_CAM_FOV(_,_)", WREN_CAM_SET_CAM_FOV },
        { "SET_CAM_NEAR_CLIP(_,_)", WREN_CAM_SET_CAM_NEAR_CLIP },
        { "SET_CAM_FAR_CLIP(_,_)", WREN_CAM_SET_CAM_FAR_CLIP },
        { "FORCE_CAM_FAR_CLIP(_,_)", WREN_CAM_FORCE_CAM_FAR_CLIP },
        { "SET_CAM_MOTION_BLUR_STRENGTH(_,_)", WREN_CAM_SET_CAM_MOTION_BLUR_STRENGTH },
        { "SET_CAM_NEAR_DOF(_,_)", WREN_CAM_SET_CAM_NEAR_DOF },
        { "SET_CAM_FAR_DOF(_,_)", WREN_CAM_SET_CAM_FAR_DOF },
        { "SET_CAM_DOF_STRENGTH(_,_)", WREN_CAM_SET_CAM_DOF_STRENGTH },
        { "SET_CAM_DOF_PLANES(_,_,_,_,_)", WREN_CAM_SET_CAM_DOF_PLANES },
        { "SET_CAM_USE_SHALLOW_DOF_MODE(_,_)", WREN_CAM_SET_CAM_USE_SHALLOW_DOF_MODE },
        { "SET_USE_HI_DOF()", WREN_CAM_SET_USE_HI_DOF },
        { "SET_USE_HI_DOF_ON_SYNCED_SCENE_THIS_UPDATE()", WREN_CAM_SET_USE_HI_DOF_ON_SYNCED_SCENE_THIS_UPDATE },
        { "SET_CAM_DOF_OVERRIDDEN_FOCUS_DISTANCE(_,_)", WREN_CAM_SET_CAM_DOF_OVERRIDDEN_FOCUS_DISTANCE },
        { "SET_CAM_DOF_OVERRIDDEN_FOCUS_DISTANCE_BLEND_LEVEL(_,_)", WREN_CAM_SET_CAM_DOF_OVERRIDDEN_FOCUS_DISTANCE_BLEND_LEVEL },
        { "SET_CAM_DOF_FNUMBER_OF_LENS(_,_)", WREN_CAM_SET_CAM_DOF_FNUMBER_OF_LENS },
        { "SET_CAM_DOF_FOCAL_LENGTH_MULTIPLIER(_,_)", WREN_CAM_SET_CAM_DOF_FOCAL_LENGTH_MULTIPLIER },
        { "SET_CAM_DOF_FOCUS_DISTANCE_BIAS(_,_)", WREN_CAM_SET_CAM_DOF_FOCUS_DISTANCE_BIAS },
        { "SET_CAM_DOF_MAX_NEAR_IN_FOCUS_DISTANCE(_,_)", WREN_CAM_SET_CAM_DOF_MAX_NEAR_IN_FOCUS_DISTANCE },
        { "SET_CAM_DOF_MAX_NEAR_IN_FOCUS_DISTANCE_BLEND_LEVEL(_,_)", WREN_CAM_SET_CAM_DOF_MAX_NEAR_IN_FOCUS_DISTANCE_BLEND_LEVEL },
        { "ATTACH_CAM_TO_ENTITY(_,_,_,_,_,_)", WREN_CAM_ATTACH_CAM_TO_ENTITY },
        { "ATTACH_CAM_TO_PED_BONE(_,_,_,_,_,_,_)", WREN_CAM_ATTACH_CAM_TO_PED_BONE },
        { "HARD_ATTACH_CAM_TO_PED_BONE(_,_,_,_,_,_,_,_,_,_)", WREN_CAM_HARD_ATTACH_CAM_TO_PED_BONE },
        { "HARD_ATTACH_CAM_TO_ENTITY(_,_,_,_,_,_,_,_,_)", WREN_CAM_HARD_ATTACH_CAM_TO_ENTITY },
        { "ATTACH_CAM_TO_VEHICLE_BONE(_,_,_,_,_,_,_,_,_,_,_)", WREN_CAM_ATTACH_CAM_TO_VEHICLE_BONE },
        { "DETACH_CAM(_)", WREN_CAM_DETACH_CAM },
        { "SET_CAM_INHERIT_ROLL_VEHICLE(_,_)", WREN_CAM_SET_CAM_INHERIT_ROLL_VEHICLE },
        { "POINT_CAM_AT_COORD(_,_,_,_)", WREN_CAM_POINT_CAM_AT_COORD },
        { "POINT_CAM_AT_ENTITY(_,_,_,_,_,_)", WREN_CAM_POINT_CAM_AT_ENTITY },
        { "POINT_CAM_AT_PED_BONE(_,_,_,_,_,_,_)", WREN_CAM_POINT_CAM_AT_PED_BONE },
        { "STOP_CAM_POINTING(_)", WREN_CAM_STOP_CAM_POINTING },
        { "SET_CAM_AFFECTS_AIMING(_,_)", WREN_CAM_SET_CAM_AFFECTS_AIMING },
        { "SET_CAM_CONTROLS_MINI_MAP_HEADING(_,_)", WREN_CAM_SET_CAM_CONTROLS_MINI_MAP_HEADING },
        { "SET_CAM_IS_INSIDE_VEHICLE(_,_)", WREN_CAM_SET_CAM_IS_INSIDE_VEHICLE },
        { "ALLOW_MOTION_BLUR_DECAY(_,_)", WREN_CAM_ALLOW_MOTION_BLUR_DECAY },
        { "SET_CAM_DEBUG_NAME(_,_)", WREN_CAM_SET_CAM_DEBUG_NAME },
        { "GET_DEBUG_CAM()", WREN_CAM_GET_DEBUG_CAM },
        { "ADD_CAM_SPLINE_NODE(_,_,_,_,_,_,_,_,_,_)", WREN_CAM_ADD_CAM_SPLINE_NODE },
        { "ADD_CAM_SPLINE_NODE_USING_CAMERA_FRAME(_,_,_,_)", WREN_CAM_ADD_CAM_SPLINE_NODE_USING_CAMERA_FRAME },
        { "ADD_CAM_SPLINE_NODE_USING_CAMERA(_,_,_,_)", WREN_CAM_ADD_CAM_SPLINE_NODE_USING_CAMERA },
        { "ADD_CAM_SPLINE_NODE_USING_GAMEPLAY_FRAME(_,_,_)", WREN_CAM_ADD_CAM_SPLINE_NODE_USING_GAMEPLAY_FRAME },
        { "SET_CAM_SPLINE_PHASE(_,_)", WREN_CAM_SET_CAM_SPLINE_PHASE },
        { "GET_CAM_SPLINE_PHASE(_)", WREN_CAM_GET_CAM_SPLINE_PHASE },
        { "GET_CAM_SPLINE_NODE_PHASE(_)", WREN_CAM_GET_CAM_SPLINE_NODE_PHASE },
        { "SET_CAM_SPLINE_DURATION(_,_)", WREN_CAM_SET_CAM_SPLINE_DURATION },
        { "SET_CAM_SPLINE_SMOOTHING_STYLE(_,_)", WREN_CAM_SET_CAM_SPLINE_SMOOTHING_STYLE },
        { "GET_CAM_SPLINE_NODE_INDEX(_)", WREN_CAM_GET_CAM_SPLINE_NODE_INDEX },
        { "SET_CAM_SPLINE_NODE_EASE(_,_,_,_)", WREN_CAM_SET_CAM_SPLINE_NODE_EASE },
        { "SET_CAM_SPLINE_NODE_VELOCITY_SCALE(_,_,_)", WREN_CAM_SET_CAM_SPLINE_NODE_VELOCITY_SCALE },
        { "OVERRIDE_CAM_SPLINE_VELOCITY(_,_,_,_)", WREN_CAM_OVERRIDE_CAM_SPLINE_VELOCITY },
        { "OVERRIDE_CAM_SPLINE_MOTION_BLUR(_,_,_,_)", WREN_CAM_OVERRIDE_CAM_SPLINE_MOTION_BLUR },
        { "SET_CAM_SPLINE_NODE_EXTRA_FLAGS(_,_,_)", WREN_CAM_SET_CAM_SPLINE_NODE_EXTRA_FLAGS },
        { "IS_CAM_SPLINE_PAUSED(_)", WREN_CAM_IS_CAM_SPLINE_PAUSED },
        { "SET_CAM_ACTIVE_WITH_INTERP(_,_,_,_,_)", WREN_CAM_SET_CAM_ACTIVE_WITH_INTERP },
        { "IS_CAM_INTERPOLATING(_)", WREN_CAM_IS_CAM_INTERPOLATING },
        { "SHAKE_CAM(_,_,_)", WREN_CAM_SHAKE_CAM },
        { "ANIMATED_SHAKE_CAM(_,_,_,_,_)", WREN_CAM_ANIMATED_SHAKE_CAM },
        { "IS_CAM_SHAKING(_)", WREN_CAM_IS_CAM_SHAKING },
        { "SET_CAM_SHAKE_AMPLITUDE(_,_)", WREN_CAM_SET_CAM_SHAKE_AMPLITUDE },
        { "STOP_CAM_SHAKING(_,_)", WREN_CAM_STOP_CAM_SHAKING },
        { "SHAKE_SCRIPT_GLOBAL(_,_)", WREN_CAM_SHAKE_SCRIPT_GLOBAL },
        { "ANIMATED_SHAKE_SCRIPT_GLOBAL(_,_,_,_)", WREN_CAM_ANIMATED_SHAKE_SCRIPT_GLOBAL },
        { "IS_SCRIPT_GLOBAL_SHAKING()", WREN_CAM_IS_SCRIPT_GLOBAL_SHAKING },
        { "STOP_SCRIPT_GLOBAL_SHAKING(_)", WREN_CAM_STOP_SCRIPT_GLOBAL_SHAKING },
        { "TRIGGER_VEHICLE_PART_BROKEN_CAMERA_SHAKE(_,_,_)", WREN_CAM_TRIGGER_VEHICLE_PART_BROKEN_CAMERA_SHAKE },
        { "PLAY_CAM_ANIM(_,_,_,_,_,_,_,_,_,_,_)", WREN_CAM_PLAY_CAM_ANIM },
        { "IS_CAM_PLAYING_ANIM(_,_,_)", WREN_CAM_IS_CAM_PLAYING_ANIM },
        { "SET_CAM_ANIM_CURRENT_PHASE(_,_)", WREN_CAM_SET_CAM_ANIM_CURRENT_PHASE },
        { "GET_CAM_ANIM_CURRENT_PHASE(_)", WREN_CAM_GET_CAM_ANIM_CURRENT_PHASE },
        { "PLAY_SYNCHRONIZED_CAM_ANIM(_,_,_,_)", WREN_CAM_PLAY_SYNCHRONIZED_CAM_ANIM },
        { "SET_FLY_CAM_HORIZONTAL_RESPONSE(_,_,_,_)", WREN_CAM_SET_FLY_CAM_HORIZONTAL_RESPONSE },
        { "SET_FLY_CAM_VERTICAL_RESPONSE(_,_,_,_)", WREN_CAM_SET_FLY_CAM_VERTICAL_RESPONSE },
        { "SET_FLY_CAM_MAX_HEIGHT(_,_)", WREN_CAM_SET_FLY_CAM_MAX_HEIGHT },
        { "SET_FLY_CAM_COORD_AND_CONSTRAIN(_,_,_,_)", WREN_CAM_SET_FLY_CAM_COORD_AND_CONSTRAIN },
        { "SET_FLY_CAM_VERTICAL_CONTROLS_THIS_UPDATE(_)", WREN_CAM_SET_FLY_CAM_VERTICAL_CONTROLS_THIS_UPDATE },
        { "WAS_FLY_CAM_CONSTRAINED_ON_PREVIOUS_UDPATE(_)", WREN_CAM_WAS_FLY_CAM_CONSTRAINED_ON_PREVIOUS_UDPATE },
        { "IS_SCREEN_FADED_OUT()", WREN_CAM_IS_SCREEN_FADED_OUT },
        { "IS_SCREEN_FADED_IN()", WREN_CAM_IS_SCREEN_FADED_IN },
        { "IS_SCREEN_FADING_OUT()", WREN_CAM_IS_SCREEN_FADING_OUT },
        { "IS_SCREEN_FADING_IN()", WREN_CAM_IS_SCREEN_FADING_IN },
        { "DO_SCREEN_FADE_IN(_)", WREN_CAM_DO_SCREEN_FADE_IN },
        { "DO_SCREEN_FADE_OUT(_)", WREN_CAM_DO_SCREEN_FADE_OUT },
        { "SET_WIDESCREEN_BORDERS(_,_)", WREN_CAM_SET_WIDESCREEN_BORDERS },
        { "ARE_WIDESCREEN_BORDERS_ACTIVE()", WREN_CAM_ARE_WIDESCREEN_BORDERS_ACTIVE },
        { "GET_GAMEPLAY_CAM_COORD()", WREN_CAM_GET_GAMEPLAY_CAM_COORD },
        { "GET_GAMEPLAY_CAM_ROT(_)", WREN_CAM_GET_GAMEPLAY_CAM_ROT },
        { "GET_GAMEPLAY_CAM_FOV()", WREN_CAM_GET_GAMEPLAY_CAM_FOV },
        { "SET_GAMEPLAY_CAM_MOTION_BLUR_SCALING_THIS_UPDATE(_)", WREN_CAM_SET_GAMEPLAY_CAM_MOTION_BLUR_SCALING_THIS_UPDATE },
        { "SET_GAMEPLAY_CAM_MAX_MOTION_BLUR_STRENGTH_THIS_UPDATE(_)", WREN_CAM_SET_GAMEPLAY_CAM_MAX_MOTION_BLUR_STRENGTH_THIS_UPDATE },
        { "GET_GAMEPLAY_CAM_RELATIVE_HEADING()", WREN_CAM_GET_GAMEPLAY_CAM_RELATIVE_HEADING },
        { "SET_GAMEPLAY_CAM_RELATIVE_HEADING(_)", WREN_CAM_SET_GAMEPLAY_CAM_RELATIVE_HEADING },
        { "GET_GAMEPLAY_CAM_RELATIVE_PITCH()", WREN_CAM_GET_GAMEPLAY_CAM_RELATIVE_PITCH },
        { "SET_GAMEPLAY_CAM_RELATIVE_PITCH(_,_)", WREN_CAM_SET_GAMEPLAY_CAM_RELATIVE_PITCH },
        { "RESET_GAMEPLAY_CAM_FULL_ATTACH_PARENT_TRANSFORM_TIMER()", WREN_CAM_RESET_GAMEPLAY_CAM_FULL_ATTACH_PARENT_TRANSFORM_TIMER },
        { "FORCE_CAMERA_RELATIVE_HEADING_AND_PITCH(_,_,_)", WREN_CAM_FORCE_CAMERA_RELATIVE_HEADING_AND_PITCH },
        { "FORCE_BONNET_CAMERA_RELATIVE_HEADING_AND_PITCH(_,_)", WREN_CAM_FORCE_BONNET_CAMERA_RELATIVE_HEADING_AND_PITCH },
        { "SET_FIRST_PERSON_SHOOTER_CAMERA_HEADING(_)", WREN_CAM_SET_FIRST_PERSON_SHOOTER_CAMERA_HEADING },
        { "SET_FIRST_PERSON_SHOOTER_CAMERA_PITCH(_)", WREN_CAM_SET_FIRST_PERSON_SHOOTER_CAMERA_PITCH },
        { "SET_SCRIPTED_CAMERA_IS_FIRST_PERSON_THIS_FRAME(_)", WREN_CAM_SET_SCRIPTED_CAMERA_IS_FIRST_PERSON_THIS_FRAME },
        { "SHAKE_GAMEPLAY_CAM(_,_)", WREN_CAM_SHAKE_GAMEPLAY_CAM },
        { "IS_GAMEPLAY_CAM_SHAKING()", WREN_CAM_IS_GAMEPLAY_CAM_SHAKING },
        { "SET_GAMEPLAY_CAM_SHAKE_AMPLITUDE(_)", WREN_CAM_SET_GAMEPLAY_CAM_SHAKE_AMPLITUDE },
        { "STOP_GAMEPLAY_CAM_SHAKING(_)", WREN_CAM_STOP_GAMEPLAY_CAM_SHAKING },
        { "SET_GAMEPLAY_CAM_FOLLOW_PED_THIS_UPDATE(_)", WREN_CAM_SET_GAMEPLAY_CAM_FOLLOW_PED_THIS_UPDATE },
        { "IS_GAMEPLAY_CAM_RENDERING()", WREN_CAM_IS_GAMEPLAY_CAM_RENDERING },
        { "IS_INTERPOLATING_FROM_SCRIPT_CAMS()", WREN_CAM_IS_INTERPOLATING_FROM_SCRIPT_CAMS },
        { "IS_INTERPOLATING_TO_SCRIPT_CAMS()", WREN_CAM_IS_INTERPOLATING_TO_SCRIPT_CAMS },
        { "SET_GAMEPLAY_CAM_ALTITUDE_FOV_SCALING_STATE(_)", WREN_CAM_SET_GAMEPLAY_CAM_ALTITUDE_FOV_SCALING_STATE },
        { "DISABLE_GAMEPLAY_CAM_ALTITUDE_FOV_SCALING_THIS_UPDATE()", WREN_CAM_DISABLE_GAMEPLAY_CAM_ALTITUDE_FOV_SCALING_THIS_UPDATE },
        { "IS_GAMEPLAY_CAM_LOOKING_BEHIND()", WREN_CAM_IS_GAMEPLAY_CAM_LOOKING_BEHIND },
        { "SET_GAMEPLAY_CAM_IGNORE_ENTITY_COLLISION_THIS_UPDATE(_)", WREN_CAM_SET_GAMEPLAY_CAM_IGNORE_ENTITY_COLLISION_THIS_UPDATE },
        { "DISABLE_CAM_COLLISION_FOR_OBJECT(_)", WREN_CAM_DISABLE_CAM_COLLISION_FOR_OBJECT },
        { "BYPASS_CAMERA_COLLISION_BUOYANCY_TEST_THIS_UPDATE()", WREN_CAM_BYPASS_CAMERA_COLLISION_BUOYANCY_TEST_THIS_UPDATE },
        { "SET_GAMEPLAY_CAM_ENTITY_TO_LIMIT_FOCUS_OVER_BOUNDING_SPHERE_THIS_UPDATE(_)", WREN_CAM_SET_GAMEPLAY_CAM_ENTITY_TO_LIMIT_FOCUS_OVER_BOUNDING_SPHERE_THIS_UPDATE },
        { "DISABLE_FIRST_PERSON_CAMERA_WATER_CLIPPING_TEST_THIS_UPDATE()", WREN_CAM_DISABLE_FIRST_PERSON_CAMERA_WATER_CLIPPING_TEST_THIS_UPDATE },
        { "SET_FOLLOW_CAM_IGNORE_ATTACH_PARENT_MOVEMENT_THIS_UPDATE()", WREN_CAM_SET_FOLLOW_CAM_IGNORE_ATTACH_PARENT_MOVEMENT_THIS_UPDATE },
        { "IS_SPHERE_VISIBLE(_,_,_,_)", WREN_CAM_IS_SPHERE_VISIBLE },
        { "IS_FOLLOW_PED_CAM_ACTIVE()", WREN_CAM_IS_FOLLOW_PED_CAM_ACTIVE },
        { "SET_FOLLOW_PED_CAM_THIS_UPDATE(_,_)", WREN_CAM_SET_FOLLOW_PED_CAM_THIS_UPDATE },
        { "USE_SCRIPT_CAM_FOR_AMBIENT_POPULATION_ORIGIN_THIS_FRAME(_,_)", WREN_CAM_USE_SCRIPT_CAM_FOR_AMBIENT_POPULATION_ORIGIN_THIS_FRAME },
        { "SET_FOLLOW_PED_CAM_LADDER_ALIGN_THIS_UPDATE()", WREN_CAM_SET_FOLLOW_PED_CAM_LADDER_ALIGN_THIS_UPDATE },
        { "SET_THIRD_PERSON_CAM_RELATIVE_HEADING_LIMITS_THIS_UPDATE(_,_)", WREN_CAM_SET_THIRD_PERSON_CAM_RELATIVE_HEADING_LIMITS_THIS_UPDATE },
        { "SET_THIRD_PERSON_CAM_RELATIVE_PITCH_LIMITS_THIS_UPDATE(_,_)", WREN_CAM_SET_THIRD_PERSON_CAM_RELATIVE_PITCH_LIMITS_THIS_UPDATE },
        { "SET_THIRD_PERSON_CAM_ORBIT_DISTANCE_LIMITS_THIS_UPDATE(_,_)", WREN_CAM_SET_THIRD_PERSON_CAM_ORBIT_DISTANCE_LIMITS_THIS_UPDATE },
        { "SET_IN_VEHICLE_CAM_STATE_THIS_UPDATE(_,_)", WREN_CAM_SET_IN_VEHICLE_CAM_STATE_THIS_UPDATE },
        { "DISABLE_ON_FOOT_FIRST_PERSON_VIEW_THIS_UPDATE()", WREN_CAM_DISABLE_ON_FOOT_FIRST_PERSON_VIEW_THIS_UPDATE },
        { "DISABLE_FIRST_PERSON_FLASH_EFFECT_THIS_UPDATE()", WREN_CAM_DISABLE_FIRST_PERSON_FLASH_EFFECT_THIS_UPDATE },
        { "BLOCK_FIRST_PERSON_ORIENTATION_RESET_THIS_UPDATE()", WREN_CAM_BLOCK_FIRST_PERSON_ORIENTATION_RESET_THIS_UPDATE },
        { "GET_FOLLOW_PED_CAM_ZOOM_LEVEL()", WREN_CAM_GET_FOLLOW_PED_CAM_ZOOM_LEVEL },
        { "GET_FOLLOW_PED_CAM_VIEW_MODE()", WREN_CAM_GET_FOLLOW_PED_CAM_VIEW_MODE },
        { "SET_FOLLOW_PED_CAM_VIEW_MODE(_)", WREN_CAM_SET_FOLLOW_PED_CAM_VIEW_MODE },
        { "IS_FOLLOW_VEHICLE_CAM_ACTIVE()", WREN_CAM_IS_FOLLOW_VEHICLE_CAM_ACTIVE },
        { "SET_FOLLOW_VEHICLE_CAM_HIGH_ANGLE_MODE_THIS_UPDATE(_)", WREN_CAM_SET_FOLLOW_VEHICLE_CAM_HIGH_ANGLE_MODE_THIS_UPDATE },
        { "SET_FOLLOW_VEHICLE_CAM_HIGH_ANGLE_MODE_EVERY_UPDATE(_,_)", WREN_CAM_SET_FOLLOW_VEHICLE_CAM_HIGH_ANGLE_MODE_EVERY_UPDATE },
        { "SET_TABLE_GAMES_CAMERA_THIS_UPDATE(_)", WREN_CAM_SET_TABLE_GAMES_CAMERA_THIS_UPDATE },
        { "GET_FOLLOW_VEHICLE_CAM_ZOOM_LEVEL()", WREN_CAM_GET_FOLLOW_VEHICLE_CAM_ZOOM_LEVEL },
        { "SET_FOLLOW_VEHICLE_CAM_ZOOM_LEVEL(_)", WREN_CAM_SET_FOLLOW_VEHICLE_CAM_ZOOM_LEVEL },
        { "GET_FOLLOW_VEHICLE_CAM_VIEW_MODE()", WREN_CAM_GET_FOLLOW_VEHICLE_CAM_VIEW_MODE },
        { "SET_FOLLOW_VEHICLE_CAM_VIEW_MODE(_)", WREN_CAM_SET_FOLLOW_VEHICLE_CAM_VIEW_MODE },
        { "GET_CAM_VIEW_MODE_FOR_CONTEXT(_)", WREN_CAM_GET_CAM_VIEW_MODE_FOR_CONTEXT },
        { "SET_CAM_VIEW_MODE_FOR_CONTEXT(_,_)", WREN_CAM_SET_CAM_VIEW_MODE_FOR_CONTEXT },
        { "GET_CAM_ACTIVE_VIEW_MODE_CONTEXT()", WREN_CAM_GET_CAM_ACTIVE_VIEW_MODE_CONTEXT },
        { "USE_VEHICLE_CAM_STUNT_SETTINGS_THIS_UPDATE()", WREN_CAM_USE_VEHICLE_CAM_STUNT_SETTINGS_THIS_UPDATE },
        { "USE_DEDICATED_STUNT_CAMERA_THIS_UPDATE(_)", WREN_CAM_USE_DEDICATED_STUNT_CAMERA_THIS_UPDATE },
        { "FORCE_VEHICLE_CAM_STUNT_SETTINGS_THIS_UPDATE()", WREN_CAM_FORCE_VEHICLE_CAM_STUNT_SETTINGS_THIS_UPDATE },
        { "SET_FOLLOW_VEHICLE_CAM_SEAT_THIS_UPDATE(_)", WREN_CAM_SET_FOLLOW_VEHICLE_CAM_SEAT_THIS_UPDATE },
        { "IS_AIM_CAM_ACTIVE()", WREN_CAM_IS_AIM_CAM_ACTIVE },
        { "IS_AIM_CAM_ACTIVE_IN_ACCURATE_MODE()", WREN_CAM_IS_AIM_CAM_ACTIVE_IN_ACCURATE_MODE },
        { "IS_FIRST_PERSON_AIM_CAM_ACTIVE()", WREN_CAM_IS_FIRST_PERSON_AIM_CAM_ACTIVE },
        { "DISABLE_AIM_CAM_THIS_UPDATE()", WREN_CAM_DISABLE_AIM_CAM_THIS_UPDATE },
        { "GET_FIRST_PERSON_AIM_CAM_ZOOM_FACTOR()", WREN_CAM_GET_FIRST_PERSON_AIM_CAM_ZOOM_FACTOR },
        { "SET_FIRST_PERSON_AIM_CAM_ZOOM_FACTOR(_)", WREN_CAM_SET_FIRST_PERSON_AIM_CAM_ZOOM_FACTOR },
        { "SET_FIRST_PERSON_AIM_CAM_ZOOM_FACTOR_LIMITS_THIS_UPDATE(_,_)", WREN_CAM_SET_FIRST_PERSON_AIM_CAM_ZOOM_FACTOR_LIMITS_THIS_UPDATE },
        { "SET_FIRST_PERSON_AIM_CAM_RELATIVE_HEADING_LIMITS_THIS_UPDATE(_,_)", WREN_CAM_SET_FIRST_PERSON_AIM_CAM_RELATIVE_HEADING_LIMITS_THIS_UPDATE },
        { "SET_FIRST_PERSON_AIM_CAM_RELATIVE_PITCH_LIMITS_THIS_UPDATE(_,_)", WREN_CAM_SET_FIRST_PERSON_AIM_CAM_RELATIVE_PITCH_LIMITS_THIS_UPDATE },
        { "SET_FIRST_PERSON_AIM_CAM_NEAR_CLIP_THIS_UPDATE(_)", WREN_CAM_SET_FIRST_PERSON_AIM_CAM_NEAR_CLIP_THIS_UPDATE },
        { "SET_THIRD_PERSON_AIM_CAM_NEAR_CLIP_THIS_UPDATE(_)", WREN_CAM_SET_THIRD_PERSON_AIM_CAM_NEAR_CLIP_THIS_UPDATE },
        { "SET_ALLOW_CUSTOM_VEHICLE_DRIVE_BY_CAM_THIS_UPDATE(_)", WREN_CAM_SET_ALLOW_CUSTOM_VEHICLE_DRIVE_BY_CAM_THIS_UPDATE },
        { "FORCE_TIGHTSPACE_CUSTOM_FRAMING_THIS_UPDATE()", WREN_CAM_FORCE_TIGHTSPACE_CUSTOM_FRAMING_THIS_UPDATE },
        { "GET_FINAL_RENDERED_CAM_COORD()", WREN_CAM_GET_FINAL_RENDERED_CAM_COORD },
        { "GET_FINAL_RENDERED_CAM_ROT(_)", WREN_CAM_GET_FINAL_RENDERED_CAM_ROT },
        { "GET_FINAL_RENDERED_REMOTE_PLAYER_CAM_ROT(_,_)", WREN_CAM_GET_FINAL_RENDERED_REMOTE_PLAYER_CAM_ROT },
        { "GET_FINAL_RENDERED_CAM_FOV()", WREN_CAM_GET_FINAL_RENDERED_CAM_FOV },
        { "GET_FINAL_RENDERED_REMOTE_PLAYER_CAM_FOV(_)", WREN_CAM_GET_FINAL_RENDERED_REMOTE_PLAYER_CAM_FOV },
        { "GET_FINAL_RENDERED_CAM_NEAR_CLIP()", WREN_CAM_GET_FINAL_RENDERED_CAM_NEAR_CLIP },
        { "GET_FINAL_RENDERED_CAM_FAR_CLIP()", WREN_CAM_GET_FINAL_RENDERED_CAM_FAR_CLIP },
        { "GET_FINAL_RENDERED_CAM_NEAR_DOF()", WREN_CAM_GET_FINAL_RENDERED_CAM_NEAR_DOF },
        { "GET_FINAL_RENDERED_CAM_FAR_DOF()", WREN_CAM_GET_FINAL_RENDERED_CAM_FAR_DOF },
        { "GET_FINAL_RENDERED_CAM_MOTION_BLUR_STRENGTH()", WREN_CAM_GET_FINAL_RENDERED_CAM_MOTION_BLUR_STRENGTH },
        { "SET_GAMEPLAY_COORD_HINT(_,_,_,_,_,_,_)", WREN_CAM_SET_GAMEPLAY_COORD_HINT },
        { "SET_GAMEPLAY_PED_HINT(_,_,_,_,_,_,_,_)", WREN_CAM_SET_GAMEPLAY_PED_HINT },
        { "SET_GAMEPLAY_VEHICLE_HINT(_,_,_,_,_,_,_,_)", WREN_CAM_SET_GAMEPLAY_VEHICLE_HINT },
        { "SET_GAMEPLAY_OBJECT_HINT(_,_,_,_,_,_,_,_)", WREN_CAM_SET_GAMEPLAY_OBJECT_HINT },
        { "SET_GAMEPLAY_ENTITY_HINT(_,_,_,_,_,_,_,_,_)", WREN_CAM_SET_GAMEPLAY_ENTITY_HINT },
        { "IS_GAMEPLAY_HINT_ACTIVE()", WREN_CAM_IS_GAMEPLAY_HINT_ACTIVE },
        { "STOP_GAMEPLAY_HINT(_)", WREN_CAM_STOP_GAMEPLAY_HINT },
        { "STOP_GAMEPLAY_HINT_BEING_CANCELLED_THIS_UPDATE(_)", WREN_CAM_STOP_GAMEPLAY_HINT_BEING_CANCELLED_THIS_UPDATE },
        { "STOP_CODE_GAMEPLAY_HINT(_)", WREN_CAM_STOP_CODE_GAMEPLAY_HINT },
        { "IS_CODE_GAMEPLAY_HINT_ACTIVE()", WREN_CAM_IS_CODE_GAMEPLAY_HINT_ACTIVE },
        { "SET_GAMEPLAY_HINT_FOV(_)", WREN_CAM_SET_GAMEPLAY_HINT_FOV },
        { "SET_GAMEPLAY_HINT_FOLLOW_DISTANCE_SCALAR(_)", WREN_CAM_SET_GAMEPLAY_HINT_FOLLOW_DISTANCE_SCALAR },
        { "SET_GAMEPLAY_HINT_BASE_ORBIT_PITCH_OFFSET(_)", WREN_CAM_SET_GAMEPLAY_HINT_BASE_ORBIT_PITCH_OFFSET },
        { "SET_GAMEPLAY_HINT_CAMERA_RELATIVE_SIDE_OFFSET(_)", WREN_CAM_SET_GAMEPLAY_HINT_CAMERA_RELATIVE_SIDE_OFFSET },
        { "SET_GAMEPLAY_HINT_CAMERA_RELATIVE_VERTICAL_OFFSET(_)", WREN_CAM_SET_GAMEPLAY_HINT_CAMERA_RELATIVE_VERTICAL_OFFSET },
        { "SET_GAMEPLAY_HINT_CAMERA_BLEND_TO_FOLLOW_PED_MEDIUM_VIEW_MODE(_)", WREN_CAM_SET_GAMEPLAY_HINT_CAMERA_BLEND_TO_FOLLOW_PED_MEDIUM_VIEW_MODE },
        { "SET_CINEMATIC_BUTTON_ACTIVE(_)", WREN_CAM_SET_CINEMATIC_BUTTON_ACTIVE },
        { "IS_CINEMATIC_CAM_RENDERING()", WREN_CAM_IS_CINEMATIC_CAM_RENDERING },
        { "SHAKE_CINEMATIC_CAM(_,_)", WREN_CAM_SHAKE_CINEMATIC_CAM },
        { "IS_CINEMATIC_CAM_SHAKING()", WREN_CAM_IS_CINEMATIC_CAM_SHAKING },
        { "SET_CINEMATIC_CAM_SHAKE_AMPLITUDE(_)", WREN_CAM_SET_CINEMATIC_CAM_SHAKE_AMPLITUDE },
        { "STOP_CINEMATIC_CAM_SHAKING(_)", WREN_CAM_STOP_CINEMATIC_CAM_SHAKING },
        { "DISABLE_CINEMATIC_BONNET_CAMERA_THIS_UPDATE()", WREN_CAM_DISABLE_CINEMATIC_BONNET_CAMERA_THIS_UPDATE },
        { "DISABLE_CINEMATIC_VEHICLE_IDLE_MODE_THIS_UPDATE()", WREN_CAM_DISABLE_CINEMATIC_VEHICLE_IDLE_MODE_THIS_UPDATE },
        { "INVALIDATE_CINEMATIC_VEHICLE_IDLE_MODE()", WREN_CAM_INVALIDATE_CINEMATIC_VEHICLE_IDLE_MODE },
        { "INVALIDATE_IDLE_CAM()", WREN_CAM_INVALIDATE_IDLE_CAM },
        { "IS_CINEMATIC_IDLE_CAM_RENDERING()", WREN_CAM_IS_CINEMATIC_IDLE_CAM_RENDERING },
        { "IS_CINEMATIC_FIRST_PERSON_VEHICLE_INTERIOR_CAM_RENDERING()", WREN_CAM_IS_CINEMATIC_FIRST_PERSON_VEHICLE_INTERIOR_CAM_RENDERING },
        { "CREATE_CINEMATIC_SHOT(_,_,_,_)", WREN_CAM_CREATE_CINEMATIC_SHOT },
        { "IS_CINEMATIC_SHOT_ACTIVE(_)", WREN_CAM_IS_CINEMATIC_SHOT_ACTIVE },
        { "STOP_CINEMATIC_SHOT(_)", WREN_CAM_STOP_CINEMATIC_SHOT },
        { "FORCE_CINEMATIC_RENDERING_THIS_UPDATE(_)", WREN_CAM_FORCE_CINEMATIC_RENDERING_THIS_UPDATE },
        { "SET_CINEMATIC_NEWS_CHANNEL_ACTIVE_THIS_UPDATE()", WREN_CAM_SET_CINEMATIC_NEWS_CHANNEL_ACTIVE_THIS_UPDATE },
        { "SET_CINEMATIC_MODE_ACTIVE(_)", WREN_CAM_SET_CINEMATIC_MODE_ACTIVE },
        { "IS_IN_VEHICLE_MOBILE_PHONE_CAMERA_RENDERING()", WREN_CAM_IS_IN_VEHICLE_MOBILE_PHONE_CAMERA_RENDERING },
        { "DISABLE_CINEMATIC_SLOW_MO_THIS_UPDATE()", WREN_CAM_DISABLE_CINEMATIC_SLOW_MO_THIS_UPDATE },
        { "IS_BONNET_CINEMATIC_CAM_RENDERING()", WREN_CAM_IS_BONNET_CINEMATIC_CAM_RENDERING },
        { "IS_CINEMATIC_CAM_INPUT_ACTIVE()", WREN_CAM_IS_CINEMATIC_CAM_INPUT_ACTIVE },
        { "IGNORE_MENU_PREFERENCE_FOR_BONNET_CAMERA_THIS_UPDATE()", WREN_CAM_IGNORE_MENU_PREFERENCE_FOR_BONNET_CAMERA_THIS_UPDATE },
        { "BYPASS_CUTSCENE_CAM_RENDERING_THIS_UPDATE()", WREN_CAM_BYPASS_CUTSCENE_CAM_RENDERING_THIS_UPDATE },
        { "STOP_CUTSCENE_CAM_SHAKING(_)", WREN_CAM_STOP_CUTSCENE_CAM_SHAKING },
        { "SET_CUTSCENE_CAM_FAR_CLIP_THIS_UPDATE(_)", WREN_CAM_SET_CUTSCENE_CAM_FAR_CLIP_THIS_UPDATE },
        { "GET_FOCUS_PED_ON_SCREEN(_,_,_,_,_,_,_,_,_)", WREN_CAM_GET_FOCUS_PED_ON_SCREEN },
        { "DISABLE_NEAR_CLIP_SCAN_THIS_UPDATE()", WREN_CAM_DISABLE_NEAR_CLIP_SCAN_THIS_UPDATE },
        { "SET_CAM_DEATH_FAIL_EFFECT_STATE(_)", WREN_CAM_SET_CAM_DEATH_FAIL_EFFECT_STATE },
        { "SET_FIRST_PERSON_FLASH_EFFECT_TYPE(_)", WREN_CAM_SET_FIRST_PERSON_FLASH_EFFECT_TYPE },
        { "SET_FIRST_PERSON_FLASH_EFFECT_VEHICLE_MODEL_NAME(_)", WREN_CAM_SET_FIRST_PERSON_FLASH_EFFECT_VEHICLE_MODEL_NAME },
        { "SET_FIRST_PERSON_FLASH_EFFECT_VEHICLE_MODEL_HASH(_)", WREN_CAM_SET_FIRST_PERSON_FLASH_EFFECT_VEHICLE_MODEL_HASH },
        { "IS_ALLOWED_INDEPENDENT_CAMERA_MODES()", WREN_CAM_IS_ALLOWED_INDEPENDENT_CAMERA_MODES },
        { "CAMERA_PREVENT_COLLISION_SETTINGS_FOR_TRIPLEHEAD_IN_INTERIORS_THIS_UPDATE()", WREN_CAM_CAMERA_PREVENT_COLLISION_SETTINGS_FOR_TRIPLEHEAD_IN_INTERIORS_THIS_UPDATE },
        { "REPLAY_GET_MAX_DISTANCE_ALLOWED_FROM_PLAYER()", WREN_CAM_REPLAY_GET_MAX_DISTANCE_ALLOWED_FROM_PLAYER },
        { "SET_CLOCK_TIME(_,_,_)", WREN_CLOCK_SET_CLOCK_TIME },
        { "PAUSE_CLOCK(_)", WREN_CLOCK_PAUSE_CLOCK },
        { "ADVANCE_CLOCK_TIME_TO(_,_,_)", WREN_CLOCK_ADVANCE_CLOCK_TIME_TO },
        { "ADD_TO_CLOCK_TIME(_,_,_)", WREN_CLOCK_ADD_TO_CLOCK_TIME },
        { "GET_CLOCK_HOURS()", WREN_CLOCK_GET_CLOCK_HOURS },
        { "GET_CLOCK_MINUTES()", WREN_CLOCK_GET_CLOCK_MINUTES },
        { "GET_CLOCK_SECONDS()", WREN_CLOCK_GET_CLOCK_SECONDS },
        { "SET_CLOCK_DATE(_,_,_)", WREN_CLOCK_SET_CLOCK_DATE },
        { "GET_CLOCK_DAY_OF_WEEK()", WREN_CLOCK_GET_CLOCK_DAY_OF_WEEK },
        { "GET_CLOCK_DAY_OF_MONTH()", WREN_CLOCK_GET_CLOCK_DAY_OF_MONTH },
        { "GET_CLOCK_MONTH()", WREN_CLOCK_GET_CLOCK_MONTH },
        { "GET_CLOCK_YEAR()", WREN_CLOCK_GET_CLOCK_YEAR },
        { "GET_MILLISECONDS_PER_GAME_MINUTE()", WREN_CLOCK_GET_MILLISECONDS_PER_GAME_MINUTE },
        { "GET_POSIX_TIME()", WREN_CLOCK_GET_POSIX_TIME },
        { "GET_UTC_TIME()", WREN_CLOCK_GET_UTC_TIME },
        { "GET_LOCAL_TIME()", WREN_CLOCK_GET_LOCAL_TIME },
        { "REQUEST_CUTSCENE(_,_)", WREN_CUTSCENE_REQUEST_CUTSCENE },
        { "REQUEST_CUTSCENE_WITH_PLAYBACK_LIST(_,_,_)", WREN_CUTSCENE_REQUEST_CUTSCENE_WITH_PLAYBACK_LIST },
        { "REMOVE_CUTSCENE()", WREN_CUTSCENE_REMOVE_CUTSCENE },
        { "HAS_CUTSCENE_LOADED()", WREN_CUTSCENE_HAS_CUTSCENE_LOADED },
        { "HAS_THIS_CUTSCENE_LOADED(_)", WREN_CUTSCENE_HAS_THIS_CUTSCENE_LOADED },
        { "SET_SCRIPT_CAN_START_CUTSCENE(_)", WREN_CUTSCENE_SET_SCRIPT_CAN_START_CUTSCENE },
        { "CAN_REQUEST_ASSETS_FOR_CUTSCENE_ENTITY()", WREN_CUTSCENE_CAN_REQUEST_ASSETS_FOR_CUTSCENE_ENTITY },
        { "IS_CUTSCENE_PLAYBACK_FLAG_SET(_)", WREN_CUTSCENE_IS_CUTSCENE_PLAYBACK_FLAG_SET },
        { "SET_CUTSCENE_ENTITY_STREAMING_FLAGS(_,_,_)", WREN_CUTSCENE_SET_CUTSCENE_ENTITY_STREAMING_FLAGS },
        { "REQUEST_CUT_FILE(_)", WREN_CUTSCENE_REQUEST_CUT_FILE },
        { "HAS_CUT_FILE_LOADED(_)", WREN_CUTSCENE_HAS_CUT_FILE_LOADED },
        { "REMOVE_CUT_FILE(_)", WREN_CUTSCENE_REMOVE_CUT_FILE },
        { "GET_CUT_FILE_CONCAT_COUNT(_)", WREN_CUTSCENE_GET_CUT_FILE_CONCAT_COUNT },
        { "START_CUTSCENE(_)", WREN_CUTSCENE_START_CUTSCENE },
        { "START_CUTSCENE_AT_COORDS(_,_,_,_)", WREN_CUTSCENE_START_CUTSCENE_AT_COORDS },
        { "STOP_CUTSCENE(_)", WREN_CUTSCENE_STOP_CUTSCENE },
        { "STOP_CUTSCENE_IMMEDIATELY()", WREN_CUTSCENE_STOP_CUTSCENE_IMMEDIATELY },
        { "SET_CUTSCENE_ORIGIN(_,_,_,_,_)", WREN_CUTSCENE_SET_CUTSCENE_ORIGIN },
        { "SET_CUTSCENE_ORIGIN_AND_ORIENTATION(_,_,_,_,_,_,_)", WREN_CUTSCENE_SET_CUTSCENE_ORIGIN_AND_ORIENTATION },
        { "GET_CUTSCENE_TIME()", WREN_CUTSCENE_GET_CUTSCENE_TIME },
        { "GET_CUTSCENE_TOTAL_DURATION()", WREN_CUTSCENE_GET_CUTSCENE_TOTAL_DURATION },
        { "GET_CUTSCENE_END_TIME()", WREN_CUTSCENE_GET_CUTSCENE_END_TIME },
        { "WAS_CUTSCENE_SKIPPED()", WREN_CUTSCENE_WAS_CUTSCENE_SKIPPED },
        { "HAS_CUTSCENE_FINISHED()", WREN_CUTSCENE_HAS_CUTSCENE_FINISHED },
        { "IS_CUTSCENE_ACTIVE()", WREN_CUTSCENE_IS_CUTSCENE_ACTIVE },
        { "IS_CUTSCENE_PLAYING()", WREN_CUTSCENE_IS_CUTSCENE_PLAYING },
        { "GET_CUTSCENE_SECTION_PLAYING()", WREN_CUTSCENE_GET_CUTSCENE_SECTION_PLAYING },
        { "GET_ENTITY_INDEX_OF_CUTSCENE_ENTITY(_,_)", WREN_CUTSCENE_GET_ENTITY_INDEX_OF_CUTSCENE_ENTITY },
        { "GET_CUTSCENE_CONCAT_SECTION_PLAYING()", WREN_CUTSCENE_GET_CUTSCENE_CONCAT_SECTION_PLAYING },
        { "IS_CUTSCENE_AUTHORIZED(_)", WREN_CUTSCENE_IS_CUTSCENE_AUTHORIZED },
        { "DOES_CUTSCENE_HANDLE_EXIST(_)", WREN_CUTSCENE_DOES_CUTSCENE_HANDLE_EXIST },
        { "REGISTER_ENTITY_FOR_CUTSCENE(_,_,_,_,_)", WREN_CUTSCENE_REGISTER_ENTITY_FOR_CUTSCENE },
        { "GET_ENTITY_INDEX_OF_REGISTERED_ENTITY(_,_)", WREN_CUTSCENE_GET_ENTITY_INDEX_OF_REGISTERED_ENTITY },
        { "SET_VEHICLE_MODEL_PLAYER_WILL_EXIT_SCENE(_)", WREN_CUTSCENE_SET_VEHICLE_MODEL_PLAYER_WILL_EXIT_SCENE },
        { "SET_CUTSCENE_TRIGGER_AREA(_,_,_,_,_,_)", WREN_CUTSCENE_SET_CUTSCENE_TRIGGER_AREA },
        { "CAN_SET_ENTER_STATE_FOR_REGISTERED_ENTITY(_,_)", WREN_CUTSCENE_CAN_SET_ENTER_STATE_FOR_REGISTERED_ENTITY },
        { "CAN_SET_EXIT_STATE_FOR_REGISTERED_ENTITY(_,_)", WREN_CUTSCENE_CAN_SET_EXIT_STATE_FOR_REGISTERED_ENTITY },
        { "CAN_SET_EXIT_STATE_FOR_CAMERA(_)", WREN_CUTSCENE_CAN_SET_EXIT_STATE_FOR_CAMERA },
        { "SET_PAD_CAN_SHAKE_DURING_CUTSCENE(_)", WREN_CUTSCENE_SET_PAD_CAN_SHAKE_DURING_CUTSCENE },
        { "SET_CUTSCENE_FADE_VALUES(_,_,_,_)", WREN_CUTSCENE_SET_CUTSCENE_FADE_VALUES },
        { "SET_CUTSCENE_MULTIHEAD_FADE(_,_,_,_)", WREN_CUTSCENE_SET_CUTSCENE_MULTIHEAD_FADE },
        { "SET_CUTSCENE_MULTIHEAD_FADE_MANUAL(_)", WREN_CUTSCENE_SET_CUTSCENE_MULTIHEAD_FADE_MANUAL },
        { "IS_MULTIHEAD_FADE_UP()", WREN_CUTSCENE_IS_MULTIHEAD_FADE_UP },
        { "NETWORK_SET_MOCAP_CUTSCENE_CAN_BE_SKIPPED(_)", WREN_CUTSCENE_NETWORK_SET_MOCAP_CUTSCENE_CAN_BE_SKIPPED },
        { "SET_CAR_GENERATORS_CAN_UPDATE_DURING_CUTSCENE(_)", WREN_CUTSCENE_SET_CAR_GENERATORS_CAN_UPDATE_DURING_CUTSCENE },
        { "CAN_USE_MOBILE_PHONE_DURING_CUTSCENE()", WREN_CUTSCENE_CAN_USE_MOBILE_PHONE_DURING_CUTSCENE },
        { "SET_CUTSCENE_CAN_BE_SKIPPED(_)", WREN_CUTSCENE_SET_CUTSCENE_CAN_BE_SKIPPED },
        { "SET_CAN_DISPLAY_MINIMAP_DURING_CUTSCENE_THIS_UPDATE()", WREN_CUTSCENE_SET_CAN_DISPLAY_MINIMAP_DURING_CUTSCENE_THIS_UPDATE },
        { "SET_CUTSCENE_PED_COMPONENT_VARIATION(_,_,_,_,_)", WREN_CUTSCENE_SET_CUTSCENE_PED_COMPONENT_VARIATION },
        { "SET_CUTSCENE_PED_COMPONENT_VARIATION_FROM_PED(_,_,_)", WREN_CUTSCENE_SET_CUTSCENE_PED_COMPONENT_VARIATION_FROM_PED },
        { "DOES_CUTSCENE_ENTITY_EXIST(_,_)", WREN_CUTSCENE_DOES_CUTSCENE_ENTITY_EXIST },
        { "SET_CUTSCENE_PED_PROP_VARIATION(_,_,_,_,_)", WREN_CUTSCENE_SET_CUTSCENE_PED_PROP_VARIATION },
        { "HAS_CUTSCENE_CUT_THIS_FRAME()", WREN_CUTSCENE_HAS_CUTSCENE_CUT_THIS_FRAME },
        { "DATAFILE_WATCH_REQUEST_ID(_)", WREN_DATAFILE_DATAFILE_WATCH_REQUEST_ID },
        { "DATAFILE_CLEAR_WATCH_LIST()", WREN_DATAFILE_DATAFILE_CLEAR_WATCH_LIST },
        { "DATAFILE_IS_VALID_REQUEST_ID(_)", WREN_DATAFILE_DATAFILE_IS_VALID_REQUEST_ID },
        { "DATAFILE_HAS_LOADED_FILE_DATA(_)", WREN_DATAFILE_DATAFILE_HAS_LOADED_FILE_DATA },
        { "DATAFILE_HAS_VALID_FILE_DATA(_)", WREN_DATAFILE_DATAFILE_HAS_VALID_FILE_DATA },
        { "DATAFILE_SELECT_ACTIVE_FILE(_,_)", WREN_DATAFILE_DATAFILE_SELECT_ACTIVE_FILE },
        { "DATAFILE_DELETE_REQUESTED_FILE(_)", WREN_DATAFILE_DATAFILE_DELETE_REQUESTED_FILE },
        { "UGC_CREATE_CONTENT(_,_,_,_,_,_,_)", WREN_DATAFILE_UGC_CREATE_CONTENT },
        { "UGC_CREATE_MISSION(_,_,_,_,_,_)", WREN_DATAFILE_UGC_CREATE_MISSION },
        { "UGC_UPDATE_CONTENT(_,_,_,_,_,_,_)", WREN_DATAFILE_UGC_UPDATE_CONTENT },
        { "UGC_UPDATE_MISSION(_,_,_,_,_,_)", WREN_DATAFILE_UGC_UPDATE_MISSION },
        { "UGC_SET_PLAYER_DATA(_,_,_,_)", WREN_DATAFILE_UGC_SET_PLAYER_DATA },
        { "DATAFILE_SELECT_UGC_DATA(_,_)", WREN_DATAFILE_DATAFILE_SELECT_UGC_DATA },
        { "DATAFILE_SELECT_UGC_STATS(_,_,_)", WREN_DATAFILE_DATAFILE_SELECT_UGC_STATS },
        { "DATAFILE_SELECT_UGC_PLAYER_DATA(_,_)", WREN_DATAFILE_DATAFILE_SELECT_UGC_PLAYER_DATA },
        { "DATAFILE_SELECT_CREATOR_STATS(_,_)", WREN_DATAFILE_DATAFILE_SELECT_CREATOR_STATS },
        { "DATAFILE_LOAD_OFFLINE_UGC(_,_)", WREN_DATAFILE_DATAFILE_LOAD_OFFLINE_UGC },
        { "DATAFILE_CREATE(_)", WREN_DATAFILE_DATAFILE_CREATE },
        { "DATAFILE_DELETE(_)", WREN_DATAFILE_DATAFILE_DELETE },
        { "DATAFILE_STORE_MISSION_HEADER(_)", WREN_DATAFILE_DATAFILE_STORE_MISSION_HEADER },
        { "DATAFILE_FLUSH_MISSION_HEADER()", WREN_DATAFILE_DATAFILE_FLUSH_MISSION_HEADER },
        { "DATAFILE_GET_FILE_DICT(_)", WREN_DATAFILE_DATAFILE_GET_FILE_DICT },
        { "DATAFILE_START_SAVE_TO_CLOUD(_,_)", WREN_DATAFILE_DATAFILE_START_SAVE_TO_CLOUD },
        { "DATAFILE_UPDATE_SAVE_TO_CLOUD()", WREN_DATAFILE_DATAFILE_UPDATE_SAVE_TO_CLOUD },
        { "DATAFILE_IS_SAVE_PENDING()", WREN_DATAFILE_DATAFILE_IS_SAVE_PENDING },
        { "DATAFILE_LOAD_OFFLINE_UGC_FOR_ADDITIONAL_DATA_FILE(_,_)", WREN_DATAFILE_DATAFILE_LOAD_OFFLINE_UGC_FOR_ADDITIONAL_DATA_FILE },
        { "DATAFILE_DELETE_FOR_ADDITIONAL_DATA_FILE(_)", WREN_DATAFILE_DATAFILE_DELETE_FOR_ADDITIONAL_DATA_FILE },
        { "DATAFILE_GET_FILE_DICT_FOR_ADDITIONAL_DATA_FILE(_)", WREN_DATAFILE_DATAFILE_GET_FILE_DICT_FOR_ADDITIONAL_DATA_FILE },
        { "DATADICT_SET_BOOL(_,_)", WREN_DATAFILE_DATADICT_SET_BOOL },
        { "DATADICT_SET_INT(_,_)", WREN_DATAFILE_DATADICT_SET_INT },
        { "DATADICT_SET_FLOAT(_,_)", WREN_DATAFILE_DATADICT_SET_FLOAT },
        { "DATADICT_SET_STRING(_,_)", WREN_DATAFILE_DATADICT_SET_STRING },
        { "DATADICT_SET_VECTOR(_,_,_,_)", WREN_DATAFILE_DATADICT_SET_VECTOR },
        { "DATADICT_CREATE_DICT(_)", WREN_DATAFILE_DATADICT_CREATE_DICT },
        { "DATADICT_CREATE_ARRAY(_)", WREN_DATAFILE_DATADICT_CREATE_ARRAY },
        { "DATADICT_GET_BOOL(_)", WREN_DATAFILE_DATADICT_GET_BOOL },
        { "DATADICT_GET_INT(_)", WREN_DATAFILE_DATADICT_GET_INT },
        { "DATADICT_GET_FLOAT(_)", WREN_DATAFILE_DATADICT_GET_FLOAT },
        { "DATADICT_GET_STRING(_)", WREN_DATAFILE_DATADICT_GET_STRING },
        { "DATADICT_GET_VECTOR(_)", WREN_DATAFILE_DATADICT_GET_VECTOR },
        { "DATADICT_GET_DICT(_)", WREN_DATAFILE_DATADICT_GET_DICT },
        { "DATADICT_GET_ARRAY(_)", WREN_DATAFILE_DATADICT_GET_ARRAY },
        { "DATADICT_GET_TYPE(_)", WREN_DATAFILE_DATADICT_GET_TYPE },
        { "DATAARRAY_ADD_BOOL(_)", WREN_DATAFILE_DATAARRAY_ADD_BOOL },
        { "DATAARRAY_ADD_INT(_)", WREN_DATAFILE_DATAARRAY_ADD_INT },
        { "DATAARRAY_ADD_FLOAT(_)", WREN_DATAFILE_DATAARRAY_ADD_FLOAT },
        { "DATAARRAY_ADD_STRING(_)", WREN_DATAFILE_DATAARRAY_ADD_STRING },
        { "DATAARRAY_ADD_VECTOR(_,_,_)", WREN_DATAFILE_DATAARRAY_ADD_VECTOR },
        { "DATAARRAY_ADD_DICT()", WREN_DATAFILE_DATAARRAY_ADD_DICT },
        { "DATAARRAY_GET_BOOL(_)", WREN_DATAFILE_DATAARRAY_GET_BOOL },
        { "DATAARRAY_GET_INT(_)", WREN_DATAFILE_DATAARRAY_GET_INT },
        { "DATAARRAY_GET_FLOAT(_)", WREN_DATAFILE_DATAARRAY_GET_FLOAT },
        { "DATAARRAY_GET_STRING(_)", WREN_DATAFILE_DATAARRAY_GET_STRING },
        { "DATAARRAY_GET_VECTOR(_)", WREN_DATAFILE_DATAARRAY_GET_VECTOR },
        { "DATAARRAY_GET_DICT(_)", WREN_DATAFILE_DATAARRAY_GET_DICT },
        { "DATAARRAY_GET_COUNT()", WREN_DATAFILE_DATAARRAY_GET_COUNT },
        { "DATAARRAY_GET_TYPE(_)", WREN_DATAFILE_DATAARRAY_GET_TYPE },
        { "DECOR_SET_TIME(_,_,_)", WREN_DECORATOR_DECOR_SET_TIME },
        { "DECOR_SET_BOOL(_,_,_)", WREN_DECORATOR_DECOR_SET_BOOL },
        { "DECOR_SET_FLOAT(_,_,_)", WREN_DECORATOR_DECOR_SET_FLOAT },
        { "DECOR_SET_INT(_,_,_)", WREN_DECORATOR_DECOR_SET_INT },
        { "DECOR_GET_BOOL(_,_)", WREN_DECORATOR_DECOR_GET_BOOL },
        { "DECOR_GET_FLOAT(_,_)", WREN_DECORATOR_DECOR_GET_FLOAT },
        { "DECOR_GET_INT(_,_)", WREN_DECORATOR_DECOR_GET_INT },
        { "DECOR_EXIST_ON(_,_)", WREN_DECORATOR_DECOR_EXIST_ON },
        { "DECOR_REMOVE(_,_)", WREN_DECORATOR_DECOR_REMOVE },
        { "DECOR_REGISTER(_,_)", WREN_DECORATOR_DECOR_REGISTER },
        { "DECOR_IS_REGISTERED_AS_TYPE(_,_)", WREN_DECORATOR_DECOR_IS_REGISTERED_AS_TYPE },
        { "DECOR_REGISTER_LOCK()", WREN_DECORATOR_DECOR_REGISTER_LOCK },
        { "ARE_ANY_CCS_PENDING()", WREN_DLC_ARE_ANY_CCS_PENDING },
        { "IS_DLC_PRESENT(_)", WREN_DLC_IS_DLC_PRESENT },
        { "DLC_CHECK_CLOUD_DATA_CORRECT()", WREN_DLC_DLC_CHECK_CLOUD_DATA_CORRECT },
        { "GET_EXTRACONTENT_CLOUD_RESULT()", WREN_DLC_GET_EXTRACONTENT_CLOUD_RESULT },
        { "DLC_CHECK_COMPAT_PACK_CONFIGURATION()", WREN_DLC_DLC_CHECK_COMPAT_PACK_CONFIGURATION },
        { "GET_EVER_HAD_BAD_PACK_ORDER()", WREN_DLC_GET_EVER_HAD_BAD_PACK_ORDER },
        { "GET_IS_LOADING_SCREEN_ACTIVE()", WREN_DLC_GET_IS_LOADING_SCREEN_ACTIVE },
        { "GET_IS_INITIAL_LOADING_SCREEN_ACTIVE()", WREN_DLC_GET_IS_INITIAL_LOADING_SCREEN_ACTIVE },
        { "HAS_CLOUD_REQUESTS_FINISHED(_)", WREN_DLC_HAS_CLOUD_REQUESTS_FINISHED },
        { "ON_ENTER_SP()", WREN_DLC_ON_ENTER_SP },
        { "ON_ENTER_MP()", WREN_DLC_ON_ENTER_MP },
        { "DOES_ENTITY_EXIST(_)", WREN_ENTITY_DOES_ENTITY_EXIST },
        { "DOES_ENTITY_BELONG_TO_THIS_SCRIPT(_,_)", WREN_ENTITY_DOES_ENTITY_BELONG_TO_THIS_SCRIPT },
        { "DOES_ENTITY_HAVE_DRAWABLE(_)", WREN_ENTITY_DOES_ENTITY_HAVE_DRAWABLE },
        { "DOES_ENTITY_HAVE_PHYSICS(_)", WREN_ENTITY_DOES_ENTITY_HAVE_PHYSICS },
        { "DOES_ENTITY_HAVE_SKELETON(_)", WREN_ENTITY_DOES_ENTITY_HAVE_SKELETON },
        { "DOES_ENTITY_HAVE_ANIM_DIRECTOR(_)", WREN_ENTITY_DOES_ENTITY_HAVE_ANIM_DIRECTOR },
        { "HAS_ENTITY_ANIM_FINISHED(_,_,_,_)", WREN_ENTITY_HAS_ENTITY_ANIM_FINISHED },
        { "HAS_ENTITY_BEEN_DAMAGED_BY_ANY_OBJECT(_)", WREN_ENTITY_HAS_ENTITY_BEEN_DAMAGED_BY_ANY_OBJECT },
        { "HAS_ENTITY_BEEN_DAMAGED_BY_ANY_PED(_)", WREN_ENTITY_HAS_ENTITY_BEEN_DAMAGED_BY_ANY_PED },
        { "HAS_ENTITY_BEEN_DAMAGED_BY_ANY_VEHICLE(_)", WREN_ENTITY_HAS_ENTITY_BEEN_DAMAGED_BY_ANY_VEHICLE },
        { "HAS_ENTITY_BEEN_DAMAGED_BY_ENTITY(_,_,_)", WREN_ENTITY_HAS_ENTITY_BEEN_DAMAGED_BY_ENTITY },
        { "HAS_ENTITY_CLEAR_LOS_TO_ENTITY(_,_,_)", WREN_ENTITY_HAS_ENTITY_CLEAR_LOS_TO_ENTITY },
        { "HAS_ENTITY_CLEAR_LOS_TO_ENTITY_ADJUST_FOR_COVER(_,_,_)", WREN_ENTITY_HAS_ENTITY_CLEAR_LOS_TO_ENTITY_ADJUST_FOR_COVER },
        { "HAS_ENTITY_CLEAR_LOS_TO_ENTITY_IN_FRONT(_,_)", WREN_ENTITY_HAS_ENTITY_CLEAR_LOS_TO_ENTITY_IN_FRONT },
        { "HAS_ENTITY_COLLIDED_WITH_ANYTHING(_)", WREN_ENTITY_HAS_ENTITY_COLLIDED_WITH_ANYTHING },
        { "GET_LAST_MATERIAL_HIT_BY_ENTITY(_)", WREN_ENTITY_GET_LAST_MATERIAL_HIT_BY_ENTITY },
        { "GET_COLLISION_NORMAL_OF_LAST_HIT_FOR_ENTITY(_)", WREN_ENTITY_GET_COLLISION_NORMAL_OF_LAST_HIT_FOR_ENTITY },
        { "FORCE_ENTITY_AI_AND_ANIMATION_UPDATE(_)", WREN_ENTITY_FORCE_ENTITY_AI_AND_ANIMATION_UPDATE },
        { "GET_ENTITY_ANIM_CURRENT_TIME(_,_,_)", WREN_ENTITY_GET_ENTITY_ANIM_CURRENT_TIME },
        { "GET_ENTITY_ANIM_TOTAL_TIME(_,_,_)", WREN_ENTITY_GET_ENTITY_ANIM_TOTAL_TIME },
        { "GET_ANIM_DURATION(_,_)", WREN_ENTITY_GET_ANIM_DURATION },
        { "GET_ENTITY_ATTACHED_TO(_)", WREN_ENTITY_GET_ENTITY_ATTACHED_TO },
        { "GET_ENTITY_COORDS(_,_)", WREN_ENTITY_GET_ENTITY_COORDS },
        { "GET_ENTITY_FORWARD_VECTOR(_)", WREN_ENTITY_GET_ENTITY_FORWARD_VECTOR },
        { "GET_ENTITY_FORWARD_X(_)", WREN_ENTITY_GET_ENTITY_FORWARD_X },
        { "GET_ENTITY_FORWARD_Y(_)", WREN_ENTITY_GET_ENTITY_FORWARD_Y },
        { "GET_ENTITY_HEADING(_)", WREN_ENTITY_GET_ENTITY_HEADING },
        { "GET_ENTITY_HEADING_FROM_EULERS(_)", WREN_ENTITY_GET_ENTITY_HEADING_FROM_EULERS },
        { "GET_ENTITY_HEALTH(_)", WREN_ENTITY_GET_ENTITY_HEALTH },
        { "GET_ENTITY_MAX_HEALTH(_)", WREN_ENTITY_GET_ENTITY_MAX_HEALTH },
        { "SET_ENTITY_MAX_HEALTH(_,_)", WREN_ENTITY_SET_ENTITY_MAX_HEALTH },
        { "GET_ENTITY_HEIGHT(_,_,_,_,_,_)", WREN_ENTITY_GET_ENTITY_HEIGHT },
        { "GET_ENTITY_HEIGHT_ABOVE_GROUND(_)", WREN_ENTITY_GET_ENTITY_HEIGHT_ABOVE_GROUND },
        { "GET_ENTITY_MATRIX(_)", WREN_ENTITY_GET_ENTITY_MATRIX },
        { "GET_ENTITY_MODEL(_)", WREN_ENTITY_GET_ENTITY_MODEL },
        { "GET_OFFSET_FROM_ENTITY_GIVEN_WORLD_COORDS(_,_,_,_)", WREN_ENTITY_GET_OFFSET_FROM_ENTITY_GIVEN_WORLD_COORDS },
        { "GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(_,_,_,_)", WREN_ENTITY_GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS },
        { "GET_ENTITY_PITCH(_)", WREN_ENTITY_GET_ENTITY_PITCH },
        { "GET_ENTITY_QUATERNION(_)", WREN_ENTITY_GET_ENTITY_QUATERNION },
        { "GET_ENTITY_ROLL(_)", WREN_ENTITY_GET_ENTITY_ROLL },
        { "GET_ENTITY_ROTATION(_,_)", WREN_ENTITY_GET_ENTITY_ROTATION },
        { "GET_ENTITY_ROTATION_VELOCITY(_)", WREN_ENTITY_GET_ENTITY_ROTATION_VELOCITY },
        { "GET_ENTITY_SCRIPT(_)", WREN_ENTITY_GET_ENTITY_SCRIPT },
        { "GET_ENTITY_SPEED(_)", WREN_ENTITY_GET_ENTITY_SPEED },
        { "GET_ENTITY_SPEED_VECTOR(_,_)", WREN_ENTITY_GET_ENTITY_SPEED_VECTOR },
        { "GET_ENTITY_UPRIGHT_VALUE(_)", WREN_ENTITY_GET_ENTITY_UPRIGHT_VALUE },
        { "GET_ENTITY_VELOCITY(_)", WREN_ENTITY_GET_ENTITY_VELOCITY },
        { "GET_OBJECT_INDEX_FROM_ENTITY_INDEX(_)", WREN_ENTITY_GET_OBJECT_INDEX_FROM_ENTITY_INDEX },
        { "GET_PED_INDEX_FROM_ENTITY_INDEX(_)", WREN_ENTITY_GET_PED_INDEX_FROM_ENTITY_INDEX },
        { "GET_VEHICLE_INDEX_FROM_ENTITY_INDEX(_)", WREN_ENTITY_GET_VEHICLE_INDEX_FROM_ENTITY_INDEX },
        { "GET_WORLD_POSITION_OF_ENTITY_BONE(_,_)", WREN_ENTITY_GET_WORLD_POSITION_OF_ENTITY_BONE },
        { "GET_NEAREST_PLAYER_TO_ENTITY(_)", WREN_ENTITY_GET_NEAREST_PLAYER_TO_ENTITY },
        { "GET_NEAREST_PLAYER_TO_ENTITY_ON_TEAM(_,_)", WREN_ENTITY_GET_NEAREST_PLAYER_TO_ENTITY_ON_TEAM },
        { "GET_ENTITY_TYPE(_)", WREN_ENTITY_GET_ENTITY_TYPE },
        { "GET_ENTITY_POPULATION_TYPE(_)", WREN_ENTITY_GET_ENTITY_POPULATION_TYPE },
        { "IS_AN_ENTITY(_)", WREN_ENTITY_IS_AN_ENTITY },
        { "IS_ENTITY_A_PED(_)", WREN_ENTITY_IS_ENTITY_A_PED },
        { "IS_ENTITY_A_MISSION_ENTITY(_)", WREN_ENTITY_IS_ENTITY_A_MISSION_ENTITY },
        { "IS_ENTITY_A_VEHICLE(_)", WREN_ENTITY_IS_ENTITY_A_VEHICLE },
        { "IS_ENTITY_AN_OBJECT(_)", WREN_ENTITY_IS_ENTITY_AN_OBJECT },
        { "IS_ENTITY_AT_COORD(_,_,_,_,_,_,_,_,_,_)", WREN_ENTITY_IS_ENTITY_AT_COORD },
        { "IS_ENTITY_AT_ENTITY(_,_,_,_,_,_,_,_)", WREN_ENTITY_IS_ENTITY_AT_ENTITY },
        { "IS_ENTITY_ATTACHED(_)", WREN_ENTITY_IS_ENTITY_ATTACHED },
        { "IS_ENTITY_ATTACHED_TO_ANY_OBJECT(_)", WREN_ENTITY_IS_ENTITY_ATTACHED_TO_ANY_OBJECT },
        { "IS_ENTITY_ATTACHED_TO_ANY_PED(_)", WREN_ENTITY_IS_ENTITY_ATTACHED_TO_ANY_PED },
        { "IS_ENTITY_ATTACHED_TO_ANY_VEHICLE(_)", WREN_ENTITY_IS_ENTITY_ATTACHED_TO_ANY_VEHICLE },
        { "IS_ENTITY_ATTACHED_TO_ENTITY(_,_)", WREN_ENTITY_IS_ENTITY_ATTACHED_TO_ENTITY },
        { "IS_ENTITY_DEAD(_,_)", WREN_ENTITY_IS_ENTITY_DEAD },
        { "IS_ENTITY_IN_AIR(_)", WREN_ENTITY_IS_ENTITY_IN_AIR },
        { "IS_ENTITY_IN_ANGLED_AREA(_,_,_,_,_,_,_,_,_,_,_)", WREN_ENTITY_IS_ENTITY_IN_ANGLED_AREA },
        { "IS_ENTITY_IN_AREA(_,_,_,_,_,_,_,_,_,_)", WREN_ENTITY_IS_ENTITY_IN_AREA },
        { "IS_ENTITY_IN_ZONE(_,_)", WREN_ENTITY_IS_ENTITY_IN_ZONE },
        { "IS_ENTITY_IN_WATER(_)", WREN_ENTITY_IS_ENTITY_IN_WATER },
        { "GET_ENTITY_SUBMERGED_LEVEL(_)", WREN_ENTITY_GET_ENTITY_SUBMERGED_LEVEL },
        { "SET_ENTITY_REQUIRES_MORE_EXPENSIVE_RIVER_CHECK(_,_)", WREN_ENTITY_SET_ENTITY_REQUIRES_MORE_EXPENSIVE_RIVER_CHECK },
        { "IS_ENTITY_ON_SCREEN(_)", WREN_ENTITY_IS_ENTITY_ON_SCREEN },
        { "IS_ENTITY_PLAYING_ANIM(_,_,_,_)", WREN_ENTITY_IS_ENTITY_PLAYING_ANIM },
        { "IS_ENTITY_STATIC(_)", WREN_ENTITY_IS_ENTITY_STATIC },
        { "IS_ENTITY_TOUCHING_ENTITY(_,_)", WREN_ENTITY_IS_ENTITY_TOUCHING_ENTITY },
        { "IS_ENTITY_TOUCHING_MODEL(_,_)", WREN_ENTITY_IS_ENTITY_TOUCHING_MODEL },
        { "IS_ENTITY_UPRIGHT(_,_)", WREN_ENTITY_IS_ENTITY_UPRIGHT },
        { "IS_ENTITY_UPSIDEDOWN(_)", WREN_ENTITY_IS_ENTITY_UPSIDEDOWN },
        { "IS_ENTITY_VISIBLE(_)", WREN_ENTITY_IS_ENTITY_VISIBLE },
        { "IS_ENTITY_VISIBLE_TO_SCRIPT(_)", WREN_ENTITY_IS_ENTITY_VISIBLE_TO_SCRIPT },
        { "IS_ENTITY_OCCLUDED(_)", WREN_ENTITY_IS_ENTITY_OCCLUDED },
        { "WOULD_ENTITY_BE_OCCLUDED(_,_,_,_,_)", WREN_ENTITY_WOULD_ENTITY_BE_OCCLUDED },
        { "IS_ENTITY_WAITING_FOR_WORLD_COLLISION(_)", WREN_ENTITY_IS_ENTITY_WAITING_FOR_WORLD_COLLISION },
        { "APPLY_FORCE_TO_ENTITY_CENTER_OF_MASS(_,_,_,_,_,_,_,_,_)", WREN_ENTITY_APPLY_FORCE_TO_ENTITY_CENTER_OF_MASS },
        { "APPLY_FORCE_TO_ENTITY(_,_,_,_,_,_,_,_,_,_,_,_,_,_)", WREN_ENTITY_APPLY_FORCE_TO_ENTITY },
        { "ATTACH_ENTITY_TO_ENTITY(_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_)", WREN_ENTITY_ATTACH_ENTITY_TO_ENTITY },
        { "ATTACH_ENTITY_BONE_TO_ENTITY_BONE(_,_,_,_,_,_)", WREN_ENTITY_ATTACH_ENTITY_BONE_TO_ENTITY_BONE },
        { "ATTACH_ENTITY_BONE_TO_ENTITY_BONE_Y_FORWARD(_,_,_,_,_,_)", WREN_ENTITY_ATTACH_ENTITY_BONE_TO_ENTITY_BONE_Y_FORWARD },
        { "ATTACH_ENTITY_TO_ENTITY_PHYSICALLY(_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_)", WREN_ENTITY_ATTACH_ENTITY_TO_ENTITY_PHYSICALLY },
        { "PROCESS_ENTITY_ATTACHMENTS(_)", WREN_ENTITY_PROCESS_ENTITY_ATTACHMENTS },
        { "GET_ENTITY_BONE_INDEX_BY_NAME(_,_)", WREN_ENTITY_GET_ENTITY_BONE_INDEX_BY_NAME },
        { "CLEAR_ENTITY_LAST_DAMAGE_ENTITY(_)", WREN_ENTITY_CLEAR_ENTITY_LAST_DAMAGE_ENTITY },
        { "DELETE_ENTITY()", WREN_ENTITY_DELETE_ENTITY },
        { "DETACH_ENTITY(_,_,_)", WREN_ENTITY_DETACH_ENTITY },
        { "FREEZE_ENTITY_POSITION(_,_)", WREN_ENTITY_FREEZE_ENTITY_POSITION },
        { "SET_ENTITY_SHOULD_FREEZE_WAITING_ON_COLLISION(_,_)", WREN_ENTITY_SET_ENTITY_SHOULD_FREEZE_WAITING_ON_COLLISION },
        { "PLAY_ENTITY_ANIM(_,_,_,_,_,_,_,_,_)", WREN_ENTITY_PLAY_ENTITY_ANIM },
        { "PLAY_SYNCHRONIZED_ENTITY_ANIM(_,_,_,_,_,_,_,_)", WREN_ENTITY_PLAY_SYNCHRONIZED_ENTITY_ANIM },
        { "PLAY_SYNCHRONIZED_MAP_ENTITY_ANIM(_,_,_,_,_,_,_,_,_,_)", WREN_ENTITY_PLAY_SYNCHRONIZED_MAP_ENTITY_ANIM },
        { "STOP_SYNCHRONIZED_MAP_ENTITY_ANIM(_,_,_,_,_,_)", WREN_ENTITY_STOP_SYNCHRONIZED_MAP_ENTITY_ANIM },
        { "STOP_ENTITY_ANIM(_,_,_,_)", WREN_ENTITY_STOP_ENTITY_ANIM },
        { "STOP_SYNCHRONIZED_ENTITY_ANIM(_,_,_)", WREN_ENTITY_STOP_SYNCHRONIZED_ENTITY_ANIM },
        { "HAS_ANIM_EVENT_FIRED(_,_)", WREN_ENTITY_HAS_ANIM_EVENT_FIRED },
        { "FIND_ANIM_EVENT_PHASE(_,_,_)", WREN_ENTITY_FIND_ANIM_EVENT_PHASE },
        { "SET_ENTITY_ANIM_CURRENT_TIME(_,_,_,_)", WREN_ENTITY_SET_ENTITY_ANIM_CURRENT_TIME },
        { "SET_ENTITY_ANIM_SPEED(_,_,_,_)", WREN_ENTITY_SET_ENTITY_ANIM_SPEED },
        { "SET_ENTITY_AS_MISSION_ENTITY(_,_,_)", WREN_ENTITY_SET_ENTITY_AS_MISSION_ENTITY },
        { "SET_ENTITY_AS_NO_LONGER_NEEDED()", WREN_ENTITY_SET_ENTITY_AS_NO_LONGER_NEEDED },
        { "SET_PED_AS_NO_LONGER_NEEDED()", WREN_ENTITY_SET_PED_AS_NO_LONGER_NEEDED },
        { "SET_VEHICLE_AS_NO_LONGER_NEEDED()", WREN_ENTITY_SET_VEHICLE_AS_NO_LONGER_NEEDED },
        { "SET_OBJECT_AS_NO_LONGER_NEEDED()", WREN_ENTITY_SET_OBJECT_AS_NO_LONGER_NEEDED },
        { "SET_ENTITY_CAN_BE_DAMAGED(_,_)", WREN_ENTITY_SET_ENTITY_CAN_BE_DAMAGED },
        { "GET_ENTITY_CAN_BE_DAMAGED(_)", WREN_ENTITY_GET_ENTITY_CAN_BE_DAMAGED },
        { "SET_ENTITY_CAN_BE_DAMAGED_BY_RELATIONSHIP_GROUP(_,_,_)", WREN_ENTITY_SET_ENTITY_CAN_BE_DAMAGED_BY_RELATIONSHIP_GROUP },
        { "SET_ENTITY_CAN_ONLY_BE_DAMAGED_BY_SCRIPT_PARTICIPANTS(_,_)", WREN_ENTITY_SET_ENTITY_CAN_ONLY_BE_DAMAGED_BY_SCRIPT_PARTICIPANTS },
        { "SET_ENTITY_CAN_BE_TARGETED_WITHOUT_LOS(_,_)", WREN_ENTITY_SET_ENTITY_CAN_BE_TARGETED_WITHOUT_LOS },
        { "SET_ENTITY_COLLISION(_,_,_)", WREN_ENTITY_SET_ENTITY_COLLISION },
        { "GET_ENTITY_COLLISION_DISABLED(_)", WREN_ENTITY_GET_ENTITY_COLLISION_DISABLED },
        { "SET_ENTITY_COMPLETELY_DISABLE_COLLISION(_,_,_)", WREN_ENTITY_SET_ENTITY_COMPLETELY_DISABLE_COLLISION },
        { "SET_ENTITY_COORDS(_,_,_,_,_,_,_,_)", WREN_ENTITY_SET_ENTITY_COORDS },
        { "SET_ENTITY_COORDS_WITHOUT_PLANTS_RESET(_,_,_,_,_,_,_,_)", WREN_ENTITY_SET_ENTITY_COORDS_WITHOUT_PLANTS_RESET },
        { "SET_ENTITY_COORDS_NO_OFFSET(_,_,_,_,_,_,_)", WREN_ENTITY_SET_ENTITY_COORDS_NO_OFFSET },
        { "SET_ENTITY_DYNAMIC(_,_)", WREN_ENTITY_SET_ENTITY_DYNAMIC },
        { "SET_ENTITY_HEADING(_,_)", WREN_ENTITY_SET_ENTITY_HEADING },
        { "SET_ENTITY_HEALTH(_,_,_)", WREN_ENTITY_SET_ENTITY_HEALTH },
        { "SET_ENTITY_INVINCIBLE(_,_)", WREN_ENTITY_SET_ENTITY_INVINCIBLE },
        { "SET_ENTITY_IS_TARGET_PRIORITY(_,_,_)", WREN_ENTITY_SET_ENTITY_IS_TARGET_PRIORITY },
        { "SET_ENTITY_LIGHTS(_,_)", WREN_ENTITY_SET_ENTITY_LIGHTS },
        { "SET_ENTITY_LOAD_COLLISION_FLAG(_,_,_)", WREN_ENTITY_SET_ENTITY_LOAD_COLLISION_FLAG },
        { "HAS_COLLISION_LOADED_AROUND_ENTITY(_)", WREN_ENTITY_HAS_COLLISION_LOADED_AROUND_ENTITY },
        { "SET_ENTITY_MAX_SPEED(_,_)", WREN_ENTITY_SET_ENTITY_MAX_SPEED },
        { "SET_ENTITY_ONLY_DAMAGED_BY_PLAYER(_,_)", WREN_ENTITY_SET_ENTITY_ONLY_DAMAGED_BY_PLAYER },
        { "SET_ENTITY_ONLY_DAMAGED_BY_RELATIONSHIP_GROUP(_,_,_)", WREN_ENTITY_SET_ENTITY_ONLY_DAMAGED_BY_RELATIONSHIP_GROUP },
        { "SET_ENTITY_PROOFS(_,_,_,_,_,_,_,_,_)", WREN_ENTITY_SET_ENTITY_PROOFS },
        { "GET_ENTITY_PROOFS(_)", WREN_ENTITY_GET_ENTITY_PROOFS },
        { "SET_ENTITY_QUATERNION(_,_,_,_,_)", WREN_ENTITY_SET_ENTITY_QUATERNION },
        { "SET_ENTITY_RECORDS_COLLISIONS(_,_)", WREN_ENTITY_SET_ENTITY_RECORDS_COLLISIONS },
        { "SET_ENTITY_ROTATION(_,_,_,_,_,_)", WREN_ENTITY_SET_ENTITY_ROTATION },
        { "SET_ENTITY_VISIBLE(_,_,_)", WREN_ENTITY_SET_ENTITY_VISIBLE },
        { "SET_ENTITY_WATER_REFLECTION_FLAG(_,_)", WREN_ENTITY_SET_ENTITY_WATER_REFLECTION_FLAG },
        { "SET_ENTITY_MIRROR_REFLECTION_FLAG(_,_)", WREN_ENTITY_SET_ENTITY_MIRROR_REFLECTION_FLAG },
        { "SET_ENTITY_VELOCITY(_,_,_,_)", WREN_ENTITY_SET_ENTITY_VELOCITY },
        { "SET_ENTITY_ANGULAR_VELOCITY(_,_,_,_)", WREN_ENTITY_SET_ENTITY_ANGULAR_VELOCITY },
        { "SET_ENTITY_HAS_GRAVITY(_,_)", WREN_ENTITY_SET_ENTITY_HAS_GRAVITY },
        { "SET_ENTITY_LOD_DIST(_,_)", WREN_ENTITY_SET_ENTITY_LOD_DIST },
        { "GET_ENTITY_LOD_DIST(_)", WREN_ENTITY_GET_ENTITY_LOD_DIST },
        { "SET_ENTITY_ALPHA(_,_,_)", WREN_ENTITY_SET_ENTITY_ALPHA },
        { "GET_ENTITY_ALPHA(_)", WREN_ENTITY_GET_ENTITY_ALPHA },
        { "RESET_ENTITY_ALPHA(_)", WREN_ENTITY_RESET_ENTITY_ALPHA },
        { "RESET_PICKUP_ENTITY_GLOW(_)", WREN_ENTITY_RESET_PICKUP_ENTITY_GLOW },
        { "SET_PICKUP_COLLIDES_WITH_PROJECTILES(_,_)", WREN_ENTITY_SET_PICKUP_COLLIDES_WITH_PROJECTILES },
        { "SET_ENTITY_SORT_BIAS(_,_)", WREN_ENTITY_SET_ENTITY_SORT_BIAS },
        { "SET_ENTITY_ALWAYS_PRERENDER(_,_)", WREN_ENTITY_SET_ENTITY_ALWAYS_PRERENDER },
        { "SET_ENTITY_RENDER_SCORCHED(_,_)", WREN_ENTITY_SET_ENTITY_RENDER_SCORCHED },
        { "SET_ENTITY_TRAFFICLIGHT_OVERRIDE(_,_)", WREN_ENTITY_SET_ENTITY_TRAFFICLIGHT_OVERRIDE },
        { "SET_ENTITY_IS_IN_VEHICLE(_)", WREN_ENTITY_SET_ENTITY_IS_IN_VEHICLE },
        { "CREATE_MODEL_SWAP(_,_,_,_,_,_,_)", WREN_ENTITY_CREATE_MODEL_SWAP },
        { "REMOVE_MODEL_SWAP(_,_,_,_,_,_,_)", WREN_ENTITY_REMOVE_MODEL_SWAP },
        { "CREATE_MODEL_HIDE(_,_,_,_,_,_)", WREN_ENTITY_CREATE_MODEL_HIDE },
        { "CREATE_MODEL_HIDE_EXCLUDING_SCRIPT_OBJECTS(_,_,_,_,_,_)", WREN_ENTITY_CREATE_MODEL_HIDE_EXCLUDING_SCRIPT_OBJECTS },
        { "REMOVE_MODEL_HIDE(_,_,_,_,_,_)", WREN_ENTITY_REMOVE_MODEL_HIDE },
        { "CREATE_FORCED_OBJECT(_,_,_,_,_,_)", WREN_ENTITY_CREATE_FORCED_OBJECT },
        { "REMOVE_FORCED_OBJECT(_,_,_,_,_)", WREN_ENTITY_REMOVE_FORCED_OBJECT },
        { "SET_ENTITY_NO_COLLISION_ENTITY(_,_,_)", WREN_ENTITY_SET_ENTITY_NO_COLLISION_ENTITY },
        { "SET_ENTITY_MOTION_BLUR(_,_)", WREN_ENTITY_SET_ENTITY_MOTION_BLUR },
        { "SET_CAN_AUTO_VAULT_ON_ENTITY(_,_)", WREN_ENTITY_SET_CAN_AUTO_VAULT_ON_ENTITY },
        { "SET_CAN_CLIMB_ON_ENTITY(_,_)", WREN_ENTITY_SET_CAN_CLIMB_ON_ENTITY },
        { "SET_WAIT_FOR_COLLISIONS_BEFORE_PROBE(_,_)", WREN_ENTITY_SET_WAIT_FOR_COLLISIONS_BEFORE_PROBE },
        { "SET_ENTITY_NOWEAPONDECALS(_,_)", WREN_ENTITY_SET_ENTITY_NOWEAPONDECALS },
        { "SET_ENTITY_USE_MAX_DISTANCE_FOR_WATER_REFLECTION(_,_)", WREN_ENTITY_SET_ENTITY_USE_MAX_DISTANCE_FOR_WATER_REFLECTION },
        { "GET_ENTITY_BONE_ROTATION(_,_)", WREN_ENTITY_GET_ENTITY_BONE_ROTATION },
        { "GET_ENTITY_BONE_POSTION(_,_)", WREN_ENTITY_GET_ENTITY_BONE_POSTION },
        { "GET_ENTITY_BONE_OBJECT_ROTATION(_,_)", WREN_ENTITY_GET_ENTITY_BONE_OBJECT_ROTATION },
        { "GET_ENTITY_BONE_COUNT(_)", WREN_ENTITY_GET_ENTITY_BONE_COUNT },
        { "ENABLE_ENTITY_BULLET_COLLISION(_)", WREN_ENTITY_ENABLE_ENTITY_BULLET_COLLISION },
        { "SET_ENTITY_CAN_ONLY_BE_DAMAGED_BY_ENTITY(_,_)", WREN_ENTITY_SET_ENTITY_CAN_ONLY_BE_DAMAGED_BY_ENTITY },
        { "SET_ENTITY_CANT_CAUSE_COLLISION_DAMAGED_ENTITY(_,_)", WREN_ENTITY_SET_ENTITY_CANT_CAUSE_COLLISION_DAMAGED_ENTITY },
        { "SET_ALLOW_MIGRATE_TO_SPECTATOR(_,_)", WREN_ENTITY_SET_ALLOW_MIGRATE_TO_SPECTATOR },
        { "GET_ENTITY_OF_TYPE_ATTACHED_TO_ENTITY(_,_)", WREN_ENTITY_GET_ENTITY_OF_TYPE_ATTACHED_TO_ENTITY },
        { "SET_PICK_UP_BY_CARGOBOB_DISABLED(_,_)", WREN_ENTITY_SET_PICK_UP_BY_CARGOBOB_DISABLED },
        { "SET_DECISION_MAKER(_,_)", WREN_EVENT_SET_DECISION_MAKER },
        { "CLEAR_DECISION_MAKER_EVENT_RESPONSE(_,_)", WREN_EVENT_CLEAR_DECISION_MAKER_EVENT_RESPONSE },
        { "BLOCK_DECISION_MAKER_EVENT(_,_)", WREN_EVENT_BLOCK_DECISION_MAKER_EVENT },
        { "UNBLOCK_DECISION_MAKER_EVENT(_,_)", WREN_EVENT_UNBLOCK_DECISION_MAKER_EVENT },
        { "ADD_SHOCKING_EVENT_AT_POSITION(_,_,_,_,_)", WREN_EVENT_ADD_SHOCKING_EVENT_AT_POSITION },
        { "ADD_SHOCKING_EVENT_FOR_ENTITY(_,_,_)", WREN_EVENT_ADD_SHOCKING_EVENT_FOR_ENTITY },
        { "IS_SHOCKING_EVENT_IN_SPHERE(_,_,_,_,_)", WREN_EVENT_IS_SHOCKING_EVENT_IN_SPHERE },
        { "REMOVE_SHOCKING_EVENT(_)", WREN_EVENT_REMOVE_SHOCKING_EVENT },
        { "REMOVE_ALL_SHOCKING_EVENTS(_)", WREN_EVENT_REMOVE_ALL_SHOCKING_EVENTS },
        { "REMOVE_SHOCKING_EVENT_SPAWN_BLOCKING_AREAS()", WREN_EVENT_REMOVE_SHOCKING_EVENT_SPAWN_BLOCKING_AREAS },
        { "SUPPRESS_SHOCKING_EVENTS_NEXT_FRAME()", WREN_EVENT_SUPPRESS_SHOCKING_EVENTS_NEXT_FRAME },
        { "SUPPRESS_SHOCKING_EVENT_TYPE_NEXT_FRAME(_)", WREN_EVENT_SUPPRESS_SHOCKING_EVENT_TYPE_NEXT_FRAME },
        { "SUPPRESS_AGITATION_EVENTS_NEXT_FRAME()", WREN_EVENT_SUPPRESS_AGITATION_EVENTS_NEXT_FRAME },
        { "GET_NUM_TATTOO_SHOP_DLC_ITEMS(_)", WREN_FILES_GET_NUM_TATTOO_SHOP_DLC_ITEMS },
        { "GET_TATTOO_SHOP_DLC_ITEM_DATA(_,_)", WREN_FILES_GET_TATTOO_SHOP_DLC_ITEM_DATA },
        { "GET_TATTOO_SHOP_DLC_ITEM_INDEX(_,_,_)", WREN_FILES_GET_TATTOO_SHOP_DLC_ITEM_INDEX },
        { "INIT_SHOP_PED_COMPONENT()", WREN_FILES_INIT_SHOP_PED_COMPONENT },
        { "INIT_SHOP_PED_PROP()", WREN_FILES_INIT_SHOP_PED_PROP },
        { "SETUP_SHOP_PED_APPAREL_QUERY(_,_,_,_)", WREN_FILES_SETUP_SHOP_PED_APPAREL_QUERY },
        { "SETUP_SHOP_PED_APPAREL_QUERY_TU(_,_,_,_,_,_)", WREN_FILES_SETUP_SHOP_PED_APPAREL_QUERY_TU },
        { "GET_SHOP_PED_QUERY_COMPONENT(_)", WREN_FILES_GET_SHOP_PED_QUERY_COMPONENT },
        { "GET_SHOP_PED_QUERY_COMPONENT_INDEX(_)", WREN_FILES_GET_SHOP_PED_QUERY_COMPONENT_INDEX },
        { "GET_SHOP_PED_COMPONENT(_)", WREN_FILES_GET_SHOP_PED_COMPONENT },
        { "GET_SHOP_PED_QUERY_PROP(_)", WREN_FILES_GET_SHOP_PED_QUERY_PROP },
        { "GET_SHOP_PED_QUERY_PROP_INDEX(_)", WREN_FILES_GET_SHOP_PED_QUERY_PROP_INDEX },
        { "GET_SHOP_PED_PROP(_)", WREN_FILES_GET_SHOP_PED_PROP },
        { "GET_HASH_NAME_FOR_COMPONENT(_,_,_,_)", WREN_FILES_GET_HASH_NAME_FOR_COMPONENT },
        { "GET_HASH_NAME_FOR_PROP(_,_,_,_)", WREN_FILES_GET_HASH_NAME_FOR_PROP },
        { "GET_SHOP_PED_APPAREL_VARIANT_COMPONENT_COUNT(_)", WREN_FILES_GET_SHOP_PED_APPAREL_VARIANT_COMPONENT_COUNT },
        { "GET_SHOP_PED_APPAREL_VARIANT_PROP_COUNT(_)", WREN_FILES_GET_SHOP_PED_APPAREL_VARIANT_PROP_COUNT },
        { "GET_VARIANT_COMPONENT(_,_)", WREN_FILES_GET_VARIANT_COMPONENT },
        { "GET_VARIANT_PROP(_,_)", WREN_FILES_GET_VARIANT_PROP },
        { "GET_SHOP_PED_APPAREL_FORCED_COMPONENT_COUNT(_)", WREN_FILES_GET_SHOP_PED_APPAREL_FORCED_COMPONENT_COUNT },
        { "GET_SHOP_PED_APPAREL_FORCED_PROP_COUNT(_)", WREN_FILES_GET_SHOP_PED_APPAREL_FORCED_PROP_COUNT },
        { "GET_FORCED_COMPONENT(_,_)", WREN_FILES_GET_FORCED_COMPONENT },
        { "GET_FORCED_PROP(_,_)", WREN_FILES_GET_FORCED_PROP },
        { "DOES_SHOP_PED_APPAREL_HAVE_RESTRICTION_TAG(_,_,_)", WREN_FILES_DOES_SHOP_PED_APPAREL_HAVE_RESTRICTION_TAG },
        { "DOES_CURRENT_PED_COMPONENT_HAVE_RESTRICTION_TAG(_,_,_)", WREN_FILES_DOES_CURRENT_PED_COMPONENT_HAVE_RESTRICTION_TAG },
        { "DOES_CURRENT_PED_PROP_HAVE_RESTRICTION_TAG(_,_,_)", WREN_FILES_DOES_CURRENT_PED_PROP_HAVE_RESTRICTION_TAG },
        { "SETUP_SHOP_PED_OUTFIT_QUERY(_,_)", WREN_FILES_SETUP_SHOP_PED_OUTFIT_QUERY },
        { "GET_SHOP_PED_QUERY_OUTFIT(_)", WREN_FILES_GET_SHOP_PED_QUERY_OUTFIT },
        { "GET_SHOP_PED_OUTFIT(_)", WREN_FILES_GET_SHOP_PED_OUTFIT },
        { "GET_SHOP_PED_OUTFIT_LOCATE(_)", WREN_FILES_GET_SHOP_PED_OUTFIT_LOCATE },
        { "GET_SHOP_PED_OUTFIT_PROP_VARIANT(_,_)", WREN_FILES_GET_SHOP_PED_OUTFIT_PROP_VARIANT },
        { "GET_SHOP_PED_OUTFIT_COMPONENT_VARIANT(_,_)", WREN_FILES_GET_SHOP_PED_OUTFIT_COMPONENT_VARIANT },
        { "GET_NUM_DLC_VEHICLES()", WREN_FILES_GET_NUM_DLC_VEHICLES },
        { "GET_DLC_VEHICLE_MODEL(_)", WREN_FILES_GET_DLC_VEHICLE_MODEL },
        { "GET_DLC_VEHICLE_DATA(_)", WREN_FILES_GET_DLC_VEHICLE_DATA },
        { "GET_DLC_VEHICLE_FLAGS(_)", WREN_FILES_GET_DLC_VEHICLE_FLAGS },
        { "GET_NUM_DLC_WEAPONS()", WREN_FILES_GET_NUM_DLC_WEAPONS },
        { "GET_NUM_DLC_WEAPONS_SP()", WREN_FILES_GET_NUM_DLC_WEAPONS_SP },
        { "GET_DLC_WEAPON_DATA(_)", WREN_FILES_GET_DLC_WEAPON_DATA },
        { "GET_DLC_WEAPON_DATA_SP(_)", WREN_FILES_GET_DLC_WEAPON_DATA_SP },
        { "GET_NUM_DLC_WEAPON_COMPONENTS(_)", WREN_FILES_GET_NUM_DLC_WEAPON_COMPONENTS },
        { "GET_NUM_DLC_WEAPON_COMPONENTS_SP(_)", WREN_FILES_GET_NUM_DLC_WEAPON_COMPONENTS_SP },
        { "GET_DLC_WEAPON_COMPONENT_DATA(_,_)", WREN_FILES_GET_DLC_WEAPON_COMPONENT_DATA },
        { "GET_DLC_WEAPON_COMPONENT_DATA_SP(_,_)", WREN_FILES_GET_DLC_WEAPON_COMPONENT_DATA_SP },
        { "IS_CONTENT_ITEM_LOCKED(_)", WREN_FILES_IS_CONTENT_ITEM_LOCKED },
        { "IS_DLC_VEHICLE_MOD(_)", WREN_FILES_IS_DLC_VEHICLE_MOD },
        { "GET_DLC_VEHICLE_MOD_LOCK_HASH(_)", WREN_FILES_GET_DLC_VEHICLE_MOD_LOCK_HASH },
        { "EXECUTE_CONTENT_CHANGESET_GROUP_FOR_ALL(_)", WREN_FILES_EXECUTE_CONTENT_CHANGESET_GROUP_FOR_ALL },
        { "REVERT_CONTENT_CHANGESET_GROUP_FOR_ALL(_)", WREN_FILES_REVERT_CONTENT_CHANGESET_GROUP_FOR_ALL },
        { "START_SCRIPT_FIRE(_,_,_,_,_)", WREN_FIRE_START_SCRIPT_FIRE },
        { "REMOVE_SCRIPT_FIRE(_)", WREN_FIRE_REMOVE_SCRIPT_FIRE },
        { "START_ENTITY_FIRE(_)", WREN_FIRE_START_ENTITY_FIRE },
        { "STOP_ENTITY_FIRE(_)", WREN_FIRE_STOP_ENTITY_FIRE },
        { "IS_ENTITY_ON_FIRE(_)", WREN_FIRE_IS_ENTITY_ON_FIRE },
        { "GET_NUMBER_OF_FIRES_IN_RANGE(_,_,_,_)", WREN_FIRE_GET_NUMBER_OF_FIRES_IN_RANGE },
        { "SET_FLAMMABILITY_MULTIPLIER(_)", WREN_FIRE_SET_FLAMMABILITY_MULTIPLIER },
        { "STOP_FIRE_IN_RANGE(_,_,_,_)", WREN_FIRE_STOP_FIRE_IN_RANGE },
        { "GET_CLOSEST_FIRE_POS(_,_,_)", WREN_FIRE_GET_CLOSEST_FIRE_POS },
        { "ADD_EXPLOSION(_,_,_,_,_,_,_,_,_)", WREN_FIRE_ADD_EXPLOSION },
        { "ADD_OWNED_EXPLOSION(_,_,_,_,_,_,_,_,_)", WREN_FIRE_ADD_OWNED_EXPLOSION },
        { "ADD_EXPLOSION_WITH_USER_VFX(_,_,_,_,_,_,_,_,_)", WREN_FIRE_ADD_EXPLOSION_WITH_USER_VFX },
        { "IS_EXPLOSION_IN_AREA(_,_,_,_,_,_,_)", WREN_FIRE_IS_EXPLOSION_IN_AREA },
        { "IS_EXPLOSION_ACTIVE_IN_AREA(_,_,_,_,_,_,_)", WREN_FIRE_IS_EXPLOSION_ACTIVE_IN_AREA },
        { "IS_EXPLOSION_IN_SPHERE(_,_,_,_,_)", WREN_FIRE_IS_EXPLOSION_IN_SPHERE },
        { "GET_OWNER_OF_EXPLOSION_IN_SPHERE(_,_,_,_,_)", WREN_FIRE_GET_OWNER_OF_EXPLOSION_IN_SPHERE },
        { "IS_EXPLOSION_IN_ANGLED_AREA(_,_,_,_,_,_,_,_)", WREN_FIRE_IS_EXPLOSION_IN_ANGLED_AREA },
        { "GET_OWNER_OF_EXPLOSION_IN_ANGLED_AREA(_,_,_,_,_,_,_,_)", WREN_FIRE_GET_OWNER_OF_EXPLOSION_IN_ANGLED_AREA },
        { "SET_DEBUG_LINES_AND_SPHERES_DRAWING_ACTIVE(_)", WREN_GRAPHICS_SET_DEBUG_LINES_AND_SPHERES_DRAWING_ACTIVE },
        { "DRAW_DEBUG_LINE(_,_,_,_,_,_,_,_,_,_)", WREN_GRAPHICS_DRAW_DEBUG_LINE },
        { "DRAW_DEBUG_LINE_WITH_TWO_COLOURS(_,_,_,_,_,_,_,_,_,_,_,_,_,_)", WREN_GRAPHICS_DRAW_DEBUG_LINE_WITH_TWO_COLOURS },
        { "DRAW_DEBUG_SPHERE(_,_,_,_,_,_,_,_)", WREN_GRAPHICS_DRAW_DEBUG_SPHERE },
        { "DRAW_DEBUG_BOX(_,_,_,_,_,_,_,_,_,_)", WREN_GRAPHICS_DRAW_DEBUG_BOX },
        { "DRAW_DEBUG_CROSS(_,_,_,_,_,_,_,_)", WREN_GRAPHICS_DRAW_DEBUG_CROSS },
        { "DRAW_DEBUG_TEXT(_,_,_,_,_,_,_,_)", WREN_GRAPHICS_DRAW_DEBUG_TEXT },
        { "DRAW_DEBUG_TEXT_2D(_,_,_,_,_,_,_,_)", WREN_GRAPHICS_DRAW_DEBUG_TEXT_2D },
        { "DRAW_LINE(_,_,_,_,_,_,_,_,_,_)", WREN_GRAPHICS_DRAW_LINE },
        { "DRAW_POLY(_,_,_,_,_,_,_,_,_,_,_,_,_)", WREN_GRAPHICS_DRAW_POLY },
        { "DRAW_TEXTURED_POLY(_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_)", WREN_GRAPHICS_DRAW_TEXTURED_POLY },
        { "DRAW_TEXTURED_POLY_WITH_THREE_COLOURS(_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_)", WREN_GRAPHICS_DRAW_TEXTURED_POLY_WITH_THREE_COLOURS },
        { "DRAW_BOX(_,_,_,_,_,_,_,_,_,_)", WREN_GRAPHICS_DRAW_BOX },
        { "SET_BACKFACECULLING(_)", WREN_GRAPHICS_SET_BACKFACECULLING },
        { "SET_DEPTHWRITING(_)", WREN_GRAPHICS_SET_DEPTHWRITING },
        { "BEGIN_TAKE_MISSION_CREATOR_PHOTO()", WREN_GRAPHICS_BEGIN_TAKE_MISSION_CREATOR_PHOTO },
        { "GET_STATUS_OF_TAKE_MISSION_CREATOR_PHOTO()", WREN_GRAPHICS_GET_STATUS_OF_TAKE_MISSION_CREATOR_PHOTO },
        { "FREE_MEMORY_FOR_MISSION_CREATOR_PHOTO()", WREN_GRAPHICS_FREE_MEMORY_FOR_MISSION_CREATOR_PHOTO },
        { "LOAD_MISSION_CREATOR_PHOTO(_,_,_)", WREN_GRAPHICS_LOAD_MISSION_CREATOR_PHOTO },
        { "GET_STATUS_OF_LOAD_MISSION_CREATOR_PHOTO()", WREN_GRAPHICS_GET_STATUS_OF_LOAD_MISSION_CREATOR_PHOTO },
        { "BEGIN_CREATE_MISSION_CREATOR_PHOTO_PREVIEW()", WREN_GRAPHICS_BEGIN_CREATE_MISSION_CREATOR_PHOTO_PREVIEW },
        { "GET_STATUS_OF_CREATE_MISSION_CREATOR_PHOTO_PREVIEW()", WREN_GRAPHICS_GET_STATUS_OF_CREATE_MISSION_CREATOR_PHOTO_PREVIEW },
        { "FREE_MEMORY_FOR_MISSION_CREATOR_PHOTO_PREVIEW()", WREN_GRAPHICS_FREE_MEMORY_FOR_MISSION_CREATOR_PHOTO_PREVIEW },
        { "BEGIN_TAKE_HIGH_QUALITY_PHOTO()", WREN_GRAPHICS_BEGIN_TAKE_HIGH_QUALITY_PHOTO },
        { "GET_STATUS_OF_TAKE_HIGH_QUALITY_PHOTO()", WREN_GRAPHICS_GET_STATUS_OF_TAKE_HIGH_QUALITY_PHOTO },
        { "FREE_MEMORY_FOR_HIGH_QUALITY_PHOTO()", WREN_GRAPHICS_FREE_MEMORY_FOR_HIGH_QUALITY_PHOTO },
        { "SET_TAKEN_PHOTO_IS_MUGSHOT(_)", WREN_GRAPHICS_SET_TAKEN_PHOTO_IS_MUGSHOT },
        { "SET_ARENA_THEME_AND_VARIATION_FOR_TAKEN_PHOTO(_,_)", WREN_GRAPHICS_SET_ARENA_THEME_AND_VARIATION_FOR_TAKEN_PHOTO },
        { "SET_ON_ISLAND_X_FOR_TAKEN_PHOTO(_)", WREN_GRAPHICS_SET_ON_ISLAND_X_FOR_TAKEN_PHOTO },
        { "SAVE_HIGH_QUALITY_PHOTO(_)", WREN_GRAPHICS_SAVE_HIGH_QUALITY_PHOTO },
        { "GET_STATUS_OF_SAVE_HIGH_QUALITY_PHOTO()", WREN_GRAPHICS_GET_STATUS_OF_SAVE_HIGH_QUALITY_PHOTO },
        { "BEGIN_CREATE_LOW_QUALITY_COPY_OF_PHOTO(_)", WREN_GRAPHICS_BEGIN_CREATE_LOW_QUALITY_COPY_OF_PHOTO },
        { "GET_STATUS_OF_CREATE_LOW_QUALITY_COPY_OF_PHOTO(_)", WREN_GRAPHICS_GET_STATUS_OF_CREATE_LOW_QUALITY_COPY_OF_PHOTO },
        { "FREE_MEMORY_FOR_LOW_QUALITY_PHOTO()", WREN_GRAPHICS_FREE_MEMORY_FOR_LOW_QUALITY_PHOTO },
        { "DRAW_LOW_QUALITY_PHOTO_TO_PHONE(_,_)", WREN_GRAPHICS_DRAW_LOW_QUALITY_PHOTO_TO_PHONE },
        { "GET_MAXIMUM_NUMBER_OF_PHOTOS()", WREN_GRAPHICS_GET_MAXIMUM_NUMBER_OF_PHOTOS },
        { "GET_MAXIMUM_NUMBER_OF_CLOUD_PHOTOS()", WREN_GRAPHICS_GET_MAXIMUM_NUMBER_OF_CLOUD_PHOTOS },
        { "GET_CURRENT_NUMBER_OF_CLOUD_PHOTOS()", WREN_GRAPHICS_GET_CURRENT_NUMBER_OF_CLOUD_PHOTOS },
        { "QUEUE_OPERATION_TO_CREATE_SORTED_LIST_OF_PHOTOS(_)", WREN_GRAPHICS_QUEUE_OPERATION_TO_CREATE_SORTED_LIST_OF_PHOTOS },
        { "GET_STATUS_OF_SORTED_LIST_OPERATION(_)", WREN_GRAPHICS_GET_STATUS_OF_SORTED_LIST_OPERATION },
        { "CLEAR_STATUS_OF_SORTED_LIST_OPERATION()", WREN_GRAPHICS_CLEAR_STATUS_OF_SORTED_LIST_OPERATION },
        { "DOES_THIS_PHOTO_SLOT_CONTAIN_A_VALID_PHOTO(_)", WREN_GRAPHICS_DOES_THIS_PHOTO_SLOT_CONTAIN_A_VALID_PHOTO },
        { "LOAD_HIGH_QUALITY_PHOTO(_)", WREN_GRAPHICS_LOAD_HIGH_QUALITY_PHOTO },
        { "GET_LOAD_HIGH_QUALITY_PHOTO_STATUS(_)", WREN_GRAPHICS_GET_LOAD_HIGH_QUALITY_PHOTO_STATUS },
        { "DRAW_LIGHT_WITH_RANGEEX(_,_,_,_,_,_,_,_,_)", WREN_GRAPHICS_DRAW_LIGHT_WITH_RANGEEX },
        { "DRAW_LIGHT_WITH_RANGE(_,_,_,_,_,_,_,_)", WREN_GRAPHICS_DRAW_LIGHT_WITH_RANGE },
        { "DRAW_SPOT_LIGHT(_,_,_,_,_,_,_,_,_,_,_,_,_,_)", WREN_GRAPHICS_DRAW_SPOT_LIGHT },
        { "DRAW_SHADOWED_SPOT_LIGHT(_,_,_,_,_,_,_,_,_,_,_,_,_,_,_)", WREN_GRAPHICS_DRAW_SHADOWED_SPOT_LIGHT },
        { "FADE_UP_PED_LIGHT(_)", WREN_GRAPHICS_FADE_UP_PED_LIGHT },
        { "UPDATE_LIGHTS_ON_ENTITY(_)", WREN_GRAPHICS_UPDATE_LIGHTS_ON_ENTITY },
        { "SET_LIGHT_OVERRIDE_MAX_INTENSITY_SCALE(_)", WREN_GRAPHICS_SET_LIGHT_OVERRIDE_MAX_INTENSITY_SCALE },
        { "GET_LIGHT_OVERRIDE_MAX_INTENSITY_SCALE()", WREN_GRAPHICS_GET_LIGHT_OVERRIDE_MAX_INTENSITY_SCALE },
        { "DRAW_MARKER(_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_)", WREN_GRAPHICS_DRAW_MARKER },
        { "DRAW_MARKER_EX(_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_)", WREN_GRAPHICS_DRAW_MARKER_EX },
        { "DRAW_MARKER_SPHERE(_,_,_,_,_,_,_,_)", WREN_GRAPHICS_DRAW_MARKER_SPHERE },
        { "CREATE_CHECKPOINT(_,_,_,_,_,_,_,_,_,_,_,_,_)", WREN_GRAPHICS_CREATE_CHECKPOINT },
        { "SET_CHECKPOINT_INSIDE_CYLINDER_HEIGHT_SCALE(_,_)", WREN_GRAPHICS_SET_CHECKPOINT_INSIDE_CYLINDER_HEIGHT_SCALE },
        { "SET_CHECKPOINT_INSIDE_CYLINDER_SCALE(_,_)", WREN_GRAPHICS_SET_CHECKPOINT_INSIDE_CYLINDER_SCALE },
        { "SET_CHECKPOINT_CYLINDER_HEIGHT(_,_,_,_)", WREN_GRAPHICS_SET_CHECKPOINT_CYLINDER_HEIGHT },
        { "SET_CHECKPOINT_RGBA(_,_,_,_,_)", WREN_GRAPHICS_SET_CHECKPOINT_RGBA },
        { "SET_CHECKPOINT_RGBA2(_,_,_,_,_)", WREN_GRAPHICS_SET_CHECKPOINT_RGBA2 },
        { "SET_CHECKPOINT_CLIPPLANE_WITH_POS_NORM(_,_,_,_,_,_,_)", WREN_GRAPHICS_SET_CHECKPOINT_CLIPPLANE_WITH_POS_NORM },
        { "SET_CHECKPOINT_FORCE_OLD_ARROW_POINTING(_)", WREN_GRAPHICS_SET_CHECKPOINT_FORCE_OLD_ARROW_POINTING },
        { "SET_CHECKPOINT_DECAL_ROT_ALIGNED_TO_CAMERA_ROT(_)", WREN_GRAPHICS_SET_CHECKPOINT_DECAL_ROT_ALIGNED_TO_CAMERA_ROT },
        { "SET_CHECKPOINT_FORCE_DIRECTION(_)", WREN_GRAPHICS_SET_CHECKPOINT_FORCE_DIRECTION },
        { "SET_CHECKPOINT_DIRECTION(_,_,_,_)", WREN_GRAPHICS_SET_CHECKPOINT_DIRECTION },
        { "DELETE_CHECKPOINT(_)", WREN_GRAPHICS_DELETE_CHECKPOINT },
        { "DONT_RENDER_IN_GAME_UI(_)", WREN_GRAPHICS_DONT_RENDER_IN_GAME_UI },
        { "FORCE_RENDER_IN_GAME_UI(_)", WREN_GRAPHICS_FORCE_RENDER_IN_GAME_UI },
        { "REQUEST_STREAMED_TEXTURE_DICT(_,_)", WREN_GRAPHICS_REQUEST_STREAMED_TEXTURE_DICT },
        { "HAS_STREAMED_TEXTURE_DICT_LOADED(_)", WREN_GRAPHICS_HAS_STREAMED_TEXTURE_DICT_LOADED },
        { "SET_STREAMED_TEXTURE_DICT_AS_NO_LONGER_NEEDED(_)", WREN_GRAPHICS_SET_STREAMED_TEXTURE_DICT_AS_NO_LONGER_NEEDED },
        { "DRAW_RECT(_,_,_,_,_,_,_,_,_)", WREN_GRAPHICS_DRAW_RECT },
        { "SET_SCRIPT_GFX_DRAW_BEHIND_PAUSEMENU(_)", WREN_GRAPHICS_SET_SCRIPT_GFX_DRAW_BEHIND_PAUSEMENU },
        { "SET_SCRIPT_GFX_DRAW_ORDER(_)", WREN_GRAPHICS_SET_SCRIPT_GFX_DRAW_ORDER },
        { "SET_SCRIPT_GFX_ALIGN(_,_)", WREN_GRAPHICS_SET_SCRIPT_GFX_ALIGN },
        { "RESET_SCRIPT_GFX_ALIGN()", WREN_GRAPHICS_RESET_SCRIPT_GFX_ALIGN },
        { "SET_SCRIPT_GFX_ALIGN_PARAMS(_,_,_,_)", WREN_GRAPHICS_SET_SCRIPT_GFX_ALIGN_PARAMS },
        { "GET_SCRIPT_GFX_ALIGN_POSITION(_,_)", WREN_GRAPHICS_GET_SCRIPT_GFX_ALIGN_POSITION },
        { "GET_SAFE_ZONE_SIZE()", WREN_GRAPHICS_GET_SAFE_ZONE_SIZE },
        { "DRAW_SPRITE(_,_,_,_,_,_,_,_,_,_,_,_,_)", WREN_GRAPHICS_DRAW_SPRITE },
        { "DRAW_SPRITE_ARX(_,_,_,_,_,_,_,_,_,_,_,_,_)", WREN_GRAPHICS_DRAW_SPRITE_ARX },
        { "DRAW_SPRITE_NAMED_RENDERTARGET(_,_,_,_,_,_,_,_,_,_,_,_)", WREN_GRAPHICS_DRAW_SPRITE_NAMED_RENDERTARGET },
        { "DRAW_SPRITE_ARX_WITH_UV(_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_)", WREN_GRAPHICS_DRAW_SPRITE_ARX_WITH_UV },
        { "ADD_ENTITY_ICON(_,_)", WREN_GRAPHICS_ADD_ENTITY_ICON },
        { "SET_ENTITY_ICON_VISIBILITY(_,_)", WREN_GRAPHICS_SET_ENTITY_ICON_VISIBILITY },
        { "SET_ENTITY_ICON_COLOR(_,_,_,_,_)", WREN_GRAPHICS_SET_ENTITY_ICON_COLOR },
        { "SET_DRAW_ORIGIN(_,_,_,_)", WREN_GRAPHICS_SET_DRAW_ORIGIN },
        { "CLEAR_DRAW_ORIGIN()", WREN_GRAPHICS_CLEAR_DRAW_ORIGIN },
        { "SET_BINK_MOVIE(_)", WREN_GRAPHICS_SET_BINK_MOVIE },
        { "PLAY_BINK_MOVIE(_)", WREN_GRAPHICS_PLAY_BINK_MOVIE },
        { "STOP_BINK_MOVIE(_)", WREN_GRAPHICS_STOP_BINK_MOVIE },
        { "RELEASE_BINK_MOVIE(_)", WREN_GRAPHICS_RELEASE_BINK_MOVIE },
        { "DRAW_BINK_MOVIE(_,_,_,_,_,_,_,_,_,_)", WREN_GRAPHICS_DRAW_BINK_MOVIE },
        { "SET_BINK_MOVIE_TIME(_,_)", WREN_GRAPHICS_SET_BINK_MOVIE_TIME },
        { "GET_BINK_MOVIE_TIME(_)", WREN_GRAPHICS_GET_BINK_MOVIE_TIME },
        { "SET_BINK_MOVIE_VOLUME(_,_)", WREN_GRAPHICS_SET_BINK_MOVIE_VOLUME },
        { "ATTACH_TV_AUDIO_TO_ENTITY(_)", WREN_GRAPHICS_ATTACH_TV_AUDIO_TO_ENTITY },
        { "SET_BINK_MOVIE_AUDIO_FRONTEND(_,_)", WREN_GRAPHICS_SET_BINK_MOVIE_AUDIO_FRONTEND },
        { "SET_TV_AUDIO_FRONTEND(_)", WREN_GRAPHICS_SET_TV_AUDIO_FRONTEND },
        { "SET_BINK_SHOULD_SKIP(_,_)", WREN_GRAPHICS_SET_BINK_SHOULD_SKIP },
        { "LOAD_MOVIE_MESH_SET(_)", WREN_GRAPHICS_LOAD_MOVIE_MESH_SET },
        { "RELEASE_MOVIE_MESH_SET(_)", WREN_GRAPHICS_RELEASE_MOVIE_MESH_SET },
        { "QUERY_MOVIE_MESH_SET_STATE(_)", WREN_GRAPHICS_QUERY_MOVIE_MESH_SET_STATE },
        { "GET_SCREEN_RESOLUTION()", WREN_GRAPHICS_GET_SCREEN_RESOLUTION },
        { "GET_ACTUAL_SCREEN_RESOLUTION()", WREN_GRAPHICS_GET_ACTUAL_SCREEN_RESOLUTION },
        { "GET_ASPECT_RATIO(_)", WREN_GRAPHICS_GET_ASPECT_RATIO },
        { "GET_SCREEN_ASPECT_RATIO()", WREN_GRAPHICS_GET_SCREEN_ASPECT_RATIO },
        { "GET_IS_WIDESCREEN()", WREN_GRAPHICS_GET_IS_WIDESCREEN },
        { "GET_IS_HIDEF()", WREN_GRAPHICS_GET_IS_HIDEF },
        { "ADJUST_NEXT_POS_SIZE_AS_NORMALIZED_16_9()", WREN_GRAPHICS_ADJUST_NEXT_POS_SIZE_AS_NORMALIZED_16_9 },
        { "SET_NIGHTVISION(_)", WREN_GRAPHICS_SET_NIGHTVISION },
        { "GET_REQUESTINGNIGHTVISION()", WREN_GRAPHICS_GET_REQUESTINGNIGHTVISION },
        { "GET_USINGNIGHTVISION()", WREN_GRAPHICS_GET_USINGNIGHTVISION },
        { "SET_EXPOSURETWEAK(_)", WREN_GRAPHICS_SET_EXPOSURETWEAK },
        { "FORCE_EXPOSURE_READBACK(_)", WREN_GRAPHICS_FORCE_EXPOSURE_READBACK },
        { "OVERRIDE_NIGHTVISION_LIGHT_RANGE(_)", WREN_GRAPHICS_OVERRIDE_NIGHTVISION_LIGHT_RANGE },
        { "SET_NOISEOVERIDE(_)", WREN_GRAPHICS_SET_NOISEOVERIDE },
        { "SET_NOISINESSOVERIDE(_)", WREN_GRAPHICS_SET_NOISINESSOVERIDE },
        { "GET_SCREEN_COORD_FROM_WORLD_COORD(_,_,_)", WREN_GRAPHICS_GET_SCREEN_COORD_FROM_WORLD_COORD },
        { "GET_TEXTURE_RESOLUTION(_,_)", WREN_GRAPHICS_GET_TEXTURE_RESOLUTION },
        { "OVERRIDE_PED_CREW_LOGO_TEXTURE(_,_,_)", WREN_GRAPHICS_OVERRIDE_PED_CREW_LOGO_TEXTURE },
        { "SET_DISTANCE_BLUR_STRENGTH_OVERRIDE(_)", WREN_GRAPHICS_SET_DISTANCE_BLUR_STRENGTH_OVERRIDE },
        { "SET_FLASH(_,_,_,_,_)", WREN_GRAPHICS_SET_FLASH },
        { "DISABLE_OCCLUSION_THIS_FRAME()", WREN_GRAPHICS_DISABLE_OCCLUSION_THIS_FRAME },
        { "SET_ARTIFICIAL_LIGHTS_STATE(_)", WREN_GRAPHICS_SET_ARTIFICIAL_LIGHTS_STATE },
        { "SET_ARTIFICIAL_VEHICLE_LIGHTS_STATE(_)", WREN_GRAPHICS_SET_ARTIFICIAL_VEHICLE_LIGHTS_STATE },
        { "DISABLE_HDTEX_THIS_FRAME()", WREN_GRAPHICS_DISABLE_HDTEX_THIS_FRAME },
        { "CREATE_TRACKED_POINT()", WREN_GRAPHICS_CREATE_TRACKED_POINT },
        { "SET_TRACKED_POINT_INFO(_,_,_,_,_)", WREN_GRAPHICS_SET_TRACKED_POINT_INFO },
        { "IS_TRACKED_POINT_VISIBLE(_)", WREN_GRAPHICS_IS_TRACKED_POINT_VISIBLE },
        { "DESTROY_TRACKED_POINT(_)", WREN_GRAPHICS_DESTROY_TRACKED_POINT },
        { "SET_GRASS_CULL_SPHERE(_,_,_,_)", WREN_GRAPHICS_SET_GRASS_CULL_SPHERE },
        { "REMOVE_GRASS_CULL_SPHERE(_)", WREN_GRAPHICS_REMOVE_GRASS_CULL_SPHERE },
        { "PROCGRASS_ENABLE_CULLSPHERE(_,_,_,_,_)", WREN_GRAPHICS_PROCGRASS_ENABLE_CULLSPHERE },
        { "PROCGRASS_DISABLE_CULLSPHERE(_)", WREN_GRAPHICS_PROCGRASS_DISABLE_CULLSPHERE },
        { "PROCGRASS_IS_CULLSPHERE_ENABLED(_)", WREN_GRAPHICS_PROCGRASS_IS_CULLSPHERE_ENABLED },
        { "PROCGRASS_ENABLE_AMBSCALESCAN()", WREN_GRAPHICS_PROCGRASS_ENABLE_AMBSCALESCAN },
        { "PROCGRASS_DISABLE_AMBSCALESCAN()", WREN_GRAPHICS_PROCGRASS_DISABLE_AMBSCALESCAN },
        { "DISABLE_PROCOBJ_CREATION()", WREN_GRAPHICS_DISABLE_PROCOBJ_CREATION },
        { "ENABLE_PROCOBJ_CREATION()", WREN_GRAPHICS_ENABLE_PROCOBJ_CREATION },
        { "GRASSBATCH_ENABLE_FLATTENING_EXT_IN_SPHERE(_,_,_,_,_,_,_,_)", WREN_GRAPHICS_GRASSBATCH_ENABLE_FLATTENING_EXT_IN_SPHERE },
        { "GRASSBATCH_ENABLE_FLATTENING_IN_SPHERE(_,_,_,_,_,_,_)", WREN_GRAPHICS_GRASSBATCH_ENABLE_FLATTENING_IN_SPHERE },
        { "GRASSBATCH_DISABLE_FLATTENING()", WREN_GRAPHICS_GRASSBATCH_DISABLE_FLATTENING },
        { "CASCADE_SHADOWS_INIT_SESSION()", WREN_GRAPHICS_CASCADE_SHADOWS_INIT_SESSION },
        { "CASCADE_SHADOWS_SET_CASCADE_BOUNDS(_,_,_,_,_,_,_,_)", WREN_GRAPHICS_CASCADE_SHADOWS_SET_CASCADE_BOUNDS },
        { "CASCADE_SHADOWS_SET_CASCADE_BOUNDS_SCALE(_)", WREN_GRAPHICS_CASCADE_SHADOWS_SET_CASCADE_BOUNDS_SCALE },
        { "CASCADE_SHADOWS_SET_ENTITY_TRACKER_SCALE(_)", WREN_GRAPHICS_CASCADE_SHADOWS_SET_ENTITY_TRACKER_SCALE },
        { "CASCADE_SHADOWS_SET_SPLIT_Z_EXP_WEIGHT(_)", WREN_GRAPHICS_CASCADE_SHADOWS_SET_SPLIT_Z_EXP_WEIGHT },
        { "CASCADE_SHADOWS_SET_BOUND_POSITION(_)", WREN_GRAPHICS_CASCADE_SHADOWS_SET_BOUND_POSITION },
        { "CASCADE_SHADOWS_ENABLE_ENTITY_TRACKER(_)", WREN_GRAPHICS_CASCADE_SHADOWS_ENABLE_ENTITY_TRACKER },
        { "CASCADE_SHADOWS_SET_SCREEN_SIZE_CHECK_ENABLED(_)", WREN_GRAPHICS_CASCADE_SHADOWS_SET_SCREEN_SIZE_CHECK_ENABLED },
        { "CASCADE_SHADOWS_SET_SHADOW_SAMPLE_TYPE(_)", WREN_GRAPHICS_CASCADE_SHADOWS_SET_SHADOW_SAMPLE_TYPE },
        { "CASCADE_SHADOWS_CLEAR_SHADOW_SAMPLE_TYPE()", WREN_GRAPHICS_CASCADE_SHADOWS_CLEAR_SHADOW_SAMPLE_TYPE },
        { "CASCADE_SHADOWS_SET_AIRCRAFT_MODE(_)", WREN_GRAPHICS_CASCADE_SHADOWS_SET_AIRCRAFT_MODE },
        { "CASCADE_SHADOWS_SET_DYNAMIC_DEPTH_MODE(_)", WREN_GRAPHICS_CASCADE_SHADOWS_SET_DYNAMIC_DEPTH_MODE },
        { "CASCADE_SHADOWS_SET_DYNAMIC_DEPTH_VALUE(_)", WREN_GRAPHICS_CASCADE_SHADOWS_SET_DYNAMIC_DEPTH_VALUE },
        { "CASCADE_SHADOWS_ENABLE_FREEZER(_)", WREN_GRAPHICS_CASCADE_SHADOWS_ENABLE_FREEZER },
        { "WATER_REFLECTION_SET_SCRIPT_OBJECT_VISIBILITY(_)", WREN_GRAPHICS_WATER_REFLECTION_SET_SCRIPT_OBJECT_VISIBILITY },
        { "GOLF_TRAIL_SET_ENABLED(_)", WREN_GRAPHICS_GOLF_TRAIL_SET_ENABLED },
        { "GOLF_TRAIL_SET_PATH(_,_,_,_,_,_,_,_,_)", WREN_GRAPHICS_GOLF_TRAIL_SET_PATH },
        { "GOLF_TRAIL_SET_RADIUS(_,_,_)", WREN_GRAPHICS_GOLF_TRAIL_SET_RADIUS },
        { "GOLF_TRAIL_SET_COLOUR(_,_,_,_,_,_,_,_,_,_,_,_)", WREN_GRAPHICS_GOLF_TRAIL_SET_COLOUR },
        { "GOLF_TRAIL_SET_TESSELLATION(_,_)", WREN_GRAPHICS_GOLF_TRAIL_SET_TESSELLATION },
        { "GOLF_TRAIL_SET_FIXED_CONTROL_POINT_ENABLE(_)", WREN_GRAPHICS_GOLF_TRAIL_SET_FIXED_CONTROL_POINT_ENABLE },
        { "GOLF_TRAIL_SET_FIXED_CONTROL_POINT(_,_,_,_,_,_,_,_,_)", WREN_GRAPHICS_GOLF_TRAIL_SET_FIXED_CONTROL_POINT },
        { "GOLF_TRAIL_SET_SHADER_PARAMS(_,_,_,_,_)", WREN_GRAPHICS_GOLF_TRAIL_SET_SHADER_PARAMS },
        { "GOLF_TRAIL_SET_FACING(_)", WREN_GRAPHICS_GOLF_TRAIL_SET_FACING },
        { "GOLF_TRAIL_GET_MAX_HEIGHT()", WREN_GRAPHICS_GOLF_TRAIL_GET_MAX_HEIGHT },
        { "GOLF_TRAIL_GET_VISUAL_CONTROL_POINT(_)", WREN_GRAPHICS_GOLF_TRAIL_GET_VISUAL_CONTROL_POINT },
        { "SET_SEETHROUGH(_)", WREN_GRAPHICS_SET_SEETHROUGH },
        { "GET_USINGSEETHROUGH()", WREN_GRAPHICS_GET_USINGSEETHROUGH },
        { "SEETHROUGH_RESET()", WREN_GRAPHICS_SEETHROUGH_RESET },
        { "SEETHROUGH_SET_FADE_STARTDISTANCE(_)", WREN_GRAPHICS_SEETHROUGH_SET_FADE_STARTDISTANCE },
        { "SEETHROUGH_SET_FADE_ENDDISTANCE(_)", WREN_GRAPHICS_SEETHROUGH_SET_FADE_ENDDISTANCE },
        { "SEETHROUGH_GET_MAX_THICKNESS()", WREN_GRAPHICS_SEETHROUGH_GET_MAX_THICKNESS },
        { "SEETHROUGH_SET_MAX_THICKNESS(_)", WREN_GRAPHICS_SEETHROUGH_SET_MAX_THICKNESS },
        { "SEETHROUGH_SET_NOISE_MIN(_)", WREN_GRAPHICS_SEETHROUGH_SET_NOISE_MIN },
        { "SEETHROUGH_SET_NOISE_MAX(_)", WREN_GRAPHICS_SEETHROUGH_SET_NOISE_MAX },
        { "SEETHROUGH_SET_HILIGHT_INTENSITY(_)", WREN_GRAPHICS_SEETHROUGH_SET_HILIGHT_INTENSITY },
        { "SEETHROUGH_SET_HIGHLIGHT_NOISE(_)", WREN_GRAPHICS_SEETHROUGH_SET_HIGHLIGHT_NOISE },
        { "SEETHROUGH_SET_HEATSCALE(_,_)", WREN_GRAPHICS_SEETHROUGH_SET_HEATSCALE },
        { "SEETHROUGH_SET_COLOR_NEAR(_,_,_)", WREN_GRAPHICS_SEETHROUGH_SET_COLOR_NEAR },
        { "SET_MOTIONBLUR_MAX_VEL_SCALER(_)", WREN_GRAPHICS_SET_MOTIONBLUR_MAX_VEL_SCALER },
        { "GET_MOTIONBLUR_MAX_VEL_SCALER()", WREN_GRAPHICS_GET_MOTIONBLUR_MAX_VEL_SCALER },
        { "SET_FORCE_MOTIONBLUR(_)", WREN_GRAPHICS_SET_FORCE_MOTIONBLUR },
        { "TOGGLE_PLAYER_DAMAGE_OVERLAY(_)", WREN_GRAPHICS_TOGGLE_PLAYER_DAMAGE_OVERLAY },
        { "RESET_ADAPTATION(_)", WREN_GRAPHICS_RESET_ADAPTATION },
        { "TRIGGER_SCREENBLUR_FADE_IN(_)", WREN_GRAPHICS_TRIGGER_SCREENBLUR_FADE_IN },
        { "TRIGGER_SCREENBLUR_FADE_OUT(_)", WREN_GRAPHICS_TRIGGER_SCREENBLUR_FADE_OUT },
        { "DISABLE_SCREENBLUR_FADE()", WREN_GRAPHICS_DISABLE_SCREENBLUR_FADE },
        { "GET_SCREENBLUR_FADE_CURRENT_TIME()", WREN_GRAPHICS_GET_SCREENBLUR_FADE_CURRENT_TIME },
        { "IS_SCREENBLUR_FADE_RUNNING()", WREN_GRAPHICS_IS_SCREENBLUR_FADE_RUNNING },
        { "TOGGLE_PAUSED_RENDERPHASES(_)", WREN_GRAPHICS_TOGGLE_PAUSED_RENDERPHASES },
        { "GET_TOGGLE_PAUSED_RENDERPHASES_STATUS()", WREN_GRAPHICS_GET_TOGGLE_PAUSED_RENDERPHASES_STATUS },
        { "RESET_PAUSED_RENDERPHASES()", WREN_GRAPHICS_RESET_PAUSED_RENDERPHASES },
        { "GRAB_PAUSEMENU_OWNERSHIP()", WREN_GRAPHICS_GRAB_PAUSEMENU_OWNERSHIP },
        { "SET_HIDOF_OVERRIDE(_,_,_,_,_,_)", WREN_GRAPHICS_SET_HIDOF_OVERRIDE },
        { "SET_LOCK_ADAPTIVE_DOF_DISTANCE(_)", WREN_GRAPHICS_SET_LOCK_ADAPTIVE_DOF_DISTANCE },
        { "PHONEPHOTOEDITOR_TOGGLE(_)", WREN_GRAPHICS_PHONEPHOTOEDITOR_TOGGLE },
        { "PHONEPHOTOEDITOR_IS_ACTIVE()", WREN_GRAPHICS_PHONEPHOTOEDITOR_IS_ACTIVE },
        { "PHONEPHOTOEDITOR_SET_FRAME_TXD(_,_)", WREN_GRAPHICS_PHONEPHOTOEDITOR_SET_FRAME_TXD },
        { "START_PARTICLE_FX_NON_LOOPED_AT_COORD(_,_,_,_,_,_,_,_,_,_,_)", WREN_GRAPHICS_START_PARTICLE_FX_NON_LOOPED_AT_COORD },
        { "START_NETWORKED_PARTICLE_FX_NON_LOOPED_AT_COORD(_,_,_,_,_,_,_,_,_,_,_,_)", WREN_GRAPHICS_START_NETWORKED_PARTICLE_FX_NON_LOOPED_AT_COORD },
        { "START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE(_,_,_,_,_,_,_,_,_,_,_,_,_)", WREN_GRAPHICS_START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE },
        { "START_NETWORKED_PARTICLE_FX_NON_LOOPED_ON_PED_BONE(_,_,_,_,_,_,_,_,_,_,_,_,_)", WREN_GRAPHICS_START_NETWORKED_PARTICLE_FX_NON_LOOPED_ON_PED_BONE },
        { "START_PARTICLE_FX_NON_LOOPED_ON_ENTITY(_,_,_,_,_,_,_,_,_,_,_,_)", WREN_GRAPHICS_START_PARTICLE_FX_NON_LOOPED_ON_ENTITY },
        { "START_NETWORKED_PARTICLE_FX_NON_LOOPED_ON_ENTITY(_,_,_,_,_,_,_,_,_,_,_,_)", WREN_GRAPHICS_START_NETWORKED_PARTICLE_FX_NON_LOOPED_ON_ENTITY },
        { "START_PARTICLE_FX_NON_LOOPED_ON_ENTITY_BONE(_,_,_,_,_,_,_,_,_,_,_,_,_)", WREN_GRAPHICS_START_PARTICLE_FX_NON_LOOPED_ON_ENTITY_BONE },
        { "SET_PARTICLE_FX_NON_LOOPED_COLOUR(_,_,_)", WREN_GRAPHICS_SET_PARTICLE_FX_NON_LOOPED_COLOUR },
        { "SET_PARTICLE_FX_NON_LOOPED_ALPHA(_)", WREN_GRAPHICS_SET_PARTICLE_FX_NON_LOOPED_ALPHA },
        { "SET_PARTICLE_FX_NON_LOOPED_EMITTER_SIZE(_,_,_)", WREN_GRAPHICS_SET_PARTICLE_FX_NON_LOOPED_EMITTER_SIZE },
        { "SET_PARTICLE_FX_FORCE_VEHICLE_INTERIOR(_)", WREN_GRAPHICS_SET_PARTICLE_FX_FORCE_VEHICLE_INTERIOR },
        { "START_PARTICLE_FX_LOOPED_AT_COORD(_,_,_,_,_,_,_,_,_,_,_,_)", WREN_GRAPHICS_START_PARTICLE_FX_LOOPED_AT_COORD },
        { "START_PARTICLE_FX_LOOPED_ON_PED_BONE(_,_,_,_,_,_,_,_,_,_,_,_,_)", WREN_GRAPHICS_START_PARTICLE_FX_LOOPED_ON_PED_BONE },
        { "START_PARTICLE_FX_LOOPED_ON_ENTITY(_,_,_,_,_,_,_,_,_,_,_,_)", WREN_GRAPHICS_START_PARTICLE_FX_LOOPED_ON_ENTITY },
        { "START_PARTICLE_FX_LOOPED_ON_ENTITY_BONE(_,_,_,_,_,_,_,_,_,_,_,_,_)", WREN_GRAPHICS_START_PARTICLE_FX_LOOPED_ON_ENTITY_BONE },
        { "START_NETWORKED_PARTICLE_FX_LOOPED_ON_ENTITY(_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_)", WREN_GRAPHICS_START_NETWORKED_PARTICLE_FX_LOOPED_ON_ENTITY },
        { "START_NETWORKED_PARTICLE_FX_LOOPED_ON_ENTITY_BONE(_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_)", WREN_GRAPHICS_START_NETWORKED_PARTICLE_FX_LOOPED_ON_ENTITY_BONE },
        { "STOP_PARTICLE_FX_LOOPED(_,_)", WREN_GRAPHICS_STOP_PARTICLE_FX_LOOPED },
        { "REMOVE_PARTICLE_FX(_,_)", WREN_GRAPHICS_REMOVE_PARTICLE_FX },
        { "REMOVE_PARTICLE_FX_FROM_ENTITY(_)", WREN_GRAPHICS_REMOVE_PARTICLE_FX_FROM_ENTITY },
        { "REMOVE_PARTICLE_FX_IN_RANGE(_,_,_,_)", WREN_GRAPHICS_REMOVE_PARTICLE_FX_IN_RANGE },
        { "FORCE_PARTICLE_FX_IN_VEHICLE_INTERIOR(_,_)", WREN_GRAPHICS_FORCE_PARTICLE_FX_IN_VEHICLE_INTERIOR },
        { "DOES_PARTICLE_FX_LOOPED_EXIST(_)", WREN_GRAPHICS_DOES_PARTICLE_FX_LOOPED_EXIST },
        { "SET_PARTICLE_FX_LOOPED_OFFSETS(_,_,_,_,_,_,_)", WREN_GRAPHICS_SET_PARTICLE_FX_LOOPED_OFFSETS },
        { "SET_PARTICLE_FX_LOOPED_EVOLUTION(_,_,_,_)", WREN_GRAPHICS_SET_PARTICLE_FX_LOOPED_EVOLUTION },
        { "SET_PARTICLE_FX_LOOPED_COLOUR(_,_,_,_,_)", WREN_GRAPHICS_SET_PARTICLE_FX_LOOPED_COLOUR },
        { "SET_PARTICLE_FX_LOOPED_ALPHA(_,_)", WREN_GRAPHICS_SET_PARTICLE_FX_LOOPED_ALPHA },
        { "SET_PARTICLE_FX_LOOPED_SCALE(_,_)", WREN_GRAPHICS_SET_PARTICLE_FX_LOOPED_SCALE },
        { "SET_PARTICLE_FX_LOOPED_FAR_CLIP_DIST(_,_)", WREN_GRAPHICS_SET_PARTICLE_FX_LOOPED_FAR_CLIP_DIST },
        { "SET_PARTICLE_FX_CAM_INSIDE_VEHICLE(_)", WREN_GRAPHICS_SET_PARTICLE_FX_CAM_INSIDE_VEHICLE },
        { "SET_PARTICLE_FX_CAM_INSIDE_NONPLAYER_VEHICLE(_,_)", WREN_GRAPHICS_SET_PARTICLE_FX_CAM_INSIDE_NONPLAYER_VEHICLE },
        { "SET_PARTICLE_FX_SHOOTOUT_BOAT(_)", WREN_GRAPHICS_SET_PARTICLE_FX_SHOOTOUT_BOAT },
        { "CLEAR_PARTICLE_FX_SHOOTOUT_BOAT()", WREN_GRAPHICS_CLEAR_PARTICLE_FX_SHOOTOUT_BOAT },
        { "SET_PARTICLE_FX_BLOOD_SCALE(_)", WREN_GRAPHICS_SET_PARTICLE_FX_BLOOD_SCALE },
        { "DISABLE_IN_WATER_PTFX(_)", WREN_GRAPHICS_DISABLE_IN_WATER_PTFX },
        { "DISABLE_DOWNWASH_PTFX(_)", WREN_GRAPHICS_DISABLE_DOWNWASH_PTFX },
        { "SET_PARTICLE_FX_SLIPSTREAM_LODRANGE_SCALE(_)", WREN_GRAPHICS_SET_PARTICLE_FX_SLIPSTREAM_LODRANGE_SCALE },
        { "ENABLE_CLOWN_BLOOD_VFX(_)", WREN_GRAPHICS_ENABLE_CLOWN_BLOOD_VFX },
        { "ENABLE_ALIEN_BLOOD_VFX(_)", WREN_GRAPHICS_ENABLE_ALIEN_BLOOD_VFX },
        { "SET_PARTICLE_FX_BULLET_IMPACT_SCALE(_)", WREN_GRAPHICS_SET_PARTICLE_FX_BULLET_IMPACT_SCALE },
        { "SET_PARTICLE_FX_BULLET_IMPACT_LODRANGE_SCALE(_)", WREN_GRAPHICS_SET_PARTICLE_FX_BULLET_IMPACT_LODRANGE_SCALE },
        { "SET_PARTICLE_FX_BULLET_TRACE_NO_ANGLE_REJECT(_)", WREN_GRAPHICS_SET_PARTICLE_FX_BULLET_TRACE_NO_ANGLE_REJECT },
        { "SET_PARTICLE_FX_BANG_SCRAPE_LODRANGE_SCALE(_)", WREN_GRAPHICS_SET_PARTICLE_FX_BANG_SCRAPE_LODRANGE_SCALE },
        { "SET_PARTICLE_FX_FOOT_LODRANGE_SCALE(_)", WREN_GRAPHICS_SET_PARTICLE_FX_FOOT_LODRANGE_SCALE },
        { "SET_PARTICLE_FX_FOOT_OVERRIDE_NAME(_)", WREN_GRAPHICS_SET_PARTICLE_FX_FOOT_OVERRIDE_NAME },
        { "SET_SKIDMARK_RANGE_SCALE(_)", WREN_GRAPHICS_SET_SKIDMARK_RANGE_SCALE },
        { "SET_PTFX_FORCE_VEHICLE_INTERIOR_FLAG(_)", WREN_GRAPHICS_SET_PTFX_FORCE_VEHICLE_INTERIOR_FLAG },
        { "FORCE_POSTFX_BULLET_IMPACTS_AFTER_HUD(_)", WREN_GRAPHICS_FORCE_POSTFX_BULLET_IMPACTS_AFTER_HUD },
        { "USE_PARTICLE_FX_ASSET(_)", WREN_GRAPHICS_USE_PARTICLE_FX_ASSET },
        { "SET_PARTICLE_FX_OVERRIDE(_,_)", WREN_GRAPHICS_SET_PARTICLE_FX_OVERRIDE },
        { "RESET_PARTICLE_FX_OVERRIDE(_)", WREN_GRAPHICS_RESET_PARTICLE_FX_OVERRIDE },
        { "SET_WEATHER_PTFX_USE_OVERRIDE_SETTINGS(_)", WREN_GRAPHICS_SET_WEATHER_PTFX_USE_OVERRIDE_SETTINGS },
        { "SET_WEATHER_PTFX_OVERRIDE_CURR_LEVEL(_)", WREN_GRAPHICS_SET_WEATHER_PTFX_OVERRIDE_CURR_LEVEL },
        { "WASH_DECALS_IN_RANGE(_,_,_,_,_)", WREN_GRAPHICS_WASH_DECALS_IN_RANGE },
        { "WASH_DECALS_FROM_VEHICLE(_,_)", WREN_GRAPHICS_WASH_DECALS_FROM_VEHICLE },
        { "FADE_DECALS_IN_RANGE(_,_,_,_,_)", WREN_GRAPHICS_FADE_DECALS_IN_RANGE },
        { "REMOVE_DECALS_IN_RANGE(_,_,_,_)", WREN_GRAPHICS_REMOVE_DECALS_IN_RANGE },
        { "REMOVE_DECALS_FROM_OBJECT(_)", WREN_GRAPHICS_REMOVE_DECALS_FROM_OBJECT },
        { "REMOVE_DECALS_FROM_OBJECT_FACING(_,_,_,_)", WREN_GRAPHICS_REMOVE_DECALS_FROM_OBJECT_FACING },
        { "REMOVE_DECALS_FROM_VEHICLE(_)", WREN_GRAPHICS_REMOVE_DECALS_FROM_VEHICLE },
        { "ADD_DECAL(_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_)", WREN_GRAPHICS_ADD_DECAL },
        { "ADD_PETROL_DECAL(_,_,_,_,_,_)", WREN_GRAPHICS_ADD_PETROL_DECAL },
        { "ADD_OIL_DECAL(_,_,_,_,_,_)", WREN_GRAPHICS_ADD_OIL_DECAL },
        { "START_PETROL_TRAIL_DECALS(_)", WREN_GRAPHICS_START_PETROL_TRAIL_DECALS },
        { "ADD_PETROL_TRAIL_DECAL_INFO(_,_,_,_)", WREN_GRAPHICS_ADD_PETROL_TRAIL_DECAL_INFO },
        { "END_PETROL_TRAIL_DECALS()", WREN_GRAPHICS_END_PETROL_TRAIL_DECALS },
        { "REMOVE_DECAL(_)", WREN_GRAPHICS_REMOVE_DECAL },
        { "IS_DECAL_ALIVE(_)", WREN_GRAPHICS_IS_DECAL_ALIVE },
        { "GET_DECAL_WASH_LEVEL(_)", WREN_GRAPHICS_GET_DECAL_WASH_LEVEL },
        { "SET_DISABLE_PETROL_DECALS_IGNITING_THIS_FRAME()", WREN_GRAPHICS_SET_DISABLE_PETROL_DECALS_IGNITING_THIS_FRAME },
        { "SET_DISABLE_PETROL_DECALS_RECYCLING_THIS_FRAME()", WREN_GRAPHICS_SET_DISABLE_PETROL_DECALS_RECYCLING_THIS_FRAME },
        { "SET_DISABLE_DECAL_RENDERING_THIS_FRAME()", WREN_GRAPHICS_SET_DISABLE_DECAL_RENDERING_THIS_FRAME },
        { "GET_IS_PETROL_DECAL_IN_RANGE(_,_,_,_)", WREN_GRAPHICS_GET_IS_PETROL_DECAL_IN_RANGE },
        { "PATCH_DECAL_DIFFUSE_MAP(_,_,_)", WREN_GRAPHICS_PATCH_DECAL_DIFFUSE_MAP },
        { "UNPATCH_DECAL_DIFFUSE_MAP(_)", WREN_GRAPHICS_UNPATCH_DECAL_DIFFUSE_MAP },
        { "MOVE_VEHICLE_DECALS(_,_)", WREN_GRAPHICS_MOVE_VEHICLE_DECALS },
        { "ADD_VEHICLE_CREW_EMBLEM(_,_,_,_,_,_,_,_,_,_,_,_,_,_,_)", WREN_GRAPHICS_ADD_VEHICLE_CREW_EMBLEM },
        { "ABORT_VEHICLE_CREW_EMBLEM_REQUEST(_)", WREN_GRAPHICS_ABORT_VEHICLE_CREW_EMBLEM_REQUEST },
        { "REMOVE_VEHICLE_CREW_EMBLEM(_,_)", WREN_GRAPHICS_REMOVE_VEHICLE_CREW_EMBLEM },
        { "GET_VEHICLE_CREW_EMBLEM_REQUEST_STATE(_,_)", WREN_GRAPHICS_GET_VEHICLE_CREW_EMBLEM_REQUEST_STATE },
        { "DOES_VEHICLE_HAVE_CREW_EMBLEM(_,_)", WREN_GRAPHICS_DOES_VEHICLE_HAVE_CREW_EMBLEM },
        { "DISABLE_COMPOSITE_SHOTGUN_DECALS(_)", WREN_GRAPHICS_DISABLE_COMPOSITE_SHOTGUN_DECALS },
        { "DISABLE_SCUFF_DECALS(_)", WREN_GRAPHICS_DISABLE_SCUFF_DECALS },
        { "SET_DECAL_BULLET_IMPACT_RANGE_SCALE(_)", WREN_GRAPHICS_SET_DECAL_BULLET_IMPACT_RANGE_SCALE },
        { "OVERRIDE_INTERIOR_SMOKE_NAME(_)", WREN_GRAPHICS_OVERRIDE_INTERIOR_SMOKE_NAME },
        { "OVERRIDE_INTERIOR_SMOKE_LEVEL(_)", WREN_GRAPHICS_OVERRIDE_INTERIOR_SMOKE_LEVEL },
        { "OVERRIDE_INTERIOR_SMOKE_END()", WREN_GRAPHICS_OVERRIDE_INTERIOR_SMOKE_END },
        { "REGISTER_NOIR_LENS_EFFECT()", WREN_GRAPHICS_REGISTER_NOIR_LENS_EFFECT },
        { "DISABLE_VEHICLE_DISTANTLIGHTS(_)", WREN_GRAPHICS_DISABLE_VEHICLE_DISTANTLIGHTS },
        { "RENDER_SHADOWED_LIGHTS_WITH_NO_SHADOWS(_)", WREN_GRAPHICS_RENDER_SHADOWED_LIGHTS_WITH_NO_SHADOWS },
        { "REQUEST_EARLY_LIGHT_CHECK()", WREN_GRAPHICS_REQUEST_EARLY_LIGHT_CHECK },
        { "USE_SNOW_FOOT_VFX_WHEN_UNSHELTERED(_)", WREN_GRAPHICS_USE_SNOW_FOOT_VFX_WHEN_UNSHELTERED },
        { "USE_SNOW_WHEEL_VFX_WHEN_UNSHELTERED(_)", WREN_GRAPHICS_USE_SNOW_WHEEL_VFX_WHEN_UNSHELTERED },
        { "DISABLE_REGION_VFX(_)", WREN_GRAPHICS_DISABLE_REGION_VFX },
        { "PRESET_INTERIOR_AMBIENT_CACHE(_)", WREN_GRAPHICS_PRESET_INTERIOR_AMBIENT_CACHE },
        { "SET_TIMECYCLE_MODIFIER(_)", WREN_GRAPHICS_SET_TIMECYCLE_MODIFIER },
        { "SET_TIMECYCLE_MODIFIER_STRENGTH(_)", WREN_GRAPHICS_SET_TIMECYCLE_MODIFIER_STRENGTH },
        { "SET_TRANSITION_TIMECYCLE_MODIFIER(_,_)", WREN_GRAPHICS_SET_TRANSITION_TIMECYCLE_MODIFIER },
        { "SET_TRANSITION_OUT_OF_TIMECYCLE_MODIFIER(_)", WREN_GRAPHICS_SET_TRANSITION_OUT_OF_TIMECYCLE_MODIFIER },
        { "CLEAR_TIMECYCLE_MODIFIER()", WREN_GRAPHICS_CLEAR_TIMECYCLE_MODIFIER },
        { "GET_TIMECYCLE_MODIFIER_INDEX()", WREN_GRAPHICS_GET_TIMECYCLE_MODIFIER_INDEX },
        { "GET_TIMECYCLE_TRANSITION_MODIFIER_INDEX()", WREN_GRAPHICS_GET_TIMECYCLE_TRANSITION_MODIFIER_INDEX },
        { "GET_IS_TIMECYCLE_TRANSITIONING_OUT()", WREN_GRAPHICS_GET_IS_TIMECYCLE_TRANSITIONING_OUT },
        { "PUSH_TIMECYCLE_MODIFIER()", WREN_GRAPHICS_PUSH_TIMECYCLE_MODIFIER },
        { "POP_TIMECYCLE_MODIFIER()", WREN_GRAPHICS_POP_TIMECYCLE_MODIFIER },
        { "SET_CURRENT_PLAYER_TCMODIFIER(_)", WREN_GRAPHICS_SET_CURRENT_PLAYER_TCMODIFIER },
        { "SET_PLAYER_TCMODIFIER_TRANSITION(_)", WREN_GRAPHICS_SET_PLAYER_TCMODIFIER_TRANSITION },
        { "SET_NEXT_PLAYER_TCMODIFIER(_)", WREN_GRAPHICS_SET_NEXT_PLAYER_TCMODIFIER },
        { "ADD_TCMODIFIER_OVERRIDE(_,_)", WREN_GRAPHICS_ADD_TCMODIFIER_OVERRIDE },
        { "CLEAR_ALL_TCMODIFIER_OVERRIDES(_)", WREN_GRAPHICS_CLEAR_ALL_TCMODIFIER_OVERRIDES },
        { "SET_EXTRA_TCMODIFIER(_)", WREN_GRAPHICS_SET_EXTRA_TCMODIFIER },
        { "CLEAR_EXTRA_TCMODIFIER()", WREN_GRAPHICS_CLEAR_EXTRA_TCMODIFIER },
        { "GET_EXTRA_TCMODIFIER()", WREN_GRAPHICS_GET_EXTRA_TCMODIFIER },
        { "ENABLE_MOON_CYCLE_OVERRIDE(_)", WREN_GRAPHICS_ENABLE_MOON_CYCLE_OVERRIDE },
        { "DISABLE_MOON_CYCLE_OVERRIDE()", WREN_GRAPHICS_DISABLE_MOON_CYCLE_OVERRIDE },
        { "REQUEST_SCALEFORM_MOVIE(_)", WREN_GRAPHICS_REQUEST_SCALEFORM_MOVIE },
        { "REQUEST_SCALEFORM_MOVIE_WITH_IGNORE_SUPER_WIDESCREEN(_)", WREN_GRAPHICS_REQUEST_SCALEFORM_MOVIE_WITH_IGNORE_SUPER_WIDESCREEN },
        { "REQUEST_SCALEFORM_MOVIE_INSTANCE(_)", WREN_GRAPHICS_REQUEST_SCALEFORM_MOVIE_INSTANCE },
        { "REQUEST_SCALEFORM_MOVIE_SKIP_RENDER_WHILE_PAUSED(_)", WREN_GRAPHICS_REQUEST_SCALEFORM_MOVIE_SKIP_RENDER_WHILE_PAUSED },
        { "HAS_SCALEFORM_MOVIE_LOADED(_)", WREN_GRAPHICS_HAS_SCALEFORM_MOVIE_LOADED },
        { "IS_ACTIVE_SCALEFORM_MOVIE_DELETING(_)", WREN_GRAPHICS_IS_ACTIVE_SCALEFORM_MOVIE_DELETING },
        { "IS_SCALEFORM_MOVIE_DELETING(_)", WREN_GRAPHICS_IS_SCALEFORM_MOVIE_DELETING },
        { "HAS_SCALEFORM_MOVIE_FILENAME_LOADED(_)", WREN_GRAPHICS_HAS_SCALEFORM_MOVIE_FILENAME_LOADED },
        { "HAS_SCALEFORM_CONTAINER_MOVIE_LOADED_INTO_PARENT(_)", WREN_GRAPHICS_HAS_SCALEFORM_CONTAINER_MOVIE_LOADED_INTO_PARENT },
        { "SET_SCALEFORM_MOVIE_AS_NO_LONGER_NEEDED()", WREN_GRAPHICS_SET_SCALEFORM_MOVIE_AS_NO_LONGER_NEEDED },
        { "SET_SCALEFORM_MOVIE_TO_USE_SYSTEM_TIME(_,_)", WREN_GRAPHICS_SET_SCALEFORM_MOVIE_TO_USE_SYSTEM_TIME },
        { "SET_SCALEFORM_MOVIE_TO_USE_LARGE_RT(_,_)", WREN_GRAPHICS_SET_SCALEFORM_MOVIE_TO_USE_LARGE_RT },
        { "SET_SCALEFORM_MOVIE_TO_USE_SUPER_LARGE_RT(_,_)", WREN_GRAPHICS_SET_SCALEFORM_MOVIE_TO_USE_SUPER_LARGE_RT },
        { "DRAW_SCALEFORM_MOVIE(_,_,_,_,_,_,_,_,_,_)", WREN_GRAPHICS_DRAW_SCALEFORM_MOVIE },
        { "DRAW_SCALEFORM_MOVIE_FULLSCREEN(_,_,_,_,_,_)", WREN_GRAPHICS_DRAW_SCALEFORM_MOVIE_FULLSCREEN },
        { "DRAW_SCALEFORM_MOVIE_FULLSCREEN_MASKED(_,_,_,_,_,_)", WREN_GRAPHICS_DRAW_SCALEFORM_MOVIE_FULLSCREEN_MASKED },
        { "DRAW_SCALEFORM_MOVIE_3D(_,_,_,_,_,_,_,_,_,_,_,_,_,_)", WREN_GRAPHICS_DRAW_SCALEFORM_MOVIE_3D },
        { "DRAW_SCALEFORM_MOVIE_3D_SOLID(_,_,_,_,_,_,_,_,_,_,_,_,_,_)", WREN_GRAPHICS_DRAW_SCALEFORM_MOVIE_3D_SOLID },
        { "CALL_SCALEFORM_MOVIE_METHOD(_,_)", WREN_GRAPHICS_CALL_SCALEFORM_MOVIE_METHOD },
        { "CALL_SCALEFORM_MOVIE_METHOD_WITH_NUMBER(_,_,_,_,_,_,_)", WREN_GRAPHICS_CALL_SCALEFORM_MOVIE_METHOD_WITH_NUMBER },
        { "CALL_SCALEFORM_MOVIE_METHOD_WITH_STRING(_,_,_,_,_,_,_)", WREN_GRAPHICS_CALL_SCALEFORM_MOVIE_METHOD_WITH_STRING },
        { "CALL_SCALEFORM_MOVIE_METHOD_WITH_NUMBER_AND_STRING(_,_,_,_,_,_,_,_,_,_,_,_)", WREN_GRAPHICS_CALL_SCALEFORM_MOVIE_METHOD_WITH_NUMBER_AND_STRING },
        { "BEGIN_SCALEFORM_SCRIPT_HUD_MOVIE_METHOD(_,_)", WREN_GRAPHICS_BEGIN_SCALEFORM_SCRIPT_HUD_MOVIE_METHOD },
        { "BEGIN_SCALEFORM_MOVIE_METHOD(_,_)", WREN_GRAPHICS_BEGIN_SCALEFORM_MOVIE_METHOD },
        { "BEGIN_SCALEFORM_MOVIE_METHOD_ON_FRONTEND(_)", WREN_GRAPHICS_BEGIN_SCALEFORM_MOVIE_METHOD_ON_FRONTEND },
        { "BEGIN_SCALEFORM_MOVIE_METHOD_ON_FRONTEND_HEADER(_)", WREN_GRAPHICS_BEGIN_SCALEFORM_MOVIE_METHOD_ON_FRONTEND_HEADER },
        { "END_SCALEFORM_MOVIE_METHOD()", WREN_GRAPHICS_END_SCALEFORM_MOVIE_METHOD },
        { "END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE()", WREN_GRAPHICS_END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE },
        { "IS_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_READY(_)", WREN_GRAPHICS_IS_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_READY },
        { "GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT(_)", WREN_GRAPHICS_GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT },
        { "GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_BOOL(_)", WREN_GRAPHICS_GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_BOOL },
        { "GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_STRING(_)", WREN_GRAPHICS_GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_STRING },
        { "SCALEFORM_MOVIE_METHOD_ADD_PARAM_INT(_)", WREN_GRAPHICS_SCALEFORM_MOVIE_METHOD_ADD_PARAM_INT },
        { "SCALEFORM_MOVIE_METHOD_ADD_PARAM_FLOAT(_)", WREN_GRAPHICS_SCALEFORM_MOVIE_METHOD_ADD_PARAM_FLOAT },
        { "SCALEFORM_MOVIE_METHOD_ADD_PARAM_BOOL(_)", WREN_GRAPHICS_SCALEFORM_MOVIE_METHOD_ADD_PARAM_BOOL },
        { "BEGIN_TEXT_COMMAND_SCALEFORM_STRING(_)", WREN_GRAPHICS_BEGIN_TEXT_COMMAND_SCALEFORM_STRING },
        { "END_TEXT_COMMAND_SCALEFORM_STRING()", WREN_GRAPHICS_END_TEXT_COMMAND_SCALEFORM_STRING },
        { "END_TEXT_COMMAND_UNPARSED_SCALEFORM_STRING()", WREN_GRAPHICS_END_TEXT_COMMAND_UNPARSED_SCALEFORM_STRING },
        { "SCALEFORM_MOVIE_METHOD_ADD_PARAM_LITERAL_STRING(_)", WREN_GRAPHICS_SCALEFORM_MOVIE_METHOD_ADD_PARAM_LITERAL_STRING },
        { "SCALEFORM_MOVIE_METHOD_ADD_PARAM_TEXTURE_NAME_STRING(_)", WREN_GRAPHICS_SCALEFORM_MOVIE_METHOD_ADD_PARAM_TEXTURE_NAME_STRING },
        { "SCALEFORM_MOVIE_METHOD_ADD_PARAM_PLAYER_NAME_STRING(_)", WREN_GRAPHICS_SCALEFORM_MOVIE_METHOD_ADD_PARAM_PLAYER_NAME_STRING },
        { "DOES_LATEST_BRIEF_STRING_EXIST(_)", WREN_GRAPHICS_DOES_LATEST_BRIEF_STRING_EXIST },
        { "SCALEFORM_MOVIE_METHOD_ADD_PARAM_LATEST_BRIEF_STRING(_)", WREN_GRAPHICS_SCALEFORM_MOVIE_METHOD_ADD_PARAM_LATEST_BRIEF_STRING },
        { "REQUEST_SCALEFORM_SCRIPT_HUD_MOVIE(_)", WREN_GRAPHICS_REQUEST_SCALEFORM_SCRIPT_HUD_MOVIE },
        { "HAS_SCALEFORM_SCRIPT_HUD_MOVIE_LOADED(_)", WREN_GRAPHICS_HAS_SCALEFORM_SCRIPT_HUD_MOVIE_LOADED },
        { "REMOVE_SCALEFORM_SCRIPT_HUD_MOVIE(_)", WREN_GRAPHICS_REMOVE_SCALEFORM_SCRIPT_HUD_MOVIE },
        { "PASS_KEYBOARD_INPUT_TO_SCALEFORM(_)", WREN_GRAPHICS_PASS_KEYBOARD_INPUT_TO_SCALEFORM },
        { "SET_TV_CHANNEL(_)", WREN_GRAPHICS_SET_TV_CHANNEL },
        { "GET_TV_CHANNEL()", WREN_GRAPHICS_GET_TV_CHANNEL },
        { "SET_TV_VOLUME(_)", WREN_GRAPHICS_SET_TV_VOLUME },
        { "GET_TV_VOLUME()", WREN_GRAPHICS_GET_TV_VOLUME },
        { "DRAW_TV_CHANNEL(_,_,_,_,_,_,_,_,_)", WREN_GRAPHICS_DRAW_TV_CHANNEL },
        { "SET_TV_CHANNEL_PLAYLIST(_,_,_)", WREN_GRAPHICS_SET_TV_CHANNEL_PLAYLIST },
        { "SET_TV_CHANNEL_PLAYLIST_AT_HOUR(_,_,_)", WREN_GRAPHICS_SET_TV_CHANNEL_PLAYLIST_AT_HOUR },
        { "CLEAR_TV_CHANNEL_PLAYLIST(_)", WREN_GRAPHICS_CLEAR_TV_CHANNEL_PLAYLIST },
        { "IS_PLAYLIST_ON_CHANNEL(_,_)", WREN_GRAPHICS_IS_PLAYLIST_ON_CHANNEL },
        { "IS_TVSHOW_CURRENTLY_PLAYING(_)", WREN_GRAPHICS_IS_TVSHOW_CURRENTLY_PLAYING },
        { "ENABLE_MOVIE_KEYFRAME_WAIT(_)", WREN_GRAPHICS_ENABLE_MOVIE_KEYFRAME_WAIT },
        { "SET_TV_PLAYER_WATCHING_THIS_FRAME(_)", WREN_GRAPHICS_SET_TV_PLAYER_WATCHING_THIS_FRAME },
        { "GET_CURRENT_TV_CLIP_NAMEHASH()", WREN_GRAPHICS_GET_CURRENT_TV_CLIP_NAMEHASH },
        { "ENABLE_MOVIE_SUBTITLES(_)", WREN_GRAPHICS_ENABLE_MOVIE_SUBTITLES },
        { "UI3DSCENE_IS_AVAILABLE()", WREN_GRAPHICS_UI3DSCENE_IS_AVAILABLE },
        { "UI3DSCENE_PUSH_PRESET(_)", WREN_GRAPHICS_UI3DSCENE_PUSH_PRESET },
        { "UI3DSCENE_ASSIGN_PED_TO_SLOT(_,_,_,_,_,_)", WREN_GRAPHICS_UI3DSCENE_ASSIGN_PED_TO_SLOT },
        { "UI3DSCENE_CLEAR_PATCHED_DATA()", WREN_GRAPHICS_UI3DSCENE_CLEAR_PATCHED_DATA },
        { "UI3DSCENE_MAKE_PUSHED_PRESET_PERSISTENT(_)", WREN_GRAPHICS_UI3DSCENE_MAKE_PUSHED_PRESET_PERSISTENT },
        { "TERRAINGRID_ACTIVATE(_)", WREN_GRAPHICS_TERRAINGRID_ACTIVATE },
        { "TERRAINGRID_SET_PARAMS(_,_,_,_,_,_,_,_,_,_,_,_,_)", WREN_GRAPHICS_TERRAINGRID_SET_PARAMS },
        { "TERRAINGRID_SET_COLOURS(_,_,_,_,_,_,_,_,_,_,_,_)", WREN_GRAPHICS_TERRAINGRID_SET_COLOURS },
        { "ANIMPOSTFX_PLAY(_,_,_)", WREN_GRAPHICS_ANIMPOSTFX_PLAY },
        { "ANIMPOSTFX_STOP(_)", WREN_GRAPHICS_ANIMPOSTFX_STOP },
        { "ANIMPOSTFX_GET_CURRENT_TIME(_)", WREN_GRAPHICS_ANIMPOSTFX_GET_CURRENT_TIME },
        { "ANIMPOSTFX_IS_RUNNING(_)", WREN_GRAPHICS_ANIMPOSTFX_IS_RUNNING },
        { "ANIMPOSTFX_STOP_ALL()", WREN_GRAPHICS_ANIMPOSTFX_STOP_ALL },
        { "ANIMPOSTFX_STOP_AND_FLUSH_REQUESTS(_)", WREN_GRAPHICS_ANIMPOSTFX_STOP_AND_FLUSH_REQUESTS },
        { "BEGIN_TEXT_COMMAND_BUSYSPINNER_ON(_)", WREN_HUD_BEGIN_TEXT_COMMAND_BUSYSPINNER_ON },
        { "END_TEXT_COMMAND_BUSYSPINNER_ON(_)", WREN_HUD_END_TEXT_COMMAND_BUSYSPINNER_ON },
        { "BUSYSPINNER_OFF()", WREN_HUD_BUSYSPINNER_OFF },
        { "PRELOAD_BUSYSPINNER()", WREN_HUD_PRELOAD_BUSYSPINNER },
        { "BUSYSPINNER_IS_ON()", WREN_HUD_BUSYSPINNER_IS_ON },
        { "BUSYSPINNER_IS_DISPLAYING()", WREN_HUD_BUSYSPINNER_IS_DISPLAYING },
        { "DISABLE_PAUSEMENU_SPINNER(_)", WREN_HUD_DISABLE_PAUSEMENU_SPINNER },
        { "SET_MOUSE_CURSOR_THIS_FRAME()", WREN_HUD_SET_MOUSE_CURSOR_THIS_FRAME },
        { "SET_MOUSE_CURSOR_STYLE(_)", WREN_HUD_SET_MOUSE_CURSOR_STYLE },
        { "SET_MOUSE_CURSOR_VISIBLE(_)", WREN_HUD_SET_MOUSE_CURSOR_VISIBLE },
        { "IS_MOUSE_ROLLED_OVER_INSTRUCTIONAL_BUTTONS()", WREN_HUD_IS_MOUSE_ROLLED_OVER_INSTRUCTIONAL_BUTTONS },
        { "GET_MOUSE_EVENT(_)", WREN_HUD_GET_MOUSE_EVENT },
        { "THEFEED_ONLY_SHOW_TOOLTIPS(_)", WREN_HUD_THEFEED_ONLY_SHOW_TOOLTIPS },
        { "THEFEED_SET_SCRIPTED_MENU_HEIGHT(_)", WREN_HUD_THEFEED_SET_SCRIPTED_MENU_HEIGHT },
        { "THEFEED_HIDE()", WREN_HUD_THEFEED_HIDE },
        { "THEFEED_HIDE_THIS_FRAME()", WREN_HUD_THEFEED_HIDE_THIS_FRAME },
        { "THEFEED_SHOW()", WREN_HUD_THEFEED_SHOW },
        { "THEFEED_FLUSH_QUEUE()", WREN_HUD_THEFEED_FLUSH_QUEUE },
        { "THEFEED_REMOVE_ITEM(_)", WREN_HUD_THEFEED_REMOVE_ITEM },
        { "THEFEED_FORCE_RENDER_ON()", WREN_HUD_THEFEED_FORCE_RENDER_ON },
        { "THEFEED_FORCE_RENDER_OFF()", WREN_HUD_THEFEED_FORCE_RENDER_OFF },
        { "THEFEED_PAUSE()", WREN_HUD_THEFEED_PAUSE },
        { "THEFEED_RESUME()", WREN_HUD_THEFEED_RESUME },
        { "THEFEED_IS_PAUSED()", WREN_HUD_THEFEED_IS_PAUSED },
        { "THEFEED_REPORT_LOGO_ON()", WREN_HUD_THEFEED_REPORT_LOGO_ON },
        { "THEFEED_REPORT_LOGO_OFF()", WREN_HUD_THEFEED_REPORT_LOGO_OFF },
        { "THEFEED_GET_LAST_SHOWN_PHONE_ACTIVATABLE_FEED_ID()", WREN_HUD_THEFEED_GET_LAST_SHOWN_PHONE_ACTIVATABLE_FEED_ID },
        { "THEFEED_AUTO_POST_GAMETIPS_ON()", WREN_HUD_THEFEED_AUTO_POST_GAMETIPS_ON },
        { "THEFEED_AUTO_POST_GAMETIPS_OFF()", WREN_HUD_THEFEED_AUTO_POST_GAMETIPS_OFF },
        { "THEFEED_SET_BACKGROUND_COLOR_FOR_NEXT_POST(_)", WREN_HUD_THEFEED_SET_BACKGROUND_COLOR_FOR_NEXT_POST },
        { "THEFEED_SET_RGBA_PARAMETER_FOR_NEXT_MESSAGE(_,_,_,_)", WREN_HUD_THEFEED_SET_RGBA_PARAMETER_FOR_NEXT_MESSAGE },
        { "THEFEED_SET_FLASH_DURATION_PARAMETER_FOR_NEXT_MESSAGE(_)", WREN_HUD_THEFEED_SET_FLASH_DURATION_PARAMETER_FOR_NEXT_MESSAGE },
        { "THEFEED_SET_VIBRATE_PARAMETER_FOR_NEXT_MESSAGE(_)", WREN_HUD_THEFEED_SET_VIBRATE_PARAMETER_FOR_NEXT_MESSAGE },
        { "THEFEED_RESET_ALL_PARAMETERS()", WREN_HUD_THEFEED_RESET_ALL_PARAMETERS },
        { "THEFEED_FREEZE_NEXT_POST()", WREN_HUD_THEFEED_FREEZE_NEXT_POST },
        { "THEFEED_CLEAR_FROZEN_POST()", WREN_HUD_THEFEED_CLEAR_FROZEN_POST },
        { "THEFEED_SET_SNAP_FEED_ITEM_POSITIONS(_)", WREN_HUD_THEFEED_SET_SNAP_FEED_ITEM_POSITIONS },
        { "THEFEED_UPDATE_ITEM_TEXTURE(_,_,_,_)", WREN_HUD_THEFEED_UPDATE_ITEM_TEXTURE },
        { "BEGIN_TEXT_COMMAND_THEFEED_POST(_)", WREN_HUD_BEGIN_TEXT_COMMAND_THEFEED_POST },
        { "END_TEXT_COMMAND_THEFEED_POST_STATS(_,_,_,_,_,_,_)", WREN_HUD_END_TEXT_COMMAND_THEFEED_POST_STATS },
        { "END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT(_,_,_,_,_,_)", WREN_HUD_END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT },
        { "END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_SUBTITLE_LABEL(_,_,_,_,_,_)", WREN_HUD_END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_SUBTITLE_LABEL },
        { "END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_TU(_,_,_,_,_,_,_)", WREN_HUD_END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_TU },
        { "END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_WITH_CREW_TAG(_,_,_,_,_,_,_,_)", WREN_HUD_END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_WITH_CREW_TAG },
        { "END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_WITH_CREW_TAG_AND_ADDITIONAL_ICON(_,_,_,_,_,_,_,_,_,_)", WREN_HUD_END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_WITH_CREW_TAG_AND_ADDITIONAL_ICON },
        { "END_TEXT_COMMAND_THEFEED_POST_TICKER(_,_)", WREN_HUD_END_TEXT_COMMAND_THEFEED_POST_TICKER },
        { "END_TEXT_COMMAND_THEFEED_POST_TICKER_FORCED(_,_)", WREN_HUD_END_TEXT_COMMAND_THEFEED_POST_TICKER_FORCED },
        { "END_TEXT_COMMAND_THEFEED_POST_TICKER_WITH_TOKENS(_,_)", WREN_HUD_END_TEXT_COMMAND_THEFEED_POST_TICKER_WITH_TOKENS },
        { "END_TEXT_COMMAND_THEFEED_POST_AWARD(_,_,_,_,_)", WREN_HUD_END_TEXT_COMMAND_THEFEED_POST_AWARD },
        { "END_TEXT_COMMAND_THEFEED_POST_CREWTAG(_,_,_,_,_,_,_,_,_)", WREN_HUD_END_TEXT_COMMAND_THEFEED_POST_CREWTAG },
        { "END_TEXT_COMMAND_THEFEED_POST_CREWTAG_WITH_GAME_NAME(_,_,_,_,_,_,_,_,_,_)", WREN_HUD_END_TEXT_COMMAND_THEFEED_POST_CREWTAG_WITH_GAME_NAME },
        { "END_TEXT_COMMAND_THEFEED_POST_UNLOCK(_,_,_)", WREN_HUD_END_TEXT_COMMAND_THEFEED_POST_UNLOCK },
        { "END_TEXT_COMMAND_THEFEED_POST_UNLOCK_TU(_,_,_,_)", WREN_HUD_END_TEXT_COMMAND_THEFEED_POST_UNLOCK_TU },
        { "END_TEXT_COMMAND_THEFEED_POST_UNLOCK_TU_WITH_COLOR(_,_,_,_,_,_)", WREN_HUD_END_TEXT_COMMAND_THEFEED_POST_UNLOCK_TU_WITH_COLOR },
        { "END_TEXT_COMMAND_THEFEED_POST_MPTICKER(_,_)", WREN_HUD_END_TEXT_COMMAND_THEFEED_POST_MPTICKER },
        { "END_TEXT_COMMAND_THEFEED_POST_CREW_RANKUP_WITH_LITERAL_FLAG(_,_,_,_,_)", WREN_HUD_END_TEXT_COMMAND_THEFEED_POST_CREW_RANKUP_WITH_LITERAL_FLAG },
        { "END_TEXT_COMMAND_THEFEED_POST_VERSUS_TU(_,_,_,_,_,_,_,_)", WREN_HUD_END_TEXT_COMMAND_THEFEED_POST_VERSUS_TU },
        { "END_TEXT_COMMAND_THEFEED_POST_REPLAY(_,_,_)", WREN_HUD_END_TEXT_COMMAND_THEFEED_POST_REPLAY },
        { "END_TEXT_COMMAND_THEFEED_POST_REPLAY_INPUT(_,_,_)", WREN_HUD_END_TEXT_COMMAND_THEFEED_POST_REPLAY_INPUT },
        { "BEGIN_TEXT_COMMAND_PRINT(_)", WREN_HUD_BEGIN_TEXT_COMMAND_PRINT },
        { "END_TEXT_COMMAND_PRINT(_,_)", WREN_HUD_END_TEXT_COMMAND_PRINT },
        { "BEGIN_TEXT_COMMAND_IS_MESSAGE_DISPLAYED(_)", WREN_HUD_BEGIN_TEXT_COMMAND_IS_MESSAGE_DISPLAYED },
        { "END_TEXT_COMMAND_IS_MESSAGE_DISPLAYED()", WREN_HUD_END_TEXT_COMMAND_IS_MESSAGE_DISPLAYED },
        { "BEGIN_TEXT_COMMAND_DISPLAY_TEXT(_)", WREN_HUD_BEGIN_TEXT_COMMAND_DISPLAY_TEXT },
        { "END_TEXT_COMMAND_DISPLAY_TEXT(_,_,_)", WREN_HUD_END_TEXT_COMMAND_DISPLAY_TEXT },
        { "BEGIN_TEXT_COMMAND_GET_SCREEN_WIDTH_OF_DISPLAY_TEXT(_)", WREN_HUD_BEGIN_TEXT_COMMAND_GET_SCREEN_WIDTH_OF_DISPLAY_TEXT },
        { "END_TEXT_COMMAND_GET_SCREEN_WIDTH_OF_DISPLAY_TEXT(_)", WREN_HUD_END_TEXT_COMMAND_GET_SCREEN_WIDTH_OF_DISPLAY_TEXT },
        { "BEGIN_TEXT_COMMAND_GET_NUMBER_OF_LINES_FOR_STRING(_)", WREN_HUD_BEGIN_TEXT_COMMAND_GET_NUMBER_OF_LINES_FOR_STRING },
        { "END_TEXT_COMMAND_GET_NUMBER_OF_LINES_FOR_STRING(_,_)", WREN_HUD_END_TEXT_COMMAND_GET_NUMBER_OF_LINES_FOR_STRING },
        { "BEGIN_TEXT_COMMAND_DISPLAY_HELP(_)", WREN_HUD_BEGIN_TEXT_COMMAND_DISPLAY_HELP },
        { "END_TEXT_COMMAND_DISPLAY_HELP(_,_,_,_)", WREN_HUD_END_TEXT_COMMAND_DISPLAY_HELP },
        { "BEGIN_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(_)", WREN_HUD_BEGIN_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED },
        { "END_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(_)", WREN_HUD_END_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED },
        { "BEGIN_TEXT_COMMAND_SET_BLIP_NAME(_)", WREN_HUD_BEGIN_TEXT_COMMAND_SET_BLIP_NAME },
        { "END_TEXT_COMMAND_SET_BLIP_NAME(_)", WREN_HUD_END_TEXT_COMMAND_SET_BLIP_NAME },
        { "BEGIN_TEXT_COMMAND_ADD_DIRECTLY_TO_PREVIOUS_BRIEFS(_)", WREN_HUD_BEGIN_TEXT_COMMAND_ADD_DIRECTLY_TO_PREVIOUS_BRIEFS },
        { "END_TEXT_COMMAND_ADD_DIRECTLY_TO_PREVIOUS_BRIEFS(_)", WREN_HUD_END_TEXT_COMMAND_ADD_DIRECTLY_TO_PREVIOUS_BRIEFS },
        { "BEGIN_TEXT_COMMAND_CLEAR_PRINT(_)", WREN_HUD_BEGIN_TEXT_COMMAND_CLEAR_PRINT },
        { "END_TEXT_COMMAND_CLEAR_PRINT()", WREN_HUD_END_TEXT_COMMAND_CLEAR_PRINT },
        { "BEGIN_TEXT_COMMAND_OVERRIDE_BUTTON_TEXT(_)", WREN_HUD_BEGIN_TEXT_COMMAND_OVERRIDE_BUTTON_TEXT },
        { "END_TEXT_COMMAND_OVERRIDE_BUTTON_TEXT(_)", WREN_HUD_END_TEXT_COMMAND_OVERRIDE_BUTTON_TEXT },
        { "ADD_TEXT_COMPONENT_INTEGER(_)", WREN_HUD_ADD_TEXT_COMPONENT_INTEGER },
        { "ADD_TEXT_COMPONENT_FLOAT(_,_)", WREN_HUD_ADD_TEXT_COMPONENT_FLOAT },
        { "ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL(_)", WREN_HUD_ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL },
        { "ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL_HASH_KEY(_)", WREN_HUD_ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL_HASH_KEY },
        { "ADD_TEXT_COMPONENT_SUBSTRING_BLIP_NAME(_)", WREN_HUD_ADD_TEXT_COMPONENT_SUBSTRING_BLIP_NAME },
        { "ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(_)", WREN_HUD_ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME },
        { "ADD_TEXT_COMPONENT_SUBSTRING_TIME(_,_)", WREN_HUD_ADD_TEXT_COMPONENT_SUBSTRING_TIME },
        { "ADD_TEXT_COMPONENT_FORMATTED_INTEGER(_,_)", WREN_HUD_ADD_TEXT_COMPONENT_FORMATTED_INTEGER },
        { "ADD_TEXT_COMPONENT_SUBSTRING_PHONE_NUMBER(_,_)", WREN_HUD_ADD_TEXT_COMPONENT_SUBSTRING_PHONE_NUMBER },
        { "ADD_TEXT_COMPONENT_SUBSTRING_WEBSITE(_)", WREN_HUD_ADD_TEXT_COMPONENT_SUBSTRING_WEBSITE },
        { "ADD_TEXT_COMPONENT_SUBSTRING_KEYBOARD_DISPLAY(_)", WREN_HUD_ADD_TEXT_COMPONENT_SUBSTRING_KEYBOARD_DISPLAY },
        { "SET_COLOUR_OF_NEXT_TEXT_COMPONENT(_)", WREN_HUD_SET_COLOUR_OF_NEXT_TEXT_COMPONENT },
        { "GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME(_,_,_)", WREN_HUD_GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME },
        { "GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME_WITH_BYTE_LIMIT(_,_,_,_)", WREN_HUD_GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME_WITH_BYTE_LIMIT },
        { "GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME_BYTES(_,_,_)", WREN_HUD_GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME_BYTES },
        { "GET_FILENAME_FOR_AUDIO_CONVERSATION(_)", WREN_HUD_GET_FILENAME_FOR_AUDIO_CONVERSATION },
        { "CLEAR_PRINTS()", WREN_HUD_CLEAR_PRINTS },
        { "CLEAR_BRIEF()", WREN_HUD_CLEAR_BRIEF },
        { "CLEAR_ALL_HELP_MESSAGES()", WREN_HUD_CLEAR_ALL_HELP_MESSAGES },
        { "CLEAR_THIS_PRINT(_)", WREN_HUD_CLEAR_THIS_PRINT },
        { "CLEAR_SMALL_PRINTS()", WREN_HUD_CLEAR_SMALL_PRINTS },
        { "DOES_TEXT_BLOCK_EXIST(_)", WREN_HUD_DOES_TEXT_BLOCK_EXIST },
        { "REQUEST_ADDITIONAL_TEXT(_,_)", WREN_HUD_REQUEST_ADDITIONAL_TEXT },
        { "REQUEST_ADDITIONAL_TEXT_FOR_DLC(_,_)", WREN_HUD_REQUEST_ADDITIONAL_TEXT_FOR_DLC },
        { "HAS_ADDITIONAL_TEXT_LOADED(_)", WREN_HUD_HAS_ADDITIONAL_TEXT_LOADED },
        { "CLEAR_ADDITIONAL_TEXT(_,_)", WREN_HUD_CLEAR_ADDITIONAL_TEXT },
        { "IS_STREAMING_ADDITIONAL_TEXT(_)", WREN_HUD_IS_STREAMING_ADDITIONAL_TEXT },
        { "HAS_THIS_ADDITIONAL_TEXT_LOADED(_,_)", WREN_HUD_HAS_THIS_ADDITIONAL_TEXT_LOADED },
        { "IS_MESSAGE_BEING_DISPLAYED()", WREN_HUD_IS_MESSAGE_BEING_DISPLAYED },
        { "DOES_TEXT_LABEL_EXIST(_)", WREN_HUD_DOES_TEXT_LABEL_EXIST },
        { "GET_FIRST_N_CHARACTERS_OF_LITERAL_STRING(_,_)", WREN_HUD_GET_FIRST_N_CHARACTERS_OF_LITERAL_STRING },
        { "GET_LENGTH_OF_STRING_WITH_THIS_TEXT_LABEL(_)", WREN_HUD_GET_LENGTH_OF_STRING_WITH_THIS_TEXT_LABEL },
        { "GET_LENGTH_OF_LITERAL_STRING(_)", WREN_HUD_GET_LENGTH_OF_LITERAL_STRING },
        { "GET_LENGTH_OF_LITERAL_STRING_IN_BYTES(_)", WREN_HUD_GET_LENGTH_OF_LITERAL_STRING_IN_BYTES },
        { "GET_STREET_NAME_FROM_HASH_KEY(_)", WREN_HUD_GET_STREET_NAME_FROM_HASH_KEY },
        { "IS_HUD_PREFERENCE_SWITCHED_ON()", WREN_HUD_IS_HUD_PREFERENCE_SWITCHED_ON },
        { "IS_RADAR_PREFERENCE_SWITCHED_ON()", WREN_HUD_IS_RADAR_PREFERENCE_SWITCHED_ON },
        { "IS_SUBTITLE_PREFERENCE_SWITCHED_ON()", WREN_HUD_IS_SUBTITLE_PREFERENCE_SWITCHED_ON },
        { "DISPLAY_HUD(_)", WREN_HUD_DISPLAY_HUD },
        { "DISPLAY_HUD_WHEN_NOT_IN_STATE_OF_PLAY_THIS_FRAME()", WREN_HUD_DISPLAY_HUD_WHEN_NOT_IN_STATE_OF_PLAY_THIS_FRAME },
        { "DISPLAY_HUD_WHEN_PAUSED_THIS_FRAME()", WREN_HUD_DISPLAY_HUD_WHEN_PAUSED_THIS_FRAME },
        { "DISPLAY_RADAR(_)", WREN_HUD_DISPLAY_RADAR },
        { "SET_FAKE_SPECTATOR_MODE(_)", WREN_HUD_SET_FAKE_SPECTATOR_MODE },
        { "GET_FAKE_SPECTATOR_MODE()", WREN_HUD_GET_FAKE_SPECTATOR_MODE },
        { "IS_HUD_HIDDEN()", WREN_HUD_IS_HUD_HIDDEN },
        { "IS_RADAR_HIDDEN()", WREN_HUD_IS_RADAR_HIDDEN },
        { "IS_MINIMAP_RENDERING()", WREN_HUD_IS_MINIMAP_RENDERING },
        { "USE_VEHICLE_TARGETING_RETICULE(_)", WREN_HUD_USE_VEHICLE_TARGETING_RETICULE },
        { "ADD_VALID_VEHICLE_HIT_HASH(_)", WREN_HUD_ADD_VALID_VEHICLE_HIT_HASH },
        { "CLEAR_VALID_VEHICLE_HIT_HASHES()", WREN_HUD_CLEAR_VALID_VEHICLE_HIT_HASHES },
        { "SET_BLIP_ROUTE(_,_)", WREN_HUD_SET_BLIP_ROUTE },
        { "CLEAR_ALL_BLIP_ROUTES()", WREN_HUD_CLEAR_ALL_BLIP_ROUTES },
        { "SET_BLIP_ROUTE_COLOUR(_,_)", WREN_HUD_SET_BLIP_ROUTE_COLOUR },
        { "SET_FORCE_SHOW_GPS(_)", WREN_HUD_SET_FORCE_SHOW_GPS },
        { "SET_USE_SET_DESTINATION_IN_PAUSE_MAP(_)", WREN_HUD_SET_USE_SET_DESTINATION_IN_PAUSE_MAP },
        { "SET_BLOCK_WANTED_FLASH(_)", WREN_HUD_SET_BLOCK_WANTED_FLASH },
        { "ADD_NEXT_MESSAGE_TO_PREVIOUS_BRIEFS(_)", WREN_HUD_ADD_NEXT_MESSAGE_TO_PREVIOUS_BRIEFS },
        { "FORCE_NEXT_MESSAGE_TO_PREVIOUS_BRIEFS_LIST(_)", WREN_HUD_FORCE_NEXT_MESSAGE_TO_PREVIOUS_BRIEFS_LIST },
        { "SET_RADAR_ZOOM_PRECISE(_)", WREN_HUD_SET_RADAR_ZOOM_PRECISE },
        { "SET_RADAR_ZOOM(_)", WREN_HUD_SET_RADAR_ZOOM },
        { "SET_RADAR_ZOOM_TO_BLIP(_,_)", WREN_HUD_SET_RADAR_ZOOM_TO_BLIP },
        { "SET_RADAR_ZOOM_TO_DISTANCE(_)", WREN_HUD_SET_RADAR_ZOOM_TO_DISTANCE },
        { "UPDATE_RADAR_ZOOM_TO_BLIP()", WREN_HUD_UPDATE_RADAR_ZOOM_TO_BLIP },
        { "GET_HUD_COLOUR(_)", WREN_HUD_GET_HUD_COLOUR },
        { "SET_SCRIPT_VARIABLE_HUD_COLOUR(_,_,_,_)", WREN_HUD_SET_SCRIPT_VARIABLE_HUD_COLOUR },
        { "SET_SECOND_SCRIPT_VARIABLE_HUD_COLOUR(_,_,_,_)", WREN_HUD_SET_SECOND_SCRIPT_VARIABLE_HUD_COLOUR },
        { "REPLACE_HUD_COLOUR(_,_)", WREN_HUD_REPLACE_HUD_COLOUR },
        { "REPLACE_HUD_COLOUR_WITH_RGBA(_,_,_,_,_)", WREN_HUD_REPLACE_HUD_COLOUR_WITH_RGBA },
        { "SET_ABILITY_BAR_VISIBILITY(_)", WREN_HUD_SET_ABILITY_BAR_VISIBILITY },
        { "SET_ALLOW_ABILITY_BAR(_)", WREN_HUD_SET_ALLOW_ABILITY_BAR },
        { "FLASH_ABILITY_BAR(_)", WREN_HUD_FLASH_ABILITY_BAR },
        { "SET_ABILITY_BAR_VALUE(_,_)", WREN_HUD_SET_ABILITY_BAR_VALUE },
        { "FLASH_WANTED_DISPLAY(_)", WREN_HUD_FLASH_WANTED_DISPLAY },
        { "FORCE_OFF_WANTED_STAR_FLASH(_)", WREN_HUD_FORCE_OFF_WANTED_STAR_FLASH },
        { "SET_CUSTOM_MP_HUD_COLOR(_)", WREN_HUD_SET_CUSTOM_MP_HUD_COLOR },
        { "GET_RENDERED_CHARACTER_HEIGHT(_,_)", WREN_HUD_GET_RENDERED_CHARACTER_HEIGHT },
        { "SET_TEXT_SCALE(_,_)", WREN_HUD_SET_TEXT_SCALE },
        { "SET_TEXT_COLOUR(_,_,_,_)", WREN_HUD_SET_TEXT_COLOUR },
        { "SET_TEXT_CENTRE(_)", WREN_HUD_SET_TEXT_CENTRE },
        { "SET_TEXT_RIGHT_JUSTIFY(_)", WREN_HUD_SET_TEXT_RIGHT_JUSTIFY },
        { "SET_TEXT_JUSTIFICATION(_)", WREN_HUD_SET_TEXT_JUSTIFICATION },
        { "SET_TEXT_WRAP(_,_)", WREN_HUD_SET_TEXT_WRAP },
        { "SET_TEXT_LEADING(_)", WREN_HUD_SET_TEXT_LEADING },
        { "SET_TEXT_PROPORTIONAL(_)", WREN_HUD_SET_TEXT_PROPORTIONAL },
        { "SET_TEXT_FONT(_)", WREN_HUD_SET_TEXT_FONT },
        { "SET_TEXT_DROP_SHADOW()", WREN_HUD_SET_TEXT_DROP_SHADOW },
        { "SET_TEXT_DROPSHADOW(_,_,_,_,_)", WREN_HUD_SET_TEXT_DROPSHADOW },
        { "SET_TEXT_OUTLINE()", WREN_HUD_SET_TEXT_OUTLINE },
        { "SET_TEXT_EDGE(_,_,_,_,_)", WREN_HUD_SET_TEXT_EDGE },
        { "SET_TEXT_RENDER_ID(_)", WREN_HUD_SET_TEXT_RENDER_ID },
        { "GET_DEFAULT_SCRIPT_RENDERTARGET_RENDER_ID()", WREN_HUD_GET_DEFAULT_SCRIPT_RENDERTARGET_RENDER_ID },
        { "REGISTER_NAMED_RENDERTARGET(_,_)", WREN_HUD_REGISTER_NAMED_RENDERTARGET },
        { "IS_NAMED_RENDERTARGET_REGISTERED(_)", WREN_HUD_IS_NAMED_RENDERTARGET_REGISTERED },
        { "RELEASE_NAMED_RENDERTARGET(_)", WREN_HUD_RELEASE_NAMED_RENDERTARGET },
        { "LINK_NAMED_RENDERTARGET(_)", WREN_HUD_LINK_NAMED_RENDERTARGET },
        { "GET_NAMED_RENDERTARGET_RENDER_ID(_)", WREN_HUD_GET_NAMED_RENDERTARGET_RENDER_ID },
        { "IS_NAMED_RENDERTARGET_LINKED(_)", WREN_HUD_IS_NAMED_RENDERTARGET_LINKED },
        { "CLEAR_HELP(_)", WREN_HUD_CLEAR_HELP },
        { "IS_HELP_MESSAGE_ON_SCREEN()", WREN_HUD_IS_HELP_MESSAGE_ON_SCREEN },
        { "HAS_SCRIPT_HIDDEN_HELP_THIS_FRAME()", WREN_HUD_HAS_SCRIPT_HIDDEN_HELP_THIS_FRAME },
        { "IS_HELP_MESSAGE_BEING_DISPLAYED()", WREN_HUD_IS_HELP_MESSAGE_BEING_DISPLAYED },
        { "IS_HELP_MESSAGE_FADING_OUT()", WREN_HUD_IS_HELP_MESSAGE_FADING_OUT },
        { "SET_HELP_MESSAGE_STYLE(_,_,_,_,_)", WREN_HUD_SET_HELP_MESSAGE_STYLE },
        { "GET_STANDARD_BLIP_ENUM_ID()", WREN_HUD_GET_STANDARD_BLIP_ENUM_ID },
        { "GET_WAYPOINT_BLIP_ENUM_ID()", WREN_HUD_GET_WAYPOINT_BLIP_ENUM_ID },
        { "GET_NUMBER_OF_ACTIVE_BLIPS()", WREN_HUD_GET_NUMBER_OF_ACTIVE_BLIPS },
        { "GET_NEXT_BLIP_INFO_ID(_)", WREN_HUD_GET_NEXT_BLIP_INFO_ID },
        { "GET_FIRST_BLIP_INFO_ID(_)", WREN_HUD_GET_FIRST_BLIP_INFO_ID },
        { "GET_CLOSEST_BLIP_INFO_ID(_)", WREN_HUD_GET_CLOSEST_BLIP_INFO_ID },
        { "GET_BLIP_INFO_ID_COORD(_)", WREN_HUD_GET_BLIP_INFO_ID_COORD },
        { "GET_BLIP_INFO_ID_DISPLAY(_)", WREN_HUD_GET_BLIP_INFO_ID_DISPLAY },
        { "GET_BLIP_INFO_ID_TYPE(_)", WREN_HUD_GET_BLIP_INFO_ID_TYPE },
        { "GET_BLIP_INFO_ID_ENTITY_INDEX(_)", WREN_HUD_GET_BLIP_INFO_ID_ENTITY_INDEX },
        { "GET_BLIP_INFO_ID_PICKUP_INDEX(_)", WREN_HUD_GET_BLIP_INFO_ID_PICKUP_INDEX },
        { "GET_BLIP_FROM_ENTITY(_)", WREN_HUD_GET_BLIP_FROM_ENTITY },
        { "ADD_BLIP_FOR_RADIUS(_,_,_,_)", WREN_HUD_ADD_BLIP_FOR_RADIUS },
        { "ADD_BLIP_FOR_AREA(_,_,_,_,_)", WREN_HUD_ADD_BLIP_FOR_AREA },
        { "ADD_BLIP_FOR_ENTITY(_)", WREN_HUD_ADD_BLIP_FOR_ENTITY },
        { "ADD_BLIP_FOR_PICKUP(_)", WREN_HUD_ADD_BLIP_FOR_PICKUP },
        { "ADD_BLIP_FOR_COORD(_,_,_)", WREN_HUD_ADD_BLIP_FOR_COORD },
        { "TRIGGER_SONAR_BLIP(_,_,_,_,_)", WREN_HUD_TRIGGER_SONAR_BLIP },
        { "ALLOW_SONAR_BLIPS(_)", WREN_HUD_ALLOW_SONAR_BLIPS },
        { "SET_BLIP_COORDS(_,_,_,_)", WREN_HUD_SET_BLIP_COORDS },
        { "GET_BLIP_COORDS(_)", WREN_HUD_GET_BLIP_COORDS },
        { "SET_BLIP_SPRITE(_,_)", WREN_HUD_SET_BLIP_SPRITE },
        { "GET_BLIP_SPRITE(_)", WREN_HUD_GET_BLIP_SPRITE },
        { "SET_COP_BLIP_SPRITE(_,_)", WREN_HUD_SET_COP_BLIP_SPRITE },
        { "SET_COP_BLIP_SPRITE_AS_STANDARD()", WREN_HUD_SET_COP_BLIP_SPRITE_AS_STANDARD },
        { "SET_BLIP_NAME_FROM_TEXT_FILE(_,_)", WREN_HUD_SET_BLIP_NAME_FROM_TEXT_FILE },
        { "SET_BLIP_NAME_TO_PLAYER_NAME(_,_)", WREN_HUD_SET_BLIP_NAME_TO_PLAYER_NAME },
        { "SET_BLIP_ALPHA(_,_)", WREN_HUD_SET_BLIP_ALPHA },
        { "GET_BLIP_ALPHA(_)", WREN_HUD_GET_BLIP_ALPHA },
        { "SET_BLIP_FADE(_,_,_)", WREN_HUD_SET_BLIP_FADE },
        { "GET_BLIP_FADE_DIRECTION(_)", WREN_HUD_GET_BLIP_FADE_DIRECTION },
        { "SET_BLIP_ROTATION(_,_)", WREN_HUD_SET_BLIP_ROTATION },
        { "SET_BLIP_ROTATION_WITH_FLOAT(_,_)", WREN_HUD_SET_BLIP_ROTATION_WITH_FLOAT },
        { "GET_BLIP_ROTATION(_)", WREN_HUD_GET_BLIP_ROTATION },
        { "SET_BLIP_FLASH_TIMER(_,_)", WREN_HUD_SET_BLIP_FLASH_TIMER },
        { "SET_BLIP_FLASH_INTERVAL(_,_)", WREN_HUD_SET_BLIP_FLASH_INTERVAL },
        { "SET_BLIP_COLOUR(_,_)", WREN_HUD_SET_BLIP_COLOUR },
        { "SET_BLIP_SECONDARY_COLOUR(_,_,_,_)", WREN_HUD_SET_BLIP_SECONDARY_COLOUR },
        { "GET_BLIP_COLOUR(_)", WREN_HUD_GET_BLIP_COLOUR },
        { "GET_BLIP_HUD_COLOUR(_)", WREN_HUD_GET_BLIP_HUD_COLOUR },
        { "IS_BLIP_SHORT_RANGE(_)", WREN_HUD_IS_BLIP_SHORT_RANGE },
        { "IS_BLIP_ON_MINIMAP(_)", WREN_HUD_IS_BLIP_ON_MINIMAP },
        { "DOES_BLIP_HAVE_GPS_ROUTE(_)", WREN_HUD_DOES_BLIP_HAVE_GPS_ROUTE },
        { "SET_BLIP_HIDDEN_ON_LEGEND(_,_)", WREN_HUD_SET_BLIP_HIDDEN_ON_LEGEND },
        { "SET_BLIP_HIGH_DETAIL(_,_)", WREN_HUD_SET_BLIP_HIGH_DETAIL },
        { "SET_BLIP_AS_MISSION_CREATOR_BLIP(_,_)", WREN_HUD_SET_BLIP_AS_MISSION_CREATOR_BLIP },
        { "IS_MISSION_CREATOR_BLIP(_)", WREN_HUD_IS_MISSION_CREATOR_BLIP },
        { "GET_NEW_SELECTED_MISSION_CREATOR_BLIP()", WREN_HUD_GET_NEW_SELECTED_MISSION_CREATOR_BLIP },
        { "IS_HOVERING_OVER_MISSION_CREATOR_BLIP()", WREN_HUD_IS_HOVERING_OVER_MISSION_CREATOR_BLIP },
        { "SHOW_START_MISSION_INSTRUCTIONAL_BUTTON(_)", WREN_HUD_SHOW_START_MISSION_INSTRUCTIONAL_BUTTON },
        { "SHOW_CONTACT_INSTRUCTIONAL_BUTTON(_)", WREN_HUD_SHOW_CONTACT_INSTRUCTIONAL_BUTTON },
        { "RELOAD_MAP_MENU()", WREN_HUD_RELOAD_MAP_MENU },
        { "SET_BLIP_MARKER_LONG_DISTANCE(_,_)", WREN_HUD_SET_BLIP_MARKER_LONG_DISTANCE },
        { "SET_BLIP_FLASHES(_,_)", WREN_HUD_SET_BLIP_FLASHES },
        { "SET_BLIP_FLASHES_ALTERNATE(_,_)", WREN_HUD_SET_BLIP_FLASHES_ALTERNATE },
        { "IS_BLIP_FLASHING(_)", WREN_HUD_IS_BLIP_FLASHING },
        { "SET_BLIP_AS_SHORT_RANGE(_,_)", WREN_HUD_SET_BLIP_AS_SHORT_RANGE },
        { "SET_BLIP_SCALE(_,_)", WREN_HUD_SET_BLIP_SCALE },
        { "SET_BLIP_SCALE_2D(_,_,_)", WREN_HUD_SET_BLIP_SCALE_2D },
        { "SET_BLIP_PRIORITY(_,_)", WREN_HUD_SET_BLIP_PRIORITY },
        { "SET_BLIP_DISPLAY(_,_)", WREN_HUD_SET_BLIP_DISPLAY },
        { "SET_BLIP_CATEGORY(_,_)", WREN_HUD_SET_BLIP_CATEGORY },
        { "REMOVE_BLIP()", WREN_HUD_REMOVE_BLIP },
        { "SET_BLIP_AS_FRIENDLY(_,_)", WREN_HUD_SET_BLIP_AS_FRIENDLY },
        { "PULSE_BLIP(_)", WREN_HUD_PULSE_BLIP },
        { "SHOW_NUMBER_ON_BLIP(_,_)", WREN_HUD_SHOW_NUMBER_ON_BLIP },
        { "HIDE_NUMBER_ON_BLIP(_)", WREN_HUD_HIDE_NUMBER_ON_BLIP },
        { "SHOW_HEIGHT_ON_BLIP(_,_)", WREN_HUD_SHOW_HEIGHT_ON_BLIP },
        { "SHOW_TICK_ON_BLIP(_,_)", WREN_HUD_SHOW_TICK_ON_BLIP },
        { "SHOW_GOLD_TICK_ON_BLIP(_,_)", WREN_HUD_SHOW_GOLD_TICK_ON_BLIP },
        { "SHOW_HEADING_INDICATOR_ON_BLIP(_,_)", WREN_HUD_SHOW_HEADING_INDICATOR_ON_BLIP },
        { "SHOW_OUTLINE_INDICATOR_ON_BLIP(_,_)", WREN_HUD_SHOW_OUTLINE_INDICATOR_ON_BLIP },
        { "SHOW_FRIEND_INDICATOR_ON_BLIP(_,_)", WREN_HUD_SHOW_FRIEND_INDICATOR_ON_BLIP },
        { "SHOW_CREW_INDICATOR_ON_BLIP(_,_)", WREN_HUD_SHOW_CREW_INDICATOR_ON_BLIP },
        { "SET_BLIP_EXTENDED_HEIGHT_THRESHOLD(_,_)", WREN_HUD_SET_BLIP_EXTENDED_HEIGHT_THRESHOLD },
        { "SET_BLIP_SHORT_HEIGHT_THRESHOLD(_,_)", WREN_HUD_SET_BLIP_SHORT_HEIGHT_THRESHOLD },
        { "SET_BLIP_USE_HEIGHT_INDICATOR_ON_EDGE(_,_)", WREN_HUD_SET_BLIP_USE_HEIGHT_INDICATOR_ON_EDGE },
        { "SET_BLIP_AS_MINIMAL_ON_EDGE(_,_)", WREN_HUD_SET_BLIP_AS_MINIMAL_ON_EDGE },
        { "SET_RADIUS_BLIP_EDGE(_,_)", WREN_HUD_SET_RADIUS_BLIP_EDGE },
        { "DOES_BLIP_EXIST(_)", WREN_HUD_DOES_BLIP_EXIST },
        { "SET_WAYPOINT_OFF()", WREN_HUD_SET_WAYPOINT_OFF },
        { "DELETE_WAYPOINTS_FROM_THIS_PLAYER()", WREN_HUD_DELETE_WAYPOINTS_FROM_THIS_PLAYER },
        { "REFRESH_WAYPOINT()", WREN_HUD_REFRESH_WAYPOINT },
        { "IS_WAYPOINT_ACTIVE()", WREN_HUD_IS_WAYPOINT_ACTIVE },
        { "SET_NEW_WAYPOINT(_,_)", WREN_HUD_SET_NEW_WAYPOINT },
        { "SET_BLIP_BRIGHT(_,_)", WREN_HUD_SET_BLIP_BRIGHT },
        { "SET_BLIP_SHOW_CONE(_,_,_)", WREN_HUD_SET_BLIP_SHOW_CONE },
        { "REMOVE_COP_BLIP_FROM_PED(_)", WREN_HUD_REMOVE_COP_BLIP_FROM_PED },
        { "SETUP_FAKE_CONE_DATA(_,_,_,_,_,_,_,_,_)", WREN_HUD_SETUP_FAKE_CONE_DATA },
        { "REMOVE_FAKE_CONE_DATA(_)", WREN_HUD_REMOVE_FAKE_CONE_DATA },
        { "CLEAR_FAKE_CONE_ARRAY()", WREN_HUD_CLEAR_FAKE_CONE_ARRAY },
        { "SET_MINIMAP_COMPONENT(_,_,_)", WREN_HUD_SET_MINIMAP_COMPONENT },
        { "SET_MINIMAP_SONAR_SWEEP(_)", WREN_HUD_SET_MINIMAP_SONAR_SWEEP },
        { "SHOW_ACCOUNT_PICKER()", WREN_HUD_SHOW_ACCOUNT_PICKER },
        { "GET_MAIN_PLAYER_BLIP_ID()", WREN_HUD_GET_MAIN_PLAYER_BLIP_ID },
        { "SET_PM_WARNINGSCREEN_ACTIVE(_)", WREN_HUD_SET_PM_WARNINGSCREEN_ACTIVE },
        { "HIDE_LOADING_ON_FADE_THIS_FRAME()", WREN_HUD_HIDE_LOADING_ON_FADE_THIS_FRAME },
        { "SET_RADAR_AS_INTERIOR_THIS_FRAME(_,_,_,_,_)", WREN_HUD_SET_RADAR_AS_INTERIOR_THIS_FRAME },
        { "SET_INSIDE_VERY_SMALL_INTERIOR(_)", WREN_HUD_SET_INSIDE_VERY_SMALL_INTERIOR },
        { "SET_INSIDE_VERY_LARGE_INTERIOR(_)", WREN_HUD_SET_INSIDE_VERY_LARGE_INTERIOR },
        { "SET_RADAR_AS_EXTERIOR_THIS_FRAME()", WREN_HUD_SET_RADAR_AS_EXTERIOR_THIS_FRAME },
        { "SET_FAKE_PAUSEMAP_PLAYER_POSITION_THIS_FRAME(_,_)", WREN_HUD_SET_FAKE_PAUSEMAP_PLAYER_POSITION_THIS_FRAME },
        { "SET_FAKE_GPS_PLAYER_POSITION_THIS_FRAME(_,_,_)", WREN_HUD_SET_FAKE_GPS_PLAYER_POSITION_THIS_FRAME },
        { "IS_PAUSEMAP_IN_INTERIOR_MODE()", WREN_HUD_IS_PAUSEMAP_IN_INTERIOR_MODE },
        { "HIDE_MINIMAP_EXTERIOR_MAP_THIS_FRAME()", WREN_HUD_HIDE_MINIMAP_EXTERIOR_MAP_THIS_FRAME },
        { "HIDE_MINIMAP_INTERIOR_MAP_THIS_FRAME()", WREN_HUD_HIDE_MINIMAP_INTERIOR_MAP_THIS_FRAME },
        { "SET_USE_ISLAND_MAP(_)", WREN_HUD_SET_USE_ISLAND_MAP },
        { "DONT_TILT_MINIMAP_THIS_FRAME()", WREN_HUD_DONT_TILT_MINIMAP_THIS_FRAME },
        { "DONT_ZOOM_MINIMAP_WHEN_SNIPING_THIS_FRAME()", WREN_HUD_DONT_ZOOM_MINIMAP_WHEN_SNIPING_THIS_FRAME },
        { "SET_WIDESCREEN_FORMAT(_)", WREN_HUD_SET_WIDESCREEN_FORMAT },
        { "DISPLAY_AREA_NAME(_)", WREN_HUD_DISPLAY_AREA_NAME },
        { "DISPLAY_CASH(_)", WREN_HUD_DISPLAY_CASH },
        { "USE_FAKE_MP_CASH(_)", WREN_HUD_USE_FAKE_MP_CASH },
        { "CHANGE_FAKE_MP_CASH(_,_)", WREN_HUD_CHANGE_FAKE_MP_CASH },
        { "DISPLAY_AMMO_THIS_FRAME(_)", WREN_HUD_DISPLAY_AMMO_THIS_FRAME },
        { "DISPLAY_SNIPER_SCOPE_THIS_FRAME()", WREN_HUD_DISPLAY_SNIPER_SCOPE_THIS_FRAME },
        { "HIDE_HUD_AND_RADAR_THIS_FRAME()", WREN_HUD_HIDE_HUD_AND_RADAR_THIS_FRAME },
        { "ALLOW_DISPLAY_OF_MULTIPLAYER_CASH_TEXT(_)", WREN_HUD_ALLOW_DISPLAY_OF_MULTIPLAYER_CASH_TEXT },
        { "SET_MULTIPLAYER_WALLET_CASH()", WREN_HUD_SET_MULTIPLAYER_WALLET_CASH },
        { "REMOVE_MULTIPLAYER_WALLET_CASH()", WREN_HUD_REMOVE_MULTIPLAYER_WALLET_CASH },
        { "SET_MULTIPLAYER_BANK_CASH()", WREN_HUD_SET_MULTIPLAYER_BANK_CASH },
        { "REMOVE_MULTIPLAYER_BANK_CASH()", WREN_HUD_REMOVE_MULTIPLAYER_BANK_CASH },
        { "SET_MULTIPLAYER_HUD_CASH(_,_)", WREN_HUD_SET_MULTIPLAYER_HUD_CASH },
        { "REMOVE_MULTIPLAYER_HUD_CASH()", WREN_HUD_REMOVE_MULTIPLAYER_HUD_CASH },
        { "HIDE_HELP_TEXT_THIS_FRAME()", WREN_HUD_HIDE_HELP_TEXT_THIS_FRAME },
        { "IS_IME_IN_PROGRESS()", WREN_HUD_IS_IME_IN_PROGRESS },
        { "DISPLAY_HELP_TEXT_THIS_FRAME(_,_)", WREN_HUD_DISPLAY_HELP_TEXT_THIS_FRAME },
        { "HUD_FORCE_WEAPON_WHEEL(_)", WREN_HUD_HUD_FORCE_WEAPON_WHEEL },
        { "HUD_FORCE_SPECIAL_VEHICLE_WEAPON_WHEEL()", WREN_HUD_HUD_FORCE_SPECIAL_VEHICLE_WEAPON_WHEEL },
        { "HUD_SUPPRESS_WEAPON_WHEEL_RESULTS_THIS_FRAME()", WREN_HUD_HUD_SUPPRESS_WEAPON_WHEEL_RESULTS_THIS_FRAME },
        { "HUD_GET_WEAPON_WHEEL_CURRENTLY_HIGHLIGHTED()", WREN_HUD_HUD_GET_WEAPON_WHEEL_CURRENTLY_HIGHLIGHTED },
        { "HUD_SET_WEAPON_WHEEL_TOP_SLOT(_)", WREN_HUD_HUD_SET_WEAPON_WHEEL_TOP_SLOT },
        { "HUD_GET_WEAPON_WHEEL_TOP_SLOT(_)", WREN_HUD_HUD_GET_WEAPON_WHEEL_TOP_SLOT },
        { "HUD_SHOWING_CHARACTER_SWITCH_SELECTION(_)", WREN_HUD_HUD_SHOWING_CHARACTER_SWITCH_SELECTION },
        { "SET_GPS_FLAGS(_,_)", WREN_HUD_SET_GPS_FLAGS },
        { "CLEAR_GPS_FLAGS()", WREN_HUD_CLEAR_GPS_FLAGS },
        { "SET_RACE_TRACK_RENDER(_)", WREN_HUD_SET_RACE_TRACK_RENDER },
        { "CLEAR_GPS_RACE_TRACK()", WREN_HUD_CLEAR_GPS_RACE_TRACK },
        { "START_GPS_CUSTOM_ROUTE(_,_,_)", WREN_HUD_START_GPS_CUSTOM_ROUTE },
        { "ADD_POINT_TO_GPS_CUSTOM_ROUTE(_,_,_)", WREN_HUD_ADD_POINT_TO_GPS_CUSTOM_ROUTE },
        { "SET_GPS_CUSTOM_ROUTE_RENDER(_,_,_)", WREN_HUD_SET_GPS_CUSTOM_ROUTE_RENDER },
        { "CLEAR_GPS_CUSTOM_ROUTE()", WREN_HUD_CLEAR_GPS_CUSTOM_ROUTE },
        { "START_GPS_MULTI_ROUTE(_,_,_)", WREN_HUD_START_GPS_MULTI_ROUTE },
        { "ADD_POINT_TO_GPS_MULTI_ROUTE(_,_,_)", WREN_HUD_ADD_POINT_TO_GPS_MULTI_ROUTE },
        { "SET_GPS_MULTI_ROUTE_RENDER(_)", WREN_HUD_SET_GPS_MULTI_ROUTE_RENDER },
        { "CLEAR_GPS_MULTI_ROUTE()", WREN_HUD_CLEAR_GPS_MULTI_ROUTE },
        { "CLEAR_GPS_PLAYER_WAYPOINT()", WREN_HUD_CLEAR_GPS_PLAYER_WAYPOINT },
        { "SET_GPS_FLASHES(_)", WREN_HUD_SET_GPS_FLASHES },
        { "SET_PLAYER_ICON_COLOUR(_)", WREN_HUD_SET_PLAYER_ICON_COLOUR },
        { "FLASH_MINIMAP_DISPLAY()", WREN_HUD_FLASH_MINIMAP_DISPLAY },
        { "FLASH_MINIMAP_DISPLAY_WITH_COLOR(_)", WREN_HUD_FLASH_MINIMAP_DISPLAY_WITH_COLOR },
        { "TOGGLE_STEALTH_RADAR(_)", WREN_HUD_TOGGLE_STEALTH_RADAR },
        { "SET_MINIMAP_IN_SPECTATOR_MODE(_,_)", WREN_HUD_SET_MINIMAP_IN_SPECTATOR_MODE },
        { "SET_MISSION_NAME(_,_)", WREN_HUD_SET_MISSION_NAME },
        { "SET_MISSION_NAME_FOR_UGC_MISSION(_,_)", WREN_HUD_SET_MISSION_NAME_FOR_UGC_MISSION },
        { "SET_DESCRIPTION_FOR_UGC_MISSION_EIGHT_STRINGS(_)", WREN_HUD_SET_DESCRIPTION_FOR_UGC_MISSION_EIGHT_STRINGS },
        { "SET_MINIMAP_BLOCK_WAYPOINT(_)", WREN_HUD_SET_MINIMAP_BLOCK_WAYPOINT },
        { "SET_MINIMAP_IN_PROLOGUE(_)", WREN_HUD_SET_MINIMAP_IN_PROLOGUE },
        { "SET_MINIMAP_HIDE_FOW(_)", WREN_HUD_SET_MINIMAP_HIDE_FOW },
        { "GET_MINIMAP_FOW_DISCOVERY_RATIO()", WREN_HUD_GET_MINIMAP_FOW_DISCOVERY_RATIO },
        { "GET_MINIMAP_FOW_COORDINATE_IS_REVEALED(_,_,_)", WREN_HUD_GET_MINIMAP_FOW_COORDINATE_IS_REVEALED },
        { "SET_MINIMAP_FOW_DO_NOT_UPDATE(_)", WREN_HUD_SET_MINIMAP_FOW_DO_NOT_UPDATE },
        { "SET_MINIMAP_FOW_REVEAL_COORDINATE(_,_,_)", WREN_HUD_SET_MINIMAP_FOW_REVEAL_COORDINATE },
        { "SET_MINIMAP_GOLF_COURSE(_)", WREN_HUD_SET_MINIMAP_GOLF_COURSE },
        { "SET_MINIMAP_GOLF_COURSE_OFF()", WREN_HUD_SET_MINIMAP_GOLF_COURSE_OFF },
        { "LOCK_MINIMAP_ANGLE(_)", WREN_HUD_LOCK_MINIMAP_ANGLE },
        { "UNLOCK_MINIMAP_ANGLE()", WREN_HUD_UNLOCK_MINIMAP_ANGLE },
        { "LOCK_MINIMAP_POSITION(_,_)", WREN_HUD_LOCK_MINIMAP_POSITION },
        { "UNLOCK_MINIMAP_POSITION()", WREN_HUD_UNLOCK_MINIMAP_POSITION },
        { "SET_FAKE_MINIMAP_MAX_ALTIMETER_HEIGHT(_,_,_)", WREN_HUD_SET_FAKE_MINIMAP_MAX_ALTIMETER_HEIGHT },
        { "SET_HEALTH_HUD_DISPLAY_VALUES(_,_,_)", WREN_HUD_SET_HEALTH_HUD_DISPLAY_VALUES },
        { "SET_MAX_HEALTH_HUD_DISPLAY(_)", WREN_HUD_SET_MAX_HEALTH_HUD_DISPLAY },
        { "SET_MAX_ARMOUR_HUD_DISPLAY(_)", WREN_HUD_SET_MAX_ARMOUR_HUD_DISPLAY },
        { "SET_BIGMAP_ACTIVE(_,_)", WREN_HUD_SET_BIGMAP_ACTIVE },
        { "IS_HUD_COMPONENT_ACTIVE(_)", WREN_HUD_IS_HUD_COMPONENT_ACTIVE },
        { "IS_SCRIPTED_HUD_COMPONENT_ACTIVE(_)", WREN_HUD_IS_SCRIPTED_HUD_COMPONENT_ACTIVE },
        { "HIDE_SCRIPTED_HUD_COMPONENT_THIS_FRAME(_)", WREN_HUD_HIDE_SCRIPTED_HUD_COMPONENT_THIS_FRAME },
        { "SHOW_SCRIPTED_HUD_COMPONENT_THIS_FRAME(_)", WREN_HUD_SHOW_SCRIPTED_HUD_COMPONENT_THIS_FRAME },
        { "IS_SCRIPTED_HUD_COMPONENT_HIDDEN_THIS_FRAME(_)", WREN_HUD_IS_SCRIPTED_HUD_COMPONENT_HIDDEN_THIS_FRAME },
        { "HIDE_HUD_COMPONENT_THIS_FRAME(_)", WREN_HUD_HIDE_HUD_COMPONENT_THIS_FRAME },
        { "SHOW_HUD_COMPONENT_THIS_FRAME(_)", WREN_HUD_SHOW_HUD_COMPONENT_THIS_FRAME },
        { "HIDE_STREET_AND_CAR_NAMES_THIS_FRAME()", WREN_HUD_HIDE_STREET_AND_CAR_NAMES_THIS_FRAME },
        { "RESET_RETICULE_VALUES()", WREN_HUD_RESET_RETICULE_VALUES },
        { "RESET_HUD_COMPONENT_VALUES(_)", WREN_HUD_RESET_HUD_COMPONENT_VALUES },
        { "SET_HUD_COMPONENT_POSITION(_,_,_)", WREN_HUD_SET_HUD_COMPONENT_POSITION },
        { "GET_HUD_COMPONENT_POSITION(_)", WREN_HUD_GET_HUD_COMPONENT_POSITION },
        { "CLEAR_REMINDER_MESSAGE()", WREN_HUD_CLEAR_REMINDER_MESSAGE },
        { "GET_HUD_SCREEN_POSITION_FROM_WORLD_POSITION(_,_,_)", WREN_HUD_GET_HUD_SCREEN_POSITION_FROM_WORLD_POSITION },
        { "OPEN_REPORTUGC_MENU()", WREN_HUD_OPEN_REPORTUGC_MENU },
        { "FORCE_CLOSE_REPORTUGC_MENU()", WREN_HUD_FORCE_CLOSE_REPORTUGC_MENU },
        { "IS_REPORTUGC_MENU_OPEN()", WREN_HUD_IS_REPORTUGC_MENU_OPEN },
        { "IS_FLOATING_HELP_TEXT_ON_SCREEN(_)", WREN_HUD_IS_FLOATING_HELP_TEXT_ON_SCREEN },
        { "SET_FLOATING_HELP_TEXT_SCREEN_POSITION(_,_,_)", WREN_HUD_SET_FLOATING_HELP_TEXT_SCREEN_POSITION },
        { "SET_FLOATING_HELP_TEXT_WORLD_POSITION(_,_,_,_)", WREN_HUD_SET_FLOATING_HELP_TEXT_WORLD_POSITION },
        { "SET_FLOATING_HELP_TEXT_TO_ENTITY(_,_,_,_)", WREN_HUD_SET_FLOATING_HELP_TEXT_TO_ENTITY },
        { "SET_FLOATING_HELP_TEXT_STYLE(_,_,_,_,_,_)", WREN_HUD_SET_FLOATING_HELP_TEXT_STYLE },
        { "CLEAR_FLOATING_HELP(_,_)", WREN_HUD_CLEAR_FLOATING_HELP },
        { "CREATE_MP_GAMER_TAG_WITH_CREW_COLOR(_,_,_,_,_,_,_,_,_)", WREN_HUD_CREATE_MP_GAMER_TAG_WITH_CREW_COLOR },
        { "IS_MP_GAMER_TAG_MOVIE_ACTIVE()", WREN_HUD_IS_MP_GAMER_TAG_MOVIE_ACTIVE },
        { "CREATE_FAKE_MP_GAMER_TAG(_,_,_,_,_,_)", WREN_HUD_CREATE_FAKE_MP_GAMER_TAG },
        { "REMOVE_MP_GAMER_TAG(_)", WREN_HUD_REMOVE_MP_GAMER_TAG },
        { "IS_MP_GAMER_TAG_ACTIVE(_)", WREN_HUD_IS_MP_GAMER_TAG_ACTIVE },
        { "IS_MP_GAMER_TAG_FREE(_)", WREN_HUD_IS_MP_GAMER_TAG_FREE },
        { "SET_MP_GAMER_TAG_VISIBILITY(_,_,_,_)", WREN_HUD_SET_MP_GAMER_TAG_VISIBILITY },
        { "SET_ALL_MP_GAMER_TAGS_VISIBILITY(_,_)", WREN_HUD_SET_ALL_MP_GAMER_TAGS_VISIBILITY },
        { "SET_MP_GAMER_TAGS_SHOULD_USE_VEHICLE_HEALTH(_,_)", WREN_HUD_SET_MP_GAMER_TAGS_SHOULD_USE_VEHICLE_HEALTH },
        { "SET_MP_GAMER_TAGS_SHOULD_USE_POINTS_HEALTH(_,_)", WREN_HUD_SET_MP_GAMER_TAGS_SHOULD_USE_POINTS_HEALTH },
        { "SET_MP_GAMER_TAGS_POINT_HEALTH(_,_,_)", WREN_HUD_SET_MP_GAMER_TAGS_POINT_HEALTH },
        { "SET_MP_GAMER_TAG_COLOUR(_,_,_)", WREN_HUD_SET_MP_GAMER_TAG_COLOUR },
        { "SET_MP_GAMER_TAG_HEALTH_BAR_COLOUR(_,_)", WREN_HUD_SET_MP_GAMER_TAG_HEALTH_BAR_COLOUR },
        { "SET_MP_GAMER_TAG_ALPHA(_,_,_)", WREN_HUD_SET_MP_GAMER_TAG_ALPHA },
        { "SET_MP_GAMER_TAG_WANTED_LEVEL(_,_)", WREN_HUD_SET_MP_GAMER_TAG_WANTED_LEVEL },
        { "SET_MP_GAMER_TAG_NUM_PACKAGES(_,_)", WREN_HUD_SET_MP_GAMER_TAG_NUM_PACKAGES },
        { "SET_MP_GAMER_TAG_NAME(_,_)", WREN_HUD_SET_MP_GAMER_TAG_NAME },
        { "IS_UPDATING_MP_GAMER_TAG_NAME_AND_CREW_DETAILS(_)", WREN_HUD_IS_UPDATING_MP_GAMER_TAG_NAME_AND_CREW_DETAILS },
        { "SET_MP_GAMER_TAG_BIG_TEXT(_,_)", WREN_HUD_SET_MP_GAMER_TAG_BIG_TEXT },
        { "GET_CURRENT_WEBPAGE_ID()", WREN_HUD_GET_CURRENT_WEBPAGE_ID },
        { "GET_CURRENT_WEBSITE_ID()", WREN_HUD_GET_CURRENT_WEBSITE_ID },
        { "GET_GLOBAL_ACTIONSCRIPT_FLAG(_)", WREN_HUD_GET_GLOBAL_ACTIONSCRIPT_FLAG },
        { "RESET_GLOBAL_ACTIONSCRIPT_FLAG(_)", WREN_HUD_RESET_GLOBAL_ACTIONSCRIPT_FLAG },
        { "IS_WARNING_MESSAGE_READY_FOR_CONTROL()", WREN_HUD_IS_WARNING_MESSAGE_READY_FOR_CONTROL },
        { "SET_WARNING_MESSAGE(_,_,_,_,_,_,_,_,_)", WREN_HUD_SET_WARNING_MESSAGE },
        { "SET_WARNING_MESSAGE_WITH_HEADER(_,_,_,_,_,_,_,_)", WREN_HUD_SET_WARNING_MESSAGE_WITH_HEADER },
        { "SET_WARNING_MESSAGE_WITH_HEADER_AND_SUBSTRING_FLAGS(_,_,_,_,_,_,_,_,_,_,_)", WREN_HUD_SET_WARNING_MESSAGE_WITH_HEADER_AND_SUBSTRING_FLAGS },
        { "SET_WARNING_MESSAGE_WITH_HEADER_EXTENDED(_,_,_,_,_,_,_,_,_)", WREN_HUD_SET_WARNING_MESSAGE_WITH_HEADER_EXTENDED },
        { "SET_WARNING_MESSAGE_WITH_HEADER_AND_SUBSTRING_FLAGS_EXTENDED(_,_,_,_,_,_,_,_,_,_,_,_)", WREN_HUD_SET_WARNING_MESSAGE_WITH_HEADER_AND_SUBSTRING_FLAGS_EXTENDED },
        { "GET_WARNING_SCREEN_MESSAGE_HASH()", WREN_HUD_GET_WARNING_SCREEN_MESSAGE_HASH },
        { "SET_WARNING_MESSAGE_OPTION_ITEMS(_,_,_,_,_,_)", WREN_HUD_SET_WARNING_MESSAGE_OPTION_ITEMS },
        { "SET_WARNING_MESSAGE_OPTION_HIGHLIGHT(_)", WREN_HUD_SET_WARNING_MESSAGE_OPTION_HIGHLIGHT },
        { "REMOVE_WARNING_MESSAGE_OPTION_ITEMS()", WREN_HUD_REMOVE_WARNING_MESSAGE_OPTION_ITEMS },
        { "IS_WARNING_MESSAGE_ACTIVE()", WREN_HUD_IS_WARNING_MESSAGE_ACTIVE },
        { "CLEAR_DYNAMIC_PAUSE_MENU_ERROR_MESSAGE()", WREN_HUD_CLEAR_DYNAMIC_PAUSE_MENU_ERROR_MESSAGE },
        { "CUSTOM_MINIMAP_SET_ACTIVE(_)", WREN_HUD_CUSTOM_MINIMAP_SET_ACTIVE },
        { "CUSTOM_MINIMAP_SET_BLIP_OBJECT(_)", WREN_HUD_CUSTOM_MINIMAP_SET_BLIP_OBJECT },
        { "CUSTOM_MINIMAP_CREATE_BLIP(_,_,_)", WREN_HUD_CUSTOM_MINIMAP_CREATE_BLIP },
        { "CUSTOM_MINIMAP_CLEAR_BLIPS()", WREN_HUD_CUSTOM_MINIMAP_CLEAR_BLIPS },
        { "FORCE_SONAR_BLIPS_THIS_FRAME()", WREN_HUD_FORCE_SONAR_BLIPS_THIS_FRAME },
        { "GET_NORTH_BLID_INDEX()", WREN_HUD_GET_NORTH_BLID_INDEX },
        { "DISPLAY_PLAYER_NAME_TAGS_ON_BLIPS(_)", WREN_HUD_DISPLAY_PLAYER_NAME_TAGS_ON_BLIPS },
        { "DRAW_FRONTEND_BACKGROUND_THIS_FRAME()", WREN_HUD_DRAW_FRONTEND_BACKGROUND_THIS_FRAME },
        { "DRAW_HUD_OVER_FADE_THIS_FRAME()", WREN_HUD_DRAW_HUD_OVER_FADE_THIS_FRAME },
        { "ACTIVATE_FRONTEND_MENU(_,_,_)", WREN_HUD_ACTIVATE_FRONTEND_MENU },
        { "RESTART_FRONTEND_MENU(_,_)", WREN_HUD_RESTART_FRONTEND_MENU },
        { "GET_CURRENT_FRONTEND_MENU_VERSION()", WREN_HUD_GET_CURRENT_FRONTEND_MENU_VERSION },
        { "SET_PAUSE_MENU_ACTIVE(_)", WREN_HUD_SET_PAUSE_MENU_ACTIVE },
        { "DISABLE_FRONTEND_THIS_FRAME()", WREN_HUD_DISABLE_FRONTEND_THIS_FRAME },
        { "SUPPRESS_FRONTEND_RENDERING_THIS_FRAME()", WREN_HUD_SUPPRESS_FRONTEND_RENDERING_THIS_FRAME },
        { "ALLOW_PAUSE_WHEN_NOT_IN_STATE_OF_PLAY_THIS_FRAME()", WREN_HUD_ALLOW_PAUSE_WHEN_NOT_IN_STATE_OF_PLAY_THIS_FRAME },
        { "SET_FRONTEND_ACTIVE(_)", WREN_HUD_SET_FRONTEND_ACTIVE },
        { "IS_PAUSE_MENU_ACTIVE()", WREN_HUD_IS_PAUSE_MENU_ACTIVE },
        { "IS_STORE_PENDING_NETWORK_SHUTDOWN_TO_OPEN()", WREN_HUD_IS_STORE_PENDING_NETWORK_SHUTDOWN_TO_OPEN },
        { "GET_PAUSE_MENU_STATE()", WREN_HUD_GET_PAUSE_MENU_STATE },
        { "GET_PAUSE_MENU_POSITION()", WREN_HUD_GET_PAUSE_MENU_POSITION },
        { "IS_PAUSE_MENU_RESTARTING()", WREN_HUD_IS_PAUSE_MENU_RESTARTING },
        { "FORCE_SCRIPTED_GFX_WHEN_FRONTEND_ACTIVE(_)", WREN_HUD_FORCE_SCRIPTED_GFX_WHEN_FRONTEND_ACTIVE },
        { "PAUSE_MENUCEPTION_GO_DEEPER(_)", WREN_HUD_PAUSE_MENUCEPTION_GO_DEEPER },
        { "PAUSE_MENUCEPTION_THE_KICK()", WREN_HUD_PAUSE_MENUCEPTION_THE_KICK },
        { "PAUSE_TOGGLE_FULLSCREEN_MAP(_)", WREN_HUD_PAUSE_TOGGLE_FULLSCREEN_MAP },
        { "PAUSE_MENU_ACTIVATE_CONTEXT(_)", WREN_HUD_PAUSE_MENU_ACTIVATE_CONTEXT },
        { "PAUSE_MENU_DEACTIVATE_CONTEXT(_)", WREN_HUD_PAUSE_MENU_DEACTIVATE_CONTEXT },
        { "PAUSE_MENU_IS_CONTEXT_ACTIVE(_)", WREN_HUD_PAUSE_MENU_IS_CONTEXT_ACTIVE },
        { "PAUSE_MENU_IS_CONTEXT_MENU_ACTIVE()", WREN_HUD_PAUSE_MENU_IS_CONTEXT_MENU_ACTIVE },
        { "PAUSE_MENU_GET_HAIR_COLOUR_INDEX()", WREN_HUD_PAUSE_MENU_GET_HAIR_COLOUR_INDEX },
        { "PAUSE_MENU_GET_MOUSE_HOVER_INDEX()", WREN_HUD_PAUSE_MENU_GET_MOUSE_HOVER_INDEX },
        { "PAUSE_MENU_GET_MOUSE_HOVER_UNIQUE_ID()", WREN_HUD_PAUSE_MENU_GET_MOUSE_HOVER_UNIQUE_ID },
        { "PAUSE_MENU_GET_MOUSE_CLICK_EVENT()", WREN_HUD_PAUSE_MENU_GET_MOUSE_CLICK_EVENT },
        { "PAUSE_MENU_REDRAW_INSTRUCTIONAL_BUTTONS(_)", WREN_HUD_PAUSE_MENU_REDRAW_INSTRUCTIONAL_BUTTONS },
        { "PAUSE_MENU_SET_BUSY_SPINNER(_,_,_)", WREN_HUD_PAUSE_MENU_SET_BUSY_SPINNER },
        { "PAUSE_MENU_SET_WARN_ON_TAB_CHANGE(_)", WREN_HUD_PAUSE_MENU_SET_WARN_ON_TAB_CHANGE },
        { "IS_FRONTEND_READY_FOR_CONTROL()", WREN_HUD_IS_FRONTEND_READY_FOR_CONTROL },
        { "TAKE_CONTROL_OF_FRONTEND()", WREN_HUD_TAKE_CONTROL_OF_FRONTEND },
        { "RELEASE_CONTROL_OF_FRONTEND()", WREN_HUD_RELEASE_CONTROL_OF_FRONTEND },
        { "CODE_WANTS_SCRIPT_TO_TAKE_CONTROL()", WREN_HUD_CODE_WANTS_SCRIPT_TO_TAKE_CONTROL },
        { "GET_SCREEN_CODE_WANTS_SCRIPT_TO_CONTROL()", WREN_HUD_GET_SCREEN_CODE_WANTS_SCRIPT_TO_CONTROL },
        { "IS_NAVIGATING_MENU_CONTENT()", WREN_HUD_IS_NAVIGATING_MENU_CONTENT },
        { "HAS_MENU_TRIGGER_EVENT_OCCURRED()", WREN_HUD_HAS_MENU_TRIGGER_EVENT_OCCURRED },
        { "HAS_MENU_LAYOUT_CHANGED_EVENT_OCCURRED()", WREN_HUD_HAS_MENU_LAYOUT_CHANGED_EVENT_OCCURRED },
        { "SET_SAVEGAME_LIST_UNIQUE_ID(_)", WREN_HUD_SET_SAVEGAME_LIST_UNIQUE_ID },
        { "GET_MENU_TRIGGER_EVENT_DETAILS()", WREN_HUD_GET_MENU_TRIGGER_EVENT_DETAILS },
        { "GET_MENU_LAYOUT_CHANGED_EVENT_DETAILS()", WREN_HUD_GET_MENU_LAYOUT_CHANGED_EVENT_DETAILS },
        { "GET_PM_PLAYER_CREW_COLOR()", WREN_HUD_GET_PM_PLAYER_CREW_COLOR },
        { "GET_MENU_PED_INT_STAT(_)", WREN_HUD_GET_MENU_PED_INT_STAT },
        { "GET_CHARACTER_MENU_PED_INT_STAT(_,_)", WREN_HUD_GET_CHARACTER_MENU_PED_INT_STAT },
        { "GET_MENU_PED_MASKED_INT_STAT(_,_,_)", WREN_HUD_GET_MENU_PED_MASKED_INT_STAT },
        { "GET_CHARACTER_MENU_PED_MASKED_INT_STAT(_,_,_,_)", WREN_HUD_GET_CHARACTER_MENU_PED_MASKED_INT_STAT },
        { "GET_MENU_PED_FLOAT_STAT(_)", WREN_HUD_GET_MENU_PED_FLOAT_STAT },
        { "GET_CHARACTER_MENU_PED_FLOAT_STAT(_,_)", WREN_HUD_GET_CHARACTER_MENU_PED_FLOAT_STAT },
        { "GET_MENU_PED_BOOL_STAT(_)", WREN_HUD_GET_MENU_PED_BOOL_STAT },
        { "CLEAR_PED_IN_PAUSE_MENU()", WREN_HUD_CLEAR_PED_IN_PAUSE_MENU },
        { "GIVE_PED_TO_PAUSE_MENU(_,_)", WREN_HUD_GIVE_PED_TO_PAUSE_MENU },
        { "SET_PAUSE_MENU_PED_LIGHTING(_)", WREN_HUD_SET_PAUSE_MENU_PED_LIGHTING },
        { "SET_PAUSE_MENU_PED_SLEEP_STATE(_)", WREN_HUD_SET_PAUSE_MENU_PED_SLEEP_STATE },
        { "OPEN_ONLINE_POLICIES_MENU()", WREN_HUD_OPEN_ONLINE_POLICIES_MENU },
        { "ARE_ONLINE_POLICIES_UP_TO_DATE()", WREN_HUD_ARE_ONLINE_POLICIES_UP_TO_DATE },
        { "IS_ONLINE_POLICIES_MENU_ACTIVE()", WREN_HUD_IS_ONLINE_POLICIES_MENU_ACTIVE },
        { "OPEN_SOCIAL_CLUB_MENU()", WREN_HUD_OPEN_SOCIAL_CLUB_MENU },
        { "CLOSE_SOCIAL_CLUB_MENU()", WREN_HUD_CLOSE_SOCIAL_CLUB_MENU },
        { "SET_SOCIAL_CLUB_TOUR(_)", WREN_HUD_SET_SOCIAL_CLUB_TOUR },
        { "IS_SOCIAL_CLUB_ACTIVE()", WREN_HUD_IS_SOCIAL_CLUB_ACTIVE },
        { "SET_TEXT_INPUT_BOX_ENABLED(_)", WREN_HUD_SET_TEXT_INPUT_BOX_ENABLED },
        { "FORCE_CLOSE_TEXT_INPUT_BOX()", WREN_HUD_FORCE_CLOSE_TEXT_INPUT_BOX },
        { "SET_ALLOW_COMMA_ON_TEXT_INPUT(_)", WREN_HUD_SET_ALLOW_COMMA_ON_TEXT_INPUT },
        { "OVERRIDE_MP_TEXT_CHAT_TEAM_STRING(_)", WREN_HUD_OVERRIDE_MP_TEXT_CHAT_TEAM_STRING },
        { "IS_MP_TEXT_CHAT_TYPING()", WREN_HUD_IS_MP_TEXT_CHAT_TYPING },
        { "CLOSE_MP_TEXT_CHAT()", WREN_HUD_CLOSE_MP_TEXT_CHAT },
        { "MP_TEXT_CHAT_IS_TEAM_JOB(_)", WREN_HUD_MP_TEXT_CHAT_IS_TEAM_JOB },
        { "OVERRIDE_MP_TEXT_CHAT_COLOR(_,_)", WREN_HUD_OVERRIDE_MP_TEXT_CHAT_COLOR },
        { "MP_TEXT_CHAT_DISABLE(_)", WREN_HUD_MP_TEXT_CHAT_DISABLE },
        { "FLAG_PLAYER_CONTEXT_IN_TOURNAMENT(_)", WREN_HUD_FLAG_PLAYER_CONTEXT_IN_TOURNAMENT },
        { "SET_PED_HAS_AI_BLIP(_,_)", WREN_HUD_SET_PED_HAS_AI_BLIP },
        { "SET_PED_HAS_AI_BLIP_WITH_COLOUR(_,_,_)", WREN_HUD_SET_PED_HAS_AI_BLIP_WITH_COLOUR },
        { "DOES_PED_HAVE_AI_BLIP(_)", WREN_HUD_DOES_PED_HAVE_AI_BLIP },
        { "SET_PED_AI_BLIP_GANG_ID(_,_)", WREN_HUD_SET_PED_AI_BLIP_GANG_ID },
        { "SET_PED_AI_BLIP_HAS_CONE(_,_)", WREN_HUD_SET_PED_AI_BLIP_HAS_CONE },
        { "SET_PED_AI_BLIP_FORCED_ON(_,_)", WREN_HUD_SET_PED_AI_BLIP_FORCED_ON },
        { "SET_PED_AI_BLIP_NOTICE_RANGE(_,_)", WREN_HUD_SET_PED_AI_BLIP_NOTICE_RANGE },
        { "SET_PED_AI_BLIP_SPRITE(_,_)", WREN_HUD_SET_PED_AI_BLIP_SPRITE },
        { "GET_AI_PED_PED_BLIP_INDEX(_)", WREN_HUD_GET_AI_PED_PED_BLIP_INDEX },
        { "GET_AI_PED_VEHICLE_BLIP_INDEX(_)", WREN_HUD_GET_AI_PED_VEHICLE_BLIP_INDEX },
        { "HAS_DIRECTOR_MODE_BEEN_LAUNCHED_BY_CODE()", WREN_HUD_HAS_DIRECTOR_MODE_BEEN_LAUNCHED_BY_CODE },
        { "SET_DIRECTOR_MODE_LAUNCHED_BY_SCRIPT()", WREN_HUD_SET_DIRECTOR_MODE_LAUNCHED_BY_SCRIPT },
        { "SET_PLAYER_IS_IN_DIRECTOR_MODE(_)", WREN_HUD_SET_PLAYER_IS_IN_DIRECTOR_MODE },
        { "SET_DIRECTOR_MODE_AVAILABLE(_)", WREN_HUD_SET_DIRECTOR_MODE_AVAILABLE },
        { "HIDE_HUDMARKERS_THIS_FRAME()", WREN_HUD_HIDE_HUDMARKERS_THIS_FRAME },
        { "GET_INTERIOR_HEADING(_)", WREN_INTERIOR_GET_INTERIOR_HEADING },
        { "GET_INTERIOR_LOCATION_AND_NAMEHASH(_)", WREN_INTERIOR_GET_INTERIOR_LOCATION_AND_NAMEHASH },
        { "GET_INTERIOR_GROUP_ID(_)", WREN_INTERIOR_GET_INTERIOR_GROUP_ID },
        { "GET_OFFSET_FROM_INTERIOR_IN_WORLD_COORDS(_,_,_,_)", WREN_INTERIOR_GET_OFFSET_FROM_INTERIOR_IN_WORLD_COORDS },
        { "IS_INTERIOR_SCENE()", WREN_INTERIOR_IS_INTERIOR_SCENE },
        { "IS_VALID_INTERIOR(_)", WREN_INTERIOR_IS_VALID_INTERIOR },
        { "CLEAR_ROOM_FOR_ENTITY(_)", WREN_INTERIOR_CLEAR_ROOM_FOR_ENTITY },
        { "FORCE_ROOM_FOR_ENTITY(_,_,_)", WREN_INTERIOR_FORCE_ROOM_FOR_ENTITY },
        { "GET_ROOM_KEY_FROM_ENTITY(_)", WREN_INTERIOR_GET_ROOM_KEY_FROM_ENTITY },
        { "GET_KEY_FOR_ENTITY_IN_ROOM(_)", WREN_INTERIOR_GET_KEY_FOR_ENTITY_IN_ROOM },
        { "GET_INTERIOR_FROM_ENTITY(_)", WREN_INTERIOR_GET_INTERIOR_FROM_ENTITY },
        { "RETAIN_ENTITY_IN_INTERIOR(_,_)", WREN_INTERIOR_RETAIN_ENTITY_IN_INTERIOR },
        { "CLEAR_INTERIOR_STATE_OF_ENTITY(_)", WREN_INTERIOR_CLEAR_INTERIOR_STATE_OF_ENTITY },
        { "FORCE_ACTIVATING_TRACKING_ON_ENTITY(_,_)", WREN_INTERIOR_FORCE_ACTIVATING_TRACKING_ON_ENTITY },
        { "FORCE_ROOM_FOR_GAME_VIEWPORT(_,_)", WREN_INTERIOR_FORCE_ROOM_FOR_GAME_VIEWPORT },
        { "SET_ROOM_FOR_GAME_VIEWPORT_BY_NAME(_)", WREN_INTERIOR_SET_ROOM_FOR_GAME_VIEWPORT_BY_NAME },
        { "SET_ROOM_FOR_GAME_VIEWPORT_BY_KEY(_)", WREN_INTERIOR_SET_ROOM_FOR_GAME_VIEWPORT_BY_KEY },
        { "GET_ROOM_KEY_FOR_GAME_VIEWPORT()", WREN_INTERIOR_GET_ROOM_KEY_FOR_GAME_VIEWPORT },
        { "CLEAR_ROOM_FOR_GAME_VIEWPORT()", WREN_INTERIOR_CLEAR_ROOM_FOR_GAME_VIEWPORT },
        { "GET_INTERIOR_FROM_PRIMARY_VIEW()", WREN_INTERIOR_GET_INTERIOR_FROM_PRIMARY_VIEW },
        { "GET_INTERIOR_AT_COORDS(_,_,_)", WREN_INTERIOR_GET_INTERIOR_AT_COORDS },
        { "ADD_PICKUP_TO_INTERIOR_ROOM_BY_NAME(_,_)", WREN_INTERIOR_ADD_PICKUP_TO_INTERIOR_ROOM_BY_NAME },
        { "PIN_INTERIOR_IN_MEMORY(_)", WREN_INTERIOR_PIN_INTERIOR_IN_MEMORY },
        { "UNPIN_INTERIOR(_)", WREN_INTERIOR_UNPIN_INTERIOR },
        { "IS_INTERIOR_READY(_)", WREN_INTERIOR_IS_INTERIOR_READY },
        { "SET_INTERIOR_IN_USE(_)", WREN_INTERIOR_SET_INTERIOR_IN_USE },
        { "GET_INTERIOR_AT_COORDS_WITH_TYPE(_,_,_,_)", WREN_INTERIOR_GET_INTERIOR_AT_COORDS_WITH_TYPE },
        { "GET_INTERIOR_AT_COORDS_WITH_TYPEHASH(_,_,_,_)", WREN_INTERIOR_GET_INTERIOR_AT_COORDS_WITH_TYPEHASH },
        { "ACTIVATE_INTERIOR_GROUPS_USING_CAMERA()", WREN_INTERIOR_ACTIVATE_INTERIOR_GROUPS_USING_CAMERA },
        { "IS_COLLISION_MARKED_OUTSIDE(_,_,_)", WREN_INTERIOR_IS_COLLISION_MARKED_OUTSIDE },
        { "GET_INTERIOR_FROM_COLLISION(_,_,_)", WREN_INTERIOR_GET_INTERIOR_FROM_COLLISION },
        { "ENABLE_STADIUM_PROBES_THIS_FRAME(_)", WREN_INTERIOR_ENABLE_STADIUM_PROBES_THIS_FRAME },
        { "ACTIVATE_INTERIOR_ENTITY_SET(_,_)", WREN_INTERIOR_ACTIVATE_INTERIOR_ENTITY_SET },
        { "DEACTIVATE_INTERIOR_ENTITY_SET(_,_)", WREN_INTERIOR_DEACTIVATE_INTERIOR_ENTITY_SET },
        { "IS_INTERIOR_ENTITY_SET_ACTIVE(_,_)", WREN_INTERIOR_IS_INTERIOR_ENTITY_SET_ACTIVE },
        { "SET_INTERIOR_ENTITY_SET_TINT_INDEX(_,_,_)", WREN_INTERIOR_SET_INTERIOR_ENTITY_SET_TINT_INDEX },
        { "REFRESH_INTERIOR(_)", WREN_INTERIOR_REFRESH_INTERIOR },
        { "ENABLE_EXTERIOR_CULL_MODEL_THIS_FRAME(_)", WREN_INTERIOR_ENABLE_EXTERIOR_CULL_MODEL_THIS_FRAME },
        { "ENABLE_SHADOW_CULL_MODEL_THIS_FRAME(_)", WREN_INTERIOR_ENABLE_SHADOW_CULL_MODEL_THIS_FRAME },
        { "DISABLE_INTERIOR(_,_)", WREN_INTERIOR_DISABLE_INTERIOR },
        { "IS_INTERIOR_DISABLED(_)", WREN_INTERIOR_IS_INTERIOR_DISABLED },
        { "CAP_INTERIOR(_,_)", WREN_INTERIOR_CAP_INTERIOR },
        { "IS_INTERIOR_CAPPED(_)", WREN_INTERIOR_IS_INTERIOR_CAPPED },
        { "DISABLE_METRO_SYSTEM(_)", WREN_INTERIOR_DISABLE_METRO_SYSTEM },
        { "SET_IS_EXTERIOR_ONLY(_,_)", WREN_INTERIOR_SET_IS_EXTERIOR_ONLY },
        { "CREATE_ITEMSET(_)", WREN_ITEMSET_CREATE_ITEMSET },
        { "DESTROY_ITEMSET(_)", WREN_ITEMSET_DESTROY_ITEMSET },
        { "IS_ITEMSET_VALID(_)", WREN_ITEMSET_IS_ITEMSET_VALID },
        { "ADD_TO_ITEMSET(_,_)", WREN_ITEMSET_ADD_TO_ITEMSET },
        { "REMOVE_FROM_ITEMSET(_,_)", WREN_ITEMSET_REMOVE_FROM_ITEMSET },
        { "GET_ITEMSET_SIZE(_)", WREN_ITEMSET_GET_ITEMSET_SIZE },
        { "GET_INDEXED_ITEM_IN_ITEMSET(_,_)", WREN_ITEMSET_GET_INDEXED_ITEM_IN_ITEMSET },
        { "IS_IN_ITEMSET(_,_)", WREN_ITEMSET_IS_IN_ITEMSET },
        { "CLEAN_ITEMSET(_)", WREN_ITEMSET_CLEAN_ITEMSET },
        { "LOBBY_AUTO_MULTIPLAYER_MENU()", WREN_LOADINGSCREEN_LOBBY_AUTO_MULTIPLAYER_MENU },
        { "LOBBY_AUTO_MULTIPLAYER_FREEMODE()", WREN_LOADINGSCREEN_LOBBY_AUTO_MULTIPLAYER_FREEMODE },
        { "LOBBY_SET_AUTO_MULTIPLAYER(_)", WREN_LOADINGSCREEN_LOBBY_SET_AUTO_MULTIPLAYER },
        { "LOBBY_AUTO_MULTIPLAYER_EVENT()", WREN_LOADINGSCREEN_LOBBY_AUTO_MULTIPLAYER_EVENT },
        { "LOBBY_SET_AUTO_MULTIPLAYER_EVENT(_)", WREN_LOADINGSCREEN_LOBBY_SET_AUTO_MULTIPLAYER_EVENT },
        { "LOBBY_AUTO_MULTIPLAYER_RANDOM_JOB()", WREN_LOADINGSCREEN_LOBBY_AUTO_MULTIPLAYER_RANDOM_JOB },
        { "LOBBY_SET_AUTO_MP_RANDOM_JOB(_)", WREN_LOADINGSCREEN_LOBBY_SET_AUTO_MP_RANDOM_JOB },
        { "SHUTDOWN_SESSION_CLEARS_AUTO_MULTIPLAYER(_)", WREN_LOADINGSCREEN_SHUTDOWN_SESSION_CLEARS_AUTO_MULTIPLAYER },
        { "LOCALIZATION_GET_SYSTEM_LANGUAGE()", WREN_LOCALIZATION_LOCALIZATION_GET_SYSTEM_LANGUAGE },
        { "GET_CURRENT_LANGUAGE()", WREN_LOCALIZATION_GET_CURRENT_LANGUAGE },
        { "LOCALIZATION_GET_SYSTEM_DATE_TYPE()", WREN_LOCALIZATION_LOCALIZATION_GET_SYSTEM_DATE_TYPE },
        { "GET_ALLOCATED_STACK_SIZE()", WREN_MISC_GET_ALLOCATED_STACK_SIZE },
        { "GET_NUMBER_OF_FREE_STACKS_OF_THIS_SIZE(_)", WREN_MISC_GET_NUMBER_OF_FREE_STACKS_OF_THIS_SIZE },
        { "SET_RANDOM_SEED(_)", WREN_MISC_SET_RANDOM_SEED },
        { "SET_TIME_SCALE(_)", WREN_MISC_SET_TIME_SCALE },
        { "SET_MISSION_FLAG(_)", WREN_MISC_SET_MISSION_FLAG },
        { "GET_MISSION_FLAG()", WREN_MISC_GET_MISSION_FLAG },
        { "SET_RANDOM_EVENT_FLAG(_)", WREN_MISC_SET_RANDOM_EVENT_FLAG },
        { "GET_RANDOM_EVENT_FLAG()", WREN_MISC_GET_RANDOM_EVENT_FLAG },
        { "GET_CONTENT_TO_LOAD()", WREN_MISC_GET_CONTENT_TO_LOAD },
        { "ACTIVITY_FEED_CREATE(_,_)", WREN_MISC_ACTIVITY_FEED_CREATE },
        { "ACTIVITY_FEED_ADD_SUBSTRING_TO_CAPTION(_)", WREN_MISC_ACTIVITY_FEED_ADD_SUBSTRING_TO_CAPTION },
        { "ACTIVITY_FEED_ADD_LITERAL_SUBSTRING_TO_CAPTION(_)", WREN_MISC_ACTIVITY_FEED_ADD_LITERAL_SUBSTRING_TO_CAPTION },
        { "ACTIVITY_FEED_ADD_INT_TO_CAPTION(_)", WREN_MISC_ACTIVITY_FEED_ADD_INT_TO_CAPTION },
        { "ACTIVITY_FEED_LARGE_IMAGE_URL(_)", WREN_MISC_ACTIVITY_FEED_LARGE_IMAGE_URL },
        { "ACTIVITY_FEED_ACTION_START_WITH_COMMAND_LINE(_,_)", WREN_MISC_ACTIVITY_FEED_ACTION_START_WITH_COMMAND_LINE },
        { "ACTIVITY_FEED_ACTION_START_WITH_COMMAND_LINE_ADD(_)", WREN_MISC_ACTIVITY_FEED_ACTION_START_WITH_COMMAND_LINE_ADD },
        { "ACTIVITY_FEED_POST()", WREN_MISC_ACTIVITY_FEED_POST },
        { "ACTIVITY_FEED_ONLINE_PLAYED_WITH_POST(_)", WREN_MISC_ACTIVITY_FEED_ONLINE_PLAYED_WITH_POST },
        { "HAS_RESUMED_FROM_SUSPEND()", WREN_MISC_HAS_RESUMED_FROM_SUSPEND },
        { "SET_SCRIPT_HIGH_PRIO(_)", WREN_MISC_SET_SCRIPT_HIGH_PRIO },
        { "SET_THIS_IS_A_TRIGGER_SCRIPT(_)", WREN_MISC_SET_THIS_IS_A_TRIGGER_SCRIPT },
        { "INFORM_CODE_OF_CONTENT_ID_OF_CURRENT_UGC_MISSION(_)", WREN_MISC_INFORM_CODE_OF_CONTENT_ID_OF_CURRENT_UGC_MISSION },
        { "GET_BASE_ELEMENT_LOCATION_FROM_METADATA_BLOCK(_,_)", WREN_MISC_GET_BASE_ELEMENT_LOCATION_FROM_METADATA_BLOCK },
        { "GET_PREV_WEATHER_TYPE_HASH_NAME()", WREN_MISC_GET_PREV_WEATHER_TYPE_HASH_NAME },
        { "GET_NEXT_WEATHER_TYPE_HASH_NAME()", WREN_MISC_GET_NEXT_WEATHER_TYPE_HASH_NAME },
        { "IS_PREV_WEATHER_TYPE(_)", WREN_MISC_IS_PREV_WEATHER_TYPE },
        { "IS_NEXT_WEATHER_TYPE(_)", WREN_MISC_IS_NEXT_WEATHER_TYPE },
        { "SET_WEATHER_TYPE_PERSIST(_)", WREN_MISC_SET_WEATHER_TYPE_PERSIST },
        { "SET_WEATHER_TYPE_NOW_PERSIST(_)", WREN_MISC_SET_WEATHER_TYPE_NOW_PERSIST },
        { "SET_WEATHER_TYPE_NOW(_)", WREN_MISC_SET_WEATHER_TYPE_NOW },
        { "SET_WEATHER_TYPE_OVERTIME_PERSIST(_,_)", WREN_MISC_SET_WEATHER_TYPE_OVERTIME_PERSIST },
        { "SET_RANDOM_WEATHER_TYPE()", WREN_MISC_SET_RANDOM_WEATHER_TYPE },
        { "CLEAR_WEATHER_TYPE_PERSIST()", WREN_MISC_CLEAR_WEATHER_TYPE_PERSIST },
        { "CLEAR_WEATHER_TYPE_NOW_PERSIST_NETWORK(_)", WREN_MISC_CLEAR_WEATHER_TYPE_NOW_PERSIST_NETWORK },
        { "GET_CURR_WEATHER_STATE()", WREN_MISC_GET_CURR_WEATHER_STATE },
        { "SET_CURR_WEATHER_STATE(_,_,_)", WREN_MISC_SET_CURR_WEATHER_STATE },
        { "SET_OVERRIDE_WEATHER(_)", WREN_MISC_SET_OVERRIDE_WEATHER },
        { "SET_OVERRIDE_WEATHEREX(_,_)", WREN_MISC_SET_OVERRIDE_WEATHEREX },
        { "CLEAR_OVERRIDE_WEATHER()", WREN_MISC_CLEAR_OVERRIDE_WEATHER },
        { "WATER_OVERRIDE_SET_SHOREWAVEAMPLITUDE(_)", WREN_MISC_WATER_OVERRIDE_SET_SHOREWAVEAMPLITUDE },
        { "WATER_OVERRIDE_SET_SHOREWAVEMINAMPLITUDE(_)", WREN_MISC_WATER_OVERRIDE_SET_SHOREWAVEMINAMPLITUDE },
        { "WATER_OVERRIDE_SET_SHOREWAVEMAXAMPLITUDE(_)", WREN_MISC_WATER_OVERRIDE_SET_SHOREWAVEMAXAMPLITUDE },
        { "WATER_OVERRIDE_SET_OCEANNOISEMINAMPLITUDE(_)", WREN_MISC_WATER_OVERRIDE_SET_OCEANNOISEMINAMPLITUDE },
        { "WATER_OVERRIDE_SET_OCEANWAVEAMPLITUDE(_)", WREN_MISC_WATER_OVERRIDE_SET_OCEANWAVEAMPLITUDE },
        { "WATER_OVERRIDE_SET_OCEANWAVEMINAMPLITUDE(_)", WREN_MISC_WATER_OVERRIDE_SET_OCEANWAVEMINAMPLITUDE },
        { "WATER_OVERRIDE_SET_OCEANWAVEMAXAMPLITUDE(_)", WREN_MISC_WATER_OVERRIDE_SET_OCEANWAVEMAXAMPLITUDE },
        { "WATER_OVERRIDE_SET_RIPPLEBUMPINESS(_)", WREN_MISC_WATER_OVERRIDE_SET_RIPPLEBUMPINESS },
        { "WATER_OVERRIDE_SET_RIPPLEMINBUMPINESS(_)", WREN_MISC_WATER_OVERRIDE_SET_RIPPLEMINBUMPINESS },
        { "WATER_OVERRIDE_SET_RIPPLEMAXBUMPINESS(_)", WREN_MISC_WATER_OVERRIDE_SET_RIPPLEMAXBUMPINESS },
        { "WATER_OVERRIDE_SET_RIPPLEDISTURB(_)", WREN_MISC_WATER_OVERRIDE_SET_RIPPLEDISTURB },
        { "WATER_OVERRIDE_SET_STRENGTH(_)", WREN_MISC_WATER_OVERRIDE_SET_STRENGTH },
        { "WATER_OVERRIDE_FADE_IN(_)", WREN_MISC_WATER_OVERRIDE_FADE_IN },
        { "WATER_OVERRIDE_FADE_OUT(_)", WREN_MISC_WATER_OVERRIDE_FADE_OUT },
        { "SET_WIND(_)", WREN_MISC_SET_WIND },
        { "SET_WIND_SPEED(_)", WREN_MISC_SET_WIND_SPEED },
        { "GET_WIND_SPEED()", WREN_MISC_GET_WIND_SPEED },
        { "SET_WIND_DIRECTION(_)", WREN_MISC_SET_WIND_DIRECTION },
        { "GET_WIND_DIRECTION()", WREN_MISC_GET_WIND_DIRECTION },
        { "SET_RAIN(_)", WREN_MISC_SET_RAIN },
        { "GET_RAIN_LEVEL()", WREN_MISC_GET_RAIN_LEVEL },
        { "SET_SNOW(_)", WREN_MISC_SET_SNOW },
        { "GET_SNOW_LEVEL()", WREN_MISC_GET_SNOW_LEVEL },
        { "FORCE_LIGHTNING_FLASH()", WREN_MISC_FORCE_LIGHTNING_FLASH },
        { "SET_CLOUD_SETTINGS_OVERRIDE(_)", WREN_MISC_SET_CLOUD_SETTINGS_OVERRIDE },
        { "PRELOAD_CLOUD_HAT(_)", WREN_MISC_PRELOAD_CLOUD_HAT },
        { "LOAD_CLOUD_HAT(_,_)", WREN_MISC_LOAD_CLOUD_HAT },
        { "UNLOAD_CLOUD_HAT(_,_)", WREN_MISC_UNLOAD_CLOUD_HAT },
        { "UNLOAD_ALL_CLOUD_HATS()", WREN_MISC_UNLOAD_ALL_CLOUD_HATS },
        { "SET_CLOUDS_ALPHA(_)", WREN_MISC_SET_CLOUDS_ALPHA },
        { "GET_CLOUDS_ALPHA()", WREN_MISC_GET_CLOUDS_ALPHA },
        { "GET_GAME_TIMER()", WREN_MISC_GET_GAME_TIMER },
        { "GET_FRAME_TIME()", WREN_MISC_GET_FRAME_TIME },
        { "GET_SYSTEM_TIME_STEP()", WREN_MISC_GET_SYSTEM_TIME_STEP },
        { "GET_FRAME_COUNT()", WREN_MISC_GET_FRAME_COUNT },
        { "GET_RANDOM_FLOAT_IN_RANGE(_,_)", WREN_MISC_GET_RANDOM_FLOAT_IN_RANGE },
        { "GET_RANDOM_INT_IN_RANGE(_,_)", WREN_MISC_GET_RANDOM_INT_IN_RANGE },
        { "GET_RANDOM_MWC_INT_IN_RANGE(_,_)", WREN_MISC_GET_RANDOM_MWC_INT_IN_RANGE },
        { "GET_GROUND_Z_FOR_3D_COORD(_,_,_,_,_)", WREN_MISC_GET_GROUND_Z_FOR_3D_COORD },
        { "GET_GROUND_Z_AND_NORMAL_FOR_3D_COORD(_,_,_)", WREN_MISC_GET_GROUND_Z_AND_NORMAL_FOR_3D_COORD },
        { "GET_GROUND_Z_EXCLUDING_OBJECTS_FOR_3D_COORD(_,_,_,_,_)", WREN_MISC_GET_GROUND_Z_EXCLUDING_OBJECTS_FOR_3D_COORD },
        { "ASIN(_)", WREN_MISC_ASIN },
        { "ACOS(_)", WREN_MISC_ACOS },
        { "TAN(_)", WREN_MISC_TAN },
        { "ATAN(_)", WREN_MISC_ATAN },
        { "ATAN2(_,_)", WREN_MISC_ATAN2 },
        { "GET_DISTANCE_BETWEEN_COORDS(_,_,_,_,_,_,_)", WREN_MISC_GET_DISTANCE_BETWEEN_COORDS },
        { "GET_ANGLE_BETWEEN_2D_VECTORS(_,_,_,_)", WREN_MISC_GET_ANGLE_BETWEEN_2D_VECTORS },
        { "GET_HEADING_FROM_VECTOR_2D(_,_)", WREN_MISC_GET_HEADING_FROM_VECTOR_2D },
        { "GET_RATIO_OF_CLOSEST_POINT_ON_LINE(_,_,_,_,_,_,_,_,_,_)", WREN_MISC_GET_RATIO_OF_CLOSEST_POINT_ON_LINE },
        { "GET_CLOSEST_POINT_ON_LINE(_,_,_,_,_,_,_,_,_,_)", WREN_MISC_GET_CLOSEST_POINT_ON_LINE },
        { "GET_LINE_PLANE_INTERSECTION(_,_,_,_,_,_,_,_,_,_,_,_)", WREN_MISC_GET_LINE_PLANE_INTERSECTION },
        { "GET_POINT_AREA_OVERLAP(_,_,_,_,_,_,_,_,_,_,_,_,_,_)", WREN_MISC_GET_POINT_AREA_OVERLAP },
        { "SET_BIT(_)", WREN_MISC_SET_BIT },
        { "CLEAR_BIT(_)", WREN_MISC_CLEAR_BIT },
        { "GET_HASH_KEY(_)", WREN_MISC_GET_HASH_KEY },
        { "SLERP_NEAR_QUATERNION(_,_,_,_,_,_,_,_,_)", WREN_MISC_SLERP_NEAR_QUATERNION },
        { "IS_AREA_OCCUPIED(_,_,_,_,_,_,_,_,_,_,_,_,_)", WREN_MISC_IS_AREA_OCCUPIED },
        { "IS_AREA_OCCUPIED_SLOW(_,_,_,_,_,_,_,_,_,_,_,_,_)", WREN_MISC_IS_AREA_OCCUPIED_SLOW },
        { "IS_POSITION_OCCUPIED(_,_,_,_,_,_,_,_,_,_,_)", WREN_MISC_IS_POSITION_OCCUPIED },
        { "IS_POINT_OBSCURED_BY_A_MISSION_ENTITY(_,_,_,_,_,_,_)", WREN_MISC_IS_POINT_OBSCURED_BY_A_MISSION_ENTITY },
        { "CLEAR_AREA(_,_,_,_,_,_,_,_)", WREN_MISC_CLEAR_AREA },
        { "CLEAR_AREA_LEAVE_VEHICLE_HEALTH(_,_,_,_,_,_,_,_)", WREN_MISC_CLEAR_AREA_LEAVE_VEHICLE_HEALTH },
        { "CLEAR_AREA_OF_VEHICLES(_,_,_,_,_,_,_,_,_,_,_)", WREN_MISC_CLEAR_AREA_OF_VEHICLES },
        { "CLEAR_ANGLED_AREA_OF_VEHICLES(_,_,_,_,_,_,_,_,_,_,_,_,_,_)", WREN_MISC_CLEAR_ANGLED_AREA_OF_VEHICLES },
        { "CLEAR_AREA_OF_OBJECTS(_,_,_,_,_)", WREN_MISC_CLEAR_AREA_OF_OBJECTS },
        { "CLEAR_AREA_OF_PEDS(_,_,_,_,_)", WREN_MISC_CLEAR_AREA_OF_PEDS },
        { "CLEAR_AREA_OF_COPS(_,_,_,_,_)", WREN_MISC_CLEAR_AREA_OF_COPS },
        { "CLEAR_AREA_OF_PROJECTILES(_,_,_,_,_)", WREN_MISC_CLEAR_AREA_OF_PROJECTILES },
        { "CLEAR_SCENARIO_SPAWN_HISTORY()", WREN_MISC_CLEAR_SCENARIO_SPAWN_HISTORY },
        { "SET_SAVE_MENU_ACTIVE(_)", WREN_MISC_SET_SAVE_MENU_ACTIVE },
        { "GET_STATUS_OF_MANUAL_SAVE()", WREN_MISC_GET_STATUS_OF_MANUAL_SAVE },
        { "SET_CREDITS_ACTIVE(_)", WREN_MISC_SET_CREDITS_ACTIVE },
        { "SET_CREDITS_FADE_OUT_WITH_SCREEN(_)", WREN_MISC_SET_CREDITS_FADE_OUT_WITH_SCREEN },
        { "HAVE_CREDITS_REACHED_END()", WREN_MISC_HAVE_CREDITS_REACHED_END },
        { "TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME(_)", WREN_MISC_TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME },
        { "NETWORK_SET_SCRIPT_IS_SAFE_FOR_NETWORK_GAME()", WREN_MISC_NETWORK_SET_SCRIPT_IS_SAFE_FOR_NETWORK_GAME },
        { "ADD_HOSPITAL_RESTART(_,_,_,_,_)", WREN_MISC_ADD_HOSPITAL_RESTART },
        { "DISABLE_HOSPITAL_RESTART(_,_)", WREN_MISC_DISABLE_HOSPITAL_RESTART },
        { "ADD_POLICE_RESTART(_,_,_,_,_)", WREN_MISC_ADD_POLICE_RESTART },
        { "DISABLE_POLICE_RESTART(_,_)", WREN_MISC_DISABLE_POLICE_RESTART },
        { "SET_RESTART_COORD_OVERRIDE(_,_,_,_)", WREN_MISC_SET_RESTART_COORD_OVERRIDE },
        { "CLEAR_RESTART_COORD_OVERRIDE()", WREN_MISC_CLEAR_RESTART_COORD_OVERRIDE },
        { "PAUSE_DEATH_ARREST_RESTART(_)", WREN_MISC_PAUSE_DEATH_ARREST_RESTART },
        { "IGNORE_NEXT_RESTART(_)", WREN_MISC_IGNORE_NEXT_RESTART },
        { "SET_FADE_OUT_AFTER_DEATH(_)", WREN_MISC_SET_FADE_OUT_AFTER_DEATH },
        { "SET_FADE_OUT_AFTER_ARREST(_)", WREN_MISC_SET_FADE_OUT_AFTER_ARREST },
        { "SET_FADE_IN_AFTER_DEATH_ARREST(_)", WREN_MISC_SET_FADE_IN_AFTER_DEATH_ARREST },
        { "SET_FADE_IN_AFTER_LOAD(_)", WREN_MISC_SET_FADE_IN_AFTER_LOAD },
        { "REGISTER_SAVE_HOUSE(_,_,_,_,_,_)", WREN_MISC_REGISTER_SAVE_HOUSE },
        { "SET_SAVE_HOUSE(_,_,_)", WREN_MISC_SET_SAVE_HOUSE },
        { "OVERRIDE_SAVE_HOUSE(_,_,_,_,_,_,_,_)", WREN_MISC_OVERRIDE_SAVE_HOUSE },
        { "GET_SAVE_HOUSE_DETAILS_AFTER_SUCCESSFUL_LOAD()", WREN_MISC_GET_SAVE_HOUSE_DETAILS_AFTER_SUCCESSFUL_LOAD },
        { "DO_AUTO_SAVE()", WREN_MISC_DO_AUTO_SAVE },
        { "GET_IS_AUTO_SAVE_OFF()", WREN_MISC_GET_IS_AUTO_SAVE_OFF },
        { "IS_AUTO_SAVE_IN_PROGRESS()", WREN_MISC_IS_AUTO_SAVE_IN_PROGRESS },
        { "HAS_CODE_REQUESTED_AUTOSAVE()", WREN_MISC_HAS_CODE_REQUESTED_AUTOSAVE },
        { "CLEAR_CODE_REQUESTED_AUTOSAVE()", WREN_MISC_CLEAR_CODE_REQUESTED_AUTOSAVE },
        { "BEGIN_REPLAY_STATS(_,_)", WREN_MISC_BEGIN_REPLAY_STATS },
        { "ADD_REPLAY_STAT_VALUE(_)", WREN_MISC_ADD_REPLAY_STAT_VALUE },
        { "END_REPLAY_STATS()", WREN_MISC_END_REPLAY_STATS },
        { "HAVE_REPLAY_STATS_BEEN_STORED()", WREN_MISC_HAVE_REPLAY_STATS_BEEN_STORED },
        { "GET_REPLAY_STAT_MISSION_ID()", WREN_MISC_GET_REPLAY_STAT_MISSION_ID },
        { "GET_REPLAY_STAT_MISSION_TYPE()", WREN_MISC_GET_REPLAY_STAT_MISSION_TYPE },
        { "GET_REPLAY_STAT_COUNT()", WREN_MISC_GET_REPLAY_STAT_COUNT },
        { "GET_REPLAY_STAT_AT_INDEX(_)", WREN_MISC_GET_REPLAY_STAT_AT_INDEX },
        { "CLEAR_REPLAY_STATS()", WREN_MISC_CLEAR_REPLAY_STATS },
        { "QUEUE_MISSION_REPEAT_LOAD()", WREN_MISC_QUEUE_MISSION_REPEAT_LOAD },
        { "QUEUE_MISSION_REPEAT_SAVE()", WREN_MISC_QUEUE_MISSION_REPEAT_SAVE },
        { "QUEUE_MISSION_REPEAT_SAVE_FOR_BENCHMARK_TEST()", WREN_MISC_QUEUE_MISSION_REPEAT_SAVE_FOR_BENCHMARK_TEST },
        { "GET_STATUS_OF_MISSION_REPEAT_SAVE()", WREN_MISC_GET_STATUS_OF_MISSION_REPEAT_SAVE },
        { "IS_MEMORY_CARD_IN_USE()", WREN_MISC_IS_MEMORY_CARD_IN_USE },
        { "SHOOT_SINGLE_BULLET_BETWEEN_COORDS(_,_,_,_,_,_,_,_,_,_,_,_,_)", WREN_MISC_SHOOT_SINGLE_BULLET_BETWEEN_COORDS },
        { "SHOOT_SINGLE_BULLET_BETWEEN_COORDS_IGNORE_ENTITY(_,_,_,_,_,_,_,_,_,_,_,_,_,_,_)", WREN_MISC_SHOOT_SINGLE_BULLET_BETWEEN_COORDS_IGNORE_ENTITY },
        { "SHOOT_SINGLE_BULLET_BETWEEN_COORDS_IGNORE_ENTITY_NEW(_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_)", WREN_MISC_SHOOT_SINGLE_BULLET_BETWEEN_COORDS_IGNORE_ENTITY_NEW },
        { "GET_MODEL_DIMENSIONS(_)", WREN_MISC_GET_MODEL_DIMENSIONS },
        { "SET_FAKE_WANTED_LEVEL(_)", WREN_MISC_SET_FAKE_WANTED_LEVEL },
        { "GET_FAKE_WANTED_LEVEL()", WREN_MISC_GET_FAKE_WANTED_LEVEL },
        { "USING_MISSION_CREATOR(_)", WREN_MISC_USING_MISSION_CREATOR },
        { "ALLOW_MISSION_CREATOR_WARP(_)", WREN_MISC_ALLOW_MISSION_CREATOR_WARP },
        { "SET_MINIGAME_IN_PROGRESS(_)", WREN_MISC_SET_MINIGAME_IN_PROGRESS },
        { "IS_MINIGAME_IN_PROGRESS()", WREN_MISC_IS_MINIGAME_IN_PROGRESS },
        { "IS_THIS_A_MINIGAME_SCRIPT()", WREN_MISC_IS_THIS_A_MINIGAME_SCRIPT },
        { "IS_SNIPER_INVERTED()", WREN_MISC_IS_SNIPER_INVERTED },
        { "SHOULD_USE_METRIC_MEASUREMENTS()", WREN_MISC_SHOULD_USE_METRIC_MEASUREMENTS },
        { "GET_PROFILE_SETTING(_)", WREN_MISC_GET_PROFILE_SETTING },
        { "ARE_STRINGS_EQUAL(_,_)", WREN_MISC_ARE_STRINGS_EQUAL },
        { "COMPARE_STRINGS(_,_,_,_)", WREN_MISC_COMPARE_STRINGS },
        { "ABSI(_)", WREN_MISC_ABSI },
        { "ABSF(_)", WREN_MISC_ABSF },
        { "IS_SNIPER_BULLET_IN_AREA(_,_,_,_,_,_)", WREN_MISC_IS_SNIPER_BULLET_IN_AREA },
        { "IS_PROJECTILE_IN_AREA(_,_,_,_,_,_,_)", WREN_MISC_IS_PROJECTILE_IN_AREA },
        { "IS_PROJECTILE_TYPE_IN_AREA(_,_,_,_,_,_,_,_)", WREN_MISC_IS_PROJECTILE_TYPE_IN_AREA },
        { "IS_PROJECTILE_TYPE_IN_ANGLED_AREA(_,_,_,_,_,_,_,_,_)", WREN_MISC_IS_PROJECTILE_TYPE_IN_ANGLED_AREA },
        { "IS_PROJECTILE_TYPE_WITHIN_DISTANCE(_,_,_,_,_,_)", WREN_MISC_IS_PROJECTILE_TYPE_WITHIN_DISTANCE },
        { "GET_COORDS_OF_PROJECTILE_TYPE_IN_AREA(_,_,_,_,_,_,_,_)", WREN_MISC_GET_COORDS_OF_PROJECTILE_TYPE_IN_AREA },
        { "GET_COORDS_OF_PROJECTILE_TYPE_WITHIN_DISTANCE(_,_,_,_)", WREN_MISC_GET_COORDS_OF_PROJECTILE_TYPE_WITHIN_DISTANCE },
        { "GET_PROJECTILE_OF_PROJECTILE_TYPE_WITHIN_DISTANCE(_,_,_,_)", WREN_MISC_GET_PROJECTILE_OF_PROJECTILE_TYPE_WITHIN_DISTANCE },
        { "IS_BULLET_IN_ANGLED_AREA(_,_,_,_,_,_,_,_)", WREN_MISC_IS_BULLET_IN_ANGLED_AREA },
        { "IS_BULLET_IN_AREA(_,_,_,_,_)", WREN_MISC_IS_BULLET_IN_AREA },
        { "IS_BULLET_IN_BOX(_,_,_,_,_,_,_)", WREN_MISC_IS_BULLET_IN_BOX },
        { "HAS_BULLET_IMPACTED_IN_AREA(_,_,_,_,_,_)", WREN_MISC_HAS_BULLET_IMPACTED_IN_AREA },
        { "HAS_BULLET_IMPACTED_IN_BOX(_,_,_,_,_,_,_,_)", WREN_MISC_HAS_BULLET_IMPACTED_IN_BOX },
        { "IS_ORBIS_VERSION()", WREN_MISC_IS_ORBIS_VERSION },
        { "IS_DURANGO_VERSION()", WREN_MISC_IS_DURANGO_VERSION },
        { "IS_XBOX360_VERSION()", WREN_MISC_IS_XBOX360_VERSION },
        { "IS_PS3_VERSION()", WREN_MISC_IS_PS3_VERSION },
        { "IS_PC_VERSION()", WREN_MISC_IS_PC_VERSION },
        { "IS_STEAM_VERSION()", WREN_MISC_IS_STEAM_VERSION },
        { "IS_AUSSIE_VERSION()", WREN_MISC_IS_AUSSIE_VERSION },
        { "IS_JAPANESE_VERSION()", WREN_MISC_IS_JAPANESE_VERSION },
        { "IS_XBOX_PLATFORM()", WREN_MISC_IS_XBOX_PLATFORM },
        { "IS_SCARLETT_VERSION()", WREN_MISC_IS_SCARLETT_VERSION },
        { "IS_SCE_PLATFORM()", WREN_MISC_IS_SCE_PLATFORM },
        { "IS_PROSPERO_VERSION()", WREN_MISC_IS_PROSPERO_VERSION },
        { "IS_STRING_NULL(_)", WREN_MISC_IS_STRING_NULL },
        { "IS_STRING_NULL_OR_EMPTY(_)", WREN_MISC_IS_STRING_NULL_OR_EMPTY },
        { "STRING_TO_INT(_)", WREN_MISC_STRING_TO_INT },
        { "SET_BITS_IN_RANGE(_,_,_)", WREN_MISC_SET_BITS_IN_RANGE },
        { "GET_BITS_IN_RANGE(_,_,_)", WREN_MISC_GET_BITS_IN_RANGE },
        { "ADD_STUNT_JUMP(_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_)", WREN_MISC_ADD_STUNT_JUMP },
        { "ADD_STUNT_JUMP_ANGLED(_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_)", WREN_MISC_ADD_STUNT_JUMP_ANGLED },
        { "TOGGLE_SHOW_OPTIONAL_STUNT_JUMP_CAMERA(_)", WREN_MISC_TOGGLE_SHOW_OPTIONAL_STUNT_JUMP_CAMERA },
        { "DELETE_STUNT_JUMP(_)", WREN_MISC_DELETE_STUNT_JUMP },
        { "ENABLE_STUNT_JUMP_SET(_)", WREN_MISC_ENABLE_STUNT_JUMP_SET },
        { "DISABLE_STUNT_JUMP_SET(_)", WREN_MISC_DISABLE_STUNT_JUMP_SET },
        { "SET_STUNT_JUMPS_CAN_TRIGGER(_)", WREN_MISC_SET_STUNT_JUMPS_CAN_TRIGGER },
        { "IS_STUNT_JUMP_IN_PROGRESS()", WREN_MISC_IS_STUNT_JUMP_IN_PROGRESS },
        { "IS_STUNT_JUMP_MESSAGE_SHOWING()", WREN_MISC_IS_STUNT_JUMP_MESSAGE_SHOWING },
        { "GET_NUM_SUCCESSFUL_STUNT_JUMPS()", WREN_MISC_GET_NUM_SUCCESSFUL_STUNT_JUMPS },
        { "GET_TOTAL_SUCCESSFUL_STUNT_JUMPS()", WREN_MISC_GET_TOTAL_SUCCESSFUL_STUNT_JUMPS },
        { "CANCEL_STUNT_JUMP()", WREN_MISC_CANCEL_STUNT_JUMP },
        { "SET_GAME_PAUSED(_)", WREN_MISC_SET_GAME_PAUSED },
        { "SET_THIS_SCRIPT_CAN_BE_PAUSED(_)", WREN_MISC_SET_THIS_SCRIPT_CAN_BE_PAUSED },
        { "SET_THIS_SCRIPT_CAN_REMOVE_BLIPS_CREATED_BY_ANY_SCRIPT(_)", WREN_MISC_SET_THIS_SCRIPT_CAN_REMOVE_BLIPS_CREATED_BY_ANY_SCRIPT },
        { "HAS_CHEAT_WITH_HASH_BEEN_ACTIVATED(_,_)", WREN_MISC_HAS_CHEAT_WITH_HASH_BEEN_ACTIVATED },
        { "HAS_PC_CHEAT_WITH_HASH_BEEN_ACTIVATED(_)", WREN_MISC_HAS_PC_CHEAT_WITH_HASH_BEEN_ACTIVATED },
        { "OVERRIDE_FREEZE_FLAGS(_)", WREN_MISC_OVERRIDE_FREEZE_FLAGS },
        { "SET_INSTANCE_PRIORITY_MODE(_)", WREN_MISC_SET_INSTANCE_PRIORITY_MODE },
        { "SET_INSTANCE_PRIORITY_HINT(_)", WREN_MISC_SET_INSTANCE_PRIORITY_HINT },
        { "IS_FRONTEND_FADING()", WREN_MISC_IS_FRONTEND_FADING },
        { "POPULATE_NOW()", WREN_MISC_POPULATE_NOW },
        { "GET_INDEX_OF_CURRENT_LEVEL()", WREN_MISC_GET_INDEX_OF_CURRENT_LEVEL },
        { "SET_GRAVITY_LEVEL(_)", WREN_MISC_SET_GRAVITY_LEVEL },
        { "START_SAVE_DATA(_,_)", WREN_MISC_START_SAVE_DATA },
        { "STOP_SAVE_DATA()", WREN_MISC_STOP_SAVE_DATA },
        { "GET_SIZE_OF_SAVE_DATA(_)", WREN_MISC_GET_SIZE_OF_SAVE_DATA },
        { "REGISTER_INT_TO_SAVE(_)", WREN_MISC_REGISTER_INT_TO_SAVE },
        { "REGISTER_INT64_TO_SAVE(_)", WREN_MISC_REGISTER_INT64_TO_SAVE },
        { "REGISTER_ENUM_TO_SAVE(_)", WREN_MISC_REGISTER_ENUM_TO_SAVE },
        { "REGISTER_FLOAT_TO_SAVE(_)", WREN_MISC_REGISTER_FLOAT_TO_SAVE },
        { "REGISTER_BOOL_TO_SAVE(_)", WREN_MISC_REGISTER_BOOL_TO_SAVE },
        { "REGISTER_TEXT_LABEL_TO_SAVE(_)", WREN_MISC_REGISTER_TEXT_LABEL_TO_SAVE },
        { "REGISTER_TEXT_LABEL_15_TO_SAVE(_)", WREN_MISC_REGISTER_TEXT_LABEL_15_TO_SAVE },
        { "REGISTER_TEXT_LABEL_23_TO_SAVE(_)", WREN_MISC_REGISTER_TEXT_LABEL_23_TO_SAVE },
        { "REGISTER_TEXT_LABEL_31_TO_SAVE(_)", WREN_MISC_REGISTER_TEXT_LABEL_31_TO_SAVE },
        { "REGISTER_TEXT_LABEL_63_TO_SAVE(_)", WREN_MISC_REGISTER_TEXT_LABEL_63_TO_SAVE },
        { "START_SAVE_STRUCT_WITH_SIZE(_,_)", WREN_MISC_START_SAVE_STRUCT_WITH_SIZE },
        { "STOP_SAVE_STRUCT()", WREN_MISC_STOP_SAVE_STRUCT },
        { "START_SAVE_ARRAY_WITH_SIZE(_,_)", WREN_MISC_START_SAVE_ARRAY_WITH_SIZE },
        { "STOP_SAVE_ARRAY()", WREN_MISC_STOP_SAVE_ARRAY },
        { "COPY_SCRIPT_STRUCT(_)", WREN_MISC_COPY_SCRIPT_STRUCT },
        { "ENABLE_DISPATCH_SERVICE(_,_)", WREN_MISC_ENABLE_DISPATCH_SERVICE },
        { "BLOCK_DISPATCH_SERVICE_RESOURCE_CREATION(_,_)", WREN_MISC_BLOCK_DISPATCH_SERVICE_RESOURCE_CREATION },
        { "GET_NUMBER_RESOURCES_ALLOCATED_TO_WANTED_LEVEL(_)", WREN_MISC_GET_NUMBER_RESOURCES_ALLOCATED_TO_WANTED_LEVEL },
        { "CREATE_INCIDENT(_,_,_,_,_,_,_,_)", WREN_MISC_CREATE_INCIDENT },
        { "CREATE_INCIDENT_WITH_ENTITY(_,_,_,_,_,_)", WREN_MISC_CREATE_INCIDENT_WITH_ENTITY },
        { "DELETE_INCIDENT(_)", WREN_MISC_DELETE_INCIDENT },
        { "IS_INCIDENT_VALID(_)", WREN_MISC_IS_INCIDENT_VALID },
        { "SET_INCIDENT_REQUESTED_UNITS(_,_,_)", WREN_MISC_SET_INCIDENT_REQUESTED_UNITS },
        { "SET_IDEAL_SPAWN_DISTANCE_FOR_INCIDENT(_,_)", WREN_MISC_SET_IDEAL_SPAWN_DISTANCE_FOR_INCIDENT },
        { "FIND_SPAWN_POINT_IN_DIRECTION(_,_,_,_,_,_,_)", WREN_MISC_FIND_SPAWN_POINT_IN_DIRECTION },
        { "ADD_POP_MULTIPLIER_AREA(_,_,_,_,_,_,_,_,_,_)", WREN_MISC_ADD_POP_MULTIPLIER_AREA },
        { "DOES_POP_MULTIPLIER_AREA_EXIST(_)", WREN_MISC_DOES_POP_MULTIPLIER_AREA_EXIST },
        { "REMOVE_POP_MULTIPLIER_AREA(_,_)", WREN_MISC_REMOVE_POP_MULTIPLIER_AREA },
        { "IS_POP_MULTIPLIER_AREA_NETWORKED(_)", WREN_MISC_IS_POP_MULTIPLIER_AREA_NETWORKED },
        { "ADD_POP_MULTIPLIER_SPHERE(_,_,_,_,_,_,_,_)", WREN_MISC_ADD_POP_MULTIPLIER_SPHERE },
        { "DOES_POP_MULTIPLIER_SPHERE_EXIST(_)", WREN_MISC_DOES_POP_MULTIPLIER_SPHERE_EXIST },
        { "REMOVE_POP_MULTIPLIER_SPHERE(_,_)", WREN_MISC_REMOVE_POP_MULTIPLIER_SPHERE },
        { "ENABLE_TENNIS_MODE(_,_,_)", WREN_MISC_ENABLE_TENNIS_MODE },
        { "IS_TENNIS_MODE(_)", WREN_MISC_IS_TENNIS_MODE },
        { "PLAY_TENNIS_SWING_ANIM(_,_,_,_,_,_)", WREN_MISC_PLAY_TENNIS_SWING_ANIM },
        { "GET_TENNIS_SWING_ANIM_COMPLETE(_)", WREN_MISC_GET_TENNIS_SWING_ANIM_COMPLETE },
        { "GET_TENNIS_SWING_ANIM_CAN_BE_INTERRUPTED(_)", WREN_MISC_GET_TENNIS_SWING_ANIM_CAN_BE_INTERRUPTED },
        { "GET_TENNIS_SWING_ANIM_SWUNG(_)", WREN_MISC_GET_TENNIS_SWING_ANIM_SWUNG },
        { "PLAY_TENNIS_DIVE_ANIM(_,_,_,_,_,_)", WREN_MISC_PLAY_TENNIS_DIVE_ANIM },
        { "SET_TENNIS_MOVE_NETWORK_SIGNAL_FLOAT(_,_,_)", WREN_MISC_SET_TENNIS_MOVE_NETWORK_SIGNAL_FLOAT },
        { "RESET_DISPATCH_SPAWN_LOCATION()", WREN_MISC_RESET_DISPATCH_SPAWN_LOCATION },
        { "SET_DISPATCH_SPAWN_LOCATION(_,_,_)", WREN_MISC_SET_DISPATCH_SPAWN_LOCATION },
        { "RESET_DISPATCH_IDEAL_SPAWN_DISTANCE()", WREN_MISC_RESET_DISPATCH_IDEAL_SPAWN_DISTANCE },
        { "SET_DISPATCH_IDEAL_SPAWN_DISTANCE(_)", WREN_MISC_SET_DISPATCH_IDEAL_SPAWN_DISTANCE },
        { "RESET_DISPATCH_TIME_BETWEEN_SPAWN_ATTEMPTS(_)", WREN_MISC_RESET_DISPATCH_TIME_BETWEEN_SPAWN_ATTEMPTS },
        { "SET_DISPATCH_TIME_BETWEEN_SPAWN_ATTEMPTS(_,_)", WREN_MISC_SET_DISPATCH_TIME_BETWEEN_SPAWN_ATTEMPTS },
        { "SET_DISPATCH_TIME_BETWEEN_SPAWN_ATTEMPTS_MULTIPLIER(_,_)", WREN_MISC_SET_DISPATCH_TIME_BETWEEN_SPAWN_ATTEMPTS_MULTIPLIER },
        { "ADD_DISPATCH_SPAWN_ANGLED_BLOCKING_AREA(_,_,_,_,_,_,_)", WREN_MISC_ADD_DISPATCH_SPAWN_ANGLED_BLOCKING_AREA },
        { "ADD_DISPATCH_SPAWN_SPHERE_BLOCKING_AREA(_,_,_,_)", WREN_MISC_ADD_DISPATCH_SPAWN_SPHERE_BLOCKING_AREA },
        { "REMOVE_DISPATCH_SPAWN_BLOCKING_AREA(_)", WREN_MISC_REMOVE_DISPATCH_SPAWN_BLOCKING_AREA },
        { "RESET_DISPATCH_SPAWN_BLOCKING_AREAS()", WREN_MISC_RESET_DISPATCH_SPAWN_BLOCKING_AREAS },
        { "RESET_WANTED_RESPONSE_NUM_PEDS_TO_SPAWN()", WREN_MISC_RESET_WANTED_RESPONSE_NUM_PEDS_TO_SPAWN },
        { "SET_WANTED_RESPONSE_NUM_PEDS_TO_SPAWN(_,_)", WREN_MISC_SET_WANTED_RESPONSE_NUM_PEDS_TO_SPAWN },
        { "ADD_TACTICAL_NAV_MESH_POINT(_,_,_)", WREN_MISC_ADD_TACTICAL_NAV_MESH_POINT },
        { "CLEAR_TACTICAL_NAV_MESH_POINTS()", WREN_MISC_CLEAR_TACTICAL_NAV_MESH_POINTS },
        { "SET_RIOT_MODE_ENABLED(_)", WREN_MISC_SET_RIOT_MODE_ENABLED },
        { "DISPLAY_ONSCREEN_KEYBOARD_WITH_LONGER_INITIAL_STRING(_,_,_,_,_,_,_,_,_,_,_)", WREN_MISC_DISPLAY_ONSCREEN_KEYBOARD_WITH_LONGER_INITIAL_STRING },
        { "DISPLAY_ONSCREEN_KEYBOARD(_,_,_,_,_,_,_,_)", WREN_MISC_DISPLAY_ONSCREEN_KEYBOARD },
        { "UPDATE_ONSCREEN_KEYBOARD()", WREN_MISC_UPDATE_ONSCREEN_KEYBOARD },
        { "GET_ONSCREEN_KEYBOARD_RESULT()", WREN_MISC_GET_ONSCREEN_KEYBOARD_RESULT },
        { "CANCEL_ONSCREEN_KEYBOARD()", WREN_MISC_CANCEL_ONSCREEN_KEYBOARD },
        { "NEXT_ONSCREEN_KEYBOARD_RESULT_WILL_DISPLAY_USING_THESE_FONTS(_)", WREN_MISC_NEXT_ONSCREEN_KEYBOARD_RESULT_WILL_DISPLAY_USING_THESE_FONTS },
        { "ACTION_MANAGER_ENABLE_ACTION(_,_)", WREN_MISC_ACTION_MANAGER_ENABLE_ACTION },
        { "GET_REAL_WORLD_TIME()", WREN_MISC_GET_REAL_WORLD_TIME },
        { "SUPRESS_RANDOM_EVENT_THIS_FRAME(_,_)", WREN_MISC_SUPRESS_RANDOM_EVENT_THIS_FRAME },
        { "SET_EXPLOSIVE_AMMO_THIS_FRAME(_)", WREN_MISC_SET_EXPLOSIVE_AMMO_THIS_FRAME },
        { "SET_FIRE_AMMO_THIS_FRAME(_)", WREN_MISC_SET_FIRE_AMMO_THIS_FRAME },
        { "SET_EXPLOSIVE_MELEE_THIS_FRAME(_)", WREN_MISC_SET_EXPLOSIVE_MELEE_THIS_FRAME },
        { "SET_SUPER_JUMP_THIS_FRAME(_)", WREN_MISC_SET_SUPER_JUMP_THIS_FRAME },
        { "SET_BEAST_JUMP_THIS_FRAME(_)", WREN_MISC_SET_BEAST_JUMP_THIS_FRAME },
        { "SET_FORCED_JUMP_THIS_FRAME(_)", WREN_MISC_SET_FORCED_JUMP_THIS_FRAME },
        { "HAS_GAME_INSTALLED_THIS_SESSION()", WREN_MISC_HAS_GAME_INSTALLED_THIS_SESSION },
        { "SET_TICKER_JOHNMARSTON_IS_DONE()", WREN_MISC_SET_TICKER_JOHNMARSTON_IS_DONE },
        { "ARE_PROFILE_SETTINGS_VALID()", WREN_MISC_ARE_PROFILE_SETTINGS_VALID },
        { "PREVENT_ARREST_STATE_THIS_FRAME()", WREN_MISC_PREVENT_ARREST_STATE_THIS_FRAME },
        { "FORCE_GAME_STATE_PLAYING()", WREN_MISC_FORCE_GAME_STATE_PLAYING },
        { "SCRIPT_RACE_INIT(_,_,_,_)", WREN_MISC_SCRIPT_RACE_INIT },
        { "SCRIPT_RACE_SHUTDOWN()", WREN_MISC_SCRIPT_RACE_SHUTDOWN },
        { "SCRIPT_RACE_PLAYER_HIT_CHECKPOINT(_,_,_,_)", WREN_MISC_SCRIPT_RACE_PLAYER_HIT_CHECKPOINT },
        { "SCRIPT_RACE_GET_PLAYER_SPLIT_TIME(_)", WREN_MISC_SCRIPT_RACE_GET_PLAYER_SPLIT_TIME },
        { "START_END_USER_BENCHMARK()", WREN_MISC_START_END_USER_BENCHMARK },
        { "STOP_END_USER_BENCHMARK()", WREN_MISC_STOP_END_USER_BENCHMARK },
        { "RESET_END_USER_BENCHMARK()", WREN_MISC_RESET_END_USER_BENCHMARK },
        { "SAVE_END_USER_BENCHMARK()", WREN_MISC_SAVE_END_USER_BENCHMARK },
        { "UI_STARTED_END_USER_BENCHMARK()", WREN_MISC_UI_STARTED_END_USER_BENCHMARK },
        { "LANDING_SCREEN_STARTED_END_USER_BENCHMARK()", WREN_MISC_LANDING_SCREEN_STARTED_END_USER_BENCHMARK },
        { "IS_COMMANDLINE_END_USER_BENCHMARK()", WREN_MISC_IS_COMMANDLINE_END_USER_BENCHMARK },
        { "GET_BENCHMARK_ITERATIONS()", WREN_MISC_GET_BENCHMARK_ITERATIONS },
        { "GET_BENCHMARK_PASS()", WREN_MISC_GET_BENCHMARK_PASS },
        { "RESTART_GAME()", WREN_MISC_RESTART_GAME },
        { "QUIT_GAME()", WREN_MISC_QUIT_GAME },
        { "HAS_ASYNC_INSTALL_FINISHED()", WREN_MISC_HAS_ASYNC_INSTALL_FINISHED },
        { "CLEANUP_ASYNC_INSTALL()", WREN_MISC_CLEANUP_ASYNC_INSTALL },
        { "PLM_IS_IN_CONSTRAINED_MODE()", WREN_MISC_PLM_IS_IN_CONSTRAINED_MODE },
        { "PLM_GET_CONSTRAINED_DURATION_MS()", WREN_MISC_PLM_GET_CONSTRAINED_DURATION_MS },
        { "SET_PLAYER_IS_IN_ANIMAL_FORM(_)", WREN_MISC_SET_PLAYER_IS_IN_ANIMAL_FORM },
        { "GET_IS_PLAYER_IN_ANIMAL_FORM()", WREN_MISC_GET_IS_PLAYER_IN_ANIMAL_FORM },
        { "SET_PLAYER_IS_REPEATING_A_MISSION(_)", WREN_MISC_SET_PLAYER_IS_REPEATING_A_MISSION },
        { "DISABLE_SCREEN_DIMMING_THIS_FRAME()", WREN_MISC_DISABLE_SCREEN_DIMMING_THIS_FRAME },
        { "GET_CITY_DENSITY()", WREN_MISC_GET_CITY_DENSITY },
        { "USE_ACTIVE_CAMERA_FOR_TIMESLICING_CENTRE()", WREN_MISC_USE_ACTIVE_CAMERA_FOR_TIMESLICING_CENTRE },
        { "SET_CONTENT_ID_INDEX(_,_)", WREN_MISC_SET_CONTENT_ID_INDEX },
        { "GET_CONTENT_ID_INDEX(_)", WREN_MISC_GET_CONTENT_ID_INDEX },
        { "CREATE_MOBILE_PHONE(_)", WREN_MOBILE_CREATE_MOBILE_PHONE },
        { "DESTROY_MOBILE_PHONE()", WREN_MOBILE_DESTROY_MOBILE_PHONE },
        { "SET_MOBILE_PHONE_SCALE(_)", WREN_MOBILE_SET_MOBILE_PHONE_SCALE },
        { "SET_MOBILE_PHONE_ROTATION(_,_,_,_)", WREN_MOBILE_SET_MOBILE_PHONE_ROTATION },
        { "GET_MOBILE_PHONE_ROTATION(_)", WREN_MOBILE_GET_MOBILE_PHONE_ROTATION },
        { "SET_MOBILE_PHONE_POSITION(_,_,_)", WREN_MOBILE_SET_MOBILE_PHONE_POSITION },
        { "GET_MOBILE_PHONE_POSITION()", WREN_MOBILE_GET_MOBILE_PHONE_POSITION },
        { "SCRIPT_IS_MOVING_MOBILE_PHONE_OFFSCREEN(_)", WREN_MOBILE_SCRIPT_IS_MOVING_MOBILE_PHONE_OFFSCREEN },
        { "CAN_PHONE_BE_SEEN_ON_SCREEN()", WREN_MOBILE_CAN_PHONE_BE_SEEN_ON_SCREEN },
        { "SET_MOBILE_PHONE_DOF_STATE(_)", WREN_MOBILE_SET_MOBILE_PHONE_DOF_STATE },
        { "CELL_SET_INPUT(_)", WREN_MOBILE_CELL_SET_INPUT },
        { "CELL_HORIZONTAL_MODE_TOGGLE(_)", WREN_MOBILE_CELL_HORIZONTAL_MODE_TOGGLE },
        { "CELL_CAM_ACTIVATE(_,_)", WREN_MOBILE_CELL_CAM_ACTIVATE },
        { "CELL_CAM_ACTIVATE_SELFIE_MODE(_)", WREN_MOBILE_CELL_CAM_ACTIVATE_SELFIE_MODE },
        { "CELL_CAM_ACTIVATE_SHALLOW_DOF_MODE(_)", WREN_MOBILE_CELL_CAM_ACTIVATE_SHALLOW_DOF_MODE },
        { "CELL_CAM_SET_SELFIE_MODE_SIDE_OFFSET_SCALING(_)", WREN_MOBILE_CELL_CAM_SET_SELFIE_MODE_SIDE_OFFSET_SCALING },
        { "CELL_CAM_SET_SELFIE_MODE_HORZ_PAN_OFFSET(_)", WREN_MOBILE_CELL_CAM_SET_SELFIE_MODE_HORZ_PAN_OFFSET },
        { "CELL_CAM_SET_SELFIE_MODE_VERT_PAN_OFFSET(_)", WREN_MOBILE_CELL_CAM_SET_SELFIE_MODE_VERT_PAN_OFFSET },
        { "CELL_CAM_SET_SELFIE_MODE_ROLL_OFFSET(_)", WREN_MOBILE_CELL_CAM_SET_SELFIE_MODE_ROLL_OFFSET },
        { "CELL_CAM_SET_SELFIE_MODE_DISTANCE_SCALING(_)", WREN_MOBILE_CELL_CAM_SET_SELFIE_MODE_DISTANCE_SCALING },
        { "CELL_CAM_SET_SELFIE_MODE_HEAD_YAW_OFFSET(_)", WREN_MOBILE_CELL_CAM_SET_SELFIE_MODE_HEAD_YAW_OFFSET },
        { "CELL_CAM_SET_SELFIE_MODE_HEAD_ROLL_OFFSET(_)", WREN_MOBILE_CELL_CAM_SET_SELFIE_MODE_HEAD_ROLL_OFFSET },
        { "CELL_CAM_SET_SELFIE_MODE_HEAD_PITCH_OFFSET(_)", WREN_MOBILE_CELL_CAM_SET_SELFIE_MODE_HEAD_PITCH_OFFSET },
        { "CELL_CAM_IS_CHAR_VISIBLE_NO_FACE_CHECK(_)", WREN_MOBILE_CELL_CAM_IS_CHAR_VISIBLE_NO_FACE_CHECK },
        { "GET_MOBILE_PHONE_RENDER_ID()", WREN_MOBILE_GET_MOBILE_PHONE_RENDER_ID },
        { "NETWORK_INITIALIZE_CASH(_,_)", WREN_MONEY_NETWORK_INITIALIZE_CASH },
        { "NETWORK_DELETE_CHARACTER(_,_,_)", WREN_MONEY_NETWORK_DELETE_CHARACTER },
        { "NETWORK_MANUAL_DELETE_CHARACTER(_)", WREN_MONEY_NETWORK_MANUAL_DELETE_CHARACTER },
        { "NETWORK_GET_PLAYER_IS_HIGH_EARNER()", WREN_MONEY_NETWORK_GET_PLAYER_IS_HIGH_EARNER },
        { "NETWORK_CLEAR_CHARACTER_WALLET(_)", WREN_MONEY_NETWORK_CLEAR_CHARACTER_WALLET },
        { "NETWORK_GIVE_PLAYER_JOBSHARE_CASH(_)", WREN_MONEY_NETWORK_GIVE_PLAYER_JOBSHARE_CASH },
        { "NETWORK_RECEIVE_PLAYER_JOBSHARE_CASH(_)", WREN_MONEY_NETWORK_RECEIVE_PLAYER_JOBSHARE_CASH },
        { "NETWORK_CAN_SHARE_JOB_CASH()", WREN_MONEY_NETWORK_CAN_SHARE_JOB_CASH },
        { "NETWORK_REFUND_CASH(_,_,_,_)", WREN_MONEY_NETWORK_REFUND_CASH },
        { "NETWORK_DEDUCT_CASH(_,_,_,_,_,_)", WREN_MONEY_NETWORK_DEDUCT_CASH },
        { "NETWORK_MONEY_CAN_BET(_,_,_)", WREN_MONEY_NETWORK_MONEY_CAN_BET },
        { "NETWORK_CAN_BET(_)", WREN_MONEY_NETWORK_CAN_BET },
        { "NETWORK_CASINO_CAN_BET(_)", WREN_MONEY_NETWORK_CASINO_CAN_BET },
        { "NETWORK_CASINO_CAN_BET_PVC()", WREN_MONEY_NETWORK_CASINO_CAN_BET_PVC },
        { "NETWORK_CASINO_CAN_BET_AMOUNT(_)", WREN_MONEY_NETWORK_CASINO_CAN_BET_AMOUNT },
        { "NETWORK_CASINO_CAN_BUY_CHIPS_PVC()", WREN_MONEY_NETWORK_CASINO_CAN_BUY_CHIPS_PVC },
        { "NETWORK_CASINO_BUY_CHIPS(_,_)", WREN_MONEY_NETWORK_CASINO_BUY_CHIPS },
        { "NETWORK_CASINO_SELL_CHIPS(_,_)", WREN_MONEY_NETWORK_CASINO_SELL_CHIPS },
        { "NETWORK_DEFER_CASH_TRANSACTIONS_UNTIL_SHOP_SAVE()", WREN_MONEY_NETWORK_DEFER_CASH_TRANSACTIONS_UNTIL_SHOP_SAVE },
        { "CAN_PAY_AMOUNT_TO_BOSS(_,_,_)", WREN_MONEY_CAN_PAY_AMOUNT_TO_BOSS },
        { "NETWORK_EARN_FROM_PICKUP(_)", WREN_MONEY_NETWORK_EARN_FROM_PICKUP },
        { "NETWORK_EARN_FROM_CASHING_OUT(_)", WREN_MONEY_NETWORK_EARN_FROM_CASHING_OUT },
        { "NETWORK_EARN_FROM_GANGATTACK_PICKUP(_)", WREN_MONEY_NETWORK_EARN_FROM_GANGATTACK_PICKUP },
        { "NETWORK_EARN_ASSASSINATE_TARGET_KILLED(_)", WREN_MONEY_NETWORK_EARN_ASSASSINATE_TARGET_KILLED },
        { "NETWORK_EARN_FROM_ROB_ARMORED_CARS(_)", WREN_MONEY_NETWORK_EARN_FROM_ROB_ARMORED_CARS },
        { "NETWORK_EARN_FROM_CRATE_DROP(_)", WREN_MONEY_NETWORK_EARN_FROM_CRATE_DROP },
        { "NETWORK_EARN_FROM_BETTING(_,_)", WREN_MONEY_NETWORK_EARN_FROM_BETTING },
        { "NETWORK_EARN_FROM_JOB(_,_)", WREN_MONEY_NETWORK_EARN_FROM_JOB },
        { "NETWORK_EARN_FROM_JOBX2(_,_)", WREN_MONEY_NETWORK_EARN_FROM_JOBX2 },
        { "NETWORK_EARN_FROM_PREMIUM_JOB(_,_)", WREN_MONEY_NETWORK_EARN_FROM_PREMIUM_JOB },
        { "NETWORK_EARN_FROM_BEND_JOB(_,_)", WREN_MONEY_NETWORK_EARN_FROM_BEND_JOB },
        { "NETWORK_EARN_FROM_CHALLENGE_WIN(_,_)", WREN_MONEY_NETWORK_EARN_FROM_CHALLENGE_WIN },
        { "NETWORK_EARN_FROM_BOUNTY(_,_)", WREN_MONEY_NETWORK_EARN_FROM_BOUNTY },
        { "NETWORK_EARN_FROM_IMPORT_EXPORT(_,_)", WREN_MONEY_NETWORK_EARN_FROM_IMPORT_EXPORT },
        { "NETWORK_EARN_FROM_HOLDUPS(_)", WREN_MONEY_NETWORK_EARN_FROM_HOLDUPS },
        { "NETWORK_EARN_FROM_PROPERTY(_,_)", WREN_MONEY_NETWORK_EARN_FROM_PROPERTY },
        { "NETWORK_EARN_FROM_AI_TARGET_KILL(_,_)", WREN_MONEY_NETWORK_EARN_FROM_AI_TARGET_KILL },
        { "NETWORK_EARN_FROM_NOT_BADSPORT(_)", WREN_MONEY_NETWORK_EARN_FROM_NOT_BADSPORT },
        { "NETWORK_EARN_FROM_ROCKSTAR(_)", WREN_MONEY_NETWORK_EARN_FROM_ROCKSTAR },
        { "NETWORK_EARN_FROM_VEHICLE(_,_,_,_,_,_,_,_)", WREN_MONEY_NETWORK_EARN_FROM_VEHICLE },
        { "NETWORK_EARN_FROM_PERSONAL_VEHICLE(_,_,_,_,_,_,_,_,_)", WREN_MONEY_NETWORK_EARN_FROM_PERSONAL_VEHICLE },
        { "NETWORK_EARN_FROM_DAILY_OBJECTIVES(_,_,_)", WREN_MONEY_NETWORK_EARN_FROM_DAILY_OBJECTIVES },
        { "NETWORK_EARN_FROM_AMBIENT_JOB(_,_)", WREN_MONEY_NETWORK_EARN_FROM_AMBIENT_JOB },
        { "NETWORK_EARN_FROM_JOB_BONUS(_)", WREN_MONEY_NETWORK_EARN_FROM_JOB_BONUS },
        { "NETWORK_EARN_FROM_CRIMINAL_MASTERMIND(_,_,_)", WREN_MONEY_NETWORK_EARN_FROM_CRIMINAL_MASTERMIND },
        { "NETWORK_EARN_HEIST_AWARD(_,_,_)", WREN_MONEY_NETWORK_EARN_HEIST_AWARD },
        { "NETWORK_EARN_FIRST_TIME_BONUS(_,_,_)", WREN_MONEY_NETWORK_EARN_FIRST_TIME_BONUS },
        { "NETWORK_EARN_GOON(_,_,_)", WREN_MONEY_NETWORK_EARN_GOON },
        { "NETWORK_EARN_BOSS(_,_,_)", WREN_MONEY_NETWORK_EARN_BOSS },
        { "NETWORK_EARN_AGENCY(_,_,_,_)", WREN_MONEY_NETWORK_EARN_AGENCY },
        { "NETWORK_EARN_FROM_WAREHOUSE(_,_)", WREN_MONEY_NETWORK_EARN_FROM_WAREHOUSE },
        { "NETWORK_EARN_FROM_CONTRABAND(_,_)", WREN_MONEY_NETWORK_EARN_FROM_CONTRABAND },
        { "NETWORK_EARN_FROM_DESTROYING_CONTRABAND(_)", WREN_MONEY_NETWORK_EARN_FROM_DESTROYING_CONTRABAND },
        { "NETWORK_EARN_FROM_SMUGGLER_WORK(_,_,_,_,_)", WREN_MONEY_NETWORK_EARN_FROM_SMUGGLER_WORK },
        { "NETWORK_EARN_FROM_HANGAR_TRADE(_,_)", WREN_MONEY_NETWORK_EARN_FROM_HANGAR_TRADE },
        { "NETWORK_EARN_PURCHASE_CLUB_HOUSE(_,_)", WREN_MONEY_NETWORK_EARN_PURCHASE_CLUB_HOUSE },
        { "NETWORK_EARN_FROM_BUSINESS_PRODUCT(_,_,_,_)", WREN_MONEY_NETWORK_EARN_FROM_BUSINESS_PRODUCT },
        { "NETWORK_EARN_FROM_VEHICLE_EXPORT(_,_,_)", WREN_MONEY_NETWORK_EARN_FROM_VEHICLE_EXPORT },
        { "NETWORK_EARN_SMUGGLER_AGENCY(_,_,_,_)", WREN_MONEY_NETWORK_EARN_SMUGGLER_AGENCY },
        { "NETWORK_EARN_BOUNTY_HUNTER_REWARD(_)", WREN_MONEY_NETWORK_EARN_BOUNTY_HUNTER_REWARD },
        { "NETWORK_EARN_FROM_BUSINESS_BATTLE(_)", WREN_MONEY_NETWORK_EARN_FROM_BUSINESS_BATTLE },
        { "NETWORK_EARN_FROM_CLUB_MANAGEMENT_PARTICIPATION(_,_)", WREN_MONEY_NETWORK_EARN_FROM_CLUB_MANAGEMENT_PARTICIPATION },
        { "NETWORK_EARN_FROM_FMBB_PHONECALL_MISSION(_)", WREN_MONEY_NETWORK_EARN_FROM_FMBB_PHONECALL_MISSION },
        { "NETWORK_EARN_FROM_BUSINESS_HUB_SELL(_,_,_)", WREN_MONEY_NETWORK_EARN_FROM_BUSINESS_HUB_SELL },
        { "NETWORK_EARN_FROM_FMBB_BOSS_WORK(_)", WREN_MONEY_NETWORK_EARN_FROM_FMBB_BOSS_WORK },
        { "NETWORK_EARN_FMBB_WAGE_BONUS(_)", WREN_MONEY_NETWORK_EARN_FMBB_WAGE_BONUS },
        { "NETWORK_CAN_SPEND_MONEY(_,_,_,_,_,_)", WREN_MONEY_NETWORK_CAN_SPEND_MONEY },
        { "NETWORK_CAN_SPEND_MONEY2(_,_,_,_,_,_)", WREN_MONEY_NETWORK_CAN_SPEND_MONEY2 },
        { "NETWORK_BUY_ITEM(_,_,_,_,_,_,_,_,_,_)", WREN_MONEY_NETWORK_BUY_ITEM },
        { "NETWORK_SPENT_TAXI(_,_,_,_)", WREN_MONEY_NETWORK_SPENT_TAXI },
        { "NETWORK_PAY_EMPLOYEE_WAGE(_,_,_)", WREN_MONEY_NETWORK_PAY_EMPLOYEE_WAGE },
        { "NETWORK_PAY_MATCH_ENTRY_FEE(_,_,_,_)", WREN_MONEY_NETWORK_PAY_MATCH_ENTRY_FEE },
        { "NETWORK_SPENT_BETTING(_,_,_,_,_)", WREN_MONEY_NETWORK_SPENT_BETTING },
        { "NETWORK_SPENT_WAGER(_,_,_)", WREN_MONEY_NETWORK_SPENT_WAGER },
        { "NETWORK_SPENT_IN_STRIPCLUB(_,_,_,_)", WREN_MONEY_NETWORK_SPENT_IN_STRIPCLUB },
        { "NETWORK_BUY_HEALTHCARE(_,_,_)", WREN_MONEY_NETWORK_BUY_HEALTHCARE },
        { "NETWORK_BUY_AIRSTRIKE(_,_,_,_)", WREN_MONEY_NETWORK_BUY_AIRSTRIKE },
        { "NETWORK_BUY_BACKUP_GANG(_,_,_,_)", WREN_MONEY_NETWORK_BUY_BACKUP_GANG },
        { "NETWORK_BUY_HELI_STRIKE(_,_,_,_)", WREN_MONEY_NETWORK_BUY_HELI_STRIKE },
        { "NETWORK_SPENT_AMMO_DROP(_,_,_,_)", WREN_MONEY_NETWORK_SPENT_AMMO_DROP },
        { "NETWORK_BUY_BOUNTY(_,_,_,_,_)", WREN_MONEY_NETWORK_BUY_BOUNTY },
        { "NETWORK_BUY_PROPERTY(_,_,_,_)", WREN_MONEY_NETWORK_BUY_PROPERTY },
        { "NETWORK_BUY_SMOKES(_,_,_)", WREN_MONEY_NETWORK_BUY_SMOKES },
        { "NETWORK_SPENT_HELI_PICKUP(_,_,_,_)", WREN_MONEY_NETWORK_SPENT_HELI_PICKUP },
        { "NETWORK_SPENT_BOAT_PICKUP(_,_,_,_)", WREN_MONEY_NETWORK_SPENT_BOAT_PICKUP },
        { "NETWORK_SPENT_BULL_SHARK(_,_,_,_)", WREN_MONEY_NETWORK_SPENT_BULL_SHARK },
        { "NETWORK_SPENT_CASH_DROP(_,_,_)", WREN_MONEY_NETWORK_SPENT_CASH_DROP },
        { "NETWORK_SPENT_HIRE_MUGGER(_,_,_,_)", WREN_MONEY_NETWORK_SPENT_HIRE_MUGGER },
        { "NETWORK_SPENT_ROBBED_BY_MUGGER(_,_,_,_)", WREN_MONEY_NETWORK_SPENT_ROBBED_BY_MUGGER },
        { "NETWORK_SPENT_HIRE_MERCENARY(_,_,_,_)", WREN_MONEY_NETWORK_SPENT_HIRE_MERCENARY },
        { "NETWORK_SPENT_BUY_WANTEDLEVEL(_,_,_,_)", WREN_MONEY_NETWORK_SPENT_BUY_WANTEDLEVEL },
        { "NETWORK_SPENT_BUY_OFFTHERADAR(_,_,_,_)", WREN_MONEY_NETWORK_SPENT_BUY_OFFTHERADAR },
        { "NETWORK_SPENT_BUY_REVEAL_PLAYERS(_,_,_,_)", WREN_MONEY_NETWORK_SPENT_BUY_REVEAL_PLAYERS },
        { "NETWORK_SPENT_CARWASH(_,_,_,_,_)", WREN_MONEY_NETWORK_SPENT_CARWASH },
        { "NETWORK_SPENT_CINEMA(_,_,_,_)", WREN_MONEY_NETWORK_SPENT_CINEMA },
        { "NETWORK_SPENT_TELESCOPE(_,_,_)", WREN_MONEY_NETWORK_SPENT_TELESCOPE },
        { "NETWORK_SPENT_HOLDUPS(_,_,_)", WREN_MONEY_NETWORK_SPENT_HOLDUPS },
        { "NETWORK_SPENT_BUY_PASSIVE_MODE(_,_,_,_)", WREN_MONEY_NETWORK_SPENT_BUY_PASSIVE_MODE },
        { "NETWORK_SPENT_BANK_INTEREST(_,_,_)", WREN_MONEY_NETWORK_SPENT_BANK_INTEREST },
        { "NETWORK_SPENT_PROSTITUTES(_,_,_)", WREN_MONEY_NETWORK_SPENT_PROSTITUTES },
        { "NETWORK_SPENT_ARREST_BAIL(_,_,_)", WREN_MONEY_NETWORK_SPENT_ARREST_BAIL },
        { "NETWORK_SPENT_PAY_VEHICLE_INSURANCE_PREMIUM(_,_,_,_)", WREN_MONEY_NETWORK_SPENT_PAY_VEHICLE_INSURANCE_PREMIUM },
        { "NETWORK_SPENT_CALL_PLAYER(_,_,_)", WREN_MONEY_NETWORK_SPENT_CALL_PLAYER },
        { "NETWORK_SPENT_BOUNTY(_,_,_)", WREN_MONEY_NETWORK_SPENT_BOUNTY },
        { "NETWORK_SPENT_FROM_ROCKSTAR(_,_,_)", WREN_MONEY_NETWORK_SPENT_FROM_ROCKSTAR },
        { "NETWORK_SPEND_EARNED_FROM_BANK_AND_WALLETS()", WREN_MONEY_NETWORK_SPEND_EARNED_FROM_BANK_AND_WALLETS },
        { "PROCESS_CASH_GIFT(_)", WREN_MONEY_PROCESS_CASH_GIFT },
        { "NETWORK_SPENT_MOVE_SUBMARINE(_,_,_)", WREN_MONEY_NETWORK_SPENT_MOVE_SUBMARINE },
        { "NETWORK_SPENT_PLAYER_HEALTHCARE(_,_,_,_)", WREN_MONEY_NETWORK_SPENT_PLAYER_HEALTHCARE },
        { "NETWORK_SPENT_NO_COPS(_,_,_,_)", WREN_MONEY_NETWORK_SPENT_NO_COPS },
        { "NETWORK_SPENT_CARGO_SOURCING(_,_,_,_,_,_)", WREN_MONEY_NETWORK_SPENT_CARGO_SOURCING },
        { "NETWORK_SPENT_REQUEST_JOB(_,_,_,_)", WREN_MONEY_NETWORK_SPENT_REQUEST_JOB },
        { "NETWORK_SPENT_REQUEST_HEIST(_,_,_,_)", WREN_MONEY_NETWORK_SPENT_REQUEST_HEIST },
        { "NETWORK_BUY_FAIRGROUND_RIDE(_,_,_,_,_)", WREN_MONEY_NETWORK_BUY_FAIRGROUND_RIDE },
        { "NETWORK_ECONOMY_HAS_FIXED_CRAZY_NUMBERS()", WREN_MONEY_NETWORK_ECONOMY_HAS_FIXED_CRAZY_NUMBERS },
        { "NETWORK_SPENT_JOB_SKIP(_,_,_,_)", WREN_MONEY_NETWORK_SPENT_JOB_SKIP },
        { "NETWORK_SPENT_BOSS_GOON(_,_,_)", WREN_MONEY_NETWORK_SPENT_BOSS_GOON },
        { "NETWORK_SPEND_GOON(_,_,_)", WREN_MONEY_NETWORK_SPEND_GOON },
        { "NETWORK_SPEND_BOSS(_,_,_)", WREN_MONEY_NETWORK_SPEND_BOSS },
        { "NETWORK_SPENT_MOVE_YACHT(_,_,_)", WREN_MONEY_NETWORK_SPENT_MOVE_YACHT },
        { "NETWORK_SPENT_RENAME_ORGANIZATION(_,_,_)", WREN_MONEY_NETWORK_SPENT_RENAME_ORGANIZATION },
        { "NETWORK_BUY_CONTRABAND_MISSION(_,_,_,_,_)", WREN_MONEY_NETWORK_BUY_CONTRABAND_MISSION },
        { "NETWORK_SPENT_PA_SERVICE_HELI(_,_,_,_)", WREN_MONEY_NETWORK_SPENT_PA_SERVICE_HELI },
        { "NETWORK_SPENT_PA_SERVICE_VEHICLE(_,_,_,_)", WREN_MONEY_NETWORK_SPENT_PA_SERVICE_VEHICLE },
        { "NETWORK_SPENT_PA_SERVICE_SNACK(_,_,_,_)", WREN_MONEY_NETWORK_SPENT_PA_SERVICE_SNACK },
        { "NETWORK_SPENT_PA_SERVICE_DANCER(_,_,_,_)", WREN_MONEY_NETWORK_SPENT_PA_SERVICE_DANCER },
        { "NETWORK_SPENT_PA_SERVICE_IMPOUND(_,_,_)", WREN_MONEY_NETWORK_SPENT_PA_SERVICE_IMPOUND },
        { "NETWORK_SPENT_PA_HELI_PICKUP(_,_,_,_)", WREN_MONEY_NETWORK_SPENT_PA_HELI_PICKUP },
        { "NETWORK_SPENT_PURCHASE_OFFICE_PROPERTY(_,_,_,_)", WREN_MONEY_NETWORK_SPENT_PURCHASE_OFFICE_PROPERTY },
        { "NETWORK_SPENT_UPGRADE_OFFICE_PROPERTY(_,_,_,_)", WREN_MONEY_NETWORK_SPENT_UPGRADE_OFFICE_PROPERTY },
        { "NETWORK_SPENT_PURCHASE_WAREHOUSE_PROPERTY(_,_,_,_)", WREN_MONEY_NETWORK_SPENT_PURCHASE_WAREHOUSE_PROPERTY },
        { "NETWORK_SPENT_UPGRADE_WAREHOUSE_PROPERTY(_,_,_,_)", WREN_MONEY_NETWORK_SPENT_UPGRADE_WAREHOUSE_PROPERTY },
        { "NETWORK_SPENT_PURCHASE_IMPEXP_WAREHOUSE_PROPERTY(_,_,_)", WREN_MONEY_NETWORK_SPENT_PURCHASE_IMPEXP_WAREHOUSE_PROPERTY },
        { "NETWORK_SPENT_UPGRADE_IMPEXP_WAREHOUSE_PROPERTY(_,_,_,_)", WREN_MONEY_NETWORK_SPENT_UPGRADE_IMPEXP_WAREHOUSE_PROPERTY },
        { "NETWORK_SPENT_TRADE_IMPEXP_WAREHOUSE_PROPERTY(_,_,_,_)", WREN_MONEY_NETWORK_SPENT_TRADE_IMPEXP_WAREHOUSE_PROPERTY },
        { "NETWORK_SPENT_ORDER_WAREHOUSE_VEHICLE(_,_,_,_)", WREN_MONEY_NETWORK_SPENT_ORDER_WAREHOUSE_VEHICLE },
        { "NETWORK_SPENT_ORDER_BODYGUARD_VEHICLE(_,_,_,_)", WREN_MONEY_NETWORK_SPENT_ORDER_BODYGUARD_VEHICLE },
        { "NETWORK_SPENT_JUKEBOX(_,_,_,_)", WREN_MONEY_NETWORK_SPENT_JUKEBOX },
        { "NETWORK_SPENT_PURCHASE_CLUB_HOUSE(_,_,_,_)", WREN_MONEY_NETWORK_SPENT_PURCHASE_CLUB_HOUSE },
        { "NETWORK_SPENT_UPGRADE_CLUB_HOUSE(_,_,_,_)", WREN_MONEY_NETWORK_SPENT_UPGRADE_CLUB_HOUSE },
        { "NETWORK_SPENT_PURCHASE_BUSINESS_PROPERTY(_,_,_,_)", WREN_MONEY_NETWORK_SPENT_PURCHASE_BUSINESS_PROPERTY },
        { "NETWORK_SPENT_UPGRADE_BUSINESS_PROPERTY(_,_,_,_)", WREN_MONEY_NETWORK_SPENT_UPGRADE_BUSINESS_PROPERTY },
        { "NETWORK_SPENT_TRADE_BUSINESS_PROPERTY(_,_,_,_)", WREN_MONEY_NETWORK_SPENT_TRADE_BUSINESS_PROPERTY },
        { "NETWORK_SPENT_MC_ABILITY(_,_,_,_,_)", WREN_MONEY_NETWORK_SPENT_MC_ABILITY },
        { "NETWORK_SPENT_PAY_BUSINESS_SUPPLIES(_,_,_,_)", WREN_MONEY_NETWORK_SPENT_PAY_BUSINESS_SUPPLIES },
        { "NETWORK_SPENT_CHANGE_APPEARANCE(_,_,_)", WREN_MONEY_NETWORK_SPENT_CHANGE_APPEARANCE },
        { "NETWORK_SPENT_VEHICLE_EXPORT_MODS(_,_,_,_,_,_,_,_,_,_)", WREN_MONEY_NETWORK_SPENT_VEHICLE_EXPORT_MODS },
        { "NETWORK_SPENT_PURCHASE_OFFICE_GARAGE(_,_,_,_)", WREN_MONEY_NETWORK_SPENT_PURCHASE_OFFICE_GARAGE },
        { "NETWORK_SPENT_UPGRADE_OFFICE_GARAGE(_,_,_,_)", WREN_MONEY_NETWORK_SPENT_UPGRADE_OFFICE_GARAGE },
        { "NETWORK_SPENT_IMPORT_EXPORT_REPAIR(_,_,_)", WREN_MONEY_NETWORK_SPENT_IMPORT_EXPORT_REPAIR },
        { "NETWORK_SPENT_PURCHASE_HANGAR(_,_,_,_)", WREN_MONEY_NETWORK_SPENT_PURCHASE_HANGAR },
        { "NETWORK_SPENT_UPGRADE_HANGAR(_,_,_,_)", WREN_MONEY_NETWORK_SPENT_UPGRADE_HANGAR },
        { "NETWORK_SPENT_HANGAR_UTILITY_CHARGES(_,_,_)", WREN_MONEY_NETWORK_SPENT_HANGAR_UTILITY_CHARGES },
        { "NETWORK_SPENT_HANGAR_STAFF_CHARGES(_,_,_)", WREN_MONEY_NETWORK_SPENT_HANGAR_STAFF_CHARGES },
        { "NETWORK_SPENT_BUY_TRUCK(_,_,_,_)", WREN_MONEY_NETWORK_SPENT_BUY_TRUCK },
        { "NETWORK_SPENT_UPGRADE_TRUCK(_,_,_,_)", WREN_MONEY_NETWORK_SPENT_UPGRADE_TRUCK },
        { "NETWORK_SPENT_BUY_BUNKER(_,_,_,_)", WREN_MONEY_NETWORK_SPENT_BUY_BUNKER },
        { "NETWORK_SPENT_UPRADE_BUNKER(_,_,_,_)", WREN_MONEY_NETWORK_SPENT_UPRADE_BUNKER },
        { "NETWORK_EARN_FROM_SELL_BUNKER(_,_)", WREN_MONEY_NETWORK_EARN_FROM_SELL_BUNKER },
        { "NETWORK_SPENT_BALLISTIC_EQUIPMENT(_,_,_)", WREN_MONEY_NETWORK_SPENT_BALLISTIC_EQUIPMENT },
        { "NETWORK_EARN_RDR_BONUS(_,_)", WREN_MONEY_NETWORK_EARN_RDR_BONUS },
        { "NETWORK_EARN_WAGE_PAYMENT(_,_)", WREN_MONEY_NETWORK_EARN_WAGE_PAYMENT },
        { "NETWORK_EARN_WAGE_PAYMENT_BONUS(_)", WREN_MONEY_NETWORK_EARN_WAGE_PAYMENT_BONUS },
        { "NETWORK_SPENT_BUY_BASE(_,_,_,_)", WREN_MONEY_NETWORK_SPENT_BUY_BASE },
        { "NETWORK_SPENT_UPGRADE_BASE(_,_,_,_)", WREN_MONEY_NETWORK_SPENT_UPGRADE_BASE },
        { "NETWORK_SPENT_BUY_TILTROTOR(_,_,_,_)", WREN_MONEY_NETWORK_SPENT_BUY_TILTROTOR },
        { "NETWORK_SPENT_UPGRADE_TILTROTOR(_,_,_,_)", WREN_MONEY_NETWORK_SPENT_UPGRADE_TILTROTOR },
        { "NETWORK_SPENT_EMPLOY_ASSASSINS(_,_,_,_)", WREN_MONEY_NETWORK_SPENT_EMPLOY_ASSASSINS },
        { "NETWORK_SPEND_GANGOPS_CANNON(_,_,_,_)", WREN_MONEY_NETWORK_SPEND_GANGOPS_CANNON },
        { "NETWORK_SPEND_GANGOPS_SKIP_MISSION(_,_,_,_)", WREN_MONEY_NETWORK_SPEND_GANGOPS_SKIP_MISSION },
        { "NETWORK_SPEND_CASINO_HEIST_SKIP_MISSION(_,_,_,_)", WREN_MONEY_NETWORK_SPEND_CASINO_HEIST_SKIP_MISSION },
        { "NETWORK_EARN_SELL_BASE(_,_)", WREN_MONEY_NETWORK_EARN_SELL_BASE },
        { "NETWORK_EARN_TARGET_REFUND(_,_)", WREN_MONEY_NETWORK_EARN_TARGET_REFUND },
        { "NETWORK_EARN_GANGOPS_WAGES(_,_)", WREN_MONEY_NETWORK_EARN_GANGOPS_WAGES },
        { "NETWORK_EARN_GANGOPS_WAGES_BONUS(_,_)", WREN_MONEY_NETWORK_EARN_GANGOPS_WAGES_BONUS },
        { "NETWORK_EARN_DAR_CHALLENGE(_,_)", WREN_MONEY_NETWORK_EARN_DAR_CHALLENGE },
        { "NETWORK_EARN_DOOMSDAY_FINALE_BONUS(_,_)", WREN_MONEY_NETWORK_EARN_DOOMSDAY_FINALE_BONUS },
        { "NETWORK_EARN_GANGOPS_AWARD(_,_,_)", WREN_MONEY_NETWORK_EARN_GANGOPS_AWARD },
        { "NETWORK_EARN_GANGOPS_ELITE(_,_,_)", WREN_MONEY_NETWORK_EARN_GANGOPS_ELITE },
        { "NETWORK_SERVICE_EARN_GANGOPS_RIVAL_DELIVERY(_)", WREN_MONEY_NETWORK_SERVICE_EARN_GANGOPS_RIVAL_DELIVERY },
        { "NETWORK_SPEND_GANGOPS_START_STRAND(_,_,_,_)", WREN_MONEY_NETWORK_SPEND_GANGOPS_START_STRAND },
        { "NETWORK_SPEND_GANGOPS_TRIP_SKIP(_,_,_)", WREN_MONEY_NETWORK_SPEND_GANGOPS_TRIP_SKIP },
        { "NETWORK_EARN_GANGOPS_PREP_PARTICIPATION(_)", WREN_MONEY_NETWORK_EARN_GANGOPS_PREP_PARTICIPATION },
        { "NETWORK_EARN_GANGOPS_SETUP(_,_)", WREN_MONEY_NETWORK_EARN_GANGOPS_SETUP },
        { "NETWORK_EARN_GANGOPS_FINALE(_,_)", WREN_MONEY_NETWORK_EARN_GANGOPS_FINALE },
        { "NETWORK_SPEND_GANGOPS_REPAIR_COST(_,_,_)", WREN_MONEY_NETWORK_SPEND_GANGOPS_REPAIR_COST },
        { "NETWORK_EARN_NIGHTCLUB(_)", WREN_MONEY_NETWORK_EARN_NIGHTCLUB },
        { "NETWORK_EARN_NIGHTCLUB_DANCING(_)", WREN_MONEY_NETWORK_EARN_NIGHTCLUB_DANCING },
        { "NETWORK_EARN_BB_EVENT_BONUS(_)", WREN_MONEY_NETWORK_EARN_BB_EVENT_BONUS },
        { "NETWORK_SPENT_PURCHASE_HACKER_TRUCK(_,_,_,_)", WREN_MONEY_NETWORK_SPENT_PURCHASE_HACKER_TRUCK },
        { "NETWORK_SPENT_UPGRADE_HACKER_TRUCK(_,_,_,_)", WREN_MONEY_NETWORK_SPENT_UPGRADE_HACKER_TRUCK },
        { "NETWORK_EARN_HACKER_TRUCK(_,_,_,_)", WREN_MONEY_NETWORK_EARN_HACKER_TRUCK },
        { "NETWORK_SPENT_PURCHASE_NIGHTCLUB_AND_WAREHOUSE(_,_,_,_)", WREN_MONEY_NETWORK_SPENT_PURCHASE_NIGHTCLUB_AND_WAREHOUSE },
        { "NETWORK_SPENT_UPGRADE_NIGHTCLUB_AND_WAREHOUSE(_,_,_,_)", WREN_MONEY_NETWORK_SPENT_UPGRADE_NIGHTCLUB_AND_WAREHOUSE },
        { "NETWORK_EARN_NIGHTCLUB_AND_WAREHOUSE(_,_,_,_,_,_,_)", WREN_MONEY_NETWORK_EARN_NIGHTCLUB_AND_WAREHOUSE },
        { "NETWORK_SPEND_NIGHTCLUB_AND_WAREHOUSE(_,_,_,_,_,_)", WREN_MONEY_NETWORK_SPEND_NIGHTCLUB_AND_WAREHOUSE },
        { "NETWORK_SPENT_RDR_HATCHET_BONUS(_,_,_)", WREN_MONEY_NETWORK_SPENT_RDR_HATCHET_BONUS },
        { "NETWORK_SPENT_NIGHTCLUB_ENTRY_FEE(_,_,_,_,_)", WREN_MONEY_NETWORK_SPENT_NIGHTCLUB_ENTRY_FEE },
        { "NETWORK_SPEND_NIGHTCLUB_BAR_DRINK(_,_,_,_)", WREN_MONEY_NETWORK_SPEND_NIGHTCLUB_BAR_DRINK },
        { "NETWORK_SPEND_BOUNTY_HUNTER_MISSION(_,_,_)", WREN_MONEY_NETWORK_SPEND_BOUNTY_HUNTER_MISSION },
        { "NETWORK_SPENT_REHIRE_DJ(_,_,_,_)", WREN_MONEY_NETWORK_SPENT_REHIRE_DJ },
        { "NETWORK_SPENT_ARENA_JOIN_SPECTATOR(_,_,_,_)", WREN_MONEY_NETWORK_SPENT_ARENA_JOIN_SPECTATOR },
        { "NETWORK_EARN_ARENA_SKILL_LEVEL_PROGRESSION(_,_)", WREN_MONEY_NETWORK_EARN_ARENA_SKILL_LEVEL_PROGRESSION },
        { "NETWORK_EARN_ARENA_CAREER_PROGRESSION(_,_)", WREN_MONEY_NETWORK_EARN_ARENA_CAREER_PROGRESSION },
        { "NETWORK_SPEND_MAKE_IT_RAIN(_,_,_)", WREN_MONEY_NETWORK_SPEND_MAKE_IT_RAIN },
        { "NETWORK_SPEND_BUY_ARENA(_,_,_,_)", WREN_MONEY_NETWORK_SPEND_BUY_ARENA },
        { "NETWORK_SPEND_UPGRADE_ARENA(_,_,_,_)", WREN_MONEY_NETWORK_SPEND_UPGRADE_ARENA },
        { "NETWORK_SPEND_ARENA_SPECTATOR_BOX(_,_,_,_)", WREN_MONEY_NETWORK_SPEND_ARENA_SPECTATOR_BOX },
        { "NETWORK_SPEND_SPIN_THE_WHEEL_PAYMENT(_,_,_)", WREN_MONEY_NETWORK_SPEND_SPIN_THE_WHEEL_PAYMENT },
        { "NETWORK_EARN_SPIN_THE_WHEEL_CASH(_)", WREN_MONEY_NETWORK_EARN_SPIN_THE_WHEEL_CASH },
        { "NETWORK_SPEND_ARENA_PREMIUM(_,_,_)", WREN_MONEY_NETWORK_SPEND_ARENA_PREMIUM },
        { "NETWORK_EARN_ARENA_WAR(_,_,_,_)", WREN_MONEY_NETWORK_EARN_ARENA_WAR },
        { "NETWORK_EARN_ARENA_WAR_ASSASSINATE_TARGET(_)", WREN_MONEY_NETWORK_EARN_ARENA_WAR_ASSASSINATE_TARGET },
        { "NETWORK_EARN_ARENA_WAR_EVENT_CARGO(_)", WREN_MONEY_NETWORK_EARN_ARENA_WAR_EVENT_CARGO },
        { "NETWORK_EARN_RC_TIME_TRIAL(_)", WREN_MONEY_NETWORK_EARN_RC_TIME_TRIAL },
        { "NETWORK_EARN_DAILY_OBJECTIVE_EVENT(_)", WREN_MONEY_NETWORK_EARN_DAILY_OBJECTIVE_EVENT },
        { "NETWORK_SPEND_CASINO_MEMBERSHIP(_,_,_,_)", WREN_MONEY_NETWORK_SPEND_CASINO_MEMBERSHIP },
        { "NETWORK_SPEND_BUY_CASINO(_,_,_)", WREN_MONEY_NETWORK_SPEND_BUY_CASINO },
        { "NETWORK_SPEND_UPGRADE_CASINO(_,_,_)", WREN_MONEY_NETWORK_SPEND_UPGRADE_CASINO },
        { "NETWORK_SPEND_CASINO_GENERIC(_,_,_,_,_)", WREN_MONEY_NETWORK_SPEND_CASINO_GENERIC },
        { "NETWORK_EARN_CASINO_TIME_TRIAL_WIN(_)", WREN_MONEY_NETWORK_EARN_CASINO_TIME_TRIAL_WIN },
        { "NETWORK_EARN_COLLECTABLES_ACTION_FIGURES(_)", WREN_MONEY_NETWORK_EARN_COLLECTABLES_ACTION_FIGURES },
        { "NETWORK_EARN_CASINO_COLLECTABLE_COMPLETED_COLLECTION(_)", WREN_MONEY_NETWORK_EARN_CASINO_COLLECTABLE_COMPLETED_COLLECTION },
        { "NETWORK_EARN_SELL_PRIZE_VEHICLE(_,_,_)", WREN_MONEY_NETWORK_EARN_SELL_PRIZE_VEHICLE },
        { "NETWORK_EARN_CASINO_MISSION_REWARD(_)", WREN_MONEY_NETWORK_EARN_CASINO_MISSION_REWARD },
        { "NETWORK_EARN_CASINO_STORY_MISSION_REWARD(_)", WREN_MONEY_NETWORK_EARN_CASINO_STORY_MISSION_REWARD },
        { "NETWORK_EARN_CASINO_MISSION_PARTICIPATION(_)", WREN_MONEY_NETWORK_EARN_CASINO_MISSION_PARTICIPATION },
        { "NETWORK_EARN_CASINO_AWARD(_,_)", WREN_MONEY_NETWORK_EARN_CASINO_AWARD },
        { "NETWORK_SPEND_BUY_ARCADE(_,_,_,_)", WREN_MONEY_NETWORK_SPEND_BUY_ARCADE },
        { "NETWORK_SPEND_UPGRADE_ARCADE(_,_,_,_)", WREN_MONEY_NETWORK_SPEND_UPGRADE_ARCADE },
        { "NETWORK_SPEND_CASINO_HEIST(_,_,_,_,_,_,_,_,_,_,_)", WREN_MONEY_NETWORK_SPEND_CASINO_HEIST },
        { "NETWORK_SPEND_ARCADE_MGMT(_,_,_,_,_)", WREN_MONEY_NETWORK_SPEND_ARCADE_MGMT },
        { "NETWORK_SPEND_PLAY_ARCADE(_,_,_,_,_)", WREN_MONEY_NETWORK_SPEND_PLAY_ARCADE },
        { "NETWORK_SPEND_ARCADE(_,_,_,_,_)", WREN_MONEY_NETWORK_SPEND_ARCADE },
        { "NETWORK_EARN_CASINO_HEIST(_,_,_,_,_,_,_)", WREN_MONEY_NETWORK_EARN_CASINO_HEIST },
        { "NETWORK_EARN_UPGRADE_ARCADE(_,_,_)", WREN_MONEY_NETWORK_EARN_UPGRADE_ARCADE },
        { "NETWORK_EARN_ARCADE(_,_,_,_,_)", WREN_MONEY_NETWORK_EARN_ARCADE },
        { "NETWORK_EARN_COLLECTABLES(_,_,_)", WREN_MONEY_NETWORK_EARN_COLLECTABLES },
        { "NETWORK_EARN_CHALLENGE(_,_,_)", WREN_MONEY_NETWORK_EARN_CHALLENGE },
        { "NETWORK_EARN_CASINO_HEIST_AWARDS(_,_,_,_,_)", WREN_MONEY_NETWORK_EARN_CASINO_HEIST_AWARDS },
        { "NETWORK_EARN_COLLECTABLE_ITEM(_,_)", WREN_MONEY_NETWORK_EARN_COLLECTABLE_ITEM },
        { "NETWORK_EARN_COLLECTABLE_COMPLETED_COLLECTION(_,_)", WREN_MONEY_NETWORK_EARN_COLLECTABLE_COMPLETED_COLLECTION },
        { "NETWORK_EARN_YATCH_MISSION(_,_)", WREN_MONEY_NETWORK_EARN_YATCH_MISSION },
        { "NETWORK_EARN_DISPATCH_CALL(_,_)", WREN_MONEY_NETWORK_EARN_DISPATCH_CALL },
        { "NETWORK_SPEND_BEACH_PARTY(_)", WREN_MONEY_NETWORK_SPEND_BEACH_PARTY },
        { "NETWORK_SPEND_SUBMARINE(_,_,_,_,_,_)", WREN_MONEY_NETWORK_SPEND_SUBMARINE },
        { "NETWORK_SPEND_CASINO_CLUB(_,_,_,_,_,_,_,_,_)", WREN_MONEY_NETWORK_SPEND_CASINO_CLUB },
        { "NETWORK_SPEND_BUY_SUB(_,_,_,_)", WREN_MONEY_NETWORK_SPEND_BUY_SUB },
        { "NETWORK_SPEND_UPGRADE_SUB(_,_,_,_)", WREN_MONEY_NETWORK_SPEND_UPGRADE_SUB },
        { "NETWORK_SPEND_ISLAND_HEIST(_,_,_,_)", WREN_MONEY_NETWORK_SPEND_ISLAND_HEIST },
        { "NETWORK_EARN_ISLAND_HEIST(_,_,_,_,_,_)", WREN_MONEY_NETWORK_EARN_ISLAND_HEIST },
        { "NETWORK_EARN_BEACH_PARTY_LOST_FOUND(_,_,_)", WREN_MONEY_NETWORK_EARN_BEACH_PARTY_LOST_FOUND },
        { "NETWORK_EARN_FROM_ISLAND_HEIST_DJ_MISSION(_,_)", WREN_MONEY_NETWORK_EARN_FROM_ISLAND_HEIST_DJ_MISSION },
        { "NETWORK_SPEND_CAR_CLUB_MEMBERSHIP(_,_,_,_,_)", WREN_MONEY_NETWORK_SPEND_CAR_CLUB_MEMBERSHIP },
        { "NETWORK_SPEND_CAR_CLUB_BAR(_,_,_,_)", WREN_MONEY_NETWORK_SPEND_CAR_CLUB_BAR },
        { "NETWORK_SPEND_AUTOSHOP_MODIFY(_,_,_,_,_)", WREN_MONEY_NETWORK_SPEND_AUTOSHOP_MODIFY },
        { "NETWORK_SPEND_CAR_CLUB_TAKEOVER(_,_,_,_)", WREN_MONEY_NETWORK_SPEND_CAR_CLUB_TAKEOVER },
        { "NETWORK_SPEND_BUY_AUTOSHOP(_,_,_,_)", WREN_MONEY_NETWORK_SPEND_BUY_AUTOSHOP },
        { "NETWORK_SPEND_UPGRADE_AUTOSHOP(_,_,_,_)", WREN_MONEY_NETWORK_SPEND_UPGRADE_AUTOSHOP },
        { "NETWORK_EARN_AUTOSHOP_BUSINESS(_,_)", WREN_MONEY_NETWORK_EARN_AUTOSHOP_BUSINESS },
        { "NETWORK_EARN_AUTOSHOP_INCOME(_,_)", WREN_MONEY_NETWORK_EARN_AUTOSHOP_INCOME },
        { "NETWORK_EARN_CARCLUB_MEMBERSHIP(_)", WREN_MONEY_NETWORK_EARN_CARCLUB_MEMBERSHIP },
        { "NETWORK_EARN_DAILY_VEHICLE(_,_)", WREN_MONEY_NETWORK_EARN_DAILY_VEHICLE },
        { "NETWORK_EARN_DAILY_VEHICLE_BONUS(_)", WREN_MONEY_NETWORK_EARN_DAILY_VEHICLE_BONUS },
        { "NETWORK_EARN_TUNER_AWARD(_,_,_)", WREN_MONEY_NETWORK_EARN_TUNER_AWARD },
        { "NETWORK_EARN_TUNER_ROBBERY(_,_,_,_,_)", WREN_MONEY_NETWORK_EARN_TUNER_ROBBERY },
        { "NETWORK_EARN_UPGRADE_AUTOSHOP(_,_)", WREN_MONEY_NETWORK_EARN_UPGRADE_AUTOSHOP },
        { "NETWORK_SPEND_INTERACTION_MENU_ABILITY(_,_,_,_)", WREN_MONEY_NETWORK_SPEND_INTERACTION_MENU_ABILITY },
        { "NETWORK_SPEND_SET_COMMON_FIELDS(_,_,_,_)", WREN_MONEY_NETWORK_SPEND_SET_COMMON_FIELDS },
        { "NETWORK_SPEND_SET_DISCOUNT(_)", WREN_MONEY_NETWORK_SPEND_SET_DISCOUNT },
        { "NETWORK_SPEND_BUY_AGENCY(_,_,_,_)", WREN_MONEY_NETWORK_SPEND_BUY_AGENCY },
        { "NETWORK_SPEND_UPGRADE_AGENCY(_,_,_,_)", WREN_MONEY_NETWORK_SPEND_UPGRADE_AGENCY },
        { "NETWORK_SPEND_AGENCY(_,_,_,_,_)", WREN_MONEY_NETWORK_SPEND_AGENCY },
        { "NETWORK_SPEND_HIDDEN(_,_,_,_)", WREN_MONEY_NETWORK_SPEND_HIDDEN },
        { "NETWORK_SPEND_SOURCE_BIKE(_,_,_,_)", WREN_MONEY_NETWORK_SPEND_SOURCE_BIKE },
        { "NETWORK_SPEND_COMP_SUV(_,_,_,_)", WREN_MONEY_NETWORK_SPEND_COMP_SUV },
        { "NETWORK_SPEND_SUV_FST_TRVL(_,_,_,_)", WREN_MONEY_NETWORK_SPEND_SUV_FST_TRVL },
        { "NETWORK_SPEND_SUPPLY(_,_,_,_)", WREN_MONEY_NETWORK_SPEND_SUPPLY },
        { "NETWORK_SPEND_BIKE_SHOP(_,_,_,_)", WREN_MONEY_NETWORK_SPEND_BIKE_SHOP },
        { "NETWORK_SPEND_VEHICLE_REQUESTED(_,_,_,_,_)", WREN_MONEY_NETWORK_SPEND_VEHICLE_REQUESTED },
        { "NETWORK_SPEND_GUNRUNNING(_,_,_,_)", WREN_MONEY_NETWORK_SPEND_GUNRUNNING },
        { "NETWORK_EARN_AGENCY_SAFE(_)", WREN_MONEY_NETWORK_EARN_AGENCY_SAFE },
        { "NETWORK_EARN_AWARD_CONTRACT(_,_)", WREN_MONEY_NETWORK_EARN_AWARD_CONTRACT },
        { "NETWORK_EARN_AGENCY_CONTRACT(_,_)", WREN_MONEY_NETWORK_EARN_AGENCY_CONTRACT },
        { "NETWORK_EARN_AWARD_PHONE(_,_)", WREN_MONEY_NETWORK_EARN_AWARD_PHONE },
        { "NETWORK_EARN_AGENCY_PHONE(_,_,_)", WREN_MONEY_NETWORK_EARN_AGENCY_PHONE },
        { "NETWORK_EARN_AWARD_FIXER_MISSION(_,_)", WREN_MONEY_NETWORK_EARN_AWARD_FIXER_MISSION },
        { "NETWORK_EARN_FIXER_PREP(_,_)", WREN_MONEY_NETWORK_EARN_FIXER_PREP },
        { "NETWORK_EARN_FIXER_FINALE(_,_)", WREN_MONEY_NETWORK_EARN_FIXER_FINALE },
        { "NETWORK_EARN_FIXER_AGENCY_SHORT_TRIP(_,_)", WREN_MONEY_NETWORK_EARN_FIXER_AGENCY_SHORT_TRIP },
        { "NETWORK_EARN_AWARD_SHORT_TRIP(_,_)", WREN_MONEY_NETWORK_EARN_AWARD_SHORT_TRIP },
        { "NETWORK_EARN_FIXER_RIVAL_DELIVERY(_,_)", WREN_MONEY_NETWORK_EARN_FIXER_RIVAL_DELIVERY },
        { "NETWORK_EARN_UPGRADE_AGENCY(_,_)", WREN_MONEY_NETWORK_EARN_UPGRADE_AGENCY },
        { "NETWORK_SPEND_APARTMENT_UTILITIES(_,_,_)", WREN_MONEY_NETWORK_SPEND_APARTMENT_UTILITIES },
        { "NETWORK_SPEND_BUSINESS_PROPERTY_FEES(_,_,_,_)", WREN_MONEY_NETWORK_SPEND_BUSINESS_PROPERTY_FEES },
        { "NETWORK_EARN_SIGHTSEEING_REWARD(_,_,_,_)", WREN_MONEY_NETWORK_EARN_SIGHTSEEING_REWARD },
        { "NETWORK_EARN_BIKER_SHOP(_,_)", WREN_MONEY_NETWORK_EARN_BIKER_SHOP },
        { "NETWORK_EARN_BIKER(_)", WREN_MONEY_NETWORK_EARN_BIKER },
        { "NETWORK_YOHAN_SOURCE_GOODS(_,_,_,_)", WREN_MONEY_NETWORK_YOHAN_SOURCE_GOODS },
        { "NETWORK_GET_VC_BANK_BALANCE()", WREN_MONEY_NETWORK_GET_VC_BANK_BALANCE },
        { "NETWORK_GET_VC_WALLET_BALANCE(_)", WREN_MONEY_NETWORK_GET_VC_WALLET_BALANCE },
        { "NETWORK_GET_VC_BALANCE()", WREN_MONEY_NETWORK_GET_VC_BALANCE },
        { "NETWORK_GET_EVC_BALANCE()", WREN_MONEY_NETWORK_GET_EVC_BALANCE },
        { "NETWORK_GET_PVC_BALANCE()", WREN_MONEY_NETWORK_GET_PVC_BALANCE },
        { "NETWORK_GET_STRING_WALLET_BALANCE(_)", WREN_MONEY_NETWORK_GET_STRING_WALLET_BALANCE },
        { "NETWORK_GET_STRING_BANK_BALANCE()", WREN_MONEY_NETWORK_GET_STRING_BANK_BALANCE },
        { "NETWORK_GET_STRING_BANK_WALLET_BALANCE()", WREN_MONEY_NETWORK_GET_STRING_BANK_WALLET_BALANCE },
        { "NETWORK_GET_CAN_SPEND_FROM_WALLET(_,_)", WREN_MONEY_NETWORK_GET_CAN_SPEND_FROM_WALLET },
        { "NETWORK_GET_CAN_SPEND_FROM_BANK(_)", WREN_MONEY_NETWORK_GET_CAN_SPEND_FROM_BANK },
        { "NETWORK_GET_CAN_SPEND_FROM_BANK_AND_WALLET(_,_)", WREN_MONEY_NETWORK_GET_CAN_SPEND_FROM_BANK_AND_WALLET },
        { "NETWORK_GET_PVC_TRANSFER_BALANCE()", WREN_MONEY_NETWORK_GET_PVC_TRANSFER_BALANCE },
        { "NETWORK_GET_CAN_TRANSFER_CASH(_)", WREN_MONEY_NETWORK_GET_CAN_TRANSFER_CASH },
        { "NETWORK_CAN_RECEIVE_PLAYER_CASH(_,_,_,_)", WREN_MONEY_NETWORK_CAN_RECEIVE_PLAYER_CASH },
        { "NETWORK_GET_REMAINING_TRANSFER_BALANCE()", WREN_MONEY_NETWORK_GET_REMAINING_TRANSFER_BALANCE },
        { "WITHDRAW_VC(_)", WREN_MONEY_WITHDRAW_VC },
        { "DEPOSIT_VC(_)", WREN_MONEY_DEPOSIT_VC },
        { "HAS_VC_WITHDRAWAL_COMPLETED(_)", WREN_MONEY_HAS_VC_WITHDRAWAL_COMPLETED },
        { "WAS_VC_WITHDRAWAL_SUCCESSFUL(_)", WREN_MONEY_WAS_VC_WITHDRAWAL_SUCCESSFUL },
        { "NET_GAMESERVER_USE_SERVER_TRANSACTIONS()", WREN_NETSHOPPING_NET_GAMESERVER_USE_SERVER_TRANSACTIONS },
        { "NET_GAMESERVER_CATALOG_ITEM_IS_VALID(_)", WREN_NETSHOPPING_NET_GAMESERVER_CATALOG_ITEM_IS_VALID },
        { "NET_GAMESERVER_CATALOG_ITEM_KEY_IS_VALID(_)", WREN_NETSHOPPING_NET_GAMESERVER_CATALOG_ITEM_KEY_IS_VALID },
        { "NET_GAMESERVER_GET_PRICE(_,_,_)", WREN_NETSHOPPING_NET_GAMESERVER_GET_PRICE },
        { "NET_GAMESERVER_CATALOG_IS_VALID()", WREN_NETSHOPPING_NET_GAMESERVER_CATALOG_IS_VALID },
        { "NET_GAMESERVER_IS_CATALOG_CURRENT()", WREN_NETSHOPPING_NET_GAMESERVER_IS_CATALOG_CURRENT },
        { "NET_GAMESERVER_GET_CATALOG_CLOUD_CRC()", WREN_NETSHOPPING_NET_GAMESERVER_GET_CATALOG_CLOUD_CRC },
        { "NET_GAMESERVER_REFRESH_SERVER_CATALOG()", WREN_NETSHOPPING_NET_GAMESERVER_REFRESH_SERVER_CATALOG },
        { "NET_GAMESERVER_RETRIEVE_CATALOG_REFRESH_STATUS()", WREN_NETSHOPPING_NET_GAMESERVER_RETRIEVE_CATALOG_REFRESH_STATUS },
        { "NET_GAMESERVER_INIT_SESSION()", WREN_NETSHOPPING_NET_GAMESERVER_INIT_SESSION },
        { "NET_GAMESERVER_RETRIEVE_INIT_SESSION_STATUS()", WREN_NETSHOPPING_NET_GAMESERVER_RETRIEVE_INIT_SESSION_STATUS },
        { "NET_GAMESERVER_START_SESSION(_)", WREN_NETSHOPPING_NET_GAMESERVER_START_SESSION },
        { "NET_GAMESERVER_START_SESSION_PENDING()", WREN_NETSHOPPING_NET_GAMESERVER_START_SESSION_PENDING },
        { "NET_GAMESERVER_RETRIEVE_START_SESSION_STATUS()", WREN_NETSHOPPING_NET_GAMESERVER_RETRIEVE_START_SESSION_STATUS },
        { "NET_GAMESERVER_RETRIEVE_SESSION_ERROR_CODE()", WREN_NETSHOPPING_NET_GAMESERVER_RETRIEVE_SESSION_ERROR_CODE },
        { "NET_GAMESERVER_IS_SESSION_VALID(_)", WREN_NETSHOPPING_NET_GAMESERVER_IS_SESSION_VALID },
        { "NET_GAMESERVER_CLEAR_SESSION(_)", WREN_NETSHOPPING_NET_GAMESERVER_CLEAR_SESSION },
        { "NET_GAMESERVER_SESSION_APPLY_RECEIVED_DATA(_)", WREN_NETSHOPPING_NET_GAMESERVER_SESSION_APPLY_RECEIVED_DATA },
        { "NET_GAMESERVER_IS_SESSION_REFRESH_PENDING()", WREN_NETSHOPPING_NET_GAMESERVER_IS_SESSION_REFRESH_PENDING },
        { "NET_GAMESERVER_START_SESSION_RESTART(_,_)", WREN_NETSHOPPING_NET_GAMESERVER_START_SESSION_RESTART },
        { "NET_GAMESERVER_TRANSACTION_IN_PROGRESS()", WREN_NETSHOPPING_NET_GAMESERVER_TRANSACTION_IN_PROGRESS },
        { "NET_GAMESERVER_GET_SESSION_STATE_AND_STATUS()", WREN_NETSHOPPING_NET_GAMESERVER_GET_SESSION_STATE_AND_STATUS },
        { "NET_GAMESERVER_BASKET_START(_,_,_)", WREN_NETSHOPPING_NET_GAMESERVER_BASKET_START },
        { "NET_GAMESERVER_BASKET_END()", WREN_NETSHOPPING_NET_GAMESERVER_BASKET_END },
        { "NET_GAMESERVER_BASKET_IS_ACTIVE()", WREN_NETSHOPPING_NET_GAMESERVER_BASKET_IS_ACTIVE },
        { "NET_GAMESERVER_BASKET_ADD_ITEM(_)", WREN_NETSHOPPING_NET_GAMESERVER_BASKET_ADD_ITEM },
        { "NET_GAMESERVER_BASKET_IS_FULL()", WREN_NETSHOPPING_NET_GAMESERVER_BASKET_IS_FULL },
        { "NET_GAMESERVER_BASKET_APPLY_SERVER_DATA(_)", WREN_NETSHOPPING_NET_GAMESERVER_BASKET_APPLY_SERVER_DATA },
        { "NET_GAMESERVER_CHECKOUT_START(_)", WREN_NETSHOPPING_NET_GAMESERVER_CHECKOUT_START },
        { "NET_GAMESERVER_BEGIN_SERVICE(_,_,_,_,_)", WREN_NETSHOPPING_NET_GAMESERVER_BEGIN_SERVICE },
        { "NET_GAMESERVER_END_SERVICE(_)", WREN_NETSHOPPING_NET_GAMESERVER_END_SERVICE },
        { "NET_GAMESERVER_DELETE_CHARACTER(_,_,_)", WREN_NETSHOPPING_NET_GAMESERVER_DELETE_CHARACTER },
        { "NET_GAMESERVER_DELETE_CHARACTER_GET_STATUS()", WREN_NETSHOPPING_NET_GAMESERVER_DELETE_CHARACTER_GET_STATUS },
        { "NET_GAMESERVER_DELETE_SET_TELEMETRY_NONCE_SEED()", WREN_NETSHOPPING_NET_GAMESERVER_DELETE_SET_TELEMETRY_NONCE_SEED },
        { "NET_GAMESERVER_TRANSFER_BANK_TO_WALLET(_,_)", WREN_NETSHOPPING_NET_GAMESERVER_TRANSFER_BANK_TO_WALLET },
        { "NET_GAMESERVER_TRANSFER_WALLET_TO_BANK(_,_)", WREN_NETSHOPPING_NET_GAMESERVER_TRANSFER_WALLET_TO_BANK },
        { "NET_GAMESERVER_TRANSFER_BANK_TO_WALLET_GET_STATUS()", WREN_NETSHOPPING_NET_GAMESERVER_TRANSFER_BANK_TO_WALLET_GET_STATUS },
        { "NET_GAMESERVER_TRANSFER_WALLET_TO_BANK_GET_STATUS()", WREN_NETSHOPPING_NET_GAMESERVER_TRANSFER_WALLET_TO_BANK_GET_STATUS },
        { "NET_GAMESERVER_TRANSFER_CASH_SET_TELEMETRY_NONCE_SEED()", WREN_NETSHOPPING_NET_GAMESERVER_TRANSFER_CASH_SET_TELEMETRY_NONCE_SEED },
        { "NET_GAMESERVER_SET_TELEMETRY_NONCE_SEED(_)", WREN_NETSHOPPING_NET_GAMESERVER_SET_TELEMETRY_NONCE_SEED },
        { "GET_ONLINE_VERSION()", WREN_NETWORK_GET_ONLINE_VERSION },
        { "NETWORK_IS_SIGNED_IN()", WREN_NETWORK_NETWORK_IS_SIGNED_IN },
        { "NETWORK_IS_SIGNED_ONLINE()", WREN_NETWORK_NETWORK_IS_SIGNED_ONLINE },
        { "NETWORK_IS_NP_AVAILABLE()", WREN_NETWORK_NETWORK_IS_NP_AVAILABLE },
        { "NETWORK_IS_NP_PENDING()", WREN_NETWORK_NETWORK_IS_NP_PENDING },
        { "NETWORK_GET_NP_UNAVAILABLE_REASON()", WREN_NETWORK_NETWORK_GET_NP_UNAVAILABLE_REASON },
        { "NETWORK_IS_CONNETED_TO_NP_PRESENCE()", WREN_NETWORK_NETWORK_IS_CONNETED_TO_NP_PRESENCE },
        { "NETWORK_IS_LOGGED_IN_TO_PSN()", WREN_NETWORK_NETWORK_IS_LOGGED_IN_TO_PSN },
        { "NETWORK_HAS_VALID_ROS_CREDENTIALS()", WREN_NETWORK_NETWORK_HAS_VALID_ROS_CREDENTIALS },
        { "NETWORK_IS_REFRESHING_ROS_CREDENTIALS()", WREN_NETWORK_NETWORK_IS_REFRESHING_ROS_CREDENTIALS },
        { "NETWORK_IS_CLOUD_AVAILABLE()", WREN_NETWORK_NETWORK_IS_CLOUD_AVAILABLE },
        { "NETWORK_HAS_SOCIAL_CLUB_ACCOUNT()", WREN_NETWORK_NETWORK_HAS_SOCIAL_CLUB_ACCOUNT },
        { "NETWORK_ARE_SOCIAL_CLUB_POLICIES_CURRENT()", WREN_NETWORK_NETWORK_ARE_SOCIAL_CLUB_POLICIES_CURRENT },
        { "NETWORK_IS_HOST()", WREN_NETWORK_NETWORK_IS_HOST },
        { "NETWORK_GET_HOST_PLAYER_INDEX()", WREN_NETWORK_NETWORK_GET_HOST_PLAYER_INDEX },
        { "NETWORK_WAS_GAME_SUSPENDED()", WREN_NETWORK_NETWORK_WAS_GAME_SUSPENDED },
        { "NETWORK_HAVE_ONLINE_PRIVILEGES()", WREN_NETWORK_NETWORK_HAVE_ONLINE_PRIVILEGES },
        { "NETWORK_HAS_AGE_RESTRICTIONS()", WREN_NETWORK_NETWORK_HAS_AGE_RESTRICTIONS },
        { "NETWORK_HAVE_USER_CONTENT_PRIVILEGES(_)", WREN_NETWORK_NETWORK_HAVE_USER_CONTENT_PRIVILEGES },
        { "NETWORK_HAVE_COMMUNICATION_PRIVILEGES(_,_)", WREN_NETWORK_NETWORK_HAVE_COMMUNICATION_PRIVILEGES },
        { "NETWORK_CHECK_ONLINE_PRIVILEGES(_,_)", WREN_NETWORK_NETWORK_CHECK_ONLINE_PRIVILEGES },
        { "NETWORK_CHECK_USER_CONTENT_PRIVILEGES(_,_,_)", WREN_NETWORK_NETWORK_CHECK_USER_CONTENT_PRIVILEGES },
        { "NETWORK_CHECK_COMMUNICATION_PRIVILEGES(_,_,_)", WREN_NETWORK_NETWORK_CHECK_COMMUNICATION_PRIVILEGES },
        { "NETWORK_CHECK_TEXT_COMMUNICATION_PRIVILEGES(_,_,_)", WREN_NETWORK_NETWORK_CHECK_TEXT_COMMUNICATION_PRIVILEGES },
        { "NETWORK_IS_USING_ONLINE_PROMOTION()", WREN_NETWORK_NETWORK_IS_USING_ONLINE_PROMOTION },
        { "NETWORK_SHOULD_SHOW_PROMOTION_ALERT_SCREEN()", WREN_NETWORK_NETWORK_SHOULD_SHOW_PROMOTION_ALERT_SCREEN },
        { "NETWORK_HAS_SOCIAL_NETWORKING_SHARING_PRIV()", WREN_NETWORK_NETWORK_HAS_SOCIAL_NETWORKING_SHARING_PRIV },
        { "NETWORK_GET_AGE_GROUP()", WREN_NETWORK_NETWORK_GET_AGE_GROUP },
        { "NETWORK_CHECK_PRIVILEGES(_,_,_)", WREN_NETWORK_NETWORK_CHECK_PRIVILEGES },
        { "NETWORK_IS_PRIVILEGE_CHECK_IN_PROGRESS()", WREN_NETWORK_NETWORK_IS_PRIVILEGE_CHECK_IN_PROGRESS },
        { "NETWORK_SET_PRIVILEGE_CHECK_RESULT_NOT_NEEDED()", WREN_NETWORK_NETWORK_SET_PRIVILEGE_CHECK_RESULT_NOT_NEEDED },
        { "NETWORK_RESOLVE_PRIVILEGE_USER_CONTENT()", WREN_NETWORK_NETWORK_RESOLVE_PRIVILEGE_USER_CONTENT },
        { "NETWORK_HAVE_PLATFORM_SUBSCRIPTION()", WREN_NETWORK_NETWORK_HAVE_PLATFORM_SUBSCRIPTION },
        { "NETWORK_IS_PLATFORM_SUBSCRIPTION_CHECK_PENDING()", WREN_NETWORK_NETWORK_IS_PLATFORM_SUBSCRIPTION_CHECK_PENDING },
        { "NETWORK_SHOW_ACCOUNT_UPGRADE_UI()", WREN_NETWORK_NETWORK_SHOW_ACCOUNT_UPGRADE_UI },
        { "NETWORK_IS_SHOWING_SYSTEM_UI_OR_RECENTLY_REQUESTED_UPSELL()", WREN_NETWORK_NETWORK_IS_SHOWING_SYSTEM_UI_OR_RECENTLY_REQUESTED_UPSELL },
        { "NETWORK_NEED_TO_START_NEW_GAME_BUT_BLOCKED()", WREN_NETWORK_NETWORK_NEED_TO_START_NEW_GAME_BUT_BLOCKED },
        { "NETWORK_CAN_BAIL()", WREN_NETWORK_NETWORK_CAN_BAIL },
        { "NETWORK_BAIL(_,_,_)", WREN_NETWORK_NETWORK_BAIL },
        { "NETWORK_ON_RETURN_TO_SINGLE_PLAYER()", WREN_NETWORK_NETWORK_ON_RETURN_TO_SINGLE_PLAYER },
        { "NETWORK_TRANSITION_START(_,_,_,_)", WREN_NETWORK_NETWORK_TRANSITION_START },
        { "NETWORK_TRANSITION_ADD_STAGE(_,_,_,_,_)", WREN_NETWORK_NETWORK_TRANSITION_ADD_STAGE },
        { "NETWORK_TRANSITION_FINISH(_,_,_)", WREN_NETWORK_NETWORK_TRANSITION_FINISH },
        { "NETWORK_CAN_ACCESS_MULTIPLAYER()", WREN_NETWORK_NETWORK_CAN_ACCESS_MULTIPLAYER },
        { "NETWORK_IS_MULTIPLAYER_DISABLED()", WREN_NETWORK_NETWORK_IS_MULTIPLAYER_DISABLED },
        { "NETWORK_CAN_ENTER_MULTIPLAYER()", WREN_NETWORK_NETWORK_CAN_ENTER_MULTIPLAYER },
        { "NETWORK_SESSION_DO_FREEROAM_QUICKMATCH(_,_,_,_,_,_)", WREN_NETWORK_NETWORK_SESSION_DO_FREEROAM_QUICKMATCH },
        { "NETWORK_SESSION_DO_FRIEND_MATCHMAKING(_,_,_,_)", WREN_NETWORK_NETWORK_SESSION_DO_FRIEND_MATCHMAKING },
        { "NETWORK_SESSION_DO_CREW_MATCHMAKING(_,_,_,_,_)", WREN_NETWORK_NETWORK_SESSION_DO_CREW_MATCHMAKING },
        { "NETWORK_SESSION_DO_ACTIVITY_QUICKMATCH(_,_,_,_,_)", WREN_NETWORK_NETWORK_SESSION_DO_ACTIVITY_QUICKMATCH },
        { "NETWORK_SESSION_HOST(_,_,_)", WREN_NETWORK_NETWORK_SESSION_HOST },
        { "NETWORK_SESSION_HOST_CLOSED(_,_)", WREN_NETWORK_NETWORK_SESSION_HOST_CLOSED },
        { "NETWORK_SESSION_HOST_FRIENDS_ONLY(_,_)", WREN_NETWORK_NETWORK_SESSION_HOST_FRIENDS_ONLY },
        { "NETWORK_SESSION_IS_CLOSED_FRIENDS()", WREN_NETWORK_NETWORK_SESSION_IS_CLOSED_FRIENDS },
        { "NETWORK_SESSION_IS_CLOSED_CREW()", WREN_NETWORK_NETWORK_SESSION_IS_CLOSED_CREW },
        { "NETWORK_SESSION_IS_SOLO()", WREN_NETWORK_NETWORK_SESSION_IS_SOLO },
        { "NETWORK_SESSION_IS_PRIVATE()", WREN_NETWORK_NETWORK_SESSION_IS_PRIVATE },
        { "NETWORK_SESSION_END(_,_)", WREN_NETWORK_NETWORK_SESSION_END },
        { "NETWORK_SESSION_LEAVE(_)", WREN_NETWORK_NETWORK_SESSION_LEAVE },
        { "NETWORK_SESSION_KICK_PLAYER(_)", WREN_NETWORK_NETWORK_SESSION_KICK_PLAYER },
        { "NETWORK_SESSION_GET_KICK_VOTE(_)", WREN_NETWORK_NETWORK_SESSION_GET_KICK_VOTE },
        { "NETWORK_SESSION_RESERVE_SLOTS_TRANSITION(_,_,_)", WREN_NETWORK_NETWORK_SESSION_RESERVE_SLOTS_TRANSITION },
        { "NETWORK_JOIN_PREVIOUSLY_FAILED_SESSION()", WREN_NETWORK_NETWORK_JOIN_PREVIOUSLY_FAILED_SESSION },
        { "NETWORK_JOIN_PREVIOUSLY_FAILED_TRANSITION()", WREN_NETWORK_NETWORK_JOIN_PREVIOUSLY_FAILED_TRANSITION },
        { "NETWORK_SESSION_SET_MATCHMAKING_GROUP(_)", WREN_NETWORK_NETWORK_SESSION_SET_MATCHMAKING_GROUP },
        { "NETWORK_SESSION_SET_MATCHMAKING_GROUP_MAX(_,_)", WREN_NETWORK_NETWORK_SESSION_SET_MATCHMAKING_GROUP_MAX },
        { "NETWORK_SESSION_GET_MATCHMAKING_GROUP_FREE(_)", WREN_NETWORK_NETWORK_SESSION_GET_MATCHMAKING_GROUP_FREE },
        { "NETWORK_SESSION_ADD_ACTIVE_MATCHMAKING_GROUP(_)", WREN_NETWORK_NETWORK_SESSION_ADD_ACTIVE_MATCHMAKING_GROUP },
        { "NETWORK_SESSION_SET_UNIQUE_CREW_LIMIT(_)", WREN_NETWORK_NETWORK_SESSION_SET_UNIQUE_CREW_LIMIT },
        { "NETWORK_SESSION_SET_UNIQUE_CREW_LIMIT_TRANSITION(_)", WREN_NETWORK_NETWORK_SESSION_SET_UNIQUE_CREW_LIMIT_TRANSITION },
        { "NETWORK_SESSION_SET_UNIQUE_CREW_ONLY_CREWS_TRANSITION(_)", WREN_NETWORK_NETWORK_SESSION_SET_UNIQUE_CREW_ONLY_CREWS_TRANSITION },
        { "NETWORK_SESSION_SET_CREW_LIMIT_MAX_MEMBERS_TRANSITION(_)", WREN_NETWORK_NETWORK_SESSION_SET_CREW_LIMIT_MAX_MEMBERS_TRANSITION },
        { "NETWORK_SESSION_SET_MATCHMAKING_PROPERTY_ID(_)", WREN_NETWORK_NETWORK_SESSION_SET_MATCHMAKING_PROPERTY_ID },
        { "NETWORK_SESSION_SET_MATCHMAKING_MENTAL_STATE(_)", WREN_NETWORK_NETWORK_SESSION_SET_MATCHMAKING_MENTAL_STATE },
        { "NETWORK_SESSION_SET_NUM_BOSSES(_)", WREN_NETWORK_NETWORK_SESSION_SET_NUM_BOSSES },
        { "NETWORK_SESSION_SET_SCRIPT_VALIDATE_JOIN()", WREN_NETWORK_NETWORK_SESSION_SET_SCRIPT_VALIDATE_JOIN },
        { "NETWORK_SESSION_VALIDATE_JOIN(_)", WREN_NETWORK_NETWORK_SESSION_VALIDATE_JOIN },
        { "NETWORK_ADD_FOLLOWERS(_)", WREN_NETWORK_NETWORK_ADD_FOLLOWERS },
        { "NETWORK_CLEAR_FOLLOWERS()", WREN_NETWORK_NETWORK_CLEAR_FOLLOWERS },
        { "NETWORK_GET_GLOBAL_MULTIPLAYER_CLOCK()", WREN_NETWORK_NETWORK_GET_GLOBAL_MULTIPLAYER_CLOCK },
        { "NETWORK_SESSION_SET_GAMEMODE(_)", WREN_NETWORK_NETWORK_SESSION_SET_GAMEMODE },
        { "NETWORK_SESSION_GET_HOST_AIM_PREFERENCE()", WREN_NETWORK_NETWORK_SESSION_GET_HOST_AIM_PREFERENCE },
        { "NETWORK_FIND_GAMERS_IN_CREW(_)", WREN_NETWORK_NETWORK_FIND_GAMERS_IN_CREW },
        { "NETWORK_FIND_MATCHED_GAMERS(_,_,_,_)", WREN_NETWORK_NETWORK_FIND_MATCHED_GAMERS },
        { "NETWORK_IS_FINDING_GAMERS()", WREN_NETWORK_NETWORK_IS_FINDING_GAMERS },
        { "NETWORK_DID_FIND_GAMERS_SUCCEED()", WREN_NETWORK_NETWORK_DID_FIND_GAMERS_SUCCEED },
        { "NETWORK_GET_NUM_FOUND_GAMERS()", WREN_NETWORK_NETWORK_GET_NUM_FOUND_GAMERS },
        { "NETWORK_GET_FOUND_GAMER(_)", WREN_NETWORK_NETWORK_GET_FOUND_GAMER },
        { "NETWORK_CLEAR_FOUND_GAMERS()", WREN_NETWORK_NETWORK_CLEAR_FOUND_GAMERS },
        { "NETWORK_QUEUE_GAMER_FOR_STATUS()", WREN_NETWORK_NETWORK_QUEUE_GAMER_FOR_STATUS },
        { "NETWORK_GET_GAMER_STATUS_FROM_QUEUE()", WREN_NETWORK_NETWORK_GET_GAMER_STATUS_FROM_QUEUE },
        { "NETWORK_IS_GETTING_GAMER_STATUS()", WREN_NETWORK_NETWORK_IS_GETTING_GAMER_STATUS },
        { "NETWORK_DID_GET_GAMER_STATUS_SUCCEED()", WREN_NETWORK_NETWORK_DID_GET_GAMER_STATUS_SUCCEED },
        { "NETWORK_GET_GAMER_STATUS_RESULT(_)", WREN_NETWORK_NETWORK_GET_GAMER_STATUS_RESULT },
        { "NETWORK_CLEAR_GET_GAMER_STATUS()", WREN_NETWORK_NETWORK_CLEAR_GET_GAMER_STATUS },
        { "NETWORK_SESSION_JOIN_INVITE()", WREN_NETWORK_NETWORK_SESSION_JOIN_INVITE },
        { "NETWORK_SESSION_CANCEL_INVITE()", WREN_NETWORK_NETWORK_SESSION_CANCEL_INVITE },
        { "NETWORK_SESSION_FORCE_CANCEL_INVITE()", WREN_NETWORK_NETWORK_SESSION_FORCE_CANCEL_INVITE },
        { "NETWORK_HAS_PENDING_INVITE()", WREN_NETWORK_NETWORK_HAS_PENDING_INVITE },
        { "NETWORK_HAS_CONFIRMED_INVITE()", WREN_NETWORK_NETWORK_HAS_CONFIRMED_INVITE },
        { "NETWORK_REQUEST_INVITE_CONFIRMED_EVENT()", WREN_NETWORK_NETWORK_REQUEST_INVITE_CONFIRMED_EVENT },
        { "NETWORK_SESSION_WAS_INVITED()", WREN_NETWORK_NETWORK_SESSION_WAS_INVITED },
        { "NETWORK_SESSION_GET_INVITER()", WREN_NETWORK_NETWORK_SESSION_GET_INVITER },
        { "NETWORK_SESSION_IS_AWAITING_INVITE_RESPONSE()", WREN_NETWORK_NETWORK_SESSION_IS_AWAITING_INVITE_RESPONSE },
        { "NETWORK_SESSION_IS_DISPLAYING_INVITE_CONFIRMATION()", WREN_NETWORK_NETWORK_SESSION_IS_DISPLAYING_INVITE_CONFIRMATION },
        { "NETWORK_SUPPRESS_INVITE(_)", WREN_NETWORK_NETWORK_SUPPRESS_INVITE },
        { "NETWORK_BLOCK_INVITES(_)", WREN_NETWORK_NETWORK_BLOCK_INVITES },
        { "NETWORK_BLOCK_JOIN_QUEUE_INVITES(_)", WREN_NETWORK_NETWORK_BLOCK_JOIN_QUEUE_INVITES },
        { "NETWORK_SET_CAN_RECEIVE_RS_INVITES(_)", WREN_NETWORK_NETWORK_SET_CAN_RECEIVE_RS_INVITES },
        { "NETWORK_STORE_INVITE_THROUGH_RESTART()", WREN_NETWORK_NETWORK_STORE_INVITE_THROUGH_RESTART },
        { "NETWORK_ALLOW_INVITE_PROCESS_IN_PLAYER_SWITCH(_)", WREN_NETWORK_NETWORK_ALLOW_INVITE_PROCESS_IN_PLAYER_SWITCH },
        { "NETWORK_SET_SCRIPT_READY_FOR_EVENTS(_)", WREN_NETWORK_NETWORK_SET_SCRIPT_READY_FOR_EVENTS },
        { "NETWORK_IS_OFFLINE_INVITE_PENDING()", WREN_NETWORK_NETWORK_IS_OFFLINE_INVITE_PENDING },
        { "NETWORK_CLEAR_OFFLINE_INVITE_PENDING()", WREN_NETWORK_NETWORK_CLEAR_OFFLINE_INVITE_PENDING },
        { "NETWORK_SESSION_HOST_SINGLE_PLAYER(_)", WREN_NETWORK_NETWORK_SESSION_HOST_SINGLE_PLAYER },
        { "NETWORK_SESSION_LEAVE_SINGLE_PLAYER()", WREN_NETWORK_NETWORK_SESSION_LEAVE_SINGLE_PLAYER },
        { "NETWORK_IS_GAME_IN_PROGRESS()", WREN_NETWORK_NETWORK_IS_GAME_IN_PROGRESS },
        { "NETWORK_IS_SESSION_ACTIVE()", WREN_NETWORK_NETWORK_IS_SESSION_ACTIVE },
        { "NETWORK_IS_IN_SESSION()", WREN_NETWORK_NETWORK_IS_IN_SESSION },
        { "NETWORK_IS_SESSION_STARTED()", WREN_NETWORK_NETWORK_IS_SESSION_STARTED },
        { "NETWORK_IS_SESSION_BUSY()", WREN_NETWORK_NETWORK_IS_SESSION_BUSY },
        { "NETWORK_CAN_SESSION_END()", WREN_NETWORK_NETWORK_CAN_SESSION_END },
        { "NETWORK_GET_GAME_MODE()", WREN_NETWORK_NETWORK_GET_GAME_MODE },
        { "NETWORK_SESSION_MARK_VISIBLE(_)", WREN_NETWORK_NETWORK_SESSION_MARK_VISIBLE },
        { "NETWORK_SESSION_IS_VISIBLE()", WREN_NETWORK_NETWORK_SESSION_IS_VISIBLE },
        { "NETWORK_SESSION_BLOCK_JOIN_REQUESTS(_)", WREN_NETWORK_NETWORK_SESSION_BLOCK_JOIN_REQUESTS },
        { "NETWORK_SESSION_CHANGE_SLOTS(_,_)", WREN_NETWORK_NETWORK_SESSION_CHANGE_SLOTS },
        { "NETWORK_SESSION_GET_PRIVATE_SLOTS()", WREN_NETWORK_NETWORK_SESSION_GET_PRIVATE_SLOTS },
        { "NETWORK_SESSION_VOICE_HOST()", WREN_NETWORK_NETWORK_SESSION_VOICE_HOST },
        { "NETWORK_SESSION_VOICE_LEAVE()", WREN_NETWORK_NETWORK_SESSION_VOICE_LEAVE },
        { "NETWORK_SESSION_VOICE_CONNECT_TO_PLAYER()", WREN_NETWORK_NETWORK_SESSION_VOICE_CONNECT_TO_PLAYER },
        { "NETWORK_SESSION_VOICE_RESPOND_TO_REQUEST(_,_)", WREN_NETWORK_NETWORK_SESSION_VOICE_RESPOND_TO_REQUEST },
        { "NETWORK_SESSION_VOICE_SET_TIMEOUT(_)", WREN_NETWORK_NETWORK_SESSION_VOICE_SET_TIMEOUT },
        { "NETWORK_SESSION_IS_IN_VOICE_SESSION()", WREN_NETWORK_NETWORK_SESSION_IS_IN_VOICE_SESSION },
        { "NETWORK_SESSION_IS_VOICE_SESSION_ACTIVE()", WREN_NETWORK_NETWORK_SESSION_IS_VOICE_SESSION_ACTIVE },
        { "NETWORK_SESSION_IS_VOICE_SESSION_BUSY()", WREN_NETWORK_NETWORK_SESSION_IS_VOICE_SESSION_BUSY },
        { "NETWORK_SEND_TEXT_MESSAGE(_)", WREN_NETWORK_NETWORK_SEND_TEXT_MESSAGE },
        { "NETWORK_SET_ACTIVITY_SPECTATOR(_)", WREN_NETWORK_NETWORK_SET_ACTIVITY_SPECTATOR },
        { "NETWORK_IS_ACTIVITY_SPECTATOR()", WREN_NETWORK_NETWORK_IS_ACTIVITY_SPECTATOR },
        { "NETWORK_SET_ACTIVITY_PLAYER_MAX(_)", WREN_NETWORK_NETWORK_SET_ACTIVITY_PLAYER_MAX },
        { "NETWORK_SET_ACTIVITY_SPECTATOR_MAX(_)", WREN_NETWORK_NETWORK_SET_ACTIVITY_SPECTATOR_MAX },
        { "NETWORK_GET_ACTIVITY_PLAYER_NUM(_)", WREN_NETWORK_NETWORK_GET_ACTIVITY_PLAYER_NUM },
        { "NETWORK_IS_ACTIVITY_SPECTATOR_FROM_HANDLE()", WREN_NETWORK_NETWORK_IS_ACTIVITY_SPECTATOR_FROM_HANDLE },
        { "NETWORK_HOST_TRANSITION(_,_,_,_,_,_,_,_,_,_)", WREN_NETWORK_NETWORK_HOST_TRANSITION },
        { "NETWORK_DO_TRANSITION_QUICKMATCH(_,_,_,_,_,_)", WREN_NETWORK_NETWORK_DO_TRANSITION_QUICKMATCH },
        { "NETWORK_DO_TRANSITION_QUICKMATCH_ASYNC(_,_,_,_,_,_)", WREN_NETWORK_NETWORK_DO_TRANSITION_QUICKMATCH_ASYNC },
        { "NETWORK_DO_TRANSITION_QUICKMATCH_WITH_GROUP(_,_,_,_,_,_,_)", WREN_NETWORK_NETWORK_DO_TRANSITION_QUICKMATCH_WITH_GROUP },
        { "NETWORK_JOIN_GROUP_ACTIVITY()", WREN_NETWORK_NETWORK_JOIN_GROUP_ACTIVITY },
        { "NETWORK_CLEAR_GROUP_ACTIVITY()", WREN_NETWORK_NETWORK_CLEAR_GROUP_ACTIVITY },
        { "NETWORK_RETAIN_ACTIVITY_GROUP()", WREN_NETWORK_NETWORK_RETAIN_ACTIVITY_GROUP },
        { "NETWORK_IS_TRANSITION_CLOSED_FRIENDS()", WREN_NETWORK_NETWORK_IS_TRANSITION_CLOSED_FRIENDS },
        { "NETWORK_IS_TRANSITION_CLOSED_CREW()", WREN_NETWORK_NETWORK_IS_TRANSITION_CLOSED_CREW },
        { "NETWORK_IS_TRANSITION_SOLO()", WREN_NETWORK_NETWORK_IS_TRANSITION_SOLO },
        { "NETWORK_IS_TRANSITION_PRIVATE()", WREN_NETWORK_NETWORK_IS_TRANSITION_PRIVATE },
        { "NETWORK_GET_NUM_TRANSITION_NON_ASYNC_GAMERS()", WREN_NETWORK_NETWORK_GET_NUM_TRANSITION_NON_ASYNC_GAMERS },
        { "NETWORK_MARK_AS_PREFERRED_ACTIVITY(_)", WREN_NETWORK_NETWORK_MARK_AS_PREFERRED_ACTIVITY },
        { "NETWORK_MARK_AS_WAITING_ASYNC(_)", WREN_NETWORK_NETWORK_MARK_AS_WAITING_ASYNC },
        { "NETWORK_SET_IN_PROGRESS_FINISH_TIME(_)", WREN_NETWORK_NETWORK_SET_IN_PROGRESS_FINISH_TIME },
        { "NETWORK_SET_TRANSITION_CREATOR_HANDLE()", WREN_NETWORK_NETWORK_SET_TRANSITION_CREATOR_HANDLE },
        { "NETWORK_CLEAR_TRANSITION_CREATOR_HANDLE()", WREN_NETWORK_NETWORK_CLEAR_TRANSITION_CREATOR_HANDLE },
        { "NETWORK_INVITE_GAMERS_TO_TRANSITION(_)", WREN_NETWORK_NETWORK_INVITE_GAMERS_TO_TRANSITION },
        { "NETWORK_SET_GAMER_INVITED_TO_TRANSITION()", WREN_NETWORK_NETWORK_SET_GAMER_INVITED_TO_TRANSITION },
        { "NETWORK_LEAVE_TRANSITION()", WREN_NETWORK_NETWORK_LEAVE_TRANSITION },
        { "NETWORK_LAUNCH_TRANSITION()", WREN_NETWORK_NETWORK_LAUNCH_TRANSITION },
        { "NETWORK_SET_DO_NOT_LAUNCH_FROM_JOIN_AS_MIGRATED_HOST(_)", WREN_NETWORK_NETWORK_SET_DO_NOT_LAUNCH_FROM_JOIN_AS_MIGRATED_HOST },
        { "NETWORK_CANCEL_TRANSITION_MATCHMAKING()", WREN_NETWORK_NETWORK_CANCEL_TRANSITION_MATCHMAKING },
        { "NETWORK_BAIL_TRANSITION(_,_,_)", WREN_NETWORK_NETWORK_BAIL_TRANSITION },
        { "NETWORK_DO_TRANSITION_TO_GAME(_,_)", WREN_NETWORK_NETWORK_DO_TRANSITION_TO_GAME },
        { "NETWORK_DO_TRANSITION_TO_NEW_GAME(_,_,_)", WREN_NETWORK_NETWORK_DO_TRANSITION_TO_NEW_GAME },
        { "NETWORK_DO_TRANSITION_TO_FREEMODE(_,_,_,_)", WREN_NETWORK_NETWORK_DO_TRANSITION_TO_FREEMODE },
        { "NETWORK_DO_TRANSITION_TO_NEW_FREEMODE(_,_,_,_,_)", WREN_NETWORK_NETWORK_DO_TRANSITION_TO_NEW_FREEMODE },
        { "NETWORK_IS_TRANSITION_TO_GAME()", WREN_NETWORK_NETWORK_IS_TRANSITION_TO_GAME },
        { "NETWORK_GET_TRANSITION_MEMBERS(_)", WREN_NETWORK_NETWORK_GET_TRANSITION_MEMBERS },
        { "NETWORK_APPLY_TRANSITION_PARAMETER(_,_)", WREN_NETWORK_NETWORK_APPLY_TRANSITION_PARAMETER },
        { "NETWORK_APPLY_TRANSITION_PARAMETER_STRING(_,_,_)", WREN_NETWORK_NETWORK_APPLY_TRANSITION_PARAMETER_STRING },
        { "NETWORK_SEND_TRANSITION_GAMER_INSTRUCTION(_,_,_,_)", WREN_NETWORK_NETWORK_SEND_TRANSITION_GAMER_INSTRUCTION },
        { "NETWORK_MARK_TRANSITION_GAMER_AS_FULLY_JOINED()", WREN_NETWORK_NETWORK_MARK_TRANSITION_GAMER_AS_FULLY_JOINED },
        { "NETWORK_IS_TRANSITION_HOST()", WREN_NETWORK_NETWORK_IS_TRANSITION_HOST },
        { "NETWORK_IS_TRANSITION_HOST_FROM_HANDLE()", WREN_NETWORK_NETWORK_IS_TRANSITION_HOST_FROM_HANDLE },
        { "NETWORK_GET_TRANSITION_HOST()", WREN_NETWORK_NETWORK_GET_TRANSITION_HOST },
        { "NETWORK_IS_IN_TRANSITION()", WREN_NETWORK_NETWORK_IS_IN_TRANSITION },
        { "NETWORK_IS_TRANSITION_STARTED()", WREN_NETWORK_NETWORK_IS_TRANSITION_STARTED },
        { "NETWORK_IS_TRANSITION_BUSY()", WREN_NETWORK_NETWORK_IS_TRANSITION_BUSY },
        { "NETWORK_IS_TRANSITION_MATCHMAKING()", WREN_NETWORK_NETWORK_IS_TRANSITION_MATCHMAKING },
        { "NETWORK_IS_TRANSITION_LEAVE_POSTPONED()", WREN_NETWORK_NETWORK_IS_TRANSITION_LEAVE_POSTPONED },
        { "NETWORK_TRANSITION_SET_IN_PROGRESS(_)", WREN_NETWORK_NETWORK_TRANSITION_SET_IN_PROGRESS },
        { "NETWORK_TRANSITION_SET_CONTENT_CREATOR(_)", WREN_NETWORK_NETWORK_TRANSITION_SET_CONTENT_CREATOR },
        { "NETWORK_TRANSITION_SET_ACTIVITY_ISLAND(_)", WREN_NETWORK_NETWORK_TRANSITION_SET_ACTIVITY_ISLAND },
        { "NETWORK_OPEN_TRANSITION_MATCHMAKING()", WREN_NETWORK_NETWORK_OPEN_TRANSITION_MATCHMAKING },
        { "NETWORK_CLOSE_TRANSITION_MATCHMAKING()", WREN_NETWORK_NETWORK_CLOSE_TRANSITION_MATCHMAKING },
        { "NETWORK_IS_TRANSITION_OPEN_TO_MATCHMAKING()", WREN_NETWORK_NETWORK_IS_TRANSITION_OPEN_TO_MATCHMAKING },
        { "NETWORK_SET_TRANSITION_VISIBILITY_LOCK(_,_)", WREN_NETWORK_NETWORK_SET_TRANSITION_VISIBILITY_LOCK },
        { "NETWORK_IS_TRANSITION_VISIBILITY_LOCKED()", WREN_NETWORK_NETWORK_IS_TRANSITION_VISIBILITY_LOCKED },
        { "NETWORK_SET_TRANSITION_ACTIVITY_ID(_)", WREN_NETWORK_NETWORK_SET_TRANSITION_ACTIVITY_ID },
        { "NETWORK_CHANGE_TRANSITION_SLOTS(_,_)", WREN_NETWORK_NETWORK_CHANGE_TRANSITION_SLOTS },
        { "NETWORK_TRANSITION_BLOCK_JOIN_REQUESTS(_)", WREN_NETWORK_NETWORK_TRANSITION_BLOCK_JOIN_REQUESTS },
        { "NETWORK_HAS_PLAYER_STARTED_TRANSITION(_)", WREN_NETWORK_NETWORK_HAS_PLAYER_STARTED_TRANSITION },
        { "NETWORK_ARE_TRANSITION_DETAILS_VALID(_)", WREN_NETWORK_NETWORK_ARE_TRANSITION_DETAILS_VALID },
        { "NETWORK_JOIN_TRANSITION(_)", WREN_NETWORK_NETWORK_JOIN_TRANSITION },
        { "NETWORK_HAS_INVITED_GAMER_TO_TRANSITION()", WREN_NETWORK_NETWORK_HAS_INVITED_GAMER_TO_TRANSITION },
        { "NETWORK_HAS_TRANSITION_INVITE_BEEN_ACKED()", WREN_NETWORK_NETWORK_HAS_TRANSITION_INVITE_BEEN_ACKED },
        { "NETWORK_IS_ACTIVITY_SESSION()", WREN_NETWORK_NETWORK_IS_ACTIVITY_SESSION },
        { "NETWORK_DISABLE_REALTIME_MULTIPLAYER()", WREN_NETWORK_NETWORK_DISABLE_REALTIME_MULTIPLAYER },
        { "NETWORK_SET_PRESENCE_SESSION_INVITES_BLOCKED(_)", WREN_NETWORK_NETWORK_SET_PRESENCE_SESSION_INVITES_BLOCKED },
        { "NETWORK_SEND_INVITE_VIA_PRESENCE(_,_,_)", WREN_NETWORK_NETWORK_SEND_INVITE_VIA_PRESENCE },
        { "NETWORK_SEND_TRANSITION_INVITE_VIA_PRESENCE(_,_,_)", WREN_NETWORK_NETWORK_SEND_TRANSITION_INVITE_VIA_PRESENCE },
        { "NETWORK_SEND_IMPORTANT_TRANSITION_INVITE_VIA_PRESENCE(_,_,_)", WREN_NETWORK_NETWORK_SEND_IMPORTANT_TRANSITION_INVITE_VIA_PRESENCE },
        { "NETWORK_GET_PRESENCE_INVITE_INDEX_BY_ID(_)", WREN_NETWORK_NETWORK_GET_PRESENCE_INVITE_INDEX_BY_ID },
        { "NETWORK_GET_NUM_PRESENCE_INVITES()", WREN_NETWORK_NETWORK_GET_NUM_PRESENCE_INVITES },
        { "NETWORK_ACCEPT_PRESENCE_INVITE(_)", WREN_NETWORK_NETWORK_ACCEPT_PRESENCE_INVITE },
        { "NETWORK_REMOVE_PRESENCE_INVITE(_)", WREN_NETWORK_NETWORK_REMOVE_PRESENCE_INVITE },
        { "NETWORK_GET_PRESENCE_INVITE_ID(_)", WREN_NETWORK_NETWORK_GET_PRESENCE_INVITE_ID },
        { "NETWORK_GET_PRESENCE_INVITE_INVITER(_)", WREN_NETWORK_NETWORK_GET_PRESENCE_INVITE_INVITER },
        { "NETWORK_GET_PRESENCE_INVITE_HANDLE(_)", WREN_NETWORK_NETWORK_GET_PRESENCE_INVITE_HANDLE },
        { "NETWORK_GET_PRESENCE_INVITE_SESSION_ID(_)", WREN_NETWORK_NETWORK_GET_PRESENCE_INVITE_SESSION_ID },
        { "NETWORK_GET_PRESENCE_INVITE_CONTENT_ID(_)", WREN_NETWORK_NETWORK_GET_PRESENCE_INVITE_CONTENT_ID },
        { "NETWORK_GET_PRESENCE_INVITE_PLAYLIST_LENGTH(_)", WREN_NETWORK_NETWORK_GET_PRESENCE_INVITE_PLAYLIST_LENGTH },
        { "NETWORK_GET_PRESENCE_INVITE_PLAYLIST_CURRENT(_)", WREN_NETWORK_NETWORK_GET_PRESENCE_INVITE_PLAYLIST_CURRENT },
        { "NETWORK_GET_PRESENCE_INVITE_FROM_ADMIN(_)", WREN_NETWORK_NETWORK_GET_PRESENCE_INVITE_FROM_ADMIN },
        { "NETWORK_GET_PRESENCE_INVITE_IS_TOURNAMENT(_)", WREN_NETWORK_NETWORK_GET_PRESENCE_INVITE_IS_TOURNAMENT },
        { "NETWORK_HAS_FOLLOW_INVITE()", WREN_NETWORK_NETWORK_HAS_FOLLOW_INVITE },
        { "NETWORK_ACTION_FOLLOW_INVITE()", WREN_NETWORK_NETWORK_ACTION_FOLLOW_INVITE },
        { "NETWORK_CLEAR_FOLLOW_INVITE()", WREN_NETWORK_NETWORK_CLEAR_FOLLOW_INVITE },
        { "NETWORK_REMOVE_AND_CANCEL_ALL_INVITES()", WREN_NETWORK_NETWORK_REMOVE_AND_CANCEL_ALL_INVITES },
        { "NETWORK_REMOVE_TRANSITION_INVITE()", WREN_NETWORK_NETWORK_REMOVE_TRANSITION_INVITE },
        { "NETWORK_REMOVE_ALL_TRANSITION_INVITE()", WREN_NETWORK_NETWORK_REMOVE_ALL_TRANSITION_INVITE },
        { "NETWORK_REMOVE_AND_CANCEL_ALL_TRANSITION_INVITES()", WREN_NETWORK_NETWORK_REMOVE_AND_CANCEL_ALL_TRANSITION_INVITES },
        { "NETWORK_INVITE_GAMERS(_)", WREN_NETWORK_NETWORK_INVITE_GAMERS },
        { "NETWORK_HAS_INVITED_GAMER()", WREN_NETWORK_NETWORK_HAS_INVITED_GAMER },
        { "NETWORK_HAS_MADE_INVITE_DECISION()", WREN_NETWORK_NETWORK_HAS_MADE_INVITE_DECISION },
        { "NETWORK_GET_INVITE_REPLY_STATUS(_)", WREN_NETWORK_NETWORK_GET_INVITE_REPLY_STATUS },
        { "NETWORK_GET_CURRENTLY_SELECTED_GAMER_HANDLE_FROM_INVITE_MENU()", WREN_NETWORK_NETWORK_GET_CURRENTLY_SELECTED_GAMER_HANDLE_FROM_INVITE_MENU },
        { "NETWORK_SET_CURRENTLY_SELECTED_GAMER_HANDLE_FROM_INVITE_MENU()", WREN_NETWORK_NETWORK_SET_CURRENTLY_SELECTED_GAMER_HANDLE_FROM_INVITE_MENU },
        { "NETWORK_SET_INVITE_ON_CALL_FOR_INVITE_MENU()", WREN_NETWORK_NETWORK_SET_INVITE_ON_CALL_FOR_INVITE_MENU },
        { "NETWORK_CHECK_DATA_MANAGER_SUCCEEDED_FOR_HANDLE(_)", WREN_NETWORK_NETWORK_CHECK_DATA_MANAGER_SUCCEEDED_FOR_HANDLE },
        { "NETWORK_CHECK_DATA_MANAGER_FOR_HANDLE(_,_)", WREN_NETWORK_NETWORK_CHECK_DATA_MANAGER_FOR_HANDLE },
        { "NETWORK_SET_INVITE_FAILED_MESSAGE_FOR_INVITE_MENU()", WREN_NETWORK_NETWORK_SET_INVITE_FAILED_MESSAGE_FOR_INVITE_MENU },
        { "FILLOUT_PM_PLAYER_LIST(_,_)", WREN_NETWORK_FILLOUT_PM_PLAYER_LIST },
        { "FILLOUT_PM_PLAYER_LIST_WITH_NAMES(_,_)", WREN_NETWORK_FILLOUT_PM_PLAYER_LIST_WITH_NAMES },
        { "REFRESH_PLAYER_LIST_STATS(_)", WREN_NETWORK_REFRESH_PLAYER_LIST_STATS },
        { "NETWORK_SET_CURRENT_DATA_MANAGER_HANDLE()", WREN_NETWORK_NETWORK_SET_CURRENT_DATA_MANAGER_HANDLE },
        { "NETWORK_IS_IN_PLATFORM_PARTY()", WREN_NETWORK_NETWORK_IS_IN_PLATFORM_PARTY },
        { "NETWORK_GET_PLATFORM_PARTY_MEMBER_COUNT()", WREN_NETWORK_NETWORK_GET_PLATFORM_PARTY_MEMBER_COUNT },
        { "NETWORK_GET_PLATFORM_PARTY_MEMBERS(_)", WREN_NETWORK_NETWORK_GET_PLATFORM_PARTY_MEMBERS },
        { "NETWORK_IS_IN_PLATFORM_PARTY_CHAT()", WREN_NETWORK_NETWORK_IS_IN_PLATFORM_PARTY_CHAT },
        { "NETWORK_IS_CHATTING_IN_PLATFORM_PARTY()", WREN_NETWORK_NETWORK_IS_CHATTING_IN_PLATFORM_PARTY },
        { "NETWORK_CAN_QUEUE_FOR_PREVIOUS_SESSION_JOIN()", WREN_NETWORK_NETWORK_CAN_QUEUE_FOR_PREVIOUS_SESSION_JOIN },
        { "NETWORK_IS_QUEUING_FOR_SESSION_JOIN()", WREN_NETWORK_NETWORK_IS_QUEUING_FOR_SESSION_JOIN },
        { "NETWORK_CLEAR_QUEUED_JOIN_REQUEST()", WREN_NETWORK_NETWORK_CLEAR_QUEUED_JOIN_REQUEST },
        { "NETWORK_SEND_QUEUED_JOIN_REQUEST()", WREN_NETWORK_NETWORK_SEND_QUEUED_JOIN_REQUEST },
        { "NETWORK_REMOVE_ALL_QUEUED_JOIN_REQUESTS()", WREN_NETWORK_NETWORK_REMOVE_ALL_QUEUED_JOIN_REQUESTS },
        { "NETWORK_SEED_RANDOM_NUMBER_GENERATOR(_)", WREN_NETWORK_NETWORK_SEED_RANDOM_NUMBER_GENERATOR },
        { "NETWORK_GET_RANDOM_INT()", WREN_NETWORK_NETWORK_GET_RANDOM_INT },
        { "NETWORK_GET_RANDOM_INT_RANGED(_,_)", WREN_NETWORK_NETWORK_GET_RANDOM_INT_RANGED },
        { "NETWORK_PLAYER_IS_CHEATER()", WREN_NETWORK_NETWORK_PLAYER_IS_CHEATER },
        { "NETWORK_PLAYER_GET_CHEATER_REASON()", WREN_NETWORK_NETWORK_PLAYER_GET_CHEATER_REASON },
        { "NETWORK_PLAYER_IS_BADSPORT()", WREN_NETWORK_NETWORK_PLAYER_IS_BADSPORT },
        { "TRIGGER_PLAYER_CRC_HACKER_CHECK(_,_,_)", WREN_NETWORK_TRIGGER_PLAYER_CRC_HACKER_CHECK },
        { "TRIGGER_TUNING_CRC_HACKER_CHECK()", WREN_NETWORK_TRIGGER_TUNING_CRC_HACKER_CHECK },
        { "TRIGGER_FILE_CRC_HACKER_CHECK()", WREN_NETWORK_TRIGGER_FILE_CRC_HACKER_CHECK },
        { "REMOTE_CHEATER_PLAYER_DETECTED(_,_,_)", WREN_NETWORK_REMOTE_CHEATER_PLAYER_DETECTED },
        { "BAD_SPORT_PLAYER_LEFT_DETECTED(_,_)", WREN_NETWORK_BAD_SPORT_PLAYER_LEFT_DETECTED },
        { "NETWORK_ADD_INVALID_OBJECT_MODEL(_)", WREN_NETWORK_NETWORK_ADD_INVALID_OBJECT_MODEL },
        { "NETWORK_REMOVE_INVALID_OBJECT_MODEL(_)", WREN_NETWORK_NETWORK_REMOVE_INVALID_OBJECT_MODEL },
        { "NETWORK_CLEAR_INVALID_OBJECT_MODELS()", WREN_NETWORK_NETWORK_CLEAR_INVALID_OBJECT_MODELS },
        { "NETWORK_APPLY_PED_SCAR_DATA(_,_)", WREN_NETWORK_NETWORK_APPLY_PED_SCAR_DATA },
        { "NETWORK_SET_THIS_SCRIPT_IS_NETWORK_SCRIPT(_,_,_)", WREN_NETWORK_NETWORK_SET_THIS_SCRIPT_IS_NETWORK_SCRIPT },
        { "NETWORK_TRY_TO_SET_THIS_SCRIPT_IS_NETWORK_SCRIPT(_,_,_)", WREN_NETWORK_NETWORK_TRY_TO_SET_THIS_SCRIPT_IS_NETWORK_SCRIPT },
        { "NETWORK_GET_THIS_SCRIPT_IS_NETWORK_SCRIPT()", WREN_NETWORK_NETWORK_GET_THIS_SCRIPT_IS_NETWORK_SCRIPT },
        { "NETWORK_GET_MAX_NUM_PARTICIPANTS()", WREN_NETWORK_NETWORK_GET_MAX_NUM_PARTICIPANTS },
        { "NETWORK_GET_NUM_PARTICIPANTS()", WREN_NETWORK_NETWORK_GET_NUM_PARTICIPANTS },
        { "NETWORK_GET_SCRIPT_STATUS()", WREN_NETWORK_NETWORK_GET_SCRIPT_STATUS },
        { "NETWORK_REGISTER_HOST_BROADCAST_VARIABLES(_,_)", WREN_NETWORK_NETWORK_REGISTER_HOST_BROADCAST_VARIABLES },
        { "NETWORK_REGISTER_PLAYER_BROADCAST_VARIABLES(_,_)", WREN_NETWORK_NETWORK_REGISTER_PLAYER_BROADCAST_VARIABLES },
        { "NETWORK_REGISTER_HIGH_FREQUENCY_HOST_BROADCAST_VARIABLES(_,_,_)", WREN_NETWORK_NETWORK_REGISTER_HIGH_FREQUENCY_HOST_BROADCAST_VARIABLES },
        { "NETWORK_REGISTER_HIGH_FREQUENCY_PLAYER_BROADCAST_VARIABLES(_,_,_)", WREN_NETWORK_NETWORK_REGISTER_HIGH_FREQUENCY_PLAYER_BROADCAST_VARIABLES },
        { "NETWORK_FINISH_BROADCASTING_DATA()", WREN_NETWORK_NETWORK_FINISH_BROADCASTING_DATA },
        { "NETWORK_HAS_RECEIVED_HOST_BROADCAST_DATA()", WREN_NETWORK_NETWORK_HAS_RECEIVED_HOST_BROADCAST_DATA },
        { "NETWORK_GET_PLAYER_INDEX(_)", WREN_NETWORK_NETWORK_GET_PLAYER_INDEX },
        { "NETWORK_GET_PARTICIPANT_INDEX(_)", WREN_NETWORK_NETWORK_GET_PARTICIPANT_INDEX },
        { "NETWORK_GET_PLAYER_INDEX_FROM_PED(_)", WREN_NETWORK_NETWORK_GET_PLAYER_INDEX_FROM_PED },
        { "NETWORK_GET_NUM_CONNECTED_PLAYERS()", WREN_NETWORK_NETWORK_GET_NUM_CONNECTED_PLAYERS },
        { "NETWORK_IS_PLAYER_CONNECTED(_)", WREN_NETWORK_NETWORK_IS_PLAYER_CONNECTED },
        { "NETWORK_GET_TOTAL_NUM_PLAYERS()", WREN_NETWORK_NETWORK_GET_TOTAL_NUM_PLAYERS },
        { "NETWORK_IS_PARTICIPANT_ACTIVE(_)", WREN_NETWORK_NETWORK_IS_PARTICIPANT_ACTIVE },
        { "NETWORK_IS_PLAYER_ACTIVE(_)", WREN_NETWORK_NETWORK_IS_PLAYER_ACTIVE },
        { "NETWORK_IS_PLAYER_A_PARTICIPANT(_)", WREN_NETWORK_NETWORK_IS_PLAYER_A_PARTICIPANT },
        { "NETWORK_IS_HOST_OF_THIS_SCRIPT()", WREN_NETWORK_NETWORK_IS_HOST_OF_THIS_SCRIPT },
        { "NETWORK_GET_HOST_OF_THIS_SCRIPT()", WREN_NETWORK_NETWORK_GET_HOST_OF_THIS_SCRIPT },
        { "NETWORK_GET_HOST_OF_SCRIPT(_,_,_)", WREN_NETWORK_NETWORK_GET_HOST_OF_SCRIPT },
        { "NETWORK_SET_MISSION_FINISHED()", WREN_NETWORK_NETWORK_SET_MISSION_FINISHED },
        { "NETWORK_IS_SCRIPT_ACTIVE(_,_,_,_)", WREN_NETWORK_NETWORK_IS_SCRIPT_ACTIVE },
        { "NETWORK_IS_SCRIPT_ACTIVE_BY_HASH(_,_,_,_)", WREN_NETWORK_NETWORK_IS_SCRIPT_ACTIVE_BY_HASH },
        { "NETWORK_IS_THREAD_A_NETWORK_SCRIPT(_)", WREN_NETWORK_NETWORK_IS_THREAD_A_NETWORK_SCRIPT },
        { "NETWORK_GET_NUM_SCRIPT_PARTICIPANTS(_,_,_)", WREN_NETWORK_NETWORK_GET_NUM_SCRIPT_PARTICIPANTS },
        { "NETWORK_GET_INSTANCE_ID_OF_THIS_SCRIPT()", WREN_NETWORK_NETWORK_GET_INSTANCE_ID_OF_THIS_SCRIPT },
        { "NETWORK_GET_POSITION_HASH_OF_THIS_SCRIPT()", WREN_NETWORK_NETWORK_GET_POSITION_HASH_OF_THIS_SCRIPT },
        { "NETWORK_IS_PLAYER_A_PARTICIPANT_ON_SCRIPT(_,_,_)", WREN_NETWORK_NETWORK_IS_PLAYER_A_PARTICIPANT_ON_SCRIPT },
        { "NETWORK_PREVENT_SCRIPT_HOST_MIGRATION()", WREN_NETWORK_NETWORK_PREVENT_SCRIPT_HOST_MIGRATION },
        { "NETWORK_REQUEST_TO_BE_HOST_OF_THIS_SCRIPT()", WREN_NETWORK_NETWORK_REQUEST_TO_BE_HOST_OF_THIS_SCRIPT },
        { "PARTICIPANT_ID()", WREN_NETWORK_PARTICIPANT_ID },
        { "PARTICIPANT_ID_TO_INT()", WREN_NETWORK_PARTICIPANT_ID_TO_INT },
        { "NETWORK_GET_KILLER_OF_PLAYER(_)", WREN_NETWORK_NETWORK_GET_KILLER_OF_PLAYER },
        { "NETWORK_GET_DESTROYER_OF_NETWORK_ID(_)", WREN_NETWORK_NETWORK_GET_DESTROYER_OF_NETWORK_ID },
        { "NETWORK_GET_DESTROYER_OF_ENTITY(_)", WREN_NETWORK_NETWORK_GET_DESTROYER_OF_ENTITY },
        { "NETWORK_GET_ASSISTED_KILL_OF_ENTITY(_,_)", WREN_NETWORK_NETWORK_GET_ASSISTED_KILL_OF_ENTITY },
        { "NETWORK_GET_ASSISTED_DAMAGE_OF_ENTITY(_,_)", WREN_NETWORK_NETWORK_GET_ASSISTED_DAMAGE_OF_ENTITY },
        { "NETWORK_GET_ENTITY_KILLER_OF_PLAYER(_)", WREN_NETWORK_NETWORK_GET_ENTITY_KILLER_OF_PLAYER },
        { "NETWORK_SET_CURRENT_PUBLIC_CONTENT_ID(_)", WREN_NETWORK_NETWORK_SET_CURRENT_PUBLIC_CONTENT_ID },
        { "NETWORK_SET_CURRENT_SPAWN_LOCATION_OPTION(_)", WREN_NETWORK_NETWORK_SET_CURRENT_SPAWN_LOCATION_OPTION },
        { "NETWORK_SET_VEHICLE_DRIVEN_IN_TEST_DRIVE(_)", WREN_NETWORK_NETWORK_SET_VEHICLE_DRIVEN_IN_TEST_DRIVE },
        { "NETWORK_RESURRECT_LOCAL_PLAYER(_,_,_,_,_,_,_,_,_)", WREN_NETWORK_NETWORK_RESURRECT_LOCAL_PLAYER },
        { "NETWORK_SET_LOCAL_PLAYER_INVINCIBLE_TIME(_)", WREN_NETWORK_NETWORK_SET_LOCAL_PLAYER_INVINCIBLE_TIME },
        { "NETWORK_IS_LOCAL_PLAYER_INVINCIBLE()", WREN_NETWORK_NETWORK_IS_LOCAL_PLAYER_INVINCIBLE },
        { "NETWORK_DISABLE_INVINCIBLE_FLASHING(_,_)", WREN_NETWORK_NETWORK_DISABLE_INVINCIBLE_FLASHING },
        { "NETWORK_PATCH_POST_CUTSCENE_HS4F_TUN_ENT(_)", WREN_NETWORK_NETWORK_PATCH_POST_CUTSCENE_HS4F_TUN_ENT },
        { "NETWORK_SET_LOCAL_PLAYER_SYNC_LOOK_AT(_)", WREN_NETWORK_NETWORK_SET_LOCAL_PLAYER_SYNC_LOOK_AT },
        { "NETWORK_HAS_ENTITY_BEEN_REGISTERED_WITH_THIS_THREAD(_)", WREN_NETWORK_NETWORK_HAS_ENTITY_BEEN_REGISTERED_WITH_THIS_THREAD },
        { "NETWORK_GET_NETWORK_ID_FROM_ENTITY(_)", WREN_NETWORK_NETWORK_GET_NETWORK_ID_FROM_ENTITY },
        { "NETWORK_GET_ENTITY_FROM_NETWORK_ID(_)", WREN_NETWORK_NETWORK_GET_ENTITY_FROM_NETWORK_ID },
        { "NETWORK_GET_ENTITY_IS_NETWORKED(_)", WREN_NETWORK_NETWORK_GET_ENTITY_IS_NETWORKED },
        { "NETWORK_GET_ENTITY_IS_LOCAL(_)", WREN_NETWORK_NETWORK_GET_ENTITY_IS_LOCAL },
        { "NETWORK_REGISTER_ENTITY_AS_NETWORKED(_)", WREN_NETWORK_NETWORK_REGISTER_ENTITY_AS_NETWORKED },
        { "NETWORK_UNREGISTER_NETWORKED_ENTITY(_)", WREN_NETWORK_NETWORK_UNREGISTER_NETWORKED_ENTITY },
        { "NETWORK_DOES_NETWORK_ID_EXIST(_)", WREN_NETWORK_NETWORK_DOES_NETWORK_ID_EXIST },
        { "NETWORK_DOES_ENTITY_EXIST_WITH_NETWORK_ID(_)", WREN_NETWORK_NETWORK_DOES_ENTITY_EXIST_WITH_NETWORK_ID },
        { "NETWORK_REQUEST_CONTROL_OF_NETWORK_ID(_)", WREN_NETWORK_NETWORK_REQUEST_CONTROL_OF_NETWORK_ID },
        { "NETWORK_HAS_CONTROL_OF_NETWORK_ID(_)", WREN_NETWORK_NETWORK_HAS_CONTROL_OF_NETWORK_ID },
        { "NETWORK_IS_NETWORK_ID_REMOTELY_CONTROLLED(_)", WREN_NETWORK_NETWORK_IS_NETWORK_ID_REMOTELY_CONTROLLED },
        { "NETWORK_REQUEST_CONTROL_OF_ENTITY(_)", WREN_NETWORK_NETWORK_REQUEST_CONTROL_OF_ENTITY },
        { "NETWORK_REQUEST_CONTROL_OF_DOOR(_)", WREN_NETWORK_NETWORK_REQUEST_CONTROL_OF_DOOR },
        { "NETWORK_HAS_CONTROL_OF_ENTITY(_)", WREN_NETWORK_NETWORK_HAS_CONTROL_OF_ENTITY },
        { "NETWORK_HAS_CONTROL_OF_PICKUP(_)", WREN_NETWORK_NETWORK_HAS_CONTROL_OF_PICKUP },
        { "NETWORK_HAS_CONTROL_OF_DOOR(_)", WREN_NETWORK_NETWORK_HAS_CONTROL_OF_DOOR },
        { "NETWORK_IS_DOOR_NETWORKED(_)", WREN_NETWORK_NETWORK_IS_DOOR_NETWORKED },
        { "VEH_TO_NET(_)", WREN_NETWORK_VEH_TO_NET },
        { "PED_TO_NET(_)", WREN_NETWORK_PED_TO_NET },
        { "OBJ_TO_NET(_)", WREN_NETWORK_OBJ_TO_NET },
        { "NET_TO_VEH(_)", WREN_NETWORK_NET_TO_VEH },
        { "NET_TO_PED(_)", WREN_NETWORK_NET_TO_PED },
        { "NET_TO_OBJ(_)", WREN_NETWORK_NET_TO_OBJ },
        { "NET_TO_ENT(_)", WREN_NETWORK_NET_TO_ENT },
        { "NETWORK_GET_LOCAL_HANDLE(_)", WREN_NETWORK_NETWORK_GET_LOCAL_HANDLE },
        { "NETWORK_HANDLE_FROM_USER_ID(_,_)", WREN_NETWORK_NETWORK_HANDLE_FROM_USER_ID },
        { "NETWORK_HANDLE_FROM_MEMBER_ID(_,_)", WREN_NETWORK_NETWORK_HANDLE_FROM_MEMBER_ID },
        { "NETWORK_HANDLE_FROM_PLAYER(_,_)", WREN_NETWORK_NETWORK_HANDLE_FROM_PLAYER },
        { "NETWORK_HASH_FROM_PLAYER_HANDLE(_)", WREN_NETWORK_NETWORK_HASH_FROM_PLAYER_HANDLE },
        { "NETWORK_HASH_FROM_GAMER_HANDLE()", WREN_NETWORK_NETWORK_HASH_FROM_GAMER_HANDLE },
        { "NETWORK_HANDLE_FROM_FRIEND(_,_)", WREN_NETWORK_NETWORK_HANDLE_FROM_FRIEND },
        { "NETWORK_GAMERTAG_FROM_HANDLE_START()", WREN_NETWORK_NETWORK_GAMERTAG_FROM_HANDLE_START },
        { "NETWORK_GAMERTAG_FROM_HANDLE_PENDING()", WREN_NETWORK_NETWORK_GAMERTAG_FROM_HANDLE_PENDING },
        { "NETWORK_GAMERTAG_FROM_HANDLE_SUCCEEDED()", WREN_NETWORK_NETWORK_GAMERTAG_FROM_HANDLE_SUCCEEDED },
        { "NETWORK_GET_GAMERTAG_FROM_HANDLE()", WREN_NETWORK_NETWORK_GET_GAMERTAG_FROM_HANDLE },
        { "NETWORK_DISPLAYNAMES_FROM_HANDLES_START(_)", WREN_NETWORK_NETWORK_DISPLAYNAMES_FROM_HANDLES_START },
        { "NETWORK_GET_DISPLAYNAMES_FROM_HANDLES(_,_,_)", WREN_NETWORK_NETWORK_GET_DISPLAYNAMES_FROM_HANDLES },
        { "NETWORK_ARE_HANDLES_THE_SAME()", WREN_NETWORK_NETWORK_ARE_HANDLES_THE_SAME },
        { "NETWORK_IS_HANDLE_VALID(_)", WREN_NETWORK_NETWORK_IS_HANDLE_VALID },
        { "NETWORK_GET_PLAYER_FROM_GAMER_HANDLE()", WREN_NETWORK_NETWORK_GET_PLAYER_FROM_GAMER_HANDLE },
        { "NETWORK_MEMBER_ID_FROM_GAMER_HANDLE()", WREN_NETWORK_NETWORK_MEMBER_ID_FROM_GAMER_HANDLE },
        { "NETWORK_IS_GAMER_IN_MY_SESSION()", WREN_NETWORK_NETWORK_IS_GAMER_IN_MY_SESSION },
        { "NETWORK_SHOW_PROFILE_UI()", WREN_NETWORK_NETWORK_SHOW_PROFILE_UI },
        { "NETWORK_PLAYER_GET_NAME(_)", WREN_NETWORK_NETWORK_PLAYER_GET_NAME },
        { "NETWORK_PLAYER_GET_USERID(_)", WREN_NETWORK_NETWORK_PLAYER_GET_USERID },
        { "NETWORK_PLAYER_IS_ROCKSTAR_DEV(_)", WREN_NETWORK_NETWORK_PLAYER_IS_ROCKSTAR_DEV },
        { "NETWORK_PLAYER_INDEX_IS_CHEATER(_)", WREN_NETWORK_NETWORK_PLAYER_INDEX_IS_CHEATER },
        { "NETWORK_ENTITY_GET_OBJECT_ID(_)", WREN_NETWORK_NETWORK_ENTITY_GET_OBJECT_ID },
        { "NETWORK_GET_ENTITY_FROM_OBJECT_ID(_)", WREN_NETWORK_NETWORK_GET_ENTITY_FROM_OBJECT_ID },
        { "NETWORK_IS_INACTIVE_PROFILE()", WREN_NETWORK_NETWORK_IS_INACTIVE_PROFILE },
        { "NETWORK_GET_MAX_FRIENDS()", WREN_NETWORK_NETWORK_GET_MAX_FRIENDS },
        { "NETWORK_GET_FRIEND_COUNT()", WREN_NETWORK_NETWORK_GET_FRIEND_COUNT },
        { "NETWORK_GET_FRIEND_NAME(_)", WREN_NETWORK_NETWORK_GET_FRIEND_NAME },
        { "NETWORK_GET_FRIEND_DISPLAY_NAME(_)", WREN_NETWORK_NETWORK_GET_FRIEND_DISPLAY_NAME },
        { "NETWORK_IS_FRIEND_ONLINE(_)", WREN_NETWORK_NETWORK_IS_FRIEND_ONLINE },
        { "NETWORK_IS_FRIEND_HANDLE_ONLINE()", WREN_NETWORK_NETWORK_IS_FRIEND_HANDLE_ONLINE },
        { "NETWORK_IS_FRIEND_IN_SAME_TITLE(_)", WREN_NETWORK_NETWORK_IS_FRIEND_IN_SAME_TITLE },
        { "NETWORK_IS_FRIEND_IN_MULTIPLAYER(_)", WREN_NETWORK_NETWORK_IS_FRIEND_IN_MULTIPLAYER },
        { "NETWORK_IS_FRIEND()", WREN_NETWORK_NETWORK_IS_FRIEND },
        { "NETWORK_IS_PENDING_FRIEND(_)", WREN_NETWORK_NETWORK_IS_PENDING_FRIEND },
        { "NETWORK_IS_ADDING_FRIEND()", WREN_NETWORK_NETWORK_IS_ADDING_FRIEND },
        { "NETWORK_ADD_FRIEND(_)", WREN_NETWORK_NETWORK_ADD_FRIEND },
        { "NETWORK_IS_FRIEND_INDEX_ONLINE(_)", WREN_NETWORK_NETWORK_IS_FRIEND_INDEX_ONLINE },
        { "NETWORK_SET_PLAYER_IS_PASSIVE(_)", WREN_NETWORK_NETWORK_SET_PLAYER_IS_PASSIVE },
        { "NETWORK_GET_PLAYER_OWNS_WAYPOINT(_)", WREN_NETWORK_NETWORK_GET_PLAYER_OWNS_WAYPOINT },
        { "NETWORK_CAN_SET_WAYPOINT()", WREN_NETWORK_NETWORK_CAN_SET_WAYPOINT },
        { "NETWORK_IGNORE_REMOTE_WAYPOINTS()", WREN_NETWORK_NETWORK_IGNORE_REMOTE_WAYPOINTS },
        { "NETWORK_SET_SCRIPT_AUTOMUTED(_)", WREN_NETWORK_NETWORK_SET_SCRIPT_AUTOMUTED },
        { "NETWORK_HAS_AUTOMUTE_OVERRIDE()", WREN_NETWORK_NETWORK_HAS_AUTOMUTE_OVERRIDE },
        { "NETWORK_HAS_HEADSET()", WREN_NETWORK_NETWORK_HAS_HEADSET },
        { "NETWORK_SET_LOOK_AT_TALKERS(_)", WREN_NETWORK_NETWORK_SET_LOOK_AT_TALKERS },
        { "NETWORK_IS_PUSH_TO_TALK_ACTIVE()", WREN_NETWORK_NETWORK_IS_PUSH_TO_TALK_ACTIVE },
        { "NETWORK_GAMER_HAS_HEADSET()", WREN_NETWORK_NETWORK_GAMER_HAS_HEADSET },
        { "NETWORK_IS_GAMER_TALKING()", WREN_NETWORK_NETWORK_IS_GAMER_TALKING },
        { "NETWORK_PERMISSIONS_HAS_GAMER_RECORD()", WREN_NETWORK_NETWORK_PERMISSIONS_HAS_GAMER_RECORD },
        { "NETWORK_CAN_COMMUNICATE_WITH_GAMER()", WREN_NETWORK_NETWORK_CAN_COMMUNICATE_WITH_GAMER },
        { "NETWORK_CAN_TEXT_CHAT_WITH_GAMER()", WREN_NETWORK_NETWORK_CAN_TEXT_CHAT_WITH_GAMER },
        { "NETWORK_IS_GAMER_MUTED_BY_ME()", WREN_NETWORK_NETWORK_IS_GAMER_MUTED_BY_ME },
        { "NETWORK_AM_I_MUTED_BY_GAMER()", WREN_NETWORK_NETWORK_AM_I_MUTED_BY_GAMER },
        { "NETWORK_IS_GAMER_BLOCKED_BY_ME()", WREN_NETWORK_NETWORK_IS_GAMER_BLOCKED_BY_ME },
        { "NETWORK_AM_I_BLOCKED_BY_GAMER()", WREN_NETWORK_NETWORK_AM_I_BLOCKED_BY_GAMER },
        { "NETWORK_CAN_VIEW_GAMER_USER_CONTENT()", WREN_NETWORK_NETWORK_CAN_VIEW_GAMER_USER_CONTENT },
        { "NETWORK_HAS_VIEW_GAMER_USER_CONTENT_RESULT()", WREN_NETWORK_NETWORK_HAS_VIEW_GAMER_USER_CONTENT_RESULT },
        { "NETWORK_CAN_PLAY_MULTIPLAYER_WITH_GAMER()", WREN_NETWORK_NETWORK_CAN_PLAY_MULTIPLAYER_WITH_GAMER },
        { "NETWORK_CAN_GAMER_PLAY_MULTIPLAYER_WITH_ME()", WREN_NETWORK_NETWORK_CAN_GAMER_PLAY_MULTIPLAYER_WITH_ME },
        { "NETWORK_CAN_SEND_LOCAL_INVITE()", WREN_NETWORK_NETWORK_CAN_SEND_LOCAL_INVITE },
        { "NETWORK_CAN_RECEIVE_LOCAL_INVITE()", WREN_NETWORK_NETWORK_CAN_RECEIVE_LOCAL_INVITE },
        { "NETWORK_IS_PLAYER_TALKING(_)", WREN_NETWORK_NETWORK_IS_PLAYER_TALKING },
        { "NETWORK_PLAYER_HAS_HEADSET(_)", WREN_NETWORK_NETWORK_PLAYER_HAS_HEADSET },
        { "NETWORK_IS_PLAYER_MUTED_BY_ME(_)", WREN_NETWORK_NETWORK_IS_PLAYER_MUTED_BY_ME },
        { "NETWORK_AM_I_MUTED_BY_PLAYER(_)", WREN_NETWORK_NETWORK_AM_I_MUTED_BY_PLAYER },
        { "NETWORK_IS_PLAYER_BLOCKED_BY_ME(_)", WREN_NETWORK_NETWORK_IS_PLAYER_BLOCKED_BY_ME },
        { "NETWORK_AM_I_BLOCKED_BY_PLAYER(_)", WREN_NETWORK_NETWORK_AM_I_BLOCKED_BY_PLAYER },
        { "NETWORK_GET_PLAYER_LOUDNESS(_)", WREN_NETWORK_NETWORK_GET_PLAYER_LOUDNESS },
        { "NETWORK_SET_TALKER_PROXIMITY(_)", WREN_NETWORK_NETWORK_SET_TALKER_PROXIMITY },
        { "NETWORK_GET_TALKER_PROXIMITY()", WREN_NETWORK_NETWORK_GET_TALKER_PROXIMITY },
        { "NETWORK_SET_VOICE_ACTIVE(_)", WREN_NETWORK_NETWORK_SET_VOICE_ACTIVE },
        { "NETWORK_REMAIN_IN_GAME_CHAT(_)", WREN_NETWORK_NETWORK_REMAIN_IN_GAME_CHAT },
        { "NETWORK_OVERRIDE_TRANSITION_CHAT(_)", WREN_NETWORK_NETWORK_OVERRIDE_TRANSITION_CHAT },
        { "NETWORK_SET_TEAM_ONLY_CHAT(_)", WREN_NETWORK_NETWORK_SET_TEAM_ONLY_CHAT },
        { "NETWORK_SET_SCRIPT_CONTROLLING_TEAMS(_)", WREN_NETWORK_NETWORK_SET_SCRIPT_CONTROLLING_TEAMS },
        { "NETWORK_SET_SAME_TEAM_AS_LOCAL_PLAYER(_,_)", WREN_NETWORK_NETWORK_SET_SAME_TEAM_AS_LOCAL_PLAYER },
        { "NETWORK_OVERRIDE_TEAM_RESTRICTIONS(_,_)", WREN_NETWORK_NETWORK_OVERRIDE_TEAM_RESTRICTIONS },
        { "NETWORK_SET_OVERRIDE_SPECTATOR_MODE(_)", WREN_NETWORK_NETWORK_SET_OVERRIDE_SPECTATOR_MODE },
        { "NETWORK_SET_OVERRIDE_TUTORIAL_SESSION_CHAT(_)", WREN_NETWORK_NETWORK_SET_OVERRIDE_TUTORIAL_SESSION_CHAT },
        { "NETWORK_SET_PROXIMITY_AFFECTS_TEAM(_)", WREN_NETWORK_NETWORK_SET_PROXIMITY_AFFECTS_TEAM },
        { "NETWORK_SET_NO_SPECTATOR_CHAT(_)", WREN_NETWORK_NETWORK_SET_NO_SPECTATOR_CHAT },
        { "NETWORK_SET_IGNORE_SPECTATOR_CHAT_LIMITS_SAME_TEAM(_)", WREN_NETWORK_NETWORK_SET_IGNORE_SPECTATOR_CHAT_LIMITS_SAME_TEAM },
        { "NETWORK_OVERRIDE_CHAT_RESTRICTIONS(_,_)", WREN_NETWORK_NETWORK_OVERRIDE_CHAT_RESTRICTIONS },
        { "NETWORK_OVERRIDE_SEND_RESTRICTIONS(_,_)", WREN_NETWORK_NETWORK_OVERRIDE_SEND_RESTRICTIONS },
        { "NETWORK_OVERRIDE_SEND_RESTRICTIONS_ALL(_)", WREN_NETWORK_NETWORK_OVERRIDE_SEND_RESTRICTIONS_ALL },
        { "NETWORK_OVERRIDE_RECEIVE_RESTRICTIONS(_,_)", WREN_NETWORK_NETWORK_OVERRIDE_RECEIVE_RESTRICTIONS },
        { "NETWORK_OVERRIDE_RECEIVE_RESTRICTIONS_ALL(_)", WREN_NETWORK_NETWORK_OVERRIDE_RECEIVE_RESTRICTIONS_ALL },
        { "NETWORK_SET_VOICE_CHANNEL(_)", WREN_NETWORK_NETWORK_SET_VOICE_CHANNEL },
        { "NETWORK_CLEAR_VOICE_CHANNEL()", WREN_NETWORK_NETWORK_CLEAR_VOICE_CHANNEL },
        { "NETWORK_APPLY_VOICE_PROXIMITY_OVERRIDE(_,_,_)", WREN_NETWORK_NETWORK_APPLY_VOICE_PROXIMITY_OVERRIDE },
        { "NETWORK_CLEAR_VOICE_PROXIMITY_OVERRIDE()", WREN_NETWORK_NETWORK_CLEAR_VOICE_PROXIMITY_OVERRIDE },
        { "NETWORK_ENABLE_VOICE_BANDWIDTH_RESTRICTION(_)", WREN_NETWORK_NETWORK_ENABLE_VOICE_BANDWIDTH_RESTRICTION },
        { "NETWORK_DISABLE_VOICE_BANDWIDTH_RESTRICTION(_)", WREN_NETWORK_NETWORK_DISABLE_VOICE_BANDWIDTH_RESTRICTION },
        { "NETWORK_GET_MUTE_COUNT_FOR_PLAYER(_)", WREN_NETWORK_NETWORK_GET_MUTE_COUNT_FOR_PLAYER },
        { "NETWORK_SET_SPECTATOR_TO_NON_SPECTATOR_TEXT_CHAT(_)", WREN_NETWORK_NETWORK_SET_SPECTATOR_TO_NON_SPECTATOR_TEXT_CHAT },
        { "NETWORK_TEXT_CHAT_IS_TYPING()", WREN_NETWORK_NETWORK_TEXT_CHAT_IS_TYPING },
        { "SHUTDOWN_AND_LAUNCH_SINGLE_PLAYER_GAME()", WREN_NETWORK_SHUTDOWN_AND_LAUNCH_SINGLE_PLAYER_GAME },
        { "SHUTDOWN_AND_LOAD_MOST_RECENT_SAVE()", WREN_NETWORK_SHUTDOWN_AND_LOAD_MOST_RECENT_SAVE },
        { "NETWORK_SET_FRIENDLY_FIRE_OPTION(_)", WREN_NETWORK_NETWORK_SET_FRIENDLY_FIRE_OPTION },
        { "NETWORK_SET_RICH_PRESENCE(_,_,_,_)", WREN_NETWORK_NETWORK_SET_RICH_PRESENCE },
        { "NETWORK_SET_RICH_PRESENCE_STRING(_,_)", WREN_NETWORK_NETWORK_SET_RICH_PRESENCE_STRING },
        { "NETWORK_GET_TIMEOUT_TIME()", WREN_NETWORK_NETWORK_GET_TIMEOUT_TIME },
        { "NETWORK_LEAVE_PED_BEHIND_BEFORE_WARP(_,_,_,_,_,_)", WREN_NETWORK_NETWORK_LEAVE_PED_BEHIND_BEFORE_WARP },
        { "NETWORK_LEAVE_PED_BEHIND_BEFORE_CUTSCENE(_,_)", WREN_NETWORK_NETWORK_LEAVE_PED_BEHIND_BEFORE_CUTSCENE },
        { "REMOVE_ALL_STICKY_BOMBS_FROM_ENTITY(_,_)", WREN_NETWORK_REMOVE_ALL_STICKY_BOMBS_FROM_ENTITY },
        { "NETWORK_KEEP_ENTITY_COLLISION_DISABLED_AFTER_ANIM_SCENE(_,_)", WREN_NETWORK_NETWORK_KEEP_ENTITY_COLLISION_DISABLED_AFTER_ANIM_SCENE },
        { "NETWORK_IS_ANY_PLAYER_NEAR(_,_,_,_,_,_,_)", WREN_NETWORK_NETWORK_IS_ANY_PLAYER_NEAR },
        { "NETWORK_CLAN_SERVICE_IS_VALID()", WREN_NETWORK_NETWORK_CLAN_SERVICE_IS_VALID },
        { "NETWORK_CLAN_PLAYER_IS_ACTIVE()", WREN_NETWORK_NETWORK_CLAN_PLAYER_IS_ACTIVE },
        { "NETWORK_CLAN_PLAYER_GET_DESC(_)", WREN_NETWORK_NETWORK_CLAN_PLAYER_GET_DESC },
        { "NETWORK_CLAN_IS_ROCKSTAR_CLAN(_)", WREN_NETWORK_NETWORK_CLAN_IS_ROCKSTAR_CLAN },
        { "NETWORK_CLAN_GET_UI_FORMATTED_TAG(_)", WREN_NETWORK_NETWORK_CLAN_GET_UI_FORMATTED_TAG },
        { "NETWORK_CLAN_GET_LOCAL_MEMBERSHIPS_COUNT()", WREN_NETWORK_NETWORK_CLAN_GET_LOCAL_MEMBERSHIPS_COUNT },
        { "NETWORK_CLAN_GET_MEMBERSHIP_DESC(_)", WREN_NETWORK_NETWORK_CLAN_GET_MEMBERSHIP_DESC },
        { "NETWORK_CLAN_DOWNLOAD_MEMBERSHIP()", WREN_NETWORK_NETWORK_CLAN_DOWNLOAD_MEMBERSHIP },
        { "NETWORK_CLAN_DOWNLOAD_MEMBERSHIP_PENDING()", WREN_NETWORK_NETWORK_CLAN_DOWNLOAD_MEMBERSHIP_PENDING },
        { "NETWORK_CLAN_ANY_DOWNLOAD_MEMBERSHIP_PENDING()", WREN_NETWORK_NETWORK_CLAN_ANY_DOWNLOAD_MEMBERSHIP_PENDING },
        { "NETWORK_CLAN_REMOTE_MEMBERSHIPS_ARE_IN_CACHE()", WREN_NETWORK_NETWORK_CLAN_REMOTE_MEMBERSHIPS_ARE_IN_CACHE },
        { "NETWORK_CLAN_GET_MEMBERSHIP_COUNT()", WREN_NETWORK_NETWORK_CLAN_GET_MEMBERSHIP_COUNT },
        { "NETWORK_CLAN_GET_MEMBERSHIP_VALID(_)", WREN_NETWORK_NETWORK_CLAN_GET_MEMBERSHIP_VALID },
        { "NETWORK_CLAN_GET_MEMBERSHIP(_)", WREN_NETWORK_NETWORK_CLAN_GET_MEMBERSHIP },
        { "NETWORK_CLAN_JOIN(_)", WREN_NETWORK_NETWORK_CLAN_JOIN },
        { "NETWORK_CLAN_CREWINFO_GET_STRING_VALUE(_,_)", WREN_NETWORK_NETWORK_CLAN_CREWINFO_GET_STRING_VALUE },
        { "NETWORK_CLAN_CREWINFO_GET_CREWRANKTITLE(_,_)", WREN_NETWORK_NETWORK_CLAN_CREWINFO_GET_CREWRANKTITLE },
        { "NETWORK_CLAN_HAS_CREWINFO_METADATA_BEEN_RECEIVED()", WREN_NETWORK_NETWORK_CLAN_HAS_CREWINFO_METADATA_BEEN_RECEIVED },
        { "NETWORK_CLAN_GET_EMBLEM_TXD_NAME()", WREN_NETWORK_NETWORK_CLAN_GET_EMBLEM_TXD_NAME },
        { "NETWORK_CLAN_REQUEST_EMBLEM(_)", WREN_NETWORK_NETWORK_CLAN_REQUEST_EMBLEM },
        { "NETWORK_CLAN_IS_EMBLEM_READY(_)", WREN_NETWORK_NETWORK_CLAN_IS_EMBLEM_READY },
        { "NETWORK_CLAN_RELEASE_EMBLEM(_)", WREN_NETWORK_NETWORK_CLAN_RELEASE_EMBLEM },
        { "NETWORK_GET_PRIMARY_CLAN_DATA_CLEAR()", WREN_NETWORK_NETWORK_GET_PRIMARY_CLAN_DATA_CLEAR },
        { "NETWORK_GET_PRIMARY_CLAN_DATA_CANCEL()", WREN_NETWORK_NETWORK_GET_PRIMARY_CLAN_DATA_CANCEL },
        { "NETWORK_GET_PRIMARY_CLAN_DATA_START(_)", WREN_NETWORK_NETWORK_GET_PRIMARY_CLAN_DATA_START },
        { "NETWORK_GET_PRIMARY_CLAN_DATA_PENDING()", WREN_NETWORK_NETWORK_GET_PRIMARY_CLAN_DATA_PENDING },
        { "NETWORK_GET_PRIMARY_CLAN_DATA_SUCCESS()", WREN_NETWORK_NETWORK_GET_PRIMARY_CLAN_DATA_SUCCESS },
        { "NETWORK_GET_PRIMARY_CLAN_DATA_NEW()", WREN_NETWORK_NETWORK_GET_PRIMARY_CLAN_DATA_NEW },
        { "SET_NETWORK_ID_CAN_MIGRATE(_,_)", WREN_NETWORK_SET_NETWORK_ID_CAN_MIGRATE },
        { "SET_NETWORK_ID_EXISTS_ON_ALL_MACHINES(_,_)", WREN_NETWORK_SET_NETWORK_ID_EXISTS_ON_ALL_MACHINES },
        { "SET_NETWORK_ID_ALWAYS_EXISTS_FOR_PLAYER(_,_,_)", WREN_NETWORK_SET_NETWORK_ID_ALWAYS_EXISTS_FOR_PLAYER },
        { "SET_NETWORK_ID_CAN_BE_REASSIGNED(_,_)", WREN_NETWORK_SET_NETWORK_ID_CAN_BE_REASSIGNED },
        { "NETWORK_SET_ENTITY_CAN_BLEND(_,_)", WREN_NETWORK_NETWORK_SET_ENTITY_CAN_BLEND },
        { "NETWORK_SET_OBJECT_CAN_BLEND_WHEN_FIXED(_,_)", WREN_NETWORK_NETWORK_SET_OBJECT_CAN_BLEND_WHEN_FIXED },
        { "NETWORK_SET_ENTITY_ONLY_EXISTS_FOR_PARTICIPANTS(_,_)", WREN_NETWORK_NETWORK_SET_ENTITY_ONLY_EXISTS_FOR_PARTICIPANTS },
        { "SET_NETWORK_ID_VISIBLE_IN_CUTSCENE(_,_,_)", WREN_NETWORK_SET_NETWORK_ID_VISIBLE_IN_CUTSCENE },
        { "SET_NETWORK_ID_VISIBLE_IN_CUTSCENE_HACK(_,_,_)", WREN_NETWORK_SET_NETWORK_ID_VISIBLE_IN_CUTSCENE_HACK },
        { "SET_NETWORK_ID_VISIBLE_IN_CUTSCENE_REMAIN_HACK(_,_)", WREN_NETWORK_SET_NETWORK_ID_VISIBLE_IN_CUTSCENE_REMAIN_HACK },
        { "SET_NETWORK_CUTSCENE_ENTITIES(_)", WREN_NETWORK_SET_NETWORK_CUTSCENE_ENTITIES },
        { "ARE_CUTSCENE_ENTITIES_NETWORKED()", WREN_NETWORK_ARE_CUTSCENE_ENTITIES_NETWORKED },
        { "SET_NETWORK_ID_PASS_CONTROL_IN_TUTORIAL(_,_)", WREN_NETWORK_SET_NETWORK_ID_PASS_CONTROL_IN_TUTORIAL },
        { "IS_NETWORK_ID_OWNED_BY_PARTICIPANT(_)", WREN_NETWORK_IS_NETWORK_ID_OWNED_BY_PARTICIPANT },
        { "SET_LOCAL_PLAYER_VISIBLE_IN_CUTSCENE(_,_)", WREN_NETWORK_SET_LOCAL_PLAYER_VISIBLE_IN_CUTSCENE },
        { "SET_LOCAL_PLAYER_INVISIBLE_LOCALLY(_)", WREN_NETWORK_SET_LOCAL_PLAYER_INVISIBLE_LOCALLY },
        { "SET_LOCAL_PLAYER_VISIBLE_LOCALLY(_)", WREN_NETWORK_SET_LOCAL_PLAYER_VISIBLE_LOCALLY },
        { "SET_PLAYER_INVISIBLE_LOCALLY(_,_)", WREN_NETWORK_SET_PLAYER_INVISIBLE_LOCALLY },
        { "SET_PLAYER_VISIBLE_LOCALLY(_,_)", WREN_NETWORK_SET_PLAYER_VISIBLE_LOCALLY },
        { "FADE_OUT_LOCAL_PLAYER(_)", WREN_NETWORK_FADE_OUT_LOCAL_PLAYER },
        { "NETWORK_FADE_OUT_ENTITY(_,_,_)", WREN_NETWORK_NETWORK_FADE_OUT_ENTITY },
        { "NETWORK_FADE_IN_ENTITY(_,_,_)", WREN_NETWORK_NETWORK_FADE_IN_ENTITY },
        { "NETWORK_IS_PLAYER_FADING(_)", WREN_NETWORK_NETWORK_IS_PLAYER_FADING },
        { "NETWORK_IS_ENTITY_FADING(_)", WREN_NETWORK_NETWORK_IS_ENTITY_FADING },
        { "IS_PLAYER_IN_CUTSCENE(_)", WREN_NETWORK_IS_PLAYER_IN_CUTSCENE },
        { "SET_ENTITY_VISIBLE_IN_CUTSCENE(_,_,_)", WREN_NETWORK_SET_ENTITY_VISIBLE_IN_CUTSCENE },
        { "SET_ENTITY_LOCALLY_INVISIBLE(_)", WREN_NETWORK_SET_ENTITY_LOCALLY_INVISIBLE },
        { "SET_ENTITY_LOCALLY_VISIBLE(_)", WREN_NETWORK_SET_ENTITY_LOCALLY_VISIBLE },
        { "IS_DAMAGE_TRACKER_ACTIVE_ON_NETWORK_ID(_)", WREN_NETWORK_IS_DAMAGE_TRACKER_ACTIVE_ON_NETWORK_ID },
        { "ACTIVATE_DAMAGE_TRACKER_ON_NETWORK_ID(_,_)", WREN_NETWORK_ACTIVATE_DAMAGE_TRACKER_ON_NETWORK_ID },
        { "IS_DAMAGE_TRACKER_ACTIVE_ON_PLAYER(_)", WREN_NETWORK_IS_DAMAGE_TRACKER_ACTIVE_ON_PLAYER },
        { "ACTIVATE_DAMAGE_TRACKER_ON_PLAYER(_,_)", WREN_NETWORK_ACTIVATE_DAMAGE_TRACKER_ON_PLAYER },
        { "IS_SPHERE_VISIBLE_TO_ANOTHER_MACHINE(_,_,_,_)", WREN_NETWORK_IS_SPHERE_VISIBLE_TO_ANOTHER_MACHINE },
        { "IS_SPHERE_VISIBLE_TO_PLAYER(_,_,_,_,_)", WREN_NETWORK_IS_SPHERE_VISIBLE_TO_PLAYER },
        { "RESERVE_NETWORK_MISSION_OBJECTS(_)", WREN_NETWORK_RESERVE_NETWORK_MISSION_OBJECTS },
        { "RESERVE_NETWORK_MISSION_PEDS(_)", WREN_NETWORK_RESERVE_NETWORK_MISSION_PEDS },
        { "RESERVE_NETWORK_MISSION_VEHICLES(_)", WREN_NETWORK_RESERVE_NETWORK_MISSION_VEHICLES },
        { "RESERVE_LOCAL_NETWORK_MISSION_OBJECTS(_)", WREN_NETWORK_RESERVE_LOCAL_NETWORK_MISSION_OBJECTS },
        { "RESERVE_LOCAL_NETWORK_MISSION_PEDS(_)", WREN_NETWORK_RESERVE_LOCAL_NETWORK_MISSION_PEDS },
        { "RESERVE_LOCAL_NETWORK_MISSION_VEHICLES(_)", WREN_NETWORK_RESERVE_LOCAL_NETWORK_MISSION_VEHICLES },
        { "CAN_REGISTER_MISSION_OBJECTS(_)", WREN_NETWORK_CAN_REGISTER_MISSION_OBJECTS },
        { "CAN_REGISTER_MISSION_PEDS(_)", WREN_NETWORK_CAN_REGISTER_MISSION_PEDS },
        { "CAN_REGISTER_MISSION_VEHICLES(_)", WREN_NETWORK_CAN_REGISTER_MISSION_VEHICLES },
        { "CAN_REGISTER_MISSION_PICKUPS(_)", WREN_NETWORK_CAN_REGISTER_MISSION_PICKUPS },
        { "CAN_REGISTER_MISSION_DOORS(_)", WREN_NETWORK_CAN_REGISTER_MISSION_DOORS },
        { "CAN_REGISTER_MISSION_ENTITIES(_,_,_,_)", WREN_NETWORK_CAN_REGISTER_MISSION_ENTITIES },
        { "GET_NUM_RESERVED_MISSION_OBJECTS(_,_)", WREN_NETWORK_GET_NUM_RESERVED_MISSION_OBJECTS },
        { "GET_NUM_RESERVED_MISSION_PEDS(_,_)", WREN_NETWORK_GET_NUM_RESERVED_MISSION_PEDS },
        { "GET_NUM_RESERVED_MISSION_VEHICLES(_,_)", WREN_NETWORK_GET_NUM_RESERVED_MISSION_VEHICLES },
        { "GET_NUM_CREATED_MISSION_OBJECTS(_)", WREN_NETWORK_GET_NUM_CREATED_MISSION_OBJECTS },
        { "GET_NUM_CREATED_MISSION_PEDS(_)", WREN_NETWORK_GET_NUM_CREATED_MISSION_PEDS },
        { "GET_NUM_CREATED_MISSION_VEHICLES(_)", WREN_NETWORK_GET_NUM_CREATED_MISSION_VEHICLES },
        { "GET_RESERVED_MISSION_ENTITIES_IN_AREA(_,_,_,_,_,_,_)", WREN_NETWORK_GET_RESERVED_MISSION_ENTITIES_IN_AREA },
        { "GET_MAX_NUM_NETWORK_OBJECTS()", WREN_NETWORK_GET_MAX_NUM_NETWORK_OBJECTS },
        { "GET_MAX_NUM_NETWORK_PEDS()", WREN_NETWORK_GET_MAX_NUM_NETWORK_PEDS },
        { "GET_MAX_NUM_NETWORK_VEHICLES()", WREN_NETWORK_GET_MAX_NUM_NETWORK_VEHICLES },
        { "GET_MAX_NUM_NETWORK_PICKUPS()", WREN_NETWORK_GET_MAX_NUM_NETWORK_PICKUPS },
        { "NETWORK_SET_OBJECT_SCOPE_DISTANCE(_,_)", WREN_NETWORK_NETWORK_SET_OBJECT_SCOPE_DISTANCE },
        { "NETWORK_ALLOW_CLONING_WHILE_IN_TUTORIAL(_,_)", WREN_NETWORK_NETWORK_ALLOW_CLONING_WHILE_IN_TUTORIAL },
        { "NETWORK_SET_TASK_CUTSCENE_INSCOPE_MULTIPLER(_)", WREN_NETWORK_NETWORK_SET_TASK_CUTSCENE_INSCOPE_MULTIPLER },
        { "GET_NETWORK_TIME()", WREN_NETWORK_GET_NETWORK_TIME },
        { "GET_NETWORK_TIME_ACCURATE()", WREN_NETWORK_GET_NETWORK_TIME_ACCURATE },
        { "HAS_NETWORK_TIME_STARTED()", WREN_NETWORK_HAS_NETWORK_TIME_STARTED },
        { "GET_TIME_OFFSET(_,_)", WREN_NETWORK_GET_TIME_OFFSET },
        { "IS_TIME_LESS_THAN(_,_)", WREN_NETWORK_IS_TIME_LESS_THAN },
        { "IS_TIME_MORE_THAN(_,_)", WREN_NETWORK_IS_TIME_MORE_THAN },
        { "IS_TIME_EQUAL_TO(_,_)", WREN_NETWORK_IS_TIME_EQUAL_TO },
        { "GET_TIME_DIFFERENCE(_,_)", WREN_NETWORK_GET_TIME_DIFFERENCE },
        { "GET_TIME_AS_STRING(_)", WREN_NETWORK_GET_TIME_AS_STRING },
        { "GET_CLOUD_TIME_AS_STRING()", WREN_NETWORK_GET_CLOUD_TIME_AS_STRING },
        { "GET_CLOUD_TIME_AS_INT()", WREN_NETWORK_GET_CLOUD_TIME_AS_INT },
        { "CONVERT_POSIX_TIME(_)", WREN_NETWORK_CONVERT_POSIX_TIME },
        { "NETWORK_SET_IN_SPECTATOR_MODE(_,_)", WREN_NETWORK_NETWORK_SET_IN_SPECTATOR_MODE },
        { "NETWORK_SET_IN_SPECTATOR_MODE_EXTENDED(_,_,_)", WREN_NETWORK_NETWORK_SET_IN_SPECTATOR_MODE_EXTENDED },
        { "NETWORK_SET_IN_FREE_CAM_MODE(_)", WREN_NETWORK_NETWORK_SET_IN_FREE_CAM_MODE },
        { "NETWORK_SET_ANTAGONISTIC_TO_PLAYER(_,_)", WREN_NETWORK_NETWORK_SET_ANTAGONISTIC_TO_PLAYER },
        { "NETWORK_IS_IN_SPECTATOR_MODE()", WREN_NETWORK_NETWORK_IS_IN_SPECTATOR_MODE },
        { "NETWORK_SET_IN_MP_CUTSCENE(_,_)", WREN_NETWORK_NETWORK_SET_IN_MP_CUTSCENE },
        { "NETWORK_IS_IN_MP_CUTSCENE()", WREN_NETWORK_NETWORK_IS_IN_MP_CUTSCENE },
        { "NETWORK_IS_PLAYER_IN_MP_CUTSCENE(_)", WREN_NETWORK_NETWORK_IS_PLAYER_IN_MP_CUTSCENE },
        { "NETWORK_HIDE_PROJECTILE_IN_CUTSCENE()", WREN_NETWORK_NETWORK_HIDE_PROJECTILE_IN_CUTSCENE },
        { "SET_NETWORK_VEHICLE_RESPOT_TIMER(_,_,_,_)", WREN_NETWORK_SET_NETWORK_VEHICLE_RESPOT_TIMER },
        { "SET_NETWORK_VEHICLE_AS_GHOST(_,_)", WREN_NETWORK_SET_NETWORK_VEHICLE_AS_GHOST },
        { "SET_NETWORK_VEHICLE_MAX_POSITION_DELTA_MULTIPLIER(_,_)", WREN_NETWORK_SET_NETWORK_VEHICLE_MAX_POSITION_DELTA_MULTIPLIER },
        { "SET_NETWORK_ENABLE_HIGH_SPEED_EDGE_FALL_DETECTION(_,_)", WREN_NETWORK_SET_NETWORK_ENABLE_HIGH_SPEED_EDGE_FALL_DETECTION },
        { "SET_LOCAL_PLAYER_AS_GHOST(_,_)", WREN_NETWORK_SET_LOCAL_PLAYER_AS_GHOST },
        { "IS_ENTITY_A_GHOST(_)", WREN_NETWORK_IS_ENTITY_A_GHOST },
        { "SET_NON_PARTICIPANTS_OF_THIS_SCRIPT_AS_GHOSTS(_)", WREN_NETWORK_SET_NON_PARTICIPANTS_OF_THIS_SCRIPT_AS_GHOSTS },
        { "SET_REMOTE_PLAYER_AS_GHOST(_,_)", WREN_NETWORK_SET_REMOTE_PLAYER_AS_GHOST },
        { "SET_GHOST_ALPHA(_)", WREN_NETWORK_SET_GHOST_ALPHA },
        { "RESET_GHOST_ALPHA()", WREN_NETWORK_RESET_GHOST_ALPHA },
        { "SET_ENTITY_GHOSTED_FOR_GHOST_PLAYERS(_,_)", WREN_NETWORK_SET_ENTITY_GHOSTED_FOR_GHOST_PLAYERS },
        { "SET_INVERT_GHOSTING(_)", WREN_NETWORK_SET_INVERT_GHOSTING },
        { "IS_ENTITY_IN_GHOST_COLLISION(_)", WREN_NETWORK_IS_ENTITY_IN_GHOST_COLLISION },
        { "USE_PLAYER_COLOUR_INSTEAD_OF_TEAM_COLOUR(_)", WREN_NETWORK_USE_PLAYER_COLOUR_INSTEAD_OF_TEAM_COLOUR },
        { "NETWORK_CREATE_SYNCHRONISED_SCENE(_,_,_,_,_,_,_,_,_,_,_,_)", WREN_NETWORK_NETWORK_CREATE_SYNCHRONISED_SCENE },
        { "NETWORK_ADD_PED_TO_SYNCHRONISED_SCENE(_,_,_,_,_,_,_,_,_,_)", WREN_NETWORK_NETWORK_ADD_PED_TO_SYNCHRONISED_SCENE },
        { "NETWORK_ADD_PED_TO_SYNCHRONISED_SCENE_WITH_IK(_,_,_,_,_,_,_,_,_,_)", WREN_NETWORK_NETWORK_ADD_PED_TO_SYNCHRONISED_SCENE_WITH_IK },
        { "NETWORK_ADD_ENTITY_TO_SYNCHRONISED_SCENE(_,_,_,_,_,_,_)", WREN_NETWORK_NETWORK_ADD_ENTITY_TO_SYNCHRONISED_SCENE },
        { "NETWORK_ADD_MAP_ENTITY_TO_SYNCHRONISED_SCENE(_,_,_,_,_,_,_,_,_,_)", WREN_NETWORK_NETWORK_ADD_MAP_ENTITY_TO_SYNCHRONISED_SCENE },
        { "NETWORK_ADD_SYNCHRONISED_SCENE_CAMERA(_,_,_)", WREN_NETWORK_NETWORK_ADD_SYNCHRONISED_SCENE_CAMERA },
        { "NETWORK_ATTACH_SYNCHRONISED_SCENE_TO_ENTITY(_,_,_)", WREN_NETWORK_NETWORK_ATTACH_SYNCHRONISED_SCENE_TO_ENTITY },
        { "NETWORK_START_SYNCHRONISED_SCENE(_)", WREN_NETWORK_NETWORK_START_SYNCHRONISED_SCENE },
        { "NETWORK_STOP_SYNCHRONISED_SCENE(_)", WREN_NETWORK_NETWORK_STOP_SYNCHRONISED_SCENE },
        { "NETWORK_GET_LOCAL_SCENE_FROM_NETWORK_ID(_)", WREN_NETWORK_NETWORK_GET_LOCAL_SCENE_FROM_NETWORK_ID },
        { "NETWORK_FORCE_LOCAL_USE_OF_SYNCED_SCENE_CAMERA(_)", WREN_NETWORK_NETWORK_FORCE_LOCAL_USE_OF_SYNCED_SCENE_CAMERA },
        { "NETWORK_ALLOW_REMOTE_SYNCED_SCENE_LOCAL_PLAYER_REQUESTS(_)", WREN_NETWORK_NETWORK_ALLOW_REMOTE_SYNCED_SCENE_LOCAL_PLAYER_REQUESTS },
        { "NETWORK_FIND_LARGEST_BUNCH_OF_PLAYERS(_,_)", WREN_NETWORK_NETWORK_FIND_LARGEST_BUNCH_OF_PLAYERS },
        { "NETWORK_START_RESPAWN_SEARCH_FOR_PLAYER(_,_,_,_,_,_,_,_,_)", WREN_NETWORK_NETWORK_START_RESPAWN_SEARCH_FOR_PLAYER },
        { "NETWORK_START_RESPAWN_SEARCH_IN_ANGLED_AREA_FOR_PLAYER(_,_,_,_,_,_,_,_,_,_,_,_)", WREN_NETWORK_NETWORK_START_RESPAWN_SEARCH_IN_ANGLED_AREA_FOR_PLAYER },
        { "NETWORK_QUERY_RESPAWN_RESULTS()", WREN_NETWORK_NETWORK_QUERY_RESPAWN_RESULTS },
        { "NETWORK_CANCEL_RESPAWN_SEARCH()", WREN_NETWORK_NETWORK_CANCEL_RESPAWN_SEARCH },
        { "NETWORK_GET_RESPAWN_RESULT(_)", WREN_NETWORK_NETWORK_GET_RESPAWN_RESULT },
        { "NETWORK_GET_RESPAWN_RESULT_FLAGS(_)", WREN_NETWORK_NETWORK_GET_RESPAWN_RESULT_FLAGS },
        { "NETWORK_START_SOLO_TUTORIAL_SESSION()", WREN_NETWORK_NETWORK_START_SOLO_TUTORIAL_SESSION },
        { "NETWORK_ALLOW_GANG_TO_JOIN_TUTORIAL_SESSION(_,_)", WREN_NETWORK_NETWORK_ALLOW_GANG_TO_JOIN_TUTORIAL_SESSION },
        { "NETWORK_END_TUTORIAL_SESSION()", WREN_NETWORK_NETWORK_END_TUTORIAL_SESSION },
        { "NETWORK_IS_IN_TUTORIAL_SESSION()", WREN_NETWORK_NETWORK_IS_IN_TUTORIAL_SESSION },
        { "NETWORK_WAITING_POP_CLEAR_TUTORIAL_SESSION()", WREN_NETWORK_NETWORK_WAITING_POP_CLEAR_TUTORIAL_SESSION },
        { "NETWORK_IS_TUTORIAL_SESSION_CHANGE_PENDING()", WREN_NETWORK_NETWORK_IS_TUTORIAL_SESSION_CHANGE_PENDING },
        { "NETWORK_GET_PLAYER_TUTORIAL_SESSION_INSTANCE(_)", WREN_NETWORK_NETWORK_GET_PLAYER_TUTORIAL_SESSION_INSTANCE },
        { "NETWORK_ARE_PLAYERS_IN_SAME_TUTORIAL_SESSION(_,_)", WREN_NETWORK_NETWORK_ARE_PLAYERS_IN_SAME_TUTORIAL_SESSION },
        { "NETWORK_BLOCK_PROXY_MIGRATION_BETWEEN_TUTORIAL_SESSIONS(_)", WREN_NETWORK_NETWORK_BLOCK_PROXY_MIGRATION_BETWEEN_TUTORIAL_SESSIONS },
        { "NETWORK_CONCEAL_PLAYER(_,_,_)", WREN_NETWORK_NETWORK_CONCEAL_PLAYER },
        { "NETWORK_IS_PLAYER_CONCEALED(_)", WREN_NETWORK_NETWORK_IS_PLAYER_CONCEALED },
        { "NETWORK_CONCEAL_ENTITY(_,_)", WREN_NETWORK_NETWORK_CONCEAL_ENTITY },
        { "NETWORK_IS_ENTITY_CONCEALED(_)", WREN_NETWORK_NETWORK_IS_ENTITY_CONCEALED },
        { "NETWORK_OVERRIDE_CLOCK_TIME(_,_,_)", WREN_NETWORK_NETWORK_OVERRIDE_CLOCK_TIME },
        { "NETWORK_OVERRIDE_CLOCK_RATE(_)", WREN_NETWORK_NETWORK_OVERRIDE_CLOCK_RATE },
        { "NETWORK_CLEAR_CLOCK_TIME_OVERRIDE()", WREN_NETWORK_NETWORK_CLEAR_CLOCK_TIME_OVERRIDE },
        { "NETWORK_IS_CLOCK_TIME_OVERRIDDEN()", WREN_NETWORK_NETWORK_IS_CLOCK_TIME_OVERRIDDEN },
        { "NETWORK_ADD_ENTITY_AREA(_,_,_,_,_,_)", WREN_NETWORK_NETWORK_ADD_ENTITY_AREA },
        { "NETWORK_ADD_ENTITY_ANGLED_AREA(_,_,_,_,_,_,_)", WREN_NETWORK_NETWORK_ADD_ENTITY_ANGLED_AREA },
        { "NETWORK_ADD_CLIENT_ENTITY_AREA(_,_,_,_,_,_)", WREN_NETWORK_NETWORK_ADD_CLIENT_ENTITY_AREA },
        { "NETWORK_ADD_CLIENT_ENTITY_ANGLED_AREA(_,_,_,_,_,_,_)", WREN_NETWORK_NETWORK_ADD_CLIENT_ENTITY_ANGLED_AREA },
        { "NETWORK_REMOVE_ENTITY_AREA(_)", WREN_NETWORK_NETWORK_REMOVE_ENTITY_AREA },
        { "NETWORK_ENTITY_AREA_DOES_EXIST(_)", WREN_NETWORK_NETWORK_ENTITY_AREA_DOES_EXIST },
        { "NETWORK_ENTITY_AREA_HAVE_ALL_REPLIED(_)", WREN_NETWORK_NETWORK_ENTITY_AREA_HAVE_ALL_REPLIED },
        { "NETWORK_ENTITY_AREA_IS_OCCUPIED(_)", WREN_NETWORK_NETWORK_ENTITY_AREA_IS_OCCUPIED },
        { "NETWORK_USE_HIGH_PRECISION_BLENDING(_,_)", WREN_NETWORK_NETWORK_USE_HIGH_PRECISION_BLENDING },
        { "NETWORK_SET_CUSTOM_ARENA_BALL_PARAMS(_)", WREN_NETWORK_NETWORK_SET_CUSTOM_ARENA_BALL_PARAMS },
        { "NETWORK_ENTITY_USE_HIGH_PRECISION_ROTATION(_,_)", WREN_NETWORK_NETWORK_ENTITY_USE_HIGH_PRECISION_ROTATION },
        { "NETWORK_REQUEST_CLOUD_BACKGROUND_SCRIPTS()", WREN_NETWORK_NETWORK_REQUEST_CLOUD_BACKGROUND_SCRIPTS },
        { "NETWORK_IS_CLOUD_BACKGROUND_SCRIPT_REQUEST_PENDING()", WREN_NETWORK_NETWORK_IS_CLOUD_BACKGROUND_SCRIPT_REQUEST_PENDING },
        { "NETWORK_REQUEST_CLOUD_TUNABLES()", WREN_NETWORK_NETWORK_REQUEST_CLOUD_TUNABLES },
        { "NETWORK_IS_TUNABLE_CLOUD_REQUEST_PENDING()", WREN_NETWORK_NETWORK_IS_TUNABLE_CLOUD_REQUEST_PENDING },
        { "NETWORK_GET_TUNABLE_CLOUD_CRC()", WREN_NETWORK_NETWORK_GET_TUNABLE_CLOUD_CRC },
        { "NETWORK_DOES_TUNABLE_EXIST(_,_)", WREN_NETWORK_NETWORK_DOES_TUNABLE_EXIST },
        { "NETWORK_ACCESS_TUNABLE_INT(_,_)", WREN_NETWORK_NETWORK_ACCESS_TUNABLE_INT },
        { "NETWORK_ACCESS_TUNABLE_FLOAT(_,_)", WREN_NETWORK_NETWORK_ACCESS_TUNABLE_FLOAT },
        { "NETWORK_ACCESS_TUNABLE_BOOL(_,_)", WREN_NETWORK_NETWORK_ACCESS_TUNABLE_BOOL },
        { "NETWORK_DOES_TUNABLE_EXIST_HASH(_,_)", WREN_NETWORK_NETWORK_DOES_TUNABLE_EXIST_HASH },
        { "NETWORK_ACCESS_TUNABLE_MODIFICATION_DETECTION_CLEAR()", WREN_NETWORK_NETWORK_ACCESS_TUNABLE_MODIFICATION_DETECTION_CLEAR },
        { "NETWORK_ACCESS_TUNABLE_INT_HASH(_,_)", WREN_NETWORK_NETWORK_ACCESS_TUNABLE_INT_HASH },
        { "NETWORK_ACCESS_TUNABLE_INT_MODIFICATION_DETECTION_REGISTRATION_HASH(_,_)", WREN_NETWORK_NETWORK_ACCESS_TUNABLE_INT_MODIFICATION_DETECTION_REGISTRATION_HASH },
        { "NETWORK_ACCESS_TUNABLE_FLOAT_HASH(_,_)", WREN_NETWORK_NETWORK_ACCESS_TUNABLE_FLOAT_HASH },
        { "NETWORK_ACCESS_TUNABLE_FLOAT_MODIFICATION_DETECTION_REGISTRATION_HASH(_,_)", WREN_NETWORK_NETWORK_ACCESS_TUNABLE_FLOAT_MODIFICATION_DETECTION_REGISTRATION_HASH },
        { "NETWORK_ACCESS_TUNABLE_BOOL_HASH(_,_)", WREN_NETWORK_NETWORK_ACCESS_TUNABLE_BOOL_HASH },
        { "NETWORK_ACCESS_TUNABLE_BOOL_MODIFICATION_DETECTION_REGISTRATION_HASH(_,_)", WREN_NETWORK_NETWORK_ACCESS_TUNABLE_BOOL_MODIFICATION_DETECTION_REGISTRATION_HASH },
        { "NETWORK_TRY_ACCESS_TUNABLE_BOOL_HASH(_,_,_)", WREN_NETWORK_NETWORK_TRY_ACCESS_TUNABLE_BOOL_HASH },
        { "NETWORK_GET_CONTENT_MODIFIER_LIST_ID(_)", WREN_NETWORK_NETWORK_GET_CONTENT_MODIFIER_LIST_ID },
        { "NETWORK_GET_BONE_ID_OF_FATAL_HIT()", WREN_NETWORK_NETWORK_GET_BONE_ID_OF_FATAL_HIT },
        { "NETWORK_RESET_BODY_TRACKER()", WREN_NETWORK_NETWORK_RESET_BODY_TRACKER },
        { "NETWORK_GET_NUMBER_BODY_TRACKER_HITS()", WREN_NETWORK_NETWORK_GET_NUMBER_BODY_TRACKER_HITS },
        { "NETWORK_HAS_BONE_BEEN_HIT_BY_KILLER(_)", WREN_NETWORK_NETWORK_HAS_BONE_BEEN_HIT_BY_KILLER },
        { "NETWORK_SET_ATTRIBUTE_DAMAGE_TO_PLAYER(_,_)", WREN_NETWORK_NETWORK_SET_ATTRIBUTE_DAMAGE_TO_PLAYER },
        { "NETWORK_TRIGGER_DAMAGE_EVENT_FOR_ZERO_DAMAGE(_,_)", WREN_NETWORK_NETWORK_TRIGGER_DAMAGE_EVENT_FOR_ZERO_DAMAGE },
        { "NETWORK_TRIGGER_DAMAGE_EVENT_FOR_ZERO_WEAPON_HASH(_,_)", WREN_NETWORK_NETWORK_TRIGGER_DAMAGE_EVENT_FOR_ZERO_WEAPON_HASH },
        { "NETWORK_SET_NO_LONGER_NEEDED(_,_)", WREN_NETWORK_NETWORK_SET_NO_LONGER_NEEDED },
        { "NETWORK_EXPLODE_VEHICLE(_,_,_,_)", WREN_NETWORK_NETWORK_EXPLODE_VEHICLE },
        { "NETWORK_EXPLODE_HELI(_,_,_,_)", WREN_NETWORK_NETWORK_EXPLODE_HELI },
        { "NETWORK_USE_LOGARITHMIC_BLENDING_THIS_FRAME(_)", WREN_NETWORK_NETWORK_USE_LOGARITHMIC_BLENDING_THIS_FRAME },
        { "NETWORK_OVERRIDE_COORDS_AND_HEADING(_,_,_,_,_)", WREN_NETWORK_NETWORK_OVERRIDE_COORDS_AND_HEADING },
        { "NETWORK_ENABLE_EXTRA_VEHICLE_ORIENTATION_BLEND_CHECKS(_,_)", WREN_NETWORK_NETWORK_ENABLE_EXTRA_VEHICLE_ORIENTATION_BLEND_CHECKS },
        { "NETWORK_DISABLE_PROXIMITY_MIGRATION(_)", WREN_NETWORK_NETWORK_DISABLE_PROXIMITY_MIGRATION },
        { "NETWORK_SET_PROPERTY_ID(_)", WREN_NETWORK_NETWORK_SET_PROPERTY_ID },
        { "NETWORK_CLEAR_PROPERTY_ID()", WREN_NETWORK_NETWORK_CLEAR_PROPERTY_ID },
        { "NETWORK_SET_PLAYER_MENTAL_STATE(_)", WREN_NETWORK_NETWORK_SET_PLAYER_MENTAL_STATE },
        { "NETWORK_SET_MINIMUM_RANK_FOR_MISSION(_)", WREN_NETWORK_NETWORK_SET_MINIMUM_RANK_FOR_MISSION },
        { "NETWORK_CACHE_LOCAL_PLAYER_HEAD_BLEND_DATA()", WREN_NETWORK_NETWORK_CACHE_LOCAL_PLAYER_HEAD_BLEND_DATA },
        { "NETWORK_HAS_CACHED_PLAYER_HEAD_BLEND_DATA(_)", WREN_NETWORK_NETWORK_HAS_CACHED_PLAYER_HEAD_BLEND_DATA },
        { "NETWORK_APPLY_CACHED_PLAYER_HEAD_BLEND_DATA(_,_)", WREN_NETWORK_NETWORK_APPLY_CACHED_PLAYER_HEAD_BLEND_DATA },
        { "GET_NUM_COMMERCE_ITEMS()", WREN_NETWORK_GET_NUM_COMMERCE_ITEMS },
        { "IS_COMMERCE_DATA_VALID()", WREN_NETWORK_IS_COMMERCE_DATA_VALID },
        { "TRIGGER_COMMERCE_DATA_FETCH(_)", WREN_NETWORK_TRIGGER_COMMERCE_DATA_FETCH },
        { "IS_COMMERCE_DATA_FETCH_IN_PROGRESS()", WREN_NETWORK_IS_COMMERCE_DATA_FETCH_IN_PROGRESS },
        { "GET_COMMERCE_ITEM_ID(_)", WREN_NETWORK_GET_COMMERCE_ITEM_ID },
        { "GET_COMMERCE_ITEM_NAME(_)", WREN_NETWORK_GET_COMMERCE_ITEM_NAME },
        { "GET_COMMERCE_PRODUCT_PRICE(_)", WREN_NETWORK_GET_COMMERCE_PRODUCT_PRICE },
        { "GET_COMMERCE_ITEM_NUM_CATS(_)", WREN_NETWORK_GET_COMMERCE_ITEM_NUM_CATS },
        { "GET_COMMERCE_ITEM_CAT(_,_)", WREN_NETWORK_GET_COMMERCE_ITEM_CAT },
        { "OPEN_COMMERCE_STORE(_,_,_)", WREN_NETWORK_OPEN_COMMERCE_STORE },
        { "IS_COMMERCE_STORE_OPEN()", WREN_NETWORK_IS_COMMERCE_STORE_OPEN },
        { "SET_STORE_ENABLED(_)", WREN_NETWORK_SET_STORE_ENABLED },
        { "REQUEST_COMMERCE_ITEM_IMAGE(_)", WREN_NETWORK_REQUEST_COMMERCE_ITEM_IMAGE },
        { "RELEASE_ALL_COMMERCE_ITEM_IMAGES()", WREN_NETWORK_RELEASE_ALL_COMMERCE_ITEM_IMAGES },
        { "GET_COMMERCE_ITEM_TEXTURENAME(_)", WREN_NETWORK_GET_COMMERCE_ITEM_TEXTURENAME },
        { "IS_STORE_AVAILABLE_TO_USER()", WREN_NETWORK_IS_STORE_AVAILABLE_TO_USER },
        { "DELAY_MP_STORE_OPEN()", WREN_NETWORK_DELAY_MP_STORE_OPEN },
        { "RESET_STORE_NETWORK_GAME_TRACKING()", WREN_NETWORK_RESET_STORE_NETWORK_GAME_TRACKING },
        { "IS_USER_OLD_ENOUGH_TO_ACCESS_STORE()", WREN_NETWORK_IS_USER_OLD_ENOUGH_TO_ACCESS_STORE },
        { "SET_LAST_VIEWED_SHOP_ITEM(_,_,_)", WREN_NETWORK_SET_LAST_VIEWED_SHOP_ITEM },
        { "GET_USER_PREMIUM_ACCESS()", WREN_NETWORK_GET_USER_PREMIUM_ACCESS },
        { "GET_USER_STARTER_ACCESS()", WREN_NETWORK_GET_USER_STARTER_ACCESS },
        { "CLOUD_DELETE_MEMBER_FILE(_)", WREN_NETWORK_CLOUD_DELETE_MEMBER_FILE },
        { "CLOUD_HAS_REQUEST_COMPLETED(_)", WREN_NETWORK_CLOUD_HAS_REQUEST_COMPLETED },
        { "CLOUD_DID_REQUEST_SUCCEED(_)", WREN_NETWORK_CLOUD_DID_REQUEST_SUCCEED },
        { "CLOUD_CHECK_AVAILABILITY()", WREN_NETWORK_CLOUD_CHECK_AVAILABILITY },
        { "CLOUD_IS_CHECKING_AVAILABILITY()", WREN_NETWORK_CLOUD_IS_CHECKING_AVAILABILITY },
        { "CLOUD_GET_AVAILABILITY_CHECK_RESULT()", WREN_NETWORK_CLOUD_GET_AVAILABILITY_CHECK_RESULT },
        { "GET_CONTENT_TO_LOAD_TYPE()", WREN_NETWORK_GET_CONTENT_TO_LOAD_TYPE },
        { "GET_IS_LAUNCH_FROM_LIVE_AREA()", WREN_NETWORK_GET_IS_LAUNCH_FROM_LIVE_AREA },
        { "GET_IS_LIVE_AREA_LAUNCH_WITH_CONTENT()", WREN_NETWORK_GET_IS_LIVE_AREA_LAUNCH_WITH_CONTENT },
        { "CLEAR_SERVICE_EVENT_ARGUMENTS()", WREN_NETWORK_CLEAR_SERVICE_EVENT_ARGUMENTS },
        { "UGC_COPY_CONTENT()", WREN_NETWORK_UGC_COPY_CONTENT },
        { "UGC_IS_CREATING()", WREN_NETWORK_UGC_IS_CREATING },
        { "UGC_HAS_CREATE_FINISHED()", WREN_NETWORK_UGC_HAS_CREATE_FINISHED },
        { "UGC_DID_CREATE_SUCCEED()", WREN_NETWORK_UGC_DID_CREATE_SUCCEED },
        { "UGC_GET_CREATE_RESULT()", WREN_NETWORK_UGC_GET_CREATE_RESULT },
        { "UGC_GET_CREATE_CONTENT_ID()", WREN_NETWORK_UGC_GET_CREATE_CONTENT_ID },
        { "UGC_CLEAR_CREATE_RESULT()", WREN_NETWORK_UGC_CLEAR_CREATE_RESULT },
        { "UGC_QUERY_MY_CONTENT(_,_,_,_,_)", WREN_NETWORK_UGC_QUERY_MY_CONTENT },
        { "UGC_QUERY_BY_CATEGORY(_,_,_,_,_,_)", WREN_NETWORK_UGC_QUERY_BY_CATEGORY },
        { "UGC_QUERY_BY_CONTENT_ID(_,_,_)", WREN_NETWORK_UGC_QUERY_BY_CONTENT_ID },
        { "UGC_QUERY_BY_CONTENT_IDS(_,_,_)", WREN_NETWORK_UGC_QUERY_BY_CONTENT_IDS },
        { "UGC_QUERY_MOST_RECENTLY_CREATED_CONTENT(_,_,_,_)", WREN_NETWORK_UGC_QUERY_MOST_RECENTLY_CREATED_CONTENT },
        { "UGC_GET_BOOKMARKED_CONTENT(_,_,_)", WREN_NETWORK_UGC_GET_BOOKMARKED_CONTENT },
        { "UGC_GET_MY_CONTENT(_,_,_)", WREN_NETWORK_UGC_GET_MY_CONTENT },
        { "UGC_GET_FRIEND_CONTENT(_,_,_)", WREN_NETWORK_UGC_GET_FRIEND_CONTENT },
        { "UGC_GET_CREW_CONTENT(_,_,_,_)", WREN_NETWORK_UGC_GET_CREW_CONTENT },
        { "UGC_GET_GET_BY_CATEGORY(_,_,_,_)", WREN_NETWORK_UGC_GET_GET_BY_CATEGORY },
        { "UGC_GET_GET_BY_CONTENT_ID(_,_)", WREN_NETWORK_UGC_GET_GET_BY_CONTENT_ID },
        { "UGC_GET_GET_BY_CONTENT_IDS(_,_)", WREN_NETWORK_UGC_GET_GET_BY_CONTENT_IDS },
        { "UGC_GET_MOST_RECENTLY_CREATED_CONTENT(_,_)", WREN_NETWORK_UGC_GET_MOST_RECENTLY_CREATED_CONTENT },
        { "UGC_GET_MOST_RECENTLY_PLAYED_CONTENT(_,_)", WREN_NETWORK_UGC_GET_MOST_RECENTLY_PLAYED_CONTENT },
        { "UGC_GET_TOP_RATED_CONTENT(_,_)", WREN_NETWORK_UGC_GET_TOP_RATED_CONTENT },
        { "UGC_CANCEL_QUERY()", WREN_NETWORK_UGC_CANCEL_QUERY },
        { "UGC_IS_GETTING()", WREN_NETWORK_UGC_IS_GETTING },
        { "UGC_HAS_GET_FINISHED()", WREN_NETWORK_UGC_HAS_GET_FINISHED },
        { "UGC_DID_GET_SUCCEED()", WREN_NETWORK_UGC_DID_GET_SUCCEED },
        { "UGC_WAS_QUERY_FORCE_CANCELLED()", WREN_NETWORK_UGC_WAS_QUERY_FORCE_CANCELLED },
        { "UGC_GET_QUERY_RESULT()", WREN_NETWORK_UGC_GET_QUERY_RESULT },
        { "UGC_GET_CONTENT_NUM()", WREN_NETWORK_UGC_GET_CONTENT_NUM },
        { "UGC_GET_CONTENT_TOTAL()", WREN_NETWORK_UGC_GET_CONTENT_TOTAL },
        { "UGC_GET_CONTENT_HASH()", WREN_NETWORK_UGC_GET_CONTENT_HASH },
        { "UGC_CLEAR_QUERY_RESULTS()", WREN_NETWORK_UGC_CLEAR_QUERY_RESULTS },
        { "UGC_GET_CONTENT_USER_ID(_)", WREN_NETWORK_UGC_GET_CONTENT_USER_ID },
        { "UGC_GET_CONTENT_CREATOR_GAMER_HANDLE(_)", WREN_NETWORK_UGC_GET_CONTENT_CREATOR_GAMER_HANDLE },
        { "UGC_GET_CONTENT_CREATED_BY_LOCAL_PLAYER(_)", WREN_NETWORK_UGC_GET_CONTENT_CREATED_BY_LOCAL_PLAYER },
        { "UGC_GET_CONTENT_USER_NAME(_)", WREN_NETWORK_UGC_GET_CONTENT_USER_NAME },
        { "UGC_GET_CONTENT_IS_USING_SC_NICKNAME(_)", WREN_NETWORK_UGC_GET_CONTENT_IS_USING_SC_NICKNAME },
        { "UGC_GET_CONTENT_CATEGORY(_)", WREN_NETWORK_UGC_GET_CONTENT_CATEGORY },
        { "UGC_GET_CONTENT_ID(_)", WREN_NETWORK_UGC_GET_CONTENT_ID },
        { "UGC_GET_ROOT_CONTENT_ID(_)", WREN_NETWORK_UGC_GET_ROOT_CONTENT_ID },
        { "UGC_GET_CONTENT_NAME(_)", WREN_NETWORK_UGC_GET_CONTENT_NAME },
        { "UGC_GET_CONTENT_DESCRIPTION_HASH(_)", WREN_NETWORK_UGC_GET_CONTENT_DESCRIPTION_HASH },
        { "UGC_GET_CONTENT_PATH(_,_)", WREN_NETWORK_UGC_GET_CONTENT_PATH },
        { "UGC_GET_CONTENT_UPDATED_DATE(_)", WREN_NETWORK_UGC_GET_CONTENT_UPDATED_DATE },
        { "UGC_GET_CONTENT_FILE_VERSION(_,_)", WREN_NETWORK_UGC_GET_CONTENT_FILE_VERSION },
        { "UGC_GET_CONTENT_HAS_LO_RES_PHOTO(_)", WREN_NETWORK_UGC_GET_CONTENT_HAS_LO_RES_PHOTO },
        { "UGC_GET_CONTENT_HAS_HI_RES_PHOTO(_)", WREN_NETWORK_UGC_GET_CONTENT_HAS_HI_RES_PHOTO },
        { "UGC_GET_CONTENT_LANGUAGE(_)", WREN_NETWORK_UGC_GET_CONTENT_LANGUAGE },
        { "UGC_GET_CONTENT_IS_PUBLISHED(_)", WREN_NETWORK_UGC_GET_CONTENT_IS_PUBLISHED },
        { "UGC_GET_CONTENT_IS_VERIFIED(_)", WREN_NETWORK_UGC_GET_CONTENT_IS_VERIFIED },
        { "UGC_GET_CONTENT_RATING(_,_)", WREN_NETWORK_UGC_GET_CONTENT_RATING },
        { "UGC_GET_CONTENT_RATING_COUNT(_,_)", WREN_NETWORK_UGC_GET_CONTENT_RATING_COUNT },
        { "UGC_GET_CONTENT_RATING_POSITIVE_COUNT(_,_)", WREN_NETWORK_UGC_GET_CONTENT_RATING_POSITIVE_COUNT },
        { "UGC_GET_CONTENT_RATING_NEGATIVE_COUNT(_,_)", WREN_NETWORK_UGC_GET_CONTENT_RATING_NEGATIVE_COUNT },
        { "UGC_GET_CONTENT_HAS_PLAYER_RECORD(_)", WREN_NETWORK_UGC_GET_CONTENT_HAS_PLAYER_RECORD },
        { "UGC_GET_CONTENT_HAS_PLAYER_BOOKMARKED(_)", WREN_NETWORK_UGC_GET_CONTENT_HAS_PLAYER_BOOKMARKED },
        { "UGC_REQUEST_CONTENT_DATA_FROM_INDEX(_,_)", WREN_NETWORK_UGC_REQUEST_CONTENT_DATA_FROM_INDEX },
        { "UGC_REQUEST_CONTENT_DATA_FROM_PARAMS(_,_,_,_,_)", WREN_NETWORK_UGC_REQUEST_CONTENT_DATA_FROM_PARAMS },
        { "UGC_REQUEST_CACHED_DESCRIPTION(_)", WREN_NETWORK_UGC_REQUEST_CACHED_DESCRIPTION },
        { "UGC_IS_DESCRIPTION_REQUEST_IN_PROGRESS(_)", WREN_NETWORK_UGC_IS_DESCRIPTION_REQUEST_IN_PROGRESS },
        { "UGC_HAS_DESCRIPTION_REQUEST_FINISHED(_)", WREN_NETWORK_UGC_HAS_DESCRIPTION_REQUEST_FINISHED },
        { "UGC_DID_DESCRIPTION_REQUEST_SUCCEED(_)", WREN_NETWORK_UGC_DID_DESCRIPTION_REQUEST_SUCCEED },
        { "UGC_GET_CACHED_DESCRIPTION(_,_)", WREN_NETWORK_UGC_GET_CACHED_DESCRIPTION },
        { "UGC_RELEASE_CACHED_DESCRIPTION(_)", WREN_NETWORK_UGC_RELEASE_CACHED_DESCRIPTION },
        { "UGC_RELEASE_ALL_CACHED_DESCRIPTIONS()", WREN_NETWORK_UGC_RELEASE_ALL_CACHED_DESCRIPTIONS },
        { "UGC_PUBLISH(_,_,_)", WREN_NETWORK_UGC_PUBLISH },
        { "UGC_SET_BOOKMARKED(_,_,_)", WREN_NETWORK_UGC_SET_BOOKMARKED },
        { "UGC_SET_DELETED(_,_)", WREN_NETWORK_UGC_SET_DELETED },
        { "UGC_IS_MODIFYING()", WREN_NETWORK_UGC_IS_MODIFYING },
        { "UGC_HAS_MODIFY_FINISHED()", WREN_NETWORK_UGC_HAS_MODIFY_FINISHED },
        { "UGC_DID_MODIFY_SUCCEED()", WREN_NETWORK_UGC_DID_MODIFY_SUCCEED },
        { "UGC_GET_MODIFY_RESULT()", WREN_NETWORK_UGC_GET_MODIFY_RESULT },
        { "UGC_CLEAR_MODIFY_RESULT()", WREN_NETWORK_UGC_CLEAR_MODIFY_RESULT },
        { "UGC_GET_CREATORS_BY_USER_ID()", WREN_NETWORK_UGC_GET_CREATORS_BY_USER_ID },
        { "UGC_HAS_QUERY_CREATORS_FINISHED()", WREN_NETWORK_UGC_HAS_QUERY_CREATORS_FINISHED },
        { "UGC_DID_QUERY_CREATORS_SUCCEED()", WREN_NETWORK_UGC_DID_QUERY_CREATORS_SUCCEED },
        { "UGC_GET_CREATOR_NUM()", WREN_NETWORK_UGC_GET_CREATOR_NUM },
        { "UGC_LOAD_OFFLINE_QUERY(_)", WREN_NETWORK_UGC_LOAD_OFFLINE_QUERY },
        { "UGC_CLEAR_OFFLINE_QUERY()", WREN_NETWORK_UGC_CLEAR_OFFLINE_QUERY },
        { "UGC_SET_QUERY_DATA_FROM_OFFLINE(_)", WREN_NETWORK_UGC_SET_QUERY_DATA_FROM_OFFLINE },
        { "UGC_SET_USING_OFFLINE_CONTENT(_)", WREN_NETWORK_UGC_SET_USING_OFFLINE_CONTENT },
        { "UGC_IS_LANGUAGE_SUPPORTED(_)", WREN_NETWORK_UGC_IS_LANGUAGE_SUPPORTED },
        { "FACEBOOK_POST_COMPLETED_HEIST(_,_,_)", WREN_NETWORK_FACEBOOK_POST_COMPLETED_HEIST },
        { "FACEBOOK_POST_CREATE_CHARACTER()", WREN_NETWORK_FACEBOOK_POST_CREATE_CHARACTER },
        { "FACEBOOK_POST_COMPLETED_MILESTONE(_)", WREN_NETWORK_FACEBOOK_POST_COMPLETED_MILESTONE },
        { "FACEBOOK_HAS_POST_COMPLETED()", WREN_NETWORK_FACEBOOK_HAS_POST_COMPLETED },
        { "FACEBOOK_DID_POST_SUCCEED()", WREN_NETWORK_FACEBOOK_DID_POST_SUCCEED },
        { "FACEBOOK_CAN_POST_TO_FACEBOOK()", WREN_NETWORK_FACEBOOK_CAN_POST_TO_FACEBOOK },
        { "TEXTURE_DOWNLOAD_REQUEST(_,_,_)", WREN_NETWORK_TEXTURE_DOWNLOAD_REQUEST },
        { "TITLE_TEXTURE_DOWNLOAD_REQUEST(_,_,_)", WREN_NETWORK_TITLE_TEXTURE_DOWNLOAD_REQUEST },
        { "UGC_TEXTURE_DOWNLOAD_REQUEST(_,_,_,_,_,_)", WREN_NETWORK_UGC_TEXTURE_DOWNLOAD_REQUEST },
        { "TEXTURE_DOWNLOAD_RELEASE(_)", WREN_NETWORK_TEXTURE_DOWNLOAD_RELEASE },
        { "TEXTURE_DOWNLOAD_HAS_FAILED(_)", WREN_NETWORK_TEXTURE_DOWNLOAD_HAS_FAILED },
        { "TEXTURE_DOWNLOAD_GET_NAME(_)", WREN_NETWORK_TEXTURE_DOWNLOAD_GET_NAME },
        { "GET_STATUS_OF_TEXTURE_DOWNLOAD(_)", WREN_NETWORK_GET_STATUS_OF_TEXTURE_DOWNLOAD },
        { "NETWORK_CHECK_ROS_LINK_WENTDOWN_NOT_NET()", WREN_NETWORK_NETWORK_CHECK_ROS_LINK_WENTDOWN_NOT_NET },
        { "NETWORK_SHOULD_SHOW_STRICT_NAT_WARNING()", WREN_NETWORK_NETWORK_SHOULD_SHOW_STRICT_NAT_WARNING },
        { "NETWORK_IS_CABLE_CONNECTED()", WREN_NETWORK_NETWORK_IS_CABLE_CONNECTED },
        { "NETWORK_HAVE_SCS_PRIVATE_MSG_PRIV()", WREN_NETWORK_NETWORK_HAVE_SCS_PRIVATE_MSG_PRIV },
        { "NETWORK_HAVE_ROS_SOCIAL_CLUB_PRIV()", WREN_NETWORK_NETWORK_HAVE_ROS_SOCIAL_CLUB_PRIV },
        { "NETWORK_HAVE_ROS_BANNED_PRIV()", WREN_NETWORK_NETWORK_HAVE_ROS_BANNED_PRIV },
        { "NETWORK_HAVE_ROS_CREATE_TICKET_PRIV()", WREN_NETWORK_NETWORK_HAVE_ROS_CREATE_TICKET_PRIV },
        { "NETWORK_HAVE_ROS_MULTIPLAYER_PRIV()", WREN_NETWORK_NETWORK_HAVE_ROS_MULTIPLAYER_PRIV },
        { "NETWORK_HAVE_ROS_LEADERBOARD_WRITE_PRIV()", WREN_NETWORK_NETWORK_HAVE_ROS_LEADERBOARD_WRITE_PRIV },
        { "NETWORK_HAS_ROS_PRIVILEGE(_)", WREN_NETWORK_NETWORK_HAS_ROS_PRIVILEGE },
        { "NETWORK_HAS_ROS_PRIVILEGE_END_DATE(_)", WREN_NETWORK_NETWORK_HAS_ROS_PRIVILEGE_END_DATE },
        { "NETWORK_HAS_ROS_PRIVILEGE_PLAYED_LAST_GEN()", WREN_NETWORK_NETWORK_HAS_ROS_PRIVILEGE_PLAYED_LAST_GEN },
        { "NETWORK_HAS_ROS_PRIVILEGE_SPECIAL_EDITION_CONTENT()", WREN_NETWORK_NETWORK_HAS_ROS_PRIVILEGE_SPECIAL_EDITION_CONTENT },
        { "NETWORK_START_COMMUNICATION_PERMISSIONS_CHECK(_)", WREN_NETWORK_NETWORK_START_COMMUNICATION_PERMISSIONS_CHECK },
        { "NETWORK_START_USER_CONTENT_PERMISSIONS_CHECK()", WREN_NETWORK_NETWORK_START_USER_CONTENT_PERMISSIONS_CHECK },
        { "NETWORK_SKIP_RADIO_RESET_NEXT_CLOSE()", WREN_NETWORK_NETWORK_SKIP_RADIO_RESET_NEXT_CLOSE },
        { "NETWORK_SKIP_RADIO_RESET_NEXT_OPEN()", WREN_NETWORK_NETWORK_SKIP_RADIO_RESET_NEXT_OPEN },
        { "NETWORK_SKIP_RADIO_WARNING()", WREN_NETWORK_NETWORK_SKIP_RADIO_WARNING },
        { "NETWORK_FORCE_LOCAL_PLAYER_SCAR_SYNC()", WREN_NETWORK_NETWORK_FORCE_LOCAL_PLAYER_SCAR_SYNC },
        { "NETWORK_DISABLE_LEAVE_REMOTE_PED_BEHIND(_)", WREN_NETWORK_NETWORK_DISABLE_LEAVE_REMOTE_PED_BEHIND },
        { "NETWORK_ALLOW_REMOTE_ATTACHMENT_MODIFICATION(_,_)", WREN_NETWORK_NETWORK_ALLOW_REMOTE_ATTACHMENT_MODIFICATION },
        { "NETWORK_SHOW_CHAT_RESTRICTION_MSC(_)", WREN_NETWORK_NETWORK_SHOW_CHAT_RESTRICTION_MSC },
        { "NETWORK_SHOW_PSN_UGC_RESTRICTION()", WREN_NETWORK_NETWORK_SHOW_PSN_UGC_RESTRICTION },
        { "NETWORK_IS_TITLE_UPDATE_REQUIRED()", WREN_NETWORK_NETWORK_IS_TITLE_UPDATE_REQUIRED },
        { "NETWORK_QUIT_MP_TO_DESKTOP()", WREN_NETWORK_NETWORK_QUIT_MP_TO_DESKTOP },
        { "NETWORK_IS_CONNECTED_VIA_RELAY(_)", WREN_NETWORK_NETWORK_IS_CONNECTED_VIA_RELAY },
        { "NETWORK_GET_AVERAGE_LATENCY(_)", WREN_NETWORK_NETWORK_GET_AVERAGE_LATENCY },
        { "NETWORK_GET_AVERAGE_PING(_)", WREN_NETWORK_NETWORK_GET_AVERAGE_PING },
        { "NETWORK_GET_AVERAGE_PACKET_LOSS(_)", WREN_NETWORK_NETWORK_GET_AVERAGE_PACKET_LOSS },
        { "NETWORK_GET_NUM_UNACKED_RELIABLES(_)", WREN_NETWORK_NETWORK_GET_NUM_UNACKED_RELIABLES },
        { "NETWORK_GET_UNRELIABLE_RESEND_COUNT(_)", WREN_NETWORK_NETWORK_GET_UNRELIABLE_RESEND_COUNT },
        { "NETWORK_GET_HIGHEST_RELIABLE_RESEND_COUNT(_)", WREN_NETWORK_NETWORK_GET_HIGHEST_RELIABLE_RESEND_COUNT },
        { "NETWORK_REPORT_CODE_TAMPER()", WREN_NETWORK_NETWORK_REPORT_CODE_TAMPER },
        { "NETWORK_GET_LAST_ENTITY_POS_RECEIVED_OVER_NETWORK(_)", WREN_NETWORK_NETWORK_GET_LAST_ENTITY_POS_RECEIVED_OVER_NETWORK },
        { "NETWORK_GET_LAST_PLAYER_POS_RECEIVED_OVER_NETWORK(_)", WREN_NETWORK_NETWORK_GET_LAST_PLAYER_POS_RECEIVED_OVER_NETWORK },
        { "NETWORK_GET_LAST_VEL_RECEIVED_OVER_NETWORK(_)", WREN_NETWORK_NETWORK_GET_LAST_VEL_RECEIVED_OVER_NETWORK },
        { "NETWORK_GET_PREDICTED_VELOCITY(_)", WREN_NETWORK_NETWORK_GET_PREDICTED_VELOCITY },
        { "NETWORK_DUMP_NET_IF_CONFIG()", WREN_NETWORK_NETWORK_DUMP_NET_IF_CONFIG },
        { "NETWORK_GET_SIGNALLING_INFO()", WREN_NETWORK_NETWORK_GET_SIGNALLING_INFO },
        { "NETWORK_GET_NET_STATISTICS_INFO()", WREN_NETWORK_NETWORK_GET_NET_STATISTICS_INFO },
        { "NETWORK_GET_PLAYER_ACCOUNT_ID(_)", WREN_NETWORK_NETWORK_GET_PLAYER_ACCOUNT_ID },
        { "NETWORK_UGC_NAV(_,_)", WREN_NETWORK_NETWORK_UGC_NAV },
        { "CREATE_OBJECT(_,_,_,_,_,_,_)", WREN_OBJECT_CREATE_OBJECT },
        { "CREATE_OBJECT_NO_OFFSET(_,_,_,_,_,_,_)", WREN_OBJECT_CREATE_OBJECT_NO_OFFSET },
        { "DELETE_OBJECT()", WREN_OBJECT_DELETE_OBJECT },
        { "PLACE_OBJECT_ON_GROUND_PROPERLY(_)", WREN_OBJECT_PLACE_OBJECT_ON_GROUND_PROPERLY },
        { "PLACE_OBJECT_ON_GROUND_OR_OBJECT_PROPERLY(_)", WREN_OBJECT_PLACE_OBJECT_ON_GROUND_OR_OBJECT_PROPERLY },
        { "ROTATE_OBJECT(_,_,_,_)", WREN_OBJECT_ROTATE_OBJECT },
        { "SLIDE_OBJECT(_,_,_,_,_,_,_,_)", WREN_OBJECT_SLIDE_OBJECT },
        { "SET_OBJECT_TARGETTABLE(_,_)", WREN_OBJECT_SET_OBJECT_TARGETTABLE },
        { "SET_OBJECT_FORCE_VEHICLES_TO_AVOID(_,_)", WREN_OBJECT_SET_OBJECT_FORCE_VEHICLES_TO_AVOID },
        { "GET_CLOSEST_OBJECT_OF_TYPE(_,_,_,_,_,_,_,_)", WREN_OBJECT_GET_CLOSEST_OBJECT_OF_TYPE },
        { "HAS_OBJECT_BEEN_BROKEN(_,_)", WREN_OBJECT_HAS_OBJECT_BEEN_BROKEN },
        { "HAS_CLOSEST_OBJECT_OF_TYPE_BEEN_BROKEN(_,_,_,_,_,_)", WREN_OBJECT_HAS_CLOSEST_OBJECT_OF_TYPE_BEEN_BROKEN },
        { "HAS_CLOSEST_OBJECT_OF_TYPE_BEEN_COMPLETELY_DESTROYED(_,_,_,_,_,_)", WREN_OBJECT_HAS_CLOSEST_OBJECT_OF_TYPE_BEEN_COMPLETELY_DESTROYED },
        { "GET_HAS_OBJECT_BEEN_COMPLETELY_DESTROYED(_)", WREN_OBJECT_GET_HAS_OBJECT_BEEN_COMPLETELY_DESTROYED },
        { "GET_OFFSET_FROM_COORD_AND_HEADING_IN_WORLD_COORDS(_,_,_,_,_,_,_)", WREN_OBJECT_GET_OFFSET_FROM_COORD_AND_HEADING_IN_WORLD_COORDS },
        { "GET_COORDS_AND_ROTATION_OF_CLOSEST_OBJECT_OF_TYPE(_,_,_,_,_,_)", WREN_OBJECT_GET_COORDS_AND_ROTATION_OF_CLOSEST_OBJECT_OF_TYPE },
        { "SET_STATE_OF_CLOSEST_DOOR_OF_TYPE(_,_,_,_,_,_,_)", WREN_OBJECT_SET_STATE_OF_CLOSEST_DOOR_OF_TYPE },
        { "GET_STATE_OF_CLOSEST_DOOR_OF_TYPE(_,_,_,_)", WREN_OBJECT_GET_STATE_OF_CLOSEST_DOOR_OF_TYPE },
        { "SET_LOCKED_UNSTREAMED_IN_DOOR_OF_TYPE(_,_,_,_,_,_,_,_)", WREN_OBJECT_SET_LOCKED_UNSTREAMED_IN_DOOR_OF_TYPE },
        { "PLAY_OBJECT_AUTO_START_ANIM(_)", WREN_OBJECT_PLAY_OBJECT_AUTO_START_ANIM },
        { "ADD_DOOR_TO_SYSTEM(_,_,_,_,_,_,_,_)", WREN_OBJECT_ADD_DOOR_TO_SYSTEM },
        { "REMOVE_DOOR_FROM_SYSTEM(_,_)", WREN_OBJECT_REMOVE_DOOR_FROM_SYSTEM },
        { "DOOR_SYSTEM_SET_DOOR_STATE(_,_,_,_)", WREN_OBJECT_DOOR_SYSTEM_SET_DOOR_STATE },
        { "DOOR_SYSTEM_GET_DOOR_STATE(_)", WREN_OBJECT_DOOR_SYSTEM_GET_DOOR_STATE },
        { "DOOR_SYSTEM_GET_DOOR_PENDING_STATE(_)", WREN_OBJECT_DOOR_SYSTEM_GET_DOOR_PENDING_STATE },
        { "DOOR_SYSTEM_SET_AUTOMATIC_RATE(_,_,_,_)", WREN_OBJECT_DOOR_SYSTEM_SET_AUTOMATIC_RATE },
        { "DOOR_SYSTEM_SET_AUTOMATIC_DISTANCE(_,_,_,_)", WREN_OBJECT_DOOR_SYSTEM_SET_AUTOMATIC_DISTANCE },
        { "DOOR_SYSTEM_SET_OPEN_RATIO(_,_,_,_)", WREN_OBJECT_DOOR_SYSTEM_SET_OPEN_RATIO },
        { "DOOR_SYSTEM_GET_AUTOMATIC_DISTANCE(_)", WREN_OBJECT_DOOR_SYSTEM_GET_AUTOMATIC_DISTANCE },
        { "DOOR_SYSTEM_GET_OPEN_RATIO(_)", WREN_OBJECT_DOOR_SYSTEM_GET_OPEN_RATIO },
        { "DOOR_SYSTEM_SET_SPRING_REMOVED(_,_,_,_)", WREN_OBJECT_DOOR_SYSTEM_SET_SPRING_REMOVED },
        { "DOOR_SYSTEM_SET_HOLD_OPEN(_,_)", WREN_OBJECT_DOOR_SYSTEM_SET_HOLD_OPEN },
        { "DOOR_SYSTEM_SET_DOOR_OPEN_FOR_RACES(_,_)", WREN_OBJECT_DOOR_SYSTEM_SET_DOOR_OPEN_FOR_RACES },
        { "IS_DOOR_REGISTERED_WITH_SYSTEM(_)", WREN_OBJECT_IS_DOOR_REGISTERED_WITH_SYSTEM },
        { "IS_DOOR_CLOSED(_)", WREN_OBJECT_IS_DOOR_CLOSED },
        { "OPEN_ALL_BARRIERS_FOR_RACE(_)", WREN_OBJECT_OPEN_ALL_BARRIERS_FOR_RACE },
        { "CLOSE_ALL_BARRIERS_FOR_RACE()", WREN_OBJECT_CLOSE_ALL_BARRIERS_FOR_RACE },
        { "DOOR_SYSTEM_GET_IS_PHYSICS_LOADED(_)", WREN_OBJECT_DOOR_SYSTEM_GET_IS_PHYSICS_LOADED },
        { "DOOR_SYSTEM_FIND_EXISTING_DOOR(_,_,_,_)", WREN_OBJECT_DOOR_SYSTEM_FIND_EXISTING_DOOR },
        { "IS_GARAGE_EMPTY(_,_,_)", WREN_OBJECT_IS_GARAGE_EMPTY },
        { "IS_PLAYER_ENTIRELY_INSIDE_GARAGE(_,_,_,_)", WREN_OBJECT_IS_PLAYER_ENTIRELY_INSIDE_GARAGE },
        { "IS_PLAYER_PARTIALLY_INSIDE_GARAGE(_,_,_)", WREN_OBJECT_IS_PLAYER_PARTIALLY_INSIDE_GARAGE },
        { "ARE_ENTITIES_ENTIRELY_INSIDE_GARAGE(_,_,_,_,_)", WREN_OBJECT_ARE_ENTITIES_ENTIRELY_INSIDE_GARAGE },
        { "IS_ANY_ENTITY_ENTIRELY_INSIDE_GARAGE(_,_,_,_,_)", WREN_OBJECT_IS_ANY_ENTITY_ENTIRELY_INSIDE_GARAGE },
        { "IS_OBJECT_ENTIRELY_INSIDE_GARAGE(_,_,_,_)", WREN_OBJECT_IS_OBJECT_ENTIRELY_INSIDE_GARAGE },
        { "IS_OBJECT_PARTIALLY_INSIDE_GARAGE(_,_,_)", WREN_OBJECT_IS_OBJECT_PARTIALLY_INSIDE_GARAGE },
        { "CLEAR_GARAGE(_,_)", WREN_OBJECT_CLEAR_GARAGE },
        { "CLEAR_OBJECTS_INSIDE_GARAGE(_,_,_,_,_)", WREN_OBJECT_CLEAR_OBJECTS_INSIDE_GARAGE },
        { "DISABLE_TIDYING_UP_IN_GARAGE(_,_)", WREN_OBJECT_DISABLE_TIDYING_UP_IN_GARAGE },
        { "ENABLE_SAVING_IN_GARAGE(_,_)", WREN_OBJECT_ENABLE_SAVING_IN_GARAGE },
        { "CLOSE_SAFEHOUSE_GARAGES()", WREN_OBJECT_CLOSE_SAFEHOUSE_GARAGES },
        { "DOES_OBJECT_OF_TYPE_EXIST_AT_COORDS(_,_,_,_,_,_)", WREN_OBJECT_DOES_OBJECT_OF_TYPE_EXIST_AT_COORDS },
        { "IS_POINT_IN_ANGLED_AREA(_,_,_,_,_,_,_,_,_,_,_,_)", WREN_OBJECT_IS_POINT_IN_ANGLED_AREA },
        { "SET_OBJECT_ALLOW_LOW_LOD_BUOYANCY(_,_)", WREN_OBJECT_SET_OBJECT_ALLOW_LOW_LOD_BUOYANCY },
        { "SET_OBJECT_PHYSICS_PARAMS(_,_,_,_,_,_,_,_,_,_,_,_)", WREN_OBJECT_SET_OBJECT_PHYSICS_PARAMS },
        { "GET_OBJECT_FRAGMENT_DAMAGE_HEALTH(_,_)", WREN_OBJECT_GET_OBJECT_FRAGMENT_DAMAGE_HEALTH },
        { "SET_ACTIVATE_OBJECT_PHYSICS_AS_SOON_AS_IT_IS_UNFROZEN(_,_)", WREN_OBJECT_SET_ACTIVATE_OBJECT_PHYSICS_AS_SOON_AS_IT_IS_UNFROZEN },
        { "IS_ANY_OBJECT_NEAR_POINT(_,_,_,_,_)", WREN_OBJECT_IS_ANY_OBJECT_NEAR_POINT },
        { "IS_OBJECT_NEAR_POINT(_,_,_,_,_)", WREN_OBJECT_IS_OBJECT_NEAR_POINT },
        { "REMOVE_OBJECT_HIGH_DETAIL_MODEL(_)", WREN_OBJECT_REMOVE_OBJECT_HIGH_DETAIL_MODEL },
        { "BREAK_OBJECT_FRAGMENT_CHILD(_,_,_)", WREN_OBJECT_BREAK_OBJECT_FRAGMENT_CHILD },
        { "DAMAGE_OBJECT_FRAGMENT_CHILD(_,_,_)", WREN_OBJECT_DAMAGE_OBJECT_FRAGMENT_CHILD },
        { "FIX_OBJECT_FRAGMENT(_)", WREN_OBJECT_FIX_OBJECT_FRAGMENT },
        { "TRACK_OBJECT_VISIBILITY(_)", WREN_OBJECT_TRACK_OBJECT_VISIBILITY },
        { "IS_OBJECT_VISIBLE(_)", WREN_OBJECT_IS_OBJECT_VISIBLE },
        { "SET_OBJECT_IS_SPECIAL_GOLFBALL(_,_)", WREN_OBJECT_SET_OBJECT_IS_SPECIAL_GOLFBALL },
        { "SET_OBJECT_TAKES_DAMAGE_FROM_COLLIDING_WITH_BUILDINGS(_,_)", WREN_OBJECT_SET_OBJECT_TAKES_DAMAGE_FROM_COLLIDING_WITH_BUILDINGS },
        { "ALLOW_DAMAGE_EVENTS_FOR_NON_NETWORKED_OBJECTS(_)", WREN_OBJECT_ALLOW_DAMAGE_EVENTS_FOR_NON_NETWORKED_OBJECTS },
        { "SET_CUTSCENES_WEAPON_FLASHLIGHT_ON_THIS_FRAME(_,_)", WREN_OBJECT_SET_CUTSCENES_WEAPON_FLASHLIGHT_ON_THIS_FRAME },
        { "GET_RAYFIRE_MAP_OBJECT(_,_,_,_,_)", WREN_OBJECT_GET_RAYFIRE_MAP_OBJECT },
        { "SET_STATE_OF_RAYFIRE_MAP_OBJECT(_,_)", WREN_OBJECT_SET_STATE_OF_RAYFIRE_MAP_OBJECT },
        { "GET_STATE_OF_RAYFIRE_MAP_OBJECT(_)", WREN_OBJECT_GET_STATE_OF_RAYFIRE_MAP_OBJECT },
        { "DOES_RAYFIRE_MAP_OBJECT_EXIST(_)", WREN_OBJECT_DOES_RAYFIRE_MAP_OBJECT_EXIST },
        { "GET_RAYFIRE_MAP_OBJECT_ANIM_PHASE(_)", WREN_OBJECT_GET_RAYFIRE_MAP_OBJECT_ANIM_PHASE },
        { "CREATE_PICKUP(_,_,_,_,_,_,_,_)", WREN_OBJECT_CREATE_PICKUP },
        { "CREATE_PICKUP_ROTATE(_,_,_,_,_,_,_,_,_,_,_,_)", WREN_OBJECT_CREATE_PICKUP_ROTATE },
        { "FORCE_PICKUP_ROTATE_FACE_UP()", WREN_OBJECT_FORCE_PICKUP_ROTATE_FACE_UP },
        { "SET_CUSTOM_PICKUP_WEAPON_HASH(_,_)", WREN_OBJECT_SET_CUSTOM_PICKUP_WEAPON_HASH },
        { "CREATE_AMBIENT_PICKUP(_,_,_,_,_,_,_,_,_)", WREN_OBJECT_CREATE_AMBIENT_PICKUP },
        { "CREATE_NON_NETWORKED_AMBIENT_PICKUP(_,_,_,_,_,_,_,_,_)", WREN_OBJECT_CREATE_NON_NETWORKED_AMBIENT_PICKUP },
        { "BLOCK_PLAYERS_FOR_AMBIENT_PICKUP(_,_)", WREN_OBJECT_BLOCK_PLAYERS_FOR_AMBIENT_PICKUP },
        { "CREATE_PORTABLE_PICKUP(_,_,_,_,_,_)", WREN_OBJECT_CREATE_PORTABLE_PICKUP },
        { "CREATE_NON_NETWORKED_PORTABLE_PICKUP(_,_,_,_,_,_)", WREN_OBJECT_CREATE_NON_NETWORKED_PORTABLE_PICKUP },
        { "ATTACH_PORTABLE_PICKUP_TO_PED(_,_)", WREN_OBJECT_ATTACH_PORTABLE_PICKUP_TO_PED },
        { "DETACH_PORTABLE_PICKUP_FROM_PED(_)", WREN_OBJECT_DETACH_PORTABLE_PICKUP_FROM_PED },
        { "FORCE_PORTABLE_PICKUP_LAST_ACCESSIBLE_POSITION_SETTING(_)", WREN_OBJECT_FORCE_PORTABLE_PICKUP_LAST_ACCESSIBLE_POSITION_SETTING },
        { "HIDE_PORTABLE_PICKUP_WHEN_DETACHED(_,_)", WREN_OBJECT_HIDE_PORTABLE_PICKUP_WHEN_DETACHED },
        { "SET_MAX_NUM_PORTABLE_PICKUPS_CARRIED_BY_PLAYER(_,_)", WREN_OBJECT_SET_MAX_NUM_PORTABLE_PICKUPS_CARRIED_BY_PLAYER },
        { "SET_LOCAL_PLAYER_CAN_COLLECT_PORTABLE_PICKUPS(_)", WREN_OBJECT_SET_LOCAL_PLAYER_CAN_COLLECT_PORTABLE_PICKUPS },
        { "GET_SAFE_PICKUP_COORDS(_,_,_,_,_)", WREN_OBJECT_GET_SAFE_PICKUP_COORDS },
        { "ADD_EXTENDED_PICKUP_PROBE_AREA(_,_,_,_)", WREN_OBJECT_ADD_EXTENDED_PICKUP_PROBE_AREA },
        { "CLEAR_EXTENDED_PICKUP_PROBE_AREAS()", WREN_OBJECT_CLEAR_EXTENDED_PICKUP_PROBE_AREAS },
        { "GET_PICKUP_COORDS(_)", WREN_OBJECT_GET_PICKUP_COORDS },
        { "SUPPRESS_PICKUP_SOUND_FOR_PICKUP(_,_)", WREN_OBJECT_SUPPRESS_PICKUP_SOUND_FOR_PICKUP },
        { "REMOVE_ALL_PICKUPS_OF_TYPE(_)", WREN_OBJECT_REMOVE_ALL_PICKUPS_OF_TYPE },
        { "HAS_PICKUP_BEEN_COLLECTED(_)", WREN_OBJECT_HAS_PICKUP_BEEN_COLLECTED },
        { "REMOVE_PICKUP(_)", WREN_OBJECT_REMOVE_PICKUP },
        { "CREATE_MONEY_PICKUPS(_,_,_,_,_,_)", WREN_OBJECT_CREATE_MONEY_PICKUPS },
        { "DOES_PICKUP_EXIST(_)", WREN_OBJECT_DOES_PICKUP_EXIST },
        { "DOES_PICKUP_OBJECT_EXIST(_)", WREN_OBJECT_DOES_PICKUP_OBJECT_EXIST },
        { "GET_PICKUP_OBJECT(_)", WREN_OBJECT_GET_PICKUP_OBJECT },
        { "IS_OBJECT_A_PICKUP(_)", WREN_OBJECT_IS_OBJECT_A_PICKUP },
        { "IS_OBJECT_A_PORTABLE_PICKUP(_)", WREN_OBJECT_IS_OBJECT_A_PORTABLE_PICKUP },
        { "DOES_PICKUP_OF_TYPE_EXIST_IN_AREA(_,_,_,_,_)", WREN_OBJECT_DOES_PICKUP_OF_TYPE_EXIST_IN_AREA },
        { "SET_PICKUP_REGENERATION_TIME(_,_)", WREN_OBJECT_SET_PICKUP_REGENERATION_TIME },
        { "FORCE_PICKUP_REGENERATE(_)", WREN_OBJECT_FORCE_PICKUP_REGENERATE },
        { "SET_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_OF_TYPE(_,_,_)", WREN_OBJECT_SET_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_OF_TYPE },
        { "SET_LOCAL_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_WITH_MODEL(_,_)", WREN_OBJECT_SET_LOCAL_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_WITH_MODEL },
        { "ALLOW_ALL_PLAYERS_TO_COLLECT_PICKUPS_OF_TYPE(_)", WREN_OBJECT_ALLOW_ALL_PLAYERS_TO_COLLECT_PICKUPS_OF_TYPE },
        { "SET_TEAM_PICKUP_OBJECT(_,_,_)", WREN_OBJECT_SET_TEAM_PICKUP_OBJECT },
        { "PREVENT_COLLECTION_OF_PORTABLE_PICKUP(_,_,_)", WREN_OBJECT_PREVENT_COLLECTION_OF_PORTABLE_PICKUP },
        { "SET_PICKUP_OBJECT_GLOW_WHEN_UNCOLLECTABLE(_,_)", WREN_OBJECT_SET_PICKUP_OBJECT_GLOW_WHEN_UNCOLLECTABLE },
        { "SET_PICKUP_GLOW_OFFSET(_,_)", WREN_OBJECT_SET_PICKUP_GLOW_OFFSET },
        { "SET_PICKUP_OBJECT_GLOW_OFFSET(_,_,_)", WREN_OBJECT_SET_PICKUP_OBJECT_GLOW_OFFSET },
        { "SET_OBJECT_GLOW_IN_SAME_TEAM(_)", WREN_OBJECT_SET_OBJECT_GLOW_IN_SAME_TEAM },
        { "SET_PICKUP_OBJECT_ARROW_MARKER(_,_)", WREN_OBJECT_SET_PICKUP_OBJECT_ARROW_MARKER },
        { "ALLOW_PICKUP_ARROW_MARKER_WHEN_UNCOLLECTABLE(_,_)", WREN_OBJECT_ALLOW_PICKUP_ARROW_MARKER_WHEN_UNCOLLECTABLE },
        { "GET_DEFAULT_AMMO_FOR_WEAPON_PICKUP(_)", WREN_OBJECT_GET_DEFAULT_AMMO_FOR_WEAPON_PICKUP },
        { "SET_PICKUP_GENERATION_RANGE_MULTIPLIER(_)", WREN_OBJECT_SET_PICKUP_GENERATION_RANGE_MULTIPLIER },
        { "GET_PICKUP_GENERATION_RANGE_MULTIPLIER()", WREN_OBJECT_GET_PICKUP_GENERATION_RANGE_MULTIPLIER },
        { "SET_ONLY_ALLOW_AMMO_COLLECTION_WHEN_LOW(_)", WREN_OBJECT_SET_ONLY_ALLOW_AMMO_COLLECTION_WHEN_LOW },
        { "SET_PICKUP_UNCOLLECTABLE(_,_)", WREN_OBJECT_SET_PICKUP_UNCOLLECTABLE },
        { "SET_PICKUP_TRANSPARENT_WHEN_UNCOLLECTABLE(_,_)", WREN_OBJECT_SET_PICKUP_TRANSPARENT_WHEN_UNCOLLECTABLE },
        { "SET_PICKUP_HIDDEN_WHEN_UNCOLLECTABLE(_,_)", WREN_OBJECT_SET_PICKUP_HIDDEN_WHEN_UNCOLLECTABLE },
        { "SET_PICKUP_OBJECT_TRANSPARENT_WHEN_UNCOLLECTABLE(_,_)", WREN_OBJECT_SET_PICKUP_OBJECT_TRANSPARENT_WHEN_UNCOLLECTABLE },
        { "SET_PICKUP_OBJECT_ALPHA_WHEN_TRANSPARENT(_)", WREN_OBJECT_SET_PICKUP_OBJECT_ALPHA_WHEN_TRANSPARENT },
        { "SET_PORTABLE_PICKUP_PERSIST(_,_)", WREN_OBJECT_SET_PORTABLE_PICKUP_PERSIST },
        { "ALLOW_PORTABLE_PICKUP_TO_MIGRATE_TO_NON_PARTICIPANTS(_,_)", WREN_OBJECT_ALLOW_PORTABLE_PICKUP_TO_MIGRATE_TO_NON_PARTICIPANTS },
        { "FORCE_ACTIVATE_PHYSICS_ON_UNFIXED_PICKUP(_,_)", WREN_OBJECT_FORCE_ACTIVATE_PHYSICS_ON_UNFIXED_PICKUP },
        { "ALLOW_PICKUP_BY_NONE_PARTICIPANT(_,_)", WREN_OBJECT_ALLOW_PICKUP_BY_NONE_PARTICIPANT },
        { "SUPPRESS_PICKUP_REWARD_TYPE(_,_)", WREN_OBJECT_SUPPRESS_PICKUP_REWARD_TYPE },
        { "CLEAR_ALL_PICKUP_REWARD_TYPE_SUPPRESSION()", WREN_OBJECT_CLEAR_ALL_PICKUP_REWARD_TYPE_SUPPRESSION },
        { "CLEAR_PICKUP_REWARD_TYPE_SUPPRESSION(_)", WREN_OBJECT_CLEAR_PICKUP_REWARD_TYPE_SUPPRESSION },
        { "RENDER_FAKE_PICKUP_GLOW(_,_,_,_)", WREN_OBJECT_RENDER_FAKE_PICKUP_GLOW },
        { "SET_PICKUP_OBJECT_COLLECTABLE_IN_VEHICLE(_)", WREN_OBJECT_SET_PICKUP_OBJECT_COLLECTABLE_IN_VEHICLE },
        { "SET_PICKUP_TRACK_DAMAGE_EVENTS(_,_)", WREN_OBJECT_SET_PICKUP_TRACK_DAMAGE_EVENTS },
        { "SET_ENTITY_FLAG_SUPPRESS_SHADOW(_,_)", WREN_OBJECT_SET_ENTITY_FLAG_SUPPRESS_SHADOW },
        { "SET_ENTITY_FLAG_RENDER_SMALL_SHADOW(_,_)", WREN_OBJECT_SET_ENTITY_FLAG_RENDER_SMALL_SHADOW },
        { "GET_WEAPON_TYPE_FROM_PICKUP_TYPE(_)", WREN_OBJECT_GET_WEAPON_TYPE_FROM_PICKUP_TYPE },
        { "GET_PICKUP_TYPE_FROM_WEAPON_HASH(_)", WREN_OBJECT_GET_PICKUP_TYPE_FROM_WEAPON_HASH },
        { "IS_PICKUP_WEAPON_OBJECT_VALID(_)", WREN_OBJECT_IS_PICKUP_WEAPON_OBJECT_VALID },
        { "GET_OBJECT_TINT_INDEX(_)", WREN_OBJECT_GET_OBJECT_TINT_INDEX },
        { "SET_OBJECT_TINT_INDEX(_,_)", WREN_OBJECT_SET_OBJECT_TINT_INDEX },
        { "SET_TINT_INDEX_CLOSEST_BUILDING_OF_TYPE(_,_,_,_,_,_)", WREN_OBJECT_SET_TINT_INDEX_CLOSEST_BUILDING_OF_TYPE },
        { "SET_PROP_TINT_INDEX(_,_)", WREN_OBJECT_SET_PROP_TINT_INDEX },
        { "SET_PROP_LIGHT_COLOR(_,_,_,_,_)", WREN_OBJECT_SET_PROP_LIGHT_COLOR },
        { "IS_PROP_LIGHT_OVERRIDEN(_)", WREN_OBJECT_IS_PROP_LIGHT_OVERRIDEN },
        { "SET_OBJECT_IS_VISIBLE_IN_MIRRORS(_,_)", WREN_OBJECT_SET_OBJECT_IS_VISIBLE_IN_MIRRORS },
        { "SET_OBJECT_SPEED_BOOST_AMOUNT(_,_)", WREN_OBJECT_SET_OBJECT_SPEED_BOOST_AMOUNT },
        { "SET_OBJECT_SPEED_BOOST_DURATION(_,_)", WREN_OBJECT_SET_OBJECT_SPEED_BOOST_DURATION },
        { "CONVERT_OLD_PICKUP_TYPE_TO_NEW(_)", WREN_OBJECT_CONVERT_OLD_PICKUP_TYPE_TO_NEW },
        { "SET_FORCE_OBJECT_THIS_FRAME(_,_,_,_)", WREN_OBJECT_SET_FORCE_OBJECT_THIS_FRAME },
        { "ONLY_CLEAN_UP_OBJECT_WHEN_OUT_OF_RANGE(_)", WREN_OBJECT_ONLY_CLEAN_UP_OBJECT_WHEN_OUT_OF_RANGE },
        { "SET_DISABLE_COLLISIONS_BETWEEN_CARS_AND_CAR_PARACHUTE(_)", WREN_OBJECT_SET_DISABLE_COLLISIONS_BETWEEN_CARS_AND_CAR_PARACHUTE },
        { "SET_PROJECTILES_SHOULD_EXPLODE_ON_CONTACT(_,_)", WREN_OBJECT_SET_PROJECTILES_SHOULD_EXPLODE_ON_CONTACT },
        { "SET_DRIVE_ARTICULATED_JOINT(_,_,_)", WREN_OBJECT_SET_DRIVE_ARTICULATED_JOINT },
        { "SET_DRIVE_ARTICULATED_JOINT_WITH_INFLICTOR(_,_,_,_)", WREN_OBJECT_SET_DRIVE_ARTICULATED_JOINT_WITH_INFLICTOR },
        { "SET_OBJECT_IS_A_PRESSURE_PLATE(_,_)", WREN_OBJECT_SET_OBJECT_IS_A_PRESSURE_PLATE },
        { "SET_WEAPON_IMPACTS_APPLY_GREATER_FORCE(_,_)", WREN_OBJECT_SET_WEAPON_IMPACTS_APPLY_GREATER_FORCE },
        { "GET_IS_ARTICULATED_JOINT_AT_MIN_ANGLE(_,_)", WREN_OBJECT_GET_IS_ARTICULATED_JOINT_AT_MIN_ANGLE },
        { "GET_IS_ARTICULATED_JOINT_AT_MAX_ANGLE(_,_)", WREN_OBJECT_GET_IS_ARTICULATED_JOINT_AT_MAX_ANGLE },
        { "SET_IS_OBJECT_ARTICULATED(_,_)", WREN_OBJECT_SET_IS_OBJECT_ARTICULATED },
        { "SET_IS_OBJECT_BALL(_,_)", WREN_OBJECT_SET_IS_OBJECT_BALL },
        { "IS_CONTROL_ENABLED(_,_)", WREN_PAD_IS_CONTROL_ENABLED },
        { "IS_CONTROL_PRESSED(_,_)", WREN_PAD_IS_CONTROL_PRESSED },
        { "IS_CONTROL_RELEASED(_,_)", WREN_PAD_IS_CONTROL_RELEASED },
        { "IS_CONTROL_JUST_PRESSED(_,_)", WREN_PAD_IS_CONTROL_JUST_PRESSED },
        { "IS_CONTROL_JUST_RELEASED(_,_)", WREN_PAD_IS_CONTROL_JUST_RELEASED },
        { "GET_CONTROL_VALUE(_,_)", WREN_PAD_GET_CONTROL_VALUE },
        { "GET_CONTROL_NORMAL(_,_)", WREN_PAD_GET_CONTROL_NORMAL },
        { "SET_USE_ADJUSTED_MOUSE_COORDS(_)", WREN_PAD_SET_USE_ADJUSTED_MOUSE_COORDS },
        { "GET_CONTROL_UNBOUND_NORMAL(_,_)", WREN_PAD_GET_CONTROL_UNBOUND_NORMAL },
        { "SET_CONTROL_VALUE_NEXT_FRAME(_,_,_)", WREN_PAD_SET_CONTROL_VALUE_NEXT_FRAME },
        { "IS_DISABLED_CONTROL_PRESSED(_,_)", WREN_PAD_IS_DISABLED_CONTROL_PRESSED },
        { "IS_DISABLED_CONTROL_RELEASED(_,_)", WREN_PAD_IS_DISABLED_CONTROL_RELEASED },
        { "IS_DISABLED_CONTROL_JUST_PRESSED(_,_)", WREN_PAD_IS_DISABLED_CONTROL_JUST_PRESSED },
        { "IS_DISABLED_CONTROL_JUST_RELEASED(_,_)", WREN_PAD_IS_DISABLED_CONTROL_JUST_RELEASED },
        { "GET_DISABLED_CONTROL_NORMAL(_,_)", WREN_PAD_GET_DISABLED_CONTROL_NORMAL },
        { "GET_DISABLED_CONTROL_UNBOUND_NORMAL(_,_)", WREN_PAD_GET_DISABLED_CONTROL_UNBOUND_NORMAL },
        { "GET_CONTROL_HOW_LONG_AGO(_)", WREN_PAD_GET_CONTROL_HOW_LONG_AGO },
        { "IS_USING_KEYBOARD_AND_MOUSE(_)", WREN_PAD_IS_USING_KEYBOARD_AND_MOUSE },
        { "IS_USING_CURSOR(_)", WREN_PAD_IS_USING_CURSOR },
        { "SET_CURSOR_POSITION(_,_)", WREN_PAD_SET_CURSOR_POSITION },
        { "IS_USING_REMOTE_PLAY(_)", WREN_PAD_IS_USING_REMOTE_PLAY },
        { "HAVE_CONTROLS_CHANGED(_)", WREN_PAD_HAVE_CONTROLS_CHANGED },
        { "GET_CONTROL_INSTRUCTIONAL_BUTTONS_STRING(_,_,_)", WREN_PAD_GET_CONTROL_INSTRUCTIONAL_BUTTONS_STRING },
        { "GET_CONTROL_GROUP_INSTRUCTIONAL_BUTTONS_STRING(_,_,_)", WREN_PAD_GET_CONTROL_GROUP_INSTRUCTIONAL_BUTTONS_STRING },
        { "SET_CONTROL_LIGHT_EFFECT_COLOR(_,_,_,_)", WREN_PAD_SET_CONTROL_LIGHT_EFFECT_COLOR },
        { "CLEAR_CONTROL_LIGHT_EFFECT(_)", WREN_PAD_CLEAR_CONTROL_LIGHT_EFFECT },
        { "SET_CONTROL_SHAKE(_,_,_)", WREN_PAD_SET_CONTROL_SHAKE },
        { "SET_CONTROL_TRIGGER_SHAKE(_,_,_,_,_)", WREN_PAD_SET_CONTROL_TRIGGER_SHAKE },
        { "STOP_CONTROL_SHAKE(_)", WREN_PAD_STOP_CONTROL_SHAKE },
        { "SET_CONTROL_SHAKE_SUPPRESSED_ID(_,_)", WREN_PAD_SET_CONTROL_SHAKE_SUPPRESSED_ID },
        { "CLEAR_CONTROL_SHAKE_SUPPRESSED_ID(_)", WREN_PAD_CLEAR_CONTROL_SHAKE_SUPPRESSED_ID },
        { "IS_LOOK_INVERTED()", WREN_PAD_IS_LOOK_INVERTED },
        { "IS_MOUSE_LOOK_INVERTED()", WREN_PAD_IS_MOUSE_LOOK_INVERTED },
        { "GET_LOCAL_PLAYER_AIM_STATE()", WREN_PAD_GET_LOCAL_PLAYER_AIM_STATE },
        { "GET_LOCAL_PLAYER_GAMEPAD_AIM_STATE()", WREN_PAD_GET_LOCAL_PLAYER_GAMEPAD_AIM_STATE },
        { "GET_IS_USING_ALTERNATE_HANDBRAKE()", WREN_PAD_GET_IS_USING_ALTERNATE_HANDBRAKE },
        { "GET_IS_USING_ALTERNATE_DRIVEBY()", WREN_PAD_GET_IS_USING_ALTERNATE_DRIVEBY },
        { "GET_ALLOW_MOVEMENT_WHILE_ZOOMED()", WREN_PAD_GET_ALLOW_MOVEMENT_WHILE_ZOOMED },
        { "SET_PLAYERPAD_SHAKES_WHEN_CONTROLLER_DISABLED(_)", WREN_PAD_SET_PLAYERPAD_SHAKES_WHEN_CONTROLLER_DISABLED },
        { "SET_INPUT_EXCLUSIVE(_,_)", WREN_PAD_SET_INPUT_EXCLUSIVE },
        { "DISABLE_CONTROL_ACTION(_,_,_)", WREN_PAD_DISABLE_CONTROL_ACTION },
        { "ENABLE_CONTROL_ACTION(_,_,_)", WREN_PAD_ENABLE_CONTROL_ACTION },
        { "DISABLE_ALL_CONTROL_ACTIONS(_)", WREN_PAD_DISABLE_ALL_CONTROL_ACTIONS },
        { "ENABLE_ALL_CONTROL_ACTIONS(_)", WREN_PAD_ENABLE_ALL_CONTROL_ACTIONS },
        { "INIT_PC_SCRIPTED_CONTROLS(_)", WREN_PAD_INIT_PC_SCRIPTED_CONTROLS },
        { "SWITCH_PC_SCRIPTED_CONTROLS(_)", WREN_PAD_SWITCH_PC_SCRIPTED_CONTROLS },
        { "SHUTDOWN_PC_SCRIPTED_CONTROLS()", WREN_PAD_SHUTDOWN_PC_SCRIPTED_CONTROLS },
        { "ALLOW_ALTERNATIVE_SCRIPT_CONTROLS_LAYOUT(_)", WREN_PAD_ALLOW_ALTERNATIVE_SCRIPT_CONTROLS_LAYOUT },
        { "SET_ROADS_IN_AREA(_,_,_,_,_,_,_,_)", WREN_PATHFIND_SET_ROADS_IN_AREA },
        { "SET_ROADS_IN_ANGLED_AREA(_,_,_,_,_,_,_,_,_,_)", WREN_PATHFIND_SET_ROADS_IN_ANGLED_AREA },
        { "SET_PED_PATHS_IN_AREA(_,_,_,_,_,_,_,_)", WREN_PATHFIND_SET_PED_PATHS_IN_AREA },
        { "GET_SAFE_COORD_FOR_PED(_,_,_,_,_)", WREN_PATHFIND_GET_SAFE_COORD_FOR_PED },
        { "GET_CLOSEST_VEHICLE_NODE(_,_,_,_,_,_)", WREN_PATHFIND_GET_CLOSEST_VEHICLE_NODE },
        { "GET_CLOSEST_MAJOR_VEHICLE_NODE(_,_,_,_,_)", WREN_PATHFIND_GET_CLOSEST_MAJOR_VEHICLE_NODE },
        { "GET_CLOSEST_VEHICLE_NODE_WITH_HEADING(_,_,_,_,_,_)", WREN_PATHFIND_GET_CLOSEST_VEHICLE_NODE_WITH_HEADING },
        { "GET_NTH_CLOSEST_VEHICLE_NODE(_,_,_,_,_,_,_)", WREN_PATHFIND_GET_NTH_CLOSEST_VEHICLE_NODE },
        { "GET_NTH_CLOSEST_VEHICLE_NODE_ID(_,_,_,_,_,_,_)", WREN_PATHFIND_GET_NTH_CLOSEST_VEHICLE_NODE_ID },
        { "GET_NTH_CLOSEST_VEHICLE_NODE_WITH_HEADING(_,_,_,_,_,_,_)", WREN_PATHFIND_GET_NTH_CLOSEST_VEHICLE_NODE_WITH_HEADING },
        { "GET_NTH_CLOSEST_VEHICLE_NODE_ID_WITH_HEADING(_,_,_,_,_,_,_)", WREN_PATHFIND_GET_NTH_CLOSEST_VEHICLE_NODE_ID_WITH_HEADING },
        { "GET_NTH_CLOSEST_VEHICLE_NODE_FAVOUR_DIRECTION(_,_,_,_,_,_,_,_,_,_)", WREN_PATHFIND_GET_NTH_CLOSEST_VEHICLE_NODE_FAVOUR_DIRECTION },
        { "GET_VEHICLE_NODE_PROPERTIES(_,_,_)", WREN_PATHFIND_GET_VEHICLE_NODE_PROPERTIES },
        { "IS_VEHICLE_NODE_ID_VALID(_)", WREN_PATHFIND_IS_VEHICLE_NODE_ID_VALID },
        { "GET_VEHICLE_NODE_POSITION(_)", WREN_PATHFIND_GET_VEHICLE_NODE_POSITION },
        { "GET_VEHICLE_NODE_IS_GPS_ALLOWED(_)", WREN_PATHFIND_GET_VEHICLE_NODE_IS_GPS_ALLOWED },
        { "GET_VEHICLE_NODE_IS_SWITCHED_OFF(_)", WREN_PATHFIND_GET_VEHICLE_NODE_IS_SWITCHED_OFF },
        { "GET_CLOSEST_ROAD(_,_,_,_,_,_)", WREN_PATHFIND_GET_CLOSEST_ROAD },
        { "SET_ALLOW_STREAM_PROLOGUE_NODES(_)", WREN_PATHFIND_SET_ALLOW_STREAM_PROLOGUE_NODES },
        { "SET_ALLOW_STREAM_HEIST_ISLAND_NODES(_)", WREN_PATHFIND_SET_ALLOW_STREAM_HEIST_ISLAND_NODES },
        { "ARE_NODES_LOADED_FOR_AREA(_,_,_,_)", WREN_PATHFIND_ARE_NODES_LOADED_FOR_AREA },
        { "REQUEST_PATH_NODES_IN_AREA_THIS_FRAME(_,_,_,_)", WREN_PATHFIND_REQUEST_PATH_NODES_IN_AREA_THIS_FRAME },
        { "SET_ROADS_BACK_TO_ORIGINAL(_,_,_,_,_,_,_)", WREN_PATHFIND_SET_ROADS_BACK_TO_ORIGINAL },
        { "SET_ROADS_BACK_TO_ORIGINAL_IN_ANGLED_AREA(_,_,_,_,_,_,_,_)", WREN_PATHFIND_SET_ROADS_BACK_TO_ORIGINAL_IN_ANGLED_AREA },
        { "SET_AMBIENT_PED_RANGE_MULTIPLIER_THIS_FRAME(_)", WREN_PATHFIND_SET_AMBIENT_PED_RANGE_MULTIPLIER_THIS_FRAME },
        { "ADJUST_AMBIENT_PED_SPAWN_DENSITIES_THIS_FRAME(_,_,_,_,_,_,_)", WREN_PATHFIND_ADJUST_AMBIENT_PED_SPAWN_DENSITIES_THIS_FRAME },
        { "SET_PED_PATHS_BACK_TO_ORIGINAL(_,_,_,_,_,_,_)", WREN_PATHFIND_SET_PED_PATHS_BACK_TO_ORIGINAL },
        { "GET_RANDOM_VEHICLE_NODE(_,_,_,_,_,_,_)", WREN_PATHFIND_GET_RANDOM_VEHICLE_NODE },
        { "GET_STREET_NAME_AT_COORD(_,_,_)", WREN_PATHFIND_GET_STREET_NAME_AT_COORD },
        { "GENERATE_DIRECTIONS_TO_COORD(_,_,_,_)", WREN_PATHFIND_GENERATE_DIRECTIONS_TO_COORD },
        { "SET_IGNORE_NO_GPS_FLAG(_)", WREN_PATHFIND_SET_IGNORE_NO_GPS_FLAG },
        { "SET_IGNORE_NO_GPS_FLAG_UNTIL_FIRST_NORMAL_NODE(_)", WREN_PATHFIND_SET_IGNORE_NO_GPS_FLAG_UNTIL_FIRST_NORMAL_NODE },
        { "SET_GPS_DISABLED_ZONE(_,_,_,_,_,_)", WREN_PATHFIND_SET_GPS_DISABLED_ZONE },
        { "GET_GPS_BLIP_ROUTE_LENGTH()", WREN_PATHFIND_GET_GPS_BLIP_ROUTE_LENGTH },
        { "GET_POS_ALONG_GPS_TYPE_ROUTE(_,_,_)", WREN_PATHFIND_GET_POS_ALONG_GPS_TYPE_ROUTE },
        { "GET_GPS_BLIP_ROUTE_FOUND()", WREN_PATHFIND_GET_GPS_BLIP_ROUTE_FOUND },
        { "GET_ROAD_BOUNDARY_USING_HEADING(_,_,_,_)", WREN_PATHFIND_GET_ROAD_BOUNDARY_USING_HEADING },
        { "GET_POSITION_BY_SIDE_OF_ROAD(_,_,_,_)", WREN_PATHFIND_GET_POSITION_BY_SIDE_OF_ROAD },
        { "IS_POINT_ON_ROAD(_,_,_,_)", WREN_PATHFIND_IS_POINT_ON_ROAD },
        { "GET_NEXT_GPS_DISABLED_ZONE_INDEX()", WREN_PATHFIND_GET_NEXT_GPS_DISABLED_ZONE_INDEX },
        { "SET_GPS_DISABLED_ZONE_AT_INDEX(_,_,_,_,_,_,_)", WREN_PATHFIND_SET_GPS_DISABLED_ZONE_AT_INDEX },
        { "CLEAR_GPS_DISABLED_ZONE_AT_INDEX(_)", WREN_PATHFIND_CLEAR_GPS_DISABLED_ZONE_AT_INDEX },
        { "ADD_NAVMESH_REQUIRED_REGION(_,_,_)", WREN_PATHFIND_ADD_NAVMESH_REQUIRED_REGION },
        { "REMOVE_NAVMESH_REQUIRED_REGIONS()", WREN_PATHFIND_REMOVE_NAVMESH_REQUIRED_REGIONS },
        { "IS_NAVMESH_REQUIRED_REGION_IN_USE()", WREN_PATHFIND_IS_NAVMESH_REQUIRED_REGION_IN_USE },
        { "DISABLE_NAVMESH_IN_AREA(_,_,_,_,_,_,_)", WREN_PATHFIND_DISABLE_NAVMESH_IN_AREA },
        { "ARE_ALL_NAVMESH_REGIONS_LOADED()", WREN_PATHFIND_ARE_ALL_NAVMESH_REGIONS_LOADED },
        { "IS_NAVMESH_LOADED_IN_AREA(_,_,_,_,_,_)", WREN_PATHFIND_IS_NAVMESH_LOADED_IN_AREA },
        { "GET_NUM_NAVMESHES_EXISTING_IN_AREA(_,_,_,_,_,_)", WREN_PATHFIND_GET_NUM_NAVMESHES_EXISTING_IN_AREA },
        { "ADD_NAVMESH_BLOCKING_OBJECT(_,_,_,_,_,_,_,_,_)", WREN_PATHFIND_ADD_NAVMESH_BLOCKING_OBJECT },
        { "UPDATE_NAVMESH_BLOCKING_OBJECT(_,_,_,_,_,_,_,_,_)", WREN_PATHFIND_UPDATE_NAVMESH_BLOCKING_OBJECT },
        { "REMOVE_NAVMESH_BLOCKING_OBJECT(_)", WREN_PATHFIND_REMOVE_NAVMESH_BLOCKING_OBJECT },
        { "DOES_NAVMESH_BLOCKING_OBJECT_EXIST(_)", WREN_PATHFIND_DOES_NAVMESH_BLOCKING_OBJECT_EXIST },
        { "GET_APPROX_HEIGHT_FOR_POINT(_,_)", WREN_PATHFIND_GET_APPROX_HEIGHT_FOR_POINT },
        { "GET_APPROX_HEIGHT_FOR_AREA(_,_,_,_)", WREN_PATHFIND_GET_APPROX_HEIGHT_FOR_AREA },
        { "GET_APPROX_FLOOR_FOR_POINT(_,_)", WREN_PATHFIND_GET_APPROX_FLOOR_FOR_POINT },
        { "GET_APPROX_FLOOR_FOR_AREA(_,_,_,_)", WREN_PATHFIND_GET_APPROX_FLOOR_FOR_AREA },
        { "CALCULATE_TRAVEL_DISTANCE_BETWEEN_POINTS(_,_,_,_,_,_)", WREN_PATHFIND_CALCULATE_TRAVEL_DISTANCE_BETWEEN_POINTS },
        { "CREATE_PED(_,_,_,_,_,_,_,_)", WREN_PED_CREATE_PED },
        { "DELETE_PED()", WREN_PED_DELETE_PED },
        { "CLONE_PED(_,_,_,_)", WREN_PED_CLONE_PED },
        { "CLONE_PED_ALT(_,_,_,_,_)", WREN_PED_CLONE_PED_ALT },
        { "CLONE_PED_TO_TARGET(_,_)", WREN_PED_CLONE_PED_TO_TARGET },
        { "CLONE_PED_TO_TARGET_ALT(_,_,_)", WREN_PED_CLONE_PED_TO_TARGET_ALT },
        { "IS_PED_IN_VEHICLE(_,_,_)", WREN_PED_IS_PED_IN_VEHICLE },
        { "IS_PED_IN_MODEL(_,_)", WREN_PED_IS_PED_IN_MODEL },
        { "IS_PED_IN_ANY_VEHICLE(_,_)", WREN_PED_IS_PED_IN_ANY_VEHICLE },
        { "IS_COP_PED_IN_AREA_3D(_,_,_,_,_,_)", WREN_PED_IS_COP_PED_IN_AREA_3D },
        { "IS_PED_INJURED(_)", WREN_PED_IS_PED_INJURED },
        { "IS_PED_HURT(_)", WREN_PED_IS_PED_HURT },
        { "IS_PED_FATALLY_INJURED(_)", WREN_PED_IS_PED_FATALLY_INJURED },
        { "IS_PED_DEAD_OR_DYING(_,_)", WREN_PED_IS_PED_DEAD_OR_DYING },
        { "IS_CONVERSATION_PED_DEAD(_)", WREN_PED_IS_CONVERSATION_PED_DEAD },
        { "IS_PED_AIMING_FROM_COVER(_)", WREN_PED_IS_PED_AIMING_FROM_COVER },
        { "IS_PED_RELOADING(_)", WREN_PED_IS_PED_RELOADING },
        { "IS_PED_A_PLAYER(_)", WREN_PED_IS_PED_A_PLAYER },
        { "CREATE_PED_INSIDE_VEHICLE(_,_,_,_,_,_)", WREN_PED_CREATE_PED_INSIDE_VEHICLE },
        { "SET_PED_DESIRED_HEADING(_,_)", WREN_PED_SET_PED_DESIRED_HEADING },
        { "FORCE_ALL_HEADING_VALUES_TO_ALIGN(_)", WREN_PED_FORCE_ALL_HEADING_VALUES_TO_ALIGN },
        { "IS_PED_FACING_PED(_,_,_)", WREN_PED_IS_PED_FACING_PED },
        { "IS_PED_IN_MELEE_COMBAT(_)", WREN_PED_IS_PED_IN_MELEE_COMBAT },
        { "IS_PED_STOPPED(_)", WREN_PED_IS_PED_STOPPED },
        { "IS_PED_SHOOTING_IN_AREA(_,_,_,_,_,_,_,_,_)", WREN_PED_IS_PED_SHOOTING_IN_AREA },
        { "IS_ANY_PED_SHOOTING_IN_AREA(_,_,_,_,_,_,_,_)", WREN_PED_IS_ANY_PED_SHOOTING_IN_AREA },
        { "IS_PED_SHOOTING(_)", WREN_PED_IS_PED_SHOOTING },
        { "SET_PED_ACCURACY(_,_)", WREN_PED_SET_PED_ACCURACY },
        { "GET_PED_ACCURACY(_)", WREN_PED_GET_PED_ACCURACY },
        { "SET_AMBIENT_LAW_PED_ACCURACY_MODIFIER(_)", WREN_PED_SET_AMBIENT_LAW_PED_ACCURACY_MODIFIER },
        { "IS_PED_MODEL(_,_)", WREN_PED_IS_PED_MODEL },
        { "EXPLODE_PED_HEAD(_,_)", WREN_PED_EXPLODE_PED_HEAD },
        { "REMOVE_PED_ELEGANTLY()", WREN_PED_REMOVE_PED_ELEGANTLY },
        { "ADD_ARMOUR_TO_PED(_,_)", WREN_PED_ADD_ARMOUR_TO_PED },
        { "SET_PED_ARMOUR(_,_)", WREN_PED_SET_PED_ARMOUR },
        { "SET_PED_INTO_VEHICLE(_,_,_)", WREN_PED_SET_PED_INTO_VEHICLE },
        { "SET_PED_ALLOW_VEHICLES_OVERRIDE(_,_)", WREN_PED_SET_PED_ALLOW_VEHICLES_OVERRIDE },
        { "CAN_CREATE_RANDOM_PED(_)", WREN_PED_CAN_CREATE_RANDOM_PED },
        { "CREATE_RANDOM_PED(_,_,_)", WREN_PED_CREATE_RANDOM_PED },
        { "CREATE_RANDOM_PED_AS_DRIVER(_,_)", WREN_PED_CREATE_RANDOM_PED_AS_DRIVER },
        { "CAN_CREATE_RANDOM_DRIVER()", WREN_PED_CAN_CREATE_RANDOM_DRIVER },
        { "CAN_CREATE_RANDOM_BIKE_RIDER()", WREN_PED_CAN_CREATE_RANDOM_BIKE_RIDER },
        { "SET_PED_MOVE_ANIMS_BLEND_OUT(_)", WREN_PED_SET_PED_MOVE_ANIMS_BLEND_OUT },
        { "SET_PED_CAN_BE_DRAGGED_OUT(_,_)", WREN_PED_SET_PED_CAN_BE_DRAGGED_OUT },
        { "SET_PED_ALLOW_HURT_COMBAT_FOR_ALL_MISSION_PEDS(_)", WREN_PED_SET_PED_ALLOW_HURT_COMBAT_FOR_ALL_MISSION_PEDS },
        { "IS_PED_MALE(_)", WREN_PED_IS_PED_MALE },
        { "IS_PED_HUMAN(_)", WREN_PED_IS_PED_HUMAN },
        { "GET_VEHICLE_PED_IS_IN(_,_)", WREN_PED_GET_VEHICLE_PED_IS_IN },
        { "RESET_PED_LAST_VEHICLE(_)", WREN_PED_RESET_PED_LAST_VEHICLE },
        { "SET_PED_DENSITY_MULTIPLIER_THIS_FRAME(_)", WREN_PED_SET_PED_DENSITY_MULTIPLIER_THIS_FRAME },
        { "SET_SCENARIO_PED_DENSITY_MULTIPLIER_THIS_FRAME(_,_)", WREN_PED_SET_SCENARIO_PED_DENSITY_MULTIPLIER_THIS_FRAME },
        { "SUPPRESS_AMBIENT_PED_AGGRESSIVE_CLEANUP_THIS_FRAME()", WREN_PED_SUPPRESS_AMBIENT_PED_AGGRESSIVE_CLEANUP_THIS_FRAME },
        { "SET_SCRIPTED_CONVERSION_COORD_THIS_FRAME(_,_,_)", WREN_PED_SET_SCRIPTED_CONVERSION_COORD_THIS_FRAME },
        { "SET_PED_NON_CREATION_AREA(_,_,_,_,_,_)", WREN_PED_SET_PED_NON_CREATION_AREA },
        { "CLEAR_PED_NON_CREATION_AREA()", WREN_PED_CLEAR_PED_NON_CREATION_AREA },
        { "INSTANTLY_FILL_PED_POPULATION()", WREN_PED_INSTANTLY_FILL_PED_POPULATION },
        { "IS_PED_ON_MOUNT(_)", WREN_PED_IS_PED_ON_MOUNT },
        { "GET_MOUNT(_)", WREN_PED_GET_MOUNT },
        { "IS_PED_ON_VEHICLE(_)", WREN_PED_IS_PED_ON_VEHICLE },
        { "IS_PED_ON_SPECIFIC_VEHICLE(_,_)", WREN_PED_IS_PED_ON_SPECIFIC_VEHICLE },
        { "SET_PED_MONEY(_,_)", WREN_PED_SET_PED_MONEY },
        { "GET_PED_MONEY(_)", WREN_PED_GET_PED_MONEY },
        { "SET_HEALTH_SNACKS_CARRIED_BY_ALL_NEW_PEDS(_,_)", WREN_PED_SET_HEALTH_SNACKS_CARRIED_BY_ALL_NEW_PEDS },
        { "SET_AMBIENT_PEDS_DROP_MONEY(_)", WREN_PED_SET_AMBIENT_PEDS_DROP_MONEY },
        { "SET_BLOCKING_OF_NON_TEMPORARY_EVENTS_FOR_AMBIENT_PEDS_THIS_FRAME(_)", WREN_PED_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS_FOR_AMBIENT_PEDS_THIS_FRAME },
        { "SET_PED_SUFFERS_CRITICAL_HITS(_,_)", WREN_PED_SET_PED_SUFFERS_CRITICAL_HITS },
        { "SET_PED_UPPER_BODY_DAMAGE_ONLY(_,_)", WREN_PED_SET_PED_UPPER_BODY_DAMAGE_ONLY },
        { "IS_PED_SITTING_IN_VEHICLE(_,_)", WREN_PED_IS_PED_SITTING_IN_VEHICLE },
        { "IS_PED_SITTING_IN_ANY_VEHICLE(_)", WREN_PED_IS_PED_SITTING_IN_ANY_VEHICLE },
        { "IS_PED_ON_FOOT(_)", WREN_PED_IS_PED_ON_FOOT },
        { "IS_PED_ON_ANY_BIKE(_)", WREN_PED_IS_PED_ON_ANY_BIKE },
        { "IS_PED_PLANTING_BOMB(_)", WREN_PED_IS_PED_PLANTING_BOMB },
        { "GET_DEAD_PED_PICKUP_COORDS(_,_,_)", WREN_PED_GET_DEAD_PED_PICKUP_COORDS },
        { "IS_PED_IN_ANY_BOAT(_)", WREN_PED_IS_PED_IN_ANY_BOAT },
        { "IS_PED_IN_ANY_SUB(_)", WREN_PED_IS_PED_IN_ANY_SUB },
        { "IS_PED_IN_ANY_HELI(_)", WREN_PED_IS_PED_IN_ANY_HELI },
        { "IS_PED_IN_ANY_PLANE(_)", WREN_PED_IS_PED_IN_ANY_PLANE },
        { "IS_PED_IN_FLYING_VEHICLE(_)", WREN_PED_IS_PED_IN_FLYING_VEHICLE },
        { "SET_PED_DIES_IN_WATER(_,_)", WREN_PED_SET_PED_DIES_IN_WATER },
        { "GET_PED_DIES_IN_WATER(_)", WREN_PED_GET_PED_DIES_IN_WATER },
        { "SET_PED_DIES_IN_SINKING_VEHICLE(_,_)", WREN_PED_SET_PED_DIES_IN_SINKING_VEHICLE },
        { "GET_PED_ARMOUR(_)", WREN_PED_GET_PED_ARMOUR },
        { "SET_PED_STAY_IN_VEHICLE_WHEN_JACKED(_,_)", WREN_PED_SET_PED_STAY_IN_VEHICLE_WHEN_JACKED },
        { "SET_PED_CAN_BE_SHOT_IN_VEHICLE(_,_)", WREN_PED_SET_PED_CAN_BE_SHOT_IN_VEHICLE },
        { "GET_PED_LAST_DAMAGE_BONE(_)", WREN_PED_GET_PED_LAST_DAMAGE_BONE },
        { "CLEAR_PED_LAST_DAMAGE_BONE(_)", WREN_PED_CLEAR_PED_LAST_DAMAGE_BONE },
        { "SET_AI_WEAPON_DAMAGE_MODIFIER(_)", WREN_PED_SET_AI_WEAPON_DAMAGE_MODIFIER },
        { "RESET_AI_WEAPON_DAMAGE_MODIFIER()", WREN_PED_RESET_AI_WEAPON_DAMAGE_MODIFIER },
        { "SET_AI_MELEE_WEAPON_DAMAGE_MODIFIER(_)", WREN_PED_SET_AI_MELEE_WEAPON_DAMAGE_MODIFIER },
        { "RESET_AI_MELEE_WEAPON_DAMAGE_MODIFIER()", WREN_PED_RESET_AI_MELEE_WEAPON_DAMAGE_MODIFIER },
        { "SET_TREAT_AS_AMBIENT_PED_FOR_DRIVER_LOCKON(_,_)", WREN_PED_SET_TREAT_AS_AMBIENT_PED_FOR_DRIVER_LOCKON },
        { "SET_PED_CAN_BE_TARGETTED(_,_)", WREN_PED_SET_PED_CAN_BE_TARGETTED },
        { "SET_PED_CAN_BE_TARGETTED_BY_TEAM(_,_,_)", WREN_PED_SET_PED_CAN_BE_TARGETTED_BY_TEAM },
        { "SET_PED_CAN_BE_TARGETTED_BY_PLAYER(_,_,_)", WREN_PED_SET_PED_CAN_BE_TARGETTED_BY_PLAYER },
        { "SET_ALLOW_LOCKON_TO_PED_IF_FRIENDLY(_,_)", WREN_PED_SET_ALLOW_LOCKON_TO_PED_IF_FRIENDLY },
        { "SET_USE_CAMERA_HEADING_FOR_DESIRED_DIRECTION_LOCK_ON_TEST(_,_)", WREN_PED_SET_USE_CAMERA_HEADING_FOR_DESIRED_DIRECTION_LOCK_ON_TEST },
        { "IS_PED_IN_ANY_POLICE_VEHICLE(_)", WREN_PED_IS_PED_IN_ANY_POLICE_VEHICLE },
        { "FORCE_PED_TO_OPEN_PARACHUTE(_)", WREN_PED_FORCE_PED_TO_OPEN_PARACHUTE },
        { "IS_PED_IN_PARACHUTE_FREE_FALL(_)", WREN_PED_IS_PED_IN_PARACHUTE_FREE_FALL },
        { "IS_PED_FALLING(_)", WREN_PED_IS_PED_FALLING },
        { "IS_PED_JUMPING(_)", WREN_PED_IS_PED_JUMPING },
        { "IS_PED_LANDING(_)", WREN_PED_IS_PED_LANDING },
        { "IS_PED_DOING_A_BEAST_JUMP(_)", WREN_PED_IS_PED_DOING_A_BEAST_JUMP },
        { "IS_PED_CLIMBING(_)", WREN_PED_IS_PED_CLIMBING },
        { "IS_PED_VAULTING(_)", WREN_PED_IS_PED_VAULTING },
        { "IS_PED_DIVING(_)", WREN_PED_IS_PED_DIVING },
        { "IS_PED_JUMPING_OUT_OF_VEHICLE(_)", WREN_PED_IS_PED_JUMPING_OUT_OF_VEHICLE },
        { "IS_PED_OPENING_DOOR(_)", WREN_PED_IS_PED_OPENING_DOOR },
        { "GET_PED_PARACHUTE_STATE(_)", WREN_PED_GET_PED_PARACHUTE_STATE },
        { "GET_PED_PARACHUTE_LANDING_TYPE(_)", WREN_PED_GET_PED_PARACHUTE_LANDING_TYPE },
        { "SET_PED_PARACHUTE_TINT_INDEX(_,_)", WREN_PED_SET_PED_PARACHUTE_TINT_INDEX },
        { "GET_PED_PARACHUTE_TINT_INDEX(_)", WREN_PED_GET_PED_PARACHUTE_TINT_INDEX },
        { "SET_PED_RESERVE_PARACHUTE_TINT_INDEX(_,_)", WREN_PED_SET_PED_RESERVE_PARACHUTE_TINT_INDEX },
        { "CREATE_PARACHUTE_BAG_OBJECT(_,_,_)", WREN_PED_CREATE_PARACHUTE_BAG_OBJECT },
        { "SET_PED_DUCKING(_,_)", WREN_PED_SET_PED_DUCKING },
        { "IS_PED_DUCKING(_)", WREN_PED_IS_PED_DUCKING },
        { "IS_PED_IN_ANY_TAXI(_)", WREN_PED_IS_PED_IN_ANY_TAXI },
        { "SET_PED_ID_RANGE(_,_)", WREN_PED_SET_PED_ID_RANGE },
        { "SET_PED_HIGHLY_PERCEPTIVE(_,_)", WREN_PED_SET_PED_HIGHLY_PERCEPTIVE },
        { "SET_COP_PERCEPTION_OVERRIDES(_,_,_,_,_,_,_)", WREN_PED_SET_COP_PERCEPTION_OVERRIDES },
        { "SET_PED_INJURED_ON_GROUND_BEHAVIOUR(_,_)", WREN_PED_SET_PED_INJURED_ON_GROUND_BEHAVIOUR },
        { "DISABLE_PED_INJURED_ON_GROUND_BEHAVIOUR(_)", WREN_PED_DISABLE_PED_INJURED_ON_GROUND_BEHAVIOUR },
        { "SET_PED_SEEING_RANGE(_,_)", WREN_PED_SET_PED_SEEING_RANGE },
        { "SET_PED_HEARING_RANGE(_,_)", WREN_PED_SET_PED_HEARING_RANGE },
        { "SET_PED_VISUAL_FIELD_MIN_ANGLE(_,_)", WREN_PED_SET_PED_VISUAL_FIELD_MIN_ANGLE },
        { "SET_PED_VISUAL_FIELD_MAX_ANGLE(_,_)", WREN_PED_SET_PED_VISUAL_FIELD_MAX_ANGLE },
        { "SET_PED_VISUAL_FIELD_MIN_ELEVATION_ANGLE(_,_)", WREN_PED_SET_PED_VISUAL_FIELD_MIN_ELEVATION_ANGLE },
        { "SET_PED_VISUAL_FIELD_MAX_ELEVATION_ANGLE(_,_)", WREN_PED_SET_PED_VISUAL_FIELD_MAX_ELEVATION_ANGLE },
        { "SET_PED_VISUAL_FIELD_PERIPHERAL_RANGE(_,_)", WREN_PED_SET_PED_VISUAL_FIELD_PERIPHERAL_RANGE },
        { "SET_PED_VISUAL_FIELD_CENTER_ANGLE(_,_)", WREN_PED_SET_PED_VISUAL_FIELD_CENTER_ANGLE },
        { "GET_PED_VISUAL_FIELD_CENTER_ANGLE(_)", WREN_PED_GET_PED_VISUAL_FIELD_CENTER_ANGLE },
        { "SET_PED_STEALTH_MOVEMENT(_,_,_)", WREN_PED_SET_PED_STEALTH_MOVEMENT },
        { "GET_PED_STEALTH_MOVEMENT(_)", WREN_PED_GET_PED_STEALTH_MOVEMENT },
        { "CREATE_GROUP(_)", WREN_PED_CREATE_GROUP },
        { "SET_PED_AS_GROUP_LEADER(_,_)", WREN_PED_SET_PED_AS_GROUP_LEADER },
        { "SET_PED_AS_GROUP_MEMBER(_,_)", WREN_PED_SET_PED_AS_GROUP_MEMBER },
        { "SET_PED_CAN_TELEPORT_TO_GROUP_LEADER(_,_,_)", WREN_PED_SET_PED_CAN_TELEPORT_TO_GROUP_LEADER },
        { "REMOVE_GROUP(_)", WREN_PED_REMOVE_GROUP },
        { "REMOVE_PED_FROM_GROUP(_)", WREN_PED_REMOVE_PED_FROM_GROUP },
        { "IS_PED_GROUP_MEMBER(_,_)", WREN_PED_IS_PED_GROUP_MEMBER },
        { "IS_PED_HANGING_ON_TO_VEHICLE(_)", WREN_PED_IS_PED_HANGING_ON_TO_VEHICLE },
        { "SET_GROUP_SEPARATION_RANGE(_,_)", WREN_PED_SET_GROUP_SEPARATION_RANGE },
        { "SET_PED_MIN_GROUND_TIME_FOR_STUNGUN(_,_)", WREN_PED_SET_PED_MIN_GROUND_TIME_FOR_STUNGUN },
        { "IS_PED_PRONE(_)", WREN_PED_IS_PED_PRONE },
        { "IS_PED_IN_COMBAT(_,_)", WREN_PED_IS_PED_IN_COMBAT },
        { "GET_PED_TARGET_FROM_COMBAT_PED(_,_)", WREN_PED_GET_PED_TARGET_FROM_COMBAT_PED },
        { "CAN_PED_IN_COMBAT_SEE_TARGET(_,_)", WREN_PED_CAN_PED_IN_COMBAT_SEE_TARGET },
        { "IS_PED_DOING_DRIVEBY(_)", WREN_PED_IS_PED_DOING_DRIVEBY },
        { "IS_PED_JACKING(_)", WREN_PED_IS_PED_JACKING },
        { "IS_PED_BEING_JACKED(_)", WREN_PED_IS_PED_BEING_JACKED },
        { "IS_PED_BEING_STUNNED(_,_)", WREN_PED_IS_PED_BEING_STUNNED },
        { "GET_PEDS_JACKER(_)", WREN_PED_GET_PEDS_JACKER },
        { "GET_JACK_TARGET(_)", WREN_PED_GET_JACK_TARGET },
        { "IS_PED_FLEEING(_)", WREN_PED_IS_PED_FLEEING },
        { "IS_PED_IN_COVER(_,_)", WREN_PED_IS_PED_IN_COVER },
        { "IS_PED_IN_COVER_FACING_LEFT(_)", WREN_PED_IS_PED_IN_COVER_FACING_LEFT },
        { "IS_PED_IN_HIGH_COVER(_)", WREN_PED_IS_PED_IN_HIGH_COVER },
        { "IS_PED_GOING_INTO_COVER(_)", WREN_PED_IS_PED_GOING_INTO_COVER },
        { "SET_PED_PINNED_DOWN(_,_,_)", WREN_PED_SET_PED_PINNED_DOWN },
        { "GET_SEAT_PED_IS_TRYING_TO_ENTER(_)", WREN_PED_GET_SEAT_PED_IS_TRYING_TO_ENTER },
        { "GET_VEHICLE_PED_IS_TRYING_TO_ENTER(_)", WREN_PED_GET_VEHICLE_PED_IS_TRYING_TO_ENTER },
        { "GET_PED_SOURCE_OF_DEATH(_)", WREN_PED_GET_PED_SOURCE_OF_DEATH },
        { "GET_PED_CAUSE_OF_DEATH(_)", WREN_PED_GET_PED_CAUSE_OF_DEATH },
        { "GET_PED_TIME_OF_DEATH(_)", WREN_PED_GET_PED_TIME_OF_DEATH },
        { "COUNT_PEDS_IN_COMBAT_WITH_TARGET(_)", WREN_PED_COUNT_PEDS_IN_COMBAT_WITH_TARGET },
        { "COUNT_PEDS_IN_COMBAT_WITH_TARGET_WITHIN_RADIUS(_,_,_,_,_)", WREN_PED_COUNT_PEDS_IN_COMBAT_WITH_TARGET_WITHIN_RADIUS },
        { "SET_PED_RELATIONSHIP_GROUP_DEFAULT_HASH(_,_)", WREN_PED_SET_PED_RELATIONSHIP_GROUP_DEFAULT_HASH },
        { "SET_PED_RELATIONSHIP_GROUP_HASH(_,_)", WREN_PED_SET_PED_RELATIONSHIP_GROUP_HASH },
        { "SET_RELATIONSHIP_BETWEEN_GROUPS(_,_,_)", WREN_PED_SET_RELATIONSHIP_BETWEEN_GROUPS },
        { "CLEAR_RELATIONSHIP_BETWEEN_GROUPS(_,_,_)", WREN_PED_CLEAR_RELATIONSHIP_BETWEEN_GROUPS },
        { "ADD_RELATIONSHIP_GROUP(_)", WREN_PED_ADD_RELATIONSHIP_GROUP },
        { "REMOVE_RELATIONSHIP_GROUP(_)", WREN_PED_REMOVE_RELATIONSHIP_GROUP },
        { "DOES_RELATIONSHIP_GROUP_EXIST(_)", WREN_PED_DOES_RELATIONSHIP_GROUP_EXIST },
        { "GET_RELATIONSHIP_BETWEEN_PEDS(_,_)", WREN_PED_GET_RELATIONSHIP_BETWEEN_PEDS },
        { "GET_PED_RELATIONSHIP_GROUP_DEFAULT_HASH(_)", WREN_PED_GET_PED_RELATIONSHIP_GROUP_DEFAULT_HASH },
        { "GET_PED_RELATIONSHIP_GROUP_HASH(_)", WREN_PED_GET_PED_RELATIONSHIP_GROUP_HASH },
        { "GET_RELATIONSHIP_BETWEEN_GROUPS(_,_)", WREN_PED_GET_RELATIONSHIP_BETWEEN_GROUPS },
        { "SET_RELATIONSHIP_GROUP_AFFECTS_WANTED_LEVEL(_,_)", WREN_PED_SET_RELATIONSHIP_GROUP_AFFECTS_WANTED_LEVEL },
        { "TELL_GROUP_PEDS_IN_AREA_TO_ATTACK(_,_,_,_,_,_)", WREN_PED_TELL_GROUP_PEDS_IN_AREA_TO_ATTACK },
        { "SET_PED_CAN_BE_TARGETED_WITHOUT_LOS(_,_)", WREN_PED_SET_PED_CAN_BE_TARGETED_WITHOUT_LOS },
        { "SET_PED_TO_INFORM_RESPECTED_FRIENDS(_,_,_)", WREN_PED_SET_PED_TO_INFORM_RESPECTED_FRIENDS },
        { "IS_PED_RESPONDING_TO_EVENT(_,_)", WREN_PED_IS_PED_RESPONDING_TO_EVENT },
        { "GET_POS_FROM_FIRED_EVENT(_,_)", WREN_PED_GET_POS_FROM_FIRED_EVENT },
        { "SET_PED_FIRING_PATTERN(_,_)", WREN_PED_SET_PED_FIRING_PATTERN },
        { "SET_PED_SHOOT_RATE(_,_)", WREN_PED_SET_PED_SHOOT_RATE },
        { "SET_COMBAT_FLOAT(_,_,_)", WREN_PED_SET_COMBAT_FLOAT },
        { "GET_COMBAT_FLOAT(_,_)", WREN_PED_GET_COMBAT_FLOAT },
        { "GET_GROUP_SIZE(_)", WREN_PED_GET_GROUP_SIZE },
        { "DOES_GROUP_EXIST(_)", WREN_PED_DOES_GROUP_EXIST },
        { "GET_PED_GROUP_INDEX(_)", WREN_PED_GET_PED_GROUP_INDEX },
        { "IS_PED_IN_GROUP(_)", WREN_PED_IS_PED_IN_GROUP },
        { "GET_PLAYER_PED_IS_FOLLOWING(_)", WREN_PED_GET_PLAYER_PED_IS_FOLLOWING },
        { "SET_GROUP_FORMATION(_,_)", WREN_PED_SET_GROUP_FORMATION },
        { "SET_GROUP_FORMATION_SPACING(_,_,_,_)", WREN_PED_SET_GROUP_FORMATION_SPACING },
        { "RESET_GROUP_FORMATION_DEFAULT_SPACING(_)", WREN_PED_RESET_GROUP_FORMATION_DEFAULT_SPACING },
        { "GET_VEHICLE_PED_IS_USING(_)", WREN_PED_GET_VEHICLE_PED_IS_USING },
        { "GET_VEHICLE_PED_IS_ENTERING(_)", WREN_PED_GET_VEHICLE_PED_IS_ENTERING },
        { "SET_PED_GRAVITY(_,_)", WREN_PED_SET_PED_GRAVITY },
        { "APPLY_DAMAGE_TO_PED(_,_,_,_)", WREN_PED_APPLY_DAMAGE_TO_PED },
        { "GET_TIME_PED_DAMAGED_BY_WEAPON(_,_)", WREN_PED_GET_TIME_PED_DAMAGED_BY_WEAPON },
        { "SET_PED_ALLOWED_TO_DUCK(_,_)", WREN_PED_SET_PED_ALLOWED_TO_DUCK },
        { "SET_PED_NEVER_LEAVES_GROUP(_,_)", WREN_PED_SET_PED_NEVER_LEAVES_GROUP },
        { "GET_PED_TYPE(_)", WREN_PED_GET_PED_TYPE },
        { "SET_PED_AS_COP(_,_)", WREN_PED_SET_PED_AS_COP },
        { "SET_PED_HEALTH_PENDING_LAST_DAMAGE_EVENT_OVERRIDE_FLAG(_)", WREN_PED_SET_PED_HEALTH_PENDING_LAST_DAMAGE_EVENT_OVERRIDE_FLAG },
        { "SET_PED_MAX_HEALTH(_,_)", WREN_PED_SET_PED_MAX_HEALTH },
        { "GET_PED_MAX_HEALTH(_)", WREN_PED_GET_PED_MAX_HEALTH },
        { "SET_PED_MAX_TIME_IN_WATER(_,_)", WREN_PED_SET_PED_MAX_TIME_IN_WATER },
        { "SET_PED_MAX_TIME_UNDERWATER(_,_)", WREN_PED_SET_PED_MAX_TIME_UNDERWATER },
        { "SET_CORPSE_RAGDOLL_FRICTION(_,_)", WREN_PED_SET_CORPSE_RAGDOLL_FRICTION },
        { "SET_PED_VEHICLE_FORCED_SEAT_USAGE(_,_,_,_,_)", WREN_PED_SET_PED_VEHICLE_FORCED_SEAT_USAGE },
        { "CLEAR_ALL_PED_VEHICLE_FORCED_SEAT_USAGE(_)", WREN_PED_CLEAR_ALL_PED_VEHICLE_FORCED_SEAT_USAGE },
        { "SET_PED_CAN_BE_KNOCKED_OFF_BIKE(_,_)", WREN_PED_SET_PED_CAN_BE_KNOCKED_OFF_BIKE },
        { "SET_PED_CAN_BE_KNOCKED_OFF_VEHICLE(_,_)", WREN_PED_SET_PED_CAN_BE_KNOCKED_OFF_VEHICLE },
        { "CAN_KNOCK_PED_OFF_VEHICLE(_)", WREN_PED_CAN_KNOCK_PED_OFF_VEHICLE },
        { "KNOCK_PED_OFF_VEHICLE(_)", WREN_PED_KNOCK_PED_OFF_VEHICLE },
        { "SET_PED_COORDS_NO_GANG(_,_,_,_)", WREN_PED_SET_PED_COORDS_NO_GANG },
        { "GET_PED_AS_GROUP_MEMBER(_,_)", WREN_PED_GET_PED_AS_GROUP_MEMBER },
        { "GET_PED_AS_GROUP_LEADER(_)", WREN_PED_GET_PED_AS_GROUP_LEADER },
        { "SET_PED_KEEP_TASK(_,_)", WREN_PED_SET_PED_KEEP_TASK },
        { "SET_PED_ALLOW_MINOR_REACTIONS_AS_MISSION_PED(_,_)", WREN_PED_SET_PED_ALLOW_MINOR_REACTIONS_AS_MISSION_PED },
        { "IS_PED_SWIMMING(_)", WREN_PED_IS_PED_SWIMMING },
        { "IS_PED_SWIMMING_UNDER_WATER(_)", WREN_PED_IS_PED_SWIMMING_UNDER_WATER },
        { "SET_PED_COORDS_KEEP_VEHICLE(_,_,_,_)", WREN_PED_SET_PED_COORDS_KEEP_VEHICLE },
        { "SET_PED_DIES_IN_VEHICLE(_,_)", WREN_PED_SET_PED_DIES_IN_VEHICLE },
        { "SET_CREATE_RANDOM_COPS(_)", WREN_PED_SET_CREATE_RANDOM_COPS },
        { "SET_CREATE_RANDOM_COPS_NOT_ON_SCENARIOS(_)", WREN_PED_SET_CREATE_RANDOM_COPS_NOT_ON_SCENARIOS },
        { "SET_CREATE_RANDOM_COPS_ON_SCENARIOS(_)", WREN_PED_SET_CREATE_RANDOM_COPS_ON_SCENARIOS },
        { "CAN_CREATE_RANDOM_COPS()", WREN_PED_CAN_CREATE_RANDOM_COPS },
        { "SET_PED_AS_ENEMY(_,_)", WREN_PED_SET_PED_AS_ENEMY },
        { "SET_PED_CAN_SMASH_GLASS(_,_,_)", WREN_PED_SET_PED_CAN_SMASH_GLASS },
        { "IS_PED_IN_ANY_TRAIN(_)", WREN_PED_IS_PED_IN_ANY_TRAIN },
        { "IS_PED_GETTING_INTO_A_VEHICLE(_)", WREN_PED_IS_PED_GETTING_INTO_A_VEHICLE },
        { "IS_PED_TRYING_TO_ENTER_A_LOCKED_VEHICLE(_)", WREN_PED_IS_PED_TRYING_TO_ENTER_A_LOCKED_VEHICLE },
        { "SET_ENABLE_HANDCUFFS(_,_)", WREN_PED_SET_ENABLE_HANDCUFFS },
        { "SET_ENABLE_BOUND_ANKLES(_,_)", WREN_PED_SET_ENABLE_BOUND_ANKLES },
        { "SET_ENABLE_SCUBA(_,_)", WREN_PED_SET_ENABLE_SCUBA },
        { "SET_CAN_ATTACK_FRIENDLY(_,_,_)", WREN_PED_SET_CAN_ATTACK_FRIENDLY },
        { "GET_PED_ALERTNESS(_)", WREN_PED_GET_PED_ALERTNESS },
        { "SET_PED_ALERTNESS(_,_)", WREN_PED_SET_PED_ALERTNESS },
        { "SET_PED_GET_OUT_UPSIDE_DOWN_VEHICLE(_,_)", WREN_PED_SET_PED_GET_OUT_UPSIDE_DOWN_VEHICLE },
        { "SET_PED_MOVEMENT_CLIPSET(_,_,_)", WREN_PED_SET_PED_MOVEMENT_CLIPSET },
        { "RESET_PED_MOVEMENT_CLIPSET(_,_)", WREN_PED_RESET_PED_MOVEMENT_CLIPSET },
        { "SET_PED_STRAFE_CLIPSET(_,_)", WREN_PED_SET_PED_STRAFE_CLIPSET },
        { "RESET_PED_STRAFE_CLIPSET(_)", WREN_PED_RESET_PED_STRAFE_CLIPSET },
        { "SET_PED_WEAPON_MOVEMENT_CLIPSET(_,_)", WREN_PED_SET_PED_WEAPON_MOVEMENT_CLIPSET },
        { "RESET_PED_WEAPON_MOVEMENT_CLIPSET(_)", WREN_PED_RESET_PED_WEAPON_MOVEMENT_CLIPSET },
        { "SET_PED_DRIVE_BY_CLIPSET_OVERRIDE(_,_)", WREN_PED_SET_PED_DRIVE_BY_CLIPSET_OVERRIDE },
        { "CLEAR_PED_DRIVE_BY_CLIPSET_OVERRIDE(_)", WREN_PED_CLEAR_PED_DRIVE_BY_CLIPSET_OVERRIDE },
        { "SET_PED_MOTION_IN_COVER_CLIPSET_OVERRIDE(_,_)", WREN_PED_SET_PED_MOTION_IN_COVER_CLIPSET_OVERRIDE },
        { "CLEAR_PED_MOTION_IN_COVER_CLIPSET_OVERRIDE(_)", WREN_PED_CLEAR_PED_MOTION_IN_COVER_CLIPSET_OVERRIDE },
        { "CLEAR_PED_FALL_UPPER_BODY_CLIPSET_OVERRIDE(_)", WREN_PED_CLEAR_PED_FALL_UPPER_BODY_CLIPSET_OVERRIDE },
        { "SET_PED_IN_VEHICLE_CONTEXT(_,_)", WREN_PED_SET_PED_IN_VEHICLE_CONTEXT },
        { "RESET_PED_IN_VEHICLE_CONTEXT(_)", WREN_PED_RESET_PED_IN_VEHICLE_CONTEXT },
        { "IS_SCRIPTED_SCENARIO_PED_USING_CONDITIONAL_ANIM(_,_,_)", WREN_PED_IS_SCRIPTED_SCENARIO_PED_USING_CONDITIONAL_ANIM },
        { "SET_PED_ALTERNATE_WALK_ANIM(_,_,_,_,_)", WREN_PED_SET_PED_ALTERNATE_WALK_ANIM },
        { "CLEAR_PED_ALTERNATE_WALK_ANIM(_,_)", WREN_PED_CLEAR_PED_ALTERNATE_WALK_ANIM },
        { "SET_PED_ALTERNATE_MOVEMENT_ANIM(_,_,_,_,_,_)", WREN_PED_SET_PED_ALTERNATE_MOVEMENT_ANIM },
        { "CLEAR_PED_ALTERNATE_MOVEMENT_ANIM(_,_,_)", WREN_PED_CLEAR_PED_ALTERNATE_MOVEMENT_ANIM },
        { "SET_PED_GESTURE_GROUP(_,_)", WREN_PED_SET_PED_GESTURE_GROUP },
        { "GET_ANIM_INITIAL_OFFSET_POSITION(_,_,_,_,_,_,_,_,_,_)", WREN_PED_GET_ANIM_INITIAL_OFFSET_POSITION },
        { "GET_ANIM_INITIAL_OFFSET_ROTATION(_,_,_,_,_,_,_,_,_,_)", WREN_PED_GET_ANIM_INITIAL_OFFSET_ROTATION },
        { "GET_PED_DRAWABLE_VARIATION(_,_)", WREN_PED_GET_PED_DRAWABLE_VARIATION },
        { "GET_NUMBER_OF_PED_DRAWABLE_VARIATIONS(_,_)", WREN_PED_GET_NUMBER_OF_PED_DRAWABLE_VARIATIONS },
        { "GET_PED_TEXTURE_VARIATION(_,_)", WREN_PED_GET_PED_TEXTURE_VARIATION },
        { "GET_NUMBER_OF_PED_TEXTURE_VARIATIONS(_,_,_)", WREN_PED_GET_NUMBER_OF_PED_TEXTURE_VARIATIONS },
        { "GET_NUMBER_OF_PED_PROP_DRAWABLE_VARIATIONS(_,_)", WREN_PED_GET_NUMBER_OF_PED_PROP_DRAWABLE_VARIATIONS },
        { "GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS(_,_,_)", WREN_PED_GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS },
        { "GET_PED_PALETTE_VARIATION(_,_)", WREN_PED_GET_PED_PALETTE_VARIATION },
        { "GET_MP_OUTFIT_DATA_FROM_METADATA()", WREN_PED_GET_MP_OUTFIT_DATA_FROM_METADATA },
        { "GET_FM_MALE_SHOP_PED_APPAREL_ITEM_INDEX(_)", WREN_PED_GET_FM_MALE_SHOP_PED_APPAREL_ITEM_INDEX },
        { "GET_FM_FEMALE_SHOP_PED_APPAREL_ITEM_INDEX(_)", WREN_PED_GET_FM_FEMALE_SHOP_PED_APPAREL_ITEM_INDEX },
        { "IS_PED_COMPONENT_VARIATION_VALID(_,_,_,_)", WREN_PED_IS_PED_COMPONENT_VARIATION_VALID },
        { "SET_PED_COMPONENT_VARIATION(_,_,_,_,_)", WREN_PED_SET_PED_COMPONENT_VARIATION },
        { "SET_PED_RANDOM_COMPONENT_VARIATION(_,_)", WREN_PED_SET_PED_RANDOM_COMPONENT_VARIATION },
        { "SET_PED_RANDOM_PROPS(_)", WREN_PED_SET_PED_RANDOM_PROPS },
        { "SET_PED_DEFAULT_COMPONENT_VARIATION(_)", WREN_PED_SET_PED_DEFAULT_COMPONENT_VARIATION },
        { "SET_PED_BLEND_FROM_PARENTS(_,_,_,_,_)", WREN_PED_SET_PED_BLEND_FROM_PARENTS },
        { "SET_PED_HEAD_BLEND_DATA(_,_,_,_,_,_,_,_,_,_,_)", WREN_PED_SET_PED_HEAD_BLEND_DATA },
        { "GET_PED_HEAD_BLEND_DATA(_)", WREN_PED_GET_PED_HEAD_BLEND_DATA },
        { "UPDATE_PED_HEAD_BLEND_DATA(_,_,_,_)", WREN_PED_UPDATE_PED_HEAD_BLEND_DATA },
        { "SET_HEAD_BLEND_EYE_COLOR(_,_)", WREN_PED_SET_HEAD_BLEND_EYE_COLOR },
        { "GET_HEAD_BLEND_EYE_COLOR(_)", WREN_PED_GET_HEAD_BLEND_EYE_COLOR },
        { "SET_PED_HEAD_OVERLAY(_,_,_,_)", WREN_PED_SET_PED_HEAD_OVERLAY },
        { "GET_PED_HEAD_OVERLAY(_,_)", WREN_PED_GET_PED_HEAD_OVERLAY },
        { "GET_PED_HEAD_OVERLAY_NUM(_)", WREN_PED_GET_PED_HEAD_OVERLAY_NUM },
        { "SET_PED_HEAD_OVERLAY_TINT(_,_,_,_,_)", WREN_PED_SET_PED_HEAD_OVERLAY_TINT },
        { "SET_PED_HAIR_TINT(_,_,_)", WREN_PED_SET_PED_HAIR_TINT },
        { "GET_NUM_PED_HAIR_TINTS()", WREN_PED_GET_NUM_PED_HAIR_TINTS },
        { "GET_NUM_PED_MAKEUP_TINTS()", WREN_PED_GET_NUM_PED_MAKEUP_TINTS },
        { "GET_PED_HAIR_TINT_COLOR(_)", WREN_PED_GET_PED_HAIR_TINT_COLOR },
        { "GET_PED_MAKEUP_TINT_COLOR(_)", WREN_PED_GET_PED_MAKEUP_TINT_COLOR },
        { "IS_PED_HAIR_TINT_FOR_CREATOR(_)", WREN_PED_IS_PED_HAIR_TINT_FOR_CREATOR },
        { "GET_DEFAULT_SECONDARY_TINT_FOR_CREATOR(_)", WREN_PED_GET_DEFAULT_SECONDARY_TINT_FOR_CREATOR },
        { "IS_PED_LIPSTICK_TINT_FOR_CREATOR(_)", WREN_PED_IS_PED_LIPSTICK_TINT_FOR_CREATOR },
        { "IS_PED_BLUSH_TINT_FOR_CREATOR(_)", WREN_PED_IS_PED_BLUSH_TINT_FOR_CREATOR },
        { "IS_PED_HAIR_TINT_FOR_BARBER(_)", WREN_PED_IS_PED_HAIR_TINT_FOR_BARBER },
        { "GET_DEFAULT_SECONDARY_TINT_FOR_BARBER(_)", WREN_PED_GET_DEFAULT_SECONDARY_TINT_FOR_BARBER },
        { "IS_PED_LIPSTICK_TINT_FOR_BARBER(_)", WREN_PED_IS_PED_LIPSTICK_TINT_FOR_BARBER },
        { "IS_PED_BLUSH_TINT_FOR_BARBER(_)", WREN_PED_IS_PED_BLUSH_TINT_FOR_BARBER },
        { "IS_PED_BLUSH_FACEPAINT_TINT_FOR_BARBER(_)", WREN_PED_IS_PED_BLUSH_FACEPAINT_TINT_FOR_BARBER },
        { "GET_TINT_INDEX_FOR_LAST_GEN_HAIR_TEXTURE(_,_,_)", WREN_PED_GET_TINT_INDEX_FOR_LAST_GEN_HAIR_TEXTURE },
        { "SET_PED_MICRO_MORPH(_,_,_)", WREN_PED_SET_PED_MICRO_MORPH },
        { "HAS_PED_HEAD_BLEND_FINISHED(_)", WREN_PED_HAS_PED_HEAD_BLEND_FINISHED },
        { "FINALIZE_HEAD_BLEND(_)", WREN_PED_FINALIZE_HEAD_BLEND },
        { "SET_HEAD_BLEND_PALETTE_COLOR(_,_,_,_,_)", WREN_PED_SET_HEAD_BLEND_PALETTE_COLOR },
        { "DISABLE_HEAD_BLEND_PALETTE_COLOR(_)", WREN_PED_DISABLE_HEAD_BLEND_PALETTE_COLOR },
        { "GET_PED_HEAD_BLEND_FIRST_INDEX(_)", WREN_PED_GET_PED_HEAD_BLEND_FIRST_INDEX },
        { "GET_PED_HEAD_BLEND_NUM_HEADS(_)", WREN_PED_GET_PED_HEAD_BLEND_NUM_HEADS },
        { "SET_PED_PRELOAD_VARIATION_DATA(_,_,_,_)", WREN_PED_SET_PED_PRELOAD_VARIATION_DATA },
        { "HAS_PED_PRELOAD_VARIATION_DATA_FINISHED(_)", WREN_PED_HAS_PED_PRELOAD_VARIATION_DATA_FINISHED },
        { "RELEASE_PED_PRELOAD_VARIATION_DATA(_)", WREN_PED_RELEASE_PED_PRELOAD_VARIATION_DATA },
        { "SET_PED_PRELOAD_PROP_DATA(_,_,_,_)", WREN_PED_SET_PED_PRELOAD_PROP_DATA },
        { "HAS_PED_PRELOAD_PROP_DATA_FINISHED(_)", WREN_PED_HAS_PED_PRELOAD_PROP_DATA_FINISHED },
        { "RELEASE_PED_PRELOAD_PROP_DATA(_)", WREN_PED_RELEASE_PED_PRELOAD_PROP_DATA },
        { "GET_PED_PROP_INDEX(_,_)", WREN_PED_GET_PED_PROP_INDEX },
        { "SET_PED_PROP_INDEX(_,_,_,_,_)", WREN_PED_SET_PED_PROP_INDEX },
        { "KNOCK_OFF_PED_PROP(_,_,_,_,_)", WREN_PED_KNOCK_OFF_PED_PROP },
        { "CLEAR_PED_PROP(_,_)", WREN_PED_CLEAR_PED_PROP },
        { "CLEAR_ALL_PED_PROPS(_)", WREN_PED_CLEAR_ALL_PED_PROPS },
        { "DROP_AMBIENT_PROP(_)", WREN_PED_DROP_AMBIENT_PROP },
        { "GET_PED_PROP_TEXTURE_INDEX(_,_)", WREN_PED_GET_PED_PROP_TEXTURE_INDEX },
        { "CLEAR_PED_PARACHUTE_PACK_VARIATION(_)", WREN_PED_CLEAR_PED_PARACHUTE_PACK_VARIATION },
        { "SET_PED_SCUBA_GEAR_VARIATION(_)", WREN_PED_SET_PED_SCUBA_GEAR_VARIATION },
        { "CLEAR_PED_SCUBA_GEAR_VARIATION(_)", WREN_PED_CLEAR_PED_SCUBA_GEAR_VARIATION },
        { "IS_USING_PED_SCUBA_GEAR_VARIATION(_)", WREN_PED_IS_USING_PED_SCUBA_GEAR_VARIATION },
        { "SET_BLOCKING_OF_NON_TEMPORARY_EVENTS(_,_)", WREN_PED_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS },
        { "SET_PED_BOUNDS_ORIENTATION(_,_,_,_,_,_)", WREN_PED_SET_PED_BOUNDS_ORIENTATION },
        { "REGISTER_TARGET(_,_)", WREN_PED_REGISTER_TARGET },
        { "REGISTER_HATED_TARGETS_AROUND_PED(_,_)", WREN_PED_REGISTER_HATED_TARGETS_AROUND_PED },
        { "GET_RANDOM_PED_AT_COORD(_,_,_,_,_,_,_)", WREN_PED_GET_RANDOM_PED_AT_COORD },
        { "GET_CLOSEST_PED(_,_,_,_,_,_,_,_,_)", WREN_PED_GET_CLOSEST_PED },
        { "SET_SCENARIO_PEDS_TO_BE_RETURNED_BY_NEXT_COMMAND(_)", WREN_PED_SET_SCENARIO_PEDS_TO_BE_RETURNED_BY_NEXT_COMMAND },
        { "GET_CAN_PED_BE_GRABBED_BY_SCRIPT(_,_,_,_,_,_,_,_,_)", WREN_PED_GET_CAN_PED_BE_GRABBED_BY_SCRIPT },
        { "SET_DRIVER_RACING_MODIFIER(_,_)", WREN_PED_SET_DRIVER_RACING_MODIFIER },
        { "SET_DRIVER_ABILITY(_,_)", WREN_PED_SET_DRIVER_ABILITY },
        { "SET_DRIVER_AGGRESSIVENESS(_,_)", WREN_PED_SET_DRIVER_AGGRESSIVENESS },
        { "CAN_PED_RAGDOLL(_)", WREN_PED_CAN_PED_RAGDOLL },
        { "SET_PED_TO_RAGDOLL(_,_,_,_,_,_,_)", WREN_PED_SET_PED_TO_RAGDOLL },
        { "SET_PED_TO_RAGDOLL_WITH_FALL(_,_,_,_,_,_,_,_,_,_,_,_,_,_)", WREN_PED_SET_PED_TO_RAGDOLL_WITH_FALL },
        { "SET_PED_RAGDOLL_ON_COLLISION(_,_)", WREN_PED_SET_PED_RAGDOLL_ON_COLLISION },
        { "IS_PED_RAGDOLL(_)", WREN_PED_IS_PED_RAGDOLL },
        { "IS_PED_RUNNING_RAGDOLL_TASK(_)", WREN_PED_IS_PED_RUNNING_RAGDOLL_TASK },
        { "SET_PED_RAGDOLL_FORCE_FALL(_)", WREN_PED_SET_PED_RAGDOLL_FORCE_FALL },
        { "RESET_PED_RAGDOLL_TIMER(_)", WREN_PED_RESET_PED_RAGDOLL_TIMER },
        { "SET_PED_CAN_RAGDOLL(_,_)", WREN_PED_SET_PED_CAN_RAGDOLL },
        { "IS_PED_RUNNING_MELEE_TASK(_)", WREN_PED_IS_PED_RUNNING_MELEE_TASK },
        { "IS_PED_RUNNING_MOBILE_PHONE_TASK(_)", WREN_PED_IS_PED_RUNNING_MOBILE_PHONE_TASK },
        { "IS_MOBILE_PHONE_TO_PED_EAR(_)", WREN_PED_IS_MOBILE_PHONE_TO_PED_EAR },
        { "SET_RAGDOLL_BLOCKING_FLAGS(_,_)", WREN_PED_SET_RAGDOLL_BLOCKING_FLAGS },
        { "CLEAR_RAGDOLL_BLOCKING_FLAGS(_,_)", WREN_PED_CLEAR_RAGDOLL_BLOCKING_FLAGS },
        { "SET_PED_ANGLED_DEFENSIVE_AREA(_,_,_,_,_,_,_,_,_,_)", WREN_PED_SET_PED_ANGLED_DEFENSIVE_AREA },
        { "SET_PED_SPHERE_DEFENSIVE_AREA(_,_,_,_,_,_,_)", WREN_PED_SET_PED_SPHERE_DEFENSIVE_AREA },
        { "SET_PED_DEFENSIVE_SPHERE_ATTACHED_TO_PED(_,_,_,_,_,_,_)", WREN_PED_SET_PED_DEFENSIVE_SPHERE_ATTACHED_TO_PED },
        { "SET_PED_DEFENSIVE_SPHERE_ATTACHED_TO_VEHICLE(_,_,_,_,_,_,_)", WREN_PED_SET_PED_DEFENSIVE_SPHERE_ATTACHED_TO_VEHICLE },
        { "SET_PED_DEFENSIVE_AREA_ATTACHED_TO_PED(_,_,_,_,_,_,_,_,_,_,_)", WREN_PED_SET_PED_DEFENSIVE_AREA_ATTACHED_TO_PED },
        { "SET_PED_DEFENSIVE_AREA_DIRECTION(_,_,_,_,_)", WREN_PED_SET_PED_DEFENSIVE_AREA_DIRECTION },
        { "REMOVE_PED_DEFENSIVE_AREA(_,_)", WREN_PED_REMOVE_PED_DEFENSIVE_AREA },
        { "GET_PED_DEFENSIVE_AREA_POSITION(_,_)", WREN_PED_GET_PED_DEFENSIVE_AREA_POSITION },
        { "IS_PED_DEFENSIVE_AREA_ACTIVE(_,_)", WREN_PED_IS_PED_DEFENSIVE_AREA_ACTIVE },
        { "SET_PED_PREFERRED_COVER_SET(_,_)", WREN_PED_SET_PED_PREFERRED_COVER_SET },
        { "REMOVE_PED_PREFERRED_COVER_SET(_)", WREN_PED_REMOVE_PED_PREFERRED_COVER_SET },
        { "REVIVE_INJURED_PED(_)", WREN_PED_REVIVE_INJURED_PED },
        { "RESURRECT_PED(_)", WREN_PED_RESURRECT_PED },
        { "SET_PED_NAME_DEBUG(_,_)", WREN_PED_SET_PED_NAME_DEBUG },
        { "GET_PED_EXTRACTED_DISPLACEMENT(_,_)", WREN_PED_GET_PED_EXTRACTED_DISPLACEMENT },
        { "SET_PED_DIES_WHEN_INJURED(_,_)", WREN_PED_SET_PED_DIES_WHEN_INJURED },
        { "SET_PED_ENABLE_WEAPON_BLOCKING(_,_)", WREN_PED_SET_PED_ENABLE_WEAPON_BLOCKING },
        { "SPECIAL_FUNCTION_DO_NOT_USE(_,_)", WREN_PED_SPECIAL_FUNCTION_DO_NOT_USE },
        { "RESET_PED_VISIBLE_DAMAGE(_)", WREN_PED_RESET_PED_VISIBLE_DAMAGE },
        { "APPLY_PED_BLOOD_DAMAGE_BY_ZONE(_,_,_,_,_)", WREN_PED_APPLY_PED_BLOOD_DAMAGE_BY_ZONE },
        { "APPLY_PED_BLOOD(_,_,_,_,_,_)", WREN_PED_APPLY_PED_BLOOD },
        { "APPLY_PED_BLOOD_BY_ZONE(_,_,_,_,_)", WREN_PED_APPLY_PED_BLOOD_BY_ZONE },
        { "APPLY_PED_BLOOD_SPECIFIC(_,_,_,_,_,_,_,_,_)", WREN_PED_APPLY_PED_BLOOD_SPECIFIC },
        { "APPLY_PED_DAMAGE_DECAL(_,_,_,_,_,_,_,_,_,_)", WREN_PED_APPLY_PED_DAMAGE_DECAL },
        { "APPLY_PED_DAMAGE_PACK(_,_,_,_)", WREN_PED_APPLY_PED_DAMAGE_PACK },
        { "CLEAR_PED_BLOOD_DAMAGE(_)", WREN_PED_CLEAR_PED_BLOOD_DAMAGE },
        { "CLEAR_PED_BLOOD_DAMAGE_BY_ZONE(_,_)", WREN_PED_CLEAR_PED_BLOOD_DAMAGE_BY_ZONE },
        { "HIDE_PED_BLOOD_DAMAGE_BY_ZONE(_,_,_)", WREN_PED_HIDE_PED_BLOOD_DAMAGE_BY_ZONE },
        { "CLEAR_PED_DAMAGE_DECAL_BY_ZONE(_,_,_)", WREN_PED_CLEAR_PED_DAMAGE_DECAL_BY_ZONE },
        { "GET_PED_DECORATIONS_STATE(_)", WREN_PED_GET_PED_DECORATIONS_STATE },
        { "MARK_PED_DECORATIONS_AS_CLONED_FROM_LOCAL_PLAYER(_,_)", WREN_PED_MARK_PED_DECORATIONS_AS_CLONED_FROM_LOCAL_PLAYER },
        { "CLEAR_PED_WETNESS(_)", WREN_PED_CLEAR_PED_WETNESS },
        { "SET_PED_WETNESS_HEIGHT(_,_)", WREN_PED_SET_PED_WETNESS_HEIGHT },
        { "SET_PED_WETNESS_ENABLED_THIS_FRAME(_)", WREN_PED_SET_PED_WETNESS_ENABLED_THIS_FRAME },
        { "CLEAR_PED_ENV_DIRT(_)", WREN_PED_CLEAR_PED_ENV_DIRT },
        { "SET_PED_SWEAT(_,_)", WREN_PED_SET_PED_SWEAT },
        { "ADD_PED_DECORATION_FROM_HASHES(_,_,_)", WREN_PED_ADD_PED_DECORATION_FROM_HASHES },
        { "ADD_PED_DECORATION_FROM_HASHES_IN_CORONA(_,_,_)", WREN_PED_ADD_PED_DECORATION_FROM_HASHES_IN_CORONA },
        { "GET_PED_DECORATION_ZONE_FROM_HASHES(_,_)", WREN_PED_GET_PED_DECORATION_ZONE_FROM_HASHES },
        { "CLEAR_PED_DECORATIONS(_)", WREN_PED_CLEAR_PED_DECORATIONS },
        { "CLEAR_PED_DECORATIONS_LEAVE_SCARS(_)", WREN_PED_CLEAR_PED_DECORATIONS_LEAVE_SCARS },
        { "WAS_PED_SKELETON_UPDATED(_)", WREN_PED_WAS_PED_SKELETON_UPDATED },
        { "GET_PED_BONE_COORDS(_,_,_,_,_)", WREN_PED_GET_PED_BONE_COORDS },
        { "CREATE_NM_MESSAGE(_,_)", WREN_PED_CREATE_NM_MESSAGE },
        { "GIVE_PED_NM_MESSAGE(_)", WREN_PED_GIVE_PED_NM_MESSAGE },
        { "ADD_SCENARIO_BLOCKING_AREA(_,_,_,_,_,_,_,_,_,_)", WREN_PED_ADD_SCENARIO_BLOCKING_AREA },
        { "REMOVE_SCENARIO_BLOCKING_AREAS()", WREN_PED_REMOVE_SCENARIO_BLOCKING_AREAS },
        { "REMOVE_SCENARIO_BLOCKING_AREA(_,_)", WREN_PED_REMOVE_SCENARIO_BLOCKING_AREA },
        { "SET_SCENARIO_PEDS_SPAWN_IN_SPHERE_AREA(_,_,_,_,_)", WREN_PED_SET_SCENARIO_PEDS_SPAWN_IN_SPHERE_AREA },
        { "DOES_SCENARIO_BLOCKING_AREA_EXISTS(_,_,_,_,_,_)", WREN_PED_DOES_SCENARIO_BLOCKING_AREA_EXISTS },
        { "IS_PED_USING_SCENARIO(_,_)", WREN_PED_IS_PED_USING_SCENARIO },
        { "IS_PED_USING_ANY_SCENARIO(_)", WREN_PED_IS_PED_USING_ANY_SCENARIO },
        { "SET_PED_PANIC_EXIT_SCENARIO(_,_,_,_)", WREN_PED_SET_PED_PANIC_EXIT_SCENARIO },
        { "TOGGLE_SCENARIO_PED_COWER_IN_PLACE(_,_)", WREN_PED_TOGGLE_SCENARIO_PED_COWER_IN_PLACE },
        { "TRIGGER_PED_SCENARIO_PANICEXITTOFLEE(_,_,_,_)", WREN_PED_TRIGGER_PED_SCENARIO_PANICEXITTOFLEE },
        { "SET_PED_SHOULD_PLAY_DIRECTED_NORMAL_SCENARIO_EXIT(_,_,_,_)", WREN_PED_SET_PED_SHOULD_PLAY_DIRECTED_NORMAL_SCENARIO_EXIT },
        { "SET_PED_SHOULD_PLAY_NORMAL_SCENARIO_EXIT(_)", WREN_PED_SET_PED_SHOULD_PLAY_NORMAL_SCENARIO_EXIT },
        { "SET_PED_SHOULD_PLAY_IMMEDIATE_SCENARIO_EXIT(_)", WREN_PED_SET_PED_SHOULD_PLAY_IMMEDIATE_SCENARIO_EXIT },
        { "SET_PED_SHOULD_PLAY_FLEE_SCENARIO_EXIT(_,_,_,_)", WREN_PED_SET_PED_SHOULD_PLAY_FLEE_SCENARIO_EXIT },
        { "SET_PED_SHOULD_IGNORE_SCENARIO_EXIT_COLLISION_CHECKS(_,_)", WREN_PED_SET_PED_SHOULD_IGNORE_SCENARIO_EXIT_COLLISION_CHECKS },
        { "SET_PED_SHOULD_IGNORE_SCENARIO_NAV_CHECKS(_,_)", WREN_PED_SET_PED_SHOULD_IGNORE_SCENARIO_NAV_CHECKS },
        { "SET_PED_SHOULD_PROBE_FOR_SCENARIO_EXITS_IN_ONE_FRAME(_,_)", WREN_PED_SET_PED_SHOULD_PROBE_FOR_SCENARIO_EXITS_IN_ONE_FRAME },
        { "IS_PED_GESTURING(_)", WREN_PED_IS_PED_GESTURING },
        { "PLAY_FACIAL_ANIM(_,_,_)", WREN_PED_PLAY_FACIAL_ANIM },
        { "SET_FACIAL_CLIPSET(_,_)", WREN_PED_SET_FACIAL_CLIPSET },
        { "SET_FACIAL_IDLE_ANIM_OVERRIDE(_,_,_)", WREN_PED_SET_FACIAL_IDLE_ANIM_OVERRIDE },
        { "CLEAR_FACIAL_IDLE_ANIM_OVERRIDE(_)", WREN_PED_CLEAR_FACIAL_IDLE_ANIM_OVERRIDE },
        { "SET_PED_CAN_PLAY_GESTURE_ANIMS(_,_)", WREN_PED_SET_PED_CAN_PLAY_GESTURE_ANIMS },
        { "SET_PED_CAN_PLAY_VISEME_ANIMS(_,_,_)", WREN_PED_SET_PED_CAN_PLAY_VISEME_ANIMS },
        { "SET_PED_IS_IGNORED_BY_AUTO_OPEN_DOORS(_,_)", WREN_PED_SET_PED_IS_IGNORED_BY_AUTO_OPEN_DOORS },
        { "SET_PED_CAN_PLAY_AMBIENT_ANIMS(_,_)", WREN_PED_SET_PED_CAN_PLAY_AMBIENT_ANIMS },
        { "SET_PED_CAN_PLAY_AMBIENT_BASE_ANIMS(_,_)", WREN_PED_SET_PED_CAN_PLAY_AMBIENT_BASE_ANIMS },
        { "TRIGGER_IDLE_ANIMATION_ON_PED(_)", WREN_PED_TRIGGER_IDLE_ANIMATION_ON_PED },
        { "SET_PED_CAN_ARM_IK(_,_)", WREN_PED_SET_PED_CAN_ARM_IK },
        { "SET_PED_CAN_HEAD_IK(_,_)", WREN_PED_SET_PED_CAN_HEAD_IK },
        { "SET_PED_CAN_LEG_IK(_,_)", WREN_PED_SET_PED_CAN_LEG_IK },
        { "SET_PED_CAN_TORSO_IK(_,_)", WREN_PED_SET_PED_CAN_TORSO_IK },
        { "SET_PED_CAN_TORSO_REACT_IK(_,_)", WREN_PED_SET_PED_CAN_TORSO_REACT_IK },
        { "SET_PED_CAN_TORSO_VEHICLE_IK(_,_)", WREN_PED_SET_PED_CAN_TORSO_VEHICLE_IK },
        { "SET_PED_CAN_USE_AUTO_CONVERSATION_LOOKAT(_,_)", WREN_PED_SET_PED_CAN_USE_AUTO_CONVERSATION_LOOKAT },
        { "IS_PED_HEADTRACKING_PED(_,_)", WREN_PED_IS_PED_HEADTRACKING_PED },
        { "IS_PED_HEADTRACKING_ENTITY(_,_)", WREN_PED_IS_PED_HEADTRACKING_ENTITY },
        { "SET_PED_PRIMARY_LOOKAT(_,_)", WREN_PED_SET_PED_PRIMARY_LOOKAT },
        { "SET_PED_CLOTH_PIN_FRAMES(_,_)", WREN_PED_SET_PED_CLOTH_PIN_FRAMES },
        { "SET_PED_CLOTH_PACKAGE_INDEX(_,_)", WREN_PED_SET_PED_CLOTH_PACKAGE_INDEX },
        { "SET_PED_CLOTH_PRONE(_,_)", WREN_PED_SET_PED_CLOTH_PRONE },
        { "SET_PED_CONFIG_FLAG(_,_,_)", WREN_PED_SET_PED_CONFIG_FLAG },
        { "SET_PED_RESET_FLAG(_,_,_)", WREN_PED_SET_PED_RESET_FLAG },
        { "GET_PED_CONFIG_FLAG(_,_,_)", WREN_PED_GET_PED_CONFIG_FLAG },
        { "GET_PED_RESET_FLAG(_,_)", WREN_PED_GET_PED_RESET_FLAG },
        { "SET_PED_GROUP_MEMBER_PASSENGER_INDEX(_,_)", WREN_PED_SET_PED_GROUP_MEMBER_PASSENGER_INDEX },
        { "SET_PED_CAN_EVASIVE_DIVE(_,_)", WREN_PED_SET_PED_CAN_EVASIVE_DIVE },
        { "IS_PED_EVASIVE_DIVING(_)", WREN_PED_IS_PED_EVASIVE_DIVING },
        { "SET_PED_SHOOTS_AT_COORD(_,_,_,_,_)", WREN_PED_SET_PED_SHOOTS_AT_COORD },
        { "SET_PED_MODEL_IS_SUPPRESSED(_,_)", WREN_PED_SET_PED_MODEL_IS_SUPPRESSED },
        { "STOP_ANY_PED_MODEL_BEING_SUPPRESSED()", WREN_PED_STOP_ANY_PED_MODEL_BEING_SUPPRESSED },
        { "SET_PED_CAN_BE_TARGETED_WHEN_INJURED(_,_)", WREN_PED_SET_PED_CAN_BE_TARGETED_WHEN_INJURED },
        { "SET_PED_GENERATES_DEAD_BODY_EVENTS(_,_)", WREN_PED_SET_PED_GENERATES_DEAD_BODY_EVENTS },
        { "BLOCK_PED_FROM_GENERATING_DEAD_BODY_EVENTS_WHEN_DEAD(_,_)", WREN_PED_BLOCK_PED_FROM_GENERATING_DEAD_BODY_EVENTS_WHEN_DEAD },
        { "SET_PED_WILL_ONLY_ATTACK_WANTED_PLAYER(_,_)", WREN_PED_SET_PED_WILL_ONLY_ATTACK_WANTED_PLAYER },
        { "SET_PED_CAN_RAGDOLL_FROM_PLAYER_IMPACT(_,_)", WREN_PED_SET_PED_CAN_RAGDOLL_FROM_PLAYER_IMPACT },
        { "GIVE_PED_HELMET(_,_,_,_)", WREN_PED_GIVE_PED_HELMET },
        { "REMOVE_PED_HELMET(_,_)", WREN_PED_REMOVE_PED_HELMET },
        { "IS_PED_TAKING_OFF_HELMET(_)", WREN_PED_IS_PED_TAKING_OFF_HELMET },
        { "SET_PED_HELMET(_,_)", WREN_PED_SET_PED_HELMET },
        { "SET_PED_HELMET_FLAG(_,_)", WREN_PED_SET_PED_HELMET_FLAG },
        { "SET_PED_HELMET_PROP_INDEX(_,_,_)", WREN_PED_SET_PED_HELMET_PROP_INDEX },
        { "SET_PED_HELMET_VISOR_PROP_INDICES(_,_,_,_)", WREN_PED_SET_PED_HELMET_VISOR_PROP_INDICES },
        { "IS_PED_HELMET_VISOR_UP(_)", WREN_PED_IS_PED_HELMET_VISOR_UP },
        { "SET_PED_HELMET_TEXTURE_INDEX(_,_)", WREN_PED_SET_PED_HELMET_TEXTURE_INDEX },
        { "IS_PED_WEARING_HELMET(_)", WREN_PED_IS_PED_WEARING_HELMET },
        { "CLEAR_PED_STORED_HAT_PROP(_)", WREN_PED_CLEAR_PED_STORED_HAT_PROP },
        { "GET_PED_HELMET_STORED_HAT_PROP_INDEX(_)", WREN_PED_GET_PED_HELMET_STORED_HAT_PROP_INDEX },
        { "GET_PED_HELMET_STORED_HAT_TEX_INDEX(_)", WREN_PED_GET_PED_HELMET_STORED_HAT_TEX_INDEX },
        { "IS_CURRENT_HEAD_PROP_A_HELMET(_)", WREN_PED_IS_CURRENT_HEAD_PROP_A_HELMET },
        { "SET_PED_TO_LOAD_COVER(_,_)", WREN_PED_SET_PED_TO_LOAD_COVER },
        { "SET_PED_CAN_COWER_IN_COVER(_,_)", WREN_PED_SET_PED_CAN_COWER_IN_COVER },
        { "SET_PED_CAN_PEEK_IN_COVER(_,_)", WREN_PED_SET_PED_CAN_PEEK_IN_COVER },
        { "SET_PED_PLAYS_HEAD_ON_HORN_ANIM_WHEN_DIES_IN_VEHICLE(_,_)", WREN_PED_SET_PED_PLAYS_HEAD_ON_HORN_ANIM_WHEN_DIES_IN_VEHICLE },
        { "SET_PED_LEG_IK_MODE(_,_)", WREN_PED_SET_PED_LEG_IK_MODE },
        { "SET_PED_MOTION_BLUR(_,_)", WREN_PED_SET_PED_MOTION_BLUR },
        { "SET_PED_CAN_SWITCH_WEAPON(_,_)", WREN_PED_SET_PED_CAN_SWITCH_WEAPON },
        { "SET_PED_DIES_INSTANTLY_IN_WATER(_,_)", WREN_PED_SET_PED_DIES_INSTANTLY_IN_WATER },
        { "SET_LADDER_CLIMB_INPUT_STATE(_,_)", WREN_PED_SET_LADDER_CLIMB_INPUT_STATE },
        { "STOP_PED_WEAPON_FIRING_WHEN_DROPPED(_)", WREN_PED_STOP_PED_WEAPON_FIRING_WHEN_DROPPED },
        { "SET_SCRIPTED_ANIM_SEAT_OFFSET(_,_)", WREN_PED_SET_SCRIPTED_ANIM_SEAT_OFFSET },
        { "SET_PED_COMBAT_MOVEMENT(_,_)", WREN_PED_SET_PED_COMBAT_MOVEMENT },
        { "GET_PED_COMBAT_MOVEMENT(_)", WREN_PED_GET_PED_COMBAT_MOVEMENT },
        { "SET_PED_COMBAT_ABILITY(_,_)", WREN_PED_SET_PED_COMBAT_ABILITY },
        { "SET_PED_COMBAT_RANGE(_,_)", WREN_PED_SET_PED_COMBAT_RANGE },
        { "GET_PED_COMBAT_RANGE(_)", WREN_PED_GET_PED_COMBAT_RANGE },
        { "SET_PED_COMBAT_ATTRIBUTES(_,_,_)", WREN_PED_SET_PED_COMBAT_ATTRIBUTES },
        { "SET_PED_TARGET_LOSS_RESPONSE(_,_)", WREN_PED_SET_PED_TARGET_LOSS_RESPONSE },
        { "IS_PED_PERFORMING_MELEE_ACTION(_)", WREN_PED_IS_PED_PERFORMING_MELEE_ACTION },
        { "IS_PED_PERFORMING_STEALTH_KILL(_)", WREN_PED_IS_PED_PERFORMING_STEALTH_KILL },
        { "IS_PED_PERFORMING_A_COUNTER_ATTACK(_)", WREN_PED_IS_PED_PERFORMING_A_COUNTER_ATTACK },
        { "IS_PED_BEING_STEALTH_KILLED(_)", WREN_PED_IS_PED_BEING_STEALTH_KILLED },
        { "GET_MELEE_TARGET_FOR_PED(_)", WREN_PED_GET_MELEE_TARGET_FOR_PED },
        { "WAS_PED_KILLED_BY_STEALTH(_)", WREN_PED_WAS_PED_KILLED_BY_STEALTH },
        { "WAS_PED_KILLED_BY_TAKEDOWN(_)", WREN_PED_WAS_PED_KILLED_BY_TAKEDOWN },
        { "WAS_PED_KNOCKED_OUT(_)", WREN_PED_WAS_PED_KNOCKED_OUT },
        { "SET_PED_FLEE_ATTRIBUTES(_,_,_)", WREN_PED_SET_PED_FLEE_ATTRIBUTES },
        { "SET_PED_COWER_HASH(_,_)", WREN_PED_SET_PED_COWER_HASH },
        { "SET_PED_STEERS_AROUND_DEAD_BODIES(_,_)", WREN_PED_SET_PED_STEERS_AROUND_DEAD_BODIES },
        { "SET_PED_STEERS_AROUND_PEDS(_,_)", WREN_PED_SET_PED_STEERS_AROUND_PEDS },
        { "SET_PED_STEERS_AROUND_OBJECTS(_,_)", WREN_PED_SET_PED_STEERS_AROUND_OBJECTS },
        { "SET_PED_STEERS_AROUND_VEHICLES(_,_)", WREN_PED_SET_PED_STEERS_AROUND_VEHICLES },
        { "SET_PED_IS_AVOIDED_BY_OTHERS(_,_)", WREN_PED_SET_PED_IS_AVOIDED_BY_OTHERS },
        { "SET_PED_INCREASED_AVOIDANCE_RADIUS(_)", WREN_PED_SET_PED_INCREASED_AVOIDANCE_RADIUS },
        { "SET_PED_BLOCKS_PATHING_WHEN_DEAD(_,_)", WREN_PED_SET_PED_BLOCKS_PATHING_WHEN_DEAD },
        { "SET_PED_NO_TIME_DELAY_BEFORE_SHOT(_)", WREN_PED_SET_PED_NO_TIME_DELAY_BEFORE_SHOT },
        { "IS_ANY_PED_NEAR_POINT(_,_,_,_)", WREN_PED_IS_ANY_PED_NEAR_POINT },
        { "FORCE_PED_AI_AND_ANIMATION_UPDATE(_,_,_)", WREN_PED_FORCE_PED_AI_AND_ANIMATION_UPDATE },
        { "IS_PED_HEADING_TOWARDS_POSITION(_,_,_,_,_)", WREN_PED_IS_PED_HEADING_TOWARDS_POSITION },
        { "REQUEST_PED_VISIBILITY_TRACKING(_)", WREN_PED_REQUEST_PED_VISIBILITY_TRACKING },
        { "REQUEST_PED_VEHICLE_VISIBILITY_TRACKING(_,_)", WREN_PED_REQUEST_PED_VEHICLE_VISIBILITY_TRACKING },
        { "REQUEST_PED_RESTRICTED_VEHICLE_VISIBILITY_TRACKING(_,_)", WREN_PED_REQUEST_PED_RESTRICTED_VEHICLE_VISIBILITY_TRACKING },
        { "REQUEST_PED_USE_SMALL_BBOX_VISIBILITY_TRACKING(_,_)", WREN_PED_REQUEST_PED_USE_SMALL_BBOX_VISIBILITY_TRACKING },
        { "IS_TRACKED_PED_VISIBLE(_)", WREN_PED_IS_TRACKED_PED_VISIBLE },
        { "GET_TRACKED_PED_PIXELCOUNT(_)", WREN_PED_GET_TRACKED_PED_PIXELCOUNT },
        { "IS_PED_TRACKED(_)", WREN_PED_IS_PED_TRACKED },
        { "HAS_PED_RECEIVED_EVENT(_,_)", WREN_PED_HAS_PED_RECEIVED_EVENT },
        { "CAN_PED_SEE_HATED_PED(_,_)", WREN_PED_CAN_PED_SEE_HATED_PED },
        { "CAN_PED_SHUFFLE_TO_OR_FROM_TURRET_SEAT(_)", WREN_PED_CAN_PED_SHUFFLE_TO_OR_FROM_TURRET_SEAT },
        { "CAN_PED_SHUFFLE_TO_OR_FROM_EXTRA_SEAT(_)", WREN_PED_CAN_PED_SHUFFLE_TO_OR_FROM_EXTRA_SEAT },
        { "GET_PED_BONE_INDEX(_,_)", WREN_PED_GET_PED_BONE_INDEX },
        { "GET_PED_RAGDOLL_BONE_INDEX(_,_)", WREN_PED_GET_PED_RAGDOLL_BONE_INDEX },
        { "SET_PED_ENVEFF_SCALE(_,_)", WREN_PED_SET_PED_ENVEFF_SCALE },
        { "GET_PED_ENVEFF_SCALE(_)", WREN_PED_GET_PED_ENVEFF_SCALE },
        { "SET_ENABLE_PED_ENVEFF_SCALE(_,_)", WREN_PED_SET_ENABLE_PED_ENVEFF_SCALE },
        { "SET_PED_ENVEFF_CPV_ADD(_,_)", WREN_PED_SET_PED_ENVEFF_CPV_ADD },
        { "SET_PED_ENVEFF_COLOR_MODULATOR(_,_,_,_)", WREN_PED_SET_PED_ENVEFF_COLOR_MODULATOR },
        { "SET_PED_EMISSIVE_SCALE(_,_)", WREN_PED_SET_PED_EMISSIVE_SCALE },
        { "GET_PED_EMISSIVE_SCALE(_)", WREN_PED_GET_PED_EMISSIVE_SCALE },
        { "IS_PED_SHADER_READY(_)", WREN_PED_IS_PED_SHADER_READY },
        { "SET_PED_ENABLE_CREW_EMBLEM(_,_)", WREN_PED_SET_PED_ENABLE_CREW_EMBLEM },
        { "REQUEST_RAGDOLL_BOUNDS_UPDATE(_,_)", WREN_PED_REQUEST_RAGDOLL_BOUNDS_UPDATE },
        { "SET_PED_AO_BLOB_RENDERING(_,_)", WREN_PED_SET_PED_AO_BLOB_RENDERING },
        { "IS_PED_SHELTERED(_)", WREN_PED_IS_PED_SHELTERED },
        { "CREATE_SYNCHRONIZED_SCENE(_,_,_,_,_,_,_)", WREN_PED_CREATE_SYNCHRONIZED_SCENE },
        { "CREATE_SYNCHRONIZED_SCENE_AT_MAP_OBJECT(_,_,_,_,_)", WREN_PED_CREATE_SYNCHRONIZED_SCENE_AT_MAP_OBJECT },
        { "IS_SYNCHRONIZED_SCENE_RUNNING(_)", WREN_PED_IS_SYNCHRONIZED_SCENE_RUNNING },
        { "SET_SYNCHRONIZED_SCENE_ORIGIN(_,_,_,_,_,_,_,_)", WREN_PED_SET_SYNCHRONIZED_SCENE_ORIGIN },
        { "SET_SYNCHRONIZED_SCENE_PHASE(_,_)", WREN_PED_SET_SYNCHRONIZED_SCENE_PHASE },
        { "GET_SYNCHRONIZED_SCENE_PHASE(_)", WREN_PED_GET_SYNCHRONIZED_SCENE_PHASE },
        { "SET_SYNCHRONIZED_SCENE_RATE(_,_)", WREN_PED_SET_SYNCHRONIZED_SCENE_RATE },
        { "GET_SYNCHRONIZED_SCENE_RATE(_)", WREN_PED_GET_SYNCHRONIZED_SCENE_RATE },
        { "SET_SYNCHRONIZED_SCENE_LOOPED(_,_)", WREN_PED_SET_SYNCHRONIZED_SCENE_LOOPED },
        { "IS_SYNCHRONIZED_SCENE_LOOPED(_)", WREN_PED_IS_SYNCHRONIZED_SCENE_LOOPED },
        { "SET_SYNCHRONIZED_SCENE_HOLD_LAST_FRAME(_,_)", WREN_PED_SET_SYNCHRONIZED_SCENE_HOLD_LAST_FRAME },
        { "IS_SYNCHRONIZED_SCENE_HOLD_LAST_FRAME(_)", WREN_PED_IS_SYNCHRONIZED_SCENE_HOLD_LAST_FRAME },
        { "ATTACH_SYNCHRONIZED_SCENE_TO_ENTITY(_,_,_)", WREN_PED_ATTACH_SYNCHRONIZED_SCENE_TO_ENTITY },
        { "DETACH_SYNCHRONIZED_SCENE(_)", WREN_PED_DETACH_SYNCHRONIZED_SCENE },
        { "TAKE_OWNERSHIP_OF_SYNCHRONIZED_SCENE(_)", WREN_PED_TAKE_OWNERSHIP_OF_SYNCHRONIZED_SCENE },
        { "FORCE_PED_MOTION_STATE(_,_,_,_,_)", WREN_PED_FORCE_PED_MOTION_STATE },
        { "GET_PED_CURRENT_MOVE_BLEND_RATIO(_)", WREN_PED_GET_PED_CURRENT_MOVE_BLEND_RATIO },
        { "SET_PED_MAX_MOVE_BLEND_RATIO(_,_)", WREN_PED_SET_PED_MAX_MOVE_BLEND_RATIO },
        { "SET_PED_MIN_MOVE_BLEND_RATIO(_,_)", WREN_PED_SET_PED_MIN_MOVE_BLEND_RATIO },
        { "SET_PED_MOVE_RATE_OVERRIDE(_,_)", WREN_PED_SET_PED_MOVE_RATE_OVERRIDE },
        { "SET_PED_MOVE_RATE_IN_WATER_OVERRIDE(_,_)", WREN_PED_SET_PED_MOVE_RATE_IN_WATER_OVERRIDE },
        { "PED_HAS_SEXINESS_FLAG_SET(_,_)", WREN_PED_PED_HAS_SEXINESS_FLAG_SET },
        { "GET_PED_NEARBY_VEHICLES(_)", WREN_PED_GET_PED_NEARBY_VEHICLES },
        { "GET_PED_NEARBY_PEDS(_,_)", WREN_PED_GET_PED_NEARBY_PEDS },
        { "HAVE_ALL_STREAMING_REQUESTS_COMPLETED(_)", WREN_PED_HAVE_ALL_STREAMING_REQUESTS_COMPLETED },
        { "IS_PED_USING_ACTION_MODE(_)", WREN_PED_IS_PED_USING_ACTION_MODE },
        { "SET_PED_USING_ACTION_MODE(_,_,_,_)", WREN_PED_SET_PED_USING_ACTION_MODE },
        { "SET_MOVEMENT_MODE_OVERRIDE(_,_)", WREN_PED_SET_MOVEMENT_MODE_OVERRIDE },
        { "SET_PED_CAPSULE(_,_)", WREN_PED_SET_PED_CAPSULE },
        { "REGISTER_PEDHEADSHOT(_)", WREN_PED_REGISTER_PEDHEADSHOT },
        { "REGISTER_PEDHEADSHOT_HIRES(_)", WREN_PED_REGISTER_PEDHEADSHOT_HIRES },
        { "REGISTER_PEDHEADSHOT_TRANSPARENT(_)", WREN_PED_REGISTER_PEDHEADSHOT_TRANSPARENT },
        { "UNREGISTER_PEDHEADSHOT(_)", WREN_PED_UNREGISTER_PEDHEADSHOT },
        { "IS_PEDHEADSHOT_VALID(_)", WREN_PED_IS_PEDHEADSHOT_VALID },
        { "IS_PEDHEADSHOT_READY(_)", WREN_PED_IS_PEDHEADSHOT_READY },
        { "GET_PEDHEADSHOT_TXD_STRING(_)", WREN_PED_GET_PEDHEADSHOT_TXD_STRING },
        { "REQUEST_PEDHEADSHOT_IMG_UPLOAD(_)", WREN_PED_REQUEST_PEDHEADSHOT_IMG_UPLOAD },
        { "RELEASE_PEDHEADSHOT_IMG_UPLOAD(_)", WREN_PED_RELEASE_PEDHEADSHOT_IMG_UPLOAD },
        { "IS_PEDHEADSHOT_IMG_UPLOAD_AVAILABLE()", WREN_PED_IS_PEDHEADSHOT_IMG_UPLOAD_AVAILABLE },
        { "HAS_PEDHEADSHOT_IMG_UPLOAD_FAILED()", WREN_PED_HAS_PEDHEADSHOT_IMG_UPLOAD_FAILED },
        { "HAS_PEDHEADSHOT_IMG_UPLOAD_SUCCEEDED()", WREN_PED_HAS_PEDHEADSHOT_IMG_UPLOAD_SUCCEEDED },
        { "SET_PED_HEATSCALE_OVERRIDE(_,_)", WREN_PED_SET_PED_HEATSCALE_OVERRIDE },
        { "DISABLE_PED_HEATSCALE_OVERRIDE(_)", WREN_PED_DISABLE_PED_HEATSCALE_OVERRIDE },
        { "SPAWNPOINTS_START_SEARCH(_,_,_,_,_,_,_,_)", WREN_PED_SPAWNPOINTS_START_SEARCH },
        { "SPAWNPOINTS_START_SEARCH_IN_ANGLED_AREA(_,_,_,_,_,_,_,_,_,_)", WREN_PED_SPAWNPOINTS_START_SEARCH_IN_ANGLED_AREA },
        { "SPAWNPOINTS_CANCEL_SEARCH()", WREN_PED_SPAWNPOINTS_CANCEL_SEARCH },
        { "SPAWNPOINTS_IS_SEARCH_ACTIVE()", WREN_PED_SPAWNPOINTS_IS_SEARCH_ACTIVE },
        { "SPAWNPOINTS_IS_SEARCH_COMPLETE()", WREN_PED_SPAWNPOINTS_IS_SEARCH_COMPLETE },
        { "SPAWNPOINTS_IS_SEARCH_FAILED()", WREN_PED_SPAWNPOINTS_IS_SEARCH_FAILED },
        { "SPAWNPOINTS_GET_NUM_SEARCH_RESULTS()", WREN_PED_SPAWNPOINTS_GET_NUM_SEARCH_RESULTS },
        { "SPAWNPOINTS_GET_SEARCH_RESULT(_)", WREN_PED_SPAWNPOINTS_GET_SEARCH_RESULT },
        { "SPAWNPOINTS_GET_SEARCH_RESULT_FLAGS(_)", WREN_PED_SPAWNPOINTS_GET_SEARCH_RESULT_FLAGS },
        { "SET_IK_TARGET(_,_,_,_,_,_,_,_,_,_)", WREN_PED_SET_IK_TARGET },
        { "FORCE_INSTANT_LEG_IK_SETUP(_)", WREN_PED_FORCE_INSTANT_LEG_IK_SETUP },
        { "REQUEST_ACTION_MODE_ASSET(_)", WREN_PED_REQUEST_ACTION_MODE_ASSET },
        { "HAS_ACTION_MODE_ASSET_LOADED(_)", WREN_PED_HAS_ACTION_MODE_ASSET_LOADED },
        { "REMOVE_ACTION_MODE_ASSET(_)", WREN_PED_REMOVE_ACTION_MODE_ASSET },
        { "REQUEST_STEALTH_MODE_ASSET(_)", WREN_PED_REQUEST_STEALTH_MODE_ASSET },
        { "HAS_STEALTH_MODE_ASSET_LOADED(_)", WREN_PED_HAS_STEALTH_MODE_ASSET_LOADED },
        { "REMOVE_STEALTH_MODE_ASSET(_)", WREN_PED_REMOVE_STEALTH_MODE_ASSET },
        { "SET_PED_LOD_MULTIPLIER(_,_)", WREN_PED_SET_PED_LOD_MULTIPLIER },
        { "SET_PED_CAN_LOSE_PROPS_ON_DAMAGE(_,_,_)", WREN_PED_SET_PED_CAN_LOSE_PROPS_ON_DAMAGE },
        { "SET_FORCE_FOOTSTEP_UPDATE(_,_)", WREN_PED_SET_FORCE_FOOTSTEP_UPDATE },
        { "SET_FORCE_STEP_TYPE(_,_,_,_)", WREN_PED_SET_FORCE_STEP_TYPE },
        { "IS_ANY_HOSTILE_PED_NEAR_POINT(_,_,_,_,_)", WREN_PED_IS_ANY_HOSTILE_PED_NEAR_POINT },
        { "SET_PED_CAN_PLAY_IN_CAR_IDLES(_,_)", WREN_PED_SET_PED_CAN_PLAY_IN_CAR_IDLES },
        { "IS_TARGET_PED_IN_PERCEPTION_AREA(_,_,_,_,_,_)", WREN_PED_IS_TARGET_PED_IN_PERCEPTION_AREA },
        { "SET_POP_CONTROL_SPHERE_THIS_FRAME(_,_,_,_,_)", WREN_PED_SET_POP_CONTROL_SPHERE_THIS_FRAME },
        { "FORCE_ZERO_MASS_IN_COLLISIONS(_)", WREN_PED_FORCE_ZERO_MASS_IN_COLLISIONS },
        { "SET_DISABLE_HIGH_FALL_DEATH(_,_)", WREN_PED_SET_DISABLE_HIGH_FALL_DEATH },
        { "SET_PED_PHONE_PALETTE_IDX(_,_)", WREN_PED_SET_PED_PHONE_PALETTE_IDX },
        { "SET_PED_STEER_BIAS(_,_)", WREN_PED_SET_PED_STEER_BIAS },
        { "IS_PED_SWITCHING_WEAPON(_)", WREN_PED_IS_PED_SWITCHING_WEAPON },
        { "SET_PED_TREATED_AS_FRIENDLY(_,_,_)", WREN_PED_SET_PED_TREATED_AS_FRIENDLY },
        { "SET_DISABLE_PED_MAP_COLLISION(_)", WREN_PED_SET_DISABLE_PED_MAP_COLLISION },
        { "ENABLE_MP_LIGHT(_,_)", WREN_PED_ENABLE_MP_LIGHT },
        { "GET_MP_LIGHT_ENABLED(_)", WREN_PED_GET_MP_LIGHT_ENABLED },
        { "CLEAR_COVER_POINT_FOR_PED(_)", WREN_PED_CLEAR_COVER_POINT_FOR_PED },
        { "SET_ALLOW_STUNT_JUMP_CAMERA(_,_)", WREN_PED_SET_ALLOW_STUNT_JUMP_CAMERA },
        { "ADD_ROPE(_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_)", WREN_PHYSICS_ADD_ROPE },
        { "DELETE_ROPE()", WREN_PHYSICS_DELETE_ROPE },
        { "DELETE_CHILD_ROPE(_)", WREN_PHYSICS_DELETE_CHILD_ROPE },
        { "DOES_ROPE_EXIST()", WREN_PHYSICS_DOES_ROPE_EXIST },
        { "ROPE_DRAW_ENABLED(_)", WREN_PHYSICS_ROPE_DRAW_ENABLED },
        { "ROPE_DRAW_SHADOW_ENABLED(_)", WREN_PHYSICS_ROPE_DRAW_SHADOW_ENABLED },
        { "LOAD_ROPE_DATA(_,_)", WREN_PHYSICS_LOAD_ROPE_DATA },
        { "PIN_ROPE_VERTEX(_,_,_,_,_)", WREN_PHYSICS_PIN_ROPE_VERTEX },
        { "UNPIN_ROPE_VERTEX(_,_)", WREN_PHYSICS_UNPIN_ROPE_VERTEX },
        { "GET_ROPE_VERTEX_COUNT(_)", WREN_PHYSICS_GET_ROPE_VERTEX_COUNT },
        { "ATTACH_ENTITIES_TO_ROPE(_,_,_,_,_,_,_,_,_,_,_,_)", WREN_PHYSICS_ATTACH_ENTITIES_TO_ROPE },
        { "ATTACH_ROPE_TO_ENTITY(_,_,_,_,_,_)", WREN_PHYSICS_ATTACH_ROPE_TO_ENTITY },
        { "DETACH_ROPE_FROM_ENTITY(_,_)", WREN_PHYSICS_DETACH_ROPE_FROM_ENTITY },
        { "ROPE_SET_UPDATE_PINVERTS(_)", WREN_PHYSICS_ROPE_SET_UPDATE_PINVERTS },
        { "ROPE_SET_UPDATE_ORDER(_,_)", WREN_PHYSICS_ROPE_SET_UPDATE_ORDER },
        { "ROPE_SET_SMOOTH_REELIN(_,_)", WREN_PHYSICS_ROPE_SET_SMOOTH_REELIN },
        { "IS_ROPE_ATTACHED_AT_BOTH_ENDS()", WREN_PHYSICS_IS_ROPE_ATTACHED_AT_BOTH_ENDS },
        { "GET_ROPE_LAST_VERTEX_COORD(_)", WREN_PHYSICS_GET_ROPE_LAST_VERTEX_COORD },
        { "GET_ROPE_VERTEX_COORD(_,_)", WREN_PHYSICS_GET_ROPE_VERTEX_COORD },
        { "START_ROPE_WINDING(_)", WREN_PHYSICS_START_ROPE_WINDING },
        { "STOP_ROPE_WINDING(_)", WREN_PHYSICS_STOP_ROPE_WINDING },
        { "START_ROPE_UNWINDING_FRONT(_)", WREN_PHYSICS_START_ROPE_UNWINDING_FRONT },
        { "STOP_ROPE_UNWINDING_FRONT(_)", WREN_PHYSICS_STOP_ROPE_UNWINDING_FRONT },
        { "ROPE_CONVERT_TO_SIMPLE(_)", WREN_PHYSICS_ROPE_CONVERT_TO_SIMPLE },
        { "ROPE_LOAD_TEXTURES()", WREN_PHYSICS_ROPE_LOAD_TEXTURES },
        { "ROPE_ARE_TEXTURES_LOADED()", WREN_PHYSICS_ROPE_ARE_TEXTURES_LOADED },
        { "ROPE_UNLOAD_TEXTURES()", WREN_PHYSICS_ROPE_UNLOAD_TEXTURES },
        { "DOES_SCRIPT_OWN_ROPE(_)", WREN_PHYSICS_DOES_SCRIPT_OWN_ROPE },
        { "ROPE_ATTACH_VIRTUAL_BOUND_GEOM(_,_,_,_,_,_,_,_,_,_,_,_,_,_)", WREN_PHYSICS_ROPE_ATTACH_VIRTUAL_BOUND_GEOM },
        { "ROPE_CHANGE_SCRIPT_OWNER(_,_,_)", WREN_PHYSICS_ROPE_CHANGE_SCRIPT_OWNER },
        { "ROPE_SET_REFFRAMEVELOCITY_COLLIDERORDER(_,_)", WREN_PHYSICS_ROPE_SET_REFFRAMEVELOCITY_COLLIDERORDER },
        { "ROPE_GET_DISTANCE_BETWEEN_ENDS(_)", WREN_PHYSICS_ROPE_GET_DISTANCE_BETWEEN_ENDS },
        { "ROPE_FORCE_LENGTH(_,_)", WREN_PHYSICS_ROPE_FORCE_LENGTH },
        { "ROPE_RESET_LENGTH(_,_)", WREN_PHYSICS_ROPE_RESET_LENGTH },
        { "APPLY_IMPULSE_TO_CLOTH(_,_,_,_,_,_,_)", WREN_PHYSICS_APPLY_IMPULSE_TO_CLOTH },
        { "SET_DAMPING(_,_,_)", WREN_PHYSICS_SET_DAMPING },
        { "ACTIVATE_PHYSICS(_)", WREN_PHYSICS_ACTIVATE_PHYSICS },
        { "SET_CGOFFSET(_,_,_,_)", WREN_PHYSICS_SET_CGOFFSET },
        { "GET_CGOFFSET(_)", WREN_PHYSICS_GET_CGOFFSET },
        { "SET_CG_AT_BOUNDCENTER(_)", WREN_PHYSICS_SET_CG_AT_BOUNDCENTER },
        { "BREAK_ENTITY_GLASS(_,_,_,_,_,_,_,_,_,_,_)", WREN_PHYSICS_BREAK_ENTITY_GLASS },
        { "GET_IS_ENTITY_A_FRAG(_)", WREN_PHYSICS_GET_IS_ENTITY_A_FRAG },
        { "SET_DISABLE_BREAKING(_,_)", WREN_PHYSICS_SET_DISABLE_BREAKING },
        { "RESET_DISABLE_BREAKING(_)", WREN_PHYSICS_RESET_DISABLE_BREAKING },
        { "SET_DISABLE_FRAG_DAMAGE(_,_)", WREN_PHYSICS_SET_DISABLE_FRAG_DAMAGE },
        { "SET_USE_KINEMATIC_PHYSICS(_,_)", WREN_PHYSICS_SET_USE_KINEMATIC_PHYSICS },
        { "SET_IN_STUNT_MODE(_)", WREN_PHYSICS_SET_IN_STUNT_MODE },
        { "SET_IN_ARENA_MODE(_)", WREN_PHYSICS_SET_IN_ARENA_MODE },
        { "GET_PLAYER_PED(_)", WREN_PLAYER_GET_PLAYER_PED },
        { "GET_PLAYER_PED_SCRIPT_INDEX(_)", WREN_PLAYER_GET_PLAYER_PED_SCRIPT_INDEX },
        { "SET_PLAYER_MODEL(_,_)", WREN_PLAYER_SET_PLAYER_MODEL },
        { "CHANGE_PLAYER_PED(_,_,_,_)", WREN_PLAYER_CHANGE_PLAYER_PED },
        { "GET_PLAYER_RGB_COLOUR(_)", WREN_PLAYER_GET_PLAYER_RGB_COLOUR },
        { "GET_NUMBER_OF_PLAYERS()", WREN_PLAYER_GET_NUMBER_OF_PLAYERS },
        { "GET_PLAYER_TEAM(_)", WREN_PLAYER_GET_PLAYER_TEAM },
        { "SET_PLAYER_TEAM(_,_)", WREN_PLAYER_SET_PLAYER_TEAM },
        { "GET_NUMBER_OF_PLAYERS_IN_TEAM(_)", WREN_PLAYER_GET_NUMBER_OF_PLAYERS_IN_TEAM },
        { "GET_PLAYER_NAME(_)", WREN_PLAYER_GET_PLAYER_NAME },
        { "GET_WANTED_LEVEL_RADIUS(_)", WREN_PLAYER_GET_WANTED_LEVEL_RADIUS },
        { "GET_PLAYER_WANTED_CENTRE_POSITION(_)", WREN_PLAYER_GET_PLAYER_WANTED_CENTRE_POSITION },
        { "SET_PLAYER_WANTED_CENTRE_POSITION(_,_,_)", WREN_PLAYER_SET_PLAYER_WANTED_CENTRE_POSITION },
        { "GET_WANTED_LEVEL_THRESHOLD(_)", WREN_PLAYER_GET_WANTED_LEVEL_THRESHOLD },
        { "SET_PLAYER_WANTED_LEVEL(_,_,_)", WREN_PLAYER_SET_PLAYER_WANTED_LEVEL },
        { "SET_PLAYER_WANTED_LEVEL_NO_DROP(_,_,_)", WREN_PLAYER_SET_PLAYER_WANTED_LEVEL_NO_DROP },
        { "SET_PLAYER_WANTED_LEVEL_NOW(_,_)", WREN_PLAYER_SET_PLAYER_WANTED_LEVEL_NOW },
        { "ARE_PLAYER_FLASHING_STARS_ABOUT_TO_DROP(_)", WREN_PLAYER_ARE_PLAYER_FLASHING_STARS_ABOUT_TO_DROP },
        { "ARE_PLAYER_STARS_GREYED_OUT(_)", WREN_PLAYER_ARE_PLAYER_STARS_GREYED_OUT },
        { "IS_WANTED_AND_HAS_BEEN_SEEN_BY_COPS(_)", WREN_PLAYER_IS_WANTED_AND_HAS_BEEN_SEEN_BY_COPS },
        { "SET_DISPATCH_COPS_FOR_PLAYER(_,_)", WREN_PLAYER_SET_DISPATCH_COPS_FOR_PLAYER },
        { "IS_PLAYER_WANTED_LEVEL_GREATER(_,_)", WREN_PLAYER_IS_PLAYER_WANTED_LEVEL_GREATER },
        { "CLEAR_PLAYER_WANTED_LEVEL(_)", WREN_PLAYER_CLEAR_PLAYER_WANTED_LEVEL },
        { "IS_PLAYER_DEAD(_)", WREN_PLAYER_IS_PLAYER_DEAD },
        { "IS_PLAYER_PRESSING_HORN(_)", WREN_PLAYER_IS_PLAYER_PRESSING_HORN },
        { "SET_PLAYER_CONTROL(_,_,_)", WREN_PLAYER_SET_PLAYER_CONTROL },
        { "GET_PLAYER_WANTED_LEVEL(_)", WREN_PLAYER_GET_PLAYER_WANTED_LEVEL },
        { "SET_MAX_WANTED_LEVEL(_)", WREN_PLAYER_SET_MAX_WANTED_LEVEL },
        { "SET_POLICE_RADAR_BLIPS(_)", WREN_PLAYER_SET_POLICE_RADAR_BLIPS },
        { "SET_POLICE_IGNORE_PLAYER(_,_)", WREN_PLAYER_SET_POLICE_IGNORE_PLAYER },
        { "IS_PLAYER_PLAYING(_)", WREN_PLAYER_IS_PLAYER_PLAYING },
        { "SET_EVERYONE_IGNORE_PLAYER(_,_)", WREN_PLAYER_SET_EVERYONE_IGNORE_PLAYER },
        { "SET_ALL_RANDOM_PEDS_FLEE(_,_)", WREN_PLAYER_SET_ALL_RANDOM_PEDS_FLEE },
        { "SET_ALL_RANDOM_PEDS_FLEE_THIS_FRAME(_)", WREN_PLAYER_SET_ALL_RANDOM_PEDS_FLEE_THIS_FRAME },
        { "SET_ALL_NEUTRAL_RANDOM_PEDS_FLEE(_,_)", WREN_PLAYER_SET_ALL_NEUTRAL_RANDOM_PEDS_FLEE },
        { "SET_ALL_NEUTRAL_RANDOM_PEDS_FLEE_THIS_FRAME(_)", WREN_PLAYER_SET_ALL_NEUTRAL_RANDOM_PEDS_FLEE_THIS_FRAME },
        { "SET_LAW_PEDS_CAN_ATTACK_NON_WANTED_PLAYER_THIS_FRAME(_)", WREN_PLAYER_SET_LAW_PEDS_CAN_ATTACK_NON_WANTED_PLAYER_THIS_FRAME },
        { "SET_IGNORE_LOW_PRIORITY_SHOCKING_EVENTS(_,_)", WREN_PLAYER_SET_IGNORE_LOW_PRIORITY_SHOCKING_EVENTS },
        { "SET_WANTED_LEVEL_MULTIPLIER(_)", WREN_PLAYER_SET_WANTED_LEVEL_MULTIPLIER },
        { "SET_WANTED_LEVEL_DIFFICULTY(_,_)", WREN_PLAYER_SET_WANTED_LEVEL_DIFFICULTY },
        { "RESET_WANTED_LEVEL_DIFFICULTY(_)", WREN_PLAYER_RESET_WANTED_LEVEL_DIFFICULTY },
        { "GET_WANTED_LEVEL_TIME_TO_ESCAPE()", WREN_PLAYER_GET_WANTED_LEVEL_TIME_TO_ESCAPE },
        { "SET_WANTED_LEVEL_HIDDEN_ESCAPE_TIME(_,_,_)", WREN_PLAYER_SET_WANTED_LEVEL_HIDDEN_ESCAPE_TIME },
        { "RESET_WANTED_LEVEL_HIDDEN_ESCAPE_TIME(_)", WREN_PLAYER_RESET_WANTED_LEVEL_HIDDEN_ESCAPE_TIME },
        { "START_FIRING_AMNESTY(_)", WREN_PLAYER_START_FIRING_AMNESTY },
        { "REPORT_CRIME(_,_,_)", WREN_PLAYER_REPORT_CRIME },
        { "SUPPRESS_CRIME_THIS_FRAME(_,_)", WREN_PLAYER_SUPPRESS_CRIME_THIS_FRAME },
        { "UPDATE_WANTED_POSITION_THIS_FRAME(_)", WREN_PLAYER_UPDATE_WANTED_POSITION_THIS_FRAME },
        { "SUPPRESS_LOSING_WANTED_LEVEL_IF_HIDDEN_THIS_FRAME(_)", WREN_PLAYER_SUPPRESS_LOSING_WANTED_LEVEL_IF_HIDDEN_THIS_FRAME },
        { "ALLOW_EVASION_HUD_IF_DISABLING_HIDDEN_EVASION_THIS_FRAME(_,_)", WREN_PLAYER_ALLOW_EVASION_HUD_IF_DISABLING_HIDDEN_EVASION_THIS_FRAME },
        { "FORCE_START_HIDDEN_EVASION(_)", WREN_PLAYER_FORCE_START_HIDDEN_EVASION },
        { "SUPPRESS_WITNESSES_CALLING_POLICE_THIS_FRAME(_)", WREN_PLAYER_SUPPRESS_WITNESSES_CALLING_POLICE_THIS_FRAME },
        { "REPORT_POLICE_SPOTTED_PLAYER(_)", WREN_PLAYER_REPORT_POLICE_SPOTTED_PLAYER },
        { "SET_LAW_RESPONSE_DELAY_OVERRIDE(_)", WREN_PLAYER_SET_LAW_RESPONSE_DELAY_OVERRIDE },
        { "RESET_LAW_RESPONSE_DELAY_OVERRIDE()", WREN_PLAYER_RESET_LAW_RESPONSE_DELAY_OVERRIDE },
        { "CAN_PLAYER_START_MISSION(_)", WREN_PLAYER_CAN_PLAYER_START_MISSION },
        { "IS_PLAYER_READY_FOR_CUTSCENE(_)", WREN_PLAYER_IS_PLAYER_READY_FOR_CUTSCENE },
        { "IS_PLAYER_TARGETTING_ENTITY(_,_)", WREN_PLAYER_IS_PLAYER_TARGETTING_ENTITY },
        { "GET_PLAYER_TARGET_ENTITY(_)", WREN_PLAYER_GET_PLAYER_TARGET_ENTITY },
        { "IS_PLAYER_FREE_AIMING(_)", WREN_PLAYER_IS_PLAYER_FREE_AIMING },
        { "IS_PLAYER_FREE_AIMING_AT_ENTITY(_,_)", WREN_PLAYER_IS_PLAYER_FREE_AIMING_AT_ENTITY },
        { "GET_ENTITY_PLAYER_IS_FREE_AIMING_AT(_)", WREN_PLAYER_GET_ENTITY_PLAYER_IS_FREE_AIMING_AT },
        { "SET_PLAYER_LOCKON_RANGE_OVERRIDE(_,_)", WREN_PLAYER_SET_PLAYER_LOCKON_RANGE_OVERRIDE },
        { "SET_PLAYER_CAN_DO_DRIVE_BY(_,_)", WREN_PLAYER_SET_PLAYER_CAN_DO_DRIVE_BY },
        { "SET_PLAYER_CAN_BE_HASSLED_BY_GANGS(_,_)", WREN_PLAYER_SET_PLAYER_CAN_BE_HASSLED_BY_GANGS },
        { "SET_PLAYER_CAN_USE_COVER(_,_)", WREN_PLAYER_SET_PLAYER_CAN_USE_COVER },
        { "GET_MAX_WANTED_LEVEL()", WREN_PLAYER_GET_MAX_WANTED_LEVEL },
        { "IS_PLAYER_TARGETTING_ANYTHING(_)", WREN_PLAYER_IS_PLAYER_TARGETTING_ANYTHING },
        { "SET_PLAYER_SPRINT(_,_)", WREN_PLAYER_SET_PLAYER_SPRINT },
        { "RESET_PLAYER_STAMINA(_)", WREN_PLAYER_RESET_PLAYER_STAMINA },
        { "RESTORE_PLAYER_STAMINA(_,_)", WREN_PLAYER_RESTORE_PLAYER_STAMINA },
        { "GET_PLAYER_SPRINT_STAMINA_REMAINING(_)", WREN_PLAYER_GET_PLAYER_SPRINT_STAMINA_REMAINING },
        { "GET_PLAYER_SPRINT_TIME_REMAINING(_)", WREN_PLAYER_GET_PLAYER_SPRINT_TIME_REMAINING },
        { "GET_PLAYER_UNDERWATER_TIME_REMAINING(_)", WREN_PLAYER_GET_PLAYER_UNDERWATER_TIME_REMAINING },
        { "SET_PLAYER_UNDERWATER_BREATH_PERCENT_REMAINING(_,_)", WREN_PLAYER_SET_PLAYER_UNDERWATER_BREATH_PERCENT_REMAINING },
        { "GET_PLAYER_GROUP(_)", WREN_PLAYER_GET_PLAYER_GROUP },
        { "GET_PLAYER_MAX_ARMOUR(_)", WREN_PLAYER_GET_PLAYER_MAX_ARMOUR },
        { "IS_PLAYER_CONTROL_ON(_)", WREN_PLAYER_IS_PLAYER_CONTROL_ON },
        { "GET_ARE_CAMERA_CONTROLS_DISABLED()", WREN_PLAYER_GET_ARE_CAMERA_CONTROLS_DISABLED },
        { "IS_PLAYER_SCRIPT_CONTROL_ON(_)", WREN_PLAYER_IS_PLAYER_SCRIPT_CONTROL_ON },
        { "IS_PLAYER_CLIMBING(_)", WREN_PLAYER_IS_PLAYER_CLIMBING },
        { "IS_PLAYER_BEING_ARRESTED(_,_)", WREN_PLAYER_IS_PLAYER_BEING_ARRESTED },
        { "RESET_PLAYER_ARREST_STATE(_)", WREN_PLAYER_RESET_PLAYER_ARREST_STATE },
        { "GET_PLAYERS_LAST_VEHICLE()", WREN_PLAYER_GET_PLAYERS_LAST_VEHICLE },
        { "GET_PLAYER_INDEX()", WREN_PLAYER_GET_PLAYER_INDEX },
        { "INT_TO_PLAYERINDEX(_)", WREN_PLAYER_INT_TO_PLAYERINDEX },
        { "INT_TO_PARTICIPANTINDEX(_)", WREN_PLAYER_INT_TO_PARTICIPANTINDEX },
        { "GET_TIME_SINCE_PLAYER_HIT_VEHICLE(_)", WREN_PLAYER_GET_TIME_SINCE_PLAYER_HIT_VEHICLE },
        { "GET_TIME_SINCE_PLAYER_HIT_PED(_)", WREN_PLAYER_GET_TIME_SINCE_PLAYER_HIT_PED },
        { "GET_TIME_SINCE_PLAYER_DROVE_ON_PAVEMENT(_)", WREN_PLAYER_GET_TIME_SINCE_PLAYER_DROVE_ON_PAVEMENT },
        { "GET_TIME_SINCE_PLAYER_DROVE_AGAINST_TRAFFIC(_)", WREN_PLAYER_GET_TIME_SINCE_PLAYER_DROVE_AGAINST_TRAFFIC },
        { "IS_PLAYER_FREE_FOR_AMBIENT_TASK(_)", WREN_PLAYER_IS_PLAYER_FREE_FOR_AMBIENT_TASK },
        { "PLAYER_ID()", WREN_PLAYER_PLAYER_ID },
        { "PLAYER_PED_ID()", WREN_PLAYER_PLAYER_PED_ID },
        { "NETWORK_PLAYER_ID_TO_INT()", WREN_PLAYER_NETWORK_PLAYER_ID_TO_INT },
        { "HAS_FORCE_CLEANUP_OCCURRED(_)", WREN_PLAYER_HAS_FORCE_CLEANUP_OCCURRED },
        { "FORCE_CLEANUP(_)", WREN_PLAYER_FORCE_CLEANUP },
        { "FORCE_CLEANUP_FOR_ALL_THREADS_WITH_THIS_NAME(_,_)", WREN_PLAYER_FORCE_CLEANUP_FOR_ALL_THREADS_WITH_THIS_NAME },
        { "FORCE_CLEANUP_FOR_THREAD_WITH_THIS_ID(_,_)", WREN_PLAYER_FORCE_CLEANUP_FOR_THREAD_WITH_THIS_ID },
        { "GET_CAUSE_OF_MOST_RECENT_FORCE_CLEANUP()", WREN_PLAYER_GET_CAUSE_OF_MOST_RECENT_FORCE_CLEANUP },
        { "SET_PLAYER_MAY_ONLY_ENTER_THIS_VEHICLE(_,_)", WREN_PLAYER_SET_PLAYER_MAY_ONLY_ENTER_THIS_VEHICLE },
        { "SET_PLAYER_MAY_NOT_ENTER_ANY_VEHICLE(_)", WREN_PLAYER_SET_PLAYER_MAY_NOT_ENTER_ANY_VEHICLE },
        { "GIVE_ACHIEVEMENT_TO_PLAYER(_)", WREN_PLAYER_GIVE_ACHIEVEMENT_TO_PLAYER },
        { "SET_ACHIEVEMENT_PROGRESS(_,_)", WREN_PLAYER_SET_ACHIEVEMENT_PROGRESS },
        { "GET_ACHIEVEMENT_PROGRESS(_)", WREN_PLAYER_GET_ACHIEVEMENT_PROGRESS },
        { "HAS_ACHIEVEMENT_BEEN_PASSED(_)", WREN_PLAYER_HAS_ACHIEVEMENT_BEEN_PASSED },
        { "IS_PLAYER_ONLINE()", WREN_PLAYER_IS_PLAYER_ONLINE },
        { "IS_PLAYER_LOGGING_IN_NP()", WREN_PLAYER_IS_PLAYER_LOGGING_IN_NP },
        { "DISPLAY_SYSTEM_SIGNIN_UI(_)", WREN_PLAYER_DISPLAY_SYSTEM_SIGNIN_UI },
        { "IS_SYSTEM_UI_BEING_DISPLAYED()", WREN_PLAYER_IS_SYSTEM_UI_BEING_DISPLAYED },
        { "SET_PLAYER_INVINCIBLE(_,_)", WREN_PLAYER_SET_PLAYER_INVINCIBLE },
        { "GET_PLAYER_INVINCIBLE(_)", WREN_PLAYER_GET_PLAYER_INVINCIBLE },
        { "GET_PLAYER_DEBUG_INVINCIBLE(_)", WREN_PLAYER_GET_PLAYER_DEBUG_INVINCIBLE },
        { "SET_PLAYER_INVINCIBLE_BUT_HAS_REACTIONS(_,_)", WREN_PLAYER_SET_PLAYER_INVINCIBLE_BUT_HAS_REACTIONS },
        { "SET_PLAYER_CAN_COLLECT_DROPPED_MONEY(_,_)", WREN_PLAYER_SET_PLAYER_CAN_COLLECT_DROPPED_MONEY },
        { "REMOVE_PLAYER_HELMET(_,_)", WREN_PLAYER_REMOVE_PLAYER_HELMET },
        { "GIVE_PLAYER_RAGDOLL_CONTROL(_,_)", WREN_PLAYER_GIVE_PLAYER_RAGDOLL_CONTROL },
        { "SET_PLAYER_LOCKON(_,_)", WREN_PLAYER_SET_PLAYER_LOCKON },
        { "SET_PLAYER_TARGETING_MODE(_)", WREN_PLAYER_SET_PLAYER_TARGETING_MODE },
        { "SET_PLAYER_TARGET_LEVEL(_)", WREN_PLAYER_SET_PLAYER_TARGET_LEVEL },
        { "GET_IS_USING_FPS_THIRD_PERSON_COVER()", WREN_PLAYER_GET_IS_USING_FPS_THIRD_PERSON_COVER },
        { "GET_IS_USING_HOOD_CAMERA()", WREN_PLAYER_GET_IS_USING_HOOD_CAMERA },
        { "CLEAR_PLAYER_HAS_DAMAGED_AT_LEAST_ONE_PED(_)", WREN_PLAYER_CLEAR_PLAYER_HAS_DAMAGED_AT_LEAST_ONE_PED },
        { "HAS_PLAYER_DAMAGED_AT_LEAST_ONE_PED(_)", WREN_PLAYER_HAS_PLAYER_DAMAGED_AT_LEAST_ONE_PED },
        { "CLEAR_PLAYER_HAS_DAMAGED_AT_LEAST_ONE_NON_ANIMAL_PED(_)", WREN_PLAYER_CLEAR_PLAYER_HAS_DAMAGED_AT_LEAST_ONE_NON_ANIMAL_PED },
        { "HAS_PLAYER_DAMAGED_AT_LEAST_ONE_NON_ANIMAL_PED(_)", WREN_PLAYER_HAS_PLAYER_DAMAGED_AT_LEAST_ONE_NON_ANIMAL_PED },
        { "SET_AIR_DRAG_MULTIPLIER_FOR_PLAYERS_VEHICLE(_,_)", WREN_PLAYER_SET_AIR_DRAG_MULTIPLIER_FOR_PLAYERS_VEHICLE },
        { "SET_SWIM_MULTIPLIER_FOR_PLAYER(_,_)", WREN_PLAYER_SET_SWIM_MULTIPLIER_FOR_PLAYER },
        { "SET_RUN_SPRINT_MULTIPLIER_FOR_PLAYER(_,_)", WREN_PLAYER_SET_RUN_SPRINT_MULTIPLIER_FOR_PLAYER },
        { "GET_TIME_SINCE_LAST_ARREST()", WREN_PLAYER_GET_TIME_SINCE_LAST_ARREST },
        { "GET_TIME_SINCE_LAST_DEATH()", WREN_PLAYER_GET_TIME_SINCE_LAST_DEATH },
        { "ASSISTED_MOVEMENT_CLOSE_ROUTE()", WREN_PLAYER_ASSISTED_MOVEMENT_CLOSE_ROUTE },
        { "ASSISTED_MOVEMENT_FLUSH_ROUTE()", WREN_PLAYER_ASSISTED_MOVEMENT_FLUSH_ROUTE },
        { "SET_PLAYER_FORCED_AIM(_,_)", WREN_PLAYER_SET_PLAYER_FORCED_AIM },
        { "SET_PLAYER_FORCED_ZOOM(_,_)", WREN_PLAYER_SET_PLAYER_FORCED_ZOOM },
        { "SET_PLAYER_FORCE_SKIP_AIM_INTRO(_,_)", WREN_PLAYER_SET_PLAYER_FORCE_SKIP_AIM_INTRO },
        { "DISABLE_PLAYER_FIRING(_,_)", WREN_PLAYER_DISABLE_PLAYER_FIRING },
        { "DISABLE_PLAYER_THROW_GRENADE_WHILE_USING_GUN()", WREN_PLAYER_DISABLE_PLAYER_THROW_GRENADE_WHILE_USING_GUN },
        { "SET_DISABLE_AMBIENT_MELEE_MOVE(_,_)", WREN_PLAYER_SET_DISABLE_AMBIENT_MELEE_MOVE },
        { "SET_PLAYER_MAX_ARMOUR(_,_)", WREN_PLAYER_SET_PLAYER_MAX_ARMOUR },
        { "SPECIAL_ABILITY_ACTIVATE(_,_)", WREN_PLAYER_SPECIAL_ABILITY_ACTIVATE },
        { "SET_SPECIAL_ABILITY_MP(_,_,_)", WREN_PLAYER_SET_SPECIAL_ABILITY_MP },
        { "SPECIAL_ABILITY_DEACTIVATE_MP(_,_)", WREN_PLAYER_SPECIAL_ABILITY_DEACTIVATE_MP },
        { "SPECIAL_ABILITY_DEACTIVATE(_,_)", WREN_PLAYER_SPECIAL_ABILITY_DEACTIVATE },
        { "SPECIAL_ABILITY_DEACTIVATE_FAST(_,_)", WREN_PLAYER_SPECIAL_ABILITY_DEACTIVATE_FAST },
        { "SPECIAL_ABILITY_RESET(_,_)", WREN_PLAYER_SPECIAL_ABILITY_RESET },
        { "SPECIAL_ABILITY_CHARGE_ON_MISSION_FAILED(_,_)", WREN_PLAYER_SPECIAL_ABILITY_CHARGE_ON_MISSION_FAILED },
        { "SPECIAL_ABILITY_CHARGE_SMALL(_,_,_,_)", WREN_PLAYER_SPECIAL_ABILITY_CHARGE_SMALL },
        { "SPECIAL_ABILITY_CHARGE_MEDIUM(_,_,_,_)", WREN_PLAYER_SPECIAL_ABILITY_CHARGE_MEDIUM },
        { "SPECIAL_ABILITY_CHARGE_LARGE(_,_,_,_)", WREN_PLAYER_SPECIAL_ABILITY_CHARGE_LARGE },
        { "SPECIAL_ABILITY_CHARGE_CONTINUOUS(_,_,_)", WREN_PLAYER_SPECIAL_ABILITY_CHARGE_CONTINUOUS },
        { "SPECIAL_ABILITY_CHARGE_ABSOLUTE(_,_,_,_)", WREN_PLAYER_SPECIAL_ABILITY_CHARGE_ABSOLUTE },
        { "SPECIAL_ABILITY_CHARGE_NORMALIZED(_,_,_,_)", WREN_PLAYER_SPECIAL_ABILITY_CHARGE_NORMALIZED },
        { "SPECIAL_ABILITY_FILL_METER(_,_,_)", WREN_PLAYER_SPECIAL_ABILITY_FILL_METER },
        { "SPECIAL_ABILITY_DEPLETE_METER(_,_,_)", WREN_PLAYER_SPECIAL_ABILITY_DEPLETE_METER },
        { "SPECIAL_ABILITY_LOCK(_,_)", WREN_PLAYER_SPECIAL_ABILITY_LOCK },
        { "SPECIAL_ABILITY_UNLOCK(_,_)", WREN_PLAYER_SPECIAL_ABILITY_UNLOCK },
        { "IS_SPECIAL_ABILITY_UNLOCKED(_)", WREN_PLAYER_IS_SPECIAL_ABILITY_UNLOCKED },
        { "IS_SPECIAL_ABILITY_ACTIVE(_,_)", WREN_PLAYER_IS_SPECIAL_ABILITY_ACTIVE },
        { "IS_SPECIAL_ABILITY_METER_FULL(_,_)", WREN_PLAYER_IS_SPECIAL_ABILITY_METER_FULL },
        { "ENABLE_SPECIAL_ABILITY(_,_,_)", WREN_PLAYER_ENABLE_SPECIAL_ABILITY },
        { "IS_SPECIAL_ABILITY_ENABLED(_,_)", WREN_PLAYER_IS_SPECIAL_ABILITY_ENABLED },
        { "SET_SPECIAL_ABILITY_MULTIPLIER(_)", WREN_PLAYER_SET_SPECIAL_ABILITY_MULTIPLIER },
        { "UPDATE_SPECIAL_ABILITY_FROM_STAT(_,_)", WREN_PLAYER_UPDATE_SPECIAL_ABILITY_FROM_STAT },
        { "GET_IS_PLAYER_DRIVING_ON_HIGHWAY(_)", WREN_PLAYER_GET_IS_PLAYER_DRIVING_ON_HIGHWAY },
        { "GET_IS_PLAYER_DRIVING_WRECKLESS(_,_)", WREN_PLAYER_GET_IS_PLAYER_DRIVING_WRECKLESS },
        { "GET_IS_MOPPING_AREA_FREE_IN_FRONT_OF_PLAYER(_,_)", WREN_PLAYER_GET_IS_MOPPING_AREA_FREE_IN_FRONT_OF_PLAYER },
        { "START_PLAYER_TELEPORT(_,_,_,_,_,_,_,_)", WREN_PLAYER_START_PLAYER_TELEPORT },
        { "UPDATE_PLAYER_TELEPORT(_)", WREN_PLAYER_UPDATE_PLAYER_TELEPORT },
        { "STOP_PLAYER_TELEPORT()", WREN_PLAYER_STOP_PLAYER_TELEPORT },
        { "IS_PLAYER_TELEPORT_ACTIVE()", WREN_PLAYER_IS_PLAYER_TELEPORT_ACTIVE },
        { "GET_PLAYER_CURRENT_STEALTH_NOISE(_)", WREN_PLAYER_GET_PLAYER_CURRENT_STEALTH_NOISE },
        { "SET_PLAYER_HEALTH_RECHARGE_MULTIPLIER(_,_)", WREN_PLAYER_SET_PLAYER_HEALTH_RECHARGE_MULTIPLIER },
        { "GET_PLAYER_HEALTH_RECHARGE_MAX_PERCENT(_)", WREN_PLAYER_GET_PLAYER_HEALTH_RECHARGE_MAX_PERCENT },
        { "SET_PLAYER_HEALTH_RECHARGE_MAX_PERCENT(_,_)", WREN_PLAYER_SET_PLAYER_HEALTH_RECHARGE_MAX_PERCENT },
        { "SET_PLAYER_FALL_DISTANCE_TO_TRIGGER_RAGDOLL_OVERRIDE(_,_)", WREN_PLAYER_SET_PLAYER_FALL_DISTANCE_TO_TRIGGER_RAGDOLL_OVERRIDE },
        { "SET_PLAYER_WEAPON_DAMAGE_MODIFIER(_,_)", WREN_PLAYER_SET_PLAYER_WEAPON_DAMAGE_MODIFIER },
        { "SET_PLAYER_WEAPON_DEFENSE_MODIFIER(_,_)", WREN_PLAYER_SET_PLAYER_WEAPON_DEFENSE_MODIFIER },
        { "SET_PLAYER_WEAPON_MINIGUN_DEFENSE_MODIFIER(_,_)", WREN_PLAYER_SET_PLAYER_WEAPON_MINIGUN_DEFENSE_MODIFIER },
        { "SET_PLAYER_MELEE_WEAPON_DAMAGE_MODIFIER(_,_,_)", WREN_PLAYER_SET_PLAYER_MELEE_WEAPON_DAMAGE_MODIFIER },
        { "SET_PLAYER_MELEE_WEAPON_DEFENSE_MODIFIER(_,_)", WREN_PLAYER_SET_PLAYER_MELEE_WEAPON_DEFENSE_MODIFIER },
        { "SET_PLAYER_VEHICLE_DAMAGE_MODIFIER(_,_)", WREN_PLAYER_SET_PLAYER_VEHICLE_DAMAGE_MODIFIER },
        { "SET_PLAYER_VEHICLE_DEFENSE_MODIFIER(_,_)", WREN_PLAYER_SET_PLAYER_VEHICLE_DEFENSE_MODIFIER },
        { "SET_PLAYER_MAX_EXPLOSIVE_DAMAGE(_,_)", WREN_PLAYER_SET_PLAYER_MAX_EXPLOSIVE_DAMAGE },
        { "SET_PLAYER_EXPLOSIVE_DAMAGE_MODIFIER(_,_)", WREN_PLAYER_SET_PLAYER_EXPLOSIVE_DAMAGE_MODIFIER },
        { "SET_PLAYER_WEAPON_TAKEDOWN_DEFENSE_MODIFIER(_,_)", WREN_PLAYER_SET_PLAYER_WEAPON_TAKEDOWN_DEFENSE_MODIFIER },
        { "SET_PLAYER_PARACHUTE_TINT_INDEX(_,_)", WREN_PLAYER_SET_PLAYER_PARACHUTE_TINT_INDEX },
        { "GET_PLAYER_PARACHUTE_TINT_INDEX(_)", WREN_PLAYER_GET_PLAYER_PARACHUTE_TINT_INDEX },
        { "SET_PLAYER_RESERVE_PARACHUTE_TINT_INDEX(_,_)", WREN_PLAYER_SET_PLAYER_RESERVE_PARACHUTE_TINT_INDEX },
        { "GET_PLAYER_RESERVE_PARACHUTE_TINT_INDEX(_)", WREN_PLAYER_GET_PLAYER_RESERVE_PARACHUTE_TINT_INDEX },
        { "SET_PLAYER_PARACHUTE_PACK_TINT_INDEX(_,_)", WREN_PLAYER_SET_PLAYER_PARACHUTE_PACK_TINT_INDEX },
        { "GET_PLAYER_PARACHUTE_PACK_TINT_INDEX(_)", WREN_PLAYER_GET_PLAYER_PARACHUTE_PACK_TINT_INDEX },
        { "SET_PLAYER_HAS_RESERVE_PARACHUTE(_)", WREN_PLAYER_SET_PLAYER_HAS_RESERVE_PARACHUTE },
        { "GET_PLAYER_HAS_RESERVE_PARACHUTE(_)", WREN_PLAYER_GET_PLAYER_HAS_RESERVE_PARACHUTE },
        { "SET_PLAYER_CAN_LEAVE_PARACHUTE_SMOKE_TRAIL(_,_)", WREN_PLAYER_SET_PLAYER_CAN_LEAVE_PARACHUTE_SMOKE_TRAIL },
        { "SET_PLAYER_PARACHUTE_SMOKE_TRAIL_COLOR(_,_,_,_)", WREN_PLAYER_SET_PLAYER_PARACHUTE_SMOKE_TRAIL_COLOR },
        { "GET_PLAYER_PARACHUTE_SMOKE_TRAIL_COLOR(_)", WREN_PLAYER_GET_PLAYER_PARACHUTE_SMOKE_TRAIL_COLOR },
        { "SET_PLAYER_PHONE_PALETTE_IDX(_,_)", WREN_PLAYER_SET_PLAYER_PHONE_PALETTE_IDX },
        { "SET_PLAYER_NOISE_MULTIPLIER(_,_)", WREN_PLAYER_SET_PLAYER_NOISE_MULTIPLIER },
        { "SET_PLAYER_SNEAKING_NOISE_MULTIPLIER(_,_)", WREN_PLAYER_SET_PLAYER_SNEAKING_NOISE_MULTIPLIER },
        { "CAN_PED_HEAR_PLAYER(_,_)", WREN_PLAYER_CAN_PED_HEAR_PLAYER },
        { "SIMULATE_PLAYER_INPUT_GAIT(_,_,_,_,_,_)", WREN_PLAYER_SIMULATE_PLAYER_INPUT_GAIT },
        { "RESET_PLAYER_INPUT_GAIT(_)", WREN_PLAYER_RESET_PLAYER_INPUT_GAIT },
        { "SET_AUTO_GIVE_PARACHUTE_WHEN_ENTER_PLANE(_,_)", WREN_PLAYER_SET_AUTO_GIVE_PARACHUTE_WHEN_ENTER_PLANE },
        { "SET_AUTO_GIVE_SCUBA_GEAR_WHEN_EXIT_VEHICLE(_,_)", WREN_PLAYER_SET_AUTO_GIVE_SCUBA_GEAR_WHEN_EXIT_VEHICLE },
        { "SET_PLAYER_STEALTH_PERCEPTION_MODIFIER(_,_)", WREN_PLAYER_SET_PLAYER_STEALTH_PERCEPTION_MODIFIER },
        { "IS_REMOTE_PLAYER_IN_NON_CLONED_VEHICLE(_)", WREN_PLAYER_IS_REMOTE_PLAYER_IN_NON_CLONED_VEHICLE },
        { "INCREASE_PLAYER_JUMP_SUPPRESSION_RANGE(_)", WREN_PLAYER_INCREASE_PLAYER_JUMP_SUPPRESSION_RANGE },
        { "SET_PLAYER_SIMULATE_AIMING(_,_)", WREN_PLAYER_SET_PLAYER_SIMULATE_AIMING },
        { "SET_PLAYER_CLOTH_PIN_FRAMES(_,_)", WREN_PLAYER_SET_PLAYER_CLOTH_PIN_FRAMES },
        { "SET_PLAYER_CLOTH_PACKAGE_INDEX(_)", WREN_PLAYER_SET_PLAYER_CLOTH_PACKAGE_INDEX },
        { "SET_PLAYER_CLOTH_LOCK_COUNTER(_)", WREN_PLAYER_SET_PLAYER_CLOTH_LOCK_COUNTER },
        { "PLAYER_ATTACH_VIRTUAL_BOUND(_,_,_,_,_,_,_,_)", WREN_PLAYER_PLAYER_ATTACH_VIRTUAL_BOUND },
        { "PLAYER_DETACH_VIRTUAL_BOUND()", WREN_PLAYER_PLAYER_DETACH_VIRTUAL_BOUND },
        { "HAS_PLAYER_BEEN_SPOTTED_IN_STOLEN_VEHICLE(_)", WREN_PLAYER_HAS_PLAYER_BEEN_SPOTTED_IN_STOLEN_VEHICLE },
        { "IS_PLAYER_BATTLE_AWARE(_)", WREN_PLAYER_IS_PLAYER_BATTLE_AWARE },
        { "GET_PLAYER_RECEIVED_BATTLE_EVENT_RECENTLY(_,_,_)", WREN_PLAYER_GET_PLAYER_RECEIVED_BATTLE_EVENT_RECENTLY },
        { "EXTEND_WORLD_BOUNDARY_FOR_PLAYER(_,_,_)", WREN_PLAYER_EXTEND_WORLD_BOUNDARY_FOR_PLAYER },
        { "RESET_WORLD_BOUNDARY_FOR_PLAYER()", WREN_PLAYER_RESET_WORLD_BOUNDARY_FOR_PLAYER },
        { "IS_PLAYER_RIDING_TRAIN(_)", WREN_PLAYER_IS_PLAYER_RIDING_TRAIN },
        { "HAS_PLAYER_LEFT_THE_WORLD(_)", WREN_PLAYER_HAS_PLAYER_LEFT_THE_WORLD },
        { "SET_PLAYER_LEAVE_PED_BEHIND(_,_)", WREN_PLAYER_SET_PLAYER_LEAVE_PED_BEHIND },
        { "SET_PLAYER_PARACHUTE_VARIATION_OVERRIDE(_,_,_,_,_)", WREN_PLAYER_SET_PLAYER_PARACHUTE_VARIATION_OVERRIDE },
        { "CLEAR_PLAYER_PARACHUTE_VARIATION_OVERRIDE(_)", WREN_PLAYER_CLEAR_PLAYER_PARACHUTE_VARIATION_OVERRIDE },
        { "SET_PLAYER_PARACHUTE_MODEL_OVERRIDE(_,_)", WREN_PLAYER_SET_PLAYER_PARACHUTE_MODEL_OVERRIDE },
        { "SET_PLAYER_RESERVE_PARACHUTE_MODEL_OVERRIDE(_,_)", WREN_PLAYER_SET_PLAYER_RESERVE_PARACHUTE_MODEL_OVERRIDE },
        { "GET_PLAYER_PARACHUTE_MODEL_OVERRIDE(_)", WREN_PLAYER_GET_PLAYER_PARACHUTE_MODEL_OVERRIDE },
        { "GET_PLAYER_RESERVE_PARACHUTE_MODEL_OVERRIDE(_)", WREN_PLAYER_GET_PLAYER_RESERVE_PARACHUTE_MODEL_OVERRIDE },
        { "CLEAR_PLAYER_PARACHUTE_MODEL_OVERRIDE(_)", WREN_PLAYER_CLEAR_PLAYER_PARACHUTE_MODEL_OVERRIDE },
        { "CLEAR_PLAYER_RESERVE_PARACHUTE_MODEL_OVERRIDE(_)", WREN_PLAYER_CLEAR_PLAYER_RESERVE_PARACHUTE_MODEL_OVERRIDE },
        { "SET_PLAYER_PARACHUTE_PACK_MODEL_OVERRIDE(_,_)", WREN_PLAYER_SET_PLAYER_PARACHUTE_PACK_MODEL_OVERRIDE },
        { "CLEAR_PLAYER_PARACHUTE_PACK_MODEL_OVERRIDE(_)", WREN_PLAYER_CLEAR_PLAYER_PARACHUTE_PACK_MODEL_OVERRIDE },
        { "DISABLE_PLAYER_VEHICLE_REWARDS(_)", WREN_PLAYER_DISABLE_PLAYER_VEHICLE_REWARDS },
        { "SET_PLAYER_SPECTATED_VEHICLE_RADIO_OVERRIDE(_)", WREN_PLAYER_SET_PLAYER_SPECTATED_VEHICLE_RADIO_OVERRIDE },
        { "SET_PLAYER_BLUETOOTH_STATE(_,_)", WREN_PLAYER_SET_PLAYER_BLUETOOTH_STATE },
        { "IS_PLAYER_BLUETOOTH_ENABLE(_)", WREN_PLAYER_IS_PLAYER_BLUETOOTH_ENABLE },
        { "DISABLE_CAMERA_VIEW_MODE_CYCLE(_)", WREN_PLAYER_DISABLE_CAMERA_VIEW_MODE_CYCLE },
        { "GET_PLAYER_FAKE_WANTED_LEVEL(_)", WREN_PLAYER_GET_PLAYER_FAKE_WANTED_LEVEL },
        { "SET_PLAYER_CAN_DAMAGE_PLAYER(_,_,_)", WREN_PLAYER_SET_PLAYER_CAN_DAMAGE_PLAYER },
        { "SET_APPLY_WAYPOINT_OF_PLAYER(_,_)", WREN_PLAYER_SET_APPLY_WAYPOINT_OF_PLAYER },
        { "IS_PLAYER_VEHICLE_WEAPON_TOGGLED_TO_NON_HOMING(_)", WREN_PLAYER_IS_PLAYER_VEHICLE_WEAPON_TOGGLED_TO_NON_HOMING },
        { "SET_PLAYER_VEHICLE_WEAPON_TO_NON_HOMING(_)", WREN_PLAYER_SET_PLAYER_VEHICLE_WEAPON_TO_NON_HOMING },
        { "SET_PLAYER_HOMING_DISABLED_FOR_ALL_VEHICLE_WEAPONS(_,_)", WREN_PLAYER_SET_PLAYER_HOMING_DISABLED_FOR_ALL_VEHICLE_WEAPONS },
        { "ADD_PLAYER_TARGETABLE_ENTITY(_,_)", WREN_PLAYER_ADD_PLAYER_TARGETABLE_ENTITY },
        { "REMOVE_PLAYER_TARGETABLE_ENTITY(_,_)", WREN_PLAYER_REMOVE_PLAYER_TARGETABLE_ENTITY },
        { "SET_PLAYER_PREVIOUS_VARIATION_DATA(_,_,_,_,_,_)", WREN_PLAYER_SET_PLAYER_PREVIOUS_VARIATION_DATA },
        { "REMOVE_SCRIPT_FIRE_POSITION()", WREN_PLAYER_REMOVE_SCRIPT_FIRE_POSITION },
        { "SET_SCRIPT_FIRE_POSITION(_,_,_)", WREN_PLAYER_SET_SCRIPT_FIRE_POSITION },
        { "REPLAY_START_EVENT(_)", WREN_RECORDING_REPLAY_START_EVENT },
        { "REPLAY_STOP_EVENT()", WREN_RECORDING_REPLAY_STOP_EVENT },
        { "REPLAY_CANCEL_EVENT()", WREN_RECORDING_REPLAY_CANCEL_EVENT },
        { "REPLAY_RECORD_BACK_FOR_TIME(_,_,_)", WREN_RECORDING_REPLAY_RECORD_BACK_FOR_TIME },
        { "REPLAY_CHECK_FOR_EVENT_THIS_FRAME(_,_)", WREN_RECORDING_REPLAY_CHECK_FOR_EVENT_THIS_FRAME },
        { "REPLAY_PREVENT_RECORDING_THIS_FRAME()", WREN_RECORDING_REPLAY_PREVENT_RECORDING_THIS_FRAME },
        { "REPLAY_RESET_EVENT_INFO()", WREN_RECORDING_REPLAY_RESET_EVENT_INFO },
        { "REPLAY_DISABLE_CAMERA_MOVEMENT_THIS_FRAME()", WREN_RECORDING_REPLAY_DISABLE_CAMERA_MOVEMENT_THIS_FRAME },
        { "RECORD_GREATEST_MOMENT(_,_,_)", WREN_RECORDING_RECORD_GREATEST_MOMENT },
        { "START_REPLAY_RECORDING(_)", WREN_RECORDING_START_REPLAY_RECORDING },
        { "STOP_REPLAY_RECORDING()", WREN_RECORDING_STOP_REPLAY_RECORDING },
        { "CANCEL_REPLAY_RECORDING()", WREN_RECORDING_CANCEL_REPLAY_RECORDING },
        { "SAVE_REPLAY_RECORDING()", WREN_RECORDING_SAVE_REPLAY_RECORDING },
        { "IS_REPLAY_RECORDING()", WREN_RECORDING_IS_REPLAY_RECORDING },
        { "IS_REPLAY_INITIALIZED()", WREN_RECORDING_IS_REPLAY_INITIALIZED },
        { "IS_REPLAY_AVAILABLE()", WREN_RECORDING_IS_REPLAY_AVAILABLE },
        { "IS_REPLAY_RECORD_SPACE_AVAILABLE(_)", WREN_RECORDING_IS_REPLAY_RECORD_SPACE_AVAILABLE },
        { "REGISTER_EFFECT_FOR_REPLAY_EDITOR(_,_)", WREN_REPLAY_REGISTER_EFFECT_FOR_REPLAY_EDITOR },
        { "REPLAY_SYSTEM_HAS_REQUESTED_A_SCRIPT_CLEANUP()", WREN_REPLAY_REPLAY_SYSTEM_HAS_REQUESTED_A_SCRIPT_CLEANUP },
        { "SET_SCRIPTS_HAVE_CLEANED_UP_FOR_REPLAY_SYSTEM()", WREN_REPLAY_SET_SCRIPTS_HAVE_CLEANED_UP_FOR_REPLAY_SYSTEM },
        { "SET_REPLAY_SYSTEM_PAUSED_FOR_SAVE(_)", WREN_REPLAY_SET_REPLAY_SYSTEM_PAUSED_FOR_SAVE },
        { "REPLAY_CONTROL_SHUTDOWN()", WREN_REPLAY_REPLAY_CONTROL_SHUTDOWN },
        { "ACTIVATE_ROCKSTAR_EDITOR(_)", WREN_REPLAY_ACTIVATE_ROCKSTAR_EDITOR },
        { "SAVEMIGRATION_IS_MP_ENABLED()", WREN_SAVEMIGRATION_SAVEMIGRATION_IS_MP_ENABLED },
        { "SAVEMIGRATION_MP_REQUEST_ACCOUNTS()", WREN_SAVEMIGRATION_SAVEMIGRATION_MP_REQUEST_ACCOUNTS },
        { "SAVEMIGRATION_MP_GET_ACCOUNTS_STATUS()", WREN_SAVEMIGRATION_SAVEMIGRATION_MP_GET_ACCOUNTS_STATUS },
        { "SAVEMIGRATION_MP_NUM_ACCOUNTS()", WREN_SAVEMIGRATION_SAVEMIGRATION_MP_NUM_ACCOUNTS },
        { "SAVEMIGRATION_MP_GET_ACCOUNT(_)", WREN_SAVEMIGRATION_SAVEMIGRATION_MP_GET_ACCOUNT },
        { "SAVEMIGRATION_MP_REQUEST_STATUS()", WREN_SAVEMIGRATION_SAVEMIGRATION_MP_REQUEST_STATUS },
        { "SAVEMIGRATION_MP_GET_STATUS()", WREN_SAVEMIGRATION_SAVEMIGRATION_MP_GET_STATUS },
        { "REQUEST_SCRIPT(_)", WREN_SCRIPT_REQUEST_SCRIPT },
        { "SET_SCRIPT_AS_NO_LONGER_NEEDED(_)", WREN_SCRIPT_SET_SCRIPT_AS_NO_LONGER_NEEDED },
        { "HAS_SCRIPT_LOADED(_)", WREN_SCRIPT_HAS_SCRIPT_LOADED },
        { "DOES_SCRIPT_EXIST(_)", WREN_SCRIPT_DOES_SCRIPT_EXIST },
        { "REQUEST_SCRIPT_WITH_NAME_HASH(_)", WREN_SCRIPT_REQUEST_SCRIPT_WITH_NAME_HASH },
        { "SET_SCRIPT_WITH_NAME_HASH_AS_NO_LONGER_NEEDED(_)", WREN_SCRIPT_SET_SCRIPT_WITH_NAME_HASH_AS_NO_LONGER_NEEDED },
        { "HAS_SCRIPT_WITH_NAME_HASH_LOADED(_)", WREN_SCRIPT_HAS_SCRIPT_WITH_NAME_HASH_LOADED },
        { "DOES_SCRIPT_WITH_NAME_HASH_EXIST(_)", WREN_SCRIPT_DOES_SCRIPT_WITH_NAME_HASH_EXIST },
        { "TERMINATE_THREAD(_)", WREN_SCRIPT_TERMINATE_THREAD },
        { "IS_THREAD_ACTIVE(_)", WREN_SCRIPT_IS_THREAD_ACTIVE },
        { "GET_NAME_OF_SCRIPT_WITH_THIS_ID(_)", WREN_SCRIPT_GET_NAME_OF_SCRIPT_WITH_THIS_ID },
        { "SCRIPT_THREAD_ITERATOR_RESET()", WREN_SCRIPT_SCRIPT_THREAD_ITERATOR_RESET },
        { "SCRIPT_THREAD_ITERATOR_GET_NEXT_THREAD_ID()", WREN_SCRIPT_SCRIPT_THREAD_ITERATOR_GET_NEXT_THREAD_ID },
        { "GET_ID_OF_THIS_THREAD()", WREN_SCRIPT_GET_ID_OF_THIS_THREAD },
        { "TERMINATE_THIS_THREAD()", WREN_SCRIPT_TERMINATE_THIS_THREAD },
        { "GET_NUMBER_OF_THREADS_RUNNING_THE_SCRIPT_WITH_THIS_HASH(_)", WREN_SCRIPT_GET_NUMBER_OF_THREADS_RUNNING_THE_SCRIPT_WITH_THIS_HASH },
        { "GET_THIS_SCRIPT_NAME()", WREN_SCRIPT_GET_THIS_SCRIPT_NAME },
        { "GET_HASH_OF_THIS_SCRIPT_NAME()", WREN_SCRIPT_GET_HASH_OF_THIS_SCRIPT_NAME },
        { "GET_NUMBER_OF_EVENTS(_)", WREN_SCRIPT_GET_NUMBER_OF_EVENTS },
        { "GET_EVENT_EXISTS(_,_)", WREN_SCRIPT_GET_EVENT_EXISTS },
        { "GET_EVENT_AT_INDEX(_,_)", WREN_SCRIPT_GET_EVENT_AT_INDEX },
        { "GET_EVENT_DATA(_,_,_)", WREN_SCRIPT_GET_EVENT_DATA },
        { "TRIGGER_SCRIPT_EVENT(_,_,_)", WREN_SCRIPT_TRIGGER_SCRIPT_EVENT },
        { "SHUTDOWN_LOADING_SCREEN()", WREN_SCRIPT_SHUTDOWN_LOADING_SCREEN },
        { "SET_NO_LOADING_SCREEN(_)", WREN_SCRIPT_SET_NO_LOADING_SCREEN },
        { "GET_NO_LOADING_SCREEN()", WREN_SCRIPT_GET_NO_LOADING_SCREEN },
        { "COMMIT_TO_LOADINGSCREEN_SELCTION()", WREN_SCRIPT_COMMIT_TO_LOADINGSCREEN_SELCTION },
        { "BG_IS_EXITFLAG_SET()", WREN_SCRIPT_BG_IS_EXITFLAG_SET },
        { "BG_SET_EXITFLAG_RESPONSE()", WREN_SCRIPT_BG_SET_EXITFLAG_RESPONSE },
        { "BG_START_CONTEXT_HASH(_)", WREN_SCRIPT_BG_START_CONTEXT_HASH },
        { "BG_END_CONTEXT_HASH(_)", WREN_SCRIPT_BG_END_CONTEXT_HASH },
        { "BG_START_CONTEXT(_)", WREN_SCRIPT_BG_START_CONTEXT },
        { "BG_END_CONTEXT(_)", WREN_SCRIPT_BG_END_CONTEXT },
        { "BG_DOES_LAUNCH_PARAM_EXIST(_,_)", WREN_SCRIPT_BG_DOES_LAUNCH_PARAM_EXIST },
        { "BG_GET_LAUNCH_PARAM_VALUE(_,_)", WREN_SCRIPT_BG_GET_LAUNCH_PARAM_VALUE },
        { "BG_GET_SCRIPT_ID_FROM_NAME_HASH(_)", WREN_SCRIPT_BG_GET_SCRIPT_ID_FROM_NAME_HASH },
        { "SEND_TU_SCRIPT_EVENT(_,_,_)", WREN_SCRIPT_SEND_TU_SCRIPT_EVENT },
        { "REGISTER_SCRIPT_VARIABLE()", WREN_SECURITY_REGISTER_SCRIPT_VARIABLE },
        { "UNREGISTER_SCRIPT_VARIABLE()", WREN_SECURITY_UNREGISTER_SCRIPT_VARIABLE },
        { "FORCE_CHECK_SCRIPT_VARIABLES()", WREN_SECURITY_FORCE_CHECK_SCRIPT_VARIABLES },
        { "START_SHAPE_TEST_LOS_PROBE(_,_,_,_,_,_,_,_,_)", WREN_SHAPETEST_START_SHAPE_TEST_LOS_PROBE },
        { "START_EXPENSIVE_SYNCHRONOUS_SHAPE_TEST_LOS_PROBE(_,_,_,_,_,_,_,_,_)", WREN_SHAPETEST_START_EXPENSIVE_SYNCHRONOUS_SHAPE_TEST_LOS_PROBE },
        { "START_SHAPE_TEST_BOUNDING_BOX(_,_,_)", WREN_SHAPETEST_START_SHAPE_TEST_BOUNDING_BOX },
        { "START_SHAPE_TEST_BOX(_,_,_,_,_,_,_,_,_,_,_,_,_)", WREN_SHAPETEST_START_SHAPE_TEST_BOX },
        { "START_SHAPE_TEST_BOUND(_,_,_)", WREN_SHAPETEST_START_SHAPE_TEST_BOUND },
        { "START_SHAPE_TEST_CAPSULE(_,_,_,_,_,_,_,_,_,_)", WREN_SHAPETEST_START_SHAPE_TEST_CAPSULE },
        { "START_SHAPE_TEST_SWEPT_SPHERE(_,_,_,_,_,_,_,_,_,_)", WREN_SHAPETEST_START_SHAPE_TEST_SWEPT_SPHERE },
        { "START_SHAPE_TEST_MOUSE_CURSOR_LOS_PROBE(_,_,_)", WREN_SHAPETEST_START_SHAPE_TEST_MOUSE_CURSOR_LOS_PROBE },
        { "GET_SHAPE_TEST_RESULT(_)", WREN_SHAPETEST_GET_SHAPE_TEST_RESULT },
        { "GET_SHAPE_TEST_RESULT_INCLUDING_MATERIAL(_)", WREN_SHAPETEST_GET_SHAPE_TEST_RESULT_INCLUDING_MATERIAL },
        { "RELEASE_SCRIPT_GUID_FROM_ENTITY(_)", WREN_SHAPETEST_RELEASE_SCRIPT_GUID_FROM_ENTITY },
        { "SC_INBOX_GET_TOTAL_NUM_MESSAGES()", WREN_SOCIALCLUB_SC_INBOX_GET_TOTAL_NUM_MESSAGES },
        { "SC_INBOX_GET_MESSAGE_TYPE_AT_INDEX(_)", WREN_SOCIALCLUB_SC_INBOX_GET_MESSAGE_TYPE_AT_INDEX },
        { "SC_INBOX_GET_MESSAGE_IS_READ_AT_INDEX(_)", WREN_SOCIALCLUB_SC_INBOX_GET_MESSAGE_IS_READ_AT_INDEX },
        { "SC_INBOX_SET_MESSAGE_AS_READ_AT_INDEX(_)", WREN_SOCIALCLUB_SC_INBOX_SET_MESSAGE_AS_READ_AT_INDEX },
        { "SC_INBOX_MESSAGE_GET_DATA_INT(_,_)", WREN_SOCIALCLUB_SC_INBOX_MESSAGE_GET_DATA_INT },
        { "SC_INBOX_MESSAGE_GET_DATA_BOOL(_,_)", WREN_SOCIALCLUB_SC_INBOX_MESSAGE_GET_DATA_BOOL },
        { "SC_INBOX_MESSAGE_GET_DATA_STRING(_,_)", WREN_SOCIALCLUB_SC_INBOX_MESSAGE_GET_DATA_STRING },
        { "SC_INBOX_MESSAGE_DO_APPLY(_)", WREN_SOCIALCLUB_SC_INBOX_MESSAGE_DO_APPLY },
        { "SC_INBOX_MESSAGE_GET_RAW_TYPE_AT_INDEX(_)", WREN_SOCIALCLUB_SC_INBOX_MESSAGE_GET_RAW_TYPE_AT_INDEX },
        { "SC_INBOX_MESSAGE_PUSH_GAMER_T0_RECIP_LIST()", WREN_SOCIALCLUB_SC_INBOX_MESSAGE_PUSH_GAMER_T0_RECIP_LIST },
        { "SC_INBOX_SEND_UGCSTATUPDATE_TO_RECIP_LIST()", WREN_SOCIALCLUB_SC_INBOX_SEND_UGCSTATUPDATE_TO_RECIP_LIST },
        { "SC_INBOX_MESSAGE_GET_UGCDATA(_)", WREN_SOCIALCLUB_SC_INBOX_MESSAGE_GET_UGCDATA },
        { "SC_INBOX_SEND_BOUNTY_TO_RECIP_LIST()", WREN_SOCIALCLUB_SC_INBOX_SEND_BOUNTY_TO_RECIP_LIST },
        { "SC_INBOX_GET_BOUNTY_DATA_AT_INDEX(_)", WREN_SOCIALCLUB_SC_INBOX_GET_BOUNTY_DATA_AT_INDEX },
        { "SC_EMAIL_RETRIEVE_EMAILS(_,_)", WREN_SOCIALCLUB_SC_EMAIL_RETRIEVE_EMAILS },
        { "SC_EMAIL_GET_RETRIEVAL_STATUS()", WREN_SOCIALCLUB_SC_EMAIL_GET_RETRIEVAL_STATUS },
        { "SC_EMAIL_GET_NUM_RETRIEVED_EMAILS()", WREN_SOCIALCLUB_SC_EMAIL_GET_NUM_RETRIEVED_EMAILS },
        { "SC_EMAIL_GET_EMAIL_AT_INDEX(_)", WREN_SOCIALCLUB_SC_EMAIL_GET_EMAIL_AT_INDEX },
        { "SC_EMAIL_DELETE_EMAILS(_)", WREN_SOCIALCLUB_SC_EMAIL_DELETE_EMAILS },
        { "SC_EMAIL_MESSAGE_PUSH_GAMER_TO_RECIP_LIST()", WREN_SOCIALCLUB_SC_EMAIL_MESSAGE_PUSH_GAMER_TO_RECIP_LIST },
        { "SC_EMAIL_MESSAGE_CLEAR_RECIP_LIST()", WREN_SOCIALCLUB_SC_EMAIL_MESSAGE_CLEAR_RECIP_LIST },
        { "SC_EMAIL_SEND_EMAIL(_)", WREN_SOCIALCLUB_SC_EMAIL_SEND_EMAIL },
        { "SC_EMAIL_SET_CURRENT_EMAIL_TAG(_)", WREN_SOCIALCLUB_SC_EMAIL_SET_CURRENT_EMAIL_TAG },
        { "SC_CACHE_NEW_ROCKSTAR_MSGS(_)", WREN_SOCIALCLUB_SC_CACHE_NEW_ROCKSTAR_MSGS },
        { "SC_HAS_NEW_ROCKSTAR_MSG()", WREN_SOCIALCLUB_SC_HAS_NEW_ROCKSTAR_MSG },
        { "SC_GET_NEW_ROCKSTAR_MSG()", WREN_SOCIALCLUB_SC_GET_NEW_ROCKSTAR_MSG },
        { "SC_PRESENCE_ATTR_SET_INT(_,_)", WREN_SOCIALCLUB_SC_PRESENCE_ATTR_SET_INT },
        { "SC_PRESENCE_ATTR_SET_FLOAT(_,_)", WREN_SOCIALCLUB_SC_PRESENCE_ATTR_SET_FLOAT },
        { "SC_PRESENCE_ATTR_SET_STRING(_,_)", WREN_SOCIALCLUB_SC_PRESENCE_ATTR_SET_STRING },
        { "SC_PRESENCE_SET_ACTIVITY_RATING(_,_)", WREN_SOCIALCLUB_SC_PRESENCE_SET_ACTIVITY_RATING },
        { "SC_GAMERDATA_GET_INT()", WREN_SOCIALCLUB_SC_GAMERDATA_GET_INT },
        { "SC_GAMERDATA_GET_FLOAT()", WREN_SOCIALCLUB_SC_GAMERDATA_GET_FLOAT },
        { "SC_GAMERDATA_GET_BOOL(_)", WREN_SOCIALCLUB_SC_GAMERDATA_GET_BOOL },
        { "SC_GAMERDATA_GET_STRING()", WREN_SOCIALCLUB_SC_GAMERDATA_GET_STRING },
        { "SC_GAMERDATA_GET_ACTIVE_XP_BONUS()", WREN_SOCIALCLUB_SC_GAMERDATA_GET_ACTIVE_XP_BONUS },
        { "SC_PROFANITY_CHECK_STRING(_)", WREN_SOCIALCLUB_SC_PROFANITY_CHECK_STRING },
        { "SC_PROFANITY_CHECK_STRING_UGC(_)", WREN_SOCIALCLUB_SC_PROFANITY_CHECK_STRING_UGC },
        { "SC_PROFANITY_GET_CHECK_IS_VALID(_)", WREN_SOCIALCLUB_SC_PROFANITY_GET_CHECK_IS_VALID },
        { "SC_PROFANITY_GET_CHECK_IS_PENDING(_)", WREN_SOCIALCLUB_SC_PROFANITY_GET_CHECK_IS_PENDING },
        { "SC_PROFANITY_GET_STRING_PASSED(_)", WREN_SOCIALCLUB_SC_PROFANITY_GET_STRING_PASSED },
        { "SC_PROFANITY_GET_STRING_STATUS(_)", WREN_SOCIALCLUB_SC_PROFANITY_GET_STRING_STATUS },
        { "SC_LICENSEPLATE_CHECK_STRING(_)", WREN_SOCIALCLUB_SC_LICENSEPLATE_CHECK_STRING },
        { "SC_LICENSEPLATE_GET_CHECK_IS_VALID(_)", WREN_SOCIALCLUB_SC_LICENSEPLATE_GET_CHECK_IS_VALID },
        { "SC_LICENSEPLATE_GET_CHECK_IS_PENDING(_)", WREN_SOCIALCLUB_SC_LICENSEPLATE_GET_CHECK_IS_PENDING },
        { "SC_LICENSEPLATE_GET_COUNT(_)", WREN_SOCIALCLUB_SC_LICENSEPLATE_GET_COUNT },
        { "SC_LICENSEPLATE_GET_PLATE(_,_)", WREN_SOCIALCLUB_SC_LICENSEPLATE_GET_PLATE },
        { "SC_LICENSEPLATE_GET_PLATE_DATA(_,_)", WREN_SOCIALCLUB_SC_LICENSEPLATE_GET_PLATE_DATA },
        { "SC_LICENSEPLATE_SET_PLATE_DATA(_,_)", WREN_SOCIALCLUB_SC_LICENSEPLATE_SET_PLATE_DATA },
        { "SC_LICENSEPLATE_ADD(_)", WREN_SOCIALCLUB_SC_LICENSEPLATE_ADD },
        { "SC_LICENSEPLATE_GET_ADD_IS_PENDING(_)", WREN_SOCIALCLUB_SC_LICENSEPLATE_GET_ADD_IS_PENDING },
        { "SC_LICENSEPLATE_GET_ADD_STATUS(_)", WREN_SOCIALCLUB_SC_LICENSEPLATE_GET_ADD_STATUS },
        { "SC_LICENSEPLATE_ISVALID(_)", WREN_SOCIALCLUB_SC_LICENSEPLATE_ISVALID },
        { "SC_LICENSEPLATE_GET_ISVALID_IS_PENDING(_)", WREN_SOCIALCLUB_SC_LICENSEPLATE_GET_ISVALID_IS_PENDING },
        { "SC_LICENSEPLATE_GET_ISVALID_STATUS(_)", WREN_SOCIALCLUB_SC_LICENSEPLATE_GET_ISVALID_STATUS },
        { "SC_COMMUNITY_EVENT_IS_ACTIVE()", WREN_SOCIALCLUB_SC_COMMUNITY_EVENT_IS_ACTIVE },
        { "SC_COMMUNITY_EVENT_GET_EVENT_ID()", WREN_SOCIALCLUB_SC_COMMUNITY_EVENT_GET_EVENT_ID },
        { "SC_COMMUNITY_EVENT_GET_EXTRA_DATA_INT(_)", WREN_SOCIALCLUB_SC_COMMUNITY_EVENT_GET_EXTRA_DATA_INT },
        { "SC_COMMUNITY_EVENT_GET_EXTRA_DATA_FLOAT(_)", WREN_SOCIALCLUB_SC_COMMUNITY_EVENT_GET_EXTRA_DATA_FLOAT },
        { "SC_COMMUNITY_EVENT_GET_EXTRA_DATA_STRING(_)", WREN_SOCIALCLUB_SC_COMMUNITY_EVENT_GET_EXTRA_DATA_STRING },
        { "SC_COMMUNITY_EVENT_GET_DISPLAY_NAME()", WREN_SOCIALCLUB_SC_COMMUNITY_EVENT_GET_DISPLAY_NAME },
        { "SC_COMMUNITY_EVENT_IS_ACTIVE_FOR_TYPE(_)", WREN_SOCIALCLUB_SC_COMMUNITY_EVENT_IS_ACTIVE_FOR_TYPE },
        { "SC_COMMUNITY_EVENT_GET_EVENT_ID_FOR_TYPE(_)", WREN_SOCIALCLUB_SC_COMMUNITY_EVENT_GET_EVENT_ID_FOR_TYPE },
        { "SC_COMMUNITY_EVENT_GET_EXTRA_DATA_INT_FOR_TYPE(_,_)", WREN_SOCIALCLUB_SC_COMMUNITY_EVENT_GET_EXTRA_DATA_INT_FOR_TYPE },
        { "SC_COMMUNITY_EVENT_GET_EXTRA_DATA_FLOAT_FOR_TYPE(_,_)", WREN_SOCIALCLUB_SC_COMMUNITY_EVENT_GET_EXTRA_DATA_FLOAT_FOR_TYPE },
        { "SC_COMMUNITY_EVENT_GET_EXTRA_DATA_STRING_FOR_TYPE(_,_)", WREN_SOCIALCLUB_SC_COMMUNITY_EVENT_GET_EXTRA_DATA_STRING_FOR_TYPE },
        { "SC_COMMUNITY_EVENT_GET_DISPLAY_NAME_FOR_TYPE(_)", WREN_SOCIALCLUB_SC_COMMUNITY_EVENT_GET_DISPLAY_NAME_FOR_TYPE },
        { "SC_COMMUNITY_EVENT_IS_ACTIVE_BY_ID(_)", WREN_SOCIALCLUB_SC_COMMUNITY_EVENT_IS_ACTIVE_BY_ID },
        { "SC_COMMUNITY_EVENT_GET_EXTRA_DATA_INT_BY_ID(_,_)", WREN_SOCIALCLUB_SC_COMMUNITY_EVENT_GET_EXTRA_DATA_INT_BY_ID },
        { "SC_COMMUNITY_EVENT_GET_EXTRA_DATA_FLOAT_BY_ID(_,_)", WREN_SOCIALCLUB_SC_COMMUNITY_EVENT_GET_EXTRA_DATA_FLOAT_BY_ID },
        { "SC_COMMUNITY_EVENT_GET_EXTRA_DATA_STRING_BY_ID(_,_)", WREN_SOCIALCLUB_SC_COMMUNITY_EVENT_GET_EXTRA_DATA_STRING_BY_ID },
        { "SC_COMMUNITY_EVENT_GET_DISPLAY_NAME_BY_ID(_)", WREN_SOCIALCLUB_SC_COMMUNITY_EVENT_GET_DISPLAY_NAME_BY_ID },
        { "SC_TRANSITION_NEWS_SHOW(_)", WREN_SOCIALCLUB_SC_TRANSITION_NEWS_SHOW },
        { "SC_TRANSITION_NEWS_SHOW_TIMED(_,_)", WREN_SOCIALCLUB_SC_TRANSITION_NEWS_SHOW_TIMED },
        { "SC_TRANSITION_NEWS_SHOW_NEXT_ITEM()", WREN_SOCIALCLUB_SC_TRANSITION_NEWS_SHOW_NEXT_ITEM },
        { "SC_TRANSITION_NEWS_HAS_EXTRA_DATA_TU()", WREN_SOCIALCLUB_SC_TRANSITION_NEWS_HAS_EXTRA_DATA_TU },
        { "SC_TRANSITION_NEWS_GET_EXTRA_DATA_INT_TU(_)", WREN_SOCIALCLUB_SC_TRANSITION_NEWS_GET_EXTRA_DATA_INT_TU },
        { "SC_TRANSITION_NEWS_END()", WREN_SOCIALCLUB_SC_TRANSITION_NEWS_END },
        { "SC_PAUSE_NEWS_INIT_STARTER_PACK(_)", WREN_SOCIALCLUB_SC_PAUSE_NEWS_INIT_STARTER_PACK },
        { "SC_PAUSE_NEWS_GET_PENDING_STORY(_)", WREN_SOCIALCLUB_SC_PAUSE_NEWS_GET_PENDING_STORY },
        { "SC_PAUSE_NEWS_SHUTDOWN()", WREN_SOCIALCLUB_SC_PAUSE_NEWS_SHUTDOWN },
        { "SC_ACCOUNT_INFO_GET_NICKNAME()", WREN_SOCIALCLUB_SC_ACCOUNT_INFO_GET_NICKNAME },
        { "SC_ACHIEVEMENT_INFO_STATUS()", WREN_SOCIALCLUB_SC_ACHIEVEMENT_INFO_STATUS },
        { "SC_HAS_ACHIEVEMENT_BEEN_PASSED(_)", WREN_SOCIALCLUB_SC_HAS_ACHIEVEMENT_BEEN_PASSED },
        { "STAT_CLEAR_SLOT_FOR_RELOAD(_)", WREN_STATS_STAT_CLEAR_SLOT_FOR_RELOAD },
        { "STAT_LOAD(_)", WREN_STATS_STAT_LOAD },
        { "STAT_SAVE(_,_,_,_)", WREN_STATS_STAT_SAVE },
        { "STAT_SET_OPEN_SAVETYPE_IN_JOB(_)", WREN_STATS_STAT_SET_OPEN_SAVETYPE_IN_JOB },
        { "STAT_LOAD_PENDING(_)", WREN_STATS_STAT_LOAD_PENDING },
        { "STAT_SAVE_PENDING()", WREN_STATS_STAT_SAVE_PENDING },
        { "STAT_SAVE_PENDING_OR_REQUESTED()", WREN_STATS_STAT_SAVE_PENDING_OR_REQUESTED },
        { "STAT_DELETE_SLOT(_)", WREN_STATS_STAT_DELETE_SLOT },
        { "STAT_SLOT_IS_LOADED(_)", WREN_STATS_STAT_SLOT_IS_LOADED },
        { "STAT_CLOUD_SLOT_LOAD_FAILED(_)", WREN_STATS_STAT_CLOUD_SLOT_LOAD_FAILED },
        { "STAT_CLOUD_SLOT_LOAD_FAILED_CODE(_)", WREN_STATS_STAT_CLOUD_SLOT_LOAD_FAILED_CODE },
        { "STAT_SET_BLOCK_SAVES(_)", WREN_STATS_STAT_SET_BLOCK_SAVES },
        { "STAT_GET_BLOCK_SAVES()", WREN_STATS_STAT_GET_BLOCK_SAVES },
        { "STAT_CLOUD_SLOT_SAVE_FAILED(_)", WREN_STATS_STAT_CLOUD_SLOT_SAVE_FAILED },
        { "STAT_CLEAR_PENDING_SAVES(_)", WREN_STATS_STAT_CLEAR_PENDING_SAVES },
        { "STAT_LOAD_DIRTY_READ_DETECTED()", WREN_STATS_STAT_LOAD_DIRTY_READ_DETECTED },
        { "STAT_CLEAR_DIRTY_READ_DETECTED()", WREN_STATS_STAT_CLEAR_DIRTY_READ_DETECTED },
        { "STAT_GET_LOAD_SAFE_TO_PROGRESS_TO_MP_FROM_SP()", WREN_STATS_STAT_GET_LOAD_SAFE_TO_PROGRESS_TO_MP_FROM_SP },
        { "STAT_SET_INT(_,_,_)", WREN_STATS_STAT_SET_INT },
        { "STAT_SET_FLOAT(_,_,_)", WREN_STATS_STAT_SET_FLOAT },
        { "STAT_SET_BOOL(_,_,_)", WREN_STATS_STAT_SET_BOOL },
        { "STAT_SET_GXT_LABEL(_,_,_)", WREN_STATS_STAT_SET_GXT_LABEL },
        { "STAT_SET_DATE(_,_,_)", WREN_STATS_STAT_SET_DATE },
        { "STAT_SET_STRING(_,_,_)", WREN_STATS_STAT_SET_STRING },
        { "STAT_SET_POS(_,_,_,_,_)", WREN_STATS_STAT_SET_POS },
        { "STAT_SET_MASKED_INT(_,_,_,_,_)", WREN_STATS_STAT_SET_MASKED_INT },
        { "STAT_SET_USER_ID(_,_,_)", WREN_STATS_STAT_SET_USER_ID },
        { "STAT_SET_CURRENT_POSIX_TIME(_,_)", WREN_STATS_STAT_SET_CURRENT_POSIX_TIME },
        { "STAT_GET_INT(_,_)", WREN_STATS_STAT_GET_INT },
        { "STAT_GET_FLOAT(_,_)", WREN_STATS_STAT_GET_FLOAT },
        { "STAT_GET_BOOL(_,_)", WREN_STATS_STAT_GET_BOOL },
        { "STAT_GET_DATE(_,_,_)", WREN_STATS_STAT_GET_DATE },
        { "STAT_GET_STRING(_,_)", WREN_STATS_STAT_GET_STRING },
        { "STAT_GET_POS(_,_)", WREN_STATS_STAT_GET_POS },
        { "STAT_GET_MASKED_INT(_,_,_,_)", WREN_STATS_STAT_GET_MASKED_INT },
        { "STAT_GET_USER_ID(_)", WREN_STATS_STAT_GET_USER_ID },
        { "STAT_GET_LICENSE_PLATE(_)", WREN_STATS_STAT_GET_LICENSE_PLATE },
        { "STAT_SET_LICENSE_PLATE(_,_)", WREN_STATS_STAT_SET_LICENSE_PLATE },
        { "STAT_INCREMENT(_,_)", WREN_STATS_STAT_INCREMENT },
        { "STAT_COMMUNITY_START_SYNCH()", WREN_STATS_STAT_COMMUNITY_START_SYNCH },
        { "STAT_COMMUNITY_SYNCH_IS_PENDING()", WREN_STATS_STAT_COMMUNITY_SYNCH_IS_PENDING },
        { "STAT_COMMUNITY_GET_HISTORY(_,_)", WREN_STATS_STAT_COMMUNITY_GET_HISTORY },
        { "STAT_RESET_ALL_ONLINE_CHARACTER_STATS(_)", WREN_STATS_STAT_RESET_ALL_ONLINE_CHARACTER_STATS },
        { "STAT_LOCAL_RESET_ALL_ONLINE_CHARACTER_STATS(_)", WREN_STATS_STAT_LOCAL_RESET_ALL_ONLINE_CHARACTER_STATS },
        { "STAT_GET_NUMBER_OF_DAYS(_)", WREN_STATS_STAT_GET_NUMBER_OF_DAYS },
        { "STAT_GET_NUMBER_OF_HOURS(_)", WREN_STATS_STAT_GET_NUMBER_OF_HOURS },
        { "STAT_GET_NUMBER_OF_MINUTES(_)", WREN_STATS_STAT_GET_NUMBER_OF_MINUTES },
        { "STAT_GET_NUMBER_OF_SECONDS(_)", WREN_STATS_STAT_GET_NUMBER_OF_SECONDS },
        { "STAT_SET_PROFILE_SETTING_VALUE(_,_)", WREN_STATS_STAT_SET_PROFILE_SETTING_VALUE },
        { "STATS_COMPLETED_CHARACTER_CREATION(_)", WREN_STATS_STATS_COMPLETED_CHARACTER_CREATION },
        { "PACKED_STAT_GET_INT_STAT_INDEX(_)", WREN_STATS_PACKED_STAT_GET_INT_STAT_INDEX },
        { "GET_PACKED_INT_STAT_KEY(_,_,_,_)", WREN_STATS_GET_PACKED_INT_STAT_KEY },
        { "GET_PACKED_TU_INT_STAT_KEY(_,_,_,_)", WREN_STATS_GET_PACKED_TU_INT_STAT_KEY },
        { "GET_PACKED_NG_INT_STAT_KEY(_,_,_,_,_)", WREN_STATS_GET_PACKED_NG_INT_STAT_KEY },
        { "GET_PACKED_STAT_BOOL_CODE(_,_)", WREN_STATS_GET_PACKED_STAT_BOOL_CODE },
        { "GET_PACKED_STAT_INT_CODE(_,_)", WREN_STATS_GET_PACKED_STAT_INT_CODE },
        { "SET_PACKED_STAT_BOOL_CODE(_,_,_)", WREN_STATS_SET_PACKED_STAT_BOOL_CODE },
        { "SET_PACKED_STAT_INT_CODE(_,_,_)", WREN_STATS_SET_PACKED_STAT_INT_CODE },
        { "PLAYSTATS_BACKGROUND_SCRIPT_ACTION(_,_)", WREN_STATS_PLAYSTATS_BACKGROUND_SCRIPT_ACTION },
        { "PLAYSTATS_NPC_INVITE()", WREN_STATS_PLAYSTATS_NPC_INVITE },
        { "PLAYSTATS_AWARD_XP(_,_,_)", WREN_STATS_PLAYSTATS_AWARD_XP },
        { "PLAYSTATS_RANK_UP(_)", WREN_STATS_PLAYSTATS_RANK_UP },
        { "PLAYSTATS_STARTED_SESSION_IN_OFFLINEMODE()", WREN_STATS_PLAYSTATS_STARTED_SESSION_IN_OFFLINEMODE },
        { "PLAYSTATS_ACTIVITY_DONE(_,_)", WREN_STATS_PLAYSTATS_ACTIVITY_DONE },
        { "PLAYSTATS_LEAVE_JOB_CHAIN(_,_,_,_,_)", WREN_STATS_PLAYSTATS_LEAVE_JOB_CHAIN },
        { "PLAYSTATS_MISSION_STARTED(_,_,_)", WREN_STATS_PLAYSTATS_MISSION_STARTED },
        { "PLAYSTATS_MISSION_OVER(_,_,_,_,_)", WREN_STATS_PLAYSTATS_MISSION_OVER },
        { "PLAYSTATS_MISSION_CHECKPOINT(_,_,_)", WREN_STATS_PLAYSTATS_MISSION_CHECKPOINT },
        { "PLAYSTATS_RANDOM_MISSION_DONE(_,_,_,_)", WREN_STATS_PLAYSTATS_RANDOM_MISSION_DONE },
        { "PLAYSTATS_ROS_BET(_,_,_,_)", WREN_STATS_PLAYSTATS_ROS_BET },
        { "PLAYSTATS_RACE_CHECKPOINT(_,_,_,_,_)", WREN_STATS_PLAYSTATS_RACE_CHECKPOINT },
        { "PLAYSTATS_CREATE_MATCH_HISTORY_ID_2()", WREN_STATS_PLAYSTATS_CREATE_MATCH_HISTORY_ID_2 },
        { "PLAYSTATS_MATCH_STARTED(_,_,_)", WREN_STATS_PLAYSTATS_MATCH_STARTED },
        { "PLAYSTATS_SHOP_ITEM(_,_,_,_,_)", WREN_STATS_PLAYSTATS_SHOP_ITEM },
        { "PLAYSTATS_CRATE_DROP_MISSION_DONE(_,_,_,_,_,_,_,_)", WREN_STATS_PLAYSTATS_CRATE_DROP_MISSION_DONE },
        { "PLAYSTATS_CRATE_CREATED(_,_,_)", WREN_STATS_PLAYSTATS_CRATE_CREATED },
        { "PLAYSTATS_HOLD_UP_MISSION_DONE(_,_,_,_)", WREN_STATS_PLAYSTATS_HOLD_UP_MISSION_DONE },
        { "PLAYSTATS_IMPORT_EXPORT_MISSION_DONE(_,_,_,_)", WREN_STATS_PLAYSTATS_IMPORT_EXPORT_MISSION_DONE },
        { "PLAYSTATS_RACE_TO_POINT_MISSION_DONE(_,_,_,_)", WREN_STATS_PLAYSTATS_RACE_TO_POINT_MISSION_DONE },
        { "PLAYSTATS_ACQUIRED_HIDDEN_PACKAGE(_)", WREN_STATS_PLAYSTATS_ACQUIRED_HIDDEN_PACKAGE },
        { "PLAYSTATS_WEBSITE_VISITED(_,_)", WREN_STATS_PLAYSTATS_WEBSITE_VISITED },
        { "PLAYSTATS_FRIEND_ACTIVITY(_,_)", WREN_STATS_PLAYSTATS_FRIEND_ACTIVITY },
        { "PLAYSTATS_ODDJOB_DONE(_,_,_)", WREN_STATS_PLAYSTATS_ODDJOB_DONE },
        { "PLAYSTATS_PROP_CHANGE(_,_,_,_)", WREN_STATS_PLAYSTATS_PROP_CHANGE },
        { "PLAYSTATS_CLOTH_CHANGE(_,_,_,_,_)", WREN_STATS_PLAYSTATS_CLOTH_CHANGE },
        { "PLAYSTATS_WEAPON_MODE_CHANGE(_,_,_)", WREN_STATS_PLAYSTATS_WEAPON_MODE_CHANGE },
        { "PLAYSTATS_CHEAT_APPLIED(_)", WREN_STATS_PLAYSTATS_CHEAT_APPLIED },
        { "PLAYSTATS_JOB_ACTIVITY_END()", WREN_STATS_PLAYSTATS_JOB_ACTIVITY_END },
        { "PLAYSTATS_JOB_BEND()", WREN_STATS_PLAYSTATS_JOB_BEND },
        { "PLAYSTATS_JOB_LTS_END()", WREN_STATS_PLAYSTATS_JOB_LTS_END },
        { "PLAYSTATS_JOB_LTS_ROUND_END()", WREN_STATS_PLAYSTATS_JOB_LTS_ROUND_END },
        { "PLAYSTATS_QUICKFIX_TOOL(_,_)", WREN_STATS_PLAYSTATS_QUICKFIX_TOOL },
        { "PLAYSTATS_IDLE_KICK(_)", WREN_STATS_PLAYSTATS_IDLE_KICK },
        { "PLAYSTATS_SET_JOIN_TYPE(_)", WREN_STATS_PLAYSTATS_SET_JOIN_TYPE },
        { "PLAYSTATS_HEIST_SAVE_CHEAT(_,_)", WREN_STATS_PLAYSTATS_HEIST_SAVE_CHEAT },
        { "PLAYSTATS_APPEND_DIRECTOR_METRIC()", WREN_STATS_PLAYSTATS_APPEND_DIRECTOR_METRIC },
        { "PLAYSTATS_AWARD_BAD_SPORT(_)", WREN_STATS_PLAYSTATS_AWARD_BAD_SPORT },
        { "PLAYSTATS_PEGASUS_AS_PERSONAL_AIRCRAFT(_)", WREN_STATS_PLAYSTATS_PEGASUS_AS_PERSONAL_AIRCRAFT },
        { "PLAYSTATS_FM_EVENT_CHALLENGES(_)", WREN_STATS_PLAYSTATS_FM_EVENT_CHALLENGES },
        { "PLAYSTATS_FM_EVENT_VEHICLETARGET(_)", WREN_STATS_PLAYSTATS_FM_EVENT_VEHICLETARGET },
        { "PLAYSTATS_FM_EVENT_URBANWARFARE(_)", WREN_STATS_PLAYSTATS_FM_EVENT_URBANWARFARE },
        { "PLAYSTATS_FM_EVENT_CHECKPOINTCOLLECTION(_)", WREN_STATS_PLAYSTATS_FM_EVENT_CHECKPOINTCOLLECTION },
        { "PLAYSTATS_FM_EVENT_ATOB(_)", WREN_STATS_PLAYSTATS_FM_EVENT_ATOB },
        { "PLAYSTATS_FM_EVENT_PENNEDIN(_)", WREN_STATS_PLAYSTATS_FM_EVENT_PENNEDIN },
        { "PLAYSTATS_FM_EVENT_PASSTHEPARCEL(_)", WREN_STATS_PLAYSTATS_FM_EVENT_PASSTHEPARCEL },
        { "PLAYSTATS_FM_EVENT_HOTPROPERTY(_)", WREN_STATS_PLAYSTATS_FM_EVENT_HOTPROPERTY },
        { "PLAYSTATS_FM_EVENT_DEADDROP(_)", WREN_STATS_PLAYSTATS_FM_EVENT_DEADDROP },
        { "PLAYSTATS_FM_EVENT_KINGOFTHECASTLE(_)", WREN_STATS_PLAYSTATS_FM_EVENT_KINGOFTHECASTLE },
        { "PLAYSTATS_FM_EVENT_CRIMINALDAMAGE(_)", WREN_STATS_PLAYSTATS_FM_EVENT_CRIMINALDAMAGE },
        { "PLAYSTATS_FM_EVENT_COMPETITIVEURBANWARFARE(_)", WREN_STATS_PLAYSTATS_FM_EVENT_COMPETITIVEURBANWARFARE },
        { "PLAYSTATS_FM_EVENT_HUNTBEAST(_)", WREN_STATS_PLAYSTATS_FM_EVENT_HUNTBEAST },
        { "PLAYSTATS_PIMENU_HIDE_OPTIONS()", WREN_STATS_PLAYSTATS_PIMENU_HIDE_OPTIONS },
        { "LEADERBOARDS_GET_NUMBER_OF_COLUMNS(_,_)", WREN_STATS_LEADERBOARDS_GET_NUMBER_OF_COLUMNS },
        { "LEADERBOARDS_GET_COLUMN_ID(_,_,_)", WREN_STATS_LEADERBOARDS_GET_COLUMN_ID },
        { "LEADERBOARDS_GET_COLUMN_TYPE(_,_,_)", WREN_STATS_LEADERBOARDS_GET_COLUMN_TYPE },
        { "LEADERBOARDS_READ_CLEAR_ALL()", WREN_STATS_LEADERBOARDS_READ_CLEAR_ALL },
        { "LEADERBOARDS_READ_CLEAR(_,_,_)", WREN_STATS_LEADERBOARDS_READ_CLEAR },
        { "LEADERBOARDS_READ_PENDING(_,_,_)", WREN_STATS_LEADERBOARDS_READ_PENDING },
        { "LEADERBOARDS_READ_ANY_PENDING()", WREN_STATS_LEADERBOARDS_READ_ANY_PENDING },
        { "LEADERBOARDS_READ_SUCCESSFUL(_,_,_)", WREN_STATS_LEADERBOARDS_READ_SUCCESSFUL },
        { "LEADERBOARDS2_READ_FRIENDS_BY_ROW(_,_,_,_)", WREN_STATS_LEADERBOARDS2_READ_FRIENDS_BY_ROW },
        { "LEADERBOARDS2_READ_BY_HANDLE()", WREN_STATS_LEADERBOARDS2_READ_BY_HANDLE },
        { "LEADERBOARDS2_READ_BY_ROW(_,_,_)", WREN_STATS_LEADERBOARDS2_READ_BY_ROW },
        { "LEADERBOARDS2_READ_BY_RANK(_,_)", WREN_STATS_LEADERBOARDS2_READ_BY_RANK },
        { "LEADERBOARDS2_READ_BY_RADIUS(_)", WREN_STATS_LEADERBOARDS2_READ_BY_RADIUS },
        { "LEADERBOARDS2_READ_BY_SCORE_INT(_,_)", WREN_STATS_LEADERBOARDS2_READ_BY_SCORE_INT },
        { "LEADERBOARDS2_READ_BY_SCORE_FLOAT(_,_)", WREN_STATS_LEADERBOARDS2_READ_BY_SCORE_FLOAT },
        { "LEADERBOARDS2_READ_RANK_PREDICTION()", WREN_STATS_LEADERBOARDS2_READ_RANK_PREDICTION },
        { "LEADERBOARDS2_READ_BY_PLAFORM(_,_)", WREN_STATS_LEADERBOARDS2_READ_BY_PLAFORM },
        { "LEADERBOARDS2_READ_GET_ROW_DATA_START()", WREN_STATS_LEADERBOARDS2_READ_GET_ROW_DATA_START },
        { "LEADERBOARDS2_READ_GET_ROW_DATA_END()", WREN_STATS_LEADERBOARDS2_READ_GET_ROW_DATA_END },
        { "LEADERBOARDS2_READ_GET_ROW_DATA_INFO(_)", WREN_STATS_LEADERBOARDS2_READ_GET_ROW_DATA_INFO },
        { "LEADERBOARDS2_READ_GET_ROW_DATA_INT(_,_)", WREN_STATS_LEADERBOARDS2_READ_GET_ROW_DATA_INT },
        { "LEADERBOARDS2_READ_GET_ROW_DATA_FLOAT(_,_)", WREN_STATS_LEADERBOARDS2_READ_GET_ROW_DATA_FLOAT },
        { "LEADERBOARDS2_WRITE_DATA()", WREN_STATS_LEADERBOARDS2_WRITE_DATA },
        { "LEADERBOARDS_WRITE_ADD_COLUMN(_,_,_)", WREN_STATS_LEADERBOARDS_WRITE_ADD_COLUMN },
        { "LEADERBOARDS_WRITE_ADD_COLUMN_LONG(_,_,_)", WREN_STATS_LEADERBOARDS_WRITE_ADD_COLUMN_LONG },
        { "LEADERBOARDS_CACHE_DATA_ROW()", WREN_STATS_LEADERBOARDS_CACHE_DATA_ROW },
        { "LEADERBOARDS_CLEAR_CACHE_DATA()", WREN_STATS_LEADERBOARDS_CLEAR_CACHE_DATA },
        { "LEADERBOARDS_CLEAR_CACHE_DATA_ID(_)", WREN_STATS_LEADERBOARDS_CLEAR_CACHE_DATA_ID },
        { "LEADERBOARDS_GET_CACHE_EXISTS(_)", WREN_STATS_LEADERBOARDS_GET_CACHE_EXISTS },
        { "LEADERBOARDS_GET_CACHE_TIME(_)", WREN_STATS_LEADERBOARDS_GET_CACHE_TIME },
        { "LEADERBOARDS_GET_CACHE_NUMBER_OF_ROWS(_)", WREN_STATS_LEADERBOARDS_GET_CACHE_NUMBER_OF_ROWS },
        { "LEADERBOARDS_GET_CACHE_DATA_ROW(_,_)", WREN_STATS_LEADERBOARDS_GET_CACHE_DATA_ROW },
        { "PRESENCE_EVENT_UPDATESTAT_INT(_,_,_)", WREN_STATS_PRESENCE_EVENT_UPDATESTAT_INT },
        { "PRESENCE_EVENT_UPDATESTAT_FLOAT(_,_,_)", WREN_STATS_PRESENCE_EVENT_UPDATESTAT_FLOAT },
        { "PRESENCE_EVENT_UPDATESTAT_INT_WITH_STRING(_,_,_,_)", WREN_STATS_PRESENCE_EVENT_UPDATESTAT_INT_WITH_STRING },
        { "GET_PLAYER_HAS_DRIVEN_ALL_VEHICLES()", WREN_STATS_GET_PLAYER_HAS_DRIVEN_ALL_VEHICLES },
        { "SET_HAS_POSTED_ALL_VEHICLES_DRIVEN()", WREN_STATS_SET_HAS_POSTED_ALL_VEHICLES_DRIVEN },
        { "SET_PROFILE_SETTING_PROLOGUE_COMPLETE()", WREN_STATS_SET_PROFILE_SETTING_PROLOGUE_COMPLETE },
        { "SET_PROFILE_SETTING_SP_CHOP_MISSION_COMPLETE()", WREN_STATS_SET_PROFILE_SETTING_SP_CHOP_MISSION_COMPLETE },
        { "SET_PROFILE_SETTING_CREATOR_RACES_DONE(_)", WREN_STATS_SET_PROFILE_SETTING_CREATOR_RACES_DONE },
        { "SET_PROFILE_SETTING_CREATOR_DM_DONE(_)", WREN_STATS_SET_PROFILE_SETTING_CREATOR_DM_DONE },
        { "SET_PROFILE_SETTING_CREATOR_CTF_DONE(_)", WREN_STATS_SET_PROFILE_SETTING_CREATOR_CTF_DONE },
        { "SET_JOB_ACTIVITY_ID_STARTED(_,_)", WREN_STATS_SET_JOB_ACTIVITY_ID_STARTED },
        { "SET_FREEMODE_PROLOGUE_DONE(_,_)", WREN_STATS_SET_FREEMODE_PROLOGUE_DONE },
        { "SET_FREEMODE_STRAND_PROGRESSION_STATUS(_,_)", WREN_STATS_SET_FREEMODE_STRAND_PROGRESSION_STATUS },
        { "STAT_NETWORK_INCREMENT_ON_SUICIDE(_,_)", WREN_STATS_STAT_NETWORK_INCREMENT_ON_SUICIDE },
        { "STAT_SET_CHEAT_IS_ACTIVE()", WREN_STATS_STAT_SET_CHEAT_IS_ACTIVE },
        { "LEADERBOARDS2_WRITE_DATA_FOR_EVENT_TYPE()", WREN_STATS_LEADERBOARDS2_WRITE_DATA_FOR_EVENT_TYPE },
        { "FORCE_CLOUD_MP_STATS_DOWNLOAD_AND_OVERWRITE_LOCAL_SAVE()", WREN_STATS_FORCE_CLOUD_MP_STATS_DOWNLOAD_AND_OVERWRITE_LOCAL_SAVE },
        { "STAT_MIGRATE_CLEAR_FOR_RESTART()", WREN_STATS_STAT_MIGRATE_CLEAR_FOR_RESTART },
        { "STAT_MIGRATE_SAVEGAME_START(_)", WREN_STATS_STAT_MIGRATE_SAVEGAME_START },
        { "STAT_MIGRATE_SAVEGAME_GET_STATUS()", WREN_STATS_STAT_MIGRATE_SAVEGAME_GET_STATUS },
        { "STAT_MIGRATE_CHECK_ALREADY_DONE()", WREN_STATS_STAT_MIGRATE_CHECK_ALREADY_DONE },
        { "STAT_MIGRATE_CHECK_START()", WREN_STATS_STAT_MIGRATE_CHECK_START },
        { "STAT_MIGRATE_CHECK_GET_IS_PLATFORM_AVAILABLE(_)", WREN_STATS_STAT_MIGRATE_CHECK_GET_IS_PLATFORM_AVAILABLE },
        { "STAT_MIGRATE_CHECK_GET_PLATFORM_STATUS(_)", WREN_STATS_STAT_MIGRATE_CHECK_GET_PLATFORM_STATUS },
        { "STAT_GET_SAVE_MIGRATION_STATUS()", WREN_STATS_STAT_GET_SAVE_MIGRATION_STATUS },
        { "STAT_SAVE_MIGRATION_CANCEL_PENDING_OPERATION()", WREN_STATS_STAT_SAVE_MIGRATION_CANCEL_PENDING_OPERATION },
        { "STAT_GET_CANCEL_SAVE_MIGRATION_STATUS()", WREN_STATS_STAT_GET_CANCEL_SAVE_MIGRATION_STATUS },
        { "STAT_SAVE_MIGRATION_CONSUME_CONTENT(_,_,_)", WREN_STATS_STAT_SAVE_MIGRATION_CONSUME_CONTENT },
        { "STAT_GET_SAVE_MIGRATION_CONSUME_CONTENT_STATUS()", WREN_STATS_STAT_GET_SAVE_MIGRATION_CONSUME_CONTENT_STATUS },
        { "STAT_ENABLE_STATS_TRACKING()", WREN_STATS_STAT_ENABLE_STATS_TRACKING },
        { "STAT_DISABLE_STATS_TRACKING()", WREN_STATS_STAT_DISABLE_STATS_TRACKING },
        { "STAT_IS_STATS_TRACKING_ENABLED()", WREN_STATS_STAT_IS_STATS_TRACKING_ENABLED },
        { "STAT_START_RECORD_STAT(_,_)", WREN_STATS_STAT_START_RECORD_STAT },
        { "STAT_STOP_RECORD_STAT()", WREN_STATS_STAT_STOP_RECORD_STAT },
        { "STAT_GET_RECORDED_VALUE()", WREN_STATS_STAT_GET_RECORDED_VALUE },
        { "STAT_IS_RECORDING_STAT()", WREN_STATS_STAT_IS_RECORDING_STAT },
        { "STAT_GET_CURRENT_NEAR_MISS_NOCRASH_PRECISE()", WREN_STATS_STAT_GET_CURRENT_NEAR_MISS_NOCRASH_PRECISE },
        { "STAT_GET_CURRENT_REAR_WHEEL_DISTANCE()", WREN_STATS_STAT_GET_CURRENT_REAR_WHEEL_DISTANCE },
        { "STAT_GET_CURRENT_FRONT_WHEEL_DISTANCE()", WREN_STATS_STAT_GET_CURRENT_FRONT_WHEEL_DISTANCE },
        { "STAT_GET_CURRENT_JUMP_DISTANCE()", WREN_STATS_STAT_GET_CURRENT_JUMP_DISTANCE },
        { "STAT_GET_CURRENT_DRIVE_NOCRASH_DISTANCE()", WREN_STATS_STAT_GET_CURRENT_DRIVE_NOCRASH_DISTANCE },
        { "STAT_GET_CURRENT_SPEED()", WREN_STATS_STAT_GET_CURRENT_SPEED },
        { "STAT_GET_CURRENT_DRIVING_REVERSE_DISTANCE()", WREN_STATS_STAT_GET_CURRENT_DRIVING_REVERSE_DISTANCE },
        { "STAT_GET_CURRENT_SKYDIVING_DISTANCE()", WREN_STATS_STAT_GET_CURRENT_SKYDIVING_DISTANCE },
        { "STAT_GET_CHALLENGE_FLYING_DIST()", WREN_STATS_STAT_GET_CHALLENGE_FLYING_DIST },
        { "STAT_GET_FLYING_ALTITUDE()", WREN_STATS_STAT_GET_FLYING_ALTITUDE },
        { "STAT_IS_PLAYER_VEHICLE_ABOVE_OCEAN()", WREN_STATS_STAT_IS_PLAYER_VEHICLE_ABOVE_OCEAN },
        { "STAT_GET_VEHICLE_BAIL_DISTANCE()", WREN_STATS_STAT_GET_VEHICLE_BAIL_DISTANCE },
        { "STAT_ROLLBACK_SAVE_MIGRATION()", WREN_STATS_STAT_ROLLBACK_SAVE_MIGRATION },
        { "SET_HAS_SPECIALEDITION_CONTENT(_)", WREN_STATS_SET_HAS_SPECIALEDITION_CONTENT },
        { "SET_SAVE_MIGRATION_TRANSACTION_ID_WARNING(_)", WREN_STATS_SET_SAVE_MIGRATION_TRANSACTION_ID_WARNING },
        { "GET_BOSS_GOON_UUID(_,_,_)", WREN_STATS_GET_BOSS_GOON_UUID },
        { "PLAYSTATS_BW_BOSSONBOSSDEATHMATCH(_)", WREN_STATS_PLAYSTATS_BW_BOSSONBOSSDEATHMATCH },
        { "PLAYSTATS_BW_YATCHATTACK(_)", WREN_STATS_PLAYSTATS_BW_YATCHATTACK },
        { "PLAYSTATS_BW_HUNT_THE_BOSS(_)", WREN_STATS_PLAYSTATS_BW_HUNT_THE_BOSS },
        { "PLAYSTATS_BW_SIGHTSEER(_)", WREN_STATS_PLAYSTATS_BW_SIGHTSEER },
        { "PLAYSTATS_BW_ASSAULT(_)", WREN_STATS_PLAYSTATS_BW_ASSAULT },
        { "PLAYSTATS_BW_BELLY_OF_THE_BEAST(_)", WREN_STATS_PLAYSTATS_BW_BELLY_OF_THE_BEAST },
        { "PLAYSTATS_BW_HEAD_HUNTER(_)", WREN_STATS_PLAYSTATS_BW_HEAD_HUNTER },
        { "PLAYSTATS_BW_FRAGILE_GOODS(_)", WREN_STATS_PLAYSTATS_BW_FRAGILE_GOODS },
        { "PLAYSTATS_BW_AIR_FREIGHT(_)", WREN_STATS_PLAYSTATS_BW_AIR_FREIGHT },
        { "PLAYSTATS_BC_CAR_JACKING(_)", WREN_STATS_PLAYSTATS_BC_CAR_JACKING },
        { "PLAYSTATS_BC_SMASH_AND_GRAB(_)", WREN_STATS_PLAYSTATS_BC_SMASH_AND_GRAB },
        { "PLAYSTATS_BC_PROTECTION_RACKET(_)", WREN_STATS_PLAYSTATS_BC_PROTECTION_RACKET },
        { "PLAYSTATS_BC_MOST_WANTED(_)", WREN_STATS_PLAYSTATS_BC_MOST_WANTED },
        { "PLAYSTATS_BC_FINDERS_KEEPERS(_)", WREN_STATS_PLAYSTATS_BC_FINDERS_KEEPERS },
        { "PLAYSTATS_BC_POINT_TO_POINT(_)", WREN_STATS_PLAYSTATS_BC_POINT_TO_POINT },
        { "PLAYSTATS_BC_CASHING(_)", WREN_STATS_PLAYSTATS_BC_CASHING },
        { "PLAYSTATS_BC_SALVAGE(_)", WREN_STATS_PLAYSTATS_BC_SALVAGE },
        { "PLAYSTATS_SPENT_PI_CUSTOM_LOADOUT(_)", WREN_STATS_PLAYSTATS_SPENT_PI_CUSTOM_LOADOUT },
        { "PLAYSTATS_BUY_CONTRABAND_MISSION()", WREN_STATS_PLAYSTATS_BUY_CONTRABAND_MISSION },
        { "PLAYSTATS_SELL_CONTRABAND_MISSION()", WREN_STATS_PLAYSTATS_SELL_CONTRABAND_MISSION },
        { "PLAYSTATS_DEFEND_CONTRABAND_MISSION()", WREN_STATS_PLAYSTATS_DEFEND_CONTRABAND_MISSION },
        { "PLAYSTATS_RECOVER_CONTRABAND_MISSION()", WREN_STATS_PLAYSTATS_RECOVER_CONTRABAND_MISSION },
        { "PLAYSTATS_HIT_CONTRABAND_DESTROY_LIMIT(_)", WREN_STATS_PLAYSTATS_HIT_CONTRABAND_DESTROY_LIMIT },
        { "START_BEING_BOSS(_)", WREN_STATS_START_BEING_BOSS },
        { "START_BEING_GOON(_,_,_)", WREN_STATS_START_BEING_GOON },
        { "END_BEING_BOSS(_,_)", WREN_STATS_END_BEING_BOSS },
        { "END_BEING_GOON(_,_,_,_,_)", WREN_STATS_END_BEING_GOON },
        { "HIRED_LIMO(_,_)", WREN_STATS_HIRED_LIMO },
        { "ORDER_BOSS_VEHICLE(_,_,_)", WREN_STATS_ORDER_BOSS_VEHICLE },
        { "CHANGE_UNIFORM(_,_,_)", WREN_STATS_CHANGE_UNIFORM },
        { "CHANGE_GOON_LOOKING_FOR_WORK(_)", WREN_STATS_CHANGE_GOON_LOOKING_FOR_WORK },
        { "SEND_METRIC_GHOSTING_TO_PLAYER(_)", WREN_STATS_SEND_METRIC_GHOSTING_TO_PLAYER },
        { "SEND_METRIC_VIP_POACH(_,_,_)", WREN_STATS_SEND_METRIC_VIP_POACH },
        { "SEND_METRIC_PUNISH_BODYGUARD(_)", WREN_STATS_SEND_METRIC_PUNISH_BODYGUARD },
        { "PLAYSTATS_START_TRACKING_STUNTS()", WREN_STATS_PLAYSTATS_START_TRACKING_STUNTS },
        { "PLAYSTATS_STOP_TRACKING_STUNTS()", WREN_STATS_PLAYSTATS_STOP_TRACKING_STUNTS },
        { "PLAYSTATS_MISSION_ENDED(_)", WREN_STATS_PLAYSTATS_MISSION_ENDED },
        { "PLAYSTATS_IMPEXP_MISSION_ENDED(_)", WREN_STATS_PLAYSTATS_IMPEXP_MISSION_ENDED },
        { "PLAYSTATS_CHANGE_MC_ROLE(_,_,_,_,_,_,_)", WREN_STATS_PLAYSTATS_CHANGE_MC_ROLE },
        { "PLAYSTATS_CHANGE_MC_OUTFIT(_,_,_,_,_)", WREN_STATS_PLAYSTATS_CHANGE_MC_OUTFIT },
        { "PLAYSTATS_SWITCH_MC_EMBLEM(_,_,_,_,_)", WREN_STATS_PLAYSTATS_SWITCH_MC_EMBLEM },
        { "PLAYSTATS_MC_REQUEST_BIKE(_,_,_,_,_)", WREN_STATS_PLAYSTATS_MC_REQUEST_BIKE },
        { "PLAYSTATS_MC_KILLED_RIVAL_MC_MEMBER(_,_,_,_,_)", WREN_STATS_PLAYSTATS_MC_KILLED_RIVAL_MC_MEMBER },
        { "PLAYSTATS_ABANDONED_MC(_,_,_,_,_)", WREN_STATS_PLAYSTATS_ABANDONED_MC },
        { "PLAYSTATS_EARNED_MC_POINTS(_,_,_,_,_,_)", WREN_STATS_PLAYSTATS_EARNED_MC_POINTS },
        { "PLAYSTATS_MC_FORMATION_ENDS(_,_,_,_,_,_,_)", WREN_STATS_PLAYSTATS_MC_FORMATION_ENDS },
        { "PLAYSTATS_MC_CLUBHOUSE_ACTIVITY(_,_,_,_,_,_,_)", WREN_STATS_PLAYSTATS_MC_CLUBHOUSE_ACTIVITY },
        { "PLAYSTATS_RIVAL_BEHAVIOR(_,_,_,_,_,_,_,_,_,_)", WREN_STATS_PLAYSTATS_RIVAL_BEHAVIOR },
        { "PLAYSTATS_COPY_RANK_INTO_NEW_SLOT(_,_,_,_,_,_,_)", WREN_STATS_PLAYSTATS_COPY_RANK_INTO_NEW_SLOT },
        { "PLAYSTATS_DUPE_DETECTED()", WREN_STATS_PLAYSTATS_DUPE_DETECTED },
        { "PLAYSTATS_BAN_ALERT(_)", WREN_STATS_PLAYSTATS_BAN_ALERT },
        { "PLAYSTATS_GUNRUNNING_MISSION_ENDED()", WREN_STATS_PLAYSTATS_GUNRUNNING_MISSION_ENDED },
        { "PLAYSTATS_GUNRUNNING_RND(_)", WREN_STATS_PLAYSTATS_GUNRUNNING_RND },
        { "PLAYSTATS_BUSINESS_BATTLE_ENDED(_)", WREN_STATS_PLAYSTATS_BUSINESS_BATTLE_ENDED },
        { "PLAYSTATS_WAREHOUSE_MISSION_ENDED(_)", WREN_STATS_PLAYSTATS_WAREHOUSE_MISSION_ENDED },
        { "PLAYSTATS_NIGHTCLUB_MISSION_ENDED(_)", WREN_STATS_PLAYSTATS_NIGHTCLUB_MISSION_ENDED },
        { "PLAYSTATS_DJ_USAGE(_,_)", WREN_STATS_PLAYSTATS_DJ_USAGE },
        { "PLAYSTATS_MINIGAME_USAGE(_,_,_)", WREN_STATS_PLAYSTATS_MINIGAME_USAGE },
        { "PLAYSTATS_STONE_HATCHET_ENDED()", WREN_STATS_PLAYSTATS_STONE_HATCHET_ENDED },
        { "PLAYSTATS_SMUGGLER_MISSION_ENDED()", WREN_STATS_PLAYSTATS_SMUGGLER_MISSION_ENDED },
        { "PLAYSTATS_FM_HEIST_PREP_ENDED()", WREN_STATS_PLAYSTATS_FM_HEIST_PREP_ENDED },
        { "PLAYSTATS_INSTANCED_HEIST_ENDED(_,_,_)", WREN_STATS_PLAYSTATS_INSTANCED_HEIST_ENDED },
        { "PLAYSTATS_DAR_CHECKPOINT()", WREN_STATS_PLAYSTATS_DAR_CHECKPOINT },
        { "PLAYSTATS_ENTER_SESSION_PACK()", WREN_STATS_PLAYSTATS_ENTER_SESSION_PACK },
        { "PLAYSTATS_DRONE_USAGE(_,_,_)", WREN_STATS_PLAYSTATS_DRONE_USAGE },
        { "PLAYSTATS_SPIN_WHEEL(_,_,_,_)", WREN_STATS_PLAYSTATS_SPIN_WHEEL },
        { "PLAYSTATS_ARENA_WARS_SPECTATOR(_,_,_,_,_)", WREN_STATS_PLAYSTATS_ARENA_WARS_SPECTATOR },
        { "PLAYSTATS_ARENA_WARS_ENDED()", WREN_STATS_PLAYSTATS_ARENA_WARS_ENDED },
        { "PLAYSTATS_SWITCH_PASSIVE_MODE(_,_,_,_)", WREN_STATS_PLAYSTATS_SWITCH_PASSIVE_MODE },
        { "PLAYSTATS_COLLECTIBLE_PICKED_UP(_,_,_,_,_,_,_,_,_,_,_)", WREN_STATS_PLAYSTATS_COLLECTIBLE_PICKED_UP },
        { "PLAYSTATS_CASINO_STORY_MISSION_ENDED(_,_)", WREN_STATS_PLAYSTATS_CASINO_STORY_MISSION_ENDED },
        { "PLAYSTATS_CASINO_CHIP(_)", WREN_STATS_PLAYSTATS_CASINO_CHIP },
        { "PLAYSTATS_CASINO_ROULETTE(_)", WREN_STATS_PLAYSTATS_CASINO_ROULETTE },
        { "PLAYSTATS_CASINO_BLACKJACK(_)", WREN_STATS_PLAYSTATS_CASINO_BLACKJACK },
        { "PLAYSTATS_CASINO_THREE_CARD_POKER(_)", WREN_STATS_PLAYSTATS_CASINO_THREE_CARD_POKER },
        { "PLAYSTATS_CASINO_SLOT_MACHINE(_)", WREN_STATS_PLAYSTATS_CASINO_SLOT_MACHINE },
        { "PLAYSTATS_CASINO_INSIDE_TRACK(_)", WREN_STATS_PLAYSTATS_CASINO_INSIDE_TRACK },
        { "PLAYSTATS_CASINO_LUCKY_SEVEN(_)", WREN_STATS_PLAYSTATS_CASINO_LUCKY_SEVEN },
        { "PLAYSTATS_CASINO_ROULETTE_LIGHT(_)", WREN_STATS_PLAYSTATS_CASINO_ROULETTE_LIGHT },
        { "PLAYSTATS_CASINO_BLACKJACK_LIGHT(_)", WREN_STATS_PLAYSTATS_CASINO_BLACKJACK_LIGHT },
        { "PLAYSTATS_CASINO_THREE_CARD_POKER_LIGHT(_)", WREN_STATS_PLAYSTATS_CASINO_THREE_CARD_POKER_LIGHT },
        { "PLAYSTATS_CASINO_SLOT_MACHINE_LIGHT(_)", WREN_STATS_PLAYSTATS_CASINO_SLOT_MACHINE_LIGHT },
        { "PLAYSTATS_CASINO_INSIDE_TRACK_LIGHT(_)", WREN_STATS_PLAYSTATS_CASINO_INSIDE_TRACK_LIGHT },
        { "PLAYSTATS_ARCADE_GAME(_,_,_,_,_,_,_)", WREN_STATS_PLAYSTATS_ARCADE_GAME },
        { "PLAYSTATS_ARCADE_LOVE_MATCH(_,_)", WREN_STATS_PLAYSTATS_ARCADE_LOVE_MATCH },
        { "PLAYSTATS_FREEMODE_CASINO_MISSION_ENDED()", WREN_STATS_PLAYSTATS_FREEMODE_CASINO_MISSION_ENDED },
        { "PLAYSTATS_HEIST3_DRONE(_)", WREN_STATS_PLAYSTATS_HEIST3_DRONE },
        { "PLAYSTATS_HEIST3_HACK(_,_,_,_,_,_)", WREN_STATS_PLAYSTATS_HEIST3_HACK },
        { "PLAYSTATS_NPC_PHONE(_,_,_,_,_,_)", WREN_STATS_PLAYSTATS_NPC_PHONE },
        { "PLAYSTATS_ARCADE_CABINET(_)", WREN_STATS_PLAYSTATS_ARCADE_CABINET },
        { "PLAYSTATS_HEIST3_FINALE(_)", WREN_STATS_PLAYSTATS_HEIST3_FINALE },
        { "PLAYSTATS_HEIST3_PREP(_)", WREN_STATS_PLAYSTATS_HEIST3_PREP },
        { "PLAYSTATS_MASTER_CONTROL(_,_,_,_)", WREN_STATS_PLAYSTATS_MASTER_CONTROL },
        { "PLAYSTATS_QUIT_MODE(_,_,_,_,_)", WREN_STATS_PLAYSTATS_QUIT_MODE },
        { "PLAYSTATS_MISSION_VOTE(_)", WREN_STATS_PLAYSTATS_MISSION_VOTE },
        { "PLAYSTATS_NJVS_VOTE(_)", WREN_STATS_PLAYSTATS_NJVS_VOTE },
        { "PLAYSTATS_KILL_YOURSELF()", WREN_STATS_PLAYSTATS_KILL_YOURSELF },
        { "PLAYSTATS_FM_MISSION_END(_,_,_)", WREN_STATS_PLAYSTATS_FM_MISSION_END },
        { "PLAYSTATS_HEIST4_PREP(_)", WREN_STATS_PLAYSTATS_HEIST4_PREP },
        { "PLAYSTATS_HEIST4_FINALE(_)", WREN_STATS_PLAYSTATS_HEIST4_FINALE },
        { "PLAYSTATS_HEIST4_HACK(_,_,_,_,_)", WREN_STATS_PLAYSTATS_HEIST4_HACK },
        { "PLAYSTATS_SUB_WEAP(_,_,_,_)", WREN_STATS_PLAYSTATS_SUB_WEAP },
        { "PLAYSTATS_FAST_TRVL(_,_,_,_,_,_,_,_,_)", WREN_STATS_PLAYSTATS_FAST_TRVL },
        { "PLAYSTATS_HUB_ENTRY(_)", WREN_STATS_PLAYSTATS_HUB_ENTRY },
        { "PLAYSTATS_DJ_MISSION_ENDED(_)", WREN_STATS_PLAYSTATS_DJ_MISSION_ENDED },
        { "PLAYSTATS_ROBBERY_PREP(_)", WREN_STATS_PLAYSTATS_ROBBERY_PREP },
        { "PLAYSTATS_ROBBERY_FINALE(_)", WREN_STATS_PLAYSTATS_ROBBERY_FINALE },
        { "PLAYSTATS_EXTRA_EVENT(_)", WREN_STATS_PLAYSTATS_EXTRA_EVENT },
        { "PLAYSTATS_CARCLUB_POINTS(_)", WREN_STATS_PLAYSTATS_CARCLUB_POINTS },
        { "PLAYSTATS_CARCLUB_CHALLENGE(_,_,_,_)", WREN_STATS_PLAYSTATS_CARCLUB_CHALLENGE },
        { "PLAYSTATS_CARCLUB_PRIZE(_,_)", WREN_STATS_PLAYSTATS_CARCLUB_PRIZE },
        { "PLAYSTATS_AWARD_NAV(_,_)", WREN_STATS_PLAYSTATS_AWARD_NAV },
        { "PLAYSTATS_INST_MISSION_END(_)", WREN_STATS_PLAYSTATS_INST_MISSION_END },
        { "PLAYSTATS_HUB_EXIT(_)", WREN_STATS_PLAYSTATS_HUB_EXIT },
        { "PLAYSTATS_INVENTORY(_)", WREN_STATS_PLAYSTATS_INVENTORY },
        { "LOAD_ALL_OBJECTS_NOW()", WREN_STREAMING_LOAD_ALL_OBJECTS_NOW },
        { "LOAD_SCENE(_,_,_)", WREN_STREAMING_LOAD_SCENE },
        { "NETWORK_UPDATE_LOAD_SCENE()", WREN_STREAMING_NETWORK_UPDATE_LOAD_SCENE },
        { "IS_NETWORK_LOADING_SCENE()", WREN_STREAMING_IS_NETWORK_LOADING_SCENE },
        { "SET_INTERIOR_ACTIVE(_,_)", WREN_STREAMING_SET_INTERIOR_ACTIVE },
        { "REQUEST_MODEL(_)", WREN_STREAMING_REQUEST_MODEL },
        { "REQUEST_MENU_PED_MODEL(_)", WREN_STREAMING_REQUEST_MENU_PED_MODEL },
        { "HAS_MODEL_LOADED(_)", WREN_STREAMING_HAS_MODEL_LOADED },
        { "REQUEST_MODELS_IN_ROOM(_,_)", WREN_STREAMING_REQUEST_MODELS_IN_ROOM },
        { "SET_MODEL_AS_NO_LONGER_NEEDED(_)", WREN_STREAMING_SET_MODEL_AS_NO_LONGER_NEEDED },
        { "IS_MODEL_IN_CDIMAGE(_)", WREN_STREAMING_IS_MODEL_IN_CDIMAGE },
        { "IS_MODEL_VALID(_)", WREN_STREAMING_IS_MODEL_VALID },
        { "IS_MODEL_A_PED(_)", WREN_STREAMING_IS_MODEL_A_PED },
        { "IS_MODEL_A_VEHICLE(_)", WREN_STREAMING_IS_MODEL_A_VEHICLE },
        { "REQUEST_COLLISION_AT_COORD(_,_,_)", WREN_STREAMING_REQUEST_COLLISION_AT_COORD },
        { "REQUEST_COLLISION_FOR_MODEL(_)", WREN_STREAMING_REQUEST_COLLISION_FOR_MODEL },
        { "HAS_COLLISION_FOR_MODEL_LOADED(_)", WREN_STREAMING_HAS_COLLISION_FOR_MODEL_LOADED },
        { "REQUEST_ADDITIONAL_COLLISION_AT_COORD(_,_,_)", WREN_STREAMING_REQUEST_ADDITIONAL_COLLISION_AT_COORD },
        { "DOES_ANIM_DICT_EXIST(_)", WREN_STREAMING_DOES_ANIM_DICT_EXIST },
        { "REQUEST_ANIM_DICT(_)", WREN_STREAMING_REQUEST_ANIM_DICT },
        { "HAS_ANIM_DICT_LOADED(_)", WREN_STREAMING_HAS_ANIM_DICT_LOADED },
        { "REMOVE_ANIM_DICT(_)", WREN_STREAMING_REMOVE_ANIM_DICT },
        { "REQUEST_ANIM_SET(_)", WREN_STREAMING_REQUEST_ANIM_SET },
        { "HAS_ANIM_SET_LOADED(_)", WREN_STREAMING_HAS_ANIM_SET_LOADED },
        { "REMOVE_ANIM_SET(_)", WREN_STREAMING_REMOVE_ANIM_SET },
        { "REQUEST_CLIP_SET(_)", WREN_STREAMING_REQUEST_CLIP_SET },
        { "HAS_CLIP_SET_LOADED(_)", WREN_STREAMING_HAS_CLIP_SET_LOADED },
        { "REMOVE_CLIP_SET(_)", WREN_STREAMING_REMOVE_CLIP_SET },
        { "REQUEST_IPL(_)", WREN_STREAMING_REQUEST_IPL },
        { "REMOVE_IPL(_)", WREN_STREAMING_REMOVE_IPL },
        { "IS_IPL_ACTIVE(_)", WREN_STREAMING_IS_IPL_ACTIVE },
        { "SET_STREAMING(_)", WREN_STREAMING_SET_STREAMING },
        { "LOAD_GLOBAL_WATER_FILE(_)", WREN_STREAMING_LOAD_GLOBAL_WATER_FILE },
        { "GET_GLOBAL_WATER_FILE()", WREN_STREAMING_GET_GLOBAL_WATER_FILE },
        { "SET_GAME_PAUSES_FOR_STREAMING(_)", WREN_STREAMING_SET_GAME_PAUSES_FOR_STREAMING },
        { "SET_REDUCE_PED_MODEL_BUDGET(_)", WREN_STREAMING_SET_REDUCE_PED_MODEL_BUDGET },
        { "SET_REDUCE_VEHICLE_MODEL_BUDGET(_)", WREN_STREAMING_SET_REDUCE_VEHICLE_MODEL_BUDGET },
        { "SET_DITCH_POLICE_MODELS(_)", WREN_STREAMING_SET_DITCH_POLICE_MODELS },
        { "GET_NUMBER_OF_STREAMING_REQUESTS()", WREN_STREAMING_GET_NUMBER_OF_STREAMING_REQUESTS },
        { "REQUEST_PTFX_ASSET()", WREN_STREAMING_REQUEST_PTFX_ASSET },
        { "HAS_PTFX_ASSET_LOADED()", WREN_STREAMING_HAS_PTFX_ASSET_LOADED },
        { "REMOVE_PTFX_ASSET()", WREN_STREAMING_REMOVE_PTFX_ASSET },
        { "REQUEST_NAMED_PTFX_ASSET(_)", WREN_STREAMING_REQUEST_NAMED_PTFX_ASSET },
        { "HAS_NAMED_PTFX_ASSET_LOADED(_)", WREN_STREAMING_HAS_NAMED_PTFX_ASSET_LOADED },
        { "REMOVE_NAMED_PTFX_ASSET(_)", WREN_STREAMING_REMOVE_NAMED_PTFX_ASSET },
        { "SET_VEHICLE_POPULATION_BUDGET(_)", WREN_STREAMING_SET_VEHICLE_POPULATION_BUDGET },
        { "SET_PED_POPULATION_BUDGET(_)", WREN_STREAMING_SET_PED_POPULATION_BUDGET },
        { "CLEAR_FOCUS()", WREN_STREAMING_CLEAR_FOCUS },
        { "SET_FOCUS_POS_AND_VEL(_,_,_,_,_,_)", WREN_STREAMING_SET_FOCUS_POS_AND_VEL },
        { "SET_FOCUS_ENTITY(_)", WREN_STREAMING_SET_FOCUS_ENTITY },
        { "IS_ENTITY_FOCUS(_)", WREN_STREAMING_IS_ENTITY_FOCUS },
        { "SET_RESTORE_FOCUS_ENTITY(_)", WREN_STREAMING_SET_RESTORE_FOCUS_ENTITY },
        { "SET_MAPDATACULLBOX_ENABLED(_,_)", WREN_STREAMING_SET_MAPDATACULLBOX_ENABLED },
        { "SET_ALL_MAPDATA_CULLED(_)", WREN_STREAMING_SET_ALL_MAPDATA_CULLED },
        { "STREAMVOL_CREATE_SPHERE(_,_,_,_,_,_)", WREN_STREAMING_STREAMVOL_CREATE_SPHERE },
        { "STREAMVOL_CREATE_FRUSTUM(_,_,_,_,_,_,_,_,_)", WREN_STREAMING_STREAMVOL_CREATE_FRUSTUM },
        { "STREAMVOL_CREATE_LINE(_,_,_,_,_,_,_)", WREN_STREAMING_STREAMVOL_CREATE_LINE },
        { "STREAMVOL_DELETE(_)", WREN_STREAMING_STREAMVOL_DELETE },
        { "STREAMVOL_HAS_LOADED(_)", WREN_STREAMING_STREAMVOL_HAS_LOADED },
        { "STREAMVOL_IS_VALID(_)", WREN_STREAMING_STREAMVOL_IS_VALID },
        { "IS_STREAMVOL_ACTIVE()", WREN_STREAMING_IS_STREAMVOL_ACTIVE },
        { "NEW_LOAD_SCENE_START(_,_,_,_,_,_,_,_)", WREN_STREAMING_NEW_LOAD_SCENE_START },
        { "NEW_LOAD_SCENE_START_SPHERE(_,_,_,_,_)", WREN_STREAMING_NEW_LOAD_SCENE_START_SPHERE },
        { "NEW_LOAD_SCENE_STOP()", WREN_STREAMING_NEW_LOAD_SCENE_STOP },
        { "IS_NEW_LOAD_SCENE_ACTIVE()", WREN_STREAMING_IS_NEW_LOAD_SCENE_ACTIVE },
        { "IS_NEW_LOAD_SCENE_LOADED()", WREN_STREAMING_IS_NEW_LOAD_SCENE_LOADED },
        { "IS_SAFE_TO_START_PLAYER_SWITCH()", WREN_STREAMING_IS_SAFE_TO_START_PLAYER_SWITCH },
        { "START_PLAYER_SWITCH(_,_,_,_)", WREN_STREAMING_START_PLAYER_SWITCH },
        { "STOP_PLAYER_SWITCH()", WREN_STREAMING_STOP_PLAYER_SWITCH },
        { "IS_PLAYER_SWITCH_IN_PROGRESS()", WREN_STREAMING_IS_PLAYER_SWITCH_IN_PROGRESS },
        { "GET_PLAYER_SWITCH_TYPE()", WREN_STREAMING_GET_PLAYER_SWITCH_TYPE },
        { "GET_IDEAL_PLAYER_SWITCH_TYPE(_,_,_,_,_,_)", WREN_STREAMING_GET_IDEAL_PLAYER_SWITCH_TYPE },
        { "GET_PLAYER_SWITCH_STATE()", WREN_STREAMING_GET_PLAYER_SWITCH_STATE },
        { "GET_PLAYER_SHORT_SWITCH_STATE()", WREN_STREAMING_GET_PLAYER_SHORT_SWITCH_STATE },
        { "SET_PLAYER_SHORT_SWITCH_STYLE(_)", WREN_STREAMING_SET_PLAYER_SHORT_SWITCH_STYLE },
        { "GET_PLAYER_SWITCH_JUMP_CUT_INDEX()", WREN_STREAMING_GET_PLAYER_SWITCH_JUMP_CUT_INDEX },
        { "SET_PLAYER_SWITCH_OUTRO(_,_,_,_,_,_,_,_,_)", WREN_STREAMING_SET_PLAYER_SWITCH_OUTRO },
        { "SET_PLAYER_SWITCH_ESTABLISHING_SHOT(_)", WREN_STREAMING_SET_PLAYER_SWITCH_ESTABLISHING_SHOT },
        { "ALLOW_PLAYER_SWITCH_PAN()", WREN_STREAMING_ALLOW_PLAYER_SWITCH_PAN },
        { "ALLOW_PLAYER_SWITCH_OUTRO()", WREN_STREAMING_ALLOW_PLAYER_SWITCH_OUTRO },
        { "ALLOW_PLAYER_SWITCH_ASCENT()", WREN_STREAMING_ALLOW_PLAYER_SWITCH_ASCENT },
        { "ALLOW_PLAYER_SWITCH_DESCENT()", WREN_STREAMING_ALLOW_PLAYER_SWITCH_DESCENT },
        { "IS_SWITCH_READY_FOR_DESCENT()", WREN_STREAMING_IS_SWITCH_READY_FOR_DESCENT },
        { "ENABLE_SWITCH_PAUSE_BEFORE_DESCENT()", WREN_STREAMING_ENABLE_SWITCH_PAUSE_BEFORE_DESCENT },
        { "DISABLE_SWITCH_OUTRO_FX()", WREN_STREAMING_DISABLE_SWITCH_OUTRO_FX },
        { "SWITCH_TO_MULTI_FIRSTPART(_,_,_)", WREN_STREAMING_SWITCH_TO_MULTI_FIRSTPART },
        { "SWITCH_TO_MULTI_SECONDPART(_)", WREN_STREAMING_SWITCH_TO_MULTI_SECONDPART },
        { "IS_SWITCH_TO_MULTI_FIRSTPART_FINISHED()", WREN_STREAMING_IS_SWITCH_TO_MULTI_FIRSTPART_FINISHED },
        { "GET_PLAYER_SWITCH_INTERP_OUT_DURATION()", WREN_STREAMING_GET_PLAYER_SWITCH_INTERP_OUT_DURATION },
        { "GET_PLAYER_SWITCH_INTERP_OUT_CURRENT_TIME()", WREN_STREAMING_GET_PLAYER_SWITCH_INTERP_OUT_CURRENT_TIME },
        { "IS_SWITCH_SKIPPING_DESCENT()", WREN_STREAMING_IS_SWITCH_SKIPPING_DESCENT },
        { "SET_SCENE_STREAMING_TRACKS_CAM_POS_THIS_FRAME()", WREN_STREAMING_SET_SCENE_STREAMING_TRACKS_CAM_POS_THIS_FRAME },
        { "GET_LODSCALE()", WREN_STREAMING_GET_LODSCALE },
        { "OVERRIDE_LODSCALE_THIS_FRAME(_)", WREN_STREAMING_OVERRIDE_LODSCALE_THIS_FRAME },
        { "REMAP_LODSCALE_RANGE_THIS_FRAME(_,_,_,_)", WREN_STREAMING_REMAP_LODSCALE_RANGE_THIS_FRAME },
        { "SUPPRESS_HD_MAP_STREAMING_THIS_FRAME()", WREN_STREAMING_SUPPRESS_HD_MAP_STREAMING_THIS_FRAME },
        { "SET_RENDER_HD_ONLY(_)", WREN_STREAMING_SET_RENDER_HD_ONLY },
        { "FORCE_ALLOW_TIME_BASED_FADING_THIS_FRAME()", WREN_STREAMING_FORCE_ALLOW_TIME_BASED_FADING_THIS_FRAME },
        { "IPL_GROUP_SWAP_START(_,_)", WREN_STREAMING_IPL_GROUP_SWAP_START },
        { "IPL_GROUP_SWAP_CANCEL()", WREN_STREAMING_IPL_GROUP_SWAP_CANCEL },
        { "IPL_GROUP_SWAP_IS_READY()", WREN_STREAMING_IPL_GROUP_SWAP_IS_READY },
        { "IPL_GROUP_SWAP_FINISH()", WREN_STREAMING_IPL_GROUP_SWAP_FINISH },
        { "IPL_GROUP_SWAP_IS_ACTIVE()", WREN_STREAMING_IPL_GROUP_SWAP_IS_ACTIVE },
        { "PREFETCH_SRL(_)", WREN_STREAMING_PREFETCH_SRL },
        { "IS_SRL_LOADED()", WREN_STREAMING_IS_SRL_LOADED },
        { "BEGIN_SRL()", WREN_STREAMING_BEGIN_SRL },
        { "END_SRL()", WREN_STREAMING_END_SRL },
        { "SET_SRL_TIME(_)", WREN_STREAMING_SET_SRL_TIME },
        { "SET_SRL_POST_CUTSCENE_CAMERA(_,_,_,_,_,_)", WREN_STREAMING_SET_SRL_POST_CUTSCENE_CAMERA },
        { "SET_SRL_READAHEAD_TIMES(_,_,_,_)", WREN_STREAMING_SET_SRL_READAHEAD_TIMES },
        { "SET_SRL_LONG_JUMP_MODE(_)", WREN_STREAMING_SET_SRL_LONG_JUMP_MODE },
        { "SET_SRL_FORCE_PRESTREAM(_)", WREN_STREAMING_SET_SRL_FORCE_PRESTREAM },
        { "SET_HD_AREA(_,_,_,_)", WREN_STREAMING_SET_HD_AREA },
        { "CLEAR_HD_AREA()", WREN_STREAMING_CLEAR_HD_AREA },
        { "INIT_CREATOR_BUDGET()", WREN_STREAMING_INIT_CREATOR_BUDGET },
        { "SHUTDOWN_CREATOR_BUDGET()", WREN_STREAMING_SHUTDOWN_CREATOR_BUDGET },
        { "ADD_MODEL_TO_CREATOR_BUDGET(_)", WREN_STREAMING_ADD_MODEL_TO_CREATOR_BUDGET },
        { "REMOVE_MODEL_FROM_CREATOR_BUDGET(_)", WREN_STREAMING_REMOVE_MODEL_FROM_CREATOR_BUDGET },
        { "GET_USED_CREATOR_BUDGET()", WREN_STREAMING_GET_USED_CREATOR_BUDGET },
        { "SET_ISLAND_ENABLED(_,_)", WREN_STREAMING_SET_ISLAND_ENABLED },
        { "TASK_PAUSE(_,_)", WREN_TASK_TASK_PAUSE },
        { "TASK_STAND_STILL(_,_)", WREN_TASK_TASK_STAND_STILL },
        { "TASK_JUMP(_,_,_,_)", WREN_TASK_TASK_JUMP },
        { "TASK_COWER(_,_)", WREN_TASK_TASK_COWER },
        { "TASK_HANDS_UP(_,_,_,_,_)", WREN_TASK_TASK_HANDS_UP },
        { "UPDATE_TASK_HANDS_UP_DURATION(_,_)", WREN_TASK_UPDATE_TASK_HANDS_UP_DURATION },
        { "TASK_OPEN_VEHICLE_DOOR(_,_,_,_,_)", WREN_TASK_TASK_OPEN_VEHICLE_DOOR },
        { "TASK_ENTER_VEHICLE(_,_,_,_,_,_,_)", WREN_TASK_TASK_ENTER_VEHICLE },
        { "TASK_LEAVE_VEHICLE(_,_,_)", WREN_TASK_TASK_LEAVE_VEHICLE },
        { "TASK_GET_OFF_BOAT(_,_)", WREN_TASK_TASK_GET_OFF_BOAT },
        { "TASK_SKY_DIVE(_,_)", WREN_TASK_TASK_SKY_DIVE },
        { "TASK_PARACHUTE(_,_,_)", WREN_TASK_TASK_PARACHUTE },
        { "TASK_PARACHUTE_TO_TARGET(_,_,_,_)", WREN_TASK_TASK_PARACHUTE_TO_TARGET },
        { "SET_PARACHUTE_TASK_TARGET(_,_,_,_)", WREN_TASK_SET_PARACHUTE_TASK_TARGET },
        { "SET_PARACHUTE_TASK_THRUST(_,_)", WREN_TASK_SET_PARACHUTE_TASK_THRUST },
        { "TASK_RAPPEL_FROM_HELI(_,_)", WREN_TASK_TASK_RAPPEL_FROM_HELI },
        { "TASK_VEHICLE_DRIVE_TO_COORD(_,_,_,_,_,_,_,_,_,_,_)", WREN_TASK_TASK_VEHICLE_DRIVE_TO_COORD },
        { "TASK_VEHICLE_DRIVE_TO_COORD_LONGRANGE(_,_,_,_,_,_,_,_)", WREN_TASK_TASK_VEHICLE_DRIVE_TO_COORD_LONGRANGE },
        { "TASK_VEHICLE_DRIVE_WANDER(_,_,_,_)", WREN_TASK_TASK_VEHICLE_DRIVE_WANDER },
        { "TASK_FOLLOW_TO_OFFSET_OF_ENTITY(_,_,_,_,_,_,_,_,_)", WREN_TASK_TASK_FOLLOW_TO_OFFSET_OF_ENTITY },
        { "TASK_GO_STRAIGHT_TO_COORD(_,_,_,_,_,_,_,_)", WREN_TASK_TASK_GO_STRAIGHT_TO_COORD },
        { "TASK_GO_STRAIGHT_TO_COORD_RELATIVE_TO_ENTITY(_,_,_,_,_,_,_)", WREN_TASK_TASK_GO_STRAIGHT_TO_COORD_RELATIVE_TO_ENTITY },
        { "TASK_ACHIEVE_HEADING(_,_,_)", WREN_TASK_TASK_ACHIEVE_HEADING },
        { "TASK_FLUSH_ROUTE()", WREN_TASK_TASK_FLUSH_ROUTE },
        { "TASK_EXTEND_ROUTE(_,_,_)", WREN_TASK_TASK_EXTEND_ROUTE },
        { "TASK_FOLLOW_POINT_ROUTE(_,_,_)", WREN_TASK_TASK_FOLLOW_POINT_ROUTE },
        { "TASK_GO_TO_ENTITY(_,_,_,_,_,_,_)", WREN_TASK_TASK_GO_TO_ENTITY },
        { "TASK_SMART_FLEE_COORD(_,_,_,_,_,_,_,_)", WREN_TASK_TASK_SMART_FLEE_COORD },
        { "TASK_SMART_FLEE_PED(_,_,_,_,_,_)", WREN_TASK_TASK_SMART_FLEE_PED },
        { "TASK_REACT_AND_FLEE_PED(_,_)", WREN_TASK_TASK_REACT_AND_FLEE_PED },
        { "TASK_SHOCKING_EVENT_REACT(_,_)", WREN_TASK_TASK_SHOCKING_EVENT_REACT },
        { "TASK_WANDER_IN_AREA(_,_,_,_,_,_,_)", WREN_TASK_TASK_WANDER_IN_AREA },
        { "TASK_WANDER_STANDARD(_,_,_)", WREN_TASK_TASK_WANDER_STANDARD },
        { "TASK_WANDER_SPECIFIC(_,_,_,_)", WREN_TASK_TASK_WANDER_SPECIFIC },
        { "TASK_VEHICLE_PARK(_,_,_,_,_,_,_,_,_)", WREN_TASK_TASK_VEHICLE_PARK },
        { "TASK_STEALTH_KILL(_,_,_,_,_)", WREN_TASK_TASK_STEALTH_KILL },
        { "TASK_PLANT_BOMB(_,_,_,_,_)", WREN_TASK_TASK_PLANT_BOMB },
        { "TASK_FOLLOW_NAV_MESH_TO_COORD(_,_,_,_,_,_,_,_,_)", WREN_TASK_TASK_FOLLOW_NAV_MESH_TO_COORD },
        { "TASK_FOLLOW_NAV_MESH_TO_COORD_ADVANCED(_,_,_,_,_,_,_,_,_,_,_,_)", WREN_TASK_TASK_FOLLOW_NAV_MESH_TO_COORD_ADVANCED },
        { "SET_PED_PATH_CAN_USE_CLIMBOVERS(_,_)", WREN_TASK_SET_PED_PATH_CAN_USE_CLIMBOVERS },
        { "SET_PED_PATH_CAN_USE_LADDERS(_,_)", WREN_TASK_SET_PED_PATH_CAN_USE_LADDERS },
        { "SET_PED_PATH_CAN_DROP_FROM_HEIGHT(_,_)", WREN_TASK_SET_PED_PATH_CAN_DROP_FROM_HEIGHT },
        { "SET_PED_PATH_CLIMB_COST_MODIFIER(_,_)", WREN_TASK_SET_PED_PATH_CLIMB_COST_MODIFIER },
        { "SET_PED_PATH_MAY_ENTER_WATER(_,_)", WREN_TASK_SET_PED_PATH_MAY_ENTER_WATER },
        { "SET_PED_PATH_PREFER_TO_AVOID_WATER(_,_)", WREN_TASK_SET_PED_PATH_PREFER_TO_AVOID_WATER },
        { "SET_PED_PATH_AVOID_FIRE(_,_)", WREN_TASK_SET_PED_PATH_AVOID_FIRE },
        { "SET_GLOBAL_MIN_BIRD_FLIGHT_HEIGHT(_)", WREN_TASK_SET_GLOBAL_MIN_BIRD_FLIGHT_HEIGHT },
        { "GET_NAVMESH_ROUTE_DISTANCE_REMAINING(_)", WREN_TASK_GET_NAVMESH_ROUTE_DISTANCE_REMAINING },
        { "GET_NAVMESH_ROUTE_RESULT(_)", WREN_TASK_GET_NAVMESH_ROUTE_RESULT },
        { "IS_CONTROLLED_VEHICLE_UNABLE_TO_GET_TO_ROAD(_)", WREN_TASK_IS_CONTROLLED_VEHICLE_UNABLE_TO_GET_TO_ROAD },
        { "TASK_GO_TO_COORD_ANY_MEANS(_,_,_,_,_,_,_,_,_)", WREN_TASK_TASK_GO_TO_COORD_ANY_MEANS },
        { "TASK_GO_TO_COORD_ANY_MEANS_EXTRA_PARAMS(_,_,_,_,_,_,_,_,_,_,_,_,_)", WREN_TASK_TASK_GO_TO_COORD_ANY_MEANS_EXTRA_PARAMS },
        { "TASK_GO_TO_COORD_ANY_MEANS_EXTRA_PARAMS_WITH_CRUISE_SPEED(_,_,_,_,_,_,_,_,_,_,_,_,_,_)", WREN_TASK_TASK_GO_TO_COORD_ANY_MEANS_EXTRA_PARAMS_WITH_CRUISE_SPEED },
        { "TASK_PLAY_ANIM(_,_,_,_,_,_,_,_,_,_,_)", WREN_TASK_TASK_PLAY_ANIM },
        { "TASK_PLAY_ANIM_ADVANCED(_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_)", WREN_TASK_TASK_PLAY_ANIM_ADVANCED },
        { "STOP_ANIM_TASK(_,_,_,_)", WREN_TASK_STOP_ANIM_TASK },
        { "TASK_SCRIPTED_ANIMATION(_,_,_)", WREN_TASK_TASK_SCRIPTED_ANIMATION },
        { "PLAY_ENTITY_SCRIPTED_ANIM(_,_,_)", WREN_TASK_PLAY_ENTITY_SCRIPTED_ANIM },
        { "STOP_ANIM_PLAYBACK(_,_,_)", WREN_TASK_STOP_ANIM_PLAYBACK },
        { "SET_ANIM_WEIGHT(_,_,_,_,_)", WREN_TASK_SET_ANIM_WEIGHT },
        { "SET_ANIM_PHASE(_,_,_,_)", WREN_TASK_SET_ANIM_PHASE },
        { "SET_ANIM_RATE(_,_,_,_)", WREN_TASK_SET_ANIM_RATE },
        { "SET_ANIM_LOOPED(_,_,_,_)", WREN_TASK_SET_ANIM_LOOPED },
        { "TASK_PLAY_PHONE_GESTURE_ANIMATION(_,_,_,_,_,_,_,_)", WREN_TASK_TASK_PLAY_PHONE_GESTURE_ANIMATION },
        { "TASK_STOP_PHONE_GESTURE_ANIMATION(_,_)", WREN_TASK_TASK_STOP_PHONE_GESTURE_ANIMATION },
        { "IS_PLAYING_PHONE_GESTURE_ANIM(_)", WREN_TASK_IS_PLAYING_PHONE_GESTURE_ANIM },
        { "GET_PHONE_GESTURE_ANIM_CURRENT_TIME(_)", WREN_TASK_GET_PHONE_GESTURE_ANIM_CURRENT_TIME },
        { "GET_PHONE_GESTURE_ANIM_TOTAL_TIME(_)", WREN_TASK_GET_PHONE_GESTURE_ANIM_TOTAL_TIME },
        { "TASK_VEHICLE_PLAY_ANIM(_,_,_)", WREN_TASK_TASK_VEHICLE_PLAY_ANIM },
        { "TASK_LOOK_AT_COORD(_,_,_,_,_,_,_)", WREN_TASK_TASK_LOOK_AT_COORD },
        { "TASK_LOOK_AT_ENTITY(_,_,_,_,_)", WREN_TASK_TASK_LOOK_AT_ENTITY },
        { "TASK_CLEAR_LOOK_AT(_)", WREN_TASK_TASK_CLEAR_LOOK_AT },
        { "OPEN_SEQUENCE_TASK()", WREN_TASK_OPEN_SEQUENCE_TASK },
        { "CLOSE_SEQUENCE_TASK(_)", WREN_TASK_CLOSE_SEQUENCE_TASK },
        { "TASK_PERFORM_SEQUENCE(_,_)", WREN_TASK_TASK_PERFORM_SEQUENCE },
        { "TASK_PERFORM_SEQUENCE_LOCALLY(_,_)", WREN_TASK_TASK_PERFORM_SEQUENCE_LOCALLY },
        { "CLEAR_SEQUENCE_TASK()", WREN_TASK_CLEAR_SEQUENCE_TASK },
        { "SET_SEQUENCE_TO_REPEAT(_,_)", WREN_TASK_SET_SEQUENCE_TO_REPEAT },
        { "GET_SEQUENCE_PROGRESS(_)", WREN_TASK_GET_SEQUENCE_PROGRESS },
        { "GET_IS_TASK_ACTIVE(_,_)", WREN_TASK_GET_IS_TASK_ACTIVE },
        { "GET_SCRIPT_TASK_STATUS(_,_)", WREN_TASK_GET_SCRIPT_TASK_STATUS },
        { "GET_ACTIVE_VEHICLE_MISSION_TYPE(_)", WREN_TASK_GET_ACTIVE_VEHICLE_MISSION_TYPE },
        { "TASK_LEAVE_ANY_VEHICLE(_,_,_)", WREN_TASK_TASK_LEAVE_ANY_VEHICLE },
        { "TASK_AIM_GUN_SCRIPTED(_,_,_,_)", WREN_TASK_TASK_AIM_GUN_SCRIPTED },
        { "TASK_AIM_GUN_SCRIPTED_WITH_TARGET(_,_,_,_,_,_,_,_)", WREN_TASK_TASK_AIM_GUN_SCRIPTED_WITH_TARGET },
        { "UPDATE_TASK_AIM_GUN_SCRIPTED_TARGET(_,_,_,_,_,_)", WREN_TASK_UPDATE_TASK_AIM_GUN_SCRIPTED_TARGET },
        { "GET_CLIP_SET_FOR_SCRIPTED_GUN_TASK(_)", WREN_TASK_GET_CLIP_SET_FOR_SCRIPTED_GUN_TASK },
        { "TASK_AIM_GUN_AT_ENTITY(_,_,_,_)", WREN_TASK_TASK_AIM_GUN_AT_ENTITY },
        { "TASK_TURN_PED_TO_FACE_ENTITY(_,_,_)", WREN_TASK_TASK_TURN_PED_TO_FACE_ENTITY },
        { "TASK_AIM_GUN_AT_COORD(_,_,_,_,_,_,_)", WREN_TASK_TASK_AIM_GUN_AT_COORD },
        { "TASK_SHOOT_AT_COORD(_,_,_,_,_,_)", WREN_TASK_TASK_SHOOT_AT_COORD },
        { "TASK_SHUFFLE_TO_NEXT_VEHICLE_SEAT(_,_,_)", WREN_TASK_TASK_SHUFFLE_TO_NEXT_VEHICLE_SEAT },
        { "CLEAR_PED_TASKS(_)", WREN_TASK_CLEAR_PED_TASKS },
        { "CLEAR_PED_SECONDARY_TASK(_)", WREN_TASK_CLEAR_PED_SECONDARY_TASK },
        { "TASK_EVERYONE_LEAVE_VEHICLE(_)", WREN_TASK_TASK_EVERYONE_LEAVE_VEHICLE },
        { "TASK_GOTO_ENTITY_OFFSET(_,_,_,_,_,_,_)", WREN_TASK_TASK_GOTO_ENTITY_OFFSET },
        { "TASK_GOTO_ENTITY_OFFSET_XY(_,_,_,_,_,_,_,_)", WREN_TASK_TASK_GOTO_ENTITY_OFFSET_XY },
        { "TASK_TURN_PED_TO_FACE_COORD(_,_,_,_,_)", WREN_TASK_TASK_TURN_PED_TO_FACE_COORD },
        { "TASK_VEHICLE_TEMP_ACTION(_,_,_,_)", WREN_TASK_TASK_VEHICLE_TEMP_ACTION },
        { "TASK_VEHICLE_MISSION(_,_,_,_,_,_,_,_,_)", WREN_TASK_TASK_VEHICLE_MISSION },
        { "TASK_VEHICLE_MISSION_PED_TARGET(_,_,_,_,_,_,_,_,_)", WREN_TASK_TASK_VEHICLE_MISSION_PED_TARGET },
        { "TASK_VEHICLE_MISSION_COORS_TARGET(_,_,_,_,_,_,_,_,_,_,_)", WREN_TASK_TASK_VEHICLE_MISSION_COORS_TARGET },
        { "TASK_VEHICLE_ESCORT(_,_,_,_,_,_,_,_,_)", WREN_TASK_TASK_VEHICLE_ESCORT },
        { "TASK_VEHICLE_FOLLOW(_,_,_,_,_,_)", WREN_TASK_TASK_VEHICLE_FOLLOW },
        { "TASK_VEHICLE_CHASE(_,_)", WREN_TASK_TASK_VEHICLE_CHASE },
        { "TASK_VEHICLE_HELI_PROTECT(_,_,_,_,_,_,_,_)", WREN_TASK_TASK_VEHICLE_HELI_PROTECT },
        { "SET_TASK_VEHICLE_CHASE_BEHAVIOR_FLAG(_,_,_)", WREN_TASK_SET_TASK_VEHICLE_CHASE_BEHAVIOR_FLAG },
        { "SET_TASK_VEHICLE_CHASE_IDEAL_PURSUIT_DISTANCE(_,_)", WREN_TASK_SET_TASK_VEHICLE_CHASE_IDEAL_PURSUIT_DISTANCE },
        { "TASK_HELI_CHASE(_,_,_,_,_)", WREN_TASK_TASK_HELI_CHASE },
        { "TASK_PLANE_CHASE(_,_,_,_,_)", WREN_TASK_TASK_PLANE_CHASE },
        { "TASK_PLANE_LAND(_,_,_,_,_,_,_,_)", WREN_TASK_TASK_PLANE_LAND },
        { "CLEAR_DEFAULT_PRIMARY_TASK(_)", WREN_TASK_CLEAR_DEFAULT_PRIMARY_TASK },
        { "CLEAR_PRIMARY_VEHICLE_TASK(_)", WREN_TASK_CLEAR_PRIMARY_VEHICLE_TASK },
        { "CLEAR_VEHICLE_CRASH_TASK(_)", WREN_TASK_CLEAR_VEHICLE_CRASH_TASK },
        { "TASK_PLANE_GOTO_PRECISE_VTOL(_,_,_,_,_,_,_,_,_,_)", WREN_TASK_TASK_PLANE_GOTO_PRECISE_VTOL },
        { "TASK_SUBMARINE_GOTO_AND_STOP(_,_,_,_,_,_)", WREN_TASK_TASK_SUBMARINE_GOTO_AND_STOP },
        { "TASK_HELI_MISSION(_,_,_,_,_,_,_,_,_,_,_,_,_,_,_)", WREN_TASK_TASK_HELI_MISSION },
        { "TASK_HELI_ESCORT_HELI(_,_,_,_,_,_)", WREN_TASK_TASK_HELI_ESCORT_HELI },
        { "TASK_PLANE_MISSION(_,_,_,_,_,_,_,_,_,_,_,_,_,_)", WREN_TASK_TASK_PLANE_MISSION },
        { "TASK_PLANE_TAXI(_,_,_,_,_,_,_)", WREN_TASK_TASK_PLANE_TAXI },
        { "TASK_BOAT_MISSION(_,_,_,_,_,_,_,_,_,_,_,_)", WREN_TASK_TASK_BOAT_MISSION },
        { "TASK_DRIVE_BY(_,_,_,_,_,_,_,_,_,_)", WREN_TASK_TASK_DRIVE_BY },
        { "SET_DRIVEBY_TASK_TARGET(_,_,_,_,_,_)", WREN_TASK_SET_DRIVEBY_TASK_TARGET },
        { "CLEAR_DRIVEBY_TASK_UNDERNEATH_DRIVING_TASK(_)", WREN_TASK_CLEAR_DRIVEBY_TASK_UNDERNEATH_DRIVING_TASK },
        { "IS_DRIVEBY_TASK_UNDERNEATH_DRIVING_TASK(_)", WREN_TASK_IS_DRIVEBY_TASK_UNDERNEATH_DRIVING_TASK },
        { "CONTROL_MOUNTED_WEAPON(_)", WREN_TASK_CONTROL_MOUNTED_WEAPON },
        { "SET_MOUNTED_WEAPON_TARGET(_,_,_,_,_,_,_,_)", WREN_TASK_SET_MOUNTED_WEAPON_TARGET },
        { "IS_MOUNTED_WEAPON_TASK_UNDERNEATH_DRIVING_TASK(_)", WREN_TASK_IS_MOUNTED_WEAPON_TASK_UNDERNEATH_DRIVING_TASK },
        { "TASK_USE_MOBILE_PHONE(_,_,_)", WREN_TASK_TASK_USE_MOBILE_PHONE },
        { "TASK_USE_MOBILE_PHONE_TIMED(_,_)", WREN_TASK_TASK_USE_MOBILE_PHONE_TIMED },
        { "TASK_CHAT_TO_PED(_,_,_,_,_,_,_,_)", WREN_TASK_TASK_CHAT_TO_PED },
        { "TASK_WARP_PED_INTO_VEHICLE(_,_,_)", WREN_TASK_TASK_WARP_PED_INTO_VEHICLE },
        { "TASK_SHOOT_AT_ENTITY(_,_,_,_)", WREN_TASK_TASK_SHOOT_AT_ENTITY },
        { "TASK_CLIMB(_,_)", WREN_TASK_TASK_CLIMB },
        { "TASK_CLIMB_LADDER(_,_)", WREN_TASK_TASK_CLIMB_LADDER },
        { "TASK_RAPPEL_DOWN_WALL_USING_CLIPSET_OVERRIDE(_,_,_,_,_,_,_,_,_,_,_)", WREN_TASK_TASK_RAPPEL_DOWN_WALL_USING_CLIPSET_OVERRIDE },
        { "GET_TASK_RAPPEL_DOWN_WALL_STATE(_)", WREN_TASK_GET_TASK_RAPPEL_DOWN_WALL_STATE },
        { "CLEAR_PED_TASKS_IMMEDIATELY(_)", WREN_TASK_CLEAR_PED_TASKS_IMMEDIATELY },
        { "TASK_PERFORM_SEQUENCE_FROM_PROGRESS(_,_,_,_)", WREN_TASK_TASK_PERFORM_SEQUENCE_FROM_PROGRESS },
        { "SET_NEXT_DESIRED_MOVE_STATE(_)", WREN_TASK_SET_NEXT_DESIRED_MOVE_STATE },
        { "SET_PED_DESIRED_MOVE_BLEND_RATIO(_,_)", WREN_TASK_SET_PED_DESIRED_MOVE_BLEND_RATIO },
        { "GET_PED_DESIRED_MOVE_BLEND_RATIO(_)", WREN_TASK_GET_PED_DESIRED_MOVE_BLEND_RATIO },
        { "TASK_GOTO_ENTITY_AIMING(_,_,_,_)", WREN_TASK_TASK_GOTO_ENTITY_AIMING },
        { "TASK_SET_DECISION_MAKER(_,_)", WREN_TASK_TASK_SET_DECISION_MAKER },
        { "TASK_SET_SPHERE_DEFENSIVE_AREA(_,_,_,_,_)", WREN_TASK_TASK_SET_SPHERE_DEFENSIVE_AREA },
        { "TASK_CLEAR_DEFENSIVE_AREA(_)", WREN_TASK_TASK_CLEAR_DEFENSIVE_AREA },
        { "TASK_PED_SLIDE_TO_COORD(_,_,_,_,_,_)", WREN_TASK_TASK_PED_SLIDE_TO_COORD },
        { "TASK_PED_SLIDE_TO_COORD_HDG_RATE(_,_,_,_,_,_,_)", WREN_TASK_TASK_PED_SLIDE_TO_COORD_HDG_RATE },
        { "ADD_COVER_POINT(_,_,_,_,_,_,_,_)", WREN_TASK_ADD_COVER_POINT },
        { "REMOVE_COVER_POINT(_)", WREN_TASK_REMOVE_COVER_POINT },
        { "DOES_SCRIPTED_COVER_POINT_EXIST_AT_COORDS(_,_,_)", WREN_TASK_DOES_SCRIPTED_COVER_POINT_EXIST_AT_COORDS },
        { "GET_SCRIPTED_COVER_POINT_COORDS(_)", WREN_TASK_GET_SCRIPTED_COVER_POINT_COORDS },
        { "ADD_SCRIPTED_COVER_AREA(_,_,_,_)", WREN_TASK_ADD_SCRIPTED_COVER_AREA },
        { "TASK_COMBAT_PED(_,_,_,_)", WREN_TASK_TASK_COMBAT_PED },
        { "TASK_COMBAT_PED_TIMED(_,_,_,_)", WREN_TASK_TASK_COMBAT_PED_TIMED },
        { "TASK_SEEK_COVER_FROM_POS(_,_,_,_,_,_)", WREN_TASK_TASK_SEEK_COVER_FROM_POS },
        { "TASK_SEEK_COVER_FROM_PED(_,_,_,_)", WREN_TASK_TASK_SEEK_COVER_FROM_PED },
        { "TASK_SEEK_COVER_TO_COVER_POINT(_,_,_,_,_,_,_)", WREN_TASK_TASK_SEEK_COVER_TO_COVER_POINT },
        { "TASK_SEEK_COVER_TO_COORDS(_,_,_,_,_,_,_,_,_)", WREN_TASK_TASK_SEEK_COVER_TO_COORDS },
        { "TASK_PUT_PED_DIRECTLY_INTO_COVER(_,_,_,_,_,_,_,_,_,_,_)", WREN_TASK_TASK_PUT_PED_DIRECTLY_INTO_COVER },
        { "TASK_WARP_PED_DIRECTLY_INTO_COVER(_,_,_,_,_,_)", WREN_TASK_TASK_WARP_PED_DIRECTLY_INTO_COVER },
        { "TASK_EXIT_COVER(_,_,_,_,_)", WREN_TASK_TASK_EXIT_COVER },
        { "TASK_PUT_PED_DIRECTLY_INTO_MELEE(_,_,_,_,_,_)", WREN_TASK_TASK_PUT_PED_DIRECTLY_INTO_MELEE },
        { "TASK_TOGGLE_DUCK(_,_)", WREN_TASK_TASK_TOGGLE_DUCK },
        { "TASK_GUARD_CURRENT_POSITION(_,_,_,_)", WREN_TASK_TASK_GUARD_CURRENT_POSITION },
        { "TASK_GUARD_ASSIGNED_DEFENSIVE_AREA(_,_,_,_,_,_,_)", WREN_TASK_TASK_GUARD_ASSIGNED_DEFENSIVE_AREA },
        { "TASK_GUARD_SPHERE_DEFENSIVE_AREA(_,_,_,_,_,_,_,_,_,_,_)", WREN_TASK_TASK_GUARD_SPHERE_DEFENSIVE_AREA },
        { "TASK_STAND_GUARD(_,_,_,_,_,_)", WREN_TASK_TASK_STAND_GUARD },
        { "SET_DRIVE_TASK_CRUISE_SPEED(_,_)", WREN_TASK_SET_DRIVE_TASK_CRUISE_SPEED },
        { "SET_DRIVE_TASK_MAX_CRUISE_SPEED(_,_)", WREN_TASK_SET_DRIVE_TASK_MAX_CRUISE_SPEED },
        { "SET_DRIVE_TASK_DRIVING_STYLE(_,_)", WREN_TASK_SET_DRIVE_TASK_DRIVING_STYLE },
        { "ADD_COVER_BLOCKING_AREA(_,_,_,_,_,_,_,_,_,_)", WREN_TASK_ADD_COVER_BLOCKING_AREA },
        { "REMOVE_ALL_COVER_BLOCKING_AREAS()", WREN_TASK_REMOVE_ALL_COVER_BLOCKING_AREAS },
        { "REMOVE_COVER_BLOCKING_AREAS_AT_POSITION(_,_,_)", WREN_TASK_REMOVE_COVER_BLOCKING_AREAS_AT_POSITION },
        { "REMOVE_SPECIFIC_COVER_BLOCKING_AREAS(_,_,_,_,_,_,_,_,_,_)", WREN_TASK_REMOVE_SPECIFIC_COVER_BLOCKING_AREAS },
        { "TASK_START_SCENARIO_IN_PLACE(_,_,_,_)", WREN_TASK_TASK_START_SCENARIO_IN_PLACE },
        { "TASK_START_SCENARIO_AT_POSITION(_,_,_,_,_,_,_,_,_)", WREN_TASK_TASK_START_SCENARIO_AT_POSITION },
        { "TASK_USE_NEAREST_SCENARIO_TO_COORD(_,_,_,_,_,_)", WREN_TASK_TASK_USE_NEAREST_SCENARIO_TO_COORD },
        { "TASK_USE_NEAREST_SCENARIO_TO_COORD_WARP(_,_,_,_,_,_)", WREN_TASK_TASK_USE_NEAREST_SCENARIO_TO_COORD_WARP },
        { "TASK_USE_NEAREST_SCENARIO_CHAIN_TO_COORD(_,_,_,_,_,_)", WREN_TASK_TASK_USE_NEAREST_SCENARIO_CHAIN_TO_COORD },
        { "TASK_USE_NEAREST_SCENARIO_CHAIN_TO_COORD_WARP(_,_,_,_,_,_)", WREN_TASK_TASK_USE_NEAREST_SCENARIO_CHAIN_TO_COORD_WARP },
        { "DOES_SCENARIO_EXIST_IN_AREA(_,_,_,_,_)", WREN_TASK_DOES_SCENARIO_EXIST_IN_AREA },
        { "DOES_SCENARIO_OF_TYPE_EXIST_IN_AREA(_,_,_,_,_,_)", WREN_TASK_DOES_SCENARIO_OF_TYPE_EXIST_IN_AREA },
        { "IS_SCENARIO_OCCUPIED(_,_,_,_,_)", WREN_TASK_IS_SCENARIO_OCCUPIED },
        { "PED_HAS_USE_SCENARIO_TASK(_)", WREN_TASK_PED_HAS_USE_SCENARIO_TASK },
        { "PLAY_ANIM_ON_RUNNING_SCENARIO(_,_,_)", WREN_TASK_PLAY_ANIM_ON_RUNNING_SCENARIO },
        { "DOES_SCENARIO_GROUP_EXIST(_)", WREN_TASK_DOES_SCENARIO_GROUP_EXIST },
        { "IS_SCENARIO_GROUP_ENABLED(_)", WREN_TASK_IS_SCENARIO_GROUP_ENABLED },
        { "SET_SCENARIO_GROUP_ENABLED(_,_)", WREN_TASK_SET_SCENARIO_GROUP_ENABLED },
        { "RESET_SCENARIO_GROUPS_ENABLED()", WREN_TASK_RESET_SCENARIO_GROUPS_ENABLED },
        { "SET_EXCLUSIVE_SCENARIO_GROUP(_)", WREN_TASK_SET_EXCLUSIVE_SCENARIO_GROUP },
        { "RESET_EXCLUSIVE_SCENARIO_GROUP()", WREN_TASK_RESET_EXCLUSIVE_SCENARIO_GROUP },
        { "IS_SCENARIO_TYPE_ENABLED(_)", WREN_TASK_IS_SCENARIO_TYPE_ENABLED },
        { "SET_SCENARIO_TYPE_ENABLED(_,_)", WREN_TASK_SET_SCENARIO_TYPE_ENABLED },
        { "RESET_SCENARIO_TYPES_ENABLED()", WREN_TASK_RESET_SCENARIO_TYPES_ENABLED },
        { "IS_PED_ACTIVE_IN_SCENARIO(_)", WREN_TASK_IS_PED_ACTIVE_IN_SCENARIO },
        { "IS_PED_PLAYING_BASE_CLIP_IN_SCENARIO(_)", WREN_TASK_IS_PED_PLAYING_BASE_CLIP_IN_SCENARIO },
        { "SET_PED_CAN_PLAY_AMBIENT_IDLES(_,_,_)", WREN_TASK_SET_PED_CAN_PLAY_AMBIENT_IDLES },
        { "TASK_COMBAT_HATED_TARGETS_IN_AREA(_,_,_,_,_,_)", WREN_TASK_TASK_COMBAT_HATED_TARGETS_IN_AREA },
        { "TASK_COMBAT_HATED_TARGETS_AROUND_PED(_,_,_)", WREN_TASK_TASK_COMBAT_HATED_TARGETS_AROUND_PED },
        { "TASK_COMBAT_HATED_TARGETS_AROUND_PED_TIMED(_,_,_,_)", WREN_TASK_TASK_COMBAT_HATED_TARGETS_AROUND_PED_TIMED },
        { "TASK_THROW_PROJECTILE(_,_,_,_,_,_)", WREN_TASK_TASK_THROW_PROJECTILE },
        { "TASK_SWAP_WEAPON(_,_)", WREN_TASK_TASK_SWAP_WEAPON },
        { "TASK_RELOAD_WEAPON(_,_)", WREN_TASK_TASK_RELOAD_WEAPON },
        { "IS_PED_GETTING_UP(_)", WREN_TASK_IS_PED_GETTING_UP },
        { "TASK_WRITHE(_,_,_,_,_,_)", WREN_TASK_TASK_WRITHE },
        { "IS_PED_IN_WRITHE(_)", WREN_TASK_IS_PED_IN_WRITHE },
        { "OPEN_PATROL_ROUTE(_)", WREN_TASK_OPEN_PATROL_ROUTE },
        { "CLOSE_PATROL_ROUTE()", WREN_TASK_CLOSE_PATROL_ROUTE },
        { "ADD_PATROL_ROUTE_NODE(_,_,_,_,_,_,_,_,_)", WREN_TASK_ADD_PATROL_ROUTE_NODE },
        { "ADD_PATROL_ROUTE_LINK(_,_)", WREN_TASK_ADD_PATROL_ROUTE_LINK },
        { "CREATE_PATROL_ROUTE()", WREN_TASK_CREATE_PATROL_ROUTE },
        { "DELETE_PATROL_ROUTE(_)", WREN_TASK_DELETE_PATROL_ROUTE },
        { "GET_PATROL_TASK_INFO(_)", WREN_TASK_GET_PATROL_TASK_INFO },
        { "TASK_PATROL(_,_,_,_,_)", WREN_TASK_TASK_PATROL },
        { "TASK_STAY_IN_COVER(_)", WREN_TASK_TASK_STAY_IN_COVER },
        { "ADD_VEHICLE_SUBTASK_ATTACK_COORD(_,_,_,_)", WREN_TASK_ADD_VEHICLE_SUBTASK_ATTACK_COORD },
        { "ADD_VEHICLE_SUBTASK_ATTACK_PED(_,_)", WREN_TASK_ADD_VEHICLE_SUBTASK_ATTACK_PED },
        { "TASK_VEHICLE_SHOOT_AT_PED(_,_,_)", WREN_TASK_TASK_VEHICLE_SHOOT_AT_PED },
        { "TASK_VEHICLE_AIM_AT_PED(_,_)", WREN_TASK_TASK_VEHICLE_AIM_AT_PED },
        { "TASK_VEHICLE_SHOOT_AT_COORD(_,_,_,_,_)", WREN_TASK_TASK_VEHICLE_SHOOT_AT_COORD },
        { "TASK_VEHICLE_AIM_AT_COORD(_,_,_,_)", WREN_TASK_TASK_VEHICLE_AIM_AT_COORD },
        { "TASK_VEHICLE_GOTO_NAVMESH(_,_,_,_,_,_,_,_)", WREN_TASK_TASK_VEHICLE_GOTO_NAVMESH },
        { "TASK_GO_TO_COORD_WHILE_AIMING_AT_COORD(_,_,_,_,_,_,_,_,_,_,_,_,_,_,_)", WREN_TASK_TASK_GO_TO_COORD_WHILE_AIMING_AT_COORD },
        { "TASK_GO_TO_COORD_WHILE_AIMING_AT_ENTITY(_,_,_,_,_,_,_,_,_,_,_,_,_,_)", WREN_TASK_TASK_GO_TO_COORD_WHILE_AIMING_AT_ENTITY },
        { "TASK_GO_TO_COORD_AND_AIM_AT_HATED_ENTITIES_NEAR_COORD(_,_,_,_,_,_,_,_,_,_,_,_,_,_,_)", WREN_TASK_TASK_GO_TO_COORD_AND_AIM_AT_HATED_ENTITIES_NEAR_COORD },
        { "TASK_GO_TO_ENTITY_WHILE_AIMING_AT_COORD(_,_,_,_,_,_,_,_,_,_,_,_)", WREN_TASK_TASK_GO_TO_ENTITY_WHILE_AIMING_AT_COORD },
        { "TASK_GO_TO_ENTITY_WHILE_AIMING_AT_ENTITY(_,_,_,_,_,_,_,_,_,_)", WREN_TASK_TASK_GO_TO_ENTITY_WHILE_AIMING_AT_ENTITY },
        { "SET_HIGH_FALL_TASK(_,_,_,_)", WREN_TASK_SET_HIGH_FALL_TASK },
        { "REQUEST_WAYPOINT_RECORDING(_)", WREN_TASK_REQUEST_WAYPOINT_RECORDING },
        { "GET_IS_WAYPOINT_RECORDING_LOADED(_)", WREN_TASK_GET_IS_WAYPOINT_RECORDING_LOADED },
        { "REMOVE_WAYPOINT_RECORDING(_)", WREN_TASK_REMOVE_WAYPOINT_RECORDING },
        { "WAYPOINT_RECORDING_GET_NUM_POINTS(_)", WREN_TASK_WAYPOINT_RECORDING_GET_NUM_POINTS },
        { "WAYPOINT_RECORDING_GET_COORD(_,_)", WREN_TASK_WAYPOINT_RECORDING_GET_COORD },
        { "WAYPOINT_RECORDING_GET_SPEED_AT_POINT(_,_)", WREN_TASK_WAYPOINT_RECORDING_GET_SPEED_AT_POINT },
        { "WAYPOINT_RECORDING_GET_CLOSEST_WAYPOINT(_,_,_,_)", WREN_TASK_WAYPOINT_RECORDING_GET_CLOSEST_WAYPOINT },
        { "TASK_FOLLOW_WAYPOINT_RECORDING(_,_,_,_,_)", WREN_TASK_TASK_FOLLOW_WAYPOINT_RECORDING },
        { "IS_WAYPOINT_PLAYBACK_GOING_ON_FOR_PED(_)", WREN_TASK_IS_WAYPOINT_PLAYBACK_GOING_ON_FOR_PED },
        { "GET_PED_WAYPOINT_PROGRESS(_)", WREN_TASK_GET_PED_WAYPOINT_PROGRESS },
        { "GET_PED_WAYPOINT_DISTANCE(_)", WREN_TASK_GET_PED_WAYPOINT_DISTANCE },
        { "SET_PED_WAYPOINT_ROUTE_OFFSET(_,_,_,_)", WREN_TASK_SET_PED_WAYPOINT_ROUTE_OFFSET },
        { "GET_WAYPOINT_DISTANCE_ALONG_ROUTE(_,_)", WREN_TASK_GET_WAYPOINT_DISTANCE_ALONG_ROUTE },
        { "WAYPOINT_PLAYBACK_GET_IS_PAUSED(_)", WREN_TASK_WAYPOINT_PLAYBACK_GET_IS_PAUSED },
        { "WAYPOINT_PLAYBACK_PAUSE(_,_,_)", WREN_TASK_WAYPOINT_PLAYBACK_PAUSE },
        { "WAYPOINT_PLAYBACK_RESUME(_,_,_,_)", WREN_TASK_WAYPOINT_PLAYBACK_RESUME },
        { "WAYPOINT_PLAYBACK_OVERRIDE_SPEED(_,_,_)", WREN_TASK_WAYPOINT_PLAYBACK_OVERRIDE_SPEED },
        { "WAYPOINT_PLAYBACK_USE_DEFAULT_SPEED(_)", WREN_TASK_WAYPOINT_PLAYBACK_USE_DEFAULT_SPEED },
        { "USE_WAYPOINT_RECORDING_AS_ASSISTED_MOVEMENT_ROUTE(_,_,_,_)", WREN_TASK_USE_WAYPOINT_RECORDING_AS_ASSISTED_MOVEMENT_ROUTE },
        { "WAYPOINT_PLAYBACK_START_AIMING_AT_PED(_,_,_)", WREN_TASK_WAYPOINT_PLAYBACK_START_AIMING_AT_PED },
        { "WAYPOINT_PLAYBACK_START_AIMING_AT_COORD(_,_,_,_,_)", WREN_TASK_WAYPOINT_PLAYBACK_START_AIMING_AT_COORD },
        { "WAYPOINT_PLAYBACK_START_SHOOTING_AT_PED(_,_,_,_)", WREN_TASK_WAYPOINT_PLAYBACK_START_SHOOTING_AT_PED },
        { "WAYPOINT_PLAYBACK_START_SHOOTING_AT_COORD(_,_,_,_,_,_)", WREN_TASK_WAYPOINT_PLAYBACK_START_SHOOTING_AT_COORD },
        { "WAYPOINT_PLAYBACK_STOP_AIMING_OR_SHOOTING(_)", WREN_TASK_WAYPOINT_PLAYBACK_STOP_AIMING_OR_SHOOTING },
        { "ASSISTED_MOVEMENT_REQUEST_ROUTE(_)", WREN_TASK_ASSISTED_MOVEMENT_REQUEST_ROUTE },
        { "ASSISTED_MOVEMENT_REMOVE_ROUTE(_)", WREN_TASK_ASSISTED_MOVEMENT_REMOVE_ROUTE },
        { "ASSISTED_MOVEMENT_IS_ROUTE_LOADED(_)", WREN_TASK_ASSISTED_MOVEMENT_IS_ROUTE_LOADED },
        { "ASSISTED_MOVEMENT_SET_ROUTE_PROPERTIES(_,_)", WREN_TASK_ASSISTED_MOVEMENT_SET_ROUTE_PROPERTIES },
        { "ASSISTED_MOVEMENT_OVERRIDE_LOAD_DISTANCE_THIS_FRAME(_)", WREN_TASK_ASSISTED_MOVEMENT_OVERRIDE_LOAD_DISTANCE_THIS_FRAME },
        { "TASK_VEHICLE_FOLLOW_WAYPOINT_RECORDING(_,_,_,_,_,_,_,_,_,_)", WREN_TASK_TASK_VEHICLE_FOLLOW_WAYPOINT_RECORDING },
        { "IS_WAYPOINT_PLAYBACK_GOING_ON_FOR_VEHICLE(_)", WREN_TASK_IS_WAYPOINT_PLAYBACK_GOING_ON_FOR_VEHICLE },
        { "GET_VEHICLE_WAYPOINT_PROGRESS(_)", WREN_TASK_GET_VEHICLE_WAYPOINT_PROGRESS },
        { "GET_VEHICLE_WAYPOINT_TARGET_POINT(_)", WREN_TASK_GET_VEHICLE_WAYPOINT_TARGET_POINT },
        { "VEHICLE_WAYPOINT_PLAYBACK_PAUSE(_)", WREN_TASK_VEHICLE_WAYPOINT_PLAYBACK_PAUSE },
        { "VEHICLE_WAYPOINT_PLAYBACK_RESUME(_)", WREN_TASK_VEHICLE_WAYPOINT_PLAYBACK_RESUME },
        { "VEHICLE_WAYPOINT_PLAYBACK_USE_DEFAULT_SPEED(_)", WREN_TASK_VEHICLE_WAYPOINT_PLAYBACK_USE_DEFAULT_SPEED },
        { "VEHICLE_WAYPOINT_PLAYBACK_OVERRIDE_SPEED(_,_)", WREN_TASK_VEHICLE_WAYPOINT_PLAYBACK_OVERRIDE_SPEED },
        { "TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS(_,_)", WREN_TASK_TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS },
        { "TASK_FORCE_MOTION_STATE(_,_,_)", WREN_TASK_TASK_FORCE_MOTION_STATE },
        { "TASK_MOVE_NETWORK_BY_NAME(_,_,_,_,_,_)", WREN_TASK_TASK_MOVE_NETWORK_BY_NAME },
        { "TASK_MOVE_NETWORK_ADVANCED_BY_NAME(_,_,_,_,_,_,_,_,_,_,_,_,_)", WREN_TASK_TASK_MOVE_NETWORK_ADVANCED_BY_NAME },
        { "TASK_MOVE_NETWORK_BY_NAME_WITH_INIT_PARAMS(_,_,_,_,_,_)", WREN_TASK_TASK_MOVE_NETWORK_BY_NAME_WITH_INIT_PARAMS },
        { "TASK_MOVE_NETWORK_ADVANCED_BY_NAME_WITH_INIT_PARAMS(_,_,_,_,_,_,_,_,_,_,_,_,_)", WREN_TASK_TASK_MOVE_NETWORK_ADVANCED_BY_NAME_WITH_INIT_PARAMS },
        { "IS_TASK_MOVE_NETWORK_ACTIVE(_)", WREN_TASK_IS_TASK_MOVE_NETWORK_ACTIVE },
        { "IS_TASK_MOVE_NETWORK_READY_FOR_TRANSITION(_)", WREN_TASK_IS_TASK_MOVE_NETWORK_READY_FOR_TRANSITION },
        { "REQUEST_TASK_MOVE_NETWORK_STATE_TRANSITION(_,_)", WREN_TASK_REQUEST_TASK_MOVE_NETWORK_STATE_TRANSITION },
        { "SET_EXPECTED_CLONE_NEXT_TASK_MOVE_NETWORK_STATE(_,_)", WREN_TASK_SET_EXPECTED_CLONE_NEXT_TASK_MOVE_NETWORK_STATE },
        { "GET_TASK_MOVE_NETWORK_STATE(_)", WREN_TASK_GET_TASK_MOVE_NETWORK_STATE },
        { "SET_TASK_MOVE_NETWORK_ANIM_SET(_,_,_)", WREN_TASK_SET_TASK_MOVE_NETWORK_ANIM_SET },
        { "SET_TASK_MOVE_NETWORK_SIGNAL_FLOAT(_,_,_)", WREN_TASK_SET_TASK_MOVE_NETWORK_SIGNAL_FLOAT },
        { "SET_TASK_MOVE_NETWORK_SIGNAL_LOCAL_FLOAT(_,_,_)", WREN_TASK_SET_TASK_MOVE_NETWORK_SIGNAL_LOCAL_FLOAT },
        { "SET_TASK_MOVE_NETWORK_SIGNAL_FLOAT_LERP_RATE(_,_,_)", WREN_TASK_SET_TASK_MOVE_NETWORK_SIGNAL_FLOAT_LERP_RATE },
        { "SET_TASK_MOVE_NETWORK_SIGNAL_BOOL(_,_,_)", WREN_TASK_SET_TASK_MOVE_NETWORK_SIGNAL_BOOL },
        { "GET_TASK_MOVE_NETWORK_SIGNAL_FLOAT(_,_)", WREN_TASK_GET_TASK_MOVE_NETWORK_SIGNAL_FLOAT },
        { "GET_TASK_MOVE_NETWORK_SIGNAL_BOOL(_,_)", WREN_TASK_GET_TASK_MOVE_NETWORK_SIGNAL_BOOL },
        { "GET_TASK_MOVE_NETWORK_EVENT(_,_)", WREN_TASK_GET_TASK_MOVE_NETWORK_EVENT },
        { "SET_TASK_MOVE_NETWORK_ENABLE_COLLISION_ON_NETWORK_CLONE_WHEN_FIXED(_,_)", WREN_TASK_SET_TASK_MOVE_NETWORK_ENABLE_COLLISION_ON_NETWORK_CLONE_WHEN_FIXED },
        { "IS_MOVE_BLEND_RATIO_STILL(_)", WREN_TASK_IS_MOVE_BLEND_RATIO_STILL },
        { "IS_MOVE_BLEND_RATIO_WALKING(_)", WREN_TASK_IS_MOVE_BLEND_RATIO_WALKING },
        { "IS_MOVE_BLEND_RATIO_RUNNING(_)", WREN_TASK_IS_MOVE_BLEND_RATIO_RUNNING },
        { "IS_MOVE_BLEND_RATIO_SPRINTING(_)", WREN_TASK_IS_MOVE_BLEND_RATIO_SPRINTING },
        { "IS_PED_STILL(_)", WREN_TASK_IS_PED_STILL },
        { "IS_PED_WALKING(_)", WREN_TASK_IS_PED_WALKING },
        { "IS_PED_RUNNING(_)", WREN_TASK_IS_PED_RUNNING },
        { "IS_PED_SPRINTING(_)", WREN_TASK_IS_PED_SPRINTING },
        { "IS_PED_STRAFING(_)", WREN_TASK_IS_PED_STRAFING },
        { "TASK_SYNCHRONIZED_SCENE(_,_,_,_,_,_,_,_,_,_)", WREN_TASK_TASK_SYNCHRONIZED_SCENE },
        { "TASK_AGITATED_ACTION_CONFRONT_RESPONSE(_,_)", WREN_TASK_TASK_AGITATED_ACTION_CONFRONT_RESPONSE },
        { "TASK_SWEEP_AIM_ENTITY(_,_,_,_,_,_,_,_,_)", WREN_TASK_TASK_SWEEP_AIM_ENTITY },
        { "UPDATE_TASK_SWEEP_AIM_ENTITY(_,_)", WREN_TASK_UPDATE_TASK_SWEEP_AIM_ENTITY },
        { "TASK_SWEEP_AIM_POSITION(_,_,_,_,_,_,_,_,_,_,_)", WREN_TASK_TASK_SWEEP_AIM_POSITION },
        { "UPDATE_TASK_SWEEP_AIM_POSITION(_,_,_,_)", WREN_TASK_UPDATE_TASK_SWEEP_AIM_POSITION },
        { "TASK_ARREST_PED(_,_)", WREN_TASK_TASK_ARREST_PED },
        { "IS_PED_RUNNING_ARREST_TASK(_)", WREN_TASK_IS_PED_RUNNING_ARREST_TASK },
        { "IS_PED_BEING_ARRESTED(_)", WREN_TASK_IS_PED_BEING_ARRESTED },
        { "UNCUFF_PED(_)", WREN_TASK_UNCUFF_PED },
        { "IS_PED_CUFFED(_)", WREN_TASK_IS_PED_CUFFED },
        { "CREATE_VEHICLE(_,_,_,_,_,_,_,_)", WREN_VEHICLE_CREATE_VEHICLE },
        { "DELETE_VEHICLE()", WREN_VEHICLE_DELETE_VEHICLE },
        { "SET_VEHICLE_ALLOW_HOMING_MISSLE_LOCKON(_,_,_)", WREN_VEHICLE_SET_VEHICLE_ALLOW_HOMING_MISSLE_LOCKON },
        { "SET_VEHICLE_ALLOW_HOMING_MISSLE_LOCKON_SYNCED(_,_,_)", WREN_VEHICLE_SET_VEHICLE_ALLOW_HOMING_MISSLE_LOCKON_SYNCED },
        { "SET_VEHICLE_ALLOW_NO_PASSENGERS_LOCKON(_,_)", WREN_VEHICLE_SET_VEHICLE_ALLOW_NO_PASSENGERS_LOCKON },
        { "GET_VEHICLE_HOMING_LOCKON_STATE(_)", WREN_VEHICLE_GET_VEHICLE_HOMING_LOCKON_STATE },
        { "GET_VEHICLE_HOMING_LOCKEDONTO_STATE(_)", WREN_VEHICLE_GET_VEHICLE_HOMING_LOCKEDONTO_STATE },
        { "SET_VEHICLE_HOMING_LOCKEDONTO_STATE(_,_)", WREN_VEHICLE_SET_VEHICLE_HOMING_LOCKEDONTO_STATE },
        { "IS_VEHICLE_MODEL(_,_)", WREN_VEHICLE_IS_VEHICLE_MODEL },
        { "DOES_SCRIPT_VEHICLE_GENERATOR_EXIST(_)", WREN_VEHICLE_DOES_SCRIPT_VEHICLE_GENERATOR_EXIST },
        { "CREATE_SCRIPT_VEHICLE_GENERATOR(_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_)", WREN_VEHICLE_CREATE_SCRIPT_VEHICLE_GENERATOR },
        { "DELETE_SCRIPT_VEHICLE_GENERATOR(_)", WREN_VEHICLE_DELETE_SCRIPT_VEHICLE_GENERATOR },
        { "SET_SCRIPT_VEHICLE_GENERATOR(_,_)", WREN_VEHICLE_SET_SCRIPT_VEHICLE_GENERATOR },
        { "SET_ALL_VEHICLE_GENERATORS_ACTIVE_IN_AREA(_,_,_,_,_,_,_,_)", WREN_VEHICLE_SET_ALL_VEHICLE_GENERATORS_ACTIVE_IN_AREA },
        { "SET_ALL_VEHICLE_GENERATORS_ACTIVE()", WREN_VEHICLE_SET_ALL_VEHICLE_GENERATORS_ACTIVE },
        { "SET_ALL_LOW_PRIORITY_VEHICLE_GENERATORS_ACTIVE(_)", WREN_VEHICLE_SET_ALL_LOW_PRIORITY_VEHICLE_GENERATORS_ACTIVE },
        { "SET_VEHICLE_GENERATOR_AREA_OF_INTEREST(_,_,_,_)", WREN_VEHICLE_SET_VEHICLE_GENERATOR_AREA_OF_INTEREST },
        { "CLEAR_VEHICLE_GENERATOR_AREA_OF_INTEREST()", WREN_VEHICLE_CLEAR_VEHICLE_GENERATOR_AREA_OF_INTEREST },
        { "SET_VEHICLE_ON_GROUND_PROPERLY(_,_)", WREN_VEHICLE_SET_VEHICLE_ON_GROUND_PROPERLY },
        { "SET_VEHICLE_USE_CUTSCENE_WHEEL_COMPRESSION(_,_,_,_)", WREN_VEHICLE_SET_VEHICLE_USE_CUTSCENE_WHEEL_COMPRESSION },
        { "IS_VEHICLE_STUCK_ON_ROOF(_)", WREN_VEHICLE_IS_VEHICLE_STUCK_ON_ROOF },
        { "ADD_VEHICLE_UPSIDEDOWN_CHECK(_)", WREN_VEHICLE_ADD_VEHICLE_UPSIDEDOWN_CHECK },
        { "REMOVE_VEHICLE_UPSIDEDOWN_CHECK(_)", WREN_VEHICLE_REMOVE_VEHICLE_UPSIDEDOWN_CHECK },
        { "IS_VEHICLE_STOPPED(_)", WREN_VEHICLE_IS_VEHICLE_STOPPED },
        { "GET_VEHICLE_NUMBER_OF_PASSENGERS(_,_,_)", WREN_VEHICLE_GET_VEHICLE_NUMBER_OF_PASSENGERS },
        { "GET_VEHICLE_MAX_NUMBER_OF_PASSENGERS(_)", WREN_VEHICLE_GET_VEHICLE_MAX_NUMBER_OF_PASSENGERS },
        { "GET_VEHICLE_MODEL_NUMBER_OF_SEATS(_)", WREN_VEHICLE_GET_VEHICLE_MODEL_NUMBER_OF_SEATS },
        { "IS_SEAT_WARP_ONLY(_,_)", WREN_VEHICLE_IS_SEAT_WARP_ONLY },
        { "IS_TURRET_SEAT(_,_)", WREN_VEHICLE_IS_TURRET_SEAT },
        { "DOES_VEHICLE_ALLOW_RAPPEL(_)", WREN_VEHICLE_DOES_VEHICLE_ALLOW_RAPPEL },
        { "SET_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME(_)", WREN_VEHICLE_SET_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME },
        { "SET_RANDOM_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME(_)", WREN_VEHICLE_SET_RANDOM_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME },
        { "SET_PARKED_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME(_)", WREN_VEHICLE_SET_PARKED_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME },
        { "SET_DISABLE_RANDOM_TRAINS_THIS_FRAME(_)", WREN_VEHICLE_SET_DISABLE_RANDOM_TRAINS_THIS_FRAME },
        { "SET_AMBIENT_VEHICLE_RANGE_MULTIPLIER_THIS_FRAME(_)", WREN_VEHICLE_SET_AMBIENT_VEHICLE_RANGE_MULTIPLIER_THIS_FRAME },
        { "SET_FAR_DRAW_VEHICLES(_)", WREN_VEHICLE_SET_FAR_DRAW_VEHICLES },
        { "SET_NUMBER_OF_PARKED_VEHICLES(_)", WREN_VEHICLE_SET_NUMBER_OF_PARKED_VEHICLES },
        { "SET_VEHICLE_DOORS_LOCKED(_,_)", WREN_VEHICLE_SET_VEHICLE_DOORS_LOCKED },
        { "SET_VEHICLE_INDIVIDUAL_DOORS_LOCKED(_,_,_)", WREN_VEHICLE_SET_VEHICLE_INDIVIDUAL_DOORS_LOCKED },
        { "SET_VEHICLE_HAS_MUTED_SIRENS(_,_)", WREN_VEHICLE_SET_VEHICLE_HAS_MUTED_SIRENS },
        { "SET_VEHICLE_DOORS_LOCKED_FOR_PLAYER(_,_,_)", WREN_VEHICLE_SET_VEHICLE_DOORS_LOCKED_FOR_PLAYER },
        { "GET_VEHICLE_DOORS_LOCKED_FOR_PLAYER(_,_)", WREN_VEHICLE_GET_VEHICLE_DOORS_LOCKED_FOR_PLAYER },
        { "SET_VEHICLE_DOORS_LOCKED_FOR_ALL_PLAYERS(_,_)", WREN_VEHICLE_SET_VEHICLE_DOORS_LOCKED_FOR_ALL_PLAYERS },
        { "SET_VEHICLE_DOORS_LOCKED_FOR_NON_SCRIPT_PLAYERS(_,_)", WREN_VEHICLE_SET_VEHICLE_DOORS_LOCKED_FOR_NON_SCRIPT_PLAYERS },
        { "SET_VEHICLE_DOORS_LOCKED_FOR_TEAM(_,_,_)", WREN_VEHICLE_SET_VEHICLE_DOORS_LOCKED_FOR_TEAM },
        { "SET_VEHICLE_DOORS_LOCKED_FOR_ALL_TEAMS(_,_)", WREN_VEHICLE_SET_VEHICLE_DOORS_LOCKED_FOR_ALL_TEAMS },
        { "SET_VEHICLE_DONT_TERMINATE_TASK_WHEN_ACHIEVED(_)", WREN_VEHICLE_SET_VEHICLE_DONT_TERMINATE_TASK_WHEN_ACHIEVED },
        { "EXPLODE_VEHICLE(_,_,_)", WREN_VEHICLE_EXPLODE_VEHICLE },
        { "SET_VEHICLE_OUT_OF_CONTROL(_,_,_)", WREN_VEHICLE_SET_VEHICLE_OUT_OF_CONTROL },
        { "SET_VEHICLE_TIMED_EXPLOSION(_,_,_)", WREN_VEHICLE_SET_VEHICLE_TIMED_EXPLOSION },
        { "ADD_VEHICLE_PHONE_EXPLOSIVE_DEVICE(_)", WREN_VEHICLE_ADD_VEHICLE_PHONE_EXPLOSIVE_DEVICE },
        { "CLEAR_VEHICLE_PHONE_EXPLOSIVE_DEVICE()", WREN_VEHICLE_CLEAR_VEHICLE_PHONE_EXPLOSIVE_DEVICE },
        { "HAS_VEHICLE_PHONE_EXPLOSIVE_DEVICE()", WREN_VEHICLE_HAS_VEHICLE_PHONE_EXPLOSIVE_DEVICE },
        { "DETONATE_VEHICLE_PHONE_EXPLOSIVE_DEVICE()", WREN_VEHICLE_DETONATE_VEHICLE_PHONE_EXPLOSIVE_DEVICE },
        { "SET_TAXI_LIGHTS(_,_)", WREN_VEHICLE_SET_TAXI_LIGHTS },
        { "IS_TAXI_LIGHT_ON(_)", WREN_VEHICLE_IS_TAXI_LIGHT_ON },
        { "IS_VEHICLE_IN_GARAGE_AREA(_,_)", WREN_VEHICLE_IS_VEHICLE_IN_GARAGE_AREA },
        { "SET_VEHICLE_COLOURS(_,_,_)", WREN_VEHICLE_SET_VEHICLE_COLOURS },
        { "SET_VEHICLE_FULLBEAM(_,_)", WREN_VEHICLE_SET_VEHICLE_FULLBEAM },
        { "SET_VEHICLE_IS_RACING(_,_)", WREN_VEHICLE_SET_VEHICLE_IS_RACING },
        { "SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(_,_,_,_)", WREN_VEHICLE_SET_VEHICLE_CUSTOM_PRIMARY_COLOUR },
        { "GET_VEHICLE_CUSTOM_PRIMARY_COLOUR(_)", WREN_VEHICLE_GET_VEHICLE_CUSTOM_PRIMARY_COLOUR },
        { "CLEAR_VEHICLE_CUSTOM_PRIMARY_COLOUR(_)", WREN_VEHICLE_CLEAR_VEHICLE_CUSTOM_PRIMARY_COLOUR },
        { "GET_IS_VEHICLE_PRIMARY_COLOUR_CUSTOM(_)", WREN_VEHICLE_GET_IS_VEHICLE_PRIMARY_COLOUR_CUSTOM },
        { "SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(_,_,_,_)", WREN_VEHICLE_SET_VEHICLE_CUSTOM_SECONDARY_COLOUR },
        { "GET_VEHICLE_CUSTOM_SECONDARY_COLOUR(_)", WREN_VEHICLE_GET_VEHICLE_CUSTOM_SECONDARY_COLOUR },
        { "CLEAR_VEHICLE_CUSTOM_SECONDARY_COLOUR(_)", WREN_VEHICLE_CLEAR_VEHICLE_CUSTOM_SECONDARY_COLOUR },
        { "GET_IS_VEHICLE_SECONDARY_COLOUR_CUSTOM(_)", WREN_VEHICLE_GET_IS_VEHICLE_SECONDARY_COLOUR_CUSTOM },
        { "SET_VEHICLE_ENVEFF_SCALE(_,_)", WREN_VEHICLE_SET_VEHICLE_ENVEFF_SCALE },
        { "GET_VEHICLE_ENVEFF_SCALE(_)", WREN_VEHICLE_GET_VEHICLE_ENVEFF_SCALE },
        { "SET_CAN_RESPRAY_VEHICLE(_,_)", WREN_VEHICLE_SET_CAN_RESPRAY_VEHICLE },
        { "SET_GOON_BOSS_VEHICLE(_,_)", WREN_VEHICLE_SET_GOON_BOSS_VEHICLE },
        { "SET_OPEN_REAR_DOORS_ON_EXPLOSION(_,_)", WREN_VEHICLE_SET_OPEN_REAR_DOORS_ON_EXPLOSION },
        { "FORCE_SUBMARINE_SURFACE_MODE(_,_)", WREN_VEHICLE_FORCE_SUBMARINE_SURFACE_MODE },
        { "FORCE_SUBMARINE_NEURTAL_BUOYANCY(_,_)", WREN_VEHICLE_FORCE_SUBMARINE_NEURTAL_BUOYANCY },
        { "SET_SUBMARINE_CRUSH_DEPTHS(_,_,_,_,_)", WREN_VEHICLE_SET_SUBMARINE_CRUSH_DEPTHS },
        { "GET_SUBMARINE_IS_UNDER_DESIGN_DEPTH(_)", WREN_VEHICLE_GET_SUBMARINE_IS_UNDER_DESIGN_DEPTH },
        { "GET_SUBMARINE_NUMBER_OF_AIR_LEAKS(_)", WREN_VEHICLE_GET_SUBMARINE_NUMBER_OF_AIR_LEAKS },
        { "SET_BOAT_IGNORE_LAND_PROBES(_,_)", WREN_VEHICLE_SET_BOAT_IGNORE_LAND_PROBES },
        { "SET_BOAT_ANCHOR(_,_)", WREN_VEHICLE_SET_BOAT_ANCHOR },
        { "CAN_ANCHOR_BOAT_HERE(_)", WREN_VEHICLE_CAN_ANCHOR_BOAT_HERE },
        { "CAN_ANCHOR_BOAT_HERE_IGNORE_PLAYERS(_)", WREN_VEHICLE_CAN_ANCHOR_BOAT_HERE_IGNORE_PLAYERS },
        { "SET_BOAT_REMAINS_ANCHORED_WHILE_PLAYER_IS_DRIVER(_,_)", WREN_VEHICLE_SET_BOAT_REMAINS_ANCHORED_WHILE_PLAYER_IS_DRIVER },
        { "SET_FORCE_LOW_LOD_ANCHOR_MODE(_,_)", WREN_VEHICLE_SET_FORCE_LOW_LOD_ANCHOR_MODE },
        { "SET_BOAT_LOW_LOD_ANCHOR_DISTANCE(_,_)", WREN_VEHICLE_SET_BOAT_LOW_LOD_ANCHOR_DISTANCE },
        { "IS_BOAT_ANCHORED(_)", WREN_VEHICLE_IS_BOAT_ANCHORED },
        { "SET_BOAT_SINKS_WHEN_WRECKED(_,_)", WREN_VEHICLE_SET_BOAT_SINKS_WHEN_WRECKED },
        { "SET_BOAT_WRECKED(_)", WREN_VEHICLE_SET_BOAT_WRECKED },
        { "SET_VEHICLE_SIREN(_,_)", WREN_VEHICLE_SET_VEHICLE_SIREN },
        { "IS_VEHICLE_SIREN_ON(_)", WREN_VEHICLE_IS_VEHICLE_SIREN_ON },
        { "IS_VEHICLE_SIREN_AUDIO_ON(_)", WREN_VEHICLE_IS_VEHICLE_SIREN_AUDIO_ON },
        { "SET_VEHICLE_STRONG(_,_)", WREN_VEHICLE_SET_VEHICLE_STRONG },
        { "REMOVE_VEHICLE_STUCK_CHECK(_)", WREN_VEHICLE_REMOVE_VEHICLE_STUCK_CHECK },
        { "GET_VEHICLE_COLOURS(_)", WREN_VEHICLE_GET_VEHICLE_COLOURS },
        { "IS_VEHICLE_SEAT_FREE(_,_,_)", WREN_VEHICLE_IS_VEHICLE_SEAT_FREE },
        { "GET_PED_IN_VEHICLE_SEAT(_,_,_)", WREN_VEHICLE_GET_PED_IN_VEHICLE_SEAT },
        { "GET_LAST_PED_IN_VEHICLE_SEAT(_,_)", WREN_VEHICLE_GET_LAST_PED_IN_VEHICLE_SEAT },
        { "GET_VEHICLE_LIGHTS_STATE(_)", WREN_VEHICLE_GET_VEHICLE_LIGHTS_STATE },
        { "IS_VEHICLE_TYRE_BURST(_,_,_)", WREN_VEHICLE_IS_VEHICLE_TYRE_BURST },
        { "SET_VEHICLE_FORWARD_SPEED(_,_)", WREN_VEHICLE_SET_VEHICLE_FORWARD_SPEED },
        { "SET_VEHICLE_FORWARD_SPEED_XY(_,_)", WREN_VEHICLE_SET_VEHICLE_FORWARD_SPEED_XY },
        { "BRING_VEHICLE_TO_HALT(_,_,_,_)", WREN_VEHICLE_BRING_VEHICLE_TO_HALT },
        { "SET_VEHICLE_STEER_FOR_BUILDINGS(_,_)", WREN_VEHICLE_SET_VEHICLE_STEER_FOR_BUILDINGS },
        { "SET_VEHICLE_CAUSES_SWERVING(_,_)", WREN_VEHICLE_SET_VEHICLE_CAUSES_SWERVING },
        { "SET_IGNORE_PLANES_SMALL_PITCH_CHANGE(_,_)", WREN_VEHICLE_SET_IGNORE_PLANES_SMALL_PITCH_CHANGE },
        { "STOP_BRINGING_VEHICLE_TO_HALT(_)", WREN_VEHICLE_STOP_BRINGING_VEHICLE_TO_HALT },
        { "IS_VEHICLE_BEING_BROUGHT_TO_HALT(_)", WREN_VEHICLE_IS_VEHICLE_BEING_BROUGHT_TO_HALT },
        { "SET_FORKLIFT_FORK_HEIGHT(_,_)", WREN_VEHICLE_SET_FORKLIFT_FORK_HEIGHT },
        { "IS_ENTITY_ATTACHED_TO_HANDLER_FRAME(_,_)", WREN_VEHICLE_IS_ENTITY_ATTACHED_TO_HANDLER_FRAME },
        { "IS_ANY_ENTITY_ATTACHED_TO_HANDLER_FRAME(_)", WREN_VEHICLE_IS_ANY_ENTITY_ATTACHED_TO_HANDLER_FRAME },
        { "FIND_HANDLER_VEHICLE_CONTAINER_IS_ATTACHED_TO(_)", WREN_VEHICLE_FIND_HANDLER_VEHICLE_CONTAINER_IS_ATTACHED_TO },
        { "IS_HANDLER_FRAME_LINED_UP_WITH_CONTAINER(_,_)", WREN_VEHICLE_IS_HANDLER_FRAME_LINED_UP_WITH_CONTAINER },
        { "ATTACH_CONTAINER_TO_HANDLER_FRAME_WHEN_LINED_UP(_,_)", WREN_VEHICLE_ATTACH_CONTAINER_TO_HANDLER_FRAME_WHEN_LINED_UP },
        { "DETACH_CONTAINER_FROM_HANDLER_FRAME(_)", WREN_VEHICLE_DETACH_CONTAINER_FROM_HANDLER_FRAME },
        { "SET_VEHICLE_DISABLE_HEIGHT_MAP_AVOIDANCE(_,_)", WREN_VEHICLE_SET_VEHICLE_DISABLE_HEIGHT_MAP_AVOIDANCE },
        { "SET_BOAT_DISABLE_AVOIDANCE(_,_)", WREN_VEHICLE_SET_BOAT_DISABLE_AVOIDANCE },
        { "IS_HELI_LANDING_AREA_BLOCKED(_)", WREN_VEHICLE_IS_HELI_LANDING_AREA_BLOCKED },
        { "SET_SHORT_SLOWDOWN_FOR_LANDING(_)", WREN_VEHICLE_SET_SHORT_SLOWDOWN_FOR_LANDING },
        { "SET_HELI_TURBULENCE_SCALAR(_,_)", WREN_VEHICLE_SET_HELI_TURBULENCE_SCALAR },
        { "SET_CAR_BOOT_OPEN(_)", WREN_VEHICLE_SET_CAR_BOOT_OPEN },
        { "SET_VEHICLE_TYRE_BURST(_,_,_,_)", WREN_VEHICLE_SET_VEHICLE_TYRE_BURST },
        { "SET_VEHICLE_DOORS_SHUT(_,_)", WREN_VEHICLE_SET_VEHICLE_DOORS_SHUT },
        { "SET_VEHICLE_TYRES_CAN_BURST(_,_)", WREN_VEHICLE_SET_VEHICLE_TYRES_CAN_BURST },
        { "GET_VEHICLE_TYRES_CAN_BURST(_)", WREN_VEHICLE_GET_VEHICLE_TYRES_CAN_BURST },
        { "SET_VEHICLE_WHEELS_CAN_BREAK(_,_)", WREN_VEHICLE_SET_VEHICLE_WHEELS_CAN_BREAK },
        { "SET_VEHICLE_DOOR_OPEN(_,_,_,_)", WREN_VEHICLE_SET_VEHICLE_DOOR_OPEN },
        { "SET_VEHICLE_DOOR_AUTO_LOCK(_,_,_)", WREN_VEHICLE_SET_VEHICLE_DOOR_AUTO_LOCK },
        { "SET_FLEEING_VEHICLES_USE_SWITCHED_OFF_NODES(_)", WREN_VEHICLE_SET_FLEEING_VEHICLES_USE_SWITCHED_OFF_NODES },
        { "REMOVE_VEHICLE_WINDOW(_,_)", WREN_VEHICLE_REMOVE_VEHICLE_WINDOW },
        { "ROLL_DOWN_WINDOWS(_)", WREN_VEHICLE_ROLL_DOWN_WINDOWS },
        { "ROLL_DOWN_WINDOW(_,_)", WREN_VEHICLE_ROLL_DOWN_WINDOW },
        { "ROLL_UP_WINDOW(_,_)", WREN_VEHICLE_ROLL_UP_WINDOW },
        { "SMASH_VEHICLE_WINDOW(_,_)", WREN_VEHICLE_SMASH_VEHICLE_WINDOW },
        { "FIX_VEHICLE_WINDOW(_,_)", WREN_VEHICLE_FIX_VEHICLE_WINDOW },
        { "POP_OUT_VEHICLE_WINDSCREEN(_)", WREN_VEHICLE_POP_OUT_VEHICLE_WINDSCREEN },
        { "POP_OFF_VEHICLE_ROOF_WITH_IMPULSE(_,_,_,_)", WREN_VEHICLE_POP_OFF_VEHICLE_ROOF_WITH_IMPULSE },
        { "SET_VEHICLE_LIGHTS(_,_)", WREN_VEHICLE_SET_VEHICLE_LIGHTS },
        { "SET_VEHICLE_USE_PLAYER_LIGHT_SETTINGS(_,_)", WREN_VEHICLE_SET_VEHICLE_USE_PLAYER_LIGHT_SETTINGS },
        { "SET_VEHICLE_HEADLIGHT_SHADOWS(_,_)", WREN_VEHICLE_SET_VEHICLE_HEADLIGHT_SHADOWS },
        { "SET_VEHICLE_ALARM(_,_)", WREN_VEHICLE_SET_VEHICLE_ALARM },
        { "START_VEHICLE_ALARM(_)", WREN_VEHICLE_START_VEHICLE_ALARM },
        { "IS_VEHICLE_ALARM_ACTIVATED(_)", WREN_VEHICLE_IS_VEHICLE_ALARM_ACTIVATED },
        { "SET_VEHICLE_INTERIORLIGHT(_,_)", WREN_VEHICLE_SET_VEHICLE_INTERIORLIGHT },
        { "SET_VEHICLE_FORCE_INTERIORLIGHT(_,_)", WREN_VEHICLE_SET_VEHICLE_FORCE_INTERIORLIGHT },
        { "SET_VEHICLE_LIGHT_MULTIPLIER(_,_)", WREN_VEHICLE_SET_VEHICLE_LIGHT_MULTIPLIER },
        { "ATTACH_VEHICLE_TO_TRAILER(_,_,_)", WREN_VEHICLE_ATTACH_VEHICLE_TO_TRAILER },
        { "ATTACH_VEHICLE_ON_TO_TRAILER(_,_,_,_,_,_,_,_,_,_,_,_)", WREN_VEHICLE_ATTACH_VEHICLE_ON_TO_TRAILER },
        { "STABILISE_ENTITY_ATTACHED_TO_HELI(_,_,_)", WREN_VEHICLE_STABILISE_ENTITY_ATTACHED_TO_HELI },
        { "DETACH_VEHICLE_FROM_TRAILER(_)", WREN_VEHICLE_DETACH_VEHICLE_FROM_TRAILER },
        { "IS_VEHICLE_ATTACHED_TO_TRAILER(_)", WREN_VEHICLE_IS_VEHICLE_ATTACHED_TO_TRAILER },
        { "SET_TRAILER_INVERSE_MASS_SCALE(_,_)", WREN_VEHICLE_SET_TRAILER_INVERSE_MASS_SCALE },
        { "SET_TRAILER_LEGS_RAISED(_)", WREN_VEHICLE_SET_TRAILER_LEGS_RAISED },
        { "SET_TRAILER_LEGS_LOWERED(_)", WREN_VEHICLE_SET_TRAILER_LEGS_LOWERED },
        { "SET_VEHICLE_TYRE_FIXED(_,_)", WREN_VEHICLE_SET_VEHICLE_TYRE_FIXED },
        { "SET_VEHICLE_NUMBER_PLATE_TEXT(_,_)", WREN_VEHICLE_SET_VEHICLE_NUMBER_PLATE_TEXT },
        { "GET_VEHICLE_NUMBER_PLATE_TEXT(_)", WREN_VEHICLE_GET_VEHICLE_NUMBER_PLATE_TEXT },
        { "GET_NUMBER_OF_VEHICLE_NUMBER_PLATES()", WREN_VEHICLE_GET_NUMBER_OF_VEHICLE_NUMBER_PLATES },
        { "SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(_,_)", WREN_VEHICLE_SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX },
        { "GET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(_)", WREN_VEHICLE_GET_VEHICLE_NUMBER_PLATE_TEXT_INDEX },
        { "SET_RANDOM_TRAINS(_)", WREN_VEHICLE_SET_RANDOM_TRAINS },
        { "CREATE_MISSION_TRAIN(_,_,_,_,_,_,_)", WREN_VEHICLE_CREATE_MISSION_TRAIN },
        { "SWITCH_TRAIN_TRACK(_,_)", WREN_VEHICLE_SWITCH_TRAIN_TRACK },
        { "SET_TRAIN_TRACK_SPAWN_FREQUENCY(_,_)", WREN_VEHICLE_SET_TRAIN_TRACK_SPAWN_FREQUENCY },
        { "ALLOW_TRAIN_TO_BE_REMOVED_BY_POPULATION(_)", WREN_VEHICLE_ALLOW_TRAIN_TO_BE_REMOVED_BY_POPULATION },
        { "DELETE_ALL_TRAINS()", WREN_VEHICLE_DELETE_ALL_TRAINS },
        { "SET_TRAIN_SPEED(_,_)", WREN_VEHICLE_SET_TRAIN_SPEED },
        { "SET_TRAIN_CRUISE_SPEED(_,_)", WREN_VEHICLE_SET_TRAIN_CRUISE_SPEED },
        { "SET_RANDOM_BOATS(_)", WREN_VEHICLE_SET_RANDOM_BOATS },
        { "SET_RANDOM_BOATS_MP(_)", WREN_VEHICLE_SET_RANDOM_BOATS_MP },
        { "SET_GARBAGE_TRUCKS(_)", WREN_VEHICLE_SET_GARBAGE_TRUCKS },
        { "DOES_VEHICLE_HAVE_STUCK_VEHICLE_CHECK(_)", WREN_VEHICLE_DOES_VEHICLE_HAVE_STUCK_VEHICLE_CHECK },
        { "GET_VEHICLE_RECORDING_ID(_,_)", WREN_VEHICLE_GET_VEHICLE_RECORDING_ID },
        { "REQUEST_VEHICLE_RECORDING(_,_)", WREN_VEHICLE_REQUEST_VEHICLE_RECORDING },
        { "HAS_VEHICLE_RECORDING_BEEN_LOADED(_,_)", WREN_VEHICLE_HAS_VEHICLE_RECORDING_BEEN_LOADED },
        { "REMOVE_VEHICLE_RECORDING(_,_)", WREN_VEHICLE_REMOVE_VEHICLE_RECORDING },
        { "GET_POSITION_OF_VEHICLE_RECORDING_ID_AT_TIME(_,_)", WREN_VEHICLE_GET_POSITION_OF_VEHICLE_RECORDING_ID_AT_TIME },
        { "GET_POSITION_OF_VEHICLE_RECORDING_AT_TIME(_,_,_)", WREN_VEHICLE_GET_POSITION_OF_VEHICLE_RECORDING_AT_TIME },
        { "GET_ROTATION_OF_VEHICLE_RECORDING_ID_AT_TIME(_,_)", WREN_VEHICLE_GET_ROTATION_OF_VEHICLE_RECORDING_ID_AT_TIME },
        { "GET_ROTATION_OF_VEHICLE_RECORDING_AT_TIME(_,_,_)", WREN_VEHICLE_GET_ROTATION_OF_VEHICLE_RECORDING_AT_TIME },
        { "GET_TOTAL_DURATION_OF_VEHICLE_RECORDING_ID(_)", WREN_VEHICLE_GET_TOTAL_DURATION_OF_VEHICLE_RECORDING_ID },
        { "GET_TOTAL_DURATION_OF_VEHICLE_RECORDING(_,_)", WREN_VEHICLE_GET_TOTAL_DURATION_OF_VEHICLE_RECORDING },
        { "GET_POSITION_IN_RECORDING(_)", WREN_VEHICLE_GET_POSITION_IN_RECORDING },
        { "GET_TIME_POSITION_IN_RECORDING(_)", WREN_VEHICLE_GET_TIME_POSITION_IN_RECORDING },
        { "START_PLAYBACK_RECORDED_VEHICLE(_,_,_,_)", WREN_VEHICLE_START_PLAYBACK_RECORDED_VEHICLE },
        { "START_PLAYBACK_RECORDED_VEHICLE_WITH_FLAGS(_,_,_,_,_,_)", WREN_VEHICLE_START_PLAYBACK_RECORDED_VEHICLE_WITH_FLAGS },
        { "FORCE_PLAYBACK_RECORDED_VEHICLE_UPDATE(_,_)", WREN_VEHICLE_FORCE_PLAYBACK_RECORDED_VEHICLE_UPDATE },
        { "STOP_PLAYBACK_RECORDED_VEHICLE(_)", WREN_VEHICLE_STOP_PLAYBACK_RECORDED_VEHICLE },
        { "PAUSE_PLAYBACK_RECORDED_VEHICLE(_)", WREN_VEHICLE_PAUSE_PLAYBACK_RECORDED_VEHICLE },
        { "UNPAUSE_PLAYBACK_RECORDED_VEHICLE(_)", WREN_VEHICLE_UNPAUSE_PLAYBACK_RECORDED_VEHICLE },
        { "IS_PLAYBACK_GOING_ON_FOR_VEHICLE(_)", WREN_VEHICLE_IS_PLAYBACK_GOING_ON_FOR_VEHICLE },
        { "IS_PLAYBACK_USING_AI_GOING_ON_FOR_VEHICLE(_)", WREN_VEHICLE_IS_PLAYBACK_USING_AI_GOING_ON_FOR_VEHICLE },
        { "GET_CURRENT_PLAYBACK_FOR_VEHICLE(_)", WREN_VEHICLE_GET_CURRENT_PLAYBACK_FOR_VEHICLE },
        { "SKIP_TO_END_AND_STOP_PLAYBACK_RECORDED_VEHICLE(_)", WREN_VEHICLE_SKIP_TO_END_AND_STOP_PLAYBACK_RECORDED_VEHICLE },
        { "SET_PLAYBACK_SPEED(_,_)", WREN_VEHICLE_SET_PLAYBACK_SPEED },
        { "START_PLAYBACK_RECORDED_VEHICLE_USING_AI(_,_,_,_,_)", WREN_VEHICLE_START_PLAYBACK_RECORDED_VEHICLE_USING_AI },
        { "SKIP_TIME_IN_PLAYBACK_RECORDED_VEHICLE(_,_)", WREN_VEHICLE_SKIP_TIME_IN_PLAYBACK_RECORDED_VEHICLE },
        { "SET_PLAYBACK_TO_USE_AI(_,_)", WREN_VEHICLE_SET_PLAYBACK_TO_USE_AI },
        { "SET_PLAYBACK_TO_USE_AI_TRY_TO_REVERT_BACK_LATER(_,_,_,_)", WREN_VEHICLE_SET_PLAYBACK_TO_USE_AI_TRY_TO_REVERT_BACK_LATER },
        { "SET_ADDITIONAL_ROTATION_FOR_RECORDED_VEHICLE_PLAYBACK(_,_,_,_,_)", WREN_VEHICLE_SET_ADDITIONAL_ROTATION_FOR_RECORDED_VEHICLE_PLAYBACK },
        { "SET_POSITION_OFFSET_FOR_RECORDED_VEHICLE_PLAYBACK(_,_,_,_)", WREN_VEHICLE_SET_POSITION_OFFSET_FOR_RECORDED_VEHICLE_PLAYBACK },
        { "SET_GLOBAL_POSITION_OFFSET_FOR_RECORDED_VEHICLE_PLAYBACK(_,_,_,_)", WREN_VEHICLE_SET_GLOBAL_POSITION_OFFSET_FOR_RECORDED_VEHICLE_PLAYBACK },
        { "SET_SHOULD_LERP_FROM_AI_TO_FULL_RECORDING(_,_)", WREN_VEHICLE_SET_SHOULD_LERP_FROM_AI_TO_FULL_RECORDING },
        { "EXPLODE_VEHICLE_IN_CUTSCENE(_,_)", WREN_VEHICLE_EXPLODE_VEHICLE_IN_CUTSCENE },
        { "ADD_VEHICLE_STUCK_CHECK_WITH_WARP(_,_,_,_,_,_,_)", WREN_VEHICLE_ADD_VEHICLE_STUCK_CHECK_WITH_WARP },
        { "SET_VEHICLE_MODEL_IS_SUPPRESSED(_,_)", WREN_VEHICLE_SET_VEHICLE_MODEL_IS_SUPPRESSED },
        { "GET_RANDOM_VEHICLE_IN_SPHERE(_,_,_,_,_,_)", WREN_VEHICLE_GET_RANDOM_VEHICLE_IN_SPHERE },
        { "GET_RANDOM_VEHICLE_FRONT_BUMPER_IN_SPHERE(_,_,_,_,_,_,_)", WREN_VEHICLE_GET_RANDOM_VEHICLE_FRONT_BUMPER_IN_SPHERE },
        { "GET_RANDOM_VEHICLE_BACK_BUMPER_IN_SPHERE(_,_,_,_,_,_,_)", WREN_VEHICLE_GET_RANDOM_VEHICLE_BACK_BUMPER_IN_SPHERE },
        { "GET_CLOSEST_VEHICLE(_,_,_,_,_,_)", WREN_VEHICLE_GET_CLOSEST_VEHICLE },
        { "GET_TRAIN_CARRIAGE(_,_)", WREN_VEHICLE_GET_TRAIN_CARRIAGE },
        { "IS_MISSION_TRAIN(_)", WREN_VEHICLE_IS_MISSION_TRAIN },
        { "DELETE_MISSION_TRAIN()", WREN_VEHICLE_DELETE_MISSION_TRAIN },
        { "SET_MISSION_TRAIN_AS_NO_LONGER_NEEDED(_)", WREN_VEHICLE_SET_MISSION_TRAIN_AS_NO_LONGER_NEEDED },
        { "SET_MISSION_TRAIN_COORDS(_,_,_,_)", WREN_VEHICLE_SET_MISSION_TRAIN_COORDS },
        { "IS_THIS_MODEL_A_BOAT(_)", WREN_VEHICLE_IS_THIS_MODEL_A_BOAT },
        { "IS_THIS_MODEL_A_JETSKI(_)", WREN_VEHICLE_IS_THIS_MODEL_A_JETSKI },
        { "IS_THIS_MODEL_A_PLANE(_)", WREN_VEHICLE_IS_THIS_MODEL_A_PLANE },
        { "IS_THIS_MODEL_A_HELI(_)", WREN_VEHICLE_IS_THIS_MODEL_A_HELI },
        { "IS_THIS_MODEL_A_CAR(_)", WREN_VEHICLE_IS_THIS_MODEL_A_CAR },
        { "IS_THIS_MODEL_A_TRAIN(_)", WREN_VEHICLE_IS_THIS_MODEL_A_TRAIN },
        { "IS_THIS_MODEL_A_BIKE(_)", WREN_VEHICLE_IS_THIS_MODEL_A_BIKE },
        { "IS_THIS_MODEL_A_BICYCLE(_)", WREN_VEHICLE_IS_THIS_MODEL_A_BICYCLE },
        { "IS_THIS_MODEL_A_QUADBIKE(_)", WREN_VEHICLE_IS_THIS_MODEL_A_QUADBIKE },
        { "IS_THIS_MODEL_AN_AMPHIBIOUS_CAR(_)", WREN_VEHICLE_IS_THIS_MODEL_AN_AMPHIBIOUS_CAR },
        { "IS_THIS_MODEL_AN_AMPHIBIOUS_QUADBIKE(_)", WREN_VEHICLE_IS_THIS_MODEL_AN_AMPHIBIOUS_QUADBIKE },
        { "SET_HELI_BLADES_FULL_SPEED(_)", WREN_VEHICLE_SET_HELI_BLADES_FULL_SPEED },
        { "SET_HELI_BLADES_SPEED(_,_)", WREN_VEHICLE_SET_HELI_BLADES_SPEED },
        { "FORCE_SUB_THROTTLE_FOR_TIME(_,_,_)", WREN_VEHICLE_FORCE_SUB_THROTTLE_FOR_TIME },
        { "SET_VEHICLE_CAN_BE_TARGETTED(_,_)", WREN_VEHICLE_SET_VEHICLE_CAN_BE_TARGETTED },
        { "SET_DONT_ALLOW_PLAYER_TO_ENTER_VEHICLE_IF_LOCKED_FOR_PLAYER(_,_)", WREN_VEHICLE_SET_DONT_ALLOW_PLAYER_TO_ENTER_VEHICLE_IF_LOCKED_FOR_PLAYER },
        { "SET_VEHICLE_CAN_BE_VISIBLY_DAMAGED(_,_)", WREN_VEHICLE_SET_VEHICLE_CAN_BE_VISIBLY_DAMAGED },
        { "SET_VEHICLE_HAS_UNBREAKABLE_LIGHTS(_,_)", WREN_VEHICLE_SET_VEHICLE_HAS_UNBREAKABLE_LIGHTS },
        { "SET_VEHICLE_RESPECTS_LOCKS_WHEN_HAS_DRIVER(_,_)", WREN_VEHICLE_SET_VEHICLE_RESPECTS_LOCKS_WHEN_HAS_DRIVER },
        { "SET_VEHICLE_CAN_EJECT_PASSENGERS_IF_LOCKED(_,_)", WREN_VEHICLE_SET_VEHICLE_CAN_EJECT_PASSENGERS_IF_LOCKED },
        { "GET_VEHICLE_DIRT_LEVEL(_)", WREN_VEHICLE_GET_VEHICLE_DIRT_LEVEL },
        { "SET_VEHICLE_DIRT_LEVEL(_,_)", WREN_VEHICLE_SET_VEHICLE_DIRT_LEVEL },
        { "GET_DOES_VEHICLE_HAVE_DAMAGE_DECALS(_)", WREN_VEHICLE_GET_DOES_VEHICLE_HAVE_DAMAGE_DECALS },
        { "IS_VEHICLE_DOOR_FULLY_OPEN(_,_)", WREN_VEHICLE_IS_VEHICLE_DOOR_FULLY_OPEN },
        { "SET_VEHICLE_ENGINE_ON(_,_,_,_)", WREN_VEHICLE_SET_VEHICLE_ENGINE_ON },
        { "SET_VEHICLE_UNDRIVEABLE(_,_)", WREN_VEHICLE_SET_VEHICLE_UNDRIVEABLE },
        { "SET_VEHICLE_PROVIDES_COVER(_,_)", WREN_VEHICLE_SET_VEHICLE_PROVIDES_COVER },
        { "SET_VEHICLE_DOOR_CONTROL(_,_,_,_)", WREN_VEHICLE_SET_VEHICLE_DOOR_CONTROL },
        { "SET_VEHICLE_DOOR_LATCHED(_,_,_,_,_)", WREN_VEHICLE_SET_VEHICLE_DOOR_LATCHED },
        { "GET_VEHICLE_DOOR_ANGLE_RATIO(_,_)", WREN_VEHICLE_GET_VEHICLE_DOOR_ANGLE_RATIO },
        { "GET_PED_USING_VEHICLE_DOOR(_,_)", WREN_VEHICLE_GET_PED_USING_VEHICLE_DOOR },
        { "SET_VEHICLE_DOOR_SHUT(_,_,_)", WREN_VEHICLE_SET_VEHICLE_DOOR_SHUT },
        { "SET_VEHICLE_DOOR_BROKEN(_,_,_)", WREN_VEHICLE_SET_VEHICLE_DOOR_BROKEN },
        { "SET_VEHICLE_CAN_BREAK(_,_)", WREN_VEHICLE_SET_VEHICLE_CAN_BREAK },
        { "DOES_VEHICLE_HAVE_ROOF(_)", WREN_VEHICLE_DOES_VEHICLE_HAVE_ROOF },
        { "SET_VEHICLE_REMOVE_AGGRESSIVE_CARJACK_MISSION(_)", WREN_VEHICLE_SET_VEHICLE_REMOVE_AGGRESSIVE_CARJACK_MISSION },
        { "SET_VEHICLE_AVOID_PLAYER_VEHICLE_RIOT_VAN_MISSION(_)", WREN_VEHICLE_SET_VEHICLE_AVOID_PLAYER_VEHICLE_RIOT_VAN_MISSION },
        { "SET_CARJACK_MISSION_REMOVAL_PARAMETERS(_,_)", WREN_VEHICLE_SET_CARJACK_MISSION_REMOVAL_PARAMETERS },
        { "IS_BIG_VEHICLE(_)", WREN_VEHICLE_IS_BIG_VEHICLE },
        { "GET_NUMBER_OF_VEHICLE_COLOURS(_)", WREN_VEHICLE_GET_NUMBER_OF_VEHICLE_COLOURS },
        { "SET_VEHICLE_COLOUR_COMBINATION(_,_)", WREN_VEHICLE_SET_VEHICLE_COLOUR_COMBINATION },
        { "GET_VEHICLE_COLOUR_COMBINATION(_)", WREN_VEHICLE_GET_VEHICLE_COLOUR_COMBINATION },
        { "SET_VEHICLE_XENON_LIGHT_COLOR_INDEX(_,_)", WREN_VEHICLE_SET_VEHICLE_XENON_LIGHT_COLOR_INDEX },
        { "GET_VEHICLE_XENON_LIGHT_COLOR_INDEX(_)", WREN_VEHICLE_GET_VEHICLE_XENON_LIGHT_COLOR_INDEX },
        { "SET_VEHICLE_IS_CONSIDERED_BY_PLAYER(_,_)", WREN_VEHICLE_SET_VEHICLE_IS_CONSIDERED_BY_PLAYER },
        { "SET_VEHICLE_WILL_FORCE_OTHER_VEHICLES_TO_STOP(_,_)", WREN_VEHICLE_SET_VEHICLE_WILL_FORCE_OTHER_VEHICLES_TO_STOP },
        { "SET_VEHICLE_ACT_AS_IF_HAS_SIREN_ON(_,_)", WREN_VEHICLE_SET_VEHICLE_ACT_AS_IF_HAS_SIREN_ON },
        { "SET_VEHICLE_USE_MORE_RESTRICTIVE_SPAWN_CHECKS(_,_)", WREN_VEHICLE_SET_VEHICLE_USE_MORE_RESTRICTIVE_SPAWN_CHECKS },
        { "SET_VEHICLE_MAY_BE_USED_BY_GOTO_POINT_ANY_MEANS(_,_)", WREN_VEHICLE_SET_VEHICLE_MAY_BE_USED_BY_GOTO_POINT_ANY_MEANS },
        { "GET_RANDOM_VEHICLE_MODEL_IN_MEMORY(_)", WREN_VEHICLE_GET_RANDOM_VEHICLE_MODEL_IN_MEMORY },
        { "GET_VEHICLE_DOOR_LOCK_STATUS(_)", WREN_VEHICLE_GET_VEHICLE_DOOR_LOCK_STATUS },
        { "GET_VEHICLE_INDIVIDUAL_DOOR_LOCK_STATUS(_,_)", WREN_VEHICLE_GET_VEHICLE_INDIVIDUAL_DOOR_LOCK_STATUS },
        { "IS_VEHICLE_DOOR_DAMAGED(_,_)", WREN_VEHICLE_IS_VEHICLE_DOOR_DAMAGED },
        { "SET_DOOR_ALLOWED_TO_BE_BROKEN_OFF(_,_,_)", WREN_VEHICLE_SET_DOOR_ALLOWED_TO_BE_BROKEN_OFF },
        { "IS_VEHICLE_BUMPER_BOUNCING(_,_)", WREN_VEHICLE_IS_VEHICLE_BUMPER_BOUNCING },
        { "IS_VEHICLE_BUMPER_BROKEN_OFF(_,_)", WREN_VEHICLE_IS_VEHICLE_BUMPER_BROKEN_OFF },
        { "IS_COP_VEHICLE_IN_AREA_3D(_,_,_,_,_,_)", WREN_VEHICLE_IS_COP_VEHICLE_IN_AREA_3D },
        { "IS_VEHICLE_ON_ALL_WHEELS(_)", WREN_VEHICLE_IS_VEHICLE_ON_ALL_WHEELS },
        { "GET_VEHICLE_MODEL_VALUE(_)", WREN_VEHICLE_GET_VEHICLE_MODEL_VALUE },
        { "GET_VEHICLE_LAYOUT_HASH(_)", WREN_VEHICLE_GET_VEHICLE_LAYOUT_HASH },
        { "GET_IN_VEHICLE_CLIPSET_HASH_FOR_SEAT(_,_)", WREN_VEHICLE_GET_IN_VEHICLE_CLIPSET_HASH_FOR_SEAT },
        { "SET_RENDER_TRAIN_AS_DERAILED(_,_)", WREN_VEHICLE_SET_RENDER_TRAIN_AS_DERAILED },
        { "SET_VEHICLE_EXTRA_COLOURS(_,_,_)", WREN_VEHICLE_SET_VEHICLE_EXTRA_COLOURS },
        { "GET_VEHICLE_EXTRA_COLOURS(_)", WREN_VEHICLE_GET_VEHICLE_EXTRA_COLOURS },
        { "SET_VEHICLE_EXTRA_COLOUR_5(_,_)", WREN_VEHICLE_SET_VEHICLE_EXTRA_COLOUR_5 },
        { "GET_VEHICLE_EXTRA_COLOUR_5(_)", WREN_VEHICLE_GET_VEHICLE_EXTRA_COLOUR_5 },
        { "SET_VEHICLE_EXTRA_COLOUR_6(_,_)", WREN_VEHICLE_SET_VEHICLE_EXTRA_COLOUR_6 },
        { "GET_VEHICLE_EXTRA_COLOUR_6(_)", WREN_VEHICLE_GET_VEHICLE_EXTRA_COLOUR_6 },
        { "STOP_ALL_GARAGE_ACTIVITY()", WREN_VEHICLE_STOP_ALL_GARAGE_ACTIVITY },
        { "SET_VEHICLE_FIXED(_)", WREN_VEHICLE_SET_VEHICLE_FIXED },
        { "SET_VEHICLE_DEFORMATION_FIXED(_)", WREN_VEHICLE_SET_VEHICLE_DEFORMATION_FIXED },
        { "SET_VEHICLE_CAN_ENGINE_MISSFIRE(_,_)", WREN_VEHICLE_SET_VEHICLE_CAN_ENGINE_MISSFIRE },
        { "SET_VEHICLE_CAN_LEAK_OIL(_,_)", WREN_VEHICLE_SET_VEHICLE_CAN_LEAK_OIL },
        { "SET_VEHICLE_CAN_LEAK_PETROL(_,_)", WREN_VEHICLE_SET_VEHICLE_CAN_LEAK_PETROL },
        { "SET_DISABLE_VEHICLE_PETROL_TANK_FIRES(_,_)", WREN_VEHICLE_SET_DISABLE_VEHICLE_PETROL_TANK_FIRES },
        { "SET_DISABLE_VEHICLE_PETROL_TANK_DAMAGE(_,_)", WREN_VEHICLE_SET_DISABLE_VEHICLE_PETROL_TANK_DAMAGE },
        { "SET_DISABLE_VEHICLE_ENGINE_FIRES(_,_)", WREN_VEHICLE_SET_DISABLE_VEHICLE_ENGINE_FIRES },
        { "SET_VEHICLE_LIMIT_SPEED_WHEN_PLAYER_INACTIVE(_,_)", WREN_VEHICLE_SET_VEHICLE_LIMIT_SPEED_WHEN_PLAYER_INACTIVE },
        { "SET_VEHICLE_STOP_INSTANTLY_WHEN_PLAYER_INACTIVE(_,_)", WREN_VEHICLE_SET_VEHICLE_STOP_INSTANTLY_WHEN_PLAYER_INACTIVE },
        { "SET_DISABLE_PRETEND_OCCUPANTS(_,_)", WREN_VEHICLE_SET_DISABLE_PRETEND_OCCUPANTS },
        { "REMOVE_VEHICLES_FROM_GENERATORS_IN_AREA(_,_,_,_,_,_,_)", WREN_VEHICLE_REMOVE_VEHICLES_FROM_GENERATORS_IN_AREA },
        { "SET_VEHICLE_STEER_BIAS(_,_)", WREN_VEHICLE_SET_VEHICLE_STEER_BIAS },
        { "IS_VEHICLE_EXTRA_TURNED_ON(_,_)", WREN_VEHICLE_IS_VEHICLE_EXTRA_TURNED_ON },
        { "SET_VEHICLE_EXTRA(_,_,_)", WREN_VEHICLE_SET_VEHICLE_EXTRA },
        { "DOES_EXTRA_EXIST(_,_)", WREN_VEHICLE_DOES_EXTRA_EXIST },
        { "IS_EXTRA_BROKEN_OFF(_,_)", WREN_VEHICLE_IS_EXTRA_BROKEN_OFF },
        { "SET_CONVERTIBLE_ROOF(_,_)", WREN_VEHICLE_SET_CONVERTIBLE_ROOF },
        { "LOWER_CONVERTIBLE_ROOF(_,_)", WREN_VEHICLE_LOWER_CONVERTIBLE_ROOF },
        { "RAISE_CONVERTIBLE_ROOF(_,_)", WREN_VEHICLE_RAISE_CONVERTIBLE_ROOF },
        { "GET_CONVERTIBLE_ROOF_STATE(_)", WREN_VEHICLE_GET_CONVERTIBLE_ROOF_STATE },
        { "IS_VEHICLE_A_CONVERTIBLE(_,_)", WREN_VEHICLE_IS_VEHICLE_A_CONVERTIBLE },
        { "TRANSFORM_TO_SUBMARINE(_,_)", WREN_VEHICLE_TRANSFORM_TO_SUBMARINE },
        { "TRANSFORM_TO_CAR(_,_)", WREN_VEHICLE_TRANSFORM_TO_CAR },
        { "IS_VEHICLE_IN_SUBMARINE_MODE(_)", WREN_VEHICLE_IS_VEHICLE_IN_SUBMARINE_MODE },
        { "IS_VEHICLE_STOPPED_AT_TRAFFIC_LIGHTS(_)", WREN_VEHICLE_IS_VEHICLE_STOPPED_AT_TRAFFIC_LIGHTS },
        { "SET_VEHICLE_DAMAGE(_,_,_,_,_,_,_)", WREN_VEHICLE_SET_VEHICLE_DAMAGE },
        { "SET_VEHICLE_OCCUPANTS_TAKE_EXPLOSIVE_DAMAGE(_,_)", WREN_VEHICLE_SET_VEHICLE_OCCUPANTS_TAKE_EXPLOSIVE_DAMAGE },
        { "GET_VEHICLE_ENGINE_HEALTH(_)", WREN_VEHICLE_GET_VEHICLE_ENGINE_HEALTH },
        { "SET_VEHICLE_ENGINE_HEALTH(_,_)", WREN_VEHICLE_SET_VEHICLE_ENGINE_HEALTH },
        { "SET_PLANE_ENGINE_HEALTH(_,_)", WREN_VEHICLE_SET_PLANE_ENGINE_HEALTH },
        { "GET_VEHICLE_PETROL_TANK_HEALTH(_)", WREN_VEHICLE_GET_VEHICLE_PETROL_TANK_HEALTH },
        { "SET_VEHICLE_PETROL_TANK_HEALTH(_,_)", WREN_VEHICLE_SET_VEHICLE_PETROL_TANK_HEALTH },
        { "IS_VEHICLE_STUCK_TIMER_UP(_,_,_)", WREN_VEHICLE_IS_VEHICLE_STUCK_TIMER_UP },
        { "RESET_VEHICLE_STUCK_TIMER(_,_)", WREN_VEHICLE_RESET_VEHICLE_STUCK_TIMER },
        { "IS_VEHICLE_DRIVEABLE(_,_)", WREN_VEHICLE_IS_VEHICLE_DRIVEABLE },
        { "SET_VEHICLE_HAS_BEEN_OWNED_BY_PLAYER(_,_)", WREN_VEHICLE_SET_VEHICLE_HAS_BEEN_OWNED_BY_PLAYER },
        { "SET_VEHICLE_NEEDS_TO_BE_HOTWIRED(_,_)", WREN_VEHICLE_SET_VEHICLE_NEEDS_TO_BE_HOTWIRED },
        { "SET_VEHICLE_BLIP_THROTTLE_RANDOMLY(_,_)", WREN_VEHICLE_SET_VEHICLE_BLIP_THROTTLE_RANDOMLY },
        { "SET_POLICE_FOCUS_WILL_TRACK_VEHICLE(_,_)", WREN_VEHICLE_SET_POLICE_FOCUS_WILL_TRACK_VEHICLE },
        { "START_VEHICLE_HORN(_,_,_,_)", WREN_VEHICLE_START_VEHICLE_HORN },
        { "SET_VEHICLE_IN_CAR_MOD_SHOP(_,_)", WREN_VEHICLE_SET_VEHICLE_IN_CAR_MOD_SHOP },
        { "SET_VEHICLE_HAS_STRONG_AXLES(_,_)", WREN_VEHICLE_SET_VEHICLE_HAS_STRONG_AXLES },
        { "GET_DISPLAY_NAME_FROM_VEHICLE_MODEL(_)", WREN_VEHICLE_GET_DISPLAY_NAME_FROM_VEHICLE_MODEL },
        { "GET_MAKE_NAME_FROM_VEHICLE_MODEL(_)", WREN_VEHICLE_GET_MAKE_NAME_FROM_VEHICLE_MODEL },
        { "GET_VEHICLE_DEFORMATION_AT_POS(_,_,_,_)", WREN_VEHICLE_GET_VEHICLE_DEFORMATION_AT_POS },
        { "SET_VEHICLE_LIVERY(_,_)", WREN_VEHICLE_SET_VEHICLE_LIVERY },
        { "GET_VEHICLE_LIVERY(_)", WREN_VEHICLE_GET_VEHICLE_LIVERY },
        { "GET_VEHICLE_LIVERY_COUNT(_)", WREN_VEHICLE_GET_VEHICLE_LIVERY_COUNT },
        { "SET_VEHICLE_LIVERY2(_,_)", WREN_VEHICLE_SET_VEHICLE_LIVERY2 },
        { "GET_VEHICLE_LIVERY2(_)", WREN_VEHICLE_GET_VEHICLE_LIVERY2 },
        { "GET_VEHICLE_LIVERY2_COUNT(_)", WREN_VEHICLE_GET_VEHICLE_LIVERY2_COUNT },
        { "IS_VEHICLE_WINDOW_INTACT(_,_)", WREN_VEHICLE_IS_VEHICLE_WINDOW_INTACT },
        { "ARE_ALL_VEHICLE_WINDOWS_INTACT(_)", WREN_VEHICLE_ARE_ALL_VEHICLE_WINDOWS_INTACT },
        { "ARE_ANY_VEHICLE_SEATS_FREE(_)", WREN_VEHICLE_ARE_ANY_VEHICLE_SEATS_FREE },
        { "RESET_VEHICLE_WHEELS(_,_)", WREN_VEHICLE_RESET_VEHICLE_WHEELS },
        { "IS_HELI_PART_BROKEN(_,_,_,_)", WREN_VEHICLE_IS_HELI_PART_BROKEN },
        { "GET_HELI_MAIN_ROTOR_HEALTH(_)", WREN_VEHICLE_GET_HELI_MAIN_ROTOR_HEALTH },
        { "GET_HELI_TAIL_ROTOR_HEALTH(_)", WREN_VEHICLE_GET_HELI_TAIL_ROTOR_HEALTH },
        { "GET_HELI_TAIL_BOOM_HEALTH(_)", WREN_VEHICLE_GET_HELI_TAIL_BOOM_HEALTH },
        { "SET_HELI_MAIN_ROTOR_HEALTH(_,_)", WREN_VEHICLE_SET_HELI_MAIN_ROTOR_HEALTH },
        { "SET_HELI_TAIL_ROTOR_HEALTH(_,_)", WREN_VEHICLE_SET_HELI_TAIL_ROTOR_HEALTH },
        { "SET_HELI_TAIL_BOOM_CAN_BREAK_OFF(_,_)", WREN_VEHICLE_SET_HELI_TAIL_BOOM_CAN_BREAK_OFF },
        { "SET_VEHICLE_NAME_DEBUG(_,_)", WREN_VEHICLE_SET_VEHICLE_NAME_DEBUG },
        { "SET_VEHICLE_EXPLODES_ON_HIGH_EXPLOSION_DAMAGE(_,_)", WREN_VEHICLE_SET_VEHICLE_EXPLODES_ON_HIGH_EXPLOSION_DAMAGE },
        { "SET_VEHICLE_EXPLODES_ON_EXPLOSION_DAMAGE_AT_ZERO_BODY_HEALTH(_,_)", WREN_VEHICLE_SET_VEHICLE_EXPLODES_ON_EXPLOSION_DAMAGE_AT_ZERO_BODY_HEALTH },
        { "SET_ALLOW_VEHICLE_EXPLODES_ON_CONTACT(_,_)", WREN_VEHICLE_SET_ALLOW_VEHICLE_EXPLODES_ON_CONTACT },
        { "SET_VEHICLE_DISABLE_TOWING(_,_)", WREN_VEHICLE_SET_VEHICLE_DISABLE_TOWING },
        { "GET_VEHICLE_HAS_LANDING_GEAR(_)", WREN_VEHICLE_GET_VEHICLE_HAS_LANDING_GEAR },
        { "CONTROL_LANDING_GEAR(_,_)", WREN_VEHICLE_CONTROL_LANDING_GEAR },
        { "GET_LANDING_GEAR_STATE(_)", WREN_VEHICLE_GET_LANDING_GEAR_STATE },
        { "IS_ANY_VEHICLE_NEAR_POINT(_,_,_,_)", WREN_VEHICLE_IS_ANY_VEHICLE_NEAR_POINT },
        { "REQUEST_VEHICLE_HIGH_DETAIL_MODEL(_)", WREN_VEHICLE_REQUEST_VEHICLE_HIGH_DETAIL_MODEL },
        { "REMOVE_VEHICLE_HIGH_DETAIL_MODEL(_)", WREN_VEHICLE_REMOVE_VEHICLE_HIGH_DETAIL_MODEL },
        { "IS_VEHICLE_HIGH_DETAIL(_)", WREN_VEHICLE_IS_VEHICLE_HIGH_DETAIL },
        { "REQUEST_VEHICLE_ASSET(_,_)", WREN_VEHICLE_REQUEST_VEHICLE_ASSET },
        { "HAS_VEHICLE_ASSET_LOADED(_)", WREN_VEHICLE_HAS_VEHICLE_ASSET_LOADED },
        { "REMOVE_VEHICLE_ASSET(_)", WREN_VEHICLE_REMOVE_VEHICLE_ASSET },
        { "SET_VEHICLE_TOW_TRUCK_ARM_POSITION(_,_)", WREN_VEHICLE_SET_VEHICLE_TOW_TRUCK_ARM_POSITION },
        { "ATTACH_VEHICLE_TO_TOW_TRUCK(_,_,_,_,_,_)", WREN_VEHICLE_ATTACH_VEHICLE_TO_TOW_TRUCK },
        { "DETACH_VEHICLE_FROM_TOW_TRUCK(_,_)", WREN_VEHICLE_DETACH_VEHICLE_FROM_TOW_TRUCK },
        { "DETACH_VEHICLE_FROM_ANY_TOW_TRUCK(_)", WREN_VEHICLE_DETACH_VEHICLE_FROM_ANY_TOW_TRUCK },
        { "IS_VEHICLE_ATTACHED_TO_TOW_TRUCK(_,_)", WREN_VEHICLE_IS_VEHICLE_ATTACHED_TO_TOW_TRUCK },
        { "GET_ENTITY_ATTACHED_TO_TOW_TRUCK(_)", WREN_VEHICLE_GET_ENTITY_ATTACHED_TO_TOW_TRUCK },
        { "SET_VEHICLE_AUTOMATICALLY_ATTACHES(_,_,_)", WREN_VEHICLE_SET_VEHICLE_AUTOMATICALLY_ATTACHES },
        { "SET_VEHICLE_BULLDOZER_ARM_POSITION(_,_,_)", WREN_VEHICLE_SET_VEHICLE_BULLDOZER_ARM_POSITION },
        { "SET_VEHICLE_TANK_TURRET_POSITION(_,_,_)", WREN_VEHICLE_SET_VEHICLE_TANK_TURRET_POSITION },
        { "SET_VEHICLE_TURRET_TARGET(_,_,_,_,_,_)", WREN_VEHICLE_SET_VEHICLE_TURRET_TARGET },
        { "SET_VEHICLE_TANK_STATIONARY(_,_)", WREN_VEHICLE_SET_VEHICLE_TANK_STATIONARY },
        { "SET_VEHICLE_TURRET_SPEED_THIS_FRAME(_,_)", WREN_VEHICLE_SET_VEHICLE_TURRET_SPEED_THIS_FRAME },
        { "DISABLE_VEHICLE_TURRET_MOVEMENT_THIS_FRAME(_)", WREN_VEHICLE_DISABLE_VEHICLE_TURRET_MOVEMENT_THIS_FRAME },
        { "SET_VEHICLE_FLIGHT_NOZZLE_POSITION(_,_)", WREN_VEHICLE_SET_VEHICLE_FLIGHT_NOZZLE_POSITION },
        { "SET_VEHICLE_FLIGHT_NOZZLE_POSITION_IMMEDIATE(_,_)", WREN_VEHICLE_SET_VEHICLE_FLIGHT_NOZZLE_POSITION_IMMEDIATE },
        { "GET_VEHICLE_FLIGHT_NOZZLE_POSITION(_)", WREN_VEHICLE_GET_VEHICLE_FLIGHT_NOZZLE_POSITION },
        { "SET_DISABLE_VERTICAL_FLIGHT_MODE_TRANSITION(_,_)", WREN_VEHICLE_SET_DISABLE_VERTICAL_FLIGHT_MODE_TRANSITION },
        { "GENERATE_VEHICLE_CREATION_POS_FROM_PATHS(_,_,_,_,_,_,_)", WREN_VEHICLE_GENERATE_VEHICLE_CREATION_POS_FROM_PATHS },
        { "SET_VEHICLE_BURNOUT(_,_)", WREN_VEHICLE_SET_VEHICLE_BURNOUT },
        { "IS_VEHICLE_IN_BURNOUT(_)", WREN_VEHICLE_IS_VEHICLE_IN_BURNOUT },
        { "SET_VEHICLE_REDUCE_GRIP(_,_)", WREN_VEHICLE_SET_VEHICLE_REDUCE_GRIP },
        { "SET_VEHICLE_REDUCE_GRIP_LEVEL(_,_)", WREN_VEHICLE_SET_VEHICLE_REDUCE_GRIP_LEVEL },
        { "SET_VEHICLE_INDICATOR_LIGHTS(_,_,_)", WREN_VEHICLE_SET_VEHICLE_INDICATOR_LIGHTS },
        { "SET_VEHICLE_BRAKE_LIGHTS(_,_)", WREN_VEHICLE_SET_VEHICLE_BRAKE_LIGHTS },
        { "SET_VEHICLE_HANDBRAKE(_,_)", WREN_VEHICLE_SET_VEHICLE_HANDBRAKE },
        { "SET_VEHICLE_BRAKE(_,_)", WREN_VEHICLE_SET_VEHICLE_BRAKE },
        { "INSTANTLY_FILL_VEHICLE_POPULATION()", WREN_VEHICLE_INSTANTLY_FILL_VEHICLE_POPULATION },
        { "HAS_INSTANT_FILL_VEHICLE_POPULATION_FINISHED()", WREN_VEHICLE_HAS_INSTANT_FILL_VEHICLE_POPULATION_FINISHED },
        { "NETWORK_ENABLE_EMPTY_CROWDING_VEHICLES_REMOVAL(_)", WREN_VEHICLE_NETWORK_ENABLE_EMPTY_CROWDING_VEHICLES_REMOVAL },
        { "NETWORK_CAP_EMPTY_CROWDING_VEHICLES_REMOVAL(_)", WREN_VEHICLE_NETWORK_CAP_EMPTY_CROWDING_VEHICLES_REMOVAL },
        { "GET_VEHICLE_TRAILER_VEHICLE(_)", WREN_VEHICLE_GET_VEHICLE_TRAILER_VEHICLE },
        { "SET_VEHICLE_USES_LARGE_REAR_RAMP(_,_)", WREN_VEHICLE_SET_VEHICLE_USES_LARGE_REAR_RAMP },
        { "SET_VEHICLE_RUDDER_BROKEN(_,_)", WREN_VEHICLE_SET_VEHICLE_RUDDER_BROKEN },
        { "SET_CONVERTIBLE_ROOF_LATCH_STATE(_,_)", WREN_VEHICLE_SET_CONVERTIBLE_ROOF_LATCH_STATE },
        { "GET_VEHICLE_ESTIMATED_MAX_SPEED(_)", WREN_VEHICLE_GET_VEHICLE_ESTIMATED_MAX_SPEED },
        { "GET_VEHICLE_MAX_BRAKING(_)", WREN_VEHICLE_GET_VEHICLE_MAX_BRAKING },
        { "GET_VEHICLE_MAX_TRACTION(_)", WREN_VEHICLE_GET_VEHICLE_MAX_TRACTION },
        { "GET_VEHICLE_ACCELERATION(_)", WREN_VEHICLE_GET_VEHICLE_ACCELERATION },
        { "GET_VEHICLE_MODEL_ESTIMATED_MAX_SPEED(_)", WREN_VEHICLE_GET_VEHICLE_MODEL_ESTIMATED_MAX_SPEED },
        { "GET_VEHICLE_MODEL_MAX_BRAKING(_)", WREN_VEHICLE_GET_VEHICLE_MODEL_MAX_BRAKING },
        { "GET_VEHICLE_MODEL_MAX_BRAKING_MAX_MODS(_)", WREN_VEHICLE_GET_VEHICLE_MODEL_MAX_BRAKING_MAX_MODS },
        { "GET_VEHICLE_MODEL_MAX_TRACTION(_)", WREN_VEHICLE_GET_VEHICLE_MODEL_MAX_TRACTION },
        { "GET_VEHICLE_MODEL_ACCELERATION(_)", WREN_VEHICLE_GET_VEHICLE_MODEL_ACCELERATION },
        { "GET_VEHICLE_MODEL_ACCELERATION_MAX_MODS(_)", WREN_VEHICLE_GET_VEHICLE_MODEL_ACCELERATION_MAX_MODS },
        { "GET_FLYING_VEHICLE_MODEL_AGILITY(_)", WREN_VEHICLE_GET_FLYING_VEHICLE_MODEL_AGILITY },
        { "GET_BOAT_VEHICLE_MODEL_AGILITY(_)", WREN_VEHICLE_GET_BOAT_VEHICLE_MODEL_AGILITY },
        { "GET_VEHICLE_CLASS_ESTIMATED_MAX_SPEED(_)", WREN_VEHICLE_GET_VEHICLE_CLASS_ESTIMATED_MAX_SPEED },
        { "GET_VEHICLE_CLASS_MAX_TRACTION(_)", WREN_VEHICLE_GET_VEHICLE_CLASS_MAX_TRACTION },
        { "GET_VEHICLE_CLASS_MAX_AGILITY(_)", WREN_VEHICLE_GET_VEHICLE_CLASS_MAX_AGILITY },
        { "GET_VEHICLE_CLASS_MAX_ACCELERATION(_)", WREN_VEHICLE_GET_VEHICLE_CLASS_MAX_ACCELERATION },
        { "GET_VEHICLE_CLASS_MAX_BRAKING(_)", WREN_VEHICLE_GET_VEHICLE_CLASS_MAX_BRAKING },
        { "ADD_ROAD_NODE_SPEED_ZONE(_,_,_,_,_,_)", WREN_VEHICLE_ADD_ROAD_NODE_SPEED_ZONE },
        { "REMOVE_ROAD_NODE_SPEED_ZONE(_)", WREN_VEHICLE_REMOVE_ROAD_NODE_SPEED_ZONE },
        { "OPEN_BOMB_BAY_DOORS(_)", WREN_VEHICLE_OPEN_BOMB_BAY_DOORS },
        { "CLOSE_BOMB_BAY_DOORS(_)", WREN_VEHICLE_CLOSE_BOMB_BAY_DOORS },
        { "GET_ARE_BOMB_BAY_DOORS_OPEN(_)", WREN_VEHICLE_GET_ARE_BOMB_BAY_DOORS_OPEN },
        { "IS_VEHICLE_SEARCHLIGHT_ON(_)", WREN_VEHICLE_IS_VEHICLE_SEARCHLIGHT_ON },
        { "SET_VEHICLE_SEARCHLIGHT(_,_,_)", WREN_VEHICLE_SET_VEHICLE_SEARCHLIGHT },
        { "DOES_VEHICLE_HAVE_SEARCHLIGHT(_)", WREN_VEHICLE_DOES_VEHICLE_HAVE_SEARCHLIGHT },
        { "IS_ENTRY_POINT_FOR_SEAT_CLEAR(_,_,_,_,_)", WREN_VEHICLE_IS_ENTRY_POINT_FOR_SEAT_CLEAR },
        { "GET_ENTRY_POINT_POSITION(_,_)", WREN_VEHICLE_GET_ENTRY_POINT_POSITION },
        { "CAN_SHUFFLE_SEAT(_,_)", WREN_VEHICLE_CAN_SHUFFLE_SEAT },
        { "GET_NUM_MOD_KITS(_)", WREN_VEHICLE_GET_NUM_MOD_KITS },
        { "SET_VEHICLE_MOD_KIT(_,_)", WREN_VEHICLE_SET_VEHICLE_MOD_KIT },
        { "GET_VEHICLE_MOD_KIT(_)", WREN_VEHICLE_GET_VEHICLE_MOD_KIT },
        { "GET_VEHICLE_MOD_KIT_TYPE(_)", WREN_VEHICLE_GET_VEHICLE_MOD_KIT_TYPE },
        { "GET_VEHICLE_WHEEL_TYPE(_)", WREN_VEHICLE_GET_VEHICLE_WHEEL_TYPE },
        { "SET_VEHICLE_WHEEL_TYPE(_,_)", WREN_VEHICLE_SET_VEHICLE_WHEEL_TYPE },
        { "GET_NUM_MOD_COLORS(_,_)", WREN_VEHICLE_GET_NUM_MOD_COLORS },
        { "SET_VEHICLE_MOD_COLOR_1(_,_,_,_)", WREN_VEHICLE_SET_VEHICLE_MOD_COLOR_1 },
        { "SET_VEHICLE_MOD_COLOR_2(_,_,_)", WREN_VEHICLE_SET_VEHICLE_MOD_COLOR_2 },
        { "GET_VEHICLE_MOD_COLOR_1(_)", WREN_VEHICLE_GET_VEHICLE_MOD_COLOR_1 },
        { "GET_VEHICLE_MOD_COLOR_2(_)", WREN_VEHICLE_GET_VEHICLE_MOD_COLOR_2 },
        { "GET_VEHICLE_MOD_COLOR_1_NAME(_,_)", WREN_VEHICLE_GET_VEHICLE_MOD_COLOR_1_NAME },
        { "GET_VEHICLE_MOD_COLOR_2_NAME(_)", WREN_VEHICLE_GET_VEHICLE_MOD_COLOR_2_NAME },
        { "HAVE_VEHICLE_MODS_STREAMED_IN(_)", WREN_VEHICLE_HAVE_VEHICLE_MODS_STREAMED_IN },
        { "IS_VEHICLE_MOD_GEN9_EXCLUSIVE(_,_,_)", WREN_VEHICLE_IS_VEHICLE_MOD_GEN9_EXCLUSIVE },
        { "SET_VEHICLE_MOD(_,_,_,_)", WREN_VEHICLE_SET_VEHICLE_MOD },
        { "GET_VEHICLE_MOD(_,_)", WREN_VEHICLE_GET_VEHICLE_MOD },
        { "GET_VEHICLE_MOD_VARIATION(_,_)", WREN_VEHICLE_GET_VEHICLE_MOD_VARIATION },
        { "GET_NUM_VEHICLE_MODS(_,_)", WREN_VEHICLE_GET_NUM_VEHICLE_MODS },
        { "REMOVE_VEHICLE_MOD(_,_)", WREN_VEHICLE_REMOVE_VEHICLE_MOD },
        { "TOGGLE_VEHICLE_MOD(_,_,_)", WREN_VEHICLE_TOGGLE_VEHICLE_MOD },
        { "IS_TOGGLE_MOD_ON(_,_)", WREN_VEHICLE_IS_TOGGLE_MOD_ON },
        { "GET_MOD_TEXT_LABEL(_,_,_)", WREN_VEHICLE_GET_MOD_TEXT_LABEL },
        { "GET_MOD_SLOT_NAME(_,_)", WREN_VEHICLE_GET_MOD_SLOT_NAME },
        { "GET_LIVERY_NAME(_,_)", WREN_VEHICLE_GET_LIVERY_NAME },
        { "GET_VEHICLE_MOD_MODIFIER_VALUE(_,_,_)", WREN_VEHICLE_GET_VEHICLE_MOD_MODIFIER_VALUE },
        { "GET_VEHICLE_MOD_IDENTIFIER_HASH(_,_,_)", WREN_VEHICLE_GET_VEHICLE_MOD_IDENTIFIER_HASH },
        { "PRELOAD_VEHICLE_MOD(_,_,_)", WREN_VEHICLE_PRELOAD_VEHICLE_MOD },
        { "HAS_PRELOAD_MODS_FINISHED(_)", WREN_VEHICLE_HAS_PRELOAD_MODS_FINISHED },
        { "RELEASE_PRELOAD_MODS(_)", WREN_VEHICLE_RELEASE_PRELOAD_MODS },
        { "SET_VEHICLE_TYRE_SMOKE_COLOR(_,_,_,_)", WREN_VEHICLE_SET_VEHICLE_TYRE_SMOKE_COLOR },
        { "GET_VEHICLE_TYRE_SMOKE_COLOR(_)", WREN_VEHICLE_GET_VEHICLE_TYRE_SMOKE_COLOR },
        { "SET_VEHICLE_WINDOW_TINT(_,_)", WREN_VEHICLE_SET_VEHICLE_WINDOW_TINT },
        { "GET_VEHICLE_WINDOW_TINT(_)", WREN_VEHICLE_GET_VEHICLE_WINDOW_TINT },
        { "GET_NUM_VEHICLE_WINDOW_TINTS()", WREN_VEHICLE_GET_NUM_VEHICLE_WINDOW_TINTS },
        { "GET_VEHICLE_COLOR(_)", WREN_VEHICLE_GET_VEHICLE_COLOR },
        { "GET_VEHICLE_COLOURS_WHICH_CAN_BE_SET(_)", WREN_VEHICLE_GET_VEHICLE_COLOURS_WHICH_CAN_BE_SET },
        { "GET_VEHICLE_CAUSE_OF_DESTRUCTION(_)", WREN_VEHICLE_GET_VEHICLE_CAUSE_OF_DESTRUCTION },
        { "OVERRIDE_PLANE_DAMAGE_THREHSOLD(_,_)", WREN_VEHICLE_OVERRIDE_PLANE_DAMAGE_THREHSOLD },
        { "GET_IS_LEFT_VEHICLE_HEADLIGHT_DAMAGED(_)", WREN_VEHICLE_GET_IS_LEFT_VEHICLE_HEADLIGHT_DAMAGED },
        { "GET_IS_RIGHT_VEHICLE_HEADLIGHT_DAMAGED(_)", WREN_VEHICLE_GET_IS_RIGHT_VEHICLE_HEADLIGHT_DAMAGED },
        { "GET_BOTH_VEHICLE_HEADLIGHTS_DAMAGED(_)", WREN_VEHICLE_GET_BOTH_VEHICLE_HEADLIGHTS_DAMAGED },
        { "MODIFY_VEHICLE_TOP_SPEED(_,_)", WREN_VEHICLE_MODIFY_VEHICLE_TOP_SPEED },
        { "SET_VEHICLE_MAX_SPEED(_,_)", WREN_VEHICLE_SET_VEHICLE_MAX_SPEED },
        { "SET_VEHICLE_STAYS_FROZEN_WHEN_CLEANED_UP(_,_)", WREN_VEHICLE_SET_VEHICLE_STAYS_FROZEN_WHEN_CLEANED_UP },
        { "SET_VEHICLE_ACT_AS_IF_HIGH_SPEED_FOR_FRAG_SMASHING(_,_)", WREN_VEHICLE_SET_VEHICLE_ACT_AS_IF_HIGH_SPEED_FOR_FRAG_SMASHING },
        { "SET_PEDS_CAN_FALL_OFF_THIS_VEHICLE_FROM_LARGE_FALL_DAMAGE(_,_,_)", WREN_VEHICLE_SET_PEDS_CAN_FALL_OFF_THIS_VEHICLE_FROM_LARGE_FALL_DAMAGE },
        { "ADD_VEHICLE_COMBAT_ANGLED_AVOIDANCE_AREA(_,_,_,_,_,_,_)", WREN_VEHICLE_ADD_VEHICLE_COMBAT_ANGLED_AVOIDANCE_AREA },
        { "REMOVE_VEHICLE_COMBAT_AVOIDANCE_AREA(_)", WREN_VEHICLE_REMOVE_VEHICLE_COMBAT_AVOIDANCE_AREA },
        { "IS_ANY_PED_RAPPELLING_FROM_HELI(_)", WREN_VEHICLE_IS_ANY_PED_RAPPELLING_FROM_HELI },
        { "SET_VEHICLE_CHEAT_POWER_INCREASE(_,_)", WREN_VEHICLE_SET_VEHICLE_CHEAT_POWER_INCREASE },
        { "SET_VEHICLE_INFLUENCES_WANTED_LEVEL(_,_)", WREN_VEHICLE_SET_VEHICLE_INFLUENCES_WANTED_LEVEL },
        { "SET_VEHICLE_IS_WANTED(_,_)", WREN_VEHICLE_SET_VEHICLE_IS_WANTED },
        { "SWING_BOAT_BOOM_TO_RATIO(_,_)", WREN_VEHICLE_SWING_BOAT_BOOM_TO_RATIO },
        { "SWING_BOAT_BOOM_FREELY(_,_)", WREN_VEHICLE_SWING_BOAT_BOOM_FREELY },
        { "ALLOW_BOAT_BOOM_TO_ANIMATE(_,_)", WREN_VEHICLE_ALLOW_BOAT_BOOM_TO_ANIMATE },
        { "GET_BOAT_BOOM_POSITION_RATIO(_)", WREN_VEHICLE_GET_BOAT_BOOM_POSITION_RATIO },
        { "DISABLE_PLANE_AILERON(_,_,_)", WREN_VEHICLE_DISABLE_PLANE_AILERON },
        { "GET_IS_VEHICLE_ENGINE_RUNNING(_)", WREN_VEHICLE_GET_IS_VEHICLE_ENGINE_RUNNING },
        { "SET_VEHICLE_USE_ALTERNATE_HANDLING(_,_)", WREN_VEHICLE_SET_VEHICLE_USE_ALTERNATE_HANDLING },
        { "SET_BIKE_ON_STAND(_,_,_)", WREN_VEHICLE_SET_BIKE_ON_STAND },
        { "SET_VEHICLE_NOT_STEALABLE_AMBIENTLY(_,_)", WREN_VEHICLE_SET_VEHICLE_NOT_STEALABLE_AMBIENTLY },
        { "LOCK_DOORS_WHEN_NO_LONGER_NEEDED(_)", WREN_VEHICLE_LOCK_DOORS_WHEN_NO_LONGER_NEEDED },
        { "SET_LAST_DRIVEN_VEHICLE(_)", WREN_VEHICLE_SET_LAST_DRIVEN_VEHICLE },
        { "GET_LAST_DRIVEN_VEHICLE()", WREN_VEHICLE_GET_LAST_DRIVEN_VEHICLE },
        { "CLEAR_LAST_DRIVEN_VEHICLE()", WREN_VEHICLE_CLEAR_LAST_DRIVEN_VEHICLE },
        { "SET_VEHICLE_HAS_BEEN_DRIVEN_FLAG(_,_)", WREN_VEHICLE_SET_VEHICLE_HAS_BEEN_DRIVEN_FLAG },
        { "SET_TASK_VEHICLE_GOTO_PLANE_MIN_HEIGHT_ABOVE_TERRAIN(_,_)", WREN_VEHICLE_SET_TASK_VEHICLE_GOTO_PLANE_MIN_HEIGHT_ABOVE_TERRAIN },
        { "SET_VEHICLE_LOD_MULTIPLIER(_,_)", WREN_VEHICLE_SET_VEHICLE_LOD_MULTIPLIER },
        { "SET_VEHICLE_CAN_SAVE_IN_GARAGE(_,_)", WREN_VEHICLE_SET_VEHICLE_CAN_SAVE_IN_GARAGE },
        { "GET_VEHICLE_NUM_OF_BROKEN_OFF_PARTS(_)", WREN_VEHICLE_GET_VEHICLE_NUM_OF_BROKEN_OFF_PARTS },
        { "GET_VEHICLE_NUM_OF_BROKEN_LOOSEN_PARTS(_)", WREN_VEHICLE_GET_VEHICLE_NUM_OF_BROKEN_LOOSEN_PARTS },
        { "SET_FORCE_VEHICLE_ENGINE_DAMAGE_BY_BULLET(_,_)", WREN_VEHICLE_SET_FORCE_VEHICLE_ENGINE_DAMAGE_BY_BULLET },
        { "SET_VEHICLE_GENERATES_ENGINE_SHOCKING_EVENTS(_,_)", WREN_VEHICLE_SET_VEHICLE_GENERATES_ENGINE_SHOCKING_EVENTS },
        { "COPY_VEHICLE_DAMAGES(_,_)", WREN_VEHICLE_COPY_VEHICLE_DAMAGES },
        { "DISABLE_VEHICLE_EXPLOSION_BREAK_OFF_PARTS()", WREN_VEHICLE_DISABLE_VEHICLE_EXPLOSION_BREAK_OFF_PARTS },
        { "SET_LIGHTS_CUTOFF_DISTANCE_TWEAK(_)", WREN_VEHICLE_SET_LIGHTS_CUTOFF_DISTANCE_TWEAK },
        { "SET_VEHICLE_SHOOT_AT_TARGET(_,_,_,_,_)", WREN_VEHICLE_SET_VEHICLE_SHOOT_AT_TARGET },
        { "GET_VEHICLE_LOCK_ON_TARGET(_)", WREN_VEHICLE_GET_VEHICLE_LOCK_ON_TARGET },
        { "SET_FORCE_HD_VEHICLE(_,_)", WREN_VEHICLE_SET_FORCE_HD_VEHICLE },
        { "SET_VEHICLE_CUSTOM_PATH_NODE_STREAMING_RADIUS(_,_)", WREN_VEHICLE_SET_VEHICLE_CUSTOM_PATH_NODE_STREAMING_RADIUS },
        { "GET_VEHICLE_PLATE_TYPE(_)", WREN_VEHICLE_GET_VEHICLE_PLATE_TYPE },
        { "TRACK_VEHICLE_VISIBILITY(_)", WREN_VEHICLE_TRACK_VEHICLE_VISIBILITY },
        { "IS_VEHICLE_VISIBLE(_)", WREN_VEHICLE_IS_VEHICLE_VISIBLE },
        { "SET_VEHICLE_GRAVITY(_,_)", WREN_VEHICLE_SET_VEHICLE_GRAVITY },
        { "SET_ENABLE_VEHICLE_SLIPSTREAMING(_)", WREN_VEHICLE_SET_ENABLE_VEHICLE_SLIPSTREAMING },
        { "SET_VEHICLE_SLIPSTREAMING_SHOULD_TIME_OUT(_)", WREN_VEHICLE_SET_VEHICLE_SLIPSTREAMING_SHOULD_TIME_OUT },
        { "GET_VEHICLE_CURRENT_TIME_IN_SLIP_STREAM(_)", WREN_VEHICLE_GET_VEHICLE_CURRENT_TIME_IN_SLIP_STREAM },
        { "IS_VEHICLE_PRODUCING_SLIP_STREAM(_)", WREN_VEHICLE_IS_VEHICLE_PRODUCING_SLIP_STREAM },
        { "SET_VEHICLE_INACTIVE_DURING_PLAYBACK(_,_)", WREN_VEHICLE_SET_VEHICLE_INACTIVE_DURING_PLAYBACK },
        { "SET_VEHICLE_ACTIVE_DURING_PLAYBACK(_,_)", WREN_VEHICLE_SET_VEHICLE_ACTIVE_DURING_PLAYBACK },
        { "IS_VEHICLE_SPRAYABLE(_)", WREN_VEHICLE_IS_VEHICLE_SPRAYABLE },
        { "SET_VEHICLE_ENGINE_CAN_DEGRADE(_,_)", WREN_VEHICLE_SET_VEHICLE_ENGINE_CAN_DEGRADE },
        { "DISABLE_VEHCILE_DYNAMIC_AMBIENT_SCALES(_,_,_)", WREN_VEHICLE_DISABLE_VEHCILE_DYNAMIC_AMBIENT_SCALES },
        { "ENABLE_VEHICLE_DYNAMIC_AMBIENT_SCALES(_)", WREN_VEHICLE_ENABLE_VEHICLE_DYNAMIC_AMBIENT_SCALES },
        { "IS_PLANE_LANDING_GEAR_INTACT(_)", WREN_VEHICLE_IS_PLANE_LANDING_GEAR_INTACT },
        { "ARE_PLANE_PROPELLERS_INTACT(_)", WREN_VEHICLE_ARE_PLANE_PROPELLERS_INTACT },
        { "SET_PLANE_PROPELLER_HEALTH(_,_)", WREN_VEHICLE_SET_PLANE_PROPELLER_HEALTH },
        { "SET_VEHICLE_CAN_DEFORM_WHEELS(_,_)", WREN_VEHICLE_SET_VEHICLE_CAN_DEFORM_WHEELS },
        { "IS_VEHICLE_STOLEN(_)", WREN_VEHICLE_IS_VEHICLE_STOLEN },
        { "SET_VEHICLE_IS_STOLEN(_,_)", WREN_VEHICLE_SET_VEHICLE_IS_STOLEN },
        { "SET_PLANE_TURBULENCE_MULTIPLIER(_,_)", WREN_VEHICLE_SET_PLANE_TURBULENCE_MULTIPLIER },
        { "ARE_WINGS_OF_PLANE_INTACT(_)", WREN_VEHICLE_ARE_WINGS_OF_PLANE_INTACT },
        { "ALLOW_AMBIENT_VEHICLES_TO_AVOID_ADVERSE_CONDITIONS(_)", WREN_VEHICLE_ALLOW_AMBIENT_VEHICLES_TO_AVOID_ADVERSE_CONDITIONS },
        { "DETACH_VEHICLE_FROM_CARGOBOB(_,_)", WREN_VEHICLE_DETACH_VEHICLE_FROM_CARGOBOB },
        { "DETACH_VEHICLE_FROM_ANY_CARGOBOB(_)", WREN_VEHICLE_DETACH_VEHICLE_FROM_ANY_CARGOBOB },
        { "DETACH_ENTITY_FROM_CARGOBOB(_,_)", WREN_VEHICLE_DETACH_ENTITY_FROM_CARGOBOB },
        { "IS_VEHICLE_ATTACHED_TO_CARGOBOB(_,_)", WREN_VEHICLE_IS_VEHICLE_ATTACHED_TO_CARGOBOB },
        { "GET_VEHICLE_ATTACHED_TO_CARGOBOB(_)", WREN_VEHICLE_GET_VEHICLE_ATTACHED_TO_CARGOBOB },
        { "GET_ENTITY_ATTACHED_TO_CARGOBOB(_)", WREN_VEHICLE_GET_ENTITY_ATTACHED_TO_CARGOBOB },
        { "ATTACH_VEHICLE_TO_CARGOBOB(_,_,_,_,_,_)", WREN_VEHICLE_ATTACH_VEHICLE_TO_CARGOBOB },
        { "ATTACH_ENTITY_TO_CARGOBOB(_,_,_,_,_,_)", WREN_VEHICLE_ATTACH_ENTITY_TO_CARGOBOB },
        { "SET_CARGOBOB_FORCE_DONT_DETACH_VEHICLE(_,_)", WREN_VEHICLE_SET_CARGOBOB_FORCE_DONT_DETACH_VEHICLE },
        { "SET_CARGOBOB_EXCLUDE_FROM_PICKUP_ENTITY(_,_)", WREN_VEHICLE_SET_CARGOBOB_EXCLUDE_FROM_PICKUP_ENTITY },
        { "CAN_CARGOBOB_PICK_UP_ENTITY(_,_)", WREN_VEHICLE_CAN_CARGOBOB_PICK_UP_ENTITY },
        { "GET_ATTACHED_PICK_UP_HOOK_POSITION(_)", WREN_VEHICLE_GET_ATTACHED_PICK_UP_HOOK_POSITION },
        { "DOES_CARGOBOB_HAVE_PICK_UP_ROPE(_)", WREN_VEHICLE_DOES_CARGOBOB_HAVE_PICK_UP_ROPE },
        { "CREATE_PICK_UP_ROPE_FOR_CARGOBOB(_,_)", WREN_VEHICLE_CREATE_PICK_UP_ROPE_FOR_CARGOBOB },
        { "REMOVE_PICK_UP_ROPE_FOR_CARGOBOB(_)", WREN_VEHICLE_REMOVE_PICK_UP_ROPE_FOR_CARGOBOB },
        { "SET_PICKUP_ROPE_LENGTH_FOR_CARGOBOB(_,_,_,_)", WREN_VEHICLE_SET_PICKUP_ROPE_LENGTH_FOR_CARGOBOB },
        { "SET_PICKUP_ROPE_LENGTH_WITHOUT_CREATING_ROPE_FOR_CARGOBOB(_,_,_)", WREN_VEHICLE_SET_PICKUP_ROPE_LENGTH_WITHOUT_CREATING_ROPE_FOR_CARGOBOB },
        { "SET_CARGOBOB_PICKUP_ROPE_DAMPING_MULTIPLIER(_,_)", WREN_VEHICLE_SET_CARGOBOB_PICKUP_ROPE_DAMPING_MULTIPLIER },
        { "SET_CARGOBOB_PICKUP_ROPE_TYPE(_,_)", WREN_VEHICLE_SET_CARGOBOB_PICKUP_ROPE_TYPE },
        { "DOES_CARGOBOB_HAVE_PICKUP_MAGNET(_)", WREN_VEHICLE_DOES_CARGOBOB_HAVE_PICKUP_MAGNET },
        { "SET_CARGOBOB_PICKUP_MAGNET_ACTIVE(_,_)", WREN_VEHICLE_SET_CARGOBOB_PICKUP_MAGNET_ACTIVE },
        { "SET_CARGOBOB_PICKUP_MAGNET_STRENGTH(_,_)", WREN_VEHICLE_SET_CARGOBOB_PICKUP_MAGNET_STRENGTH },
        { "SET_CARGOBOB_PICKUP_MAGNET_FALLOFF(_,_)", WREN_VEHICLE_SET_CARGOBOB_PICKUP_MAGNET_FALLOFF },
        { "SET_CARGOBOB_PICKUP_MAGNET_REDUCED_STRENGTH(_,_)", WREN_VEHICLE_SET_CARGOBOB_PICKUP_MAGNET_REDUCED_STRENGTH },
        { "SET_CARGOBOB_PICKUP_MAGNET_REDUCED_FALLOFF(_,_)", WREN_VEHICLE_SET_CARGOBOB_PICKUP_MAGNET_REDUCED_FALLOFF },
        { "SET_CARGOBOB_PICKUP_MAGNET_PULL_STRENGTH(_,_)", WREN_VEHICLE_SET_CARGOBOB_PICKUP_MAGNET_PULL_STRENGTH },
        { "SET_CARGOBOB_PICKUP_MAGNET_PULL_ROPE_LENGTH(_,_)", WREN_VEHICLE_SET_CARGOBOB_PICKUP_MAGNET_PULL_ROPE_LENGTH },
        { "SET_CARGOBOB_PICKUP_MAGNET_SET_TARGETED_MODE(_,_)", WREN_VEHICLE_SET_CARGOBOB_PICKUP_MAGNET_SET_TARGETED_MODE },
        { "SET_CARGOBOB_PICKUP_MAGNET_SET_AMBIENT_MODE(_,_,_)", WREN_VEHICLE_SET_CARGOBOB_PICKUP_MAGNET_SET_AMBIENT_MODE },
        { "SET_CARGOBOB_PICKUP_MAGNET_ENSURE_PICKUP_ENTITY_UPRIGHT(_,_)", WREN_VEHICLE_SET_CARGOBOB_PICKUP_MAGNET_ENSURE_PICKUP_ENTITY_UPRIGHT },
        { "DOES_VEHICLE_HAVE_WEAPONS(_)", WREN_VEHICLE_DOES_VEHICLE_HAVE_WEAPONS },
        { "SET_VEHICLE_WILL_TELL_OTHERS_TO_HURRY(_,_)", WREN_VEHICLE_SET_VEHICLE_WILL_TELL_OTHERS_TO_HURRY },
        { "DISABLE_VEHICLE_WEAPON(_,_,_,_)", WREN_VEHICLE_DISABLE_VEHICLE_WEAPON },
        { "IS_VEHICLE_WEAPON_DISABLED(_,_,_)", WREN_VEHICLE_IS_VEHICLE_WEAPON_DISABLED },
        { "SET_VEHICLE_USED_FOR_PILOT_SCHOOL(_,_)", WREN_VEHICLE_SET_VEHICLE_USED_FOR_PILOT_SCHOOL },
        { "SET_VEHICLE_ACTIVE_FOR_PED_NAVIGATION(_,_)", WREN_VEHICLE_SET_VEHICLE_ACTIVE_FOR_PED_NAVIGATION },
        { "GET_VEHICLE_CLASS(_)", WREN_VEHICLE_GET_VEHICLE_CLASS },
        { "GET_VEHICLE_CLASS_FROM_NAME(_)", WREN_VEHICLE_GET_VEHICLE_CLASS_FROM_NAME },
        { "SET_PLAYERS_LAST_VEHICLE(_)", WREN_VEHICLE_SET_PLAYERS_LAST_VEHICLE },
        { "SET_VEHICLE_CAN_BE_USED_BY_FLEEING_PEDS(_,_)", WREN_VEHICLE_SET_VEHICLE_CAN_BE_USED_BY_FLEEING_PEDS },
        { "SET_AIRCRAFT_PILOT_SKILL_NOISE_SCALAR(_,_)", WREN_VEHICLE_SET_AIRCRAFT_PILOT_SKILL_NOISE_SCALAR },
        { "SET_VEHICLE_DROPS_MONEY_WHEN_BLOWN_UP(_,_)", WREN_VEHICLE_SET_VEHICLE_DROPS_MONEY_WHEN_BLOWN_UP },
        { "SET_VEHICLE_KEEP_ENGINE_ON_WHEN_ABANDONED(_,_)", WREN_VEHICLE_SET_VEHICLE_KEEP_ENGINE_ON_WHEN_ABANDONED },
        { "SET_VEHICLE_IMPATIENCE_TIMER(_,_)", WREN_VEHICLE_SET_VEHICLE_IMPATIENCE_TIMER },
        { "SET_VEHICLE_HANDLING_OVERRIDE(_,_)", WREN_VEHICLE_SET_VEHICLE_HANDLING_OVERRIDE },
        { "SET_VEHICLE_EXTENDED_REMOVAL_RANGE(_,_)", WREN_VEHICLE_SET_VEHICLE_EXTENDED_REMOVAL_RANGE },
        { "SET_VEHICLE_STEERING_BIAS_SCALAR(_,_)", WREN_VEHICLE_SET_VEHICLE_STEERING_BIAS_SCALAR },
        { "SET_HELI_CONTROL_LAGGING_RATE_SCALAR(_,_)", WREN_VEHICLE_SET_HELI_CONTROL_LAGGING_RATE_SCALAR },
        { "SET_VEHICLE_FRICTION_OVERRIDE(_,_)", WREN_VEHICLE_SET_VEHICLE_FRICTION_OVERRIDE },
        { "SET_VEHICLE_WHEELS_CAN_BREAK_OFF_WHEN_BLOW_UP(_,_)", WREN_VEHICLE_SET_VEHICLE_WHEELS_CAN_BREAK_OFF_WHEN_BLOW_UP },
        { "ARE_PLANE_CONTROL_PANELS_INTACT(_,_)", WREN_VEHICLE_ARE_PLANE_CONTROL_PANELS_INTACT },
        { "SET_VEHICLE_CEILING_HEIGHT(_,_)", WREN_VEHICLE_SET_VEHICLE_CEILING_HEIGHT },
        { "SET_VEHICLE_NO_EXPLOSION_DAMAGE_FROM_DRIVER(_,_)", WREN_VEHICLE_SET_VEHICLE_NO_EXPLOSION_DAMAGE_FROM_DRIVER },
        { "CLEAR_VEHICLE_ROUTE_HISTORY(_)", WREN_VEHICLE_CLEAR_VEHICLE_ROUTE_HISTORY },
        { "DOES_VEHICLE_EXIST_WITH_DECORATOR(_)", WREN_VEHICLE_DOES_VEHICLE_EXIST_WITH_DECORATOR },
        { "SET_VEHICLE_AI_CAN_USE_EXCLUSIVE_SEATS(_,_)", WREN_VEHICLE_SET_VEHICLE_AI_CAN_USE_EXCLUSIVE_SEATS },
        { "SET_VEHICLE_EXCLUSIVE_DRIVER(_,_,_)", WREN_VEHICLE_SET_VEHICLE_EXCLUSIVE_DRIVER },
        { "IS_PED_EXCLUSIVE_DRIVER_OF_VEHICLE(_,_)", WREN_VEHICLE_IS_PED_EXCLUSIVE_DRIVER_OF_VEHICLE },
        { "DISABLE_INDIVIDUAL_PLANE_PROPELLER(_,_)", WREN_VEHICLE_DISABLE_INDIVIDUAL_PLANE_PROPELLER },
        { "SET_VEHICLE_FORCE_AFTERBURNER(_,_)", WREN_VEHICLE_SET_VEHICLE_FORCE_AFTERBURNER },
        { "SET_DONT_PROCESS_VEHICLE_GLASS(_,_)", WREN_VEHICLE_SET_DONT_PROCESS_VEHICLE_GLASS },
        { "SET_DISABLE_WANTED_CONES_RESPONSE(_,_)", WREN_VEHICLE_SET_DISABLE_WANTED_CONES_RESPONSE },
        { "SET_USE_DESIRED_Z_CRUISE_SPEED_FOR_LANDING(_,_)", WREN_VEHICLE_SET_USE_DESIRED_Z_CRUISE_SPEED_FOR_LANDING },
        { "SET_ARRIVE_DISTANCE_OVERRIDE_FOR_VEHICLE_PERSUIT_ATTACK(_,_)", WREN_VEHICLE_SET_ARRIVE_DISTANCE_OVERRIDE_FOR_VEHICLE_PERSUIT_ATTACK },
        { "SET_VEHICLE_READY_FOR_CLEANUP(_)", WREN_VEHICLE_SET_VEHICLE_READY_FOR_CLEANUP },
        { "SET_DISTANT_CARS_ENABLED(_)", WREN_VEHICLE_SET_DISTANT_CARS_ENABLED },
        { "SET_VEHICLE_NEON_COLOUR(_,_,_,_)", WREN_VEHICLE_SET_VEHICLE_NEON_COLOUR },
        { "SET_VEHICLE_NEON_INDEX_COLOUR(_,_)", WREN_VEHICLE_SET_VEHICLE_NEON_INDEX_COLOUR },
        { "GET_VEHICLE_NEON_COLOUR(_)", WREN_VEHICLE_GET_VEHICLE_NEON_COLOUR },
        { "SET_VEHICLE_NEON_ENABLED(_,_,_)", WREN_VEHICLE_SET_VEHICLE_NEON_ENABLED },
        { "GET_VEHICLE_NEON_ENABLED(_,_)", WREN_VEHICLE_GET_VEHICLE_NEON_ENABLED },
        { "SET_AMBIENT_VEHICLE_NEON_ENABLED(_)", WREN_VEHICLE_SET_AMBIENT_VEHICLE_NEON_ENABLED },
        { "SUPPRESS_NEONS_ON_VEHICLE(_,_)", WREN_VEHICLE_SUPPRESS_NEONS_ON_VEHICLE },
        { "SET_DISABLE_SUPERDUMMY(_,_)", WREN_VEHICLE_SET_DISABLE_SUPERDUMMY },
        { "REQUEST_VEHICLE_DIAL(_)", WREN_VEHICLE_REQUEST_VEHICLE_DIAL },
        { "GET_VEHICLE_BODY_HEALTH(_)", WREN_VEHICLE_GET_VEHICLE_BODY_HEALTH },
        { "SET_VEHICLE_BODY_HEALTH(_,_)", WREN_VEHICLE_SET_VEHICLE_BODY_HEALTH },
        { "GET_VEHICLE_SIZE(_)", WREN_VEHICLE_GET_VEHICLE_SIZE },
        { "GET_FAKE_SUSPENSION_LOWERING_AMOUNT(_)", WREN_VEHICLE_GET_FAKE_SUSPENSION_LOWERING_AMOUNT },
        { "SET_CAR_HIGH_SPEED_BUMP_SEVERITY_MULTIPLIER(_)", WREN_VEHICLE_SET_CAR_HIGH_SPEED_BUMP_SEVERITY_MULTIPLIER },
        { "GET_NUMBER_OF_VEHICLE_DOORS(_)", WREN_VEHICLE_GET_NUMBER_OF_VEHICLE_DOORS },
        { "SET_HYDRAULICS_CONTROL(_,_)", WREN_VEHICLE_SET_HYDRAULICS_CONTROL },
        { "SET_CAN_ADJUST_GROUND_CLEARANCE(_,_)", WREN_VEHICLE_SET_CAN_ADJUST_GROUND_CLEARANCE },
        { "GET_VEHICLE_HEALTH_PERCENTAGE(_,_,_,_,_,_,_)", WREN_VEHICLE_GET_VEHICLE_HEALTH_PERCENTAGE },
        { "GET_VEHICLE_IS_MERCENARY(_)", WREN_VEHICLE_GET_VEHICLE_IS_MERCENARY },
        { "SET_VEHICLE_BROKEN_PARTS_DONT_AFFECT_AI_HANDLING(_,_)", WREN_VEHICLE_SET_VEHICLE_BROKEN_PARTS_DONT_AFFECT_AI_HANDLING },
        { "SET_VEHICLE_KERS_ALLOWED(_,_)", WREN_VEHICLE_SET_VEHICLE_KERS_ALLOWED },
        { "GET_VEHICLE_HAS_KERS(_)", WREN_VEHICLE_GET_VEHICLE_HAS_KERS },
        { "SET_PLANE_RESIST_TO_EXPLOSION(_,_)", WREN_VEHICLE_SET_PLANE_RESIST_TO_EXPLOSION },
        { "SET_HELI_RESIST_TO_EXPLOSION(_,_)", WREN_VEHICLE_SET_HELI_RESIST_TO_EXPLOSION },
        { "SET_DISABLE_BMX_EXTRA_TRICK_FORCES(_)", WREN_VEHICLE_SET_DISABLE_BMX_EXTRA_TRICK_FORCES },
        { "SET_HYDRAULIC_SUSPENSION_RAISE_FACTOR(_,_,_)", WREN_VEHICLE_SET_HYDRAULIC_SUSPENSION_RAISE_FACTOR },
        { "GET_HYDRAULIC_SUSPENSION_RAISE_FACTOR(_,_)", WREN_VEHICLE_GET_HYDRAULIC_SUSPENSION_RAISE_FACTOR },
        { "SET_CAN_USE_HYDRAULICS(_,_)", WREN_VEHICLE_SET_CAN_USE_HYDRAULICS },
        { "SET_HYDRAULIC_VEHICLE_STATE(_,_)", WREN_VEHICLE_SET_HYDRAULIC_VEHICLE_STATE },
        { "SET_HYDRAULIC_WHEEL_STATE(_,_,_,_,_)", WREN_VEHICLE_SET_HYDRAULIC_WHEEL_STATE },
        { "HAS_VEHICLE_PETROLTANK_SET_ON_FIRE_BY_ENTITY(_,_)", WREN_VEHICLE_HAS_VEHICLE_PETROLTANK_SET_ON_FIRE_BY_ENTITY },
        { "CLEAR_VEHICLE_PETROLTANK_FIRE_CULPRIT(_)", WREN_VEHICLE_CLEAR_VEHICLE_PETROLTANK_FIRE_CULPRIT },
        { "SET_VEHICLE_BOBBLEHEAD_VELOCITY(_,_,_)", WREN_VEHICLE_SET_VEHICLE_BOBBLEHEAD_VELOCITY },
        { "GET_VEHICLE_IS_DUMMY(_)", WREN_VEHICLE_GET_VEHICLE_IS_DUMMY },
        { "SET_VEHICLE_DAMAGE_SCALE(_,_)", WREN_VEHICLE_SET_VEHICLE_DAMAGE_SCALE },
        { "SET_VEHICLE_WEAPON_DAMAGE_SCALE(_,_)", WREN_VEHICLE_SET_VEHICLE_WEAPON_DAMAGE_SCALE },
        { "SET_DISABLE_DAMAGE_WITH_PICKED_UP_ENTITY(_,_)", WREN_VEHICLE_SET_DISABLE_DAMAGE_WITH_PICKED_UP_ENTITY },
        { "SET_VEHICLE_USES_MP_PLAYER_DAMAGE_MULTIPLIER(_,_)", WREN_VEHICLE_SET_VEHICLE_USES_MP_PLAYER_DAMAGE_MULTIPLIER },
        { "SET_BIKE_EASY_TO_LAND(_,_)", WREN_VEHICLE_SET_BIKE_EASY_TO_LAND },
        { "SET_INVERT_VEHICLE_CONTROLS(_,_)", WREN_VEHICLE_SET_INVERT_VEHICLE_CONTROLS },
        { "SET_SPEED_BOOST_EFFECT_DISABLED(_)", WREN_VEHICLE_SET_SPEED_BOOST_EFFECT_DISABLED },
        { "SET_SLOW_DOWN_EFFECT_DISABLED(_)", WREN_VEHICLE_SET_SLOW_DOWN_EFFECT_DISABLED },
        { "SET_FORMATION_LEADER(_,_,_,_,_)", WREN_VEHICLE_SET_FORMATION_LEADER },
        { "RESET_FORMATION_LEADER()", WREN_VEHICLE_RESET_FORMATION_LEADER },
        { "GET_IS_BOAT_CAPSIZED(_)", WREN_VEHICLE_GET_IS_BOAT_CAPSIZED },
        { "SET_ALLOW_RAMMING_SOOP_OR_RAMP(_,_)", WREN_VEHICLE_SET_ALLOW_RAMMING_SOOP_OR_RAMP },
        { "SET_SCRIPT_RAMP_IMPULSE_SCALE(_,_)", WREN_VEHICLE_SET_SCRIPT_RAMP_IMPULSE_SCALE },
        { "GET_IS_DOOR_VALID(_,_)", WREN_VEHICLE_GET_IS_DOOR_VALID },
        { "SET_SCRIPT_ROCKET_BOOST_RECHARGE_TIME(_,_)", WREN_VEHICLE_SET_SCRIPT_ROCKET_BOOST_RECHARGE_TIME },
        { "GET_HAS_ROCKET_BOOST(_)", WREN_VEHICLE_GET_HAS_ROCKET_BOOST },
        { "IS_ROCKET_BOOST_ACTIVE(_)", WREN_VEHICLE_IS_ROCKET_BOOST_ACTIVE },
        { "SET_ROCKET_BOOST_ACTIVE(_,_)", WREN_VEHICLE_SET_ROCKET_BOOST_ACTIVE },
        { "GET_HAS_RETRACTABLE_WHEELS(_)", WREN_VEHICLE_GET_HAS_RETRACTABLE_WHEELS },
        { "GET_IS_WHEELS_RETRACTED(_)", WREN_VEHICLE_GET_IS_WHEELS_RETRACTED },
        { "SET_WHEELS_EXTENDED_INSTANTLY(_)", WREN_VEHICLE_SET_WHEELS_EXTENDED_INSTANTLY },
        { "SET_WHEELS_RETRACTED_INSTANTLY(_)", WREN_VEHICLE_SET_WHEELS_RETRACTED_INSTANTLY },
        { "GET_CAR_HAS_JUMP(_)", WREN_VEHICLE_GET_CAR_HAS_JUMP },
        { "SET_USE_HIGHER_CAR_JUMP(_,_)", WREN_VEHICLE_SET_USE_HIGHER_CAR_JUMP },
        { "SET_CLEAR_FREEZE_WAITING_ON_COLLISION_ONCE_PLAYER_ENTERS(_,_)", WREN_VEHICLE_SET_CLEAR_FREEZE_WAITING_ON_COLLISION_ONCE_PLAYER_ENTERS },
        { "SET_VEHICLE_WEAPON_RESTRICTED_AMMO(_,_,_)", WREN_VEHICLE_SET_VEHICLE_WEAPON_RESTRICTED_AMMO },
        { "GET_VEHICLE_WEAPON_RESTRICTED_AMMO(_,_)", WREN_VEHICLE_GET_VEHICLE_WEAPON_RESTRICTED_AMMO },
        { "GET_VEHICLE_HAS_PARACHUTE(_)", WREN_VEHICLE_GET_VEHICLE_HAS_PARACHUTE },
        { "GET_VEHICLE_CAN_DEPLOY_PARACHUTE(_)", WREN_VEHICLE_GET_VEHICLE_CAN_DEPLOY_PARACHUTE },
        { "VEHICLE_START_PARACHUTING(_,_)", WREN_VEHICLE_VEHICLE_START_PARACHUTING },
        { "IS_VEHICLE_PARACHUTE_DEPLOYED(_)", WREN_VEHICLE_IS_VEHICLE_PARACHUTE_DEPLOYED },
        { "VEHICLE_SET_RAMP_AND_RAMMING_CARS_TAKE_DAMAGE(_,_)", WREN_VEHICLE_VEHICLE_SET_RAMP_AND_RAMMING_CARS_TAKE_DAMAGE },
        { "VEHICLE_SET_ENABLE_RAMP_CAR_SIDE_IMPULSE(_,_)", WREN_VEHICLE_VEHICLE_SET_ENABLE_RAMP_CAR_SIDE_IMPULSE },
        { "VEHICLE_SET_ENABLE_NORMALISE_RAMP_CAR_VERTICAL_VELOCTIY(_,_)", WREN_VEHICLE_VEHICLE_SET_ENABLE_NORMALISE_RAMP_CAR_VERTICAL_VELOCTIY },
        { "VEHICLE_SET_JET_WASH_FORCE_ENABLED(_)", WREN_VEHICLE_VEHICLE_SET_JET_WASH_FORCE_ENABLED },
        { "SET_VEHICLE_WEAPON_CAN_TARGET_OBJECTS(_,_)", WREN_VEHICLE_SET_VEHICLE_WEAPON_CAN_TARGET_OBJECTS },
        { "SET_VEHICLE_USE_BOOST_BUTTON_FOR_WHEEL_RETRACT(_)", WREN_VEHICLE_SET_VEHICLE_USE_BOOST_BUTTON_FOR_WHEEL_RETRACT },
        { "VEHICLE_SET_PARACHUTE_MODEL_OVERRIDE(_,_)", WREN_VEHICLE_VEHICLE_SET_PARACHUTE_MODEL_OVERRIDE },
        { "VEHICLE_SET_PARACHUTE_MODEL_TINT_INDEX(_,_)", WREN_VEHICLE_VEHICLE_SET_PARACHUTE_MODEL_TINT_INDEX },
        { "VEHICLE_SET_OVERRIDE_EXTENABLE_SIDE_RATIO(_,_)", WREN_VEHICLE_VEHICLE_SET_OVERRIDE_EXTENABLE_SIDE_RATIO },
        { "VEHICLE_SET_EXTENABLE_SIDE_TARGET_RATIO(_,_)", WREN_VEHICLE_VEHICLE_SET_EXTENABLE_SIDE_TARGET_RATIO },
        { "VEHICLE_SET_OVERRIDE_SIDE_RATIO(_,_)", WREN_VEHICLE_VEHICLE_SET_OVERRIDE_SIDE_RATIO },
        { "GET_ALL_VEHICLES()", WREN_VEHICLE_GET_ALL_VEHICLES },
        { "SET_CARGOBOB_EXTA_PICKUP_RANGE(_,_)", WREN_VEHICLE_SET_CARGOBOB_EXTA_PICKUP_RANGE },
        { "SET_OVERRIDE_VEHICLE_DOOR_TORQUE(_,_,_)", WREN_VEHICLE_SET_OVERRIDE_VEHICLE_DOOR_TORQUE },
        { "SET_WHEELIE_ENABLED(_,_)", WREN_VEHICLE_SET_WHEELIE_ENABLED },
        { "SET_DISABLE_HELI_EXPLODE_FROM_BODY_DAMAGE(_,_)", WREN_VEHICLE_SET_DISABLE_HELI_EXPLODE_FROM_BODY_DAMAGE },
        { "SET_DISABLE_EXPLODE_FROM_BODY_DAMAGE_ON_COLLISION(_,_)", WREN_VEHICLE_SET_DISABLE_EXPLODE_FROM_BODY_DAMAGE_ON_COLLISION },
        { "SET_TRAILER_ATTACHMENT_ENABLED(_,_)", WREN_VEHICLE_SET_TRAILER_ATTACHMENT_ENABLED },
        { "SET_ROCKET_BOOST_FILL(_,_)", WREN_VEHICLE_SET_ROCKET_BOOST_FILL },
        { "SET_GLIDER_ACTIVE(_,_)", WREN_VEHICLE_SET_GLIDER_ACTIVE },
        { "SET_SHOULD_RESET_TURRET_IN_SCRIPTED_CAMERAS(_,_)", WREN_VEHICLE_SET_SHOULD_RESET_TURRET_IN_SCRIPTED_CAMERAS },
        { "SET_VEHICLE_DISABLE_COLLISION_UPON_CREATION(_,_)", WREN_VEHICLE_SET_VEHICLE_DISABLE_COLLISION_UPON_CREATION },
        { "SET_GROUND_EFFECT_REDUCES_DRAG(_)", WREN_VEHICLE_SET_GROUND_EFFECT_REDUCES_DRAG },
        { "SET_DISABLE_MAP_COLLISION(_)", WREN_VEHICLE_SET_DISABLE_MAP_COLLISION },
        { "SET_DISABLE_PED_STAND_ON_TOP(_,_)", WREN_VEHICLE_SET_DISABLE_PED_STAND_ON_TOP },
        { "SET_VEHICLE_DAMAGE_SCALES(_,_,_,_,_)", WREN_VEHICLE_SET_VEHICLE_DAMAGE_SCALES },
        { "SET_PLANE_SECTION_DAMAGE_SCALE(_,_,_)", WREN_VEHICLE_SET_PLANE_SECTION_DAMAGE_SCALE },
        { "SET_HELI_CAN_PICKUP_ENTITY_THAT_HAS_PICK_UP_DISABLED(_,_)", WREN_VEHICLE_SET_HELI_CAN_PICKUP_ENTITY_THAT_HAS_PICK_UP_DISABLED },
        { "SET_VEHICLE_BOMB_AMMO(_,_)", WREN_VEHICLE_SET_VEHICLE_BOMB_AMMO },
        { "GET_VEHICLE_BOMB_AMMO(_)", WREN_VEHICLE_GET_VEHICLE_BOMB_AMMO },
        { "SET_VEHICLE_COUNTERMEASURE_AMMO(_,_)", WREN_VEHICLE_SET_VEHICLE_COUNTERMEASURE_AMMO },
        { "GET_VEHICLE_COUNTERMEASURE_AMMO(_)", WREN_VEHICLE_GET_VEHICLE_COUNTERMEASURE_AMMO },
        { "SET_HELI_COMBAT_OFFSET(_,_,_,_)", WREN_VEHICLE_SET_HELI_COMBAT_OFFSET },
        { "GET_CAN_VEHICLE_BE_PLACED_HERE(_,_,_,_,_,_,_,_,_)", WREN_VEHICLE_GET_CAN_VEHICLE_BE_PLACED_HERE },
        { "SET_DISABLE_AUTOMATIC_CRASH_TASK(_,_)", WREN_VEHICLE_SET_DISABLE_AUTOMATIC_CRASH_TASK },
        { "SET_SPECIAL_FLIGHT_MODE_RATIO(_,_)", WREN_VEHICLE_SET_SPECIAL_FLIGHT_MODE_RATIO },
        { "SET_SPECIAL_FLIGHT_MODE_TARGET_RATIO(_,_)", WREN_VEHICLE_SET_SPECIAL_FLIGHT_MODE_TARGET_RATIO },
        { "SET_SPECIAL_FLIGHT_MODE_ALLOWED(_,_)", WREN_VEHICLE_SET_SPECIAL_FLIGHT_MODE_ALLOWED },
        { "SET_DISABLE_HOVER_MODE_FLIGHT(_,_)", WREN_VEHICLE_SET_DISABLE_HOVER_MODE_FLIGHT },
        { "GET_OUTRIGGERS_DEPLOYED(_)", WREN_VEHICLE_GET_OUTRIGGERS_DEPLOYED },
        { "FIND_SPAWN_COORDINATES_FOR_HELI(_)", WREN_VEHICLE_FIND_SPAWN_COORDINATES_FOR_HELI },
        { "SET_DEPLOY_FOLDING_WINGS(_,_,_)", WREN_VEHICLE_SET_DEPLOY_FOLDING_WINGS },
        { "ARE_FOLDING_WINGS_DEPLOYED(_)", WREN_VEHICLE_ARE_FOLDING_WINGS_DEPLOYED },
        { "SET_DIP_STRAIGHT_DOWN_WHEN_CRASHING_PLANE(_,_)", WREN_VEHICLE_SET_DIP_STRAIGHT_DOWN_WHEN_CRASHING_PLANE },
        { "SET_TURRET_HIDDEN(_,_,_)", WREN_VEHICLE_SET_TURRET_HIDDEN },
        { "SET_HOVER_MODE_WING_RATIO(_,_)", WREN_VEHICLE_SET_HOVER_MODE_WING_RATIO },
        { "SET_DISABLE_TURRET_MOVEMENT(_,_)", WREN_VEHICLE_SET_DISABLE_TURRET_MOVEMENT },
        { "SET_FORCE_FIX_LINK_MATRICES(_)", WREN_VEHICLE_SET_FORCE_FIX_LINK_MATRICES },
        { "SET_TRANSFORM_RATE_FOR_ANIMATION(_,_)", WREN_VEHICLE_SET_TRANSFORM_RATE_FOR_ANIMATION },
        { "SET_TRANSFORM_TO_SUBMARINE_USES_ALTERNATE_INPUT(_,_)", WREN_VEHICLE_SET_TRANSFORM_TO_SUBMARINE_USES_ALTERNATE_INPUT },
        { "SET_VEHICLE_COMBAT_MODE(_)", WREN_VEHICLE_SET_VEHICLE_COMBAT_MODE },
        { "SET_VEHICLE_DETONATION_MODE(_)", WREN_VEHICLE_SET_VEHICLE_DETONATION_MODE },
        { "SET_VEHICLE_SHUNT_ON_STICK(_)", WREN_VEHICLE_SET_VEHICLE_SHUNT_ON_STICK },
        { "GET_IS_VEHICLE_SHUNTING(_)", WREN_VEHICLE_GET_IS_VEHICLE_SHUNTING },
        { "GET_HAS_VEHICLE_BEEN_HIT_BY_SHUNT(_)", WREN_VEHICLE_GET_HAS_VEHICLE_BEEN_HIT_BY_SHUNT },
        { "GET_LAST_SHUNT_VEHICLE(_)", WREN_VEHICLE_GET_LAST_SHUNT_VEHICLE },
        { "SET_DISABLE_VEHICLE_EXPLOSIONS_DAMAGE(_)", WREN_VEHICLE_SET_DISABLE_VEHICLE_EXPLOSIONS_DAMAGE },
        { "SET_OVERRIDE_NITROUS_LEVEL(_,_,_,_,_,_)", WREN_VEHICLE_SET_OVERRIDE_NITROUS_LEVEL },
        { "SET_INCREASE_WHEEL_CRUSH_DAMAGE(_,_)", WREN_VEHICLE_SET_INCREASE_WHEEL_CRUSH_DAMAGE },
        { "SET_DISABLE_WEAPON_BLADE_FORCES(_)", WREN_VEHICLE_SET_DISABLE_WEAPON_BLADE_FORCES },
        { "SET_USE_DOUBLE_CLICK_FOR_CAR_JUMP(_)", WREN_VEHICLE_SET_USE_DOUBLE_CLICK_FOR_CAR_JUMP },
        { "GET_DOES_VEHICLE_HAVE_TOMBSTONE(_)", WREN_VEHICLE_GET_DOES_VEHICLE_HAVE_TOMBSTONE },
        { "HIDE_TOMBSTONE(_,_)", WREN_VEHICLE_HIDE_TOMBSTONE },
        { "GET_IS_VEHICLE_DISABLED_BY_EMP(_)", WREN_VEHICLE_GET_IS_VEHICLE_DISABLED_BY_EMP },
        { "SET_DISABLE_RETRACTING_WEAPON_BLADES(_)", WREN_VEHICLE_SET_DISABLE_RETRACTING_WEAPON_BLADES },
        { "GET_TYRE_HEALTH(_,_)", WREN_VEHICLE_GET_TYRE_HEALTH },
        { "SET_TYRE_HEALTH(_,_,_)", WREN_VEHICLE_SET_TYRE_HEALTH },
        { "GET_TYRE_WEAR_RATE(_,_)", WREN_VEHICLE_GET_TYRE_WEAR_RATE },
        { "SET_TYRE_WEAR_RATE(_,_,_)", WREN_VEHICLE_SET_TYRE_WEAR_RATE },
        { "SET_TYRE_WEAR_RATE_SCALE(_,_,_)", WREN_VEHICLE_SET_TYRE_WEAR_RATE_SCALE },
        { "SET_TYRE_MAXIMUM_GRIP_DIFFERENCE_DUE_TO_WEAR_RATE(_,_,_)", WREN_VEHICLE_SET_TYRE_MAXIMUM_GRIP_DIFFERENCE_DUE_TO_WEAR_RATE },
        { "SET_AIRCRAFT_IGNORE_HIGHTMAP_OPTIMISATION(_,_)", WREN_VEHICLE_SET_AIRCRAFT_IGNORE_HIGHTMAP_OPTIMISATION },
        { "SET_REDUCED_SUSPENSION_FORCE(_,_)", WREN_VEHICLE_SET_REDUCED_SUSPENSION_FORCE },
        { "SET_DRIFT_TYRES(_,_)", WREN_VEHICLE_SET_DRIFT_TYRES },
        { "GET_DRIFT_TYRES_SET(_)", WREN_VEHICLE_GET_DRIFT_TYRES_SET },
        { "NETWORK_USE_HIGH_PRECISION_TRAIN_BLENDING(_,_)", WREN_VEHICLE_NETWORK_USE_HIGH_PRECISION_TRAIN_BLENDING },
        { "SET_CHECK_FOR_ENOUGH_ROOM_FOR_PED(_,_)", WREN_VEHICLE_SET_CHECK_FOR_ENOUGH_ROOM_FOR_PED },
        { "GET_WATER_HEIGHT(_,_,_)", WREN_WATER_GET_WATER_HEIGHT },
        { "GET_WATER_HEIGHT_NO_WAVES(_,_,_)", WREN_WATER_GET_WATER_HEIGHT_NO_WAVES },
        { "TEST_PROBE_AGAINST_WATER(_,_,_,_,_,_)", WREN_WATER_TEST_PROBE_AGAINST_WATER },
        { "TEST_PROBE_AGAINST_ALL_WATER(_,_,_,_,_,_,_)", WREN_WATER_TEST_PROBE_AGAINST_ALL_WATER },
        { "TEST_VERTICAL_PROBE_AGAINST_ALL_WATER(_,_,_,_)", WREN_WATER_TEST_VERTICAL_PROBE_AGAINST_ALL_WATER },
        { "MODIFY_WATER(_,_,_,_)", WREN_WATER_MODIFY_WATER },
        { "ADD_EXTRA_CALMING_QUAD(_,_,_,_,_)", WREN_WATER_ADD_EXTRA_CALMING_QUAD },
        { "REMOVE_EXTRA_CALMING_QUAD(_)", WREN_WATER_REMOVE_EXTRA_CALMING_QUAD },
        { "SET_DEEP_OCEAN_SCALER(_)", WREN_WATER_SET_DEEP_OCEAN_SCALER },
        { "GET_DEEP_OCEAN_SCALER()", WREN_WATER_GET_DEEP_OCEAN_SCALER },
        { "SET_CALMED_WAVE_HEIGHT_SCALER(_)", WREN_WATER_SET_CALMED_WAVE_HEIGHT_SCALER },
        { "RESET_DEEP_OCEAN_SCALER()", WREN_WATER_RESET_DEEP_OCEAN_SCALER },
        { "ENABLE_LASER_SIGHT_RENDERING(_)", WREN_WEAPON_ENABLE_LASER_SIGHT_RENDERING },
        { "GET_WEAPON_COMPONENT_TYPE_MODEL(_)", WREN_WEAPON_GET_WEAPON_COMPONENT_TYPE_MODEL },
        { "GET_WEAPONTYPE_MODEL(_)", WREN_WEAPON_GET_WEAPONTYPE_MODEL },
        { "GET_WEAPONTYPE_SLOT(_)", WREN_WEAPON_GET_WEAPONTYPE_SLOT },
        { "GET_WEAPONTYPE_GROUP(_)", WREN_WEAPON_GET_WEAPONTYPE_GROUP },
        { "GET_WEAPON_COMPONENT_VARIANT_EXTRA_COUNT(_)", WREN_WEAPON_GET_WEAPON_COMPONENT_VARIANT_EXTRA_COUNT },
        { "GET_WEAPON_COMPONENT_VARIANT_EXTRA_MODEL(_,_)", WREN_WEAPON_GET_WEAPON_COMPONENT_VARIANT_EXTRA_MODEL },
        { "SET_CURRENT_PED_WEAPON(_,_,_)", WREN_WEAPON_SET_CURRENT_PED_WEAPON },
        { "GET_CURRENT_PED_WEAPON(_,_)", WREN_WEAPON_GET_CURRENT_PED_WEAPON },
        { "GET_CURRENT_PED_WEAPON_ENTITY_INDEX(_,_)", WREN_WEAPON_GET_CURRENT_PED_WEAPON_ENTITY_INDEX },
        { "GET_BEST_PED_WEAPON(_,_)", WREN_WEAPON_GET_BEST_PED_WEAPON },
        { "SET_CURRENT_PED_VEHICLE_WEAPON(_,_)", WREN_WEAPON_SET_CURRENT_PED_VEHICLE_WEAPON },
        { "GET_CURRENT_PED_VEHICLE_WEAPON(_)", WREN_WEAPON_GET_CURRENT_PED_VEHICLE_WEAPON },
        { "SET_PED_CYCLE_VEHICLE_WEAPONS_ONLY(_)", WREN_WEAPON_SET_PED_CYCLE_VEHICLE_WEAPONS_ONLY },
        { "IS_PED_ARMED(_,_)", WREN_WEAPON_IS_PED_ARMED },
        { "IS_WEAPON_VALID(_)", WREN_WEAPON_IS_WEAPON_VALID },
        { "HAS_PED_GOT_WEAPON(_,_,_)", WREN_WEAPON_HAS_PED_GOT_WEAPON },
        { "IS_PED_WEAPON_READY_TO_SHOOT(_)", WREN_WEAPON_IS_PED_WEAPON_READY_TO_SHOOT },
        { "GET_PED_WEAPONTYPE_IN_SLOT(_,_)", WREN_WEAPON_GET_PED_WEAPONTYPE_IN_SLOT },
        { "GET_AMMO_IN_PED_WEAPON(_,_)", WREN_WEAPON_GET_AMMO_IN_PED_WEAPON },
        { "ADD_AMMO_TO_PED(_,_,_)", WREN_WEAPON_ADD_AMMO_TO_PED },
        { "SET_PED_AMMO(_,_,_,_)", WREN_WEAPON_SET_PED_AMMO },
        { "SET_PED_INFINITE_AMMO(_,_,_)", WREN_WEAPON_SET_PED_INFINITE_AMMO },
        { "SET_PED_INFINITE_AMMO_CLIP(_,_)", WREN_WEAPON_SET_PED_INFINITE_AMMO_CLIP },
        { "SET_PED_STUN_GUN_FINITE_AMMO(_,_)", WREN_WEAPON_SET_PED_STUN_GUN_FINITE_AMMO },
        { "GIVE_WEAPON_TO_PED(_,_,_,_,_)", WREN_WEAPON_GIVE_WEAPON_TO_PED },
        { "GIVE_DELAYED_WEAPON_TO_PED(_,_,_,_)", WREN_WEAPON_GIVE_DELAYED_WEAPON_TO_PED },
        { "REMOVE_ALL_PED_WEAPONS(_,_)", WREN_WEAPON_REMOVE_ALL_PED_WEAPONS },
        { "REMOVE_WEAPON_FROM_PED(_,_)", WREN_WEAPON_REMOVE_WEAPON_FROM_PED },
        { "HIDE_PED_WEAPON_FOR_SCRIPTED_CUTSCENE(_,_)", WREN_WEAPON_HIDE_PED_WEAPON_FOR_SCRIPTED_CUTSCENE },
        { "SET_PED_CURRENT_WEAPON_VISIBLE(_,_,_,_,_)", WREN_WEAPON_SET_PED_CURRENT_WEAPON_VISIBLE },
        { "SET_PED_DROPS_WEAPONS_WHEN_DEAD(_,_)", WREN_WEAPON_SET_PED_DROPS_WEAPONS_WHEN_DEAD },
        { "HAS_PED_BEEN_DAMAGED_BY_WEAPON(_,_,_)", WREN_WEAPON_HAS_PED_BEEN_DAMAGED_BY_WEAPON },
        { "CLEAR_PED_LAST_WEAPON_DAMAGE(_)", WREN_WEAPON_CLEAR_PED_LAST_WEAPON_DAMAGE },
        { "HAS_ENTITY_BEEN_DAMAGED_BY_WEAPON(_,_,_)", WREN_WEAPON_HAS_ENTITY_BEEN_DAMAGED_BY_WEAPON },
        { "CLEAR_ENTITY_LAST_WEAPON_DAMAGE(_)", WREN_WEAPON_CLEAR_ENTITY_LAST_WEAPON_DAMAGE },
        { "SET_PED_DROPS_WEAPON(_)", WREN_WEAPON_SET_PED_DROPS_WEAPON },
        { "SET_PED_DROPS_INVENTORY_WEAPON(_,_,_,_,_,_)", WREN_WEAPON_SET_PED_DROPS_INVENTORY_WEAPON },
        { "GET_MAX_AMMO_IN_CLIP(_,_,_)", WREN_WEAPON_GET_MAX_AMMO_IN_CLIP },
        { "GET_AMMO_IN_CLIP(_,_)", WREN_WEAPON_GET_AMMO_IN_CLIP },
        { "SET_AMMO_IN_CLIP(_,_,_)", WREN_WEAPON_SET_AMMO_IN_CLIP },
        { "GET_MAX_AMMO(_,_)", WREN_WEAPON_GET_MAX_AMMO },
        { "GET_MAX_AMMO_BY_TYPE(_,_)", WREN_WEAPON_GET_MAX_AMMO_BY_TYPE },
        { "ADD_PED_AMMO_BY_TYPE(_,_,_)", WREN_WEAPON_ADD_PED_AMMO_BY_TYPE },
        { "SET_PED_AMMO_BY_TYPE(_,_,_)", WREN_WEAPON_SET_PED_AMMO_BY_TYPE },
        { "GET_PED_AMMO_BY_TYPE(_,_)", WREN_WEAPON_GET_PED_AMMO_BY_TYPE },
        { "SET_PED_AMMO_TO_DROP(_,_)", WREN_WEAPON_SET_PED_AMMO_TO_DROP },
        { "SET_PICKUP_AMMO_AMOUNT_SCALER(_)", WREN_WEAPON_SET_PICKUP_AMMO_AMOUNT_SCALER },
        { "GET_PED_AMMO_TYPE_FROM_WEAPON(_,_)", WREN_WEAPON_GET_PED_AMMO_TYPE_FROM_WEAPON },
        { "GET_PED_ORIGINAL_AMMO_TYPE_FROM_WEAPON(_,_)", WREN_WEAPON_GET_PED_ORIGINAL_AMMO_TYPE_FROM_WEAPON },
        { "GET_PED_LAST_WEAPON_IMPACT_COORD(_)", WREN_WEAPON_GET_PED_LAST_WEAPON_IMPACT_COORD },
        { "SET_PED_GADGET(_,_,_)", WREN_WEAPON_SET_PED_GADGET },
        { "GET_IS_PED_GADGET_EQUIPPED(_,_)", WREN_WEAPON_GET_IS_PED_GADGET_EQUIPPED },
        { "GET_SELECTED_PED_WEAPON(_)", WREN_WEAPON_GET_SELECTED_PED_WEAPON },
        { "EXPLODE_PROJECTILES(_,_,_)", WREN_WEAPON_EXPLODE_PROJECTILES },
        { "REMOVE_ALL_PROJECTILES_OF_TYPE(_,_)", WREN_WEAPON_REMOVE_ALL_PROJECTILES_OF_TYPE },
        { "GET_LOCKON_DISTANCE_OF_CURRENT_PED_WEAPON(_)", WREN_WEAPON_GET_LOCKON_DISTANCE_OF_CURRENT_PED_WEAPON },
        { "GET_MAX_RANGE_OF_CURRENT_PED_WEAPON(_)", WREN_WEAPON_GET_MAX_RANGE_OF_CURRENT_PED_WEAPON },
        { "HAS_VEHICLE_GOT_PROJECTILE_ATTACHED(_,_,_,_)", WREN_WEAPON_HAS_VEHICLE_GOT_PROJECTILE_ATTACHED },
        { "GIVE_WEAPON_COMPONENT_TO_PED(_,_,_)", WREN_WEAPON_GIVE_WEAPON_COMPONENT_TO_PED },
        { "REMOVE_WEAPON_COMPONENT_FROM_PED(_,_,_)", WREN_WEAPON_REMOVE_WEAPON_COMPONENT_FROM_PED },
        { "HAS_PED_GOT_WEAPON_COMPONENT(_,_,_)", WREN_WEAPON_HAS_PED_GOT_WEAPON_COMPONENT },
        { "IS_PED_WEAPON_COMPONENT_ACTIVE(_,_,_)", WREN_WEAPON_IS_PED_WEAPON_COMPONENT_ACTIVE },
        { "REFILL_AMMO_INSTANTLY(_)", WREN_WEAPON_REFILL_AMMO_INSTANTLY },
        { "MAKE_PED_RELOAD(_)", WREN_WEAPON_MAKE_PED_RELOAD },
        { "REQUEST_WEAPON_ASSET(_,_,_)", WREN_WEAPON_REQUEST_WEAPON_ASSET },
        { "HAS_WEAPON_ASSET_LOADED(_)", WREN_WEAPON_HAS_WEAPON_ASSET_LOADED },
        { "REMOVE_WEAPON_ASSET(_)", WREN_WEAPON_REMOVE_WEAPON_ASSET },
        { "CREATE_WEAPON_OBJECT(_,_,_,_,_,_,_,_,_,_)", WREN_WEAPON_CREATE_WEAPON_OBJECT },
        { "GIVE_WEAPON_COMPONENT_TO_WEAPON_OBJECT(_,_)", WREN_WEAPON_GIVE_WEAPON_COMPONENT_TO_WEAPON_OBJECT },
        { "REMOVE_WEAPON_COMPONENT_FROM_WEAPON_OBJECT(_,_)", WREN_WEAPON_REMOVE_WEAPON_COMPONENT_FROM_WEAPON_OBJECT },
        { "HAS_WEAPON_GOT_WEAPON_COMPONENT(_,_)", WREN_WEAPON_HAS_WEAPON_GOT_WEAPON_COMPONENT },
        { "GIVE_WEAPON_OBJECT_TO_PED(_,_)", WREN_WEAPON_GIVE_WEAPON_OBJECT_TO_PED },
        { "DOES_WEAPON_TAKE_WEAPON_COMPONENT(_,_)", WREN_WEAPON_DOES_WEAPON_TAKE_WEAPON_COMPONENT },
        { "GET_WEAPON_OBJECT_FROM_PED(_,_)", WREN_WEAPON_GET_WEAPON_OBJECT_FROM_PED },
        { "GIVE_LOADOUT_TO_PED(_,_)", WREN_WEAPON_GIVE_LOADOUT_TO_PED },
        { "SET_PED_WEAPON_TINT_INDEX(_,_,_)", WREN_WEAPON_SET_PED_WEAPON_TINT_INDEX },
        { "GET_PED_WEAPON_TINT_INDEX(_,_)", WREN_WEAPON_GET_PED_WEAPON_TINT_INDEX },
        { "SET_WEAPON_OBJECT_TINT_INDEX(_,_)", WREN_WEAPON_SET_WEAPON_OBJECT_TINT_INDEX },
        { "GET_WEAPON_OBJECT_TINT_INDEX(_)", WREN_WEAPON_GET_WEAPON_OBJECT_TINT_INDEX },
        { "GET_WEAPON_TINT_COUNT(_)", WREN_WEAPON_GET_WEAPON_TINT_COUNT },
        { "SET_PED_WEAPON_COMPONENT_TINT_INDEX(_,_,_,_)", WREN_WEAPON_SET_PED_WEAPON_COMPONENT_TINT_INDEX },
        { "GET_PED_WEAPON_COMPONENT_TINT_INDEX(_,_,_)", WREN_WEAPON_GET_PED_WEAPON_COMPONENT_TINT_INDEX },
        { "SET_WEAPON_OBJECT_COMPONENT_TINT_INDEX(_,_,_)", WREN_WEAPON_SET_WEAPON_OBJECT_COMPONENT_TINT_INDEX },
        { "GET_WEAPON_OBJECT_COMPONENT_TINT_INDEX(_,_)", WREN_WEAPON_GET_WEAPON_OBJECT_COMPONENT_TINT_INDEX },
        { "GET_PED_WEAPON_CAMO_INDEX(_,_)", WREN_WEAPON_GET_PED_WEAPON_CAMO_INDEX },
        { "SET_WEAPON_OBJECT_CAMO_INDEX(_,_)", WREN_WEAPON_SET_WEAPON_OBJECT_CAMO_INDEX },
        { "GET_WEAPON_HUD_STATS(_)", WREN_WEAPON_GET_WEAPON_HUD_STATS },
        { "GET_WEAPON_COMPONENT_HUD_STATS(_)", WREN_WEAPON_GET_WEAPON_COMPONENT_HUD_STATS },
        { "GET_WEAPON_DAMAGE(_,_)", WREN_WEAPON_GET_WEAPON_DAMAGE },
        { "GET_WEAPON_CLIP_SIZE(_)", WREN_WEAPON_GET_WEAPON_CLIP_SIZE },
        { "GET_WEAPON_TIME_BETWEEN_SHOTS(_)", WREN_WEAPON_GET_WEAPON_TIME_BETWEEN_SHOTS },
        { "SET_PED_CHANCE_OF_FIRING_BLANKS(_,_,_)", WREN_WEAPON_SET_PED_CHANCE_OF_FIRING_BLANKS },
        { "SET_PED_SHOOT_ORDNANCE_WEAPON(_,_)", WREN_WEAPON_SET_PED_SHOOT_ORDNANCE_WEAPON },
        { "REQUEST_WEAPON_HIGH_DETAIL_MODEL(_)", WREN_WEAPON_REQUEST_WEAPON_HIGH_DETAIL_MODEL },
        { "SET_WEAPON_DAMAGE_MODIFIER(_,_)", WREN_WEAPON_SET_WEAPON_DAMAGE_MODIFIER },
        { "SET_WEAPON_AOE_MODIFIER(_,_)", WREN_WEAPON_SET_WEAPON_AOE_MODIFIER },
        { "SET_WEAPON_EFFECT_DURATION_MODIFIER(_,_)", WREN_WEAPON_SET_WEAPON_EFFECT_DURATION_MODIFIER },
        { "IS_PED_CURRENT_WEAPON_SILENCED(_)", WREN_WEAPON_IS_PED_CURRENT_WEAPON_SILENCED },
        { "IS_FLASH_LIGHT_ON(_)", WREN_WEAPON_IS_FLASH_LIGHT_ON },
        { "SET_FLASH_LIGHT_FADE_DISTANCE(_)", WREN_WEAPON_SET_FLASH_LIGHT_FADE_DISTANCE },
        { "SET_FLASH_LIGHT_ACTIVE_HISTORY(_,_)", WREN_WEAPON_SET_FLASH_LIGHT_ACTIVE_HISTORY },
        { "SET_WEAPON_ANIMATION_OVERRIDE(_,_)", WREN_WEAPON_SET_WEAPON_ANIMATION_OVERRIDE },
        { "GET_WEAPON_DAMAGE_TYPE(_)", WREN_WEAPON_GET_WEAPON_DAMAGE_TYPE },
        { "SET_EQIPPED_WEAPON_START_SPINNING_AT_FULL_SPEED(_)", WREN_WEAPON_SET_EQIPPED_WEAPON_START_SPINNING_AT_FULL_SPEED },
        { "CAN_USE_WEAPON_ON_PARACHUTE(_)", WREN_WEAPON_CAN_USE_WEAPON_ON_PARACHUTE },
        { "CREATE_AIR_DEFENCE_SPHERE(_,_,_,_,_,_,_,_)", WREN_WEAPON_CREATE_AIR_DEFENCE_SPHERE },
        { "CREATE_AIR_DEFENCE_ANGLED_AREA(_,_,_,_,_,_,_,_,_,_,_)", WREN_WEAPON_CREATE_AIR_DEFENCE_ANGLED_AREA },
        { "REMOVE_AIR_DEFENCE_SPHERE(_)", WREN_WEAPON_REMOVE_AIR_DEFENCE_SPHERE },
        { "REMOVE_ALL_AIR_DEFENCE_SPHERES()", WREN_WEAPON_REMOVE_ALL_AIR_DEFENCE_SPHERES },
        { "SET_PLAYER_TARGETTABLE_FOR_AIR_DEFENCE_SPHERE(_,_,_)", WREN_WEAPON_SET_PLAYER_TARGETTABLE_FOR_AIR_DEFENCE_SPHERE },
        { "IS_AIR_DEFENCE_SPHERE_IN_AREA(_,_,_,_)", WREN_WEAPON_IS_AIR_DEFENCE_SPHERE_IN_AREA },
        { "FIRE_AIR_DEFENCE_SPHERE_WEAPON_AT_POSITION(_,_,_,_)", WREN_WEAPON_FIRE_AIR_DEFENCE_SPHERE_WEAPON_AT_POSITION },
        { "DOES_AIR_DEFENCE_SPHERE_EXIST(_)", WREN_WEAPON_DOES_AIR_DEFENCE_SPHERE_EXIST },
        { "SET_CAN_PED_SELECT_INVENTORY_WEAPON(_,_,_)", WREN_WEAPON_SET_CAN_PED_SELECT_INVENTORY_WEAPON },
        { "SET_CAN_PED_SELECT_ALL_WEAPONS(_,_)", WREN_WEAPON_SET_CAN_PED_SELECT_ALL_WEAPONS },
        { "GET_ZONE_AT_COORDS(_,_,_)", WREN_ZONE_GET_ZONE_AT_COORDS },
        { "GET_ZONE_FROM_NAME_ID(_)", WREN_ZONE_GET_ZONE_FROM_NAME_ID },
        { "GET_ZONE_POPSCHEDULE(_)", WREN_ZONE_GET_ZONE_POPSCHEDULE },
        { "GET_NAME_OF_ZONE(_,_,_)", WREN_ZONE_GET_NAME_OF_ZONE },
        { "SET_ZONE_ENABLED(_,_)", WREN_ZONE_SET_ZONE_ENABLED },
        { "GET_ZONE_SCUMMINESS(_)", WREN_ZONE_GET_ZONE_SCUMMINESS },
        { "OVERRIDE_POPSCHEDULE_VEHICLE_MODEL(_,_)", WREN_ZONE_OVERRIDE_POPSCHEDULE_VEHICLE_MODEL },
        { "CLEAR_POPSCHEDULE_OVERRIDE_VEHICLE_MODEL(_)", WREN_ZONE_CLEAR_POPSCHEDULE_OVERRIDE_VEHICLE_MODEL },
        { "GET_HASH_OF_MAP_AREA_AT_COORDS(_,_,_)", WREN_ZONE_GET_HASH_OF_MAP_AREA_AT_COORDS },
    };
}
