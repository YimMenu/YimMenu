#pragma once
#include "natives.hpp"

namespace lua::native
{
	void LUA_NATIVE_SYSTEM_WAIT( int ms )
	{
		SYSTEM::WAIT(ms);
	}

	int LUA_NATIVE_SYSTEM_START_NEW_SCRIPT( const char* scriptName, int stackSize )
	{
		auto retval = SYSTEM::START_NEW_SCRIPT(scriptName, stackSize);
		return retval;
	}

	std::tuple<int, Any> LUA_NATIVE_SYSTEM_START_NEW_SCRIPT_WITH_ARGS( const char* scriptName, Any args, int argCount, int stackSize )
	{
		std::tuple<int, Any> return_values;
		std::get<0>(return_values) = SYSTEM::START_NEW_SCRIPT_WITH_ARGS(scriptName, &args, argCount, stackSize);
		std::get<1>(return_values) = args;

		return return_values;
	}

	int LUA_NATIVE_SYSTEM_START_NEW_SCRIPT_WITH_NAME_HASH( Hash scriptHash, int stackSize )
	{
		auto retval = SYSTEM::START_NEW_SCRIPT_WITH_NAME_HASH(scriptHash, stackSize);
		return retval;
	}

	std::tuple<int, Any> LUA_NATIVE_SYSTEM_START_NEW_SCRIPT_WITH_NAME_HASH_AND_ARGS( Hash scriptHash, Any args, int argCount, int stackSize )
	{
		std::tuple<int, Any> return_values;
		std::get<0>(return_values) = SYSTEM::START_NEW_SCRIPT_WITH_NAME_HASH_AND_ARGS(scriptHash, &args, argCount, stackSize);
		std::get<1>(return_values) = args;

		return return_values;
	}

	int LUA_NATIVE_SYSTEM_TIMERA(  )
	{
		auto retval = SYSTEM::TIMERA();
		return retval;
	}

	int LUA_NATIVE_SYSTEM_TIMERB(  )
	{
		auto retval = SYSTEM::TIMERB();
		return retval;
	}

	void LUA_NATIVE_SYSTEM_SETTIMERA( int value )
	{
		SYSTEM::SETTIMERA(value);
	}

	void LUA_NATIVE_SYSTEM_SETTIMERB( int value )
	{
		SYSTEM::SETTIMERB(value);
	}

	float LUA_NATIVE_SYSTEM_TIMESTEP(  )
	{
		auto retval = SYSTEM::TIMESTEP();
		return retval;
	}

	float LUA_NATIVE_SYSTEM_SIN( float value )
	{
		auto retval = SYSTEM::SIN(value);
		return retval;
	}

	float LUA_NATIVE_SYSTEM_COS( float value )
	{
		auto retval = SYSTEM::COS(value);
		return retval;
	}

	float LUA_NATIVE_SYSTEM_SQRT( float value )
	{
		auto retval = SYSTEM::SQRT(value);
		return retval;
	}

	float LUA_NATIVE_SYSTEM_POW( float base, float exponent )
	{
		auto retval = SYSTEM::POW(base, exponent);
		return retval;
	}

	float LUA_NATIVE_SYSTEM_LOG10( float value )
	{
		auto retval = SYSTEM::LOG10(value);
		return retval;
	}

	float LUA_NATIVE_SYSTEM_VMAG( float x, float y, float z )
	{
		auto retval = SYSTEM::VMAG(x, y, z);
		return retval;
	}

	float LUA_NATIVE_SYSTEM_VMAG2( float x, float y, float z )
	{
		auto retval = SYSTEM::VMAG2(x, y, z);
		return retval;
	}

	float LUA_NATIVE_SYSTEM_VDIST( float x1, float y1, float z1, float x2, float y2, float z2 )
	{
		auto retval = SYSTEM::VDIST(x1, y1, z1, x2, y2, z2);
		return retval;
	}

	float LUA_NATIVE_SYSTEM_VDIST2( float x1, float y1, float z1, float x2, float y2, float z2 )
	{
		auto retval = SYSTEM::VDIST2(x1, y1, z1, x2, y2, z2);
		return retval;
	}

	int LUA_NATIVE_SYSTEM_SHIFT_LEFT( int value, int bitShift )
	{
		auto retval = SYSTEM::SHIFT_LEFT(value, bitShift);
		return retval;
	}

	int LUA_NATIVE_SYSTEM_SHIFT_RIGHT( int value, int bitShift )
	{
		auto retval = SYSTEM::SHIFT_RIGHT(value, bitShift);
		return retval;
	}

	int LUA_NATIVE_SYSTEM_FLOOR( float value )
	{
		auto retval = SYSTEM::FLOOR(value);
		return retval;
	}

	int LUA_NATIVE_SYSTEM_CEIL( float value )
	{
		auto retval = SYSTEM::CEIL(value);
		return retval;
	}

	int LUA_NATIVE_SYSTEM_ROUND( float value )
	{
		auto retval = SYSTEM::ROUND(value);
		return retval;
	}

	float LUA_NATIVE_SYSTEM_TO_FLOAT( int value )
	{
		auto retval = SYSTEM::TO_FLOAT(value);
		return retval;
	}

	void LUA_NATIVE_SYSTEM_SET_THIS_THREAD_PRIORITY( int priority )
	{
		SYSTEM::SET_THIS_THREAD_PRIORITY(priority);
	}

	bool LUA_NATIVE_APP_APP_DATA_VALID(  )
	{
		auto retval = (bool)APP::APP_DATA_VALID();
		return retval;
	}

	int LUA_NATIVE_APP_APP_GET_INT( const char* property )
	{
		auto retval = APP::APP_GET_INT(property);
		return retval;
	}

	float LUA_NATIVE_APP_APP_GET_FLOAT( const char* property )
	{
		auto retval = APP::APP_GET_FLOAT(property);
		return retval;
	}

	const char* LUA_NATIVE_APP_APP_GET_STRING( const char* property )
	{
		auto retval = APP::APP_GET_STRING(property);
		return retval;
	}

	void LUA_NATIVE_APP_APP_SET_INT( const char* property, int value )
	{
		APP::APP_SET_INT(property, value);
	}

	void LUA_NATIVE_APP_APP_SET_FLOAT( const char* property, float value )
	{
		APP::APP_SET_FLOAT(property, value);
	}

	void LUA_NATIVE_APP_APP_SET_STRING( const char* property, const char* value )
	{
		APP::APP_SET_STRING(property, value);
	}

	void LUA_NATIVE_APP_APP_SET_APP( const char* appName )
	{
		APP::APP_SET_APP(appName);
	}

	void LUA_NATIVE_APP_APP_SET_BLOCK( const char* blockName )
	{
		APP::APP_SET_BLOCK(blockName);
	}

	void LUA_NATIVE_APP_APP_CLEAR_BLOCK(  )
	{
		APP::APP_CLEAR_BLOCK();
	}

	void LUA_NATIVE_APP_APP_CLOSE_APP(  )
	{
		APP::APP_CLOSE_APP();
	}

	void LUA_NATIVE_APP_APP_CLOSE_BLOCK(  )
	{
		APP::APP_CLOSE_BLOCK();
	}

	bool LUA_NATIVE_APP_APP_HAS_LINKED_SOCIAL_CLUB_ACCOUNT(  )
	{
		auto retval = (bool)APP::APP_HAS_LINKED_SOCIAL_CLUB_ACCOUNT();
		return retval;
	}

	bool LUA_NATIVE_APP_APP_HAS_SYNCED_DATA( const char* appName )
	{
		auto retval = (bool)APP::APP_HAS_SYNCED_DATA(appName);
		return retval;
	}

	void LUA_NATIVE_APP_APP_SAVE_DATA(  )
	{
		APP::APP_SAVE_DATA();
	}

	int LUA_NATIVE_APP_APP_GET_DELETED_FILE_STATUS(  )
	{
		auto retval = APP::APP_GET_DELETED_FILE_STATUS();
		return retval;
	}

	bool LUA_NATIVE_APP_APP_DELETE_APP_DATA( const char* appName )
	{
		auto retval = (bool)APP::APP_DELETE_APP_DATA(appName);
		return retval;
	}

	void LUA_NATIVE_AUDIO_PLAY_PED_RINGTONE( const char* ringtoneName, Ped ped, bool p2 )
	{
		AUDIO::PLAY_PED_RINGTONE(ringtoneName, ped, p2);
	}

	bool LUA_NATIVE_AUDIO_IS_PED_RINGTONE_PLAYING( Ped ped )
	{
		auto retval = (bool)AUDIO::IS_PED_RINGTONE_PLAYING(ped);
		return retval;
	}

	void LUA_NATIVE_AUDIO_STOP_PED_RINGTONE( Ped ped )
	{
		AUDIO::STOP_PED_RINGTONE(ped);
	}

	bool LUA_NATIVE_AUDIO_IS_MOBILE_PHONE_CALL_ONGOING(  )
	{
		auto retval = (bool)AUDIO::IS_MOBILE_PHONE_CALL_ONGOING();
		return retval;
	}

	bool LUA_NATIVE_AUDIO_IS_MOBILE_INTERFERENCE_ACTIVE(  )
	{
		auto retval = (bool)AUDIO::IS_MOBILE_INTERFERENCE_ACTIVE();
		return retval;
	}

	void LUA_NATIVE_AUDIO_CREATE_NEW_SCRIPTED_CONVERSATION(  )
	{
		AUDIO::CREATE_NEW_SCRIPTED_CONVERSATION();
	}

	void LUA_NATIVE_AUDIO_ADD_LINE_TO_CONVERSATION( int index, const char* p1, const char* p2, int p3, int p4, bool p5, bool p6, bool p7, bool p8, int p9, bool p10, bool p11, bool p12 )
	{
		AUDIO::ADD_LINE_TO_CONVERSATION(index, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12);
	}

	void LUA_NATIVE_AUDIO_ADD_PED_TO_CONVERSATION( int index, Ped ped, const char* p2 )
	{
		AUDIO::ADD_PED_TO_CONVERSATION(index, ped, p2);
	}

	void LUA_NATIVE_AUDIO_SET_POSITION_FOR_NULL_CONV_PED( Any p0, float p1, float p2, float p3 )
	{
		AUDIO::SET_POSITION_FOR_NULL_CONV_PED(p0, p1, p2, p3);
	}

	void LUA_NATIVE_AUDIO_SET_ENTITY_FOR_NULL_CONV_PED( int p0, Entity entity )
	{
		AUDIO::SET_ENTITY_FOR_NULL_CONV_PED(p0, entity);
	}

	void LUA_NATIVE_AUDIO_SET_MICROPHONE_POSITION( bool toggle, float x1, float y1, float z1, float x2, float y2, float z2, float x3, float y3, float z3 )
	{
		AUDIO::SET_MICROPHONE_POSITION(toggle, x1, y1, z1, x2, y2, z2, x3, y3, z3);
	}

	void LUA_NATIVE_AUDIO_SET_CONVERSATION_AUDIO_CONTROLLED_BY_ANIM( bool p0 )
	{
		AUDIO::SET_CONVERSATION_AUDIO_CONTROLLED_BY_ANIM(p0);
	}

	void LUA_NATIVE_AUDIO_SET_CONVERSATION_AUDIO_PLACEHOLDER( bool p0 )
	{
		AUDIO::SET_CONVERSATION_AUDIO_PLACEHOLDER(p0);
	}

	void LUA_NATIVE_AUDIO_START_SCRIPT_PHONE_CONVERSATION( bool p0, bool p1 )
	{
		AUDIO::START_SCRIPT_PHONE_CONVERSATION(p0, p1);
	}

	void LUA_NATIVE_AUDIO_PRELOAD_SCRIPT_PHONE_CONVERSATION( bool p0, bool p1 )
	{
		AUDIO::PRELOAD_SCRIPT_PHONE_CONVERSATION(p0, p1);
	}

	void LUA_NATIVE_AUDIO_START_SCRIPT_CONVERSATION( bool p0, bool p1, bool p2, bool p3 )
	{
		AUDIO::START_SCRIPT_CONVERSATION(p0, p1, p2, p3);
	}

	void LUA_NATIVE_AUDIO_PRELOAD_SCRIPT_CONVERSATION( bool p0, bool p1, bool p2, bool p3 )
	{
		AUDIO::PRELOAD_SCRIPT_CONVERSATION(p0, p1, p2, p3);
	}

	void LUA_NATIVE_AUDIO_START_PRELOADED_CONVERSATION(  )
	{
		AUDIO::START_PRELOADED_CONVERSATION();
	}

	bool LUA_NATIVE_AUDIO_GET_IS_PRELOADED_CONVERSATION_READY(  )
	{
		auto retval = (bool)AUDIO::GET_IS_PRELOADED_CONVERSATION_READY();
		return retval;
	}

	bool LUA_NATIVE_AUDIO_IS_SCRIPTED_CONVERSATION_ONGOING(  )
	{
		auto retval = (bool)AUDIO::IS_SCRIPTED_CONVERSATION_ONGOING();
		return retval;
	}

	bool LUA_NATIVE_AUDIO_IS_SCRIPTED_CONVERSATION_LOADED(  )
	{
		auto retval = (bool)AUDIO::IS_SCRIPTED_CONVERSATION_LOADED();
		return retval;
	}

	int LUA_NATIVE_AUDIO_GET_CURRENT_SCRIPTED_CONVERSATION_LINE(  )
	{
		auto retval = AUDIO::GET_CURRENT_SCRIPTED_CONVERSATION_LINE();
		return retval;
	}

	void LUA_NATIVE_AUDIO_PAUSE_SCRIPTED_CONVERSATION( bool p0 )
	{
		AUDIO::PAUSE_SCRIPTED_CONVERSATION(p0);
	}

	void LUA_NATIVE_AUDIO_RESTART_SCRIPTED_CONVERSATION(  )
	{
		AUDIO::RESTART_SCRIPTED_CONVERSATION();
	}

	int LUA_NATIVE_AUDIO_STOP_SCRIPTED_CONVERSATION( bool p0 )
	{
		auto retval = AUDIO::STOP_SCRIPTED_CONVERSATION(p0);
		return retval;
	}

	void LUA_NATIVE_AUDIO_SKIP_TO_NEXT_SCRIPTED_CONVERSATION_LINE(  )
	{
		AUDIO::SKIP_TO_NEXT_SCRIPTED_CONVERSATION_LINE();
	}

	void LUA_NATIVE_AUDIO_INTERRUPT_CONVERSATION( Ped ped, const char* voiceline, const char* speaker )
	{
		AUDIO::INTERRUPT_CONVERSATION(ped, voiceline, speaker);
	}

	void LUA_NATIVE_AUDIO_INTERRUPT_CONVERSATION_AND_PAUSE( Ped ped, const char* p1, const char* speaker )
	{
		AUDIO::INTERRUPT_CONVERSATION_AND_PAUSE(ped, p1, speaker);
	}

	std::tuple<int, Any> LUA_NATIVE_AUDIO_GET_VARIATION_CHOSEN_FOR_SCRIPTED_LINE( Any p0 )
	{
		std::tuple<int, Any> return_values;
		std::get<0>(return_values) = AUDIO::GET_VARIATION_CHOSEN_FOR_SCRIPTED_LINE(&p0);
		std::get<1>(return_values) = p0;

		return return_values;
	}

	void LUA_NATIVE_AUDIO_SET_NO_DUCKING_FOR_CONVERSATION( bool p0 )
	{
		AUDIO::SET_NO_DUCKING_FOR_CONVERSATION(p0);
	}

	void LUA_NATIVE_AUDIO_REGISTER_SCRIPT_WITH_AUDIO( int p0 )
	{
		AUDIO::REGISTER_SCRIPT_WITH_AUDIO(p0);
	}

	void LUA_NATIVE_AUDIO_UNREGISTER_SCRIPT_WITH_AUDIO(  )
	{
		AUDIO::UNREGISTER_SCRIPT_WITH_AUDIO();
	}

	bool LUA_NATIVE_AUDIO_REQUEST_MISSION_AUDIO_BANK( const char* audioBank, bool p1, Any p2 )
	{
		auto retval = (bool)AUDIO::REQUEST_MISSION_AUDIO_BANK(audioBank, p1, p2);
		return retval;
	}

	bool LUA_NATIVE_AUDIO_REQUEST_AMBIENT_AUDIO_BANK( const char* audioBank, bool p1, Any p2 )
	{
		auto retval = (bool)AUDIO::REQUEST_AMBIENT_AUDIO_BANK(audioBank, p1, p2);
		return retval;
	}

	bool LUA_NATIVE_AUDIO_REQUEST_SCRIPT_AUDIO_BANK( const char* audioBank, bool p1, Any p2 )
	{
		auto retval = (bool)AUDIO::REQUEST_SCRIPT_AUDIO_BANK(audioBank, p1, p2);
		return retval;
	}

	bool LUA_NATIVE_AUDIO_HINT_MISSION_AUDIO_BANK( const char* audioBank, bool p1, Any p2 )
	{
		auto retval = (bool)AUDIO::HINT_MISSION_AUDIO_BANK(audioBank, p1, p2);
		return retval;
	}

	bool LUA_NATIVE_AUDIO_HINT_AMBIENT_AUDIO_BANK( const char* audioBank, bool p1, Any p2 )
	{
		auto retval = (bool)AUDIO::HINT_AMBIENT_AUDIO_BANK(audioBank, p1, p2);
		return retval;
	}

	bool LUA_NATIVE_AUDIO_HINT_SCRIPT_AUDIO_BANK( const char* audioBank, bool p1, Any p2 )
	{
		auto retval = (bool)AUDIO::HINT_SCRIPT_AUDIO_BANK(audioBank, p1, p2);
		return retval;
	}

	void LUA_NATIVE_AUDIO_RELEASE_MISSION_AUDIO_BANK(  )
	{
		AUDIO::RELEASE_MISSION_AUDIO_BANK();
	}

	void LUA_NATIVE_AUDIO_RELEASE_AMBIENT_AUDIO_BANK(  )
	{
		AUDIO::RELEASE_AMBIENT_AUDIO_BANK();
	}

	void LUA_NATIVE_AUDIO_RELEASE_NAMED_SCRIPT_AUDIO_BANK( const char* audioBank )
	{
		AUDIO::RELEASE_NAMED_SCRIPT_AUDIO_BANK(audioBank);
	}

	void LUA_NATIVE_AUDIO_RELEASE_SCRIPT_AUDIO_BANK(  )
	{
		AUDIO::RELEASE_SCRIPT_AUDIO_BANK();
	}

	void LUA_NATIVE_AUDIO_UNHINT_AMBIENT_AUDIO_BANK(  )
	{
		AUDIO::UNHINT_AMBIENT_AUDIO_BANK();
	}

	void LUA_NATIVE_AUDIO_UNHINT_SCRIPT_AUDIO_BANK(  )
	{
		AUDIO::UNHINT_SCRIPT_AUDIO_BANK();
	}

	void LUA_NATIVE_AUDIO_UNHINT_NAMED_SCRIPT_AUDIO_BANK( const char* audioBank )
	{
		AUDIO::UNHINT_NAMED_SCRIPT_AUDIO_BANK(audioBank);
	}

	int LUA_NATIVE_AUDIO_GET_SOUND_ID(  )
	{
		auto retval = AUDIO::GET_SOUND_ID();
		return retval;
	}

	void LUA_NATIVE_AUDIO_RELEASE_SOUND_ID( int soundId )
	{
		AUDIO::RELEASE_SOUND_ID(soundId);
	}

	void LUA_NATIVE_AUDIO_PLAY_SOUND( int soundId, const char* audioName, const char* audioRef, bool p3, Any p4, bool p5 )
	{
		AUDIO::PLAY_SOUND(soundId, audioName, audioRef, p3, p4, p5);
	}

	void LUA_NATIVE_AUDIO_PLAY_SOUND_FRONTEND( int soundId, const char* audioName, const char* audioRef, bool p3 )
	{
		AUDIO::PLAY_SOUND_FRONTEND(soundId, audioName, audioRef, p3);
	}

	void LUA_NATIVE_AUDIO_PLAY_DEFERRED_SOUND_FRONTEND( const char* soundName, const char* soundsetName )
	{
		AUDIO::PLAY_DEFERRED_SOUND_FRONTEND(soundName, soundsetName);
	}

	void LUA_NATIVE_AUDIO_PLAY_SOUND_FROM_ENTITY( int soundId, const char* audioName, Entity entity, const char* audioRef, bool isNetwork, Any p5 )
	{
		AUDIO::PLAY_SOUND_FROM_ENTITY(soundId, audioName, entity, audioRef, isNetwork, p5);
	}

	void LUA_NATIVE_AUDIO_PLAY_SOUND_FROM_ENTITY_HASH( int soundId, Hash model, Entity entity, Hash soundSetHash, Any p4, Any p5 )
	{
		AUDIO::PLAY_SOUND_FROM_ENTITY_HASH(soundId, model, entity, soundSetHash, p4, p5);
	}

	void LUA_NATIVE_AUDIO_PLAY_SOUND_FROM_COORD( int soundId, const char* audioName, float x, float y, float z, const char* audioRef, bool isNetwork, int range, bool p8 )
	{
		AUDIO::PLAY_SOUND_FROM_COORD(soundId, audioName, x, y, z, audioRef, isNetwork, range, p8);
	}

	void LUA_NATIVE_AUDIO_UPDATE_SOUND_COORD( int soundId, float x, float y, float z )
	{
		AUDIO::UPDATE_SOUND_COORD(soundId, x, y, z);
	}

	void LUA_NATIVE_AUDIO_STOP_SOUND( int soundId )
	{
		AUDIO::STOP_SOUND(soundId);
	}

	int LUA_NATIVE_AUDIO_GET_NETWORK_ID_FROM_SOUND_ID( int soundId )
	{
		auto retval = AUDIO::GET_NETWORK_ID_FROM_SOUND_ID(soundId);
		return retval;
	}

	int LUA_NATIVE_AUDIO_GET_SOUND_ID_FROM_NETWORK_ID( int netId )
	{
		auto retval = AUDIO::GET_SOUND_ID_FROM_NETWORK_ID(netId);
		return retval;
	}

	void LUA_NATIVE_AUDIO_SET_VARIABLE_ON_SOUND( int soundId, const char* variable, float p2 )
	{
		AUDIO::SET_VARIABLE_ON_SOUND(soundId, variable, p2);
	}

	void LUA_NATIVE_AUDIO_SET_VARIABLE_ON_STREAM( const char* variable, float p1 )
	{
		AUDIO::SET_VARIABLE_ON_STREAM(variable, p1);
	}

	void LUA_NATIVE_AUDIO_OVERRIDE_UNDERWATER_STREAM( const char* p0, bool p1 )
	{
		AUDIO::OVERRIDE_UNDERWATER_STREAM(p0, p1);
	}

	void LUA_NATIVE_AUDIO_SET_VARIABLE_ON_UNDER_WATER_STREAM( const char* variableName, float value )
	{
		AUDIO::SET_VARIABLE_ON_UNDER_WATER_STREAM(variableName, value);
	}

	bool LUA_NATIVE_AUDIO_HAS_SOUND_FINISHED( int soundId )
	{
		auto retval = (bool)AUDIO::HAS_SOUND_FINISHED(soundId);
		return retval;
	}

	void LUA_NATIVE_AUDIO_PLAY_PED_AMBIENT_SPEECH_NATIVE( Ped ped, const char* speechName, const char* speechParam, Any p3 )
	{
		AUDIO::PLAY_PED_AMBIENT_SPEECH_NATIVE(ped, speechName, speechParam, p3);
	}

	void LUA_NATIVE_AUDIO_PLAY_PED_AMBIENT_SPEECH_AND_CLONE_NATIVE( Ped ped, const char* speechName, const char* speechParam, Any p3 )
	{
		AUDIO::PLAY_PED_AMBIENT_SPEECH_AND_CLONE_NATIVE(ped, speechName, speechParam, p3);
	}

	void LUA_NATIVE_AUDIO_PLAY_PED_AMBIENT_SPEECH_WITH_VOICE_NATIVE( Ped ped, const char* speechName, const char* voiceName, const char* speechParam, bool p4 )
	{
		AUDIO::PLAY_PED_AMBIENT_SPEECH_WITH_VOICE_NATIVE(ped, speechName, voiceName, speechParam, p4);
	}

	void LUA_NATIVE_AUDIO_PLAY_AMBIENT_SPEECH_FROM_POSITION_NATIVE( const char* speechName, const char* voiceName, float x, float y, float z, const char* speechParam )
	{
		AUDIO::PLAY_AMBIENT_SPEECH_FROM_POSITION_NATIVE(speechName, voiceName, x, y, z, speechParam);
	}

	void LUA_NATIVE_AUDIO_OVERRIDE_TREVOR_RAGE( const char* voiceEffect )
	{
		AUDIO::OVERRIDE_TREVOR_RAGE(voiceEffect);
	}

	void LUA_NATIVE_AUDIO_RESET_TREVOR_RAGE(  )
	{
		AUDIO::RESET_TREVOR_RAGE();
	}

	void LUA_NATIVE_AUDIO_SET_PLAYER_ANGRY( Ped ped, bool toggle )
	{
		AUDIO::SET_PLAYER_ANGRY(ped, toggle);
	}

	void LUA_NATIVE_AUDIO_PLAY_PAIN( Ped ped, int painID, int p1, Any p3 )
	{
		AUDIO::PLAY_PAIN(ped, painID, p1, p3);
	}

	void LUA_NATIVE_AUDIO_RELEASE_WEAPON_AUDIO(  )
	{
		AUDIO::RELEASE_WEAPON_AUDIO();
	}

	void LUA_NATIVE_AUDIO_ACTIVATE_AUDIO_SLOWMO_MODE( const char* mode )
	{
		AUDIO::ACTIVATE_AUDIO_SLOWMO_MODE(mode);
	}

	void LUA_NATIVE_AUDIO_DEACTIVATE_AUDIO_SLOWMO_MODE( const char* mode )
	{
		AUDIO::DEACTIVATE_AUDIO_SLOWMO_MODE(mode);
	}

	void LUA_NATIVE_AUDIO_SET_AMBIENT_VOICE_NAME( Ped ped, const char* name )
	{
		AUDIO::SET_AMBIENT_VOICE_NAME(ped, name);
	}

	void LUA_NATIVE_AUDIO_SET_AMBIENT_VOICE_NAME_HASH( Ped ped, Hash hash )
	{
		AUDIO::SET_AMBIENT_VOICE_NAME_HASH(ped, hash);
	}

	Hash LUA_NATIVE_AUDIO_GET_AMBIENT_VOICE_NAME_HASH( Ped ped )
	{
		auto retval = AUDIO::GET_AMBIENT_VOICE_NAME_HASH(ped);
		return retval;
	}

	void LUA_NATIVE_AUDIO_SET_PED_VOICE_FULL( Ped ped )
	{
		AUDIO::SET_PED_VOICE_FULL(ped);
	}

	void LUA_NATIVE_AUDIO_SET_PED_RACE_AND_VOICE_GROUP( Ped ped, int p1, Hash voiceGroup )
	{
		AUDIO::SET_PED_RACE_AND_VOICE_GROUP(ped, p1, voiceGroup);
	}

	void LUA_NATIVE_AUDIO_SET_PED_VOICE_GROUP( Ped ped, Hash voiceGroupHash )
	{
		AUDIO::SET_PED_VOICE_GROUP(ped, voiceGroupHash);
	}

	void LUA_NATIVE_AUDIO_SET_PED_VOICE_GROUP_FROM_RACE_TO_PVG( Ped ped, Hash voiceGroupHash )
	{
		AUDIO::SET_PED_VOICE_GROUP_FROM_RACE_TO_PVG(ped, voiceGroupHash);
	}

	void LUA_NATIVE_AUDIO_SET_PED_GENDER( Ped ped, bool p1 )
	{
		AUDIO::SET_PED_GENDER(ped, p1);
	}

	void LUA_NATIVE_AUDIO_STOP_CURRENT_PLAYING_SPEECH( Ped ped )
	{
		AUDIO::STOP_CURRENT_PLAYING_SPEECH(ped);
	}

	void LUA_NATIVE_AUDIO_STOP_CURRENT_PLAYING_AMBIENT_SPEECH( Ped ped )
	{
		AUDIO::STOP_CURRENT_PLAYING_AMBIENT_SPEECH(ped);
	}

	bool LUA_NATIVE_AUDIO_IS_AMBIENT_SPEECH_PLAYING( Ped ped )
	{
		auto retval = (bool)AUDIO::IS_AMBIENT_SPEECH_PLAYING(ped);
		return retval;
	}

	bool LUA_NATIVE_AUDIO_IS_SCRIPTED_SPEECH_PLAYING( Ped p0 )
	{
		auto retval = (bool)AUDIO::IS_SCRIPTED_SPEECH_PLAYING(p0);
		return retval;
	}

	bool LUA_NATIVE_AUDIO_IS_ANY_SPEECH_PLAYING( Ped ped )
	{
		auto retval = (bool)AUDIO::IS_ANY_SPEECH_PLAYING(ped);
		return retval;
	}

	bool LUA_NATIVE_AUDIO_IS_ANY_POSITIONAL_SPEECH_PLAYING(  )
	{
		auto retval = (bool)AUDIO::IS_ANY_POSITIONAL_SPEECH_PLAYING();
		return retval;
	}

	bool LUA_NATIVE_AUDIO_DOES_CONTEXT_EXIST_FOR_THIS_PED( Ped ped, const char* speechName, bool p2 )
	{
		auto retval = (bool)AUDIO::DOES_CONTEXT_EXIST_FOR_THIS_PED(ped, speechName, p2);
		return retval;
	}

	bool LUA_NATIVE_AUDIO_IS_PED_IN_CURRENT_CONVERSATION( Ped ped )
	{
		auto retval = (bool)AUDIO::IS_PED_IN_CURRENT_CONVERSATION(ped);
		return retval;
	}

	void LUA_NATIVE_AUDIO_SET_PED_IS_DRUNK( Ped ped, bool toggle )
	{
		AUDIO::SET_PED_IS_DRUNK(ped, toggle);
	}

	void LUA_NATIVE_AUDIO_PLAY_ANIMAL_VOCALIZATION( Ped pedHandle, int p1, const char* speechName )
	{
		AUDIO::PLAY_ANIMAL_VOCALIZATION(pedHandle, p1, speechName);
	}

	bool LUA_NATIVE_AUDIO_IS_ANIMAL_VOCALIZATION_PLAYING( Ped pedHandle )
	{
		auto retval = (bool)AUDIO::IS_ANIMAL_VOCALIZATION_PLAYING(pedHandle);
		return retval;
	}

	void LUA_NATIVE_AUDIO_SET_ANIMAL_MOOD( Ped animal, int mood )
	{
		AUDIO::SET_ANIMAL_MOOD(animal, mood);
	}

	bool LUA_NATIVE_AUDIO_IS_MOBILE_PHONE_RADIO_ACTIVE(  )
	{
		auto retval = (bool)AUDIO::IS_MOBILE_PHONE_RADIO_ACTIVE();
		return retval;
	}

	void LUA_NATIVE_AUDIO_SET_MOBILE_PHONE_RADIO_STATE( bool state )
	{
		AUDIO::SET_MOBILE_PHONE_RADIO_STATE(state);
	}

	int LUA_NATIVE_AUDIO_GET_PLAYER_RADIO_STATION_INDEX(  )
	{
		auto retval = AUDIO::GET_PLAYER_RADIO_STATION_INDEX();
		return retval;
	}

	const char* LUA_NATIVE_AUDIO_GET_PLAYER_RADIO_STATION_NAME(  )
	{
		auto retval = AUDIO::GET_PLAYER_RADIO_STATION_NAME();
		return retval;
	}

	const char* LUA_NATIVE_AUDIO_GET_RADIO_STATION_NAME( int radioStation )
	{
		auto retval = AUDIO::GET_RADIO_STATION_NAME(radioStation);
		return retval;
	}

	int LUA_NATIVE_AUDIO_GET_PLAYER_RADIO_STATION_GENRE(  )
	{
		auto retval = AUDIO::GET_PLAYER_RADIO_STATION_GENRE();
		return retval;
	}

	bool LUA_NATIVE_AUDIO_IS_RADIO_RETUNING(  )
	{
		auto retval = (bool)AUDIO::IS_RADIO_RETUNING();
		return retval;
	}

	bool LUA_NATIVE_AUDIO_IS_RADIO_FADED_OUT(  )
	{
		auto retval = (bool)AUDIO::IS_RADIO_FADED_OUT();
		return retval;
	}

	void LUA_NATIVE_AUDIO_SET_RADIO_RETUNE_UP(  )
	{
		AUDIO::SET_RADIO_RETUNE_UP();
	}

	void LUA_NATIVE_AUDIO_SET_RADIO_RETUNE_DOWN(  )
	{
		AUDIO::SET_RADIO_RETUNE_DOWN();
	}

	void LUA_NATIVE_AUDIO_SET_RADIO_TO_STATION_NAME( const char* stationName )
	{
		AUDIO::SET_RADIO_TO_STATION_NAME(stationName);
	}

	void LUA_NATIVE_AUDIO_SET_VEH_RADIO_STATION( Vehicle vehicle, const char* radioStation )
	{
		AUDIO::SET_VEH_RADIO_STATION(vehicle, radioStation);
	}

	void LUA_NATIVE_AUDIO_SET_VEH_HAS_NORMAL_RADIO( Vehicle vehicle )
	{
		AUDIO::SET_VEH_HAS_NORMAL_RADIO(vehicle);
	}

	bool LUA_NATIVE_AUDIO_IS_VEHICLE_RADIO_ON( Vehicle vehicle )
	{
		auto retval = (bool)AUDIO::IS_VEHICLE_RADIO_ON(vehicle);
		return retval;
	}

	void LUA_NATIVE_AUDIO_SET_VEH_FORCED_RADIO_THIS_FRAME( Vehicle vehicle )
	{
		AUDIO::SET_VEH_FORCED_RADIO_THIS_FRAME(vehicle);
	}

	void LUA_NATIVE_AUDIO_SET_EMITTER_RADIO_STATION( const char* emitterName, const char* radioStation, Any p2 )
	{
		AUDIO::SET_EMITTER_RADIO_STATION(emitterName, radioStation, p2);
	}

	void LUA_NATIVE_AUDIO_SET_STATIC_EMITTER_ENABLED( const char* emitterName, bool toggle )
	{
		AUDIO::SET_STATIC_EMITTER_ENABLED(emitterName, toggle);
	}

	void LUA_NATIVE_AUDIO_LINK_STATIC_EMITTER_TO_ENTITY( const char* emitterName, Entity entity )
	{
		AUDIO::LINK_STATIC_EMITTER_TO_ENTITY(emitterName, entity);
	}

	void LUA_NATIVE_AUDIO_SET_RADIO_TO_STATION_INDEX( int radioStation )
	{
		AUDIO::SET_RADIO_TO_STATION_INDEX(radioStation);
	}

	void LUA_NATIVE_AUDIO_SET_FRONTEND_RADIO_ACTIVE( bool active )
	{
		AUDIO::SET_FRONTEND_RADIO_ACTIVE(active);
	}

	void LUA_NATIVE_AUDIO_UNLOCK_MISSION_NEWS_STORY( int newsStory )
	{
		AUDIO::UNLOCK_MISSION_NEWS_STORY(newsStory);
	}

	bool LUA_NATIVE_AUDIO_IS_MISSION_NEWS_STORY_UNLOCKED( int newsStory )
	{
		auto retval = (bool)AUDIO::IS_MISSION_NEWS_STORY_UNLOCKED(newsStory);
		return retval;
	}

	int LUA_NATIVE_AUDIO_GET_AUDIBLE_MUSIC_TRACK_TEXT_ID(  )
	{
		auto retval = AUDIO::GET_AUDIBLE_MUSIC_TRACK_TEXT_ID();
		return retval;
	}

	void LUA_NATIVE_AUDIO_PLAY_END_CREDITS_MUSIC( bool play )
	{
		AUDIO::PLAY_END_CREDITS_MUSIC(play);
	}

	void LUA_NATIVE_AUDIO_SKIP_RADIO_FORWARD(  )
	{
		AUDIO::SKIP_RADIO_FORWARD();
	}

	void LUA_NATIVE_AUDIO_FREEZE_RADIO_STATION( const char* radioStation )
	{
		AUDIO::FREEZE_RADIO_STATION(radioStation);
	}

	void LUA_NATIVE_AUDIO_UNFREEZE_RADIO_STATION( const char* radioStation )
	{
		AUDIO::UNFREEZE_RADIO_STATION(radioStation);
	}

	void LUA_NATIVE_AUDIO_SET_RADIO_AUTO_UNFREEZE( bool toggle )
	{
		AUDIO::SET_RADIO_AUTO_UNFREEZE(toggle);
	}

	void LUA_NATIVE_AUDIO_SET_INITIAL_PLAYER_STATION( const char* radioStation )
	{
		AUDIO::SET_INITIAL_PLAYER_STATION(radioStation);
	}

	void LUA_NATIVE_AUDIO_SET_USER_RADIO_CONTROL_ENABLED( bool toggle )
	{
		AUDIO::SET_USER_RADIO_CONTROL_ENABLED(toggle);
	}

	void LUA_NATIVE_AUDIO_SET_RADIO_TRACK( const char* radioStation, const char* radioTrack )
	{
		AUDIO::SET_RADIO_TRACK(radioStation, radioTrack);
	}

	void LUA_NATIVE_AUDIO_SET_RADIO_TRACK_WITH_START_OFFSET( const char* radioStationName, const char* mixName, int p2 )
	{
		AUDIO::SET_RADIO_TRACK_WITH_START_OFFSET(radioStationName, mixName, p2);
	}

	void LUA_NATIVE_AUDIO_SET_NEXT_RADIO_TRACK( const char* radioName, const char* radioTrack, const char* p2, const char* p3 )
	{
		AUDIO::SET_NEXT_RADIO_TRACK(radioName, radioTrack, p2, p3);
	}

	void LUA_NATIVE_AUDIO_SET_VEHICLE_RADIO_LOUD( Vehicle vehicle, bool toggle )
	{
		AUDIO::SET_VEHICLE_RADIO_LOUD(vehicle, toggle);
	}

	bool LUA_NATIVE_AUDIO_CAN_VEHICLE_RECEIVE_CB_RADIO( Vehicle vehicle )
	{
		auto retval = (bool)AUDIO::CAN_VEHICLE_RECEIVE_CB_RADIO(vehicle);
		return retval;
	}

	void LUA_NATIVE_AUDIO_SET_MOBILE_RADIO_ENABLED_DURING_GAMEPLAY( bool toggle )
	{
		AUDIO::SET_MOBILE_RADIO_ENABLED_DURING_GAMEPLAY(toggle);
	}

	bool LUA_NATIVE_AUDIO_DOES_PLAYER_VEH_HAVE_RADIO(  )
	{
		auto retval = (bool)AUDIO::DOES_PLAYER_VEH_HAVE_RADIO();
		return retval;
	}

	bool LUA_NATIVE_AUDIO_IS_PLAYER_VEH_RADIO_ENABLE(  )
	{
		auto retval = (bool)AUDIO::IS_PLAYER_VEH_RADIO_ENABLE();
		return retval;
	}

	void LUA_NATIVE_AUDIO_SET_VEHICLE_RADIO_ENABLED( Vehicle vehicle, bool toggle )
	{
		AUDIO::SET_VEHICLE_RADIO_ENABLED(vehicle, toggle);
	}

	void LUA_NATIVE_AUDIO_SET_POSITIONED_PLAYER_VEHICLE_RADIO_EMITTER_ENABLED( Any p0 )
	{
		AUDIO::SET_POSITIONED_PLAYER_VEHICLE_RADIO_EMITTER_ENABLED(p0);
	}

	void LUA_NATIVE_AUDIO_SET_CUSTOM_RADIO_TRACK_LIST( const char* radioStation, const char* trackListName, bool p2 )
	{
		AUDIO::SET_CUSTOM_RADIO_TRACK_LIST(radioStation, trackListName, p2);
	}

	void LUA_NATIVE_AUDIO_CLEAR_CUSTOM_RADIO_TRACK_LIST( const char* radioStation )
	{
		AUDIO::CLEAR_CUSTOM_RADIO_TRACK_LIST(radioStation);
	}

	int LUA_NATIVE_AUDIO_GET_NUM_UNLOCKED_RADIO_STATIONS(  )
	{
		auto retval = AUDIO::GET_NUM_UNLOCKED_RADIO_STATIONS();
		return retval;
	}

	int LUA_NATIVE_AUDIO_FIND_RADIO_STATION_INDEX( Hash stationNameHash )
	{
		auto retval = AUDIO::FIND_RADIO_STATION_INDEX(stationNameHash);
		return retval;
	}

	void LUA_NATIVE_AUDIO_SET_RADIO_STATION_MUSIC_ONLY( const char* radioStation, bool toggle )
	{
		AUDIO::SET_RADIO_STATION_MUSIC_ONLY(radioStation, toggle);
	}

	void LUA_NATIVE_AUDIO_SET_RADIO_FRONTEND_FADE_TIME( float fadeTime )
	{
		AUDIO::SET_RADIO_FRONTEND_FADE_TIME(fadeTime);
	}

	void LUA_NATIVE_AUDIO_UNLOCK_RADIO_STATION_TRACK_LIST( const char* radioStation, const char* trackListName )
	{
		AUDIO::UNLOCK_RADIO_STATION_TRACK_LIST(radioStation, trackListName);
	}

	void LUA_NATIVE_AUDIO_LOCK_RADIO_STATION_TRACK_LIST( const char* radioStation, const char* trackListName )
	{
		AUDIO::LOCK_RADIO_STATION_TRACK_LIST(radioStation, trackListName);
	}

	void LUA_NATIVE_AUDIO_UPDATE_UNLOCKABLE_DJ_RADIO_TRACKS( bool enableMixes )
	{
		AUDIO::UPDATE_UNLOCKABLE_DJ_RADIO_TRACKS(enableMixes);
	}

	void LUA_NATIVE_AUDIO_LOCK_RADIO_STATION( const char* radioStationName, bool toggle )
	{
		AUDIO::LOCK_RADIO_STATION(radioStationName, toggle);
	}

	void LUA_NATIVE_AUDIO_SET_RADIO_STATION_AS_FAVOURITE( const char* radioStation, bool toggle )
	{
		AUDIO::SET_RADIO_STATION_AS_FAVOURITE(radioStation, toggle);
	}

	bool LUA_NATIVE_AUDIO_IS_RADIO_STATION_FAVOURITED( const char* radioStation )
	{
		auto retval = (bool)AUDIO::IS_RADIO_STATION_FAVOURITED(radioStation);
		return retval;
	}

	std::tuple<bool, float, float, int> LUA_NATIVE_AUDIO_GET_NEXT_AUDIBLE_BEAT( float out1, float out2, int out3 )
	{
		std::tuple<bool, float, float, int> return_values;
		std::get<0>(return_values) = (bool)AUDIO::GET_NEXT_AUDIBLE_BEAT(&out1, &out2, &out3);
		std::get<1>(return_values) = out1;
		std::get<2>(return_values) = out2;
		std::get<3>(return_values) = out3;

		return return_values;
	}

	void LUA_NATIVE_AUDIO_FORCE_MUSIC_TRACK_LIST( const char* radioStation, const char* trackListName, int milliseconds )
	{
		AUDIO::FORCE_MUSIC_TRACK_LIST(radioStation, trackListName, milliseconds);
	}

	int LUA_NATIVE_AUDIO_GET_CURRENT_TRACK_PLAY_TIME( const char* radioStationName )
	{
		auto retval = AUDIO::GET_CURRENT_TRACK_PLAY_TIME(radioStationName);
		return retval;
	}

	Hash LUA_NATIVE_AUDIO_GET_CURRENT_TRACK_SOUND_NAME( const char* radioStationName )
	{
		auto retval = AUDIO::GET_CURRENT_TRACK_SOUND_NAME(radioStationName);
		return retval;
	}

	void LUA_NATIVE_AUDIO_SET_VEHICLE_MISSILE_WARNING_ENABLED( Vehicle vehicle, bool toggle )
	{
		AUDIO::SET_VEHICLE_MISSILE_WARNING_ENABLED(vehicle, toggle);
	}

	void LUA_NATIVE_AUDIO_SET_AMBIENT_ZONE_STATE( const char* zoneName, bool p1, bool p2 )
	{
		AUDIO::SET_AMBIENT_ZONE_STATE(zoneName, p1, p2);
	}

	void LUA_NATIVE_AUDIO_CLEAR_AMBIENT_ZONE_STATE( const char* zoneName, bool p1 )
	{
		AUDIO::CLEAR_AMBIENT_ZONE_STATE(zoneName, p1);
	}

	void LUA_NATIVE_AUDIO_SET_AMBIENT_ZONE_LIST_STATE( const char* ambientZone, bool p1, bool p2 )
	{
		AUDIO::SET_AMBIENT_ZONE_LIST_STATE(ambientZone, p1, p2);
	}

	void LUA_NATIVE_AUDIO_CLEAR_AMBIENT_ZONE_LIST_STATE( const char* ambientZone, bool p1 )
	{
		AUDIO::CLEAR_AMBIENT_ZONE_LIST_STATE(ambientZone, p1);
	}

	void LUA_NATIVE_AUDIO_SET_AMBIENT_ZONE_STATE_PERSISTENT( const char* ambientZone, bool p1, bool p2 )
	{
		AUDIO::SET_AMBIENT_ZONE_STATE_PERSISTENT(ambientZone, p1, p2);
	}

	void LUA_NATIVE_AUDIO_SET_AMBIENT_ZONE_LIST_STATE_PERSISTENT( const char* ambientZone, bool p1, bool p2 )
	{
		AUDIO::SET_AMBIENT_ZONE_LIST_STATE_PERSISTENT(ambientZone, p1, p2);
	}

	bool LUA_NATIVE_AUDIO_IS_AMBIENT_ZONE_ENABLED( const char* ambientZone )
	{
		auto retval = (bool)AUDIO::IS_AMBIENT_ZONE_ENABLED(ambientZone);
		return retval;
	}

	void LUA_NATIVE_AUDIO_REFRESH_CLOSEST_OCEAN_SHORELINE(  )
	{
		AUDIO::REFRESH_CLOSEST_OCEAN_SHORELINE();
	}

	void LUA_NATIVE_AUDIO_SET_CUTSCENE_AUDIO_OVERRIDE( const char* name )
	{
		AUDIO::SET_CUTSCENE_AUDIO_OVERRIDE(name);
	}

	void LUA_NATIVE_AUDIO_SET_VARIABLE_ON_SYNCH_SCENE_AUDIO( const char* variableName, float value )
	{
		AUDIO::SET_VARIABLE_ON_SYNCH_SCENE_AUDIO(variableName, value);
	}

	int LUA_NATIVE_AUDIO_PLAY_POLICE_REPORT( const char* name, float p1 )
	{
		auto retval = AUDIO::PLAY_POLICE_REPORT(name, p1);
		return retval;
	}

	void LUA_NATIVE_AUDIO_CANCEL_ALL_POLICE_REPORTS(  )
	{
		AUDIO::CANCEL_ALL_POLICE_REPORTS();
	}

	void LUA_NATIVE_AUDIO_BLIP_SIREN( Vehicle vehicle )
	{
		AUDIO::BLIP_SIREN(vehicle);
	}

	void LUA_NATIVE_AUDIO_OVERRIDE_VEH_HORN( Vehicle vehicle, bool override, int hornHash )
	{
		AUDIO::OVERRIDE_VEH_HORN(vehicle, override, hornHash);
	}

	bool LUA_NATIVE_AUDIO_IS_HORN_ACTIVE( Vehicle vehicle )
	{
		auto retval = (bool)AUDIO::IS_HORN_ACTIVE(vehicle);
		return retval;
	}

	void LUA_NATIVE_AUDIO_SET_AGGRESSIVE_HORNS( bool toggle )
	{
		AUDIO::SET_AGGRESSIVE_HORNS(toggle);
	}

	void LUA_NATIVE_AUDIO_SET_RADIO_POSITION_AUDIO_MUTE( bool p0 )
	{
		AUDIO::SET_RADIO_POSITION_AUDIO_MUTE(p0);
	}

	void LUA_NATIVE_AUDIO_SET_VEHICLE_CONVERSATIONS_PERSIST( bool p0, bool p1 )
	{
		AUDIO::SET_VEHICLE_CONVERSATIONS_PERSIST(p0, p1);
	}

	void LUA_NATIVE_AUDIO_SET_VEHICLE_CONVERSATIONS_PERSIST_NEW( bool p0, bool p1, bool p2 )
	{
		AUDIO::SET_VEHICLE_CONVERSATIONS_PERSIST_NEW(p0, p1, p2);
	}

	bool LUA_NATIVE_AUDIO_IS_STREAM_PLAYING(  )
	{
		auto retval = (bool)AUDIO::IS_STREAM_PLAYING();
		return retval;
	}

	int LUA_NATIVE_AUDIO_GET_STREAM_PLAY_TIME(  )
	{
		auto retval = AUDIO::GET_STREAM_PLAY_TIME();
		return retval;
	}

	bool LUA_NATIVE_AUDIO_LOAD_STREAM( const char* streamName, const char* soundSet )
	{
		auto retval = (bool)AUDIO::LOAD_STREAM(streamName, soundSet);
		return retval;
	}

	bool LUA_NATIVE_AUDIO_LOAD_STREAM_WITH_START_OFFSET( const char* streamName, int startOffset, const char* soundSet )
	{
		auto retval = (bool)AUDIO::LOAD_STREAM_WITH_START_OFFSET(streamName, startOffset, soundSet);
		return retval;
	}

	void LUA_NATIVE_AUDIO_PLAY_STREAM_FROM_PED( Ped ped )
	{
		AUDIO::PLAY_STREAM_FROM_PED(ped);
	}

	void LUA_NATIVE_AUDIO_PLAY_STREAM_FROM_VEHICLE( Vehicle vehicle )
	{
		AUDIO::PLAY_STREAM_FROM_VEHICLE(vehicle);
	}

	void LUA_NATIVE_AUDIO_PLAY_STREAM_FROM_OBJECT( Object object )
	{
		AUDIO::PLAY_STREAM_FROM_OBJECT(object);
	}

	void LUA_NATIVE_AUDIO_PLAY_STREAM_FRONTEND(  )
	{
		AUDIO::PLAY_STREAM_FRONTEND();
	}

	void LUA_NATIVE_AUDIO_PLAY_STREAM_FROM_POSITION( float x, float y, float z )
	{
		AUDIO::PLAY_STREAM_FROM_POSITION(x, y, z);
	}

	void LUA_NATIVE_AUDIO_STOP_STREAM(  )
	{
		AUDIO::STOP_STREAM();
	}

	void LUA_NATIVE_AUDIO_STOP_PED_SPEAKING( Ped ped, bool shaking )
	{
		AUDIO::STOP_PED_SPEAKING(ped, shaking);
	}

	void LUA_NATIVE_AUDIO_BLOCK_ALL_SPEECH_FROM_PED( Ped ped, bool p1, bool p2 )
	{
		AUDIO::BLOCK_ALL_SPEECH_FROM_PED(ped, p1, p2);
	}

	void LUA_NATIVE_AUDIO_STOP_PED_SPEAKING_SYNCED( Ped ped, bool p1 )
	{
		AUDIO::STOP_PED_SPEAKING_SYNCED(ped, p1);
	}

	void LUA_NATIVE_AUDIO_DISABLE_PED_PAIN_AUDIO( Ped ped, bool toggle )
	{
		AUDIO::DISABLE_PED_PAIN_AUDIO(ped, toggle);
	}

	bool LUA_NATIVE_AUDIO_IS_AMBIENT_SPEECH_DISABLED( Ped ped )
	{
		auto retval = (bool)AUDIO::IS_AMBIENT_SPEECH_DISABLED(ped);
		return retval;
	}

	void LUA_NATIVE_AUDIO_BLOCK_SPEECH_CONTEXT_GROUP( const char* p0, int p1 )
	{
		AUDIO::BLOCK_SPEECH_CONTEXT_GROUP(p0, p1);
	}

	void LUA_NATIVE_AUDIO_UNBLOCK_SPEECH_CONTEXT_GROUP( const char* p0 )
	{
		AUDIO::UNBLOCK_SPEECH_CONTEXT_GROUP(p0);
	}

	void LUA_NATIVE_AUDIO_SET_SIREN_WITH_NO_DRIVER( Vehicle vehicle, bool toggle )
	{
		AUDIO::SET_SIREN_WITH_NO_DRIVER(vehicle, toggle);
	}

	void LUA_NATIVE_AUDIO_SET_SIREN_BYPASS_MP_DRIVER_CHECK( Vehicle vehicle, bool toggle )
	{
		AUDIO::SET_SIREN_BYPASS_MP_DRIVER_CHECK(vehicle, toggle);
	}

	void LUA_NATIVE_AUDIO_TRIGGER_SIREN_AUDIO( Vehicle vehicle )
	{
		AUDIO::TRIGGER_SIREN_AUDIO(vehicle);
	}

	void LUA_NATIVE_AUDIO_SET_HORN_PERMANENTLY_ON( Vehicle vehicle )
	{
		AUDIO::SET_HORN_PERMANENTLY_ON(vehicle);
	}

	void LUA_NATIVE_AUDIO_SET_HORN_ENABLED( Vehicle vehicle, bool toggle )
	{
		AUDIO::SET_HORN_ENABLED(vehicle, toggle);
	}

	void LUA_NATIVE_AUDIO_SET_AUDIO_VEHICLE_PRIORITY( Vehicle vehicle, Any p1 )
	{
		AUDIO::SET_AUDIO_VEHICLE_PRIORITY(vehicle, p1);
	}

	void LUA_NATIVE_AUDIO_SET_HORN_PERMANENTLY_ON_TIME( Vehicle vehicle, float time )
	{
		AUDIO::SET_HORN_PERMANENTLY_ON_TIME(vehicle, time);
	}

	void LUA_NATIVE_AUDIO_USE_SIREN_AS_HORN( Vehicle vehicle, bool toggle )
	{
		AUDIO::USE_SIREN_AS_HORN(vehicle, toggle);
	}

	void LUA_NATIVE_AUDIO_FORCE_USE_AUDIO_GAME_OBJECT( Vehicle vehicle, const char* audioName )
	{
		AUDIO::FORCE_USE_AUDIO_GAME_OBJECT(vehicle, audioName);
	}

	void LUA_NATIVE_AUDIO_PRELOAD_VEHICLE_AUDIO_BANK( Hash vehicleModel )
	{
		AUDIO::PRELOAD_VEHICLE_AUDIO_BANK(vehicleModel);
	}

	void LUA_NATIVE_AUDIO_SET_VEHICLE_STARTUP_REV_SOUND( Vehicle vehicle, const char* p1, const char* p2 )
	{
		AUDIO::SET_VEHICLE_STARTUP_REV_SOUND(vehicle, p1, p2);
	}

	void LUA_NATIVE_AUDIO_RESET_VEHICLE_STARTUP_REV_SOUND( Vehicle vehicle )
	{
		AUDIO::RESET_VEHICLE_STARTUP_REV_SOUND(vehicle);
	}

	void LUA_NATIVE_AUDIO_SET_VEHICLE_FORCE_REVERSE_WARNING( Any p0, Any p1 )
	{
		AUDIO::SET_VEHICLE_FORCE_REVERSE_WARNING(p0, p1);
	}

	bool LUA_NATIVE_AUDIO_IS_VEHICLE_AUDIBLY_DAMAGED( Vehicle vehicle )
	{
		auto retval = (bool)AUDIO::IS_VEHICLE_AUDIBLY_DAMAGED(vehicle);
		return retval;
	}

	void LUA_NATIVE_AUDIO_SET_VEHICLE_AUDIO_ENGINE_DAMAGE_FACTOR( Vehicle vehicle, float damageFactor )
	{
		AUDIO::SET_VEHICLE_AUDIO_ENGINE_DAMAGE_FACTOR(vehicle, damageFactor);
	}

	void LUA_NATIVE_AUDIO_SET_VEHICLE_AUDIO_BODY_DAMAGE_FACTOR( Vehicle vehicle, float intensity )
	{
		AUDIO::SET_VEHICLE_AUDIO_BODY_DAMAGE_FACTOR(vehicle, intensity);
	}

	void LUA_NATIVE_AUDIO_ENABLE_VEHICLE_FANBELT_DAMAGE( Vehicle vehicle, bool toggle )
	{
		AUDIO::ENABLE_VEHICLE_FANBELT_DAMAGE(vehicle, toggle);
	}

	void LUA_NATIVE_AUDIO_ENABLE_VEHICLE_EXHAUST_POPS( Vehicle vehicle, bool toggle )
	{
		AUDIO::ENABLE_VEHICLE_EXHAUST_POPS(vehicle, toggle);
	}

	void LUA_NATIVE_AUDIO_SET_VEHICLE_BOOST_ACTIVE( Vehicle vehicle, bool toggle )
	{
		AUDIO::SET_VEHICLE_BOOST_ACTIVE(vehicle, toggle);
	}

	void LUA_NATIVE_AUDIO_SET_PLAYER_VEHICLE_ALARM_AUDIO_ACTIVE( Vehicle vehicle, bool toggle )
	{
		AUDIO::SET_PLAYER_VEHICLE_ALARM_AUDIO_ACTIVE(vehicle, toggle);
	}

	void LUA_NATIVE_AUDIO_SET_SCRIPT_UPDATE_DOOR_AUDIO( Hash doorHash, bool toggle )
	{
		AUDIO::SET_SCRIPT_UPDATE_DOOR_AUDIO(doorHash, toggle);
	}

	void LUA_NATIVE_AUDIO_PLAY_VEHICLE_DOOR_OPEN_SOUND( Vehicle vehicle, int doorId )
	{
		AUDIO::PLAY_VEHICLE_DOOR_OPEN_SOUND(vehicle, doorId);
	}

	void LUA_NATIVE_AUDIO_PLAY_VEHICLE_DOOR_CLOSE_SOUND( Vehicle vehicle, int doorId )
	{
		AUDIO::PLAY_VEHICLE_DOOR_CLOSE_SOUND(vehicle, doorId);
	}

	void LUA_NATIVE_AUDIO_ENABLE_STALL_WARNING_SOUNDS( Vehicle vehicle, bool toggle )
	{
		AUDIO::ENABLE_STALL_WARNING_SOUNDS(vehicle, toggle);
	}

	bool LUA_NATIVE_AUDIO_IS_GAME_IN_CONTROL_OF_MUSIC(  )
	{
		auto retval = (bool)AUDIO::IS_GAME_IN_CONTROL_OF_MUSIC();
		return retval;
	}

	void LUA_NATIVE_AUDIO_SET_GPS_ACTIVE( bool active )
	{
		AUDIO::SET_GPS_ACTIVE(active);
	}

	void LUA_NATIVE_AUDIO_PLAY_MISSION_COMPLETE_AUDIO( const char* audioName )
	{
		AUDIO::PLAY_MISSION_COMPLETE_AUDIO(audioName);
	}

	bool LUA_NATIVE_AUDIO_IS_MISSION_COMPLETE_PLAYING(  )
	{
		auto retval = (bool)AUDIO::IS_MISSION_COMPLETE_PLAYING();
		return retval;
	}

	bool LUA_NATIVE_AUDIO_IS_MISSION_COMPLETE_READY_FOR_UI(  )
	{
		auto retval = (bool)AUDIO::IS_MISSION_COMPLETE_READY_FOR_UI();
		return retval;
	}

	void LUA_NATIVE_AUDIO_BLOCK_DEATH_JINGLE( bool toggle )
	{
		AUDIO::BLOCK_DEATH_JINGLE(toggle);
	}

	bool LUA_NATIVE_AUDIO_START_AUDIO_SCENE( const char* scene )
	{
		auto retval = (bool)AUDIO::START_AUDIO_SCENE(scene);
		return retval;
	}

	void LUA_NATIVE_AUDIO_STOP_AUDIO_SCENE( const char* scene )
	{
		AUDIO::STOP_AUDIO_SCENE(scene);
	}

	void LUA_NATIVE_AUDIO_STOP_AUDIO_SCENES(  )
	{
		AUDIO::STOP_AUDIO_SCENES();
	}

	bool LUA_NATIVE_AUDIO_IS_AUDIO_SCENE_ACTIVE( const char* scene )
	{
		auto retval = (bool)AUDIO::IS_AUDIO_SCENE_ACTIVE(scene);
		return retval;
	}

	void LUA_NATIVE_AUDIO_SET_AUDIO_SCENE_VARIABLE( const char* scene, const char* variable, float value )
	{
		AUDIO::SET_AUDIO_SCENE_VARIABLE(scene, variable, value);
	}

	void LUA_NATIVE_AUDIO_SET_AUDIO_SCRIPT_CLEANUP_TIME( int time )
	{
		AUDIO::SET_AUDIO_SCRIPT_CLEANUP_TIME(time);
	}

	void LUA_NATIVE_AUDIO_ADD_ENTITY_TO_AUDIO_MIX_GROUP( Entity entity, const char* groupName, float p2 )
	{
		AUDIO::ADD_ENTITY_TO_AUDIO_MIX_GROUP(entity, groupName, p2);
	}

	void LUA_NATIVE_AUDIO_REMOVE_ENTITY_FROM_AUDIO_MIX_GROUP( Entity entity, float p1 )
	{
		AUDIO::REMOVE_ENTITY_FROM_AUDIO_MIX_GROUP(entity, p1);
	}

	bool LUA_NATIVE_AUDIO_AUDIO_IS_MUSIC_PLAYING(  )
	{
		auto retval = (bool)AUDIO::AUDIO_IS_MUSIC_PLAYING();
		return retval;
	}

	bool LUA_NATIVE_AUDIO_AUDIO_IS_SCRIPTED_MUSIC_PLAYING(  )
	{
		auto retval = (bool)AUDIO::AUDIO_IS_SCRIPTED_MUSIC_PLAYING();
		return retval;
	}

	bool LUA_NATIVE_AUDIO_PREPARE_MUSIC_EVENT( const char* eventName )
	{
		auto retval = (bool)AUDIO::PREPARE_MUSIC_EVENT(eventName);
		return retval;
	}

	bool LUA_NATIVE_AUDIO_CANCEL_MUSIC_EVENT( const char* eventName )
	{
		auto retval = (bool)AUDIO::CANCEL_MUSIC_EVENT(eventName);
		return retval;
	}

	bool LUA_NATIVE_AUDIO_TRIGGER_MUSIC_EVENT( const char* eventName )
	{
		auto retval = (bool)AUDIO::TRIGGER_MUSIC_EVENT(eventName);
		return retval;
	}

	bool LUA_NATIVE_AUDIO_IS_MUSIC_ONESHOT_PLAYING(  )
	{
		auto retval = (bool)AUDIO::IS_MUSIC_ONESHOT_PLAYING();
		return retval;
	}

	int LUA_NATIVE_AUDIO_GET_MUSIC_PLAYTIME(  )
	{
		auto retval = AUDIO::GET_MUSIC_PLAYTIME();
		return retval;
	}

	void LUA_NATIVE_AUDIO_SET_GLOBAL_RADIO_SIGNAL_LEVEL( Any p0 )
	{
		AUDIO::SET_GLOBAL_RADIO_SIGNAL_LEVEL(p0);
	}

	void LUA_NATIVE_AUDIO_RECORD_BROKEN_GLASS( float x, float y, float z, float radius )
	{
		AUDIO::RECORD_BROKEN_GLASS(x, y, z, radius);
	}

	void LUA_NATIVE_AUDIO_CLEAR_ALL_BROKEN_GLASS(  )
	{
		AUDIO::CLEAR_ALL_BROKEN_GLASS();
	}

	void LUA_NATIVE_AUDIO_SCRIPT_OVERRIDES_WIND_ELEVATION( bool p0, Any p1 )
	{
		AUDIO::SCRIPT_OVERRIDES_WIND_ELEVATION(p0, p1);
	}

	void LUA_NATIVE_AUDIO_SET_PED_WALLA_DENSITY( float p0, float p1 )
	{
		AUDIO::SET_PED_WALLA_DENSITY(p0, p1);
	}

	void LUA_NATIVE_AUDIO_SET_PED_INTERIOR_WALLA_DENSITY( float p0, float p1 )
	{
		AUDIO::SET_PED_INTERIOR_WALLA_DENSITY(p0, p1);
	}

	void LUA_NATIVE_AUDIO_FORCE_PED_PANIC_WALLA(  )
	{
		AUDIO::FORCE_PED_PANIC_WALLA();
	}

	bool LUA_NATIVE_AUDIO_PREPARE_ALARM( const char* alarmName )
	{
		auto retval = (bool)AUDIO::PREPARE_ALARM(alarmName);
		return retval;
	}

	void LUA_NATIVE_AUDIO_START_ALARM( const char* alarmName, bool p2 )
	{
		AUDIO::START_ALARM(alarmName, p2);
	}

	void LUA_NATIVE_AUDIO_STOP_ALARM( const char* alarmName, bool toggle )
	{
		AUDIO::STOP_ALARM(alarmName, toggle);
	}

	void LUA_NATIVE_AUDIO_STOP_ALL_ALARMS( bool stop )
	{
		AUDIO::STOP_ALL_ALARMS(stop);
	}

	bool LUA_NATIVE_AUDIO_IS_ALARM_PLAYING( const char* alarmName )
	{
		auto retval = (bool)AUDIO::IS_ALARM_PLAYING(alarmName);
		return retval;
	}

	Hash LUA_NATIVE_AUDIO_GET_VEHICLE_DEFAULT_HORN( Vehicle vehicle )
	{
		auto retval = AUDIO::GET_VEHICLE_DEFAULT_HORN(vehicle);
		return retval;
	}

	Hash LUA_NATIVE_AUDIO_GET_VEHICLE_DEFAULT_HORN_IGNORE_MODS( Vehicle vehicle )
	{
		auto retval = AUDIO::GET_VEHICLE_DEFAULT_HORN_IGNORE_MODS(vehicle);
		return retval;
	}

	void LUA_NATIVE_AUDIO_RESET_PED_AUDIO_FLAGS( Ped ped )
	{
		AUDIO::RESET_PED_AUDIO_FLAGS(ped);
	}

	void LUA_NATIVE_AUDIO_SET_PED_FOOTSTEPS_EVENTS_ENABLED( Ped ped, bool toggle )
	{
		AUDIO::SET_PED_FOOTSTEPS_EVENTS_ENABLED(ped, toggle);
	}

	void LUA_NATIVE_AUDIO_SET_PED_CLOTH_EVENTS_ENABLED( Ped ped, bool toggle )
	{
		AUDIO::SET_PED_CLOTH_EVENTS_ENABLED(ped, toggle);
	}

	void LUA_NATIVE_AUDIO_OVERRIDE_PLAYER_GROUND_MATERIAL( Hash hash, bool toggle )
	{
		AUDIO::OVERRIDE_PLAYER_GROUND_MATERIAL(hash, toggle);
	}

	void LUA_NATIVE_AUDIO_USE_FOOTSTEP_SCRIPT_SWEETENERS( Ped ped, bool p1, Hash hash )
	{
		AUDIO::USE_FOOTSTEP_SCRIPT_SWEETENERS(ped, p1, hash);
	}

	void LUA_NATIVE_AUDIO_OVERRIDE_MICROPHONE_SETTINGS( Hash hash, bool toggle )
	{
		AUDIO::OVERRIDE_MICROPHONE_SETTINGS(hash, toggle);
	}

	void LUA_NATIVE_AUDIO_FREEZE_MICROPHONE(  )
	{
		AUDIO::FREEZE_MICROPHONE();
	}

	void LUA_NATIVE_AUDIO_DISTANT_COP_CAR_SIRENS( bool value )
	{
		AUDIO::DISTANT_COP_CAR_SIRENS(value);
	}

	void LUA_NATIVE_AUDIO_SET_SIREN_CAN_BE_CONTROLLED_BY_AUDIO( Vehicle vehicle, bool p1 )
	{
		AUDIO::SET_SIREN_CAN_BE_CONTROLLED_BY_AUDIO(vehicle, p1);
	}

	void LUA_NATIVE_AUDIO_ENABLE_STUNT_JUMP_AUDIO(  )
	{
		AUDIO::ENABLE_STUNT_JUMP_AUDIO();
	}

	void LUA_NATIVE_AUDIO_SET_AUDIO_FLAG( const char* flagName, bool toggle )
	{
		AUDIO::SET_AUDIO_FLAG(flagName, toggle);
	}

	bool LUA_NATIVE_AUDIO_PREPARE_SYNCHRONIZED_AUDIO_EVENT( const char* audioEvent, Any p1 )
	{
		auto retval = (bool)AUDIO::PREPARE_SYNCHRONIZED_AUDIO_EVENT(audioEvent, p1);
		return retval;
	}

	bool LUA_NATIVE_AUDIO_PREPARE_SYNCHRONIZED_AUDIO_EVENT_FOR_SCENE( int sceneID, const char* audioEvent )
	{
		auto retval = (bool)AUDIO::PREPARE_SYNCHRONIZED_AUDIO_EVENT_FOR_SCENE(sceneID, audioEvent);
		return retval;
	}

	bool LUA_NATIVE_AUDIO_PLAY_SYNCHRONIZED_AUDIO_EVENT( int sceneID )
	{
		auto retval = (bool)AUDIO::PLAY_SYNCHRONIZED_AUDIO_EVENT(sceneID);
		return retval;
	}

	bool LUA_NATIVE_AUDIO_STOP_SYNCHRONIZED_AUDIO_EVENT( int sceneID )
	{
		auto retval = (bool)AUDIO::STOP_SYNCHRONIZED_AUDIO_EVENT(sceneID);
		return retval;
	}

	void LUA_NATIVE_AUDIO_INIT_SYNCH_SCENE_AUDIO_WITH_POSITION( const char* audioEvent, float x, float y, float z )
	{
		AUDIO::INIT_SYNCH_SCENE_AUDIO_WITH_POSITION(audioEvent, x, y, z);
	}

	void LUA_NATIVE_AUDIO_INIT_SYNCH_SCENE_AUDIO_WITH_ENTITY( const char* audioEvent, Entity entity )
	{
		AUDIO::INIT_SYNCH_SCENE_AUDIO_WITH_ENTITY(audioEvent, entity);
	}

	void LUA_NATIVE_AUDIO_SET_AUDIO_SPECIAL_EFFECT_MODE( int mode )
	{
		AUDIO::SET_AUDIO_SPECIAL_EFFECT_MODE(mode);
	}

	void LUA_NATIVE_AUDIO_SET_PORTAL_SETTINGS_OVERRIDE( const char* p0, const char* p1 )
	{
		AUDIO::SET_PORTAL_SETTINGS_OVERRIDE(p0, p1);
	}

	void LUA_NATIVE_AUDIO_REMOVE_PORTAL_SETTINGS_OVERRIDE( const char* p0 )
	{
		AUDIO::REMOVE_PORTAL_SETTINGS_OVERRIDE(p0);
	}

	void LUA_NATIVE_AUDIO_STOP_SMOKE_GRENADE_EXPLOSION_SOUNDS(  )
	{
		AUDIO::STOP_SMOKE_GRENADE_EXPLOSION_SOUNDS();
	}

	int LUA_NATIVE_AUDIO_GET_MUSIC_VOL_SLIDER(  )
	{
		auto retval = AUDIO::GET_MUSIC_VOL_SLIDER();
		return retval;
	}

	void LUA_NATIVE_AUDIO_REQUEST_TENNIS_BANKS( Ped ped )
	{
		AUDIO::REQUEST_TENNIS_BANKS(ped);
	}

	void LUA_NATIVE_AUDIO_UNREQUEST_TENNIS_BANKS(  )
	{
		AUDIO::UNREQUEST_TENNIS_BANKS();
	}

	void LUA_NATIVE_AUDIO_SET_SKIP_MINIGUN_SPIN_UP_AUDIO( bool p0 )
	{
		AUDIO::SET_SKIP_MINIGUN_SPIN_UP_AUDIO(p0);
	}

	void LUA_NATIVE_AUDIO_STOP_CUTSCENE_AUDIO(  )
	{
		AUDIO::STOP_CUTSCENE_AUDIO();
	}

	bool LUA_NATIVE_AUDIO_HAS_LOADED_MP_DATA_SET(  )
	{
		auto retval = (bool)AUDIO::HAS_LOADED_MP_DATA_SET();
		return retval;
	}

	bool LUA_NATIVE_AUDIO_HAS_LOADED_SP_DATA_SET(  )
	{
		auto retval = (bool)AUDIO::HAS_LOADED_SP_DATA_SET();
		return retval;
	}

	int LUA_NATIVE_AUDIO_GET_VEHICLE_HORN_SOUND_INDEX( Vehicle vehicle )
	{
		auto retval = AUDIO::GET_VEHICLE_HORN_SOUND_INDEX(vehicle);
		return retval;
	}

	void LUA_NATIVE_AUDIO_SET_VEHICLE_HORN_SOUND_INDEX( Vehicle vehicle, int value )
	{
		AUDIO::SET_VEHICLE_HORN_SOUND_INDEX(vehicle, value);
	}

	void LUA_NATIVE_BRAIN_ADD_SCRIPT_TO_RANDOM_PED( const char* name, Hash model, float p2, float p3 )
	{
		BRAIN::ADD_SCRIPT_TO_RANDOM_PED(name, model, p2, p3);
	}

	void LUA_NATIVE_BRAIN_REGISTER_OBJECT_SCRIPT_BRAIN( const char* scriptName, Hash modelHash, int p2, float activationRange, int p4, int p5 )
	{
		BRAIN::REGISTER_OBJECT_SCRIPT_BRAIN(scriptName, modelHash, p2, activationRange, p4, p5);
	}

	bool LUA_NATIVE_BRAIN_IS_OBJECT_WITHIN_BRAIN_ACTIVATION_RANGE( Object object )
	{
		auto retval = (bool)BRAIN::IS_OBJECT_WITHIN_BRAIN_ACTIVATION_RANGE(object);
		return retval;
	}

	void LUA_NATIVE_BRAIN_REGISTER_WORLD_POINT_SCRIPT_BRAIN( const char* scriptName, float activationRange, int p2 )
	{
		BRAIN::REGISTER_WORLD_POINT_SCRIPT_BRAIN(scriptName, activationRange, p2);
	}

	bool LUA_NATIVE_BRAIN_IS_WORLD_POINT_WITHIN_BRAIN_ACTIVATION_RANGE(  )
	{
		auto retval = (bool)BRAIN::IS_WORLD_POINT_WITHIN_BRAIN_ACTIVATION_RANGE();
		return retval;
	}

	void LUA_NATIVE_BRAIN_ENABLE_SCRIPT_BRAIN_SET( int brainSet )
	{
		BRAIN::ENABLE_SCRIPT_BRAIN_SET(brainSet);
	}

	void LUA_NATIVE_BRAIN_DISABLE_SCRIPT_BRAIN_SET( int brainSet )
	{
		BRAIN::DISABLE_SCRIPT_BRAIN_SET(brainSet);
	}

	void LUA_NATIVE_BRAIN_REACTIVATE_ALL_WORLD_BRAINS_THAT_ARE_WAITING_TILL_OUT_OF_RANGE(  )
	{
		BRAIN::REACTIVATE_ALL_WORLD_BRAINS_THAT_ARE_WAITING_TILL_OUT_OF_RANGE();
	}

	void LUA_NATIVE_BRAIN_REACTIVATE_ALL_OBJECT_BRAINS_THAT_ARE_WAITING_TILL_OUT_OF_RANGE(  )
	{
		BRAIN::REACTIVATE_ALL_OBJECT_BRAINS_THAT_ARE_WAITING_TILL_OUT_OF_RANGE();
	}

	void LUA_NATIVE_BRAIN_REACTIVATE_NAMED_WORLD_BRAINS_WAITING_TILL_OUT_OF_RANGE( const char* scriptName )
	{
		BRAIN::REACTIVATE_NAMED_WORLD_BRAINS_WAITING_TILL_OUT_OF_RANGE(scriptName);
	}

	void LUA_NATIVE_BRAIN_REACTIVATE_NAMED_OBJECT_BRAINS_WAITING_TILL_OUT_OF_RANGE( const char* scriptName )
	{
		BRAIN::REACTIVATE_NAMED_OBJECT_BRAINS_WAITING_TILL_OUT_OF_RANGE(scriptName);
	}

	void LUA_NATIVE_CAM_RENDER_SCRIPT_CAMS( bool render, bool ease, int easeTime, bool p3, bool p4, Any p5 )
	{
		CAM::RENDER_SCRIPT_CAMS(render, ease, easeTime, p3, p4, p5);
	}

	void LUA_NATIVE_CAM_STOP_RENDERING_SCRIPT_CAMS_USING_CATCH_UP( bool render, float p1, int p2, Any p3 )
	{
		CAM::STOP_RENDERING_SCRIPT_CAMS_USING_CATCH_UP(render, p1, p2, p3);
	}

	Cam LUA_NATIVE_CAM_CREATE_CAM( const char* camName, bool p1 )
	{
		auto retval = CAM::CREATE_CAM(camName, p1);
		return retval;
	}

	Cam LUA_NATIVE_CAM_CREATE_CAM_WITH_PARAMS( const char* camName, float posX, float posY, float posZ, float rotX, float rotY, float rotZ, float fov, bool p8, int p9 )
	{
		auto retval = CAM::CREATE_CAM_WITH_PARAMS(camName, posX, posY, posZ, rotX, rotY, rotZ, fov, p8, p9);
		return retval;
	}

	Cam LUA_NATIVE_CAM_CREATE_CAMERA( Hash camHash, bool p1 )
	{
		auto retval = CAM::CREATE_CAMERA(camHash, p1);
		return retval;
	}

	Cam LUA_NATIVE_CAM_CREATE_CAMERA_WITH_PARAMS( Hash camHash, float posX, float posY, float posZ, float rotX, float rotY, float rotZ, float fov, bool p8, Any p9 )
	{
		auto retval = CAM::CREATE_CAMERA_WITH_PARAMS(camHash, posX, posY, posZ, rotX, rotY, rotZ, fov, p8, p9);
		return retval;
	}

	void LUA_NATIVE_CAM_DESTROY_CAM( Cam cam, bool bScriptHostCam )
	{
		CAM::DESTROY_CAM(cam, bScriptHostCam);
	}

	void LUA_NATIVE_CAM_DESTROY_ALL_CAMS( bool bScriptHostCam )
	{
		CAM::DESTROY_ALL_CAMS(bScriptHostCam);
	}

	bool LUA_NATIVE_CAM_DOES_CAM_EXIST( Cam cam )
	{
		auto retval = (bool)CAM::DOES_CAM_EXIST(cam);
		return retval;
	}

	void LUA_NATIVE_CAM_SET_CAM_ACTIVE( Cam cam, bool active )
	{
		CAM::SET_CAM_ACTIVE(cam, active);
	}

	bool LUA_NATIVE_CAM_IS_CAM_ACTIVE( Cam cam )
	{
		auto retval = (bool)CAM::IS_CAM_ACTIVE(cam);
		return retval;
	}

	bool LUA_NATIVE_CAM_IS_CAM_RENDERING( Cam cam )
	{
		auto retval = (bool)CAM::IS_CAM_RENDERING(cam);
		return retval;
	}

	Cam LUA_NATIVE_CAM_GET_RENDERING_CAM(  )
	{
		auto retval = CAM::GET_RENDERING_CAM();
		return retval;
	}

	Vector3 LUA_NATIVE_CAM_GET_CAM_COORD( Cam cam )
	{
		auto retval = CAM::GET_CAM_COORD(cam);
		return retval;
	}

	Vector3 LUA_NATIVE_CAM_GET_CAM_ROT( Cam cam, int rotationOrder )
	{
		auto retval = CAM::GET_CAM_ROT(cam, rotationOrder);
		return retval;
	}

	float LUA_NATIVE_CAM_GET_CAM_FOV( Cam cam )
	{
		auto retval = CAM::GET_CAM_FOV(cam);
		return retval;
	}

	float LUA_NATIVE_CAM_GET_CAM_NEAR_CLIP( Cam cam )
	{
		auto retval = CAM::GET_CAM_NEAR_CLIP(cam);
		return retval;
	}

	float LUA_NATIVE_CAM_GET_CAM_FAR_CLIP( Cam cam )
	{
		auto retval = CAM::GET_CAM_FAR_CLIP(cam);
		return retval;
	}

	float LUA_NATIVE_CAM_GET_CAM_NEAR_DOF( Cam cam )
	{
		auto retval = CAM::GET_CAM_NEAR_DOF(cam);
		return retval;
	}

	float LUA_NATIVE_CAM_GET_CAM_FAR_DOF( Cam cam )
	{
		auto retval = CAM::GET_CAM_FAR_DOF(cam);
		return retval;
	}

	float LUA_NATIVE_CAM_GET_CAM_DOF_STRENGTH( Cam cam )
	{
		auto retval = CAM::GET_CAM_DOF_STRENGTH(cam);
		return retval;
	}

	void LUA_NATIVE_CAM_SET_CAM_PARAMS( Cam cam, float posX, float posY, float posZ, float rotX, float rotY, float rotZ, float fieldOfView, Any p8, int p9, int p10, int p11 )
	{
		CAM::SET_CAM_PARAMS(cam, posX, posY, posZ, rotX, rotY, rotZ, fieldOfView, p8, p9, p10, p11);
	}

	void LUA_NATIVE_CAM_SET_CAM_COORD( Cam cam, float posX, float posY, float posZ )
	{
		CAM::SET_CAM_COORD(cam, posX, posY, posZ);
	}

	void LUA_NATIVE_CAM_SET_CAM_ROT( Cam cam, float rotX, float rotY, float rotZ, int rotationOrder )
	{
		CAM::SET_CAM_ROT(cam, rotX, rotY, rotZ, rotationOrder);
	}

	void LUA_NATIVE_CAM_SET_CAM_FOV( Cam cam, float fieldOfView )
	{
		CAM::SET_CAM_FOV(cam, fieldOfView);
	}

	void LUA_NATIVE_CAM_SET_CAM_NEAR_CLIP( Cam cam, float nearClip )
	{
		CAM::SET_CAM_NEAR_CLIP(cam, nearClip);
	}

	void LUA_NATIVE_CAM_SET_CAM_FAR_CLIP( Cam cam, float farClip )
	{
		CAM::SET_CAM_FAR_CLIP(cam, farClip);
	}

	void LUA_NATIVE_CAM_FORCE_CAM_FAR_CLIP( Cam cam, float p1 )
	{
		CAM::FORCE_CAM_FAR_CLIP(cam, p1);
	}

	void LUA_NATIVE_CAM_SET_CAM_MOTION_BLUR_STRENGTH( Cam cam, float strength )
	{
		CAM::SET_CAM_MOTION_BLUR_STRENGTH(cam, strength);
	}

	void LUA_NATIVE_CAM_SET_CAM_NEAR_DOF( Cam cam, float nearDOF )
	{
		CAM::SET_CAM_NEAR_DOF(cam, nearDOF);
	}

	void LUA_NATIVE_CAM_SET_CAM_FAR_DOF( Cam cam, float farDOF )
	{
		CAM::SET_CAM_FAR_DOF(cam, farDOF);
	}

	void LUA_NATIVE_CAM_SET_CAM_DOF_STRENGTH( Cam cam, float dofStrength )
	{
		CAM::SET_CAM_DOF_STRENGTH(cam, dofStrength);
	}

	void LUA_NATIVE_CAM_SET_CAM_DOF_PLANES( Cam cam, float p1, float p2, float p3, float p4 )
	{
		CAM::SET_CAM_DOF_PLANES(cam, p1, p2, p3, p4);
	}

	void LUA_NATIVE_CAM_SET_CAM_USE_SHALLOW_DOF_MODE( Cam cam, bool toggle )
	{
		CAM::SET_CAM_USE_SHALLOW_DOF_MODE(cam, toggle);
	}

	void LUA_NATIVE_CAM_SET_USE_HI_DOF(  )
	{
		CAM::SET_USE_HI_DOF();
	}

	void LUA_NATIVE_CAM_SET_USE_HI_DOF_ON_SYNCED_SCENE_THIS_UPDATE(  )
	{
		CAM::SET_USE_HI_DOF_ON_SYNCED_SCENE_THIS_UPDATE();
	}

	void LUA_NATIVE_CAM_SET_CAM_DOF_OVERRIDDEN_FOCUS_DISTANCE( Cam camera, float p1 )
	{
		CAM::SET_CAM_DOF_OVERRIDDEN_FOCUS_DISTANCE(camera, p1);
	}

	void LUA_NATIVE_CAM_SET_CAM_DOF_OVERRIDDEN_FOCUS_DISTANCE_BLEND_LEVEL( Any p0, float p1 )
	{
		CAM::SET_CAM_DOF_OVERRIDDEN_FOCUS_DISTANCE_BLEND_LEVEL(p0, p1);
	}

	void LUA_NATIVE_CAM_SET_CAM_DOF_FNUMBER_OF_LENS( Cam camera, float p1 )
	{
		CAM::SET_CAM_DOF_FNUMBER_OF_LENS(camera, p1);
	}

	void LUA_NATIVE_CAM_SET_CAM_DOF_FOCAL_LENGTH_MULTIPLIER( Cam camera, float multiplier )
	{
		CAM::SET_CAM_DOF_FOCAL_LENGTH_MULTIPLIER(camera, multiplier);
	}

	void LUA_NATIVE_CAM_SET_CAM_DOF_FOCUS_DISTANCE_BIAS( Cam camera, float p1 )
	{
		CAM::SET_CAM_DOF_FOCUS_DISTANCE_BIAS(camera, p1);
	}

	void LUA_NATIVE_CAM_SET_CAM_DOF_MAX_NEAR_IN_FOCUS_DISTANCE( Cam camera, float p1 )
	{
		CAM::SET_CAM_DOF_MAX_NEAR_IN_FOCUS_DISTANCE(camera, p1);
	}

	void LUA_NATIVE_CAM_SET_CAM_DOF_MAX_NEAR_IN_FOCUS_DISTANCE_BLEND_LEVEL( Cam camera, float p1 )
	{
		CAM::SET_CAM_DOF_MAX_NEAR_IN_FOCUS_DISTANCE_BLEND_LEVEL(camera, p1);
	}

	void LUA_NATIVE_CAM_SET_CAM_DOF_SHOULD_KEEP_LOOK_AT_TARGET_IN_FOCUS( Cam camera, bool state )
	{
		CAM::SET_CAM_DOF_SHOULD_KEEP_LOOK_AT_TARGET_IN_FOCUS(camera, state);
	}

	void LUA_NATIVE_CAM_ATTACH_CAM_TO_ENTITY( Cam cam, Entity entity, float xOffset, float yOffset, float zOffset, bool isRelative )
	{
		CAM::ATTACH_CAM_TO_ENTITY(cam, entity, xOffset, yOffset, zOffset, isRelative);
	}

	void LUA_NATIVE_CAM_ATTACH_CAM_TO_PED_BONE( Cam cam, Ped ped, int boneIndex, float x, float y, float z, bool heading )
	{
		CAM::ATTACH_CAM_TO_PED_BONE(cam, ped, boneIndex, x, y, z, heading);
	}

	void LUA_NATIVE_CAM_HARD_ATTACH_CAM_TO_PED_BONE( Cam cam, Ped ped, int boneIndex, float p3, float p4, float p5, float p6, float p7, float p8, bool p9 )
	{
		CAM::HARD_ATTACH_CAM_TO_PED_BONE(cam, ped, boneIndex, p3, p4, p5, p6, p7, p8, p9);
	}

	void LUA_NATIVE_CAM_HARD_ATTACH_CAM_TO_ENTITY( Cam cam, Entity entity, float xRot, float yRot, float zRot, float xOffset, float yOffset, float zOffset, bool isRelative )
	{
		CAM::HARD_ATTACH_CAM_TO_ENTITY(cam, entity, xRot, yRot, zRot, xOffset, yOffset, zOffset, isRelative);
	}

	void LUA_NATIVE_CAM_ATTACH_CAM_TO_VEHICLE_BONE( Cam cam, Vehicle vehicle, int boneIndex, bool relativeRotation, float rotX, float rotY, float rotZ, float offsetX, float offsetY, float offsetZ, bool fixedDirection )
	{
		CAM::ATTACH_CAM_TO_VEHICLE_BONE(cam, vehicle, boneIndex, relativeRotation, rotX, rotY, rotZ, offsetX, offsetY, offsetZ, fixedDirection);
	}

	void LUA_NATIVE_CAM_DETACH_CAM( Cam cam )
	{
		CAM::DETACH_CAM(cam);
	}

	void LUA_NATIVE_CAM_SET_CAM_INHERIT_ROLL_VEHICLE( Cam cam, bool p1 )
	{
		CAM::SET_CAM_INHERIT_ROLL_VEHICLE(cam, p1);
	}

	void LUA_NATIVE_CAM_POINT_CAM_AT_COORD( Cam cam, float x, float y, float z )
	{
		CAM::POINT_CAM_AT_COORD(cam, x, y, z);
	}

	void LUA_NATIVE_CAM_POINT_CAM_AT_ENTITY( Cam cam, Entity entity, float p2, float p3, float p4, bool p5 )
	{
		CAM::POINT_CAM_AT_ENTITY(cam, entity, p2, p3, p4, p5);
	}

	void LUA_NATIVE_CAM_POINT_CAM_AT_PED_BONE( Cam cam, Ped ped, int boneIndex, float x, float y, float z, bool p6 )
	{
		CAM::POINT_CAM_AT_PED_BONE(cam, ped, boneIndex, x, y, z, p6);
	}

	void LUA_NATIVE_CAM_STOP_CAM_POINTING( Cam cam )
	{
		CAM::STOP_CAM_POINTING(cam);
	}

	void LUA_NATIVE_CAM_SET_CAM_AFFECTS_AIMING( Cam cam, bool toggle )
	{
		CAM::SET_CAM_AFFECTS_AIMING(cam, toggle);
	}

	void LUA_NATIVE_CAM_SET_CAM_CONTROLS_MINI_MAP_HEADING( Cam cam, bool toggle )
	{
		CAM::SET_CAM_CONTROLS_MINI_MAP_HEADING(cam, toggle);
	}

	void LUA_NATIVE_CAM_SET_CAM_IS_INSIDE_VEHICLE( Cam cam, bool toggle )
	{
		CAM::SET_CAM_IS_INSIDE_VEHICLE(cam, toggle);
	}

	void LUA_NATIVE_CAM_ALLOW_MOTION_BLUR_DECAY( Any p0, bool p1 )
	{
		CAM::ALLOW_MOTION_BLUR_DECAY(p0, p1);
	}

	void LUA_NATIVE_CAM_SET_CAM_DEBUG_NAME( Cam camera, const char* name )
	{
		CAM::SET_CAM_DEBUG_NAME(camera, name);
	}

	Cam LUA_NATIVE_CAM_GET_DEBUG_CAM(  )
	{
		auto retval = CAM::GET_DEBUG_CAM();
		return retval;
	}

	void LUA_NATIVE_CAM_ADD_CAM_SPLINE_NODE( Cam camera, float x, float y, float z, float xRot, float yRot, float zRot, int length, int smoothingStyle, int rotationOrder )
	{
		CAM::ADD_CAM_SPLINE_NODE(camera, x, y, z, xRot, yRot, zRot, length, smoothingStyle, rotationOrder);
	}

	void LUA_NATIVE_CAM_ADD_CAM_SPLINE_NODE_USING_CAMERA_FRAME( Cam cam, Cam cam2, int length, int p3 )
	{
		CAM::ADD_CAM_SPLINE_NODE_USING_CAMERA_FRAME(cam, cam2, length, p3);
	}

	void LUA_NATIVE_CAM_ADD_CAM_SPLINE_NODE_USING_CAMERA( Cam cam, Cam cam2, int length, int p3 )
	{
		CAM::ADD_CAM_SPLINE_NODE_USING_CAMERA(cam, cam2, length, p3);
	}

	void LUA_NATIVE_CAM_ADD_CAM_SPLINE_NODE_USING_GAMEPLAY_FRAME( Cam cam, int length, int p2 )
	{
		CAM::ADD_CAM_SPLINE_NODE_USING_GAMEPLAY_FRAME(cam, length, p2);
	}

	void LUA_NATIVE_CAM_SET_CAM_SPLINE_PHASE( Cam cam, float p1 )
	{
		CAM::SET_CAM_SPLINE_PHASE(cam, p1);
	}

	float LUA_NATIVE_CAM_GET_CAM_SPLINE_PHASE( Cam cam )
	{
		auto retval = CAM::GET_CAM_SPLINE_PHASE(cam);
		return retval;
	}

	float LUA_NATIVE_CAM_GET_CAM_SPLINE_NODE_PHASE( Cam cam )
	{
		auto retval = CAM::GET_CAM_SPLINE_NODE_PHASE(cam);
		return retval;
	}

	void LUA_NATIVE_CAM_SET_CAM_SPLINE_DURATION( Cam cam, int timeDuration )
	{
		CAM::SET_CAM_SPLINE_DURATION(cam, timeDuration);
	}

	void LUA_NATIVE_CAM_SET_CAM_SPLINE_SMOOTHING_STYLE( Cam cam, int smoothingStyle )
	{
		CAM::SET_CAM_SPLINE_SMOOTHING_STYLE(cam, smoothingStyle);
	}

	int LUA_NATIVE_CAM_GET_CAM_SPLINE_NODE_INDEX( Cam cam )
	{
		auto retval = CAM::GET_CAM_SPLINE_NODE_INDEX(cam);
		return retval;
	}

	void LUA_NATIVE_CAM_SET_CAM_SPLINE_NODE_EASE( Cam cam, int easingFunction, int p2, float p3 )
	{
		CAM::SET_CAM_SPLINE_NODE_EASE(cam, easingFunction, p2, p3);
	}

	void LUA_NATIVE_CAM_SET_CAM_SPLINE_NODE_VELOCITY_SCALE( Cam cam, int p1, float scale )
	{
		CAM::SET_CAM_SPLINE_NODE_VELOCITY_SCALE(cam, p1, scale);
	}

	void LUA_NATIVE_CAM_OVERRIDE_CAM_SPLINE_VELOCITY( Cam cam, int p1, float p2, float p3 )
	{
		CAM::OVERRIDE_CAM_SPLINE_VELOCITY(cam, p1, p2, p3);
	}

	void LUA_NATIVE_CAM_OVERRIDE_CAM_SPLINE_MOTION_BLUR( Cam cam, int p1, float p2, float p3 )
	{
		CAM::OVERRIDE_CAM_SPLINE_MOTION_BLUR(cam, p1, p2, p3);
	}

	void LUA_NATIVE_CAM_SET_CAM_SPLINE_NODE_EXTRA_FLAGS( Cam cam, int p1, int flags )
	{
		CAM::SET_CAM_SPLINE_NODE_EXTRA_FLAGS(cam, p1, flags);
	}

	bool LUA_NATIVE_CAM_IS_CAM_SPLINE_PAUSED( Cam cam )
	{
		auto retval = (bool)CAM::IS_CAM_SPLINE_PAUSED(cam);
		return retval;
	}

	void LUA_NATIVE_CAM_SET_CAM_ACTIVE_WITH_INTERP( Cam camTo, Cam camFrom, int duration, int easeLocation, int easeRotation )
	{
		CAM::SET_CAM_ACTIVE_WITH_INTERP(camTo, camFrom, duration, easeLocation, easeRotation);
	}

	bool LUA_NATIVE_CAM_IS_CAM_INTERPOLATING( Cam cam )
	{
		auto retval = (bool)CAM::IS_CAM_INTERPOLATING(cam);
		return retval;
	}

	void LUA_NATIVE_CAM_SHAKE_CAM( Cam cam, const char* type, float amplitude )
	{
		CAM::SHAKE_CAM(cam, type, amplitude);
	}

	void LUA_NATIVE_CAM_ANIMATED_SHAKE_CAM( Cam cam, const char* p1, const char* p2, const char* p3, float amplitude )
	{
		CAM::ANIMATED_SHAKE_CAM(cam, p1, p2, p3, amplitude);
	}

	bool LUA_NATIVE_CAM_IS_CAM_SHAKING( Cam cam )
	{
		auto retval = (bool)CAM::IS_CAM_SHAKING(cam);
		return retval;
	}

	void LUA_NATIVE_CAM_SET_CAM_SHAKE_AMPLITUDE( Cam cam, float amplitude )
	{
		CAM::SET_CAM_SHAKE_AMPLITUDE(cam, amplitude);
	}

	void LUA_NATIVE_CAM_STOP_CAM_SHAKING( Cam cam, bool p1 )
	{
		CAM::STOP_CAM_SHAKING(cam, p1);
	}

	void LUA_NATIVE_CAM_SHAKE_SCRIPT_GLOBAL( const char* p0, float p1 )
	{
		CAM::SHAKE_SCRIPT_GLOBAL(p0, p1);
	}

	void LUA_NATIVE_CAM_ANIMATED_SHAKE_SCRIPT_GLOBAL( const char* p0, const char* p1, const char* p2, float p3 )
	{
		CAM::ANIMATED_SHAKE_SCRIPT_GLOBAL(p0, p1, p2, p3);
	}

	bool LUA_NATIVE_CAM_IS_SCRIPT_GLOBAL_SHAKING(  )
	{
		auto retval = (bool)CAM::IS_SCRIPT_GLOBAL_SHAKING();
		return retval;
	}

	void LUA_NATIVE_CAM_STOP_SCRIPT_GLOBAL_SHAKING( bool p0 )
	{
		CAM::STOP_SCRIPT_GLOBAL_SHAKING(p0);
	}

	void LUA_NATIVE_CAM_TRIGGER_VEHICLE_PART_BROKEN_CAMERA_SHAKE( Vehicle vehicle, int p1, float p2 )
	{
		CAM::TRIGGER_VEHICLE_PART_BROKEN_CAMERA_SHAKE(vehicle, p1, p2);
	}

	bool LUA_NATIVE_CAM_PLAY_CAM_ANIM( Cam cam, const char* animName, const char* animDictionary, float x, float y, float z, float xRot, float yRot, float zRot, bool p9, int p10 )
	{
		auto retval = (bool)CAM::PLAY_CAM_ANIM(cam, animName, animDictionary, x, y, z, xRot, yRot, zRot, p9, p10);
		return retval;
	}

	bool LUA_NATIVE_CAM_IS_CAM_PLAYING_ANIM( Cam cam, const char* animName, const char* animDictionary )
	{
		auto retval = (bool)CAM::IS_CAM_PLAYING_ANIM(cam, animName, animDictionary);
		return retval;
	}

	void LUA_NATIVE_CAM_SET_CAM_ANIM_CURRENT_PHASE( Cam cam, float phase )
	{
		CAM::SET_CAM_ANIM_CURRENT_PHASE(cam, phase);
	}

	float LUA_NATIVE_CAM_GET_CAM_ANIM_CURRENT_PHASE( Cam cam )
	{
		auto retval = CAM::GET_CAM_ANIM_CURRENT_PHASE(cam);
		return retval;
	}

	bool LUA_NATIVE_CAM_PLAY_SYNCHRONIZED_CAM_ANIM( Any p0, Any p1, const char* animName, const char* animDictionary )
	{
		auto retval = (bool)CAM::PLAY_SYNCHRONIZED_CAM_ANIM(p0, p1, animName, animDictionary);
		return retval;
	}

	void LUA_NATIVE_CAM_SET_FLY_CAM_HORIZONTAL_RESPONSE( Cam cam, float p1, float p2, float p3 )
	{
		CAM::SET_FLY_CAM_HORIZONTAL_RESPONSE(cam, p1, p2, p3);
	}

	void LUA_NATIVE_CAM_SET_FLY_CAM_VERTICAL_RESPONSE( Cam cam, float p1, float p2, float p3 )
	{
		CAM::SET_FLY_CAM_VERTICAL_RESPONSE(cam, p1, p2, p3);
	}

	void LUA_NATIVE_CAM_SET_FLY_CAM_MAX_HEIGHT( Cam cam, float height )
	{
		CAM::SET_FLY_CAM_MAX_HEIGHT(cam, height);
	}

	void LUA_NATIVE_CAM_SET_FLY_CAM_COORD_AND_CONSTRAIN( Cam cam, float x, float y, float z )
	{
		CAM::SET_FLY_CAM_COORD_AND_CONSTRAIN(cam, x, y, z);
	}

	void LUA_NATIVE_CAM_SET_FLY_CAM_VERTICAL_CONTROLS_THIS_UPDATE( Cam cam )
	{
		CAM::SET_FLY_CAM_VERTICAL_CONTROLS_THIS_UPDATE(cam);
	}

	bool LUA_NATIVE_CAM_WAS_FLY_CAM_CONSTRAINED_ON_PREVIOUS_UDPATE( Cam cam )
	{
		auto retval = (bool)CAM::WAS_FLY_CAM_CONSTRAINED_ON_PREVIOUS_UDPATE(cam);
		return retval;
	}

	bool LUA_NATIVE_CAM_IS_SCREEN_FADED_OUT(  )
	{
		auto retval = (bool)CAM::IS_SCREEN_FADED_OUT();
		return retval;
	}

	bool LUA_NATIVE_CAM_IS_SCREEN_FADED_IN(  )
	{
		auto retval = (bool)CAM::IS_SCREEN_FADED_IN();
		return retval;
	}

	bool LUA_NATIVE_CAM_IS_SCREEN_FADING_OUT(  )
	{
		auto retval = (bool)CAM::IS_SCREEN_FADING_OUT();
		return retval;
	}

	bool LUA_NATIVE_CAM_IS_SCREEN_FADING_IN(  )
	{
		auto retval = (bool)CAM::IS_SCREEN_FADING_IN();
		return retval;
	}

	void LUA_NATIVE_CAM_DO_SCREEN_FADE_IN( int duration )
	{
		CAM::DO_SCREEN_FADE_IN(duration);
	}

	void LUA_NATIVE_CAM_DO_SCREEN_FADE_OUT( int duration )
	{
		CAM::DO_SCREEN_FADE_OUT(duration);
	}

	void LUA_NATIVE_CAM_SET_WIDESCREEN_BORDERS( bool p0, int p1 )
	{
		CAM::SET_WIDESCREEN_BORDERS(p0, p1);
	}

	bool LUA_NATIVE_CAM_ARE_WIDESCREEN_BORDERS_ACTIVE(  )
	{
		auto retval = (bool)CAM::ARE_WIDESCREEN_BORDERS_ACTIVE();
		return retval;
	}

	Vector3 LUA_NATIVE_CAM_GET_GAMEPLAY_CAM_COORD(  )
	{
		auto retval = CAM::GET_GAMEPLAY_CAM_COORD();
		return retval;
	}

	Vector3 LUA_NATIVE_CAM_GET_GAMEPLAY_CAM_ROT( int rotationOrder )
	{
		auto retval = CAM::GET_GAMEPLAY_CAM_ROT(rotationOrder);
		return retval;
	}

	float LUA_NATIVE_CAM_GET_GAMEPLAY_CAM_FOV(  )
	{
		auto retval = CAM::GET_GAMEPLAY_CAM_FOV();
		return retval;
	}

	void LUA_NATIVE_CAM_SET_GAMEPLAY_CAM_MOTION_BLUR_SCALING_THIS_UPDATE( float p0 )
	{
		CAM::SET_GAMEPLAY_CAM_MOTION_BLUR_SCALING_THIS_UPDATE(p0);
	}

	void LUA_NATIVE_CAM_SET_GAMEPLAY_CAM_MAX_MOTION_BLUR_STRENGTH_THIS_UPDATE( float p0 )
	{
		CAM::SET_GAMEPLAY_CAM_MAX_MOTION_BLUR_STRENGTH_THIS_UPDATE(p0);
	}

	float LUA_NATIVE_CAM_GET_GAMEPLAY_CAM_RELATIVE_HEADING(  )
	{
		auto retval = CAM::GET_GAMEPLAY_CAM_RELATIVE_HEADING();
		return retval;
	}

	void LUA_NATIVE_CAM_SET_GAMEPLAY_CAM_RELATIVE_HEADING( float heading )
	{
		CAM::SET_GAMEPLAY_CAM_RELATIVE_HEADING(heading);
	}

	float LUA_NATIVE_CAM_GET_GAMEPLAY_CAM_RELATIVE_PITCH(  )
	{
		auto retval = CAM::GET_GAMEPLAY_CAM_RELATIVE_PITCH();
		return retval;
	}

	void LUA_NATIVE_CAM_SET_GAMEPLAY_CAM_RELATIVE_PITCH( float angle, float scalingFactor )
	{
		CAM::SET_GAMEPLAY_CAM_RELATIVE_PITCH(angle, scalingFactor);
	}

	void LUA_NATIVE_CAM_RESET_GAMEPLAY_CAM_FULL_ATTACH_PARENT_TRANSFORM_TIMER(  )
	{
		CAM::RESET_GAMEPLAY_CAM_FULL_ATTACH_PARENT_TRANSFORM_TIMER();
	}

	void LUA_NATIVE_CAM_FORCE_CAMERA_RELATIVE_HEADING_AND_PITCH( float roll, float pitch, float yaw )
	{
		CAM::FORCE_CAMERA_RELATIVE_HEADING_AND_PITCH(roll, pitch, yaw);
	}

	void LUA_NATIVE_CAM_FORCE_BONNET_CAMERA_RELATIVE_HEADING_AND_PITCH( float p0, float p1 )
	{
		CAM::FORCE_BONNET_CAMERA_RELATIVE_HEADING_AND_PITCH(p0, p1);
	}

	void LUA_NATIVE_CAM_SET_FIRST_PERSON_SHOOTER_CAMERA_HEADING( float yaw )
	{
		CAM::SET_FIRST_PERSON_SHOOTER_CAMERA_HEADING(yaw);
	}

	void LUA_NATIVE_CAM_SET_FIRST_PERSON_SHOOTER_CAMERA_PITCH( float pitch )
	{
		CAM::SET_FIRST_PERSON_SHOOTER_CAMERA_PITCH(pitch);
	}

	void LUA_NATIVE_CAM_SET_SCRIPTED_CAMERA_IS_FIRST_PERSON_THIS_FRAME( bool p0 )
	{
		CAM::SET_SCRIPTED_CAMERA_IS_FIRST_PERSON_THIS_FRAME(p0);
	}

	void LUA_NATIVE_CAM_SHAKE_GAMEPLAY_CAM( const char* shakeName, float intensity )
	{
		CAM::SHAKE_GAMEPLAY_CAM(shakeName, intensity);
	}

	bool LUA_NATIVE_CAM_IS_GAMEPLAY_CAM_SHAKING(  )
	{
		auto retval = (bool)CAM::IS_GAMEPLAY_CAM_SHAKING();
		return retval;
	}

	void LUA_NATIVE_CAM_SET_GAMEPLAY_CAM_SHAKE_AMPLITUDE( float amplitude )
	{
		CAM::SET_GAMEPLAY_CAM_SHAKE_AMPLITUDE(amplitude);
	}

	void LUA_NATIVE_CAM_STOP_GAMEPLAY_CAM_SHAKING( bool p0 )
	{
		CAM::STOP_GAMEPLAY_CAM_SHAKING(p0);
	}

	void LUA_NATIVE_CAM_SET_GAMEPLAY_CAM_FOLLOW_PED_THIS_UPDATE( Ped ped )
	{
		CAM::SET_GAMEPLAY_CAM_FOLLOW_PED_THIS_UPDATE(ped);
	}

	bool LUA_NATIVE_CAM_IS_GAMEPLAY_CAM_RENDERING(  )
	{
		auto retval = (bool)CAM::IS_GAMEPLAY_CAM_RENDERING();
		return retval;
	}

	bool LUA_NATIVE_CAM_IS_INTERPOLATING_FROM_SCRIPT_CAMS(  )
	{
		auto retval = (bool)CAM::IS_INTERPOLATING_FROM_SCRIPT_CAMS();
		return retval;
	}

	bool LUA_NATIVE_CAM_IS_INTERPOLATING_TO_SCRIPT_CAMS(  )
	{
		auto retval = (bool)CAM::IS_INTERPOLATING_TO_SCRIPT_CAMS();
		return retval;
	}

	void LUA_NATIVE_CAM_SET_GAMEPLAY_CAM_ALTITUDE_FOV_SCALING_STATE( bool p0 )
	{
		CAM::SET_GAMEPLAY_CAM_ALTITUDE_FOV_SCALING_STATE(p0);
	}

	void LUA_NATIVE_CAM_DISABLE_GAMEPLAY_CAM_ALTITUDE_FOV_SCALING_THIS_UPDATE(  )
	{
		CAM::DISABLE_GAMEPLAY_CAM_ALTITUDE_FOV_SCALING_THIS_UPDATE();
	}

	bool LUA_NATIVE_CAM_IS_GAMEPLAY_CAM_LOOKING_BEHIND(  )
	{
		auto retval = (bool)CAM::IS_GAMEPLAY_CAM_LOOKING_BEHIND();
		return retval;
	}

	void LUA_NATIVE_CAM_SET_GAMEPLAY_CAM_IGNORE_ENTITY_COLLISION_THIS_UPDATE( Entity entity )
	{
		CAM::SET_GAMEPLAY_CAM_IGNORE_ENTITY_COLLISION_THIS_UPDATE(entity);
	}

	void LUA_NATIVE_CAM_DISABLE_CAM_COLLISION_FOR_OBJECT( Entity entity )
	{
		CAM::DISABLE_CAM_COLLISION_FOR_OBJECT(entity);
	}

	void LUA_NATIVE_CAM_BYPASS_CAMERA_COLLISION_BUOYANCY_TEST_THIS_UPDATE(  )
	{
		CAM::BYPASS_CAMERA_COLLISION_BUOYANCY_TEST_THIS_UPDATE();
	}

	void LUA_NATIVE_CAM_SET_GAMEPLAY_CAM_ENTITY_TO_LIMIT_FOCUS_OVER_BOUNDING_SPHERE_THIS_UPDATE( Entity entity )
	{
		CAM::SET_GAMEPLAY_CAM_ENTITY_TO_LIMIT_FOCUS_OVER_BOUNDING_SPHERE_THIS_UPDATE(entity);
	}

	void LUA_NATIVE_CAM_DISABLE_FIRST_PERSON_CAMERA_WATER_CLIPPING_TEST_THIS_UPDATE(  )
	{
		CAM::DISABLE_FIRST_PERSON_CAMERA_WATER_CLIPPING_TEST_THIS_UPDATE();
	}

	void LUA_NATIVE_CAM_SET_FOLLOW_CAM_IGNORE_ATTACH_PARENT_MOVEMENT_THIS_UPDATE(  )
	{
		CAM::SET_FOLLOW_CAM_IGNORE_ATTACH_PARENT_MOVEMENT_THIS_UPDATE();
	}

	bool LUA_NATIVE_CAM_IS_SPHERE_VISIBLE( float x, float y, float z, float radius )
	{
		auto retval = (bool)CAM::IS_SPHERE_VISIBLE(x, y, z, radius);
		return retval;
	}

	bool LUA_NATIVE_CAM_IS_FOLLOW_PED_CAM_ACTIVE(  )
	{
		auto retval = (bool)CAM::IS_FOLLOW_PED_CAM_ACTIVE();
		return retval;
	}

	bool LUA_NATIVE_CAM_SET_FOLLOW_PED_CAM_THIS_UPDATE( const char* camName, int p1 )
	{
		auto retval = (bool)CAM::SET_FOLLOW_PED_CAM_THIS_UPDATE(camName, p1);
		return retval;
	}

	void LUA_NATIVE_CAM_USE_SCRIPT_CAM_FOR_AMBIENT_POPULATION_ORIGIN_THIS_FRAME( bool p0, bool p1 )
	{
		CAM::USE_SCRIPT_CAM_FOR_AMBIENT_POPULATION_ORIGIN_THIS_FRAME(p0, p1);
	}

	void LUA_NATIVE_CAM_SET_FOLLOW_PED_CAM_LADDER_ALIGN_THIS_UPDATE(  )
	{
		CAM::SET_FOLLOW_PED_CAM_LADDER_ALIGN_THIS_UPDATE();
	}

	void LUA_NATIVE_CAM_SET_THIRD_PERSON_CAM_RELATIVE_HEADING_LIMITS_THIS_UPDATE( float minimum, float maximum )
	{
		CAM::SET_THIRD_PERSON_CAM_RELATIVE_HEADING_LIMITS_THIS_UPDATE(minimum, maximum);
	}

	void LUA_NATIVE_CAM_SET_THIRD_PERSON_CAM_RELATIVE_PITCH_LIMITS_THIS_UPDATE( float minimum, float maximum )
	{
		CAM::SET_THIRD_PERSON_CAM_RELATIVE_PITCH_LIMITS_THIS_UPDATE(minimum, maximum);
	}

	void LUA_NATIVE_CAM_SET_THIRD_PERSON_CAM_ORBIT_DISTANCE_LIMITS_THIS_UPDATE( float p0, float distance )
	{
		CAM::SET_THIRD_PERSON_CAM_ORBIT_DISTANCE_LIMITS_THIS_UPDATE(p0, distance);
	}

	void LUA_NATIVE_CAM_SET_IN_VEHICLE_CAM_STATE_THIS_UPDATE( Vehicle p0, int p1 )
	{
		CAM::SET_IN_VEHICLE_CAM_STATE_THIS_UPDATE(p0, p1);
	}

	void LUA_NATIVE_CAM_DISABLE_ON_FOOT_FIRST_PERSON_VIEW_THIS_UPDATE(  )
	{
		CAM::DISABLE_ON_FOOT_FIRST_PERSON_VIEW_THIS_UPDATE();
	}

	void LUA_NATIVE_CAM_DISABLE_FIRST_PERSON_FLASH_EFFECT_THIS_UPDATE(  )
	{
		CAM::DISABLE_FIRST_PERSON_FLASH_EFFECT_THIS_UPDATE();
	}

	void LUA_NATIVE_CAM_BLOCK_FIRST_PERSON_ORIENTATION_RESET_THIS_UPDATE(  )
	{
		CAM::BLOCK_FIRST_PERSON_ORIENTATION_RESET_THIS_UPDATE();
	}

	int LUA_NATIVE_CAM_GET_FOLLOW_PED_CAM_ZOOM_LEVEL(  )
	{
		auto retval = CAM::GET_FOLLOW_PED_CAM_ZOOM_LEVEL();
		return retval;
	}

	int LUA_NATIVE_CAM_GET_FOLLOW_PED_CAM_VIEW_MODE(  )
	{
		auto retval = CAM::GET_FOLLOW_PED_CAM_VIEW_MODE();
		return retval;
	}

	void LUA_NATIVE_CAM_SET_FOLLOW_PED_CAM_VIEW_MODE( int viewMode )
	{
		CAM::SET_FOLLOW_PED_CAM_VIEW_MODE(viewMode);
	}

	bool LUA_NATIVE_CAM_IS_FOLLOW_VEHICLE_CAM_ACTIVE(  )
	{
		auto retval = (bool)CAM::IS_FOLLOW_VEHICLE_CAM_ACTIVE();
		return retval;
	}

	void LUA_NATIVE_CAM_SET_FOLLOW_VEHICLE_CAM_HIGH_ANGLE_MODE_THIS_UPDATE( bool p0 )
	{
		CAM::SET_FOLLOW_VEHICLE_CAM_HIGH_ANGLE_MODE_THIS_UPDATE(p0);
	}

	void LUA_NATIVE_CAM_SET_FOLLOW_VEHICLE_CAM_HIGH_ANGLE_MODE_EVERY_UPDATE( bool p0, bool p1 )
	{
		CAM::SET_FOLLOW_VEHICLE_CAM_HIGH_ANGLE_MODE_EVERY_UPDATE(p0, p1);
	}

	bool LUA_NATIVE_CAM_SET_TABLE_GAMES_CAMERA_THIS_UPDATE( Hash hash )
	{
		auto retval = (bool)CAM::SET_TABLE_GAMES_CAMERA_THIS_UPDATE(hash);
		return retval;
	}

	int LUA_NATIVE_CAM_GET_FOLLOW_VEHICLE_CAM_ZOOM_LEVEL(  )
	{
		auto retval = CAM::GET_FOLLOW_VEHICLE_CAM_ZOOM_LEVEL();
		return retval;
	}

	void LUA_NATIVE_CAM_SET_FOLLOW_VEHICLE_CAM_ZOOM_LEVEL( int zoomLevel )
	{
		CAM::SET_FOLLOW_VEHICLE_CAM_ZOOM_LEVEL(zoomLevel);
	}

	int LUA_NATIVE_CAM_GET_FOLLOW_VEHICLE_CAM_VIEW_MODE(  )
	{
		auto retval = CAM::GET_FOLLOW_VEHICLE_CAM_VIEW_MODE();
		return retval;
	}

	void LUA_NATIVE_CAM_SET_FOLLOW_VEHICLE_CAM_VIEW_MODE( int viewMode )
	{
		CAM::SET_FOLLOW_VEHICLE_CAM_VIEW_MODE(viewMode);
	}

	int LUA_NATIVE_CAM_GET_CAM_VIEW_MODE_FOR_CONTEXT( int context )
	{
		auto retval = CAM::GET_CAM_VIEW_MODE_FOR_CONTEXT(context);
		return retval;
	}

	void LUA_NATIVE_CAM_SET_CAM_VIEW_MODE_FOR_CONTEXT( int context, int viewMode )
	{
		CAM::SET_CAM_VIEW_MODE_FOR_CONTEXT(context, viewMode);
	}

	int LUA_NATIVE_CAM_GET_CAM_ACTIVE_VIEW_MODE_CONTEXT(  )
	{
		auto retval = CAM::GET_CAM_ACTIVE_VIEW_MODE_CONTEXT();
		return retval;
	}

	void LUA_NATIVE_CAM_USE_VEHICLE_CAM_STUNT_SETTINGS_THIS_UPDATE(  )
	{
		CAM::USE_VEHICLE_CAM_STUNT_SETTINGS_THIS_UPDATE();
	}

	void LUA_NATIVE_CAM_USE_DEDICATED_STUNT_CAMERA_THIS_UPDATE( const char* camName )
	{
		CAM::USE_DEDICATED_STUNT_CAMERA_THIS_UPDATE(camName);
	}

	void LUA_NATIVE_CAM_FORCE_VEHICLE_CAM_STUNT_SETTINGS_THIS_UPDATE(  )
	{
		CAM::FORCE_VEHICLE_CAM_STUNT_SETTINGS_THIS_UPDATE();
	}

	void LUA_NATIVE_CAM_SET_FOLLOW_VEHICLE_CAM_SEAT_THIS_UPDATE( int seatIndex )
	{
		CAM::SET_FOLLOW_VEHICLE_CAM_SEAT_THIS_UPDATE(seatIndex);
	}

	bool LUA_NATIVE_CAM_IS_AIM_CAM_ACTIVE(  )
	{
		auto retval = (bool)CAM::IS_AIM_CAM_ACTIVE();
		return retval;
	}

	bool LUA_NATIVE_CAM_IS_AIM_CAM_ACTIVE_IN_ACCURATE_MODE(  )
	{
		auto retval = (bool)CAM::IS_AIM_CAM_ACTIVE_IN_ACCURATE_MODE();
		return retval;
	}

	bool LUA_NATIVE_CAM_IS_FIRST_PERSON_AIM_CAM_ACTIVE(  )
	{
		auto retval = (bool)CAM::IS_FIRST_PERSON_AIM_CAM_ACTIVE();
		return retval;
	}

	void LUA_NATIVE_CAM_DISABLE_AIM_CAM_THIS_UPDATE(  )
	{
		CAM::DISABLE_AIM_CAM_THIS_UPDATE();
	}

	float LUA_NATIVE_CAM_GET_FIRST_PERSON_AIM_CAM_ZOOM_FACTOR(  )
	{
		auto retval = CAM::GET_FIRST_PERSON_AIM_CAM_ZOOM_FACTOR();
		return retval;
	}

	void LUA_NATIVE_CAM_SET_FIRST_PERSON_AIM_CAM_ZOOM_FACTOR( float zoomFactor )
	{
		CAM::SET_FIRST_PERSON_AIM_CAM_ZOOM_FACTOR(zoomFactor);
	}

	void LUA_NATIVE_CAM_SET_FIRST_PERSON_AIM_CAM_ZOOM_FACTOR_LIMITS_THIS_UPDATE( float p0, float p1 )
	{
		CAM::SET_FIRST_PERSON_AIM_CAM_ZOOM_FACTOR_LIMITS_THIS_UPDATE(p0, p1);
	}

	void LUA_NATIVE_CAM_SET_FIRST_PERSON_AIM_CAM_RELATIVE_HEADING_LIMITS_THIS_UPDATE( float p0, float p1 )
	{
		CAM::SET_FIRST_PERSON_AIM_CAM_RELATIVE_HEADING_LIMITS_THIS_UPDATE(p0, p1);
	}

	void LUA_NATIVE_CAM_SET_FIRST_PERSON_AIM_CAM_RELATIVE_PITCH_LIMITS_THIS_UPDATE( float p0, float p1 )
	{
		CAM::SET_FIRST_PERSON_AIM_CAM_RELATIVE_PITCH_LIMITS_THIS_UPDATE(p0, p1);
	}

	void LUA_NATIVE_CAM_SET_FIRST_PERSON_AIM_CAM_NEAR_CLIP_THIS_UPDATE( float p0 )
	{
		CAM::SET_FIRST_PERSON_AIM_CAM_NEAR_CLIP_THIS_UPDATE(p0);
	}

	void LUA_NATIVE_CAM_SET_THIRD_PERSON_AIM_CAM_NEAR_CLIP_THIS_UPDATE( float p0 )
	{
		CAM::SET_THIRD_PERSON_AIM_CAM_NEAR_CLIP_THIS_UPDATE(p0);
	}

	void LUA_NATIVE_CAM_SET_ALLOW_CUSTOM_VEHICLE_DRIVE_BY_CAM_THIS_UPDATE( bool p0 )
	{
		CAM::SET_ALLOW_CUSTOM_VEHICLE_DRIVE_BY_CAM_THIS_UPDATE(p0);
	}

	void LUA_NATIVE_CAM_FORCE_TIGHTSPACE_CUSTOM_FRAMING_THIS_UPDATE(  )
	{
		CAM::FORCE_TIGHTSPACE_CUSTOM_FRAMING_THIS_UPDATE();
	}

	Vector3 LUA_NATIVE_CAM_GET_FINAL_RENDERED_CAM_COORD(  )
	{
		auto retval = CAM::GET_FINAL_RENDERED_CAM_COORD();
		return retval;
	}

	Vector3 LUA_NATIVE_CAM_GET_FINAL_RENDERED_CAM_ROT( int rotationOrder )
	{
		auto retval = CAM::GET_FINAL_RENDERED_CAM_ROT(rotationOrder);
		return retval;
	}

	Vector3 LUA_NATIVE_CAM_GET_FINAL_RENDERED_REMOTE_PLAYER_CAM_ROT( Player player, int rotationOrder )
	{
		auto retval = CAM::GET_FINAL_RENDERED_REMOTE_PLAYER_CAM_ROT(player, rotationOrder);
		return retval;
	}

	float LUA_NATIVE_CAM_GET_FINAL_RENDERED_CAM_FOV(  )
	{
		auto retval = CAM::GET_FINAL_RENDERED_CAM_FOV();
		return retval;
	}

	float LUA_NATIVE_CAM_GET_FINAL_RENDERED_REMOTE_PLAYER_CAM_FOV( Player player )
	{
		auto retval = CAM::GET_FINAL_RENDERED_REMOTE_PLAYER_CAM_FOV(player);
		return retval;
	}

	float LUA_NATIVE_CAM_GET_FINAL_RENDERED_CAM_NEAR_CLIP(  )
	{
		auto retval = CAM::GET_FINAL_RENDERED_CAM_NEAR_CLIP();
		return retval;
	}

	float LUA_NATIVE_CAM_GET_FINAL_RENDERED_CAM_FAR_CLIP(  )
	{
		auto retval = CAM::GET_FINAL_RENDERED_CAM_FAR_CLIP();
		return retval;
	}

	float LUA_NATIVE_CAM_GET_FINAL_RENDERED_CAM_NEAR_DOF(  )
	{
		auto retval = CAM::GET_FINAL_RENDERED_CAM_NEAR_DOF();
		return retval;
	}

	float LUA_NATIVE_CAM_GET_FINAL_RENDERED_CAM_FAR_DOF(  )
	{
		auto retval = CAM::GET_FINAL_RENDERED_CAM_FAR_DOF();
		return retval;
	}

	float LUA_NATIVE_CAM_GET_FINAL_RENDERED_CAM_MOTION_BLUR_STRENGTH(  )
	{
		auto retval = CAM::GET_FINAL_RENDERED_CAM_MOTION_BLUR_STRENGTH();
		return retval;
	}

	void LUA_NATIVE_CAM_SET_GAMEPLAY_COORD_HINT( float x, float y, float z, int duration, int blendOutDuration, int blendInDuration, int p6 )
	{
		CAM::SET_GAMEPLAY_COORD_HINT(x, y, z, duration, blendOutDuration, blendInDuration, p6);
	}

	void LUA_NATIVE_CAM_SET_GAMEPLAY_PED_HINT( Ped ped, float x1, float y1, float z1, bool p4, int duration, int blendOutDuration, int blendInDuration )
	{
		CAM::SET_GAMEPLAY_PED_HINT(ped, x1, y1, z1, p4, duration, blendOutDuration, blendInDuration);
	}

	void LUA_NATIVE_CAM_SET_GAMEPLAY_VEHICLE_HINT( Vehicle vehicle, float offsetX, float offsetY, float offsetZ, bool p4, int time, int easeInTime, int easeOutTime )
	{
		CAM::SET_GAMEPLAY_VEHICLE_HINT(vehicle, offsetX, offsetY, offsetZ, p4, time, easeInTime, easeOutTime);
	}

	void LUA_NATIVE_CAM_SET_GAMEPLAY_OBJECT_HINT( Object object, float xOffset, float yOffset, float zOffset, bool p4, int time, int easeInTime, int easeOutTime )
	{
		CAM::SET_GAMEPLAY_OBJECT_HINT(object, xOffset, yOffset, zOffset, p4, time, easeInTime, easeOutTime);
	}

	void LUA_NATIVE_CAM_SET_GAMEPLAY_ENTITY_HINT( Entity entity, float xOffset, float yOffset, float zOffset, bool p4, int time, int easeInTime, int easeOutTime, int p8 )
	{
		CAM::SET_GAMEPLAY_ENTITY_HINT(entity, xOffset, yOffset, zOffset, p4, time, easeInTime, easeOutTime, p8);
	}

	bool LUA_NATIVE_CAM_IS_GAMEPLAY_HINT_ACTIVE(  )
	{
		auto retval = (bool)CAM::IS_GAMEPLAY_HINT_ACTIVE();
		return retval;
	}

	void LUA_NATIVE_CAM_STOP_GAMEPLAY_HINT( bool p0 )
	{
		CAM::STOP_GAMEPLAY_HINT(p0);
	}

	void LUA_NATIVE_CAM_STOP_GAMEPLAY_HINT_BEING_CANCELLED_THIS_UPDATE( bool p0 )
	{
		CAM::STOP_GAMEPLAY_HINT_BEING_CANCELLED_THIS_UPDATE(p0);
	}

	void LUA_NATIVE_CAM_STOP_CODE_GAMEPLAY_HINT( bool p0 )
	{
		CAM::STOP_CODE_GAMEPLAY_HINT(p0);
	}

	bool LUA_NATIVE_CAM_IS_CODE_GAMEPLAY_HINT_ACTIVE(  )
	{
		auto retval = (bool)CAM::IS_CODE_GAMEPLAY_HINT_ACTIVE();
		return retval;
	}

	void LUA_NATIVE_CAM_SET_GAMEPLAY_HINT_FOV( float FOV )
	{
		CAM::SET_GAMEPLAY_HINT_FOV(FOV);
	}

	void LUA_NATIVE_CAM_SET_GAMEPLAY_HINT_FOLLOW_DISTANCE_SCALAR( float value )
	{
		CAM::SET_GAMEPLAY_HINT_FOLLOW_DISTANCE_SCALAR(value);
	}

	void LUA_NATIVE_CAM_SET_GAMEPLAY_HINT_BASE_ORBIT_PITCH_OFFSET( float value )
	{
		CAM::SET_GAMEPLAY_HINT_BASE_ORBIT_PITCH_OFFSET(value);
	}

	void LUA_NATIVE_CAM_SET_GAMEPLAY_HINT_CAMERA_RELATIVE_SIDE_OFFSET( float xOffset )
	{
		CAM::SET_GAMEPLAY_HINT_CAMERA_RELATIVE_SIDE_OFFSET(xOffset);
	}

	void LUA_NATIVE_CAM_SET_GAMEPLAY_HINT_CAMERA_RELATIVE_VERTICAL_OFFSET( float yOffset )
	{
		CAM::SET_GAMEPLAY_HINT_CAMERA_RELATIVE_VERTICAL_OFFSET(yOffset);
	}

	void LUA_NATIVE_CAM_SET_GAMEPLAY_HINT_CAMERA_BLEND_TO_FOLLOW_PED_MEDIUM_VIEW_MODE( bool toggle )
	{
		CAM::SET_GAMEPLAY_HINT_CAMERA_BLEND_TO_FOLLOW_PED_MEDIUM_VIEW_MODE(toggle);
	}

	void LUA_NATIVE_CAM_SET_CINEMATIC_BUTTON_ACTIVE( bool p0 )
	{
		CAM::SET_CINEMATIC_BUTTON_ACTIVE(p0);
	}

	bool LUA_NATIVE_CAM_IS_CINEMATIC_CAM_RENDERING(  )
	{
		auto retval = (bool)CAM::IS_CINEMATIC_CAM_RENDERING();
		return retval;
	}

	void LUA_NATIVE_CAM_SHAKE_CINEMATIC_CAM( const char* shakeType, float amount )
	{
		CAM::SHAKE_CINEMATIC_CAM(shakeType, amount);
	}

	bool LUA_NATIVE_CAM_IS_CINEMATIC_CAM_SHAKING(  )
	{
		auto retval = (bool)CAM::IS_CINEMATIC_CAM_SHAKING();
		return retval;
	}

	void LUA_NATIVE_CAM_SET_CINEMATIC_CAM_SHAKE_AMPLITUDE( float p0 )
	{
		CAM::SET_CINEMATIC_CAM_SHAKE_AMPLITUDE(p0);
	}

	void LUA_NATIVE_CAM_STOP_CINEMATIC_CAM_SHAKING( bool p0 )
	{
		CAM::STOP_CINEMATIC_CAM_SHAKING(p0);
	}

	void LUA_NATIVE_CAM_DISABLE_CINEMATIC_BONNET_CAMERA_THIS_UPDATE(  )
	{
		CAM::DISABLE_CINEMATIC_BONNET_CAMERA_THIS_UPDATE();
	}

	void LUA_NATIVE_CAM_DISABLE_CINEMATIC_VEHICLE_IDLE_MODE_THIS_UPDATE(  )
	{
		CAM::DISABLE_CINEMATIC_VEHICLE_IDLE_MODE_THIS_UPDATE();
	}

	void LUA_NATIVE_CAM_INVALIDATE_CINEMATIC_VEHICLE_IDLE_MODE(  )
	{
		CAM::INVALIDATE_CINEMATIC_VEHICLE_IDLE_MODE();
	}

	void LUA_NATIVE_CAM_INVALIDATE_IDLE_CAM(  )
	{
		CAM::INVALIDATE_IDLE_CAM();
	}

	bool LUA_NATIVE_CAM_IS_CINEMATIC_IDLE_CAM_RENDERING(  )
	{
		auto retval = (bool)CAM::IS_CINEMATIC_IDLE_CAM_RENDERING();
		return retval;
	}

	bool LUA_NATIVE_CAM_IS_CINEMATIC_FIRST_PERSON_VEHICLE_INTERIOR_CAM_RENDERING(  )
	{
		auto retval = (bool)CAM::IS_CINEMATIC_FIRST_PERSON_VEHICLE_INTERIOR_CAM_RENDERING();
		return retval;
	}

	void LUA_NATIVE_CAM_CREATE_CINEMATIC_SHOT( Hash p0, int time, bool p2, Entity entity )
	{
		CAM::CREATE_CINEMATIC_SHOT(p0, time, p2, entity);
	}

	bool LUA_NATIVE_CAM_IS_CINEMATIC_SHOT_ACTIVE( Hash p0 )
	{
		auto retval = (bool)CAM::IS_CINEMATIC_SHOT_ACTIVE(p0);
		return retval;
	}

	void LUA_NATIVE_CAM_STOP_CINEMATIC_SHOT( Hash p0 )
	{
		CAM::STOP_CINEMATIC_SHOT(p0);
	}

	void LUA_NATIVE_CAM_FORCE_CINEMATIC_RENDERING_THIS_UPDATE( bool toggle )
	{
		CAM::FORCE_CINEMATIC_RENDERING_THIS_UPDATE(toggle);
	}

	void LUA_NATIVE_CAM_SET_CINEMATIC_NEWS_CHANNEL_ACTIVE_THIS_UPDATE(  )
	{
		CAM::SET_CINEMATIC_NEWS_CHANNEL_ACTIVE_THIS_UPDATE();
	}

	void LUA_NATIVE_CAM_SET_CINEMATIC_MODE_ACTIVE( bool toggle )
	{
		CAM::SET_CINEMATIC_MODE_ACTIVE(toggle);
	}

	bool LUA_NATIVE_CAM_IS_IN_VEHICLE_MOBILE_PHONE_CAMERA_RENDERING(  )
	{
		auto retval = (bool)CAM::IS_IN_VEHICLE_MOBILE_PHONE_CAMERA_RENDERING();
		return retval;
	}

	bool LUA_NATIVE_CAM_DISABLE_CINEMATIC_SLOW_MO_THIS_UPDATE(  )
	{
		auto retval = (bool)CAM::DISABLE_CINEMATIC_SLOW_MO_THIS_UPDATE();
		return retval;
	}

	bool LUA_NATIVE_CAM_IS_BONNET_CINEMATIC_CAM_RENDERING(  )
	{
		auto retval = (bool)CAM::IS_BONNET_CINEMATIC_CAM_RENDERING();
		return retval;
	}

	bool LUA_NATIVE_CAM_IS_CINEMATIC_CAM_INPUT_ACTIVE(  )
	{
		auto retval = (bool)CAM::IS_CINEMATIC_CAM_INPUT_ACTIVE();
		return retval;
	}

	void LUA_NATIVE_CAM_IGNORE_MENU_PREFERENCE_FOR_BONNET_CAMERA_THIS_UPDATE(  )
	{
		CAM::IGNORE_MENU_PREFERENCE_FOR_BONNET_CAMERA_THIS_UPDATE();
	}

	void LUA_NATIVE_CAM_BYPASS_CUTSCENE_CAM_RENDERING_THIS_UPDATE(  )
	{
		CAM::BYPASS_CUTSCENE_CAM_RENDERING_THIS_UPDATE();
	}

	void LUA_NATIVE_CAM_STOP_CUTSCENE_CAM_SHAKING( Any p0 )
	{
		CAM::STOP_CUTSCENE_CAM_SHAKING(p0);
	}

	void LUA_NATIVE_CAM_SET_CUTSCENE_CAM_FAR_CLIP_THIS_UPDATE( float p0 )
	{
		CAM::SET_CUTSCENE_CAM_FAR_CLIP_THIS_UPDATE(p0);
	}

	Ped LUA_NATIVE_CAM_GET_FOCUS_PED_ON_SCREEN( float p0, int p1, float p2, float p3, float p4, float p5, float p6, int p7, int p8 )
	{
		auto retval = CAM::GET_FOCUS_PED_ON_SCREEN(p0, p1, p2, p3, p4, p5, p6, p7, p8);
		return retval;
	}

	void LUA_NATIVE_CAM_DISABLE_NEAR_CLIP_SCAN_THIS_UPDATE(  )
	{
		CAM::DISABLE_NEAR_CLIP_SCAN_THIS_UPDATE();
	}

	void LUA_NATIVE_CAM_SET_CAM_DEATH_FAIL_EFFECT_STATE( int p0 )
	{
		CAM::SET_CAM_DEATH_FAIL_EFFECT_STATE(p0);
	}

	void LUA_NATIVE_CAM_SET_FIRST_PERSON_FLASH_EFFECT_TYPE( Any p0 )
	{
		CAM::SET_FIRST_PERSON_FLASH_EFFECT_TYPE(p0);
	}

	void LUA_NATIVE_CAM_SET_FIRST_PERSON_FLASH_EFFECT_VEHICLE_MODEL_NAME( const char* vehicleName )
	{
		CAM::SET_FIRST_PERSON_FLASH_EFFECT_VEHICLE_MODEL_NAME(vehicleName);
	}

	void LUA_NATIVE_CAM_SET_FIRST_PERSON_FLASH_EFFECT_VEHICLE_MODEL_HASH( Hash vehicleModel )
	{
		CAM::SET_FIRST_PERSON_FLASH_EFFECT_VEHICLE_MODEL_HASH(vehicleModel);
	}

	bool LUA_NATIVE_CAM_IS_ALLOWED_INDEPENDENT_CAMERA_MODES(  )
	{
		auto retval = (bool)CAM::IS_ALLOWED_INDEPENDENT_CAMERA_MODES();
		return retval;
	}

	void LUA_NATIVE_CAM_CAMERA_PREVENT_COLLISION_SETTINGS_FOR_TRIPLEHEAD_IN_INTERIORS_THIS_UPDATE(  )
	{
		CAM::CAMERA_PREVENT_COLLISION_SETTINGS_FOR_TRIPLEHEAD_IN_INTERIORS_THIS_UPDATE();
	}

	float LUA_NATIVE_CAM_REPLAY_GET_MAX_DISTANCE_ALLOWED_FROM_PLAYER(  )
	{
		auto retval = CAM::REPLAY_GET_MAX_DISTANCE_ALLOWED_FROM_PLAYER();
		return retval;
	}

	void LUA_NATIVE_CLOCK_SET_CLOCK_TIME( int hour, int minute, int second )
	{
		CLOCK::SET_CLOCK_TIME(hour, minute, second);
	}

	void LUA_NATIVE_CLOCK_PAUSE_CLOCK( bool toggle )
	{
		CLOCK::PAUSE_CLOCK(toggle);
	}

	void LUA_NATIVE_CLOCK_ADVANCE_CLOCK_TIME_TO( int hour, int minute, int second )
	{
		CLOCK::ADVANCE_CLOCK_TIME_TO(hour, minute, second);
	}

	void LUA_NATIVE_CLOCK_ADD_TO_CLOCK_TIME( int hours, int minutes, int seconds )
	{
		CLOCK::ADD_TO_CLOCK_TIME(hours, minutes, seconds);
	}

	int LUA_NATIVE_CLOCK_GET_CLOCK_HOURS(  )
	{
		auto retval = CLOCK::GET_CLOCK_HOURS();
		return retval;
	}

	int LUA_NATIVE_CLOCK_GET_CLOCK_MINUTES(  )
	{
		auto retval = CLOCK::GET_CLOCK_MINUTES();
		return retval;
	}

	int LUA_NATIVE_CLOCK_GET_CLOCK_SECONDS(  )
	{
		auto retval = CLOCK::GET_CLOCK_SECONDS();
		return retval;
	}

	void LUA_NATIVE_CLOCK_SET_CLOCK_DATE( int day, int month, int year )
	{
		CLOCK::SET_CLOCK_DATE(day, month, year);
	}

	int LUA_NATIVE_CLOCK_GET_CLOCK_DAY_OF_WEEK(  )
	{
		auto retval = CLOCK::GET_CLOCK_DAY_OF_WEEK();
		return retval;
	}

	int LUA_NATIVE_CLOCK_GET_CLOCK_DAY_OF_MONTH(  )
	{
		auto retval = CLOCK::GET_CLOCK_DAY_OF_MONTH();
		return retval;
	}

	int LUA_NATIVE_CLOCK_GET_CLOCK_MONTH(  )
	{
		auto retval = CLOCK::GET_CLOCK_MONTH();
		return retval;
	}

	int LUA_NATIVE_CLOCK_GET_CLOCK_YEAR(  )
	{
		auto retval = CLOCK::GET_CLOCK_YEAR();
		return retval;
	}

	int LUA_NATIVE_CLOCK_GET_MILLISECONDS_PER_GAME_MINUTE(  )
	{
		auto retval = CLOCK::GET_MILLISECONDS_PER_GAME_MINUTE();
		return retval;
	}

	std::tuple<int, int, int, int, int, int> LUA_NATIVE_CLOCK_GET_POSIX_TIME( int year, int month, int day, int hour, int minute, int second )
	{
		std::tuple<int, int, int, int, int, int> return_values;
		CLOCK::GET_POSIX_TIME(&year, &month, &day, &hour, &minute, &second);
		std::get<0>(return_values) = year;
		std::get<1>(return_values) = month;
		std::get<2>(return_values) = day;
		std::get<3>(return_values) = hour;
		std::get<4>(return_values) = minute;
		std::get<5>(return_values) = second;

		return return_values;
	}

	std::tuple<int, int, int, int, int, int> LUA_NATIVE_CLOCK_GET_UTC_TIME( int year, int month, int day, int hour, int minute, int second )
	{
		std::tuple<int, int, int, int, int, int> return_values;
		CLOCK::GET_UTC_TIME(&year, &month, &day, &hour, &minute, &second);
		std::get<0>(return_values) = year;
		std::get<1>(return_values) = month;
		std::get<2>(return_values) = day;
		std::get<3>(return_values) = hour;
		std::get<4>(return_values) = minute;
		std::get<5>(return_values) = second;

		return return_values;
	}

	std::tuple<int, int, int, int, int, int> LUA_NATIVE_CLOCK_GET_LOCAL_TIME( int year, int month, int day, int hour, int minute, int second )
	{
		std::tuple<int, int, int, int, int, int> return_values;
		CLOCK::GET_LOCAL_TIME(&year, &month, &day, &hour, &minute, &second);
		std::get<0>(return_values) = year;
		std::get<1>(return_values) = month;
		std::get<2>(return_values) = day;
		std::get<3>(return_values) = hour;
		std::get<4>(return_values) = minute;
		std::get<5>(return_values) = second;

		return return_values;
	}

	void LUA_NATIVE_CUTSCENE_REQUEST_CUTSCENE( const char* cutsceneName, int flags )
	{
		CUTSCENE::REQUEST_CUTSCENE(cutsceneName, flags);
	}

	void LUA_NATIVE_CUTSCENE_REQUEST_CUTSCENE_WITH_PLAYBACK_LIST( const char* cutsceneName, int playbackFlags, int flags )
	{
		CUTSCENE::REQUEST_CUTSCENE_WITH_PLAYBACK_LIST(cutsceneName, playbackFlags, flags);
	}

	void LUA_NATIVE_CUTSCENE_REMOVE_CUTSCENE(  )
	{
		CUTSCENE::REMOVE_CUTSCENE();
	}

	bool LUA_NATIVE_CUTSCENE_HAS_CUTSCENE_LOADED(  )
	{
		auto retval = (bool)CUTSCENE::HAS_CUTSCENE_LOADED();
		return retval;
	}

	bool LUA_NATIVE_CUTSCENE_HAS_THIS_CUTSCENE_LOADED( const char* cutsceneName )
	{
		auto retval = (bool)CUTSCENE::HAS_THIS_CUTSCENE_LOADED(cutsceneName);
		return retval;
	}

	void LUA_NATIVE_CUTSCENE_SET_SCRIPT_CAN_START_CUTSCENE( int threadId )
	{
		CUTSCENE::SET_SCRIPT_CAN_START_CUTSCENE(threadId);
	}

	bool LUA_NATIVE_CUTSCENE_CAN_REQUEST_ASSETS_FOR_CUTSCENE_ENTITY(  )
	{
		auto retval = (bool)CUTSCENE::CAN_REQUEST_ASSETS_FOR_CUTSCENE_ENTITY();
		return retval;
	}

	bool LUA_NATIVE_CUTSCENE_IS_CUTSCENE_PLAYBACK_FLAG_SET( int flag )
	{
		auto retval = (bool)CUTSCENE::IS_CUTSCENE_PLAYBACK_FLAG_SET(flag);
		return retval;
	}

	void LUA_NATIVE_CUTSCENE_SET_CUTSCENE_ENTITY_STREAMING_FLAGS( const char* cutsceneEntName, int p1, int p2 )
	{
		CUTSCENE::SET_CUTSCENE_ENTITY_STREAMING_FLAGS(cutsceneEntName, p1, p2);
	}

	void LUA_NATIVE_CUTSCENE_REQUEST_CUT_FILE( const char* cutsceneName )
	{
		CUTSCENE::REQUEST_CUT_FILE(cutsceneName);
	}

	bool LUA_NATIVE_CUTSCENE_HAS_CUT_FILE_LOADED( const char* cutsceneName )
	{
		auto retval = (bool)CUTSCENE::HAS_CUT_FILE_LOADED(cutsceneName);
		return retval;
	}

	void LUA_NATIVE_CUTSCENE_REMOVE_CUT_FILE( const char* cutsceneName )
	{
		CUTSCENE::REMOVE_CUT_FILE(cutsceneName);
	}

	int LUA_NATIVE_CUTSCENE_GET_CUT_FILE_CONCAT_COUNT( const char* cutsceneName )
	{
		auto retval = CUTSCENE::GET_CUT_FILE_CONCAT_COUNT(cutsceneName);
		return retval;
	}

	void LUA_NATIVE_CUTSCENE_START_CUTSCENE( int flags )
	{
		CUTSCENE::START_CUTSCENE(flags);
	}

	void LUA_NATIVE_CUTSCENE_START_CUTSCENE_AT_COORDS( float x, float y, float z, int flags )
	{
		CUTSCENE::START_CUTSCENE_AT_COORDS(x, y, z, flags);
	}

	void LUA_NATIVE_CUTSCENE_STOP_CUTSCENE( bool p0 )
	{
		CUTSCENE::STOP_CUTSCENE(p0);
	}

	void LUA_NATIVE_CUTSCENE_STOP_CUTSCENE_IMMEDIATELY(  )
	{
		CUTSCENE::STOP_CUTSCENE_IMMEDIATELY();
	}

	void LUA_NATIVE_CUTSCENE_SET_CUTSCENE_ORIGIN( float x, float y, float z, float p3, int p4 )
	{
		CUTSCENE::SET_CUTSCENE_ORIGIN(x, y, z, p3, p4);
	}

	void LUA_NATIVE_CUTSCENE_SET_CUTSCENE_ORIGIN_AND_ORIENTATION( float x1, float y1, float z1, float x2, float y2, float z2, int p6 )
	{
		CUTSCENE::SET_CUTSCENE_ORIGIN_AND_ORIENTATION(x1, y1, z1, x2, y2, z2, p6);
	}

	int LUA_NATIVE_CUTSCENE_GET_CUTSCENE_TIME(  )
	{
		auto retval = CUTSCENE::GET_CUTSCENE_TIME();
		return retval;
	}

	int LUA_NATIVE_CUTSCENE_GET_CUTSCENE_TOTAL_DURATION(  )
	{
		auto retval = CUTSCENE::GET_CUTSCENE_TOTAL_DURATION();
		return retval;
	}

	int LUA_NATIVE_CUTSCENE_GET_CUTSCENE_END_TIME(  )
	{
		auto retval = CUTSCENE::GET_CUTSCENE_END_TIME();
		return retval;
	}

	int LUA_NATIVE_CUTSCENE_GET_CUTSCENE_PLAY_DURATION(  )
	{
		auto retval = CUTSCENE::GET_CUTSCENE_PLAY_DURATION();
		return retval;
	}

	bool LUA_NATIVE_CUTSCENE_WAS_CUTSCENE_SKIPPED(  )
	{
		auto retval = (bool)CUTSCENE::WAS_CUTSCENE_SKIPPED();
		return retval;
	}

	bool LUA_NATIVE_CUTSCENE_HAS_CUTSCENE_FINISHED(  )
	{
		auto retval = (bool)CUTSCENE::HAS_CUTSCENE_FINISHED();
		return retval;
	}

	bool LUA_NATIVE_CUTSCENE_IS_CUTSCENE_ACTIVE(  )
	{
		auto retval = (bool)CUTSCENE::IS_CUTSCENE_ACTIVE();
		return retval;
	}

	bool LUA_NATIVE_CUTSCENE_IS_CUTSCENE_PLAYING(  )
	{
		auto retval = (bool)CUTSCENE::IS_CUTSCENE_PLAYING();
		return retval;
	}

	int LUA_NATIVE_CUTSCENE_GET_CUTSCENE_SECTION_PLAYING(  )
	{
		auto retval = CUTSCENE::GET_CUTSCENE_SECTION_PLAYING();
		return retval;
	}

	Entity LUA_NATIVE_CUTSCENE_GET_ENTITY_INDEX_OF_CUTSCENE_ENTITY( const char* cutsceneEntName, Hash modelHash )
	{
		auto retval = CUTSCENE::GET_ENTITY_INDEX_OF_CUTSCENE_ENTITY(cutsceneEntName, modelHash);
		return retval;
	}

	int LUA_NATIVE_CUTSCENE_GET_CUTSCENE_CONCAT_SECTION_PLAYING(  )
	{
		auto retval = CUTSCENE::GET_CUTSCENE_CONCAT_SECTION_PLAYING();
		return retval;
	}

	bool LUA_NATIVE_CUTSCENE_IS_CUTSCENE_AUTHORIZED( const char* cutsceneName )
	{
		auto retval = (bool)CUTSCENE::IS_CUTSCENE_AUTHORIZED(cutsceneName);
		return retval;
	}

	int LUA_NATIVE_CUTSCENE_DOES_CUTSCENE_HANDLE_EXIST( int cutsceneHandle )
	{
		auto retval = CUTSCENE::DOES_CUTSCENE_HANDLE_EXIST(cutsceneHandle);
		return retval;
	}

	void LUA_NATIVE_CUTSCENE_REGISTER_ENTITY_FOR_CUTSCENE( Ped cutscenePed, const char* cutsceneEntName, int p2, Hash modelHash, int p4 )
	{
		CUTSCENE::REGISTER_ENTITY_FOR_CUTSCENE(cutscenePed, cutsceneEntName, p2, modelHash, p4);
	}

	Entity LUA_NATIVE_CUTSCENE_GET_ENTITY_INDEX_OF_REGISTERED_ENTITY( const char* cutsceneEntName, Hash modelHash )
	{
		auto retval = CUTSCENE::GET_ENTITY_INDEX_OF_REGISTERED_ENTITY(cutsceneEntName, modelHash);
		return retval;
	}

	void LUA_NATIVE_CUTSCENE_SET_VEHICLE_MODEL_PLAYER_WILL_EXIT_SCENE( Hash modelHash )
	{
		CUTSCENE::SET_VEHICLE_MODEL_PLAYER_WILL_EXIT_SCENE(modelHash);
	}

	void LUA_NATIVE_CUTSCENE_SET_CUTSCENE_TRIGGER_AREA( float x1, float y1, float z1, float x2, float y2, float z2 )
	{
		CUTSCENE::SET_CUTSCENE_TRIGGER_AREA(x1, y1, z1, x2, y2, z2);
	}

	bool LUA_NATIVE_CUTSCENE_CAN_SET_ENTER_STATE_FOR_REGISTERED_ENTITY( const char* cutsceneEntName, Hash modelHash )
	{
		auto retval = (bool)CUTSCENE::CAN_SET_ENTER_STATE_FOR_REGISTERED_ENTITY(cutsceneEntName, modelHash);
		return retval;
	}

	bool LUA_NATIVE_CUTSCENE_CAN_SET_EXIT_STATE_FOR_REGISTERED_ENTITY( const char* cutsceneEntName, Hash modelHash )
	{
		auto retval = (bool)CUTSCENE::CAN_SET_EXIT_STATE_FOR_REGISTERED_ENTITY(cutsceneEntName, modelHash);
		return retval;
	}

	bool LUA_NATIVE_CUTSCENE_CAN_SET_EXIT_STATE_FOR_CAMERA( bool p0 )
	{
		auto retval = (bool)CUTSCENE::CAN_SET_EXIT_STATE_FOR_CAMERA(p0);
		return retval;
	}

	void LUA_NATIVE_CUTSCENE_SET_PAD_CAN_SHAKE_DURING_CUTSCENE( bool toggle )
	{
		CUTSCENE::SET_PAD_CAN_SHAKE_DURING_CUTSCENE(toggle);
	}

	void LUA_NATIVE_CUTSCENE_SET_CUTSCENE_FADE_VALUES( bool p0, bool p1, bool p2, bool p3 )
	{
		CUTSCENE::SET_CUTSCENE_FADE_VALUES(p0, p1, p2, p3);
	}

	void LUA_NATIVE_CUTSCENE_SET_CUTSCENE_MULTIHEAD_FADE( bool p0, bool p1, bool p2, bool p3 )
	{
		CUTSCENE::SET_CUTSCENE_MULTIHEAD_FADE(p0, p1, p2, p3);
	}

	void LUA_NATIVE_CUTSCENE_SET_CUTSCENE_MULTIHEAD_FADE_MANUAL( bool p0 )
	{
		CUTSCENE::SET_CUTSCENE_MULTIHEAD_FADE_MANUAL(p0);
	}

	bool LUA_NATIVE_CUTSCENE_IS_MULTIHEAD_FADE_UP(  )
	{
		auto retval = (bool)CUTSCENE::IS_MULTIHEAD_FADE_UP();
		return retval;
	}

	void LUA_NATIVE_CUTSCENE_NETWORK_SET_MOCAP_CUTSCENE_CAN_BE_SKIPPED( bool p0 )
	{
		CUTSCENE::NETWORK_SET_MOCAP_CUTSCENE_CAN_BE_SKIPPED(p0);
	}

	void LUA_NATIVE_CUTSCENE_SET_CAR_GENERATORS_CAN_UPDATE_DURING_CUTSCENE( bool p0 )
	{
		CUTSCENE::SET_CAR_GENERATORS_CAN_UPDATE_DURING_CUTSCENE(p0);
	}

	bool LUA_NATIVE_CUTSCENE_CAN_USE_MOBILE_PHONE_DURING_CUTSCENE(  )
	{
		auto retval = (bool)CUTSCENE::CAN_USE_MOBILE_PHONE_DURING_CUTSCENE();
		return retval;
	}

	void LUA_NATIVE_CUTSCENE_SET_CUTSCENE_CAN_BE_SKIPPED( bool p0 )
	{
		CUTSCENE::SET_CUTSCENE_CAN_BE_SKIPPED(p0);
	}

	void LUA_NATIVE_CUTSCENE_SET_CAN_DISPLAY_MINIMAP_DURING_CUTSCENE_THIS_UPDATE(  )
	{
		CUTSCENE::SET_CAN_DISPLAY_MINIMAP_DURING_CUTSCENE_THIS_UPDATE();
	}

	void LUA_NATIVE_CUTSCENE_SET_CUTSCENE_PED_COMPONENT_VARIATION( const char* cutsceneEntName, int componentId, int drawableId, int textureId, Hash modelHash )
	{
		CUTSCENE::SET_CUTSCENE_PED_COMPONENT_VARIATION(cutsceneEntName, componentId, drawableId, textureId, modelHash);
	}

	void LUA_NATIVE_CUTSCENE_SET_CUTSCENE_PED_COMPONENT_VARIATION_FROM_PED( const char* cutsceneEntName, Ped ped, Hash modelHash )
	{
		CUTSCENE::SET_CUTSCENE_PED_COMPONENT_VARIATION_FROM_PED(cutsceneEntName, ped, modelHash);
	}

	bool LUA_NATIVE_CUTSCENE_DOES_CUTSCENE_ENTITY_EXIST( const char* cutsceneEntName, Hash modelHash )
	{
		auto retval = (bool)CUTSCENE::DOES_CUTSCENE_ENTITY_EXIST(cutsceneEntName, modelHash);
		return retval;
	}

	void LUA_NATIVE_CUTSCENE_SET_CUTSCENE_PED_PROP_VARIATION( const char* cutsceneEntName, int componentId, int drawableId, int textureId, Hash modelHash )
	{
		CUTSCENE::SET_CUTSCENE_PED_PROP_VARIATION(cutsceneEntName, componentId, drawableId, textureId, modelHash);
	}

	bool LUA_NATIVE_CUTSCENE_HAS_CUTSCENE_CUT_THIS_FRAME(  )
	{
		auto retval = (bool)CUTSCENE::HAS_CUTSCENE_CUT_THIS_FRAME();
		return retval;
	}

	void LUA_NATIVE_DATAFILE_DATAFILE_WATCH_REQUEST_ID( int requestId )
	{
		DATAFILE::DATAFILE_WATCH_REQUEST_ID(requestId);
	}

	void LUA_NATIVE_DATAFILE_DATAFILE_CLEAR_WATCH_LIST(  )
	{
		DATAFILE::DATAFILE_CLEAR_WATCH_LIST();
	}

	bool LUA_NATIVE_DATAFILE_DATAFILE_IS_VALID_REQUEST_ID( int index )
	{
		auto retval = (bool)DATAFILE::DATAFILE_IS_VALID_REQUEST_ID(index);
		return retval;
	}

	bool LUA_NATIVE_DATAFILE_DATAFILE_HAS_LOADED_FILE_DATA( int requestId )
	{
		auto retval = (bool)DATAFILE::DATAFILE_HAS_LOADED_FILE_DATA(requestId);
		return retval;
	}

	bool LUA_NATIVE_DATAFILE_DATAFILE_HAS_VALID_FILE_DATA( int requestId )
	{
		auto retval = (bool)DATAFILE::DATAFILE_HAS_VALID_FILE_DATA(requestId);
		return retval;
	}

	bool LUA_NATIVE_DATAFILE_DATAFILE_SELECT_ACTIVE_FILE( int requestId, Any p1 )
	{
		auto retval = (bool)DATAFILE::DATAFILE_SELECT_ACTIVE_FILE(requestId, p1);
		return retval;
	}

	bool LUA_NATIVE_DATAFILE_DATAFILE_DELETE_REQUESTED_FILE( int requestId )
	{
		auto retval = (bool)DATAFILE::DATAFILE_DELETE_REQUESTED_FILE(requestId);
		return retval;
	}

	std::tuple<bool, Any> LUA_NATIVE_DATAFILE_UGC_CREATE_CONTENT( Any data, int dataCount, const char* contentName, const char* description, const char* tagsCsv, const char* contentTypeName, bool publish, Any p7 )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)DATAFILE::UGC_CREATE_CONTENT(&data, dataCount, contentName, description, tagsCsv, contentTypeName, publish, p7);
		std::get<1>(return_values) = data;

		return return_values;
	}

	bool LUA_NATIVE_DATAFILE_UGC_CREATE_MISSION( const char* contentName, const char* description, const char* tagsCsv, const char* contentTypeName, bool publish, Any p5 )
	{
		auto retval = (bool)DATAFILE::UGC_CREATE_MISSION(contentName, description, tagsCsv, contentTypeName, publish, p5);
		return retval;
	}

	std::tuple<bool, Any> LUA_NATIVE_DATAFILE_UGC_UPDATE_CONTENT( const char* contentId, Any data, int dataCount, const char* contentName, const char* description, const char* tagsCsv, const char* contentTypeName, Any p7 )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)DATAFILE::UGC_UPDATE_CONTENT(contentId, &data, dataCount, contentName, description, tagsCsv, contentTypeName, p7);
		std::get<1>(return_values) = data;

		return return_values;
	}

	bool LUA_NATIVE_DATAFILE_UGC_UPDATE_MISSION( const char* contentId, const char* contentName, const char* description, const char* tagsCsv, const char* contentTypeName, Any p5 )
	{
		auto retval = (bool)DATAFILE::UGC_UPDATE_MISSION(contentId, contentName, description, tagsCsv, contentTypeName, p5);
		return retval;
	}

	bool LUA_NATIVE_DATAFILE_UGC_SET_PLAYER_DATA( const char* contentId, float rating, const char* contentTypeName, Any p3 )
	{
		auto retval = (bool)DATAFILE::UGC_SET_PLAYER_DATA(contentId, rating, contentTypeName, p3);
		return retval;
	}

	bool LUA_NATIVE_DATAFILE_DATAFILE_SELECT_UGC_DATA( int p0, Any p1 )
	{
		auto retval = (bool)DATAFILE::DATAFILE_SELECT_UGC_DATA(p0, p1);
		return retval;
	}

	bool LUA_NATIVE_DATAFILE_DATAFILE_SELECT_UGC_STATS( int p0, bool p1, Any p2 )
	{
		auto retval = (bool)DATAFILE::DATAFILE_SELECT_UGC_STATS(p0, p1, p2);
		return retval;
	}

	bool LUA_NATIVE_DATAFILE_DATAFILE_SELECT_UGC_PLAYER_DATA( int p0, Any p1 )
	{
		auto retval = (bool)DATAFILE::DATAFILE_SELECT_UGC_PLAYER_DATA(p0, p1);
		return retval;
	}

	bool LUA_NATIVE_DATAFILE_DATAFILE_SELECT_CREATOR_STATS( int p0, Any p1 )
	{
		auto retval = (bool)DATAFILE::DATAFILE_SELECT_CREATOR_STATS(p0, p1);
		return retval;
	}

	bool LUA_NATIVE_DATAFILE_DATAFILE_LOAD_OFFLINE_UGC( const char* filename, Any p1 )
	{
		auto retval = (bool)DATAFILE::DATAFILE_LOAD_OFFLINE_UGC(filename, p1);
		return retval;
	}

	void LUA_NATIVE_DATAFILE_DATAFILE_CREATE( int p0 )
	{
		DATAFILE::DATAFILE_CREATE(p0);
	}

	void LUA_NATIVE_DATAFILE_DATAFILE_DELETE( int p0 )
	{
		DATAFILE::DATAFILE_DELETE(p0);
	}

	void LUA_NATIVE_DATAFILE_DATAFILE_STORE_MISSION_HEADER( int p0 )
	{
		DATAFILE::DATAFILE_STORE_MISSION_HEADER(p0);
	}

	void LUA_NATIVE_DATAFILE_DATAFILE_FLUSH_MISSION_HEADER(  )
	{
		DATAFILE::DATAFILE_FLUSH_MISSION_HEADER();
	}

	Any* LUA_NATIVE_DATAFILE_DATAFILE_GET_FILE_DICT( int p0 )
	{
		auto retval = DATAFILE::DATAFILE_GET_FILE_DICT(p0);
		return retval;
	}

	bool LUA_NATIVE_DATAFILE_DATAFILE_START_SAVE_TO_CLOUD( const char* filename, Any p1 )
	{
		auto retval = (bool)DATAFILE::DATAFILE_START_SAVE_TO_CLOUD(filename, p1);
		return retval;
	}

	std::tuple<bool, bool> LUA_NATIVE_DATAFILE_DATAFILE_UPDATE_SAVE_TO_CLOUD( bool p0 )
	{
		std::tuple<bool, bool> return_values;
		std::get<0>(return_values) = (bool)DATAFILE::DATAFILE_UPDATE_SAVE_TO_CLOUD((BOOL*)&p0);
		std::get<1>(return_values) = p0;

		return return_values;
	}

	bool LUA_NATIVE_DATAFILE_DATAFILE_IS_SAVE_PENDING(  )
	{
		auto retval = (bool)DATAFILE::DATAFILE_IS_SAVE_PENDING();
		return retval;
	}

	bool LUA_NATIVE_DATAFILE_DATAFILE_LOAD_OFFLINE_UGC_FOR_ADDITIONAL_DATA_FILE( Any p0, Any p1 )
	{
		auto retval = (bool)DATAFILE::DATAFILE_LOAD_OFFLINE_UGC_FOR_ADDITIONAL_DATA_FILE(p0, p1);
		return retval;
	}

	void LUA_NATIVE_DATAFILE_DATAFILE_DELETE_FOR_ADDITIONAL_DATA_FILE( Any p0 )
	{
		DATAFILE::DATAFILE_DELETE_FOR_ADDITIONAL_DATA_FILE(p0);
	}

	Any* LUA_NATIVE_DATAFILE_DATAFILE_GET_FILE_DICT_FOR_ADDITIONAL_DATA_FILE( Any p0 )
	{
		auto retval = DATAFILE::DATAFILE_GET_FILE_DICT_FOR_ADDITIONAL_DATA_FILE(p0);
		return retval;
	}

	Any LUA_NATIVE_DATAFILE_DATADICT_SET_BOOL( Any objectData, const char* key, bool value )
	{
		DATAFILE::DATADICT_SET_BOOL(&objectData, key, value);
		return objectData;
	}

	Any LUA_NATIVE_DATAFILE_DATADICT_SET_INT( Any objectData, const char* key, int value )
	{
		DATAFILE::DATADICT_SET_INT(&objectData, key, value);
		return objectData;
	}

	Any LUA_NATIVE_DATAFILE_DATADICT_SET_FLOAT( Any objectData, const char* key, float value )
	{
		DATAFILE::DATADICT_SET_FLOAT(&objectData, key, value);
		return objectData;
	}

	Any LUA_NATIVE_DATAFILE_DATADICT_SET_STRING( Any objectData, const char* key, const char* value )
	{
		DATAFILE::DATADICT_SET_STRING(&objectData, key, value);
		return objectData;
	}

	Any LUA_NATIVE_DATAFILE_DATADICT_SET_VECTOR( Any objectData, const char* key, float valueX, float valueY, float valueZ )
	{
		DATAFILE::DATADICT_SET_VECTOR(&objectData, key, valueX, valueY, valueZ);
		return objectData;
	}

	std::tuple<Any*, Any> LUA_NATIVE_DATAFILE_DATADICT_CREATE_DICT( Any objectData, const char* key )
	{
		std::tuple<Any*, Any> return_values;
		std::get<0>(return_values) = DATAFILE::DATADICT_CREATE_DICT(&objectData, key);
		std::get<1>(return_values) = objectData;

		return return_values;
	}

	std::tuple<Any*, Any> LUA_NATIVE_DATAFILE_DATADICT_CREATE_ARRAY( Any objectData, const char* key )
	{
		std::tuple<Any*, Any> return_values;
		std::get<0>(return_values) = DATAFILE::DATADICT_CREATE_ARRAY(&objectData, key);
		std::get<1>(return_values) = objectData;

		return return_values;
	}

	std::tuple<bool, Any> LUA_NATIVE_DATAFILE_DATADICT_GET_BOOL( Any objectData, const char* key )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)DATAFILE::DATADICT_GET_BOOL(&objectData, key);
		std::get<1>(return_values) = objectData;

		return return_values;
	}

	std::tuple<int, Any> LUA_NATIVE_DATAFILE_DATADICT_GET_INT( Any objectData, const char* key )
	{
		std::tuple<int, Any> return_values;
		std::get<0>(return_values) = DATAFILE::DATADICT_GET_INT(&objectData, key);
		std::get<1>(return_values) = objectData;

		return return_values;
	}

	std::tuple<float, Any> LUA_NATIVE_DATAFILE_DATADICT_GET_FLOAT( Any objectData, const char* key )
	{
		std::tuple<float, Any> return_values;
		std::get<0>(return_values) = DATAFILE::DATADICT_GET_FLOAT(&objectData, key);
		std::get<1>(return_values) = objectData;

		return return_values;
	}

	std::tuple<const char*, Any> LUA_NATIVE_DATAFILE_DATADICT_GET_STRING( Any objectData, const char* key )
	{
		std::tuple<const char*, Any> return_values;
		std::get<0>(return_values) = DATAFILE::DATADICT_GET_STRING(&objectData, key);
		std::get<1>(return_values) = objectData;

		return return_values;
	}

	std::tuple<Vector3, Any> LUA_NATIVE_DATAFILE_DATADICT_GET_VECTOR( Any objectData, const char* key )
	{
		std::tuple<Vector3, Any> return_values;
		std::get<0>(return_values) = DATAFILE::DATADICT_GET_VECTOR(&objectData, key);
		std::get<1>(return_values) = objectData;

		return return_values;
	}

	std::tuple<Any*, Any> LUA_NATIVE_DATAFILE_DATADICT_GET_DICT( Any objectData, const char* key )
	{
		std::tuple<Any*, Any> return_values;
		std::get<0>(return_values) = DATAFILE::DATADICT_GET_DICT(&objectData, key);
		std::get<1>(return_values) = objectData;

		return return_values;
	}

	std::tuple<Any*, Any> LUA_NATIVE_DATAFILE_DATADICT_GET_ARRAY( Any objectData, const char* key )
	{
		std::tuple<Any*, Any> return_values;
		std::get<0>(return_values) = DATAFILE::DATADICT_GET_ARRAY(&objectData, key);
		std::get<1>(return_values) = objectData;

		return return_values;
	}

	std::tuple<int, Any> LUA_NATIVE_DATAFILE_DATADICT_GET_TYPE( Any objectData, const char* key )
	{
		std::tuple<int, Any> return_values;
		std::get<0>(return_values) = DATAFILE::DATADICT_GET_TYPE(&objectData, key);
		std::get<1>(return_values) = objectData;

		return return_values;
	}

	Any LUA_NATIVE_DATAFILE_DATAARRAY_ADD_BOOL( Any arrayData, bool value )
	{
		DATAFILE::DATAARRAY_ADD_BOOL(&arrayData, value);
		return arrayData;
	}

	Any LUA_NATIVE_DATAFILE_DATAARRAY_ADD_INT( Any arrayData, int value )
	{
		DATAFILE::DATAARRAY_ADD_INT(&arrayData, value);
		return arrayData;
	}

	Any LUA_NATIVE_DATAFILE_DATAARRAY_ADD_FLOAT( Any arrayData, float value )
	{
		DATAFILE::DATAARRAY_ADD_FLOAT(&arrayData, value);
		return arrayData;
	}

	Any LUA_NATIVE_DATAFILE_DATAARRAY_ADD_STRING( Any arrayData, const char* value )
	{
		DATAFILE::DATAARRAY_ADD_STRING(&arrayData, value);
		return arrayData;
	}

	Any LUA_NATIVE_DATAFILE_DATAARRAY_ADD_VECTOR( Any arrayData, float valueX, float valueY, float valueZ )
	{
		DATAFILE::DATAARRAY_ADD_VECTOR(&arrayData, valueX, valueY, valueZ);
		return arrayData;
	}

	std::tuple<Any*, Any> LUA_NATIVE_DATAFILE_DATAARRAY_ADD_DICT( Any arrayData )
	{
		std::tuple<Any*, Any> return_values;
		std::get<0>(return_values) = DATAFILE::DATAARRAY_ADD_DICT(&arrayData);
		std::get<1>(return_values) = arrayData;

		return return_values;
	}

	std::tuple<bool, Any> LUA_NATIVE_DATAFILE_DATAARRAY_GET_BOOL( Any arrayData, int arrayIndex )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)DATAFILE::DATAARRAY_GET_BOOL(&arrayData, arrayIndex);
		std::get<1>(return_values) = arrayData;

		return return_values;
	}

	std::tuple<int, Any> LUA_NATIVE_DATAFILE_DATAARRAY_GET_INT( Any arrayData, int arrayIndex )
	{
		std::tuple<int, Any> return_values;
		std::get<0>(return_values) = DATAFILE::DATAARRAY_GET_INT(&arrayData, arrayIndex);
		std::get<1>(return_values) = arrayData;

		return return_values;
	}

	std::tuple<float, Any> LUA_NATIVE_DATAFILE_DATAARRAY_GET_FLOAT( Any arrayData, int arrayIndex )
	{
		std::tuple<float, Any> return_values;
		std::get<0>(return_values) = DATAFILE::DATAARRAY_GET_FLOAT(&arrayData, arrayIndex);
		std::get<1>(return_values) = arrayData;

		return return_values;
	}

	std::tuple<const char*, Any> LUA_NATIVE_DATAFILE_DATAARRAY_GET_STRING( Any arrayData, int arrayIndex )
	{
		std::tuple<const char*, Any> return_values;
		std::get<0>(return_values) = DATAFILE::DATAARRAY_GET_STRING(&arrayData, arrayIndex);
		std::get<1>(return_values) = arrayData;

		return return_values;
	}

	std::tuple<Vector3, Any> LUA_NATIVE_DATAFILE_DATAARRAY_GET_VECTOR( Any arrayData, int arrayIndex )
	{
		std::tuple<Vector3, Any> return_values;
		std::get<0>(return_values) = DATAFILE::DATAARRAY_GET_VECTOR(&arrayData, arrayIndex);
		std::get<1>(return_values) = arrayData;

		return return_values;
	}

	std::tuple<Any*, Any> LUA_NATIVE_DATAFILE_DATAARRAY_GET_DICT( Any arrayData, int arrayIndex )
	{
		std::tuple<Any*, Any> return_values;
		std::get<0>(return_values) = DATAFILE::DATAARRAY_GET_DICT(&arrayData, arrayIndex);
		std::get<1>(return_values) = arrayData;

		return return_values;
	}

	std::tuple<int, Any> LUA_NATIVE_DATAFILE_DATAARRAY_GET_COUNT( Any arrayData )
	{
		std::tuple<int, Any> return_values;
		std::get<0>(return_values) = DATAFILE::DATAARRAY_GET_COUNT(&arrayData);
		std::get<1>(return_values) = arrayData;

		return return_values;
	}

	std::tuple<int, Any> LUA_NATIVE_DATAFILE_DATAARRAY_GET_TYPE( Any arrayData, int arrayIndex )
	{
		std::tuple<int, Any> return_values;
		std::get<0>(return_values) = DATAFILE::DATAARRAY_GET_TYPE(&arrayData, arrayIndex);
		std::get<1>(return_values) = arrayData;

		return return_values;
	}

	bool LUA_NATIVE_DECORATOR_DECOR_SET_TIME( Entity entity, const char* propertyName, int timestamp )
	{
		auto retval = (bool)DECORATOR::DECOR_SET_TIME(entity, propertyName, timestamp);
		return retval;
	}

	bool LUA_NATIVE_DECORATOR_DECOR_SET_BOOL( Entity entity, const char* propertyName, bool value )
	{
		auto retval = (bool)DECORATOR::DECOR_SET_BOOL(entity, propertyName, value);
		return retval;
	}

	bool LUA_NATIVE_DECORATOR_DECOR_SET_FLOAT( Entity entity, const char* propertyName, float value )
	{
		auto retval = (bool)DECORATOR::DECOR_SET_FLOAT(entity, propertyName, value);
		return retval;
	}

	bool LUA_NATIVE_DECORATOR_DECOR_SET_INT( Entity entity, const char* propertyName, int value )
	{
		auto retval = (bool)DECORATOR::DECOR_SET_INT(entity, propertyName, value);
		return retval;
	}

	bool LUA_NATIVE_DECORATOR_DECOR_GET_BOOL( Entity entity, const char* propertyName )
	{
		auto retval = (bool)DECORATOR::DECOR_GET_BOOL(entity, propertyName);
		return retval;
	}

	float LUA_NATIVE_DECORATOR_DECOR_GET_FLOAT( Entity entity, const char* propertyName )
	{
		auto retval = DECORATOR::DECOR_GET_FLOAT(entity, propertyName);
		return retval;
	}

	int LUA_NATIVE_DECORATOR_DECOR_GET_INT( Entity entity, const char* propertyName )
	{
		auto retval = DECORATOR::DECOR_GET_INT(entity, propertyName);
		return retval;
	}

	bool LUA_NATIVE_DECORATOR_DECOR_EXIST_ON( Entity entity, const char* propertyName )
	{
		auto retval = (bool)DECORATOR::DECOR_EXIST_ON(entity, propertyName);
		return retval;
	}

	bool LUA_NATIVE_DECORATOR_DECOR_REMOVE( Entity entity, const char* propertyName )
	{
		auto retval = (bool)DECORATOR::DECOR_REMOVE(entity, propertyName);
		return retval;
	}

	void LUA_NATIVE_DECORATOR_DECOR_REGISTER( const char* propertyName, int type )
	{
		DECORATOR::DECOR_REGISTER(propertyName, type);
	}

	bool LUA_NATIVE_DECORATOR_DECOR_IS_REGISTERED_AS_TYPE( const char* propertyName, int type )
	{
		auto retval = (bool)DECORATOR::DECOR_IS_REGISTERED_AS_TYPE(propertyName, type);
		return retval;
	}

	void LUA_NATIVE_DECORATOR_DECOR_REGISTER_LOCK(  )
	{
		DECORATOR::DECOR_REGISTER_LOCK();
	}

	bool LUA_NATIVE_DLC_ARE_ANY_CCS_PENDING(  )
	{
		auto retval = (bool)DLC::ARE_ANY_CCS_PENDING();
		return retval;
	}

	bool LUA_NATIVE_DLC_IS_DLC_PRESENT( Hash dlcHash )
	{
		auto retval = (bool)DLC::IS_DLC_PRESENT(dlcHash);
		return retval;
	}

	bool LUA_NATIVE_DLC_DLC_CHECK_CLOUD_DATA_CORRECT(  )
	{
		auto retval = (bool)DLC::DLC_CHECK_CLOUD_DATA_CORRECT();
		return retval;
	}

	int LUA_NATIVE_DLC_GET_EXTRACONTENT_CLOUD_RESULT(  )
	{
		auto retval = DLC::GET_EXTRACONTENT_CLOUD_RESULT();
		return retval;
	}

	bool LUA_NATIVE_DLC_DLC_CHECK_COMPAT_PACK_CONFIGURATION(  )
	{
		auto retval = (bool)DLC::DLC_CHECK_COMPAT_PACK_CONFIGURATION();
		return retval;
	}

	bool LUA_NATIVE_DLC_GET_EVER_HAD_BAD_PACK_ORDER(  )
	{
		auto retval = (bool)DLC::GET_EVER_HAD_BAD_PACK_ORDER();
		return retval;
	}

	bool LUA_NATIVE_DLC_GET_IS_LOADING_SCREEN_ACTIVE(  )
	{
		auto retval = (bool)DLC::GET_IS_LOADING_SCREEN_ACTIVE();
		return retval;
	}

	bool LUA_NATIVE_DLC_GET_IS_INITIAL_LOADING_SCREEN_ACTIVE(  )
	{
		auto retval = (bool)DLC::GET_IS_INITIAL_LOADING_SCREEN_ACTIVE();
		return retval;
	}

	std::tuple<bool, bool> LUA_NATIVE_DLC_HAS_CLOUD_REQUESTS_FINISHED( bool p0, int unused )
	{
		std::tuple<bool, bool> return_values;
		std::get<0>(return_values) = (bool)DLC::HAS_CLOUD_REQUESTS_FINISHED((BOOL*)&p0, unused);
		std::get<1>(return_values) = p0;

		return return_values;
	}

	void LUA_NATIVE_DLC_ON_ENTER_SP(  )
	{
		DLC::ON_ENTER_SP();
	}

	void LUA_NATIVE_DLC_ON_ENTER_MP(  )
	{
		DLC::ON_ENTER_MP();
	}

	bool LUA_NATIVE_ENTITY_DOES_ENTITY_EXIST( Entity entity )
	{
		auto retval = (bool)ENTITY::DOES_ENTITY_EXIST(entity);
		return retval;
	}

	bool LUA_NATIVE_ENTITY_DOES_ENTITY_BELONG_TO_THIS_SCRIPT( Entity entity, bool p1 )
	{
		auto retval = (bool)ENTITY::DOES_ENTITY_BELONG_TO_THIS_SCRIPT(entity, p1);
		return retval;
	}

	bool LUA_NATIVE_ENTITY_DOES_ENTITY_HAVE_DRAWABLE( Entity entity )
	{
		auto retval = (bool)ENTITY::DOES_ENTITY_HAVE_DRAWABLE(entity);
		return retval;
	}

	bool LUA_NATIVE_ENTITY_DOES_ENTITY_HAVE_PHYSICS( Entity entity )
	{
		auto retval = (bool)ENTITY::DOES_ENTITY_HAVE_PHYSICS(entity);
		return retval;
	}

	bool LUA_NATIVE_ENTITY_DOES_ENTITY_HAVE_SKELETON( Entity entity )
	{
		auto retval = (bool)ENTITY::DOES_ENTITY_HAVE_SKELETON(entity);
		return retval;
	}

	bool LUA_NATIVE_ENTITY_DOES_ENTITY_HAVE_ANIM_DIRECTOR( Entity entity )
	{
		auto retval = (bool)ENTITY::DOES_ENTITY_HAVE_ANIM_DIRECTOR(entity);
		return retval;
	}

	bool LUA_NATIVE_ENTITY_HAS_ENTITY_ANIM_FINISHED( Entity entity, const char* animDict, const char* animName, int p3 )
	{
		auto retval = (bool)ENTITY::HAS_ENTITY_ANIM_FINISHED(entity, animDict, animName, p3);
		return retval;
	}

	bool LUA_NATIVE_ENTITY_HAS_ENTITY_BEEN_DAMAGED_BY_ANY_OBJECT( Entity entity )
	{
		auto retval = (bool)ENTITY::HAS_ENTITY_BEEN_DAMAGED_BY_ANY_OBJECT(entity);
		return retval;
	}

	bool LUA_NATIVE_ENTITY_HAS_ENTITY_BEEN_DAMAGED_BY_ANY_PED( Entity entity )
	{
		auto retval = (bool)ENTITY::HAS_ENTITY_BEEN_DAMAGED_BY_ANY_PED(entity);
		return retval;
	}

	bool LUA_NATIVE_ENTITY_HAS_ENTITY_BEEN_DAMAGED_BY_ANY_VEHICLE( Entity entity )
	{
		auto retval = (bool)ENTITY::HAS_ENTITY_BEEN_DAMAGED_BY_ANY_VEHICLE(entity);
		return retval;
	}

	bool LUA_NATIVE_ENTITY_HAS_ENTITY_BEEN_DAMAGED_BY_ENTITY( Entity entity1, Entity entity2, bool p2 )
	{
		auto retval = (bool)ENTITY::HAS_ENTITY_BEEN_DAMAGED_BY_ENTITY(entity1, entity2, p2);
		return retval;
	}

	bool LUA_NATIVE_ENTITY_HAS_ENTITY_CLEAR_LOS_TO_ENTITY( Entity entity1, Entity entity2, int traceType )
	{
		auto retval = (bool)ENTITY::HAS_ENTITY_CLEAR_LOS_TO_ENTITY(entity1, entity2, traceType);
		return retval;
	}

	bool LUA_NATIVE_ENTITY_HAS_ENTITY_CLEAR_LOS_TO_ENTITY_ADJUST_FOR_COVER( Entity entity1, Entity entity2, int traceType )
	{
		auto retval = (bool)ENTITY::HAS_ENTITY_CLEAR_LOS_TO_ENTITY_ADJUST_FOR_COVER(entity1, entity2, traceType);
		return retval;
	}

	bool LUA_NATIVE_ENTITY_HAS_ENTITY_CLEAR_LOS_TO_ENTITY_IN_FRONT( Entity entity1, Entity entity2 )
	{
		auto retval = (bool)ENTITY::HAS_ENTITY_CLEAR_LOS_TO_ENTITY_IN_FRONT(entity1, entity2);
		return retval;
	}

	bool LUA_NATIVE_ENTITY_HAS_ENTITY_COLLIDED_WITH_ANYTHING( Entity entity )
	{
		auto retval = (bool)ENTITY::HAS_ENTITY_COLLIDED_WITH_ANYTHING(entity);
		return retval;
	}

	Entity LUA_NATIVE_ENTITY_GET_LAST_ENTITY_HIT_BY_ENTITY_( Entity entity )
	{
		auto retval = ENTITY::GET_LAST_ENTITY_HIT_BY_ENTITY_(entity);
		return retval;
	}

	Hash LUA_NATIVE_ENTITY_GET_LAST_MATERIAL_HIT_BY_ENTITY( Entity entity )
	{
		auto retval = ENTITY::GET_LAST_MATERIAL_HIT_BY_ENTITY(entity);
		return retval;
	}

	Vector3 LUA_NATIVE_ENTITY_GET_COLLISION_NORMAL_OF_LAST_HIT_FOR_ENTITY( Entity entity )
	{
		auto retval = ENTITY::GET_COLLISION_NORMAL_OF_LAST_HIT_FOR_ENTITY(entity);
		return retval;
	}

	void LUA_NATIVE_ENTITY_FORCE_ENTITY_AI_AND_ANIMATION_UPDATE( Entity entity )
	{
		ENTITY::FORCE_ENTITY_AI_AND_ANIMATION_UPDATE(entity);
	}

	float LUA_NATIVE_ENTITY_GET_ENTITY_ANIM_CURRENT_TIME( Entity entity, const char* animDict, const char* animName )
	{
		auto retval = ENTITY::GET_ENTITY_ANIM_CURRENT_TIME(entity, animDict, animName);
		return retval;
	}

	float LUA_NATIVE_ENTITY_GET_ENTITY_ANIM_TOTAL_TIME( Entity entity, const char* animDict, const char* animName )
	{
		auto retval = ENTITY::GET_ENTITY_ANIM_TOTAL_TIME(entity, animDict, animName);
		return retval;
	}

	float LUA_NATIVE_ENTITY_GET_ANIM_DURATION( const char* animDict, const char* animName )
	{
		auto retval = ENTITY::GET_ANIM_DURATION(animDict, animName);
		return retval;
	}

	Entity LUA_NATIVE_ENTITY_GET_ENTITY_ATTACHED_TO( Entity entity )
	{
		auto retval = ENTITY::GET_ENTITY_ATTACHED_TO(entity);
		return retval;
	}

	Vector3 LUA_NATIVE_ENTITY_GET_ENTITY_COORDS( Entity entity, bool alive )
	{
		auto retval = ENTITY::GET_ENTITY_COORDS(entity, alive);
		return retval;
	}

	Vector3 LUA_NATIVE_ENTITY_GET_ENTITY_FORWARD_VECTOR( Entity entity )
	{
		auto retval = ENTITY::GET_ENTITY_FORWARD_VECTOR(entity);
		return retval;
	}

	float LUA_NATIVE_ENTITY_GET_ENTITY_FORWARD_X( Entity entity )
	{
		auto retval = ENTITY::GET_ENTITY_FORWARD_X(entity);
		return retval;
	}

	float LUA_NATIVE_ENTITY_GET_ENTITY_FORWARD_Y( Entity entity )
	{
		auto retval = ENTITY::GET_ENTITY_FORWARD_Y(entity);
		return retval;
	}

	float LUA_NATIVE_ENTITY_GET_ENTITY_HEADING( Entity entity )
	{
		auto retval = ENTITY::GET_ENTITY_HEADING(entity);
		return retval;
	}

	float LUA_NATIVE_ENTITY_GET_ENTITY_HEADING_FROM_EULERS( Entity entity )
	{
		auto retval = ENTITY::GET_ENTITY_HEADING_FROM_EULERS(entity);
		return retval;
	}

	int LUA_NATIVE_ENTITY_GET_ENTITY_HEALTH( Entity entity )
	{
		auto retval = ENTITY::GET_ENTITY_HEALTH(entity);
		return retval;
	}

	int LUA_NATIVE_ENTITY_GET_ENTITY_MAX_HEALTH( Entity entity )
	{
		auto retval = ENTITY::GET_ENTITY_MAX_HEALTH(entity);
		return retval;
	}

	void LUA_NATIVE_ENTITY_SET_ENTITY_MAX_HEALTH( Entity entity, int value )
	{
		ENTITY::SET_ENTITY_MAX_HEALTH(entity, value);
	}

	float LUA_NATIVE_ENTITY_GET_ENTITY_HEIGHT( Entity entity, float X, float Y, float Z, bool atTop, bool inWorldCoords )
	{
		auto retval = ENTITY::GET_ENTITY_HEIGHT(entity, X, Y, Z, atTop, inWorldCoords);
		return retval;
	}

	float LUA_NATIVE_ENTITY_GET_ENTITY_HEIGHT_ABOVE_GROUND( Entity entity )
	{
		auto retval = ENTITY::GET_ENTITY_HEIGHT_ABOVE_GROUND(entity);
		return retval;
	}

	std::tuple<Vector3, Vector3, Vector3, Vector3> LUA_NATIVE_ENTITY_GET_ENTITY_MATRIX( Entity entity, Vector3 forwardVector, Vector3 rightVector, Vector3 upVector, Vector3 position )
	{
		std::tuple<Vector3, Vector3, Vector3, Vector3> return_values;
		ENTITY::GET_ENTITY_MATRIX(entity, &forwardVector, &rightVector, &upVector, &position);
		std::get<0>(return_values) = forwardVector;
		std::get<1>(return_values) = rightVector;
		std::get<2>(return_values) = upVector;
		std::get<3>(return_values) = position;

		return return_values;
	}

	Hash LUA_NATIVE_ENTITY_GET_ENTITY_MODEL( Entity entity )
	{
		auto retval = ENTITY::GET_ENTITY_MODEL(entity);
		return retval;
	}

	Vector3 LUA_NATIVE_ENTITY_GET_OFFSET_FROM_ENTITY_GIVEN_WORLD_COORDS( Entity entity, float posX, float posY, float posZ )
	{
		auto retval = ENTITY::GET_OFFSET_FROM_ENTITY_GIVEN_WORLD_COORDS(entity, posX, posY, posZ);
		return retval;
	}

	Vector3 LUA_NATIVE_ENTITY_GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS( Entity entity, float offsetX, float offsetY, float offsetZ )
	{
		auto retval = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(entity, offsetX, offsetY, offsetZ);
		return retval;
	}

	float LUA_NATIVE_ENTITY_GET_ENTITY_PITCH( Entity entity )
	{
		auto retval = ENTITY::GET_ENTITY_PITCH(entity);
		return retval;
	}

	std::tuple<float, float, float, float> LUA_NATIVE_ENTITY_GET_ENTITY_QUATERNION( Entity entity, float x, float y, float z, float w )
	{
		std::tuple<float, float, float, float> return_values;
		ENTITY::GET_ENTITY_QUATERNION(entity, &x, &y, &z, &w);
		std::get<0>(return_values) = x;
		std::get<1>(return_values) = y;
		std::get<2>(return_values) = z;
		std::get<3>(return_values) = w;

		return return_values;
	}

	float LUA_NATIVE_ENTITY_GET_ENTITY_ROLL( Entity entity )
	{
		auto retval = ENTITY::GET_ENTITY_ROLL(entity);
		return retval;
	}

	Vector3 LUA_NATIVE_ENTITY_GET_ENTITY_ROTATION( Entity entity, int rotationOrder )
	{
		auto retval = ENTITY::GET_ENTITY_ROTATION(entity, rotationOrder);
		return retval;
	}

	Vector3 LUA_NATIVE_ENTITY_GET_ENTITY_ROTATION_VELOCITY( Entity entity )
	{
		auto retval = ENTITY::GET_ENTITY_ROTATION_VELOCITY(entity);
		return retval;
	}

	std::tuple<const char*, ScrHandle> LUA_NATIVE_ENTITY_GET_ENTITY_SCRIPT( Entity entity, ScrHandle script )
	{
		std::tuple<const char*, ScrHandle> return_values;
		std::get<0>(return_values) = ENTITY::GET_ENTITY_SCRIPT(entity, &script);
		std::get<1>(return_values) = script;

		return return_values;
	}

	float LUA_NATIVE_ENTITY_GET_ENTITY_SPEED( Entity entity )
	{
		auto retval = ENTITY::GET_ENTITY_SPEED(entity);
		return retval;
	}

	Vector3 LUA_NATIVE_ENTITY_GET_ENTITY_SPEED_VECTOR( Entity entity, bool relative )
	{
		auto retval = ENTITY::GET_ENTITY_SPEED_VECTOR(entity, relative);
		return retval;
	}

	float LUA_NATIVE_ENTITY_GET_ENTITY_UPRIGHT_VALUE( Entity entity )
	{
		auto retval = ENTITY::GET_ENTITY_UPRIGHT_VALUE(entity);
		return retval;
	}

	Vector3 LUA_NATIVE_ENTITY_GET_ENTITY_VELOCITY( Entity entity )
	{
		auto retval = ENTITY::GET_ENTITY_VELOCITY(entity);
		return retval;
	}

	Object LUA_NATIVE_ENTITY_GET_OBJECT_INDEX_FROM_ENTITY_INDEX( Entity entity )
	{
		auto retval = ENTITY::GET_OBJECT_INDEX_FROM_ENTITY_INDEX(entity);
		return retval;
	}

	Ped LUA_NATIVE_ENTITY_GET_PED_INDEX_FROM_ENTITY_INDEX( Entity entity )
	{
		auto retval = ENTITY::GET_PED_INDEX_FROM_ENTITY_INDEX(entity);
		return retval;
	}

	Vehicle LUA_NATIVE_ENTITY_GET_VEHICLE_INDEX_FROM_ENTITY_INDEX( Entity entity )
	{
		auto retval = ENTITY::GET_VEHICLE_INDEX_FROM_ENTITY_INDEX(entity);
		return retval;
	}

	Vector3 LUA_NATIVE_ENTITY_GET_WORLD_POSITION_OF_ENTITY_BONE( Entity entity, int boneIndex )
	{
		auto retval = ENTITY::GET_WORLD_POSITION_OF_ENTITY_BONE(entity, boneIndex);
		return retval;
	}

	Player LUA_NATIVE_ENTITY_GET_NEAREST_PLAYER_TO_ENTITY( Entity entity )
	{
		auto retval = ENTITY::GET_NEAREST_PLAYER_TO_ENTITY(entity);
		return retval;
	}

	Player LUA_NATIVE_ENTITY_GET_NEAREST_PLAYER_TO_ENTITY_ON_TEAM( Entity entity, int team )
	{
		auto retval = ENTITY::GET_NEAREST_PLAYER_TO_ENTITY_ON_TEAM(entity, team);
		return retval;
	}

	int LUA_NATIVE_ENTITY_GET_NEAREST_PARTICIPANT_TO_ENTITY( Entity entity )
	{
		auto retval = ENTITY::GET_NEAREST_PARTICIPANT_TO_ENTITY(entity);
		return retval;
	}

	int LUA_NATIVE_ENTITY_GET_ENTITY_TYPE( Entity entity )
	{
		auto retval = ENTITY::GET_ENTITY_TYPE(entity);
		return retval;
	}

	int LUA_NATIVE_ENTITY_GET_ENTITY_POPULATION_TYPE( Entity entity )
	{
		auto retval = ENTITY::GET_ENTITY_POPULATION_TYPE(entity);
		return retval;
	}

	bool LUA_NATIVE_ENTITY_IS_AN_ENTITY( ScrHandle handle )
	{
		auto retval = (bool)ENTITY::IS_AN_ENTITY(handle);
		return retval;
	}

	bool LUA_NATIVE_ENTITY_IS_ENTITY_A_PED( Entity entity )
	{
		auto retval = (bool)ENTITY::IS_ENTITY_A_PED(entity);
		return retval;
	}

	bool LUA_NATIVE_ENTITY_IS_ENTITY_A_MISSION_ENTITY( Entity entity )
	{
		auto retval = (bool)ENTITY::IS_ENTITY_A_MISSION_ENTITY(entity);
		return retval;
	}

	bool LUA_NATIVE_ENTITY_IS_ENTITY_A_VEHICLE( Entity entity )
	{
		auto retval = (bool)ENTITY::IS_ENTITY_A_VEHICLE(entity);
		return retval;
	}

	bool LUA_NATIVE_ENTITY_IS_ENTITY_AN_OBJECT( Entity entity )
	{
		auto retval = (bool)ENTITY::IS_ENTITY_AN_OBJECT(entity);
		return retval;
	}

	bool LUA_NATIVE_ENTITY_IS_ENTITY_AT_COORD( Entity entity, float xPos, float yPos, float zPos, float xSize, float ySize, float zSize, bool p7, bool p8, int p9 )
	{
		auto retval = (bool)ENTITY::IS_ENTITY_AT_COORD(entity, xPos, yPos, zPos, xSize, ySize, zSize, p7, p8, p9);
		return retval;
	}

	bool LUA_NATIVE_ENTITY_IS_ENTITY_AT_ENTITY( Entity entity1, Entity entity2, float xSize, float ySize, float zSize, bool p5, bool p6, int p7 )
	{
		auto retval = (bool)ENTITY::IS_ENTITY_AT_ENTITY(entity1, entity2, xSize, ySize, zSize, p5, p6, p7);
		return retval;
	}

	bool LUA_NATIVE_ENTITY_IS_ENTITY_ATTACHED( Entity entity )
	{
		auto retval = (bool)ENTITY::IS_ENTITY_ATTACHED(entity);
		return retval;
	}

	bool LUA_NATIVE_ENTITY_IS_ENTITY_ATTACHED_TO_ANY_OBJECT( Entity entity )
	{
		auto retval = (bool)ENTITY::IS_ENTITY_ATTACHED_TO_ANY_OBJECT(entity);
		return retval;
	}

	bool LUA_NATIVE_ENTITY_IS_ENTITY_ATTACHED_TO_ANY_PED( Entity entity )
	{
		auto retval = (bool)ENTITY::IS_ENTITY_ATTACHED_TO_ANY_PED(entity);
		return retval;
	}

	bool LUA_NATIVE_ENTITY_IS_ENTITY_ATTACHED_TO_ANY_VEHICLE( Entity entity )
	{
		auto retval = (bool)ENTITY::IS_ENTITY_ATTACHED_TO_ANY_VEHICLE(entity);
		return retval;
	}

	bool LUA_NATIVE_ENTITY_IS_ENTITY_ATTACHED_TO_ENTITY( Entity from, Entity to )
	{
		auto retval = (bool)ENTITY::IS_ENTITY_ATTACHED_TO_ENTITY(from, to);
		return retval;
	}

	bool LUA_NATIVE_ENTITY_IS_ENTITY_DEAD( Entity entity, bool p1 )
	{
		auto retval = (bool)ENTITY::IS_ENTITY_DEAD(entity, p1);
		return retval;
	}

	bool LUA_NATIVE_ENTITY_IS_ENTITY_IN_AIR( Entity entity )
	{
		auto retval = (bool)ENTITY::IS_ENTITY_IN_AIR(entity);
		return retval;
	}

	bool LUA_NATIVE_ENTITY_IS_ENTITY_IN_ANGLED_AREA( Entity entity, float x1, float y1, float z1, float x2, float y2, float z2, float width, bool debug, bool includeZ, Any p10 )
	{
		auto retval = (bool)ENTITY::IS_ENTITY_IN_ANGLED_AREA(entity, x1, y1, z1, x2, y2, z2, width, debug, includeZ, p10);
		return retval;
	}

	bool LUA_NATIVE_ENTITY_IS_ENTITY_IN_AREA( Entity entity, float x1, float y1, float z1, float x2, float y2, float z2, bool p7, bool p8, Any p9 )
	{
		auto retval = (bool)ENTITY::IS_ENTITY_IN_AREA(entity, x1, y1, z1, x2, y2, z2, p7, p8, p9);
		return retval;
	}

	bool LUA_NATIVE_ENTITY_IS_ENTITY_IN_ZONE( Entity entity, const char* zone )
	{
		auto retval = (bool)ENTITY::IS_ENTITY_IN_ZONE(entity, zone);
		return retval;
	}

	bool LUA_NATIVE_ENTITY_IS_ENTITY_IN_WATER( Entity entity )
	{
		auto retval = (bool)ENTITY::IS_ENTITY_IN_WATER(entity);
		return retval;
	}

	float LUA_NATIVE_ENTITY_GET_ENTITY_SUBMERGED_LEVEL( Entity entity )
	{
		auto retval = ENTITY::GET_ENTITY_SUBMERGED_LEVEL(entity);
		return retval;
	}

	void LUA_NATIVE_ENTITY_SET_ENTITY_REQUIRES_MORE_EXPENSIVE_RIVER_CHECK( Entity entity, bool toggle )
	{
		ENTITY::SET_ENTITY_REQUIRES_MORE_EXPENSIVE_RIVER_CHECK(entity, toggle);
	}

	bool LUA_NATIVE_ENTITY_IS_ENTITY_ON_SCREEN( Entity entity )
	{
		auto retval = (bool)ENTITY::IS_ENTITY_ON_SCREEN(entity);
		return retval;
	}

	bool LUA_NATIVE_ENTITY_IS_ENTITY_PLAYING_ANIM( Entity entity, const char* animDict, const char* animName, int taskFlag )
	{
		auto retval = (bool)ENTITY::IS_ENTITY_PLAYING_ANIM(entity, animDict, animName, taskFlag);
		return retval;
	}

	bool LUA_NATIVE_ENTITY_IS_ENTITY_STATIC( Entity entity )
	{
		auto retval = (bool)ENTITY::IS_ENTITY_STATIC(entity);
		return retval;
	}

	bool LUA_NATIVE_ENTITY_IS_ENTITY_TOUCHING_ENTITY( Entity entity, Entity targetEntity )
	{
		auto retval = (bool)ENTITY::IS_ENTITY_TOUCHING_ENTITY(entity, targetEntity);
		return retval;
	}

	bool LUA_NATIVE_ENTITY_IS_ENTITY_TOUCHING_MODEL( Entity entity, Hash modelHash )
	{
		auto retval = (bool)ENTITY::IS_ENTITY_TOUCHING_MODEL(entity, modelHash);
		return retval;
	}

	bool LUA_NATIVE_ENTITY_IS_ENTITY_UPRIGHT( Entity entity, float angle )
	{
		auto retval = (bool)ENTITY::IS_ENTITY_UPRIGHT(entity, angle);
		return retval;
	}

	bool LUA_NATIVE_ENTITY_IS_ENTITY_UPSIDEDOWN( Entity entity )
	{
		auto retval = (bool)ENTITY::IS_ENTITY_UPSIDEDOWN(entity);
		return retval;
	}

	bool LUA_NATIVE_ENTITY_IS_ENTITY_VISIBLE( Entity entity )
	{
		auto retval = (bool)ENTITY::IS_ENTITY_VISIBLE(entity);
		return retval;
	}

	bool LUA_NATIVE_ENTITY_IS_ENTITY_VISIBLE_TO_SCRIPT( Entity entity )
	{
		auto retval = (bool)ENTITY::IS_ENTITY_VISIBLE_TO_SCRIPT(entity);
		return retval;
	}

	bool LUA_NATIVE_ENTITY_IS_ENTITY_OCCLUDED( Entity entity )
	{
		auto retval = (bool)ENTITY::IS_ENTITY_OCCLUDED(entity);
		return retval;
	}

	bool LUA_NATIVE_ENTITY_WOULD_ENTITY_BE_OCCLUDED( Hash entityModelHash, float x, float y, float z, bool p4 )
	{
		auto retval = (bool)ENTITY::WOULD_ENTITY_BE_OCCLUDED(entityModelHash, x, y, z, p4);
		return retval;
	}

	bool LUA_NATIVE_ENTITY_IS_ENTITY_WAITING_FOR_WORLD_COLLISION( Entity entity )
	{
		auto retval = (bool)ENTITY::IS_ENTITY_WAITING_FOR_WORLD_COLLISION(entity);
		return retval;
	}

	void LUA_NATIVE_ENTITY_APPLY_FORCE_TO_ENTITY_CENTER_OF_MASS( Entity entity, int forceType, float x, float y, float z, bool p5, bool isDirectionRel, bool isForceRel, bool p8 )
	{
		ENTITY::APPLY_FORCE_TO_ENTITY_CENTER_OF_MASS(entity, forceType, x, y, z, p5, isDirectionRel, isForceRel, p8);
	}

	void LUA_NATIVE_ENTITY_APPLY_FORCE_TO_ENTITY( Entity entity, int forceFlags, float x, float y, float z, float offX, float offY, float offZ, int boneIndex, bool isDirectionRel, bool ignoreUpVec, bool isForceRel, bool p12, bool p13 )
	{
		ENTITY::APPLY_FORCE_TO_ENTITY(entity, forceFlags, x, y, z, offX, offY, offZ, boneIndex, isDirectionRel, ignoreUpVec, isForceRel, p12, p13);
	}

	void LUA_NATIVE_ENTITY_ATTACH_ENTITY_TO_ENTITY( Entity entity1, Entity entity2, int boneIndex, float xPos, float yPos, float zPos, float xRot, float yRot, float zRot, bool p9, bool useSoftPinning, bool collision, bool isPed, int vertexIndex, bool fixedRot, Any p15 )
	{
		ENTITY::ATTACH_ENTITY_TO_ENTITY(entity1, entity2, boneIndex, xPos, yPos, zPos, xRot, yRot, zRot, p9, useSoftPinning, collision, isPed, vertexIndex, fixedRot, p15);
	}

	void LUA_NATIVE_ENTITY_ATTACH_ENTITY_BONE_TO_ENTITY_BONE( Entity entity1, Entity entity2, int boneIndex1, int boneIndex2, bool p4, bool p5 )
	{
		ENTITY::ATTACH_ENTITY_BONE_TO_ENTITY_BONE(entity1, entity2, boneIndex1, boneIndex2, p4, p5);
	}

	void LUA_NATIVE_ENTITY_ATTACH_ENTITY_BONE_TO_ENTITY_BONE_Y_FORWARD( Entity entity1, Entity entity2, int boneIndex1, int boneIndex2, bool p4, bool p5 )
	{
		ENTITY::ATTACH_ENTITY_BONE_TO_ENTITY_BONE_Y_FORWARD(entity1, entity2, boneIndex1, boneIndex2, p4, p5);
	}

	void LUA_NATIVE_ENTITY_ATTACH_ENTITY_TO_ENTITY_PHYSICALLY( Entity entity1, Entity entity2, int boneIndex1, int boneIndex2, float xPos1, float yPos1, float zPos1, float xPos2, float yPos2, float zPos2, float xRot, float yRot, float zRot, float breakForce, bool fixedRot, bool p15, bool collision, bool p17, int p18 )
	{
		ENTITY::ATTACH_ENTITY_TO_ENTITY_PHYSICALLY(entity1, entity2, boneIndex1, boneIndex2, xPos1, yPos1, zPos1, xPos2, yPos2, zPos2, xRot, yRot, zRot, breakForce, fixedRot, p15, collision, p17, p18);
	}

	void LUA_NATIVE_ENTITY_ATTACH_ENTITY_TO_ENTITY_PHYSICALLY_OVERRIDE_INVERSE_MASS( Entity firstEntityIndex, Entity secondEntityIndex, int firstEntityBoneIndex, int secondEntityBoneIndex, float secondEntityOffsetX, float secondEntityOffsetY, float secondEntityOffsetZ, float firstEntityOffsetX, float firstEntityOffsetY, float firstEntityOffsetZ, float vecRotationX, float vecRotationY, float vecRotationZ, float physicalStrength, bool constrainRotation, bool doInitialWarp, bool collideWithEntity, bool addInitialSeperation, int rotOrder, float invMassScaleA, float invMassScaleB )
	{
		ENTITY::ATTACH_ENTITY_TO_ENTITY_PHYSICALLY_OVERRIDE_INVERSE_MASS(firstEntityIndex, secondEntityIndex, firstEntityBoneIndex, secondEntityBoneIndex, secondEntityOffsetX, secondEntityOffsetY, secondEntityOffsetZ, firstEntityOffsetX, firstEntityOffsetY, firstEntityOffsetZ, vecRotationX, vecRotationY, vecRotationZ, physicalStrength, constrainRotation, doInitialWarp, collideWithEntity, addInitialSeperation, rotOrder, invMassScaleA, invMassScaleB);
	}

	void LUA_NATIVE_ENTITY_PROCESS_ENTITY_ATTACHMENTS( Entity entity )
	{
		ENTITY::PROCESS_ENTITY_ATTACHMENTS(entity);
	}

	int LUA_NATIVE_ENTITY_GET_ENTITY_BONE_INDEX_BY_NAME( Entity entity, const char* boneName )
	{
		auto retval = ENTITY::GET_ENTITY_BONE_INDEX_BY_NAME(entity, boneName);
		return retval;
	}

	void LUA_NATIVE_ENTITY_CLEAR_ENTITY_LAST_DAMAGE_ENTITY( Entity entity )
	{
		ENTITY::CLEAR_ENTITY_LAST_DAMAGE_ENTITY(entity);
	}

	Entity LUA_NATIVE_ENTITY_DELETE_ENTITY( Entity entity )
	{
		ENTITY::DELETE_ENTITY(&entity);
		return entity;
	}

	void LUA_NATIVE_ENTITY_DETACH_ENTITY( Entity entity, bool dynamic, bool collision )
	{
		ENTITY::DETACH_ENTITY(entity, dynamic, collision);
	}

	void LUA_NATIVE_ENTITY_FREEZE_ENTITY_POSITION( Entity entity, bool toggle )
	{
		ENTITY::FREEZE_ENTITY_POSITION(entity, toggle);
	}

	void LUA_NATIVE_ENTITY_SET_ENTITY_SHOULD_FREEZE_WAITING_ON_COLLISION( Entity entity, bool toggle )
	{
		ENTITY::SET_ENTITY_SHOULD_FREEZE_WAITING_ON_COLLISION(entity, toggle);
	}

	bool LUA_NATIVE_ENTITY_PLAY_ENTITY_ANIM( Entity entity, const char* animName, const char* animDict, float p3, bool loop, bool stayInAnim, bool p6, float delta, Any bitset )
	{
		auto retval = (bool)ENTITY::PLAY_ENTITY_ANIM(entity, animName, animDict, p3, loop, stayInAnim, p6, delta, bitset);
		return retval;
	}

	bool LUA_NATIVE_ENTITY_PLAY_SYNCHRONIZED_ENTITY_ANIM( Entity entity, int syncedScene, const char* animation, const char* propName, float p4, float p5, Any p6, float p7 )
	{
		auto retval = (bool)ENTITY::PLAY_SYNCHRONIZED_ENTITY_ANIM(entity, syncedScene, animation, propName, p4, p5, p6, p7);
		return retval;
	}

	bool LUA_NATIVE_ENTITY_PLAY_SYNCHRONIZED_MAP_ENTITY_ANIM( float x1, float y1, float z1, float x2, Any y2, float z2, const char* p6, const char* p7, float p8, float p9, Any p10, float p11 )
	{
		auto retval = (bool)ENTITY::PLAY_SYNCHRONIZED_MAP_ENTITY_ANIM(x1, y1, z1, x2, y2, z2, p6, p7, p8, p9, p10, p11);
		return retval;
	}

	bool LUA_NATIVE_ENTITY_STOP_SYNCHRONIZED_MAP_ENTITY_ANIM( float x1, float y1, float z1, float x2, Any y2, float z2 )
	{
		auto retval = (bool)ENTITY::STOP_SYNCHRONIZED_MAP_ENTITY_ANIM(x1, y1, z1, x2, y2, z2);
		return retval;
	}

	bool LUA_NATIVE_ENTITY_STOP_ENTITY_ANIM( Entity entity, const char* animation, const char* animGroup, float p3 )
	{
		auto retval = (bool)ENTITY::STOP_ENTITY_ANIM(entity, animation, animGroup, p3);
		return retval;
	}

	bool LUA_NATIVE_ENTITY_STOP_SYNCHRONIZED_ENTITY_ANIM( Entity entity, float p1, bool p2 )
	{
		auto retval = (bool)ENTITY::STOP_SYNCHRONIZED_ENTITY_ANIM(entity, p1, p2);
		return retval;
	}

	bool LUA_NATIVE_ENTITY_HAS_ANIM_EVENT_FIRED( Entity entity, Hash actionHash )
	{
		auto retval = (bool)ENTITY::HAS_ANIM_EVENT_FIRED(entity, actionHash);
		return retval;
	}

	std::tuple<bool, Any, Any> LUA_NATIVE_ENTITY_FIND_ANIM_EVENT_PHASE( const char* animDictionary, const char* animName, const char* p2, Any p3, Any p4 )
	{
		std::tuple<bool, Any, Any> return_values;
		std::get<0>(return_values) = (bool)ENTITY::FIND_ANIM_EVENT_PHASE(animDictionary, animName, p2, &p3, &p4);
		std::get<1>(return_values) = p3;
		std::get<2>(return_values) = p4;

		return return_values;
	}

	void LUA_NATIVE_ENTITY_SET_ENTITY_ANIM_CURRENT_TIME( Entity entity, const char* animDictionary, const char* animName, float time )
	{
		ENTITY::SET_ENTITY_ANIM_CURRENT_TIME(entity, animDictionary, animName, time);
	}

	void LUA_NATIVE_ENTITY_SET_ENTITY_ANIM_SPEED( Entity entity, const char* animDictionary, const char* animName, float speedMultiplier )
	{
		ENTITY::SET_ENTITY_ANIM_SPEED(entity, animDictionary, animName, speedMultiplier);
	}

	void LUA_NATIVE_ENTITY_SET_ENTITY_AS_MISSION_ENTITY( Entity entity, bool p1, bool p2 )
	{
		ENTITY::SET_ENTITY_AS_MISSION_ENTITY(entity, p1, p2);
	}

	Entity LUA_NATIVE_ENTITY_SET_ENTITY_AS_NO_LONGER_NEEDED( Entity entity )
	{
		ENTITY::SET_ENTITY_AS_NO_LONGER_NEEDED(&entity);
		return entity;
	}

	Ped LUA_NATIVE_ENTITY_SET_PED_AS_NO_LONGER_NEEDED( Ped ped )
	{
		ENTITY::SET_PED_AS_NO_LONGER_NEEDED(&ped);
		return ped;
	}

	Vehicle LUA_NATIVE_ENTITY_SET_VEHICLE_AS_NO_LONGER_NEEDED( Vehicle vehicle )
	{
		ENTITY::SET_VEHICLE_AS_NO_LONGER_NEEDED(&vehicle);
		return vehicle;
	}

	Object LUA_NATIVE_ENTITY_SET_OBJECT_AS_NO_LONGER_NEEDED( Object object )
	{
		ENTITY::SET_OBJECT_AS_NO_LONGER_NEEDED(&object);
		return object;
	}

	void LUA_NATIVE_ENTITY_SET_ENTITY_CAN_BE_DAMAGED( Entity entity, bool toggle )
	{
		ENTITY::SET_ENTITY_CAN_BE_DAMAGED(entity, toggle);
	}

	bool LUA_NATIVE_ENTITY_GET_ENTITY_CAN_BE_DAMAGED( Entity entity )
	{
		auto retval = (bool)ENTITY::GET_ENTITY_CAN_BE_DAMAGED(entity);
		return retval;
	}

	void LUA_NATIVE_ENTITY_SET_ENTITY_CAN_BE_DAMAGED_BY_RELATIONSHIP_GROUP( Entity entity, bool bCanBeDamaged, int relGroup )
	{
		ENTITY::SET_ENTITY_CAN_BE_DAMAGED_BY_RELATIONSHIP_GROUP(entity, bCanBeDamaged, relGroup);
	}

	void LUA_NATIVE_ENTITY_SET_ENTITY_CAN_ONLY_BE_DAMAGED_BY_SCRIPT_PARTICIPANTS( Entity entity, bool toggle )
	{
		ENTITY::SET_ENTITY_CAN_ONLY_BE_DAMAGED_BY_SCRIPT_PARTICIPANTS(entity, toggle);
	}

	void LUA_NATIVE_ENTITY_SET_ENTITY_CAN_BE_TARGETED_WITHOUT_LOS( Entity entity, bool toggle )
	{
		ENTITY::SET_ENTITY_CAN_BE_TARGETED_WITHOUT_LOS(entity, toggle);
	}

	void LUA_NATIVE_ENTITY_SET_ENTITY_COLLISION( Entity entity, bool toggle, bool keepPhysics )
	{
		ENTITY::SET_ENTITY_COLLISION(entity, toggle, keepPhysics);
	}

	bool LUA_NATIVE_ENTITY_GET_ENTITY_COLLISION_DISABLED( Entity entity )
	{
		auto retval = (bool)ENTITY::GET_ENTITY_COLLISION_DISABLED(entity);
		return retval;
	}

	void LUA_NATIVE_ENTITY_SET_ENTITY_COMPLETELY_DISABLE_COLLISION( Entity entity, bool toggle, bool keepPhysics )
	{
		ENTITY::SET_ENTITY_COMPLETELY_DISABLE_COLLISION(entity, toggle, keepPhysics);
	}

	void LUA_NATIVE_ENTITY_SET_ENTITY_COORDS( Entity entity, float xPos, float yPos, float zPos, bool xAxis, bool yAxis, bool zAxis, bool clearArea )
	{
		ENTITY::SET_ENTITY_COORDS(entity, xPos, yPos, zPos, xAxis, yAxis, zAxis, clearArea);
	}

	void LUA_NATIVE_ENTITY_SET_ENTITY_COORDS_WITHOUT_PLANTS_RESET( Entity entity, float xPos, float yPos, float zPos, bool alive, bool deadFlag, bool ragdollFlag, bool clearArea )
	{
		ENTITY::SET_ENTITY_COORDS_WITHOUT_PLANTS_RESET(entity, xPos, yPos, zPos, alive, deadFlag, ragdollFlag, clearArea);
	}

	void LUA_NATIVE_ENTITY_SET_ENTITY_COORDS_NO_OFFSET( Entity entity, float xPos, float yPos, float zPos, bool xAxis, bool yAxis, bool zAxis )
	{
		ENTITY::SET_ENTITY_COORDS_NO_OFFSET(entity, xPos, yPos, zPos, xAxis, yAxis, zAxis);
	}

	void LUA_NATIVE_ENTITY_SET_ENTITY_DYNAMIC( Entity entity, bool toggle )
	{
		ENTITY::SET_ENTITY_DYNAMIC(entity, toggle);
	}

	void LUA_NATIVE_ENTITY_SET_ENTITY_HEADING( Entity entity, float heading )
	{
		ENTITY::SET_ENTITY_HEADING(entity, heading);
	}

	void LUA_NATIVE_ENTITY_SET_ENTITY_HEALTH( Entity entity, int health, int p2 )
	{
		ENTITY::SET_ENTITY_HEALTH(entity, health, p2);
	}

	void LUA_NATIVE_ENTITY_SET_ENTITY_INVINCIBLE( Entity entity, bool toggle )
	{
		ENTITY::SET_ENTITY_INVINCIBLE(entity, toggle);
	}

	void LUA_NATIVE_ENTITY_SET_ENTITY_IS_TARGET_PRIORITY( Entity entity, bool p1, float p2 )
	{
		ENTITY::SET_ENTITY_IS_TARGET_PRIORITY(entity, p1, p2);
	}

	void LUA_NATIVE_ENTITY_SET_ENTITY_LIGHTS( Entity entity, bool toggle )
	{
		ENTITY::SET_ENTITY_LIGHTS(entity, toggle);
	}

	void LUA_NATIVE_ENTITY_SET_ENTITY_LOAD_COLLISION_FLAG( Entity entity, bool toggle, Any p2 )
	{
		ENTITY::SET_ENTITY_LOAD_COLLISION_FLAG(entity, toggle, p2);
	}

	bool LUA_NATIVE_ENTITY_HAS_COLLISION_LOADED_AROUND_ENTITY( Entity entity )
	{
		auto retval = (bool)ENTITY::HAS_COLLISION_LOADED_AROUND_ENTITY(entity);
		return retval;
	}

	void LUA_NATIVE_ENTITY_SET_ENTITY_MAX_SPEED( Entity entity, float speed )
	{
		ENTITY::SET_ENTITY_MAX_SPEED(entity, speed);
	}

	void LUA_NATIVE_ENTITY_SET_ENTITY_ONLY_DAMAGED_BY_PLAYER( Entity entity, bool toggle )
	{
		ENTITY::SET_ENTITY_ONLY_DAMAGED_BY_PLAYER(entity, toggle);
	}

	void LUA_NATIVE_ENTITY_SET_ENTITY_ONLY_DAMAGED_BY_RELATIONSHIP_GROUP( Entity entity, bool p1, Any p2 )
	{
		ENTITY::SET_ENTITY_ONLY_DAMAGED_BY_RELATIONSHIP_GROUP(entity, p1, p2);
	}

	void LUA_NATIVE_ENTITY_SET_ENTITY_PROOFS( Entity entity, bool bulletProof, bool fireProof, bool explosionProof, bool collisionProof, bool meleeProof, bool steamProof, bool p7, bool waterProof )
	{
		ENTITY::SET_ENTITY_PROOFS(entity, bulletProof, fireProof, explosionProof, collisionProof, meleeProof, steamProof, p7, waterProof);
	}

	std::tuple<bool, bool, bool, bool, bool, bool, bool, bool, bool> LUA_NATIVE_ENTITY_GET_ENTITY_PROOFS( Entity entity, bool bulletProof, bool fireProof, bool explosionProof, bool collisionProof, bool meleeProof, bool steamProof, bool p7, bool drownProof )
	{
		std::tuple<bool, bool, bool, bool, bool, bool, bool, bool, bool> return_values;
		std::get<0>(return_values) = (bool)ENTITY::GET_ENTITY_PROOFS(entity, (BOOL*)&bulletProof, (BOOL*)&fireProof, (BOOL*)&explosionProof, (BOOL*)&collisionProof, (BOOL*)&meleeProof, (BOOL*)&steamProof, (BOOL*)&p7, (BOOL*)&drownProof);
		std::get<1>(return_values) = bulletProof;
		std::get<2>(return_values) = fireProof;
		std::get<3>(return_values) = explosionProof;
		std::get<4>(return_values) = collisionProof;
		std::get<5>(return_values) = meleeProof;
		std::get<6>(return_values) = steamProof;
		std::get<7>(return_values) = p7;
		std::get<8>(return_values) = drownProof;

		return return_values;
	}

	void LUA_NATIVE_ENTITY_SET_ENTITY_QUATERNION( Entity entity, float x, float y, float z, float w )
	{
		ENTITY::SET_ENTITY_QUATERNION(entity, x, y, z, w);
	}

	void LUA_NATIVE_ENTITY_SET_ENTITY_RECORDS_COLLISIONS( Entity entity, bool toggle )
	{
		ENTITY::SET_ENTITY_RECORDS_COLLISIONS(entity, toggle);
	}

	void LUA_NATIVE_ENTITY_SET_ENTITY_ROTATION( Entity entity, float pitch, float roll, float yaw, int rotationOrder, bool p5 )
	{
		ENTITY::SET_ENTITY_ROTATION(entity, pitch, roll, yaw, rotationOrder, p5);
	}

	void LUA_NATIVE_ENTITY_SET_ENTITY_VISIBLE( Entity entity, bool toggle, bool p2 )
	{
		ENTITY::SET_ENTITY_VISIBLE(entity, toggle, p2);
	}

	void LUA_NATIVE_ENTITY_SET_ENTITY_WATER_REFLECTION_FLAG( Entity entity, bool toggle )
	{
		ENTITY::SET_ENTITY_WATER_REFLECTION_FLAG(entity, toggle);
	}

	void LUA_NATIVE_ENTITY_SET_ENTITY_MIRROR_REFLECTION_FLAG( Entity entity, bool p1 )
	{
		ENTITY::SET_ENTITY_MIRROR_REFLECTION_FLAG(entity, p1);
	}

	void LUA_NATIVE_ENTITY_SET_ENTITY_VELOCITY( Entity entity, float x, float y, float z )
	{
		ENTITY::SET_ENTITY_VELOCITY(entity, x, y, z);
	}

	void LUA_NATIVE_ENTITY_SET_ENTITY_ANGULAR_VELOCITY( Entity entity, float x, float y, float z )
	{
		ENTITY::SET_ENTITY_ANGULAR_VELOCITY(entity, x, y, z);
	}

	void LUA_NATIVE_ENTITY_SET_ENTITY_HAS_GRAVITY( Entity entity, bool toggle )
	{
		ENTITY::SET_ENTITY_HAS_GRAVITY(entity, toggle);
	}

	void LUA_NATIVE_ENTITY_SET_ENTITY_LOD_DIST( Entity entity, int value )
	{
		ENTITY::SET_ENTITY_LOD_DIST(entity, value);
	}

	int LUA_NATIVE_ENTITY_GET_ENTITY_LOD_DIST( Entity entity )
	{
		auto retval = ENTITY::GET_ENTITY_LOD_DIST(entity);
		return retval;
	}

	void LUA_NATIVE_ENTITY_SET_ENTITY_ALPHA( Entity entity, int alphaLevel, bool skin )
	{
		ENTITY::SET_ENTITY_ALPHA(entity, alphaLevel, skin);
	}

	int LUA_NATIVE_ENTITY_GET_ENTITY_ALPHA( Entity entity )
	{
		auto retval = ENTITY::GET_ENTITY_ALPHA(entity);
		return retval;
	}

	void LUA_NATIVE_ENTITY_RESET_ENTITY_ALPHA( Entity entity )
	{
		ENTITY::RESET_ENTITY_ALPHA(entity);
	}

	void LUA_NATIVE_ENTITY_RESET_PICKUP_ENTITY_GLOW( Entity entity )
	{
		ENTITY::RESET_PICKUP_ENTITY_GLOW(entity);
	}

	void LUA_NATIVE_ENTITY_SET_PICKUP_COLLIDES_WITH_PROJECTILES( Any p0, Any p1 )
	{
		ENTITY::SET_PICKUP_COLLIDES_WITH_PROJECTILES(p0, p1);
	}

	void LUA_NATIVE_ENTITY_SET_ENTITY_SORT_BIAS( Entity entity, float p1 )
	{
		ENTITY::SET_ENTITY_SORT_BIAS(entity, p1);
	}

	void LUA_NATIVE_ENTITY_SET_ENTITY_ALWAYS_PRERENDER( Entity entity, bool toggle )
	{
		ENTITY::SET_ENTITY_ALWAYS_PRERENDER(entity, toggle);
	}

	void LUA_NATIVE_ENTITY_SET_ENTITY_RENDER_SCORCHED( Entity entity, bool toggle )
	{
		ENTITY::SET_ENTITY_RENDER_SCORCHED(entity, toggle);
	}

	void LUA_NATIVE_ENTITY_SET_ENTITY_TRAFFICLIGHT_OVERRIDE( Entity entity, int state )
	{
		ENTITY::SET_ENTITY_TRAFFICLIGHT_OVERRIDE(entity, state);
	}

	void LUA_NATIVE_ENTITY_SET_ENTITY_IS_IN_VEHICLE( Entity entity )
	{
		ENTITY::SET_ENTITY_IS_IN_VEHICLE(entity);
	}

	void LUA_NATIVE_ENTITY_CREATE_MODEL_SWAP( float x, float y, float z, float radius, Hash originalModel, Hash newModel, bool p6 )
	{
		ENTITY::CREATE_MODEL_SWAP(x, y, z, radius, originalModel, newModel, p6);
	}

	void LUA_NATIVE_ENTITY_REMOVE_MODEL_SWAP( float x, float y, float z, float radius, Hash originalModel, Hash newModel, bool p6 )
	{
		ENTITY::REMOVE_MODEL_SWAP(x, y, z, radius, originalModel, newModel, p6);
	}

	void LUA_NATIVE_ENTITY_CREATE_MODEL_HIDE( float x, float y, float z, float radius, Hash modelHash, bool p5 )
	{
		ENTITY::CREATE_MODEL_HIDE(x, y, z, radius, modelHash, p5);
	}

	void LUA_NATIVE_ENTITY_CREATE_MODEL_HIDE_EXCLUDING_SCRIPT_OBJECTS( float x, float y, float z, float radius, Hash modelHash, bool p5 )
	{
		ENTITY::CREATE_MODEL_HIDE_EXCLUDING_SCRIPT_OBJECTS(x, y, z, radius, modelHash, p5);
	}

	void LUA_NATIVE_ENTITY_REMOVE_MODEL_HIDE( float x, float y, float z, float radius, Hash modelHash, bool p5 )
	{
		ENTITY::REMOVE_MODEL_HIDE(x, y, z, radius, modelHash, p5);
	}

	void LUA_NATIVE_ENTITY_CREATE_FORCED_OBJECT( float x, float y, float z, Any p3, Hash modelHash, bool p5 )
	{
		ENTITY::CREATE_FORCED_OBJECT(x, y, z, p3, modelHash, p5);
	}

	void LUA_NATIVE_ENTITY_REMOVE_FORCED_OBJECT( float x, float y, float z, float p3, Hash modelHash )
	{
		ENTITY::REMOVE_FORCED_OBJECT(x, y, z, p3, modelHash);
	}

	void LUA_NATIVE_ENTITY_SET_ENTITY_NO_COLLISION_ENTITY( Entity entity1, Entity entity2, bool thisFrameOnly )
	{
		ENTITY::SET_ENTITY_NO_COLLISION_ENTITY(entity1, entity2, thisFrameOnly);
	}

	void LUA_NATIVE_ENTITY_SET_ENTITY_MOTION_BLUR( Entity entity, bool toggle )
	{
		ENTITY::SET_ENTITY_MOTION_BLUR(entity, toggle);
	}

	void LUA_NATIVE_ENTITY_SET_CAN_AUTO_VAULT_ON_ENTITY( Entity entity, bool toggle )
	{
		ENTITY::SET_CAN_AUTO_VAULT_ON_ENTITY(entity, toggle);
	}

	void LUA_NATIVE_ENTITY_SET_CAN_CLIMB_ON_ENTITY( Entity entity, bool toggle )
	{
		ENTITY::SET_CAN_CLIMB_ON_ENTITY(entity, toggle);
	}

	void LUA_NATIVE_ENTITY_SET_WAIT_FOR_COLLISIONS_BEFORE_PROBE( Entity entity, bool toggle )
	{
		ENTITY::SET_WAIT_FOR_COLLISIONS_BEFORE_PROBE(entity, toggle);
	}

	void LUA_NATIVE_ENTITY_SET_ENTITY_NOWEAPONDECALS( Entity entity, bool p1 )
	{
		ENTITY::SET_ENTITY_NOWEAPONDECALS(entity, p1);
	}

	void LUA_NATIVE_ENTITY_SET_ENTITY_USE_MAX_DISTANCE_FOR_WATER_REFLECTION( Entity entity, bool p1 )
	{
		ENTITY::SET_ENTITY_USE_MAX_DISTANCE_FOR_WATER_REFLECTION(entity, p1);
	}

	Vector3 LUA_NATIVE_ENTITY_GET_ENTITY_BONE_ROTATION( Entity entity, int boneIndex )
	{
		auto retval = ENTITY::GET_ENTITY_BONE_ROTATION(entity, boneIndex);
		return retval;
	}

	Vector3 LUA_NATIVE_ENTITY_GET_ENTITY_BONE_POSTION( Entity entity, int boneIndex )
	{
		auto retval = ENTITY::GET_ENTITY_BONE_POSTION(entity, boneIndex);
		return retval;
	}

	Vector3 LUA_NATIVE_ENTITY_GET_ENTITY_BONE_OBJECT_ROTATION( Entity entity, int boneIndex )
	{
		auto retval = ENTITY::GET_ENTITY_BONE_OBJECT_ROTATION(entity, boneIndex);
		return retval;
	}

	Vector3 LUA_NATIVE_ENTITY_GET_ENTITY_BONE_OBJECT_POSTION( Entity entity, int boneIndex )
	{
		auto retval = ENTITY::GET_ENTITY_BONE_OBJECT_POSTION(entity, boneIndex);
		return retval;
	}

	int LUA_NATIVE_ENTITY_GET_ENTITY_BONE_COUNT( Entity entity )
	{
		auto retval = ENTITY::GET_ENTITY_BONE_COUNT(entity);
		return retval;
	}

	void LUA_NATIVE_ENTITY_ENABLE_ENTITY_BULLET_COLLISION( Entity entity )
	{
		ENTITY::ENABLE_ENTITY_BULLET_COLLISION(entity);
	}

	void LUA_NATIVE_ENTITY_SET_ENTITY_CAN_ONLY_BE_DAMAGED_BY_ENTITY( Entity entity1, Entity entity2 )
	{
		ENTITY::SET_ENTITY_CAN_ONLY_BE_DAMAGED_BY_ENTITY(entity1, entity2);
	}

	void LUA_NATIVE_ENTITY_SET_ENTITY_CANT_CAUSE_COLLISION_DAMAGED_ENTITY( Entity entity1, Entity entity2 )
	{
		ENTITY::SET_ENTITY_CANT_CAUSE_COLLISION_DAMAGED_ENTITY(entity1, entity2);
	}

	void LUA_NATIVE_ENTITY_SET_ALLOW_MIGRATE_TO_SPECTATOR( Entity entity, Any p1 )
	{
		ENTITY::SET_ALLOW_MIGRATE_TO_SPECTATOR(entity, p1);
	}

	Entity LUA_NATIVE_ENTITY_GET_ENTITY_OF_TYPE_ATTACHED_TO_ENTITY( Entity entity, Hash modelHash )
	{
		auto retval = ENTITY::GET_ENTITY_OF_TYPE_ATTACHED_TO_ENTITY(entity, modelHash);
		return retval;
	}

	void LUA_NATIVE_ENTITY_SET_PICK_UP_BY_CARGOBOB_DISABLED( Entity entity, bool toggle )
	{
		ENTITY::SET_PICK_UP_BY_CARGOBOB_DISABLED(entity, toggle);
	}

	void LUA_NATIVE_EVENT_SET_DECISION_MAKER( Ped ped, Hash name )
	{
		EVENT::SET_DECISION_MAKER(ped, name);
	}

	void LUA_NATIVE_EVENT_CLEAR_DECISION_MAKER_EVENT_RESPONSE( Hash name, int eventType )
	{
		EVENT::CLEAR_DECISION_MAKER_EVENT_RESPONSE(name, eventType);
	}

	void LUA_NATIVE_EVENT_BLOCK_DECISION_MAKER_EVENT( Hash name, int eventType )
	{
		EVENT::BLOCK_DECISION_MAKER_EVENT(name, eventType);
	}

	void LUA_NATIVE_EVENT_UNBLOCK_DECISION_MAKER_EVENT( Hash name, int eventType )
	{
		EVENT::UNBLOCK_DECISION_MAKER_EVENT(name, eventType);
	}

	int LUA_NATIVE_EVENT_ADD_SHOCKING_EVENT_AT_POSITION( int eventType, float x, float y, float z, float duration )
	{
		auto retval = EVENT::ADD_SHOCKING_EVENT_AT_POSITION(eventType, x, y, z, duration);
		return retval;
	}

	int LUA_NATIVE_EVENT_ADD_SHOCKING_EVENT_FOR_ENTITY( int eventType, Entity entity, float duration )
	{
		auto retval = EVENT::ADD_SHOCKING_EVENT_FOR_ENTITY(eventType, entity, duration);
		return retval;
	}

	bool LUA_NATIVE_EVENT_IS_SHOCKING_EVENT_IN_SPHERE( int eventType, float x, float y, float z, float radius )
	{
		auto retval = (bool)EVENT::IS_SHOCKING_EVENT_IN_SPHERE(eventType, x, y, z, radius);
		return retval;
	}

	bool LUA_NATIVE_EVENT_REMOVE_SHOCKING_EVENT( ScrHandle event )
	{
		auto retval = (bool)EVENT::REMOVE_SHOCKING_EVENT(event);
		return retval;
	}

	void LUA_NATIVE_EVENT_REMOVE_ALL_SHOCKING_EVENTS( bool p0 )
	{
		EVENT::REMOVE_ALL_SHOCKING_EVENTS(p0);
	}

	void LUA_NATIVE_EVENT_REMOVE_SHOCKING_EVENT_SPAWN_BLOCKING_AREAS(  )
	{
		EVENT::REMOVE_SHOCKING_EVENT_SPAWN_BLOCKING_AREAS();
	}

	void LUA_NATIVE_EVENT_SUPPRESS_SHOCKING_EVENTS_NEXT_FRAME(  )
	{
		EVENT::SUPPRESS_SHOCKING_EVENTS_NEXT_FRAME();
	}

	void LUA_NATIVE_EVENT_SUPPRESS_SHOCKING_EVENT_TYPE_NEXT_FRAME( int eventType )
	{
		EVENT::SUPPRESS_SHOCKING_EVENT_TYPE_NEXT_FRAME(eventType);
	}

	void LUA_NATIVE_EVENT_SUPPRESS_AGITATION_EVENTS_NEXT_FRAME(  )
	{
		EVENT::SUPPRESS_AGITATION_EVENTS_NEXT_FRAME();
	}

	int LUA_NATIVE_FILES_GET_NUM_TATTOO_SHOP_DLC_ITEMS( int character )
	{
		auto retval = FILES::GET_NUM_TATTOO_SHOP_DLC_ITEMS(character);
		return retval;
	}

	std::tuple<bool, Any> LUA_NATIVE_FILES_GET_TATTOO_SHOP_DLC_ITEM_DATA( int characterType, int decorationIndex, Any outComponent )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)FILES::GET_TATTOO_SHOP_DLC_ITEM_DATA(characterType, decorationIndex, &outComponent);
		std::get<1>(return_values) = outComponent;

		return return_values;
	}

	int LUA_NATIVE_FILES_GET_TATTOO_SHOP_DLC_ITEM_INDEX( Hash overlayHash, Any p1, int character )
	{
		auto retval = FILES::GET_TATTOO_SHOP_DLC_ITEM_INDEX(overlayHash, p1, character);
		return retval;
	}

	Any LUA_NATIVE_FILES_INIT_SHOP_PED_COMPONENT( Any outComponent )
	{
		FILES::INIT_SHOP_PED_COMPONENT(&outComponent);
		return outComponent;
	}

	Any LUA_NATIVE_FILES_INIT_SHOP_PED_PROP( Any outProp )
	{
		FILES::INIT_SHOP_PED_PROP(&outProp);
		return outProp;
	}

	int LUA_NATIVE_FILES_SETUP_SHOP_PED_APPAREL_QUERY( int p0, int p1, int p2, int p3 )
	{
		auto retval = FILES::SETUP_SHOP_PED_APPAREL_QUERY(p0, p1, p2, p3);
		return retval;
	}

	int LUA_NATIVE_FILES_SETUP_SHOP_PED_APPAREL_QUERY_TU( int character, int p1, int p2, bool p3, int p4, int componentId )
	{
		auto retval = FILES::SETUP_SHOP_PED_APPAREL_QUERY_TU(character, p1, p2, p3, p4, componentId);
		return retval;
	}

	Any LUA_NATIVE_FILES_GET_SHOP_PED_QUERY_COMPONENT( int componentId, Any outComponent )
	{
		FILES::GET_SHOP_PED_QUERY_COMPONENT(componentId, &outComponent);
		return outComponent;
	}

	int LUA_NATIVE_FILES_GET_SHOP_PED_QUERY_COMPONENT_INDEX( Hash componentHash )
	{
		auto retval = FILES::GET_SHOP_PED_QUERY_COMPONENT_INDEX(componentHash);
		return retval;
	}

	Any LUA_NATIVE_FILES_GET_SHOP_PED_COMPONENT( Hash componentHash, Any outComponent )
	{
		FILES::GET_SHOP_PED_COMPONENT(componentHash, &outComponent);
		return outComponent;
	}

	Any LUA_NATIVE_FILES_GET_SHOP_PED_QUERY_PROP( int componentId, Any outProp )
	{
		FILES::GET_SHOP_PED_QUERY_PROP(componentId, &outProp);
		return outProp;
	}

	int LUA_NATIVE_FILES_GET_SHOP_PED_QUERY_PROP_INDEX( Hash componentHash )
	{
		auto retval = FILES::GET_SHOP_PED_QUERY_PROP_INDEX(componentHash);
		return retval;
	}

	Any LUA_NATIVE_FILES_GET_SHOP_PED_PROP( Hash componentHash, Any outProp )
	{
		FILES::GET_SHOP_PED_PROP(componentHash, &outProp);
		return outProp;
	}

	Hash LUA_NATIVE_FILES_GET_HASH_NAME_FOR_COMPONENT( Entity entity, int componentId, int drawableVariant, int textureVariant )
	{
		auto retval = FILES::GET_HASH_NAME_FOR_COMPONENT(entity, componentId, drawableVariant, textureVariant);
		return retval;
	}

	Hash LUA_NATIVE_FILES_GET_HASH_NAME_FOR_PROP( Entity entity, int componentId, int propIndex, int propTextureIndex )
	{
		auto retval = FILES::GET_HASH_NAME_FOR_PROP(entity, componentId, propIndex, propTextureIndex);
		return retval;
	}

	int LUA_NATIVE_FILES_GET_SHOP_PED_APPAREL_VARIANT_COMPONENT_COUNT( Hash componentHash )
	{
		auto retval = FILES::GET_SHOP_PED_APPAREL_VARIANT_COMPONENT_COUNT(componentHash);
		return retval;
	}

	int LUA_NATIVE_FILES_GET_SHOP_PED_APPAREL_VARIANT_PROP_COUNT( Hash propHash )
	{
		auto retval = FILES::GET_SHOP_PED_APPAREL_VARIANT_PROP_COUNT(propHash);
		return retval;
	}

	std::tuple<Hash, int, int> LUA_NATIVE_FILES_GET_VARIANT_COMPONENT( Hash componentHash, int variantComponentIndex, Hash nameHash, int enumValue, int componentType )
	{
		std::tuple<Hash, int, int> return_values;
		FILES::GET_VARIANT_COMPONENT(componentHash, variantComponentIndex, &nameHash, &enumValue, &componentType);
		std::get<0>(return_values) = nameHash;
		std::get<1>(return_values) = enumValue;
		std::get<2>(return_values) = componentType;

		return return_values;
	}

	std::tuple<Hash, int, int> LUA_NATIVE_FILES_GET_VARIANT_PROP( Hash componentHash, int variantPropIndex, Hash nameHash, int enumValue, int anchorPoint )
	{
		std::tuple<Hash, int, int> return_values;
		FILES::GET_VARIANT_PROP(componentHash, variantPropIndex, &nameHash, &enumValue, &anchorPoint);
		std::get<0>(return_values) = nameHash;
		std::get<1>(return_values) = enumValue;
		std::get<2>(return_values) = anchorPoint;

		return return_values;
	}

	int LUA_NATIVE_FILES_GET_SHOP_PED_APPAREL_FORCED_COMPONENT_COUNT( Hash componentHash )
	{
		auto retval = FILES::GET_SHOP_PED_APPAREL_FORCED_COMPONENT_COUNT(componentHash);
		return retval;
	}

	int LUA_NATIVE_FILES_GET_SHOP_PED_APPAREL_FORCED_PROP_COUNT( Hash componentHash )
	{
		auto retval = FILES::GET_SHOP_PED_APPAREL_FORCED_PROP_COUNT(componentHash);
		return retval;
	}

	std::tuple<Hash, int, int> LUA_NATIVE_FILES_GET_FORCED_COMPONENT( Hash componentHash, int forcedComponentIndex, Hash nameHash, int enumValue, int componentType )
	{
		std::tuple<Hash, int, int> return_values;
		FILES::GET_FORCED_COMPONENT(componentHash, forcedComponentIndex, &nameHash, &enumValue, &componentType);
		std::get<0>(return_values) = nameHash;
		std::get<1>(return_values) = enumValue;
		std::get<2>(return_values) = componentType;

		return return_values;
	}

	std::tuple<Hash, int, int> LUA_NATIVE_FILES_GET_FORCED_PROP( Hash componentHash, int forcedPropIndex, Hash nameHash, int enumValue, int anchorPoint )
	{
		std::tuple<Hash, int, int> return_values;
		FILES::GET_FORCED_PROP(componentHash, forcedPropIndex, &nameHash, &enumValue, &anchorPoint);
		std::get<0>(return_values) = nameHash;
		std::get<1>(return_values) = enumValue;
		std::get<2>(return_values) = anchorPoint;

		return return_values;
	}

	bool LUA_NATIVE_FILES_DOES_SHOP_PED_APPAREL_HAVE_RESTRICTION_TAG( Hash componentHash, Hash restrictionTagHash, int componentId )
	{
		auto retval = (bool)FILES::DOES_SHOP_PED_APPAREL_HAVE_RESTRICTION_TAG(componentHash, restrictionTagHash, componentId);
		return retval;
	}

	bool LUA_NATIVE_FILES_DOES_CURRENT_PED_COMPONENT_HAVE_RESTRICTION_TAG( Ped ped, int componentId, Hash restrictionTagHash )
	{
		auto retval = (bool)FILES::DOES_CURRENT_PED_COMPONENT_HAVE_RESTRICTION_TAG(ped, componentId, restrictionTagHash);
		return retval;
	}

	bool LUA_NATIVE_FILES_DOES_CURRENT_PED_PROP_HAVE_RESTRICTION_TAG( Ped ped, int componentId, Hash restrictionTagHash )
	{
		auto retval = (bool)FILES::DOES_CURRENT_PED_PROP_HAVE_RESTRICTION_TAG(ped, componentId, restrictionTagHash);
		return retval;
	}

	int LUA_NATIVE_FILES_SETUP_SHOP_PED_OUTFIT_QUERY( int character, bool p1 )
	{
		auto retval = FILES::SETUP_SHOP_PED_OUTFIT_QUERY(character, p1);
		return retval;
	}

	Any LUA_NATIVE_FILES_GET_SHOP_PED_QUERY_OUTFIT( int outfitIndex, Any outfit )
	{
		FILES::GET_SHOP_PED_QUERY_OUTFIT(outfitIndex, &outfit);
		return outfit;
	}

	Any LUA_NATIVE_FILES_GET_SHOP_PED_OUTFIT( Any p0, Any p1 )
	{
		FILES::GET_SHOP_PED_OUTFIT(p0, &p1);
		return p1;
	}

	int LUA_NATIVE_FILES_GET_SHOP_PED_OUTFIT_LOCATE( Any p0 )
	{
		auto retval = FILES::GET_SHOP_PED_OUTFIT_LOCATE(p0);
		return retval;
	}

	std::tuple<bool, Any> LUA_NATIVE_FILES_GET_SHOP_PED_OUTFIT_PROP_VARIANT( Hash outfitHash, int variantIndex, Any outPropVariant )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)FILES::GET_SHOP_PED_OUTFIT_PROP_VARIANT(outfitHash, variantIndex, &outPropVariant);
		std::get<1>(return_values) = outPropVariant;

		return return_values;
	}

	std::tuple<bool, Any> LUA_NATIVE_FILES_GET_SHOP_PED_OUTFIT_COMPONENT_VARIANT( Hash outfitHash, int variantIndex, Any outComponentVariant )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)FILES::GET_SHOP_PED_OUTFIT_COMPONENT_VARIANT(outfitHash, variantIndex, &outComponentVariant);
		std::get<1>(return_values) = outComponentVariant;

		return return_values;
	}

	int LUA_NATIVE_FILES_GET_NUM_DLC_VEHICLES(  )
	{
		auto retval = FILES::GET_NUM_DLC_VEHICLES();
		return retval;
	}

	Hash LUA_NATIVE_FILES_GET_DLC_VEHICLE_MODEL( int dlcVehicleIndex )
	{
		auto retval = FILES::GET_DLC_VEHICLE_MODEL(dlcVehicleIndex);
		return retval;
	}

	std::tuple<bool, Any> LUA_NATIVE_FILES_GET_DLC_VEHICLE_DATA( int dlcVehicleIndex, Any outData )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)FILES::GET_DLC_VEHICLE_DATA(dlcVehicleIndex, &outData);
		std::get<1>(return_values) = outData;

		return return_values;
	}

	int LUA_NATIVE_FILES_GET_DLC_VEHICLE_FLAGS( int dlcVehicleIndex )
	{
		auto retval = FILES::GET_DLC_VEHICLE_FLAGS(dlcVehicleIndex);
		return retval;
	}

	int LUA_NATIVE_FILES_GET_NUM_DLC_WEAPONS(  )
	{
		auto retval = FILES::GET_NUM_DLC_WEAPONS();
		return retval;
	}

	int LUA_NATIVE_FILES_GET_NUM_DLC_WEAPONS_SP(  )
	{
		auto retval = FILES::GET_NUM_DLC_WEAPONS_SP();
		return retval;
	}

	std::tuple<bool, Any> LUA_NATIVE_FILES_GET_DLC_WEAPON_DATA( int dlcWeaponIndex, Any outData )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)FILES::GET_DLC_WEAPON_DATA(dlcWeaponIndex, &outData);
		std::get<1>(return_values) = outData;

		return return_values;
	}

	std::tuple<bool, Any> LUA_NATIVE_FILES_GET_DLC_WEAPON_DATA_SP( int dlcWeaponIndex, Any outData )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)FILES::GET_DLC_WEAPON_DATA_SP(dlcWeaponIndex, &outData);
		std::get<1>(return_values) = outData;

		return return_values;
	}

	int LUA_NATIVE_FILES_GET_NUM_DLC_WEAPON_COMPONENTS( int dlcWeaponIndex )
	{
		auto retval = FILES::GET_NUM_DLC_WEAPON_COMPONENTS(dlcWeaponIndex);
		return retval;
	}

	int LUA_NATIVE_FILES_GET_NUM_DLC_WEAPON_COMPONENTS_SP( int dlcWeaponIndex )
	{
		auto retval = FILES::GET_NUM_DLC_WEAPON_COMPONENTS_SP(dlcWeaponIndex);
		return retval;
	}

	std::tuple<bool, Any> LUA_NATIVE_FILES_GET_DLC_WEAPON_COMPONENT_DATA( int dlcWeaponIndex, int dlcWeapCompIndex, Any ComponentDataPtr )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)FILES::GET_DLC_WEAPON_COMPONENT_DATA(dlcWeaponIndex, dlcWeapCompIndex, &ComponentDataPtr);
		std::get<1>(return_values) = ComponentDataPtr;

		return return_values;
	}

	std::tuple<bool, Any> LUA_NATIVE_FILES_GET_DLC_WEAPON_COMPONENT_DATA_SP( int dlcWeaponIndex, int dlcWeapCompIndex, Any ComponentDataPtr )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)FILES::GET_DLC_WEAPON_COMPONENT_DATA_SP(dlcWeaponIndex, dlcWeapCompIndex, &ComponentDataPtr);
		std::get<1>(return_values) = ComponentDataPtr;

		return return_values;
	}

	bool LUA_NATIVE_FILES_IS_CONTENT_ITEM_LOCKED( Hash itemHash )
	{
		auto retval = (bool)FILES::IS_CONTENT_ITEM_LOCKED(itemHash);
		return retval;
	}

	bool LUA_NATIVE_FILES_IS_DLC_VEHICLE_MOD( Hash hash )
	{
		auto retval = (bool)FILES::IS_DLC_VEHICLE_MOD(hash);
		return retval;
	}

	Hash LUA_NATIVE_FILES_GET_DLC_VEHICLE_MOD_LOCK_HASH( Hash hash )
	{
		auto retval = FILES::GET_DLC_VEHICLE_MOD_LOCK_HASH(hash);
		return retval;
	}

	void LUA_NATIVE_FILES_EXECUTE_CONTENT_CHANGESET_GROUP_FOR_ALL( Hash hash )
	{
		FILES::EXECUTE_CONTENT_CHANGESET_GROUP_FOR_ALL(hash);
	}

	void LUA_NATIVE_FILES_REVERT_CONTENT_CHANGESET_GROUP_FOR_ALL( Hash hash )
	{
		FILES::REVERT_CONTENT_CHANGESET_GROUP_FOR_ALL(hash);
	}

	FireId LUA_NATIVE_FIRE_START_SCRIPT_FIRE( float X, float Y, float Z, int maxChildren, bool isGasFire )
	{
		auto retval = FIRE::START_SCRIPT_FIRE(X, Y, Z, maxChildren, isGasFire);
		return retval;
	}

	void LUA_NATIVE_FIRE_REMOVE_SCRIPT_FIRE( FireId fireHandle )
	{
		FIRE::REMOVE_SCRIPT_FIRE(fireHandle);
	}

	FireId LUA_NATIVE_FIRE_START_ENTITY_FIRE( Entity entity )
	{
		auto retval = FIRE::START_ENTITY_FIRE(entity);
		return retval;
	}

	void LUA_NATIVE_FIRE_STOP_ENTITY_FIRE( Entity entity )
	{
		FIRE::STOP_ENTITY_FIRE(entity);
	}

	bool LUA_NATIVE_FIRE_IS_ENTITY_ON_FIRE( Entity entity )
	{
		auto retval = (bool)FIRE::IS_ENTITY_ON_FIRE(entity);
		return retval;
	}

	int LUA_NATIVE_FIRE_GET_NUMBER_OF_FIRES_IN_RANGE( float x, float y, float z, float radius )
	{
		auto retval = FIRE::GET_NUMBER_OF_FIRES_IN_RANGE(x, y, z, radius);
		return retval;
	}

	void LUA_NATIVE_FIRE_SET_FLAMMABILITY_MULTIPLIER( float p0 )
	{
		FIRE::SET_FLAMMABILITY_MULTIPLIER(p0);
	}

	void LUA_NATIVE_FIRE_STOP_FIRE_IN_RANGE( float x, float y, float z, float radius )
	{
		FIRE::STOP_FIRE_IN_RANGE(x, y, z, radius);
	}

	std::tuple<bool, Vector3> LUA_NATIVE_FIRE_GET_CLOSEST_FIRE_POS( Vector3 outPosition, float x, float y, float z )
	{
		std::tuple<bool, Vector3> return_values;
		std::get<0>(return_values) = (bool)FIRE::GET_CLOSEST_FIRE_POS(&outPosition, x, y, z);
		std::get<1>(return_values) = outPosition;

		return return_values;
	}

	void LUA_NATIVE_FIRE_ADD_EXPLOSION( float x, float y, float z, int explosionType, float damageScale, bool isAudible, bool isInvisible, float cameraShake, bool noDamage )
	{
		FIRE::ADD_EXPLOSION(x, y, z, explosionType, damageScale, isAudible, isInvisible, cameraShake, noDamage);
	}

	void LUA_NATIVE_FIRE_ADD_OWNED_EXPLOSION( Ped ped, float x, float y, float z, int explosionType, float damageScale, bool isAudible, bool isInvisible, float cameraShake )
	{
		FIRE::ADD_OWNED_EXPLOSION(ped, x, y, z, explosionType, damageScale, isAudible, isInvisible, cameraShake);
	}

	void LUA_NATIVE_FIRE_ADD_EXPLOSION_WITH_USER_VFX( float x, float y, float z, int explosionType, Hash explosionFx, float damageScale, bool isAudible, bool isInvisible, float cameraShake )
	{
		FIRE::ADD_EXPLOSION_WITH_USER_VFX(x, y, z, explosionType, explosionFx, damageScale, isAudible, isInvisible, cameraShake);
	}

	bool LUA_NATIVE_FIRE_IS_EXPLOSION_IN_AREA( int explosionType, float x1, float y1, float z1, float x2, float y2, float z2 )
	{
		auto retval = (bool)FIRE::IS_EXPLOSION_IN_AREA(explosionType, x1, y1, z1, x2, y2, z2);
		return retval;
	}

	bool LUA_NATIVE_FIRE_IS_EXPLOSION_ACTIVE_IN_AREA( int explosionType, float x1, float y1, float z1, float x2, float y2, float z2 )
	{
		auto retval = (bool)FIRE::IS_EXPLOSION_ACTIVE_IN_AREA(explosionType, x1, y1, z1, x2, y2, z2);
		return retval;
	}

	bool LUA_NATIVE_FIRE_IS_EXPLOSION_IN_SPHERE( int explosionType, float x, float y, float z, float radius )
	{
		auto retval = (bool)FIRE::IS_EXPLOSION_IN_SPHERE(explosionType, x, y, z, radius);
		return retval;
	}

	Entity LUA_NATIVE_FIRE_GET_OWNER_OF_EXPLOSION_IN_SPHERE( int explosionType, float x, float y, float z, float radius )
	{
		auto retval = FIRE::GET_OWNER_OF_EXPLOSION_IN_SPHERE(explosionType, x, y, z, radius);
		return retval;
	}

	bool LUA_NATIVE_FIRE_IS_EXPLOSION_IN_ANGLED_AREA( int explosionType, float x1, float y1, float z1, float x2, float y2, float z2, float width )
	{
		auto retval = (bool)FIRE::IS_EXPLOSION_IN_ANGLED_AREA(explosionType, x1, y1, z1, x2, y2, z2, width);
		return retval;
	}

	Entity LUA_NATIVE_FIRE_GET_OWNER_OF_EXPLOSION_IN_ANGLED_AREA( int explosionType, float x1, float y1, float z1, float x2, float y2, float z2, float radius )
	{
		auto retval = FIRE::GET_OWNER_OF_EXPLOSION_IN_ANGLED_AREA(explosionType, x1, y1, z1, x2, y2, z2, radius);
		return retval;
	}

	void LUA_NATIVE_GRAPHICS_SET_DEBUG_LINES_AND_SPHERES_DRAWING_ACTIVE( bool enabled )
	{
		GRAPHICS::SET_DEBUG_LINES_AND_SPHERES_DRAWING_ACTIVE(enabled);
	}

	void LUA_NATIVE_GRAPHICS_DRAW_DEBUG_LINE( float x1, float y1, float z1, float x2, float y2, float z2, int r, int g, int b, int alpha )
	{
		GRAPHICS::DRAW_DEBUG_LINE(x1, y1, z1, x2, y2, z2, r, g, b, alpha);
	}

	void LUA_NATIVE_GRAPHICS_DRAW_DEBUG_LINE_WITH_TWO_COLOURS( float x1, float y1, float z1, float x2, float y2, float z2, int r1, int g1, int b1, int r2, int g2, int b2, int alpha1, int alpha2 )
	{
		GRAPHICS::DRAW_DEBUG_LINE_WITH_TWO_COLOURS(x1, y1, z1, x2, y2, z2, r1, g1, b1, r2, g2, b2, alpha1, alpha2);
	}

	void LUA_NATIVE_GRAPHICS_DRAW_DEBUG_SPHERE( float x, float y, float z, float radius, int red, int green, int blue, int alpha )
	{
		GRAPHICS::DRAW_DEBUG_SPHERE(x, y, z, radius, red, green, blue, alpha);
	}

	void LUA_NATIVE_GRAPHICS_DRAW_DEBUG_BOX( float x1, float y1, float z1, float x2, float y2, float z2, int r, int g, int b, int alpha )
	{
		GRAPHICS::DRAW_DEBUG_BOX(x1, y1, z1, x2, y2, z2, r, g, b, alpha);
	}

	void LUA_NATIVE_GRAPHICS_DRAW_DEBUG_CROSS( float x, float y, float z, float size, int red, int green, int blue, int alpha )
	{
		GRAPHICS::DRAW_DEBUG_CROSS(x, y, z, size, red, green, blue, alpha);
	}

	void LUA_NATIVE_GRAPHICS_DRAW_DEBUG_TEXT( const char* text, float x, float y, float z, int red, int green, int blue, int alpha )
	{
		GRAPHICS::DRAW_DEBUG_TEXT(text, x, y, z, red, green, blue, alpha);
	}

	void LUA_NATIVE_GRAPHICS_DRAW_DEBUG_TEXT_2D( const char* text, float x, float y, float z, int red, int green, int blue, int alpha )
	{
		GRAPHICS::DRAW_DEBUG_TEXT_2D(text, x, y, z, red, green, blue, alpha);
	}

	void LUA_NATIVE_GRAPHICS_DRAW_LINE( float x1, float y1, float z1, float x2, float y2, float z2, int red, int green, int blue, int alpha )
	{
		GRAPHICS::DRAW_LINE(x1, y1, z1, x2, y2, z2, red, green, blue, alpha);
	}

	void LUA_NATIVE_GRAPHICS_DRAW_POLY( float x1, float y1, float z1, float x2, float y2, float z2, float x3, float y3, float z3, int red, int green, int blue, int alpha )
	{
		GRAPHICS::DRAW_POLY(x1, y1, z1, x2, y2, z2, x3, y3, z3, red, green, blue, alpha);
	}

	void LUA_NATIVE_GRAPHICS_DRAW_TEXTURED_POLY( float x1, float y1, float z1, float x2, float y2, float z2, float x3, float y3, float z3, int red, int green, int blue, int alpha, const char* textureDict, const char* textureName, float u1, float v1, float w1, float u2, float v2, float w2, float u3, float v3, float w3 )
	{
		GRAPHICS::DRAW_TEXTURED_POLY(x1, y1, z1, x2, y2, z2, x3, y3, z3, red, green, blue, alpha, textureDict, textureName, u1, v1, w1, u2, v2, w2, u3, v3, w3);
	}

	void LUA_NATIVE_GRAPHICS_DRAW_BOX( float x1, float y1, float z1, float x2, float y2, float z2, int red, int green, int blue, int alpha )
	{
		GRAPHICS::DRAW_BOX(x1, y1, z1, x2, y2, z2, red, green, blue, alpha);
	}

	void LUA_NATIVE_GRAPHICS_SET_BACKFACECULLING( bool toggle )
	{
		GRAPHICS::SET_BACKFACECULLING(toggle);
	}

	void LUA_NATIVE_GRAPHICS_SET_DEPTHWRITING( bool toggle )
	{
		GRAPHICS::SET_DEPTHWRITING(toggle);
	}

	bool LUA_NATIVE_GRAPHICS_BEGIN_TAKE_MISSION_CREATOR_PHOTO(  )
	{
		auto retval = (bool)GRAPHICS::BEGIN_TAKE_MISSION_CREATOR_PHOTO();
		return retval;
	}

	int LUA_NATIVE_GRAPHICS_GET_STATUS_OF_TAKE_MISSION_CREATOR_PHOTO(  )
	{
		auto retval = GRAPHICS::GET_STATUS_OF_TAKE_MISSION_CREATOR_PHOTO();
		return retval;
	}

	void LUA_NATIVE_GRAPHICS_FREE_MEMORY_FOR_MISSION_CREATOR_PHOTO(  )
	{
		GRAPHICS::FREE_MEMORY_FOR_MISSION_CREATOR_PHOTO();
	}

	std::tuple<bool, Any> LUA_NATIVE_GRAPHICS_LOAD_MISSION_CREATOR_PHOTO( Any p0, Any p1, Any p2, Any p3 )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)GRAPHICS::LOAD_MISSION_CREATOR_PHOTO(&p0, p1, p2, p3);
		std::get<1>(return_values) = p0;

		return return_values;
	}

	std::tuple<int, Any> LUA_NATIVE_GRAPHICS_GET_STATUS_OF_LOAD_MISSION_CREATOR_PHOTO( Any p0 )
	{
		std::tuple<int, Any> return_values;
		std::get<0>(return_values) = GRAPHICS::GET_STATUS_OF_LOAD_MISSION_CREATOR_PHOTO(&p0);
		std::get<1>(return_values) = p0;

		return return_values;
	}

	bool LUA_NATIVE_GRAPHICS_BEGIN_CREATE_MISSION_CREATOR_PHOTO_PREVIEW(  )
	{
		auto retval = (bool)GRAPHICS::BEGIN_CREATE_MISSION_CREATOR_PHOTO_PREVIEW();
		return retval;
	}

	int LUA_NATIVE_GRAPHICS_GET_STATUS_OF_CREATE_MISSION_CREATOR_PHOTO_PREVIEW(  )
	{
		auto retval = GRAPHICS::GET_STATUS_OF_CREATE_MISSION_CREATOR_PHOTO_PREVIEW();
		return retval;
	}

	void LUA_NATIVE_GRAPHICS_FREE_MEMORY_FOR_MISSION_CREATOR_PHOTO_PREVIEW(  )
	{
		GRAPHICS::FREE_MEMORY_FOR_MISSION_CREATOR_PHOTO_PREVIEW();
	}

	bool LUA_NATIVE_GRAPHICS_BEGIN_TAKE_HIGH_QUALITY_PHOTO(  )
	{
		auto retval = (bool)GRAPHICS::BEGIN_TAKE_HIGH_QUALITY_PHOTO();
		return retval;
	}

	int LUA_NATIVE_GRAPHICS_GET_STATUS_OF_TAKE_HIGH_QUALITY_PHOTO(  )
	{
		auto retval = GRAPHICS::GET_STATUS_OF_TAKE_HIGH_QUALITY_PHOTO();
		return retval;
	}

	void LUA_NATIVE_GRAPHICS_FREE_MEMORY_FOR_HIGH_QUALITY_PHOTO(  )
	{
		GRAPHICS::FREE_MEMORY_FOR_HIGH_QUALITY_PHOTO();
	}

	void LUA_NATIVE_GRAPHICS_SET_TAKEN_PHOTO_IS_MUGSHOT( bool toggle )
	{
		GRAPHICS::SET_TAKEN_PHOTO_IS_MUGSHOT(toggle);
	}

	void LUA_NATIVE_GRAPHICS_SET_ARENA_THEME_AND_VARIATION_FOR_TAKEN_PHOTO( Any p0, int p1 )
	{
		GRAPHICS::SET_ARENA_THEME_AND_VARIATION_FOR_TAKEN_PHOTO(p0, p1);
	}

	void LUA_NATIVE_GRAPHICS_SET_ON_ISLAND_X_FOR_TAKEN_PHOTO( Any p0 )
	{
		GRAPHICS::SET_ON_ISLAND_X_FOR_TAKEN_PHOTO(p0);
	}

	bool LUA_NATIVE_GRAPHICS_SAVE_HIGH_QUALITY_PHOTO( int unused )
	{
		auto retval = (bool)GRAPHICS::SAVE_HIGH_QUALITY_PHOTO(unused);
		return retval;
	}

	int LUA_NATIVE_GRAPHICS_GET_STATUS_OF_SAVE_HIGH_QUALITY_PHOTO(  )
	{
		auto retval = GRAPHICS::GET_STATUS_OF_SAVE_HIGH_QUALITY_PHOTO();
		return retval;
	}

	bool LUA_NATIVE_GRAPHICS_BEGIN_CREATE_LOW_QUALITY_COPY_OF_PHOTO( Any p0 )
	{
		auto retval = (bool)GRAPHICS::BEGIN_CREATE_LOW_QUALITY_COPY_OF_PHOTO(p0);
		return retval;
	}

	int LUA_NATIVE_GRAPHICS_GET_STATUS_OF_CREATE_LOW_QUALITY_COPY_OF_PHOTO( int p0 )
	{
		auto retval = GRAPHICS::GET_STATUS_OF_CREATE_LOW_QUALITY_COPY_OF_PHOTO(p0);
		return retval;
	}

	void LUA_NATIVE_GRAPHICS_FREE_MEMORY_FOR_LOW_QUALITY_PHOTO(  )
	{
		GRAPHICS::FREE_MEMORY_FOR_LOW_QUALITY_PHOTO();
	}

	void LUA_NATIVE_GRAPHICS_DRAW_LOW_QUALITY_PHOTO_TO_PHONE( bool p0, bool p1 )
	{
		GRAPHICS::DRAW_LOW_QUALITY_PHOTO_TO_PHONE(p0, p1);
	}

	int LUA_NATIVE_GRAPHICS_GET_MAXIMUM_NUMBER_OF_PHOTOS(  )
	{
		auto retval = GRAPHICS::GET_MAXIMUM_NUMBER_OF_PHOTOS();
		return retval;
	}

	int LUA_NATIVE_GRAPHICS_GET_MAXIMUM_NUMBER_OF_CLOUD_PHOTOS(  )
	{
		auto retval = GRAPHICS::GET_MAXIMUM_NUMBER_OF_CLOUD_PHOTOS();
		return retval;
	}

	int LUA_NATIVE_GRAPHICS_GET_CURRENT_NUMBER_OF_CLOUD_PHOTOS(  )
	{
		auto retval = GRAPHICS::GET_CURRENT_NUMBER_OF_CLOUD_PHOTOS();
		return retval;
	}

	bool LUA_NATIVE_GRAPHICS_QUEUE_OPERATION_TO_CREATE_SORTED_LIST_OF_PHOTOS( Any p0 )
	{
		auto retval = (bool)GRAPHICS::QUEUE_OPERATION_TO_CREATE_SORTED_LIST_OF_PHOTOS(p0);
		return retval;
	}

	int LUA_NATIVE_GRAPHICS_GET_STATUS_OF_SORTED_LIST_OPERATION( Any p0 )
	{
		auto retval = GRAPHICS::GET_STATUS_OF_SORTED_LIST_OPERATION(p0);
		return retval;
	}

	void LUA_NATIVE_GRAPHICS_CLEAR_STATUS_OF_SORTED_LIST_OPERATION(  )
	{
		GRAPHICS::CLEAR_STATUS_OF_SORTED_LIST_OPERATION();
	}

	bool LUA_NATIVE_GRAPHICS_DOES_THIS_PHOTO_SLOT_CONTAIN_A_VALID_PHOTO( Any p0 )
	{
		auto retval = (bool)GRAPHICS::DOES_THIS_PHOTO_SLOT_CONTAIN_A_VALID_PHOTO(p0);
		return retval;
	}

	bool LUA_NATIVE_GRAPHICS_LOAD_HIGH_QUALITY_PHOTO( Any p0 )
	{
		auto retval = (bool)GRAPHICS::LOAD_HIGH_QUALITY_PHOTO(p0);
		return retval;
	}

	int LUA_NATIVE_GRAPHICS_GET_LOAD_HIGH_QUALITY_PHOTO_STATUS( int p0 )
	{
		auto retval = GRAPHICS::GET_LOAD_HIGH_QUALITY_PHOTO_STATUS(p0);
		return retval;
	}

	void LUA_NATIVE_GRAPHICS_DRAW_LIGHT_WITH_RANGEEX( float x, float y, float z, int r, int g, int b, float range, float intensity, float shadow )
	{
		GRAPHICS::DRAW_LIGHT_WITH_RANGEEX(x, y, z, r, g, b, range, intensity, shadow);
	}

	void LUA_NATIVE_GRAPHICS_DRAW_LIGHT_WITH_RANGE( float posX, float posY, float posZ, int colorR, int colorG, int colorB, float range, float intensity )
	{
		GRAPHICS::DRAW_LIGHT_WITH_RANGE(posX, posY, posZ, colorR, colorG, colorB, range, intensity);
	}

	void LUA_NATIVE_GRAPHICS_DRAW_SPOT_LIGHT( float posX, float posY, float posZ, float dirX, float dirY, float dirZ, int colorR, int colorG, int colorB, float distance, float brightness, float hardness, float radius, float falloff )
	{
		GRAPHICS::DRAW_SPOT_LIGHT(posX, posY, posZ, dirX, dirY, dirZ, colorR, colorG, colorB, distance, brightness, hardness, radius, falloff);
	}

	void LUA_NATIVE_GRAPHICS_DRAW_SHADOWED_SPOT_LIGHT( float posX, float posY, float posZ, float dirX, float dirY, float dirZ, int colorR, int colorG, int colorB, float distance, float brightness, float roundness, float radius, float falloff, int shadowId )
	{
		GRAPHICS::DRAW_SHADOWED_SPOT_LIGHT(posX, posY, posZ, dirX, dirY, dirZ, colorR, colorG, colorB, distance, brightness, roundness, radius, falloff, shadowId);
	}

	void LUA_NATIVE_GRAPHICS_FADE_UP_PED_LIGHT( float p0 )
	{
		GRAPHICS::FADE_UP_PED_LIGHT(p0);
	}

	void LUA_NATIVE_GRAPHICS_UPDATE_LIGHTS_ON_ENTITY( Entity entity )
	{
		GRAPHICS::UPDATE_LIGHTS_ON_ENTITY(entity);
	}

	void LUA_NATIVE_GRAPHICS_SET_LIGHT_OVERRIDE_MAX_INTENSITY_SCALE( Any p0 )
	{
		GRAPHICS::SET_LIGHT_OVERRIDE_MAX_INTENSITY_SCALE(p0);
	}

	float LUA_NATIVE_GRAPHICS_GET_LIGHT_OVERRIDE_MAX_INTENSITY_SCALE(  )
	{
		auto retval = GRAPHICS::GET_LIGHT_OVERRIDE_MAX_INTENSITY_SCALE();
		return retval;
	}

	void LUA_NATIVE_GRAPHICS_DRAW_MARKER( int type, float posX, float posY, float posZ, float dirX, float dirY, float dirZ, float rotX, float rotY, float rotZ, float scaleX, float scaleY, float scaleZ, int red, int green, int blue, int alpha, bool bobUpAndDown, bool faceCamera, int p19, bool rotate, const char* textureDict, const char* textureName, bool drawOnEnts )
	{
		GRAPHICS::DRAW_MARKER(type, posX, posY, posZ, dirX, dirY, dirZ, rotX, rotY, rotZ, scaleX, scaleY, scaleZ, red, green, blue, alpha, bobUpAndDown, faceCamera, p19, rotate, textureDict, textureName, drawOnEnts);
	}

	void LUA_NATIVE_GRAPHICS_DRAW_MARKER_EX( int type, float posX, float posY, float posZ, float dirX, float dirY, float dirZ, float rotX, float rotY, float rotZ, float scaleX, float scaleY, float scaleZ, int red, int green, int blue, int alpha, bool bobUpAndDown, bool faceCamera, Any p19, bool rotate, const char* textureDict, const char* textureName, bool drawOnEnts, bool p24, bool p25 )
	{
		GRAPHICS::DRAW_MARKER_EX(type, posX, posY, posZ, dirX, dirY, dirZ, rotX, rotY, rotZ, scaleX, scaleY, scaleZ, red, green, blue, alpha, bobUpAndDown, faceCamera, p19, rotate, textureDict, textureName, drawOnEnts, p24, p25);
	}

	void LUA_NATIVE_GRAPHICS_DRAW_MARKER_SPHERE( float x, float y, float z, float radius, int red, int green, int blue, float alpha )
	{
		GRAPHICS::DRAW_MARKER_SPHERE(x, y, z, radius, red, green, blue, alpha);
	}

	int LUA_NATIVE_GRAPHICS_CREATE_CHECKPOINT( int type, float posX1, float posY1, float posZ1, float posX2, float posY2, float posZ2, float diameter, int red, int green, int blue, int alpha, int reserved )
	{
		auto retval = GRAPHICS::CREATE_CHECKPOINT(type, posX1, posY1, posZ1, posX2, posY2, posZ2, diameter, red, green, blue, alpha, reserved);
		return retval;
	}

	void LUA_NATIVE_GRAPHICS_SET_CHECKPOINT_INSIDE_CYLINDER_HEIGHT_SCALE( int checkpoint, float scale )
	{
		GRAPHICS::SET_CHECKPOINT_INSIDE_CYLINDER_HEIGHT_SCALE(checkpoint, scale);
	}

	void LUA_NATIVE_GRAPHICS_SET_CHECKPOINT_INSIDE_CYLINDER_SCALE( int checkpoint, float scale )
	{
		GRAPHICS::SET_CHECKPOINT_INSIDE_CYLINDER_SCALE(checkpoint, scale);
	}

	void LUA_NATIVE_GRAPHICS_SET_CHECKPOINT_CYLINDER_HEIGHT( int checkpoint, float nearHeight, float farHeight, float radius )
	{
		GRAPHICS::SET_CHECKPOINT_CYLINDER_HEIGHT(checkpoint, nearHeight, farHeight, radius);
	}

	void LUA_NATIVE_GRAPHICS_SET_CHECKPOINT_RGBA( int checkpoint, int red, int green, int blue, int alpha )
	{
		GRAPHICS::SET_CHECKPOINT_RGBA(checkpoint, red, green, blue, alpha);
	}

	void LUA_NATIVE_GRAPHICS_SET_CHECKPOINT_RGBA2( int checkpoint, int red, int green, int blue, int alpha )
	{
		GRAPHICS::SET_CHECKPOINT_RGBA2(checkpoint, red, green, blue, alpha);
	}

	void LUA_NATIVE_GRAPHICS_SET_CHECKPOINT_CLIPPLANE_WITH_POS_NORM( int checkpoint, float posX, float posY, float posZ, float unkX, float unkY, float unkZ )
	{
		GRAPHICS::SET_CHECKPOINT_CLIPPLANE_WITH_POS_NORM(checkpoint, posX, posY, posZ, unkX, unkY, unkZ);
	}

	void LUA_NATIVE_GRAPHICS_SET_CHECKPOINT_FORCE_OLD_ARROW_POINTING( int checkpoint )
	{
		GRAPHICS::SET_CHECKPOINT_FORCE_OLD_ARROW_POINTING(checkpoint);
	}

	void LUA_NATIVE_GRAPHICS_SET_CHECKPOINT_DECAL_ROT_ALIGNED_TO_CAMERA_ROT( int checkpoint )
	{
		GRAPHICS::SET_CHECKPOINT_DECAL_ROT_ALIGNED_TO_CAMERA_ROT(checkpoint);
	}

	void LUA_NATIVE_GRAPHICS_SET_CHECKPOINT_FORCE_DIRECTION( int checkpoint )
	{
		GRAPHICS::SET_CHECKPOINT_FORCE_DIRECTION(checkpoint);
	}

	void LUA_NATIVE_GRAPHICS_SET_CHECKPOINT_DIRECTION( int checkpoint, float posX, float posY, float posZ )
	{
		GRAPHICS::SET_CHECKPOINT_DIRECTION(checkpoint, posX, posY, posZ);
	}

	void LUA_NATIVE_GRAPHICS_DELETE_CHECKPOINT( int checkpoint )
	{
		GRAPHICS::DELETE_CHECKPOINT(checkpoint);
	}

	void LUA_NATIVE_GRAPHICS_DONT_RENDER_IN_GAME_UI( bool p0 )
	{
		GRAPHICS::DONT_RENDER_IN_GAME_UI(p0);
	}

	void LUA_NATIVE_GRAPHICS_FORCE_RENDER_IN_GAME_UI( bool toggle )
	{
		GRAPHICS::FORCE_RENDER_IN_GAME_UI(toggle);
	}

	void LUA_NATIVE_GRAPHICS_REQUEST_STREAMED_TEXTURE_DICT( const char* textureDict, bool p1 )
	{
		GRAPHICS::REQUEST_STREAMED_TEXTURE_DICT(textureDict, p1);
	}

	bool LUA_NATIVE_GRAPHICS_HAS_STREAMED_TEXTURE_DICT_LOADED( const char* textureDict )
	{
		auto retval = (bool)GRAPHICS::HAS_STREAMED_TEXTURE_DICT_LOADED(textureDict);
		return retval;
	}

	void LUA_NATIVE_GRAPHICS_SET_STREAMED_TEXTURE_DICT_AS_NO_LONGER_NEEDED( const char* textureDict )
	{
		GRAPHICS::SET_STREAMED_TEXTURE_DICT_AS_NO_LONGER_NEEDED(textureDict);
	}

	void LUA_NATIVE_GRAPHICS_DRAW_RECT( float x, float y, float width, float height, int r, int g, int b, int a, bool p8 )
	{
		GRAPHICS::DRAW_RECT(x, y, width, height, r, g, b, a, p8);
	}

	void LUA_NATIVE_GRAPHICS_SET_SCRIPT_GFX_DRAW_BEHIND_PAUSEMENU( bool toggle )
	{
		GRAPHICS::SET_SCRIPT_GFX_DRAW_BEHIND_PAUSEMENU(toggle);
	}

	void LUA_NATIVE_GRAPHICS_SET_SCRIPT_GFX_DRAW_ORDER( int drawOrder )
	{
		GRAPHICS::SET_SCRIPT_GFX_DRAW_ORDER(drawOrder);
	}

	void LUA_NATIVE_GRAPHICS_SET_SCRIPT_GFX_ALIGN( int horizontalAlign, int verticalAlign )
	{
		GRAPHICS::SET_SCRIPT_GFX_ALIGN(horizontalAlign, verticalAlign);
	}

	void LUA_NATIVE_GRAPHICS_RESET_SCRIPT_GFX_ALIGN(  )
	{
		GRAPHICS::RESET_SCRIPT_GFX_ALIGN();
	}

	void LUA_NATIVE_GRAPHICS_SET_SCRIPT_GFX_ALIGN_PARAMS( float x, float y, float w, float h )
	{
		GRAPHICS::SET_SCRIPT_GFX_ALIGN_PARAMS(x, y, w, h);
	}

	std::tuple<float, float> LUA_NATIVE_GRAPHICS_GET_SCRIPT_GFX_ALIGN_POSITION( float x, float y, float calculatedX, float calculatedY )
	{
		std::tuple<float, float> return_values;
		GRAPHICS::GET_SCRIPT_GFX_ALIGN_POSITION(x, y, &calculatedX, &calculatedY);
		std::get<0>(return_values) = calculatedX;
		std::get<1>(return_values) = calculatedY;

		return return_values;
	}

	float LUA_NATIVE_GRAPHICS_GET_SAFE_ZONE_SIZE(  )
	{
		auto retval = GRAPHICS::GET_SAFE_ZONE_SIZE();
		return retval;
	}

	void LUA_NATIVE_GRAPHICS_DRAW_SPRITE( const char* textureDict, const char* textureName, float screenX, float screenY, float width, float height, float heading, int red, int green, int blue, int alpha, bool p11, Any p12 )
	{
		GRAPHICS::DRAW_SPRITE(textureDict, textureName, screenX, screenY, width, height, heading, red, green, blue, alpha, p11, p12);
	}

	void LUA_NATIVE_GRAPHICS_DRAW_SPRITE_ARX( const char* textureDict, const char* textureName, float x, float y, float width, float height, float p6, int red, int green, int blue, int alpha, Any p11, Any p12 )
	{
		GRAPHICS::DRAW_SPRITE_ARX(textureDict, textureName, x, y, width, height, p6, red, green, blue, alpha, p11, p12);
	}

	void LUA_NATIVE_GRAPHICS_DRAW_SPRITE_NAMED_RENDERTARGET( const char* textureDict, const char* textureName, float screenX, float screenY, float width, float height, float heading, int red, int green, int blue, int alpha, Any p11 )
	{
		GRAPHICS::DRAW_SPRITE_NAMED_RENDERTARGET(textureDict, textureName, screenX, screenY, width, height, heading, red, green, blue, alpha, p11);
	}

	void LUA_NATIVE_GRAPHICS_DRAW_SPRITE_ARX_WITH_UV( const char* textureDict, const char* textureName, float x, float y, float width, float height, float u1, float v1, float u2, float v2, float heading, int red, int green, int blue, int alpha, Any p15 )
	{
		GRAPHICS::DRAW_SPRITE_ARX_WITH_UV(textureDict, textureName, x, y, width, height, u1, v1, u2, v2, heading, red, green, blue, alpha, p15);
	}

	int LUA_NATIVE_GRAPHICS_ADD_ENTITY_ICON( Entity entity, const char* icon )
	{
		auto retval = GRAPHICS::ADD_ENTITY_ICON(entity, icon);
		return retval;
	}

	void LUA_NATIVE_GRAPHICS_SET_ENTITY_ICON_VISIBILITY( Entity entity, bool toggle )
	{
		GRAPHICS::SET_ENTITY_ICON_VISIBILITY(entity, toggle);
	}

	void LUA_NATIVE_GRAPHICS_SET_ENTITY_ICON_COLOR( Entity entity, int red, int green, int blue, int alpha )
	{
		GRAPHICS::SET_ENTITY_ICON_COLOR(entity, red, green, blue, alpha);
	}

	void LUA_NATIVE_GRAPHICS_SET_DRAW_ORIGIN( float x, float y, float z, bool p3 )
	{
		GRAPHICS::SET_DRAW_ORIGIN(x, y, z, p3);
	}

	void LUA_NATIVE_GRAPHICS_CLEAR_DRAW_ORIGIN(  )
	{
		GRAPHICS::CLEAR_DRAW_ORIGIN();
	}

	int LUA_NATIVE_GRAPHICS_SET_BINK_MOVIE( const char* name )
	{
		auto retval = GRAPHICS::SET_BINK_MOVIE(name);
		return retval;
	}

	void LUA_NATIVE_GRAPHICS_PLAY_BINK_MOVIE( int binkMovie )
	{
		GRAPHICS::PLAY_BINK_MOVIE(binkMovie);
	}

	void LUA_NATIVE_GRAPHICS_STOP_BINK_MOVIE( int binkMovie )
	{
		GRAPHICS::STOP_BINK_MOVIE(binkMovie);
	}

	void LUA_NATIVE_GRAPHICS_RELEASE_BINK_MOVIE( int binkMovie )
	{
		GRAPHICS::RELEASE_BINK_MOVIE(binkMovie);
	}

	void LUA_NATIVE_GRAPHICS_DRAW_BINK_MOVIE( int binkMovie, float p1, float p2, float p3, float p4, float p5, int r, int g, int b, int a )
	{
		GRAPHICS::DRAW_BINK_MOVIE(binkMovie, p1, p2, p3, p4, p5, r, g, b, a);
	}

	void LUA_NATIVE_GRAPHICS_SET_BINK_MOVIE_TIME( int binkMovie, float progress )
	{
		GRAPHICS::SET_BINK_MOVIE_TIME(binkMovie, progress);
	}

	float LUA_NATIVE_GRAPHICS_GET_BINK_MOVIE_TIME( int binkMovie )
	{
		auto retval = GRAPHICS::GET_BINK_MOVIE_TIME(binkMovie);
		return retval;
	}

	void LUA_NATIVE_GRAPHICS_SET_BINK_MOVIE_VOLUME( int binkMovie, float value )
	{
		GRAPHICS::SET_BINK_MOVIE_VOLUME(binkMovie, value);
	}

	void LUA_NATIVE_GRAPHICS_ATTACH_TV_AUDIO_TO_ENTITY( Entity entity )
	{
		GRAPHICS::ATTACH_TV_AUDIO_TO_ENTITY(entity);
	}

	void LUA_NATIVE_GRAPHICS_SET_BINK_MOVIE_AUDIO_FRONTEND( int binkMovie, bool p1 )
	{
		GRAPHICS::SET_BINK_MOVIE_AUDIO_FRONTEND(binkMovie, p1);
	}

	void LUA_NATIVE_GRAPHICS_SET_TV_AUDIO_FRONTEND( bool toggle )
	{
		GRAPHICS::SET_TV_AUDIO_FRONTEND(toggle);
	}

	void LUA_NATIVE_GRAPHICS_SET_BINK_SHOULD_SKIP( int binkMovie, bool bShouldSkip )
	{
		GRAPHICS::SET_BINK_SHOULD_SKIP(binkMovie, bShouldSkip);
	}

	int LUA_NATIVE_GRAPHICS_LOAD_MOVIE_MESH_SET( const char* movieMeshSetName )
	{
		auto retval = GRAPHICS::LOAD_MOVIE_MESH_SET(movieMeshSetName);
		return retval;
	}

	void LUA_NATIVE_GRAPHICS_RELEASE_MOVIE_MESH_SET( int movieMeshSet )
	{
		GRAPHICS::RELEASE_MOVIE_MESH_SET(movieMeshSet);
	}

	int LUA_NATIVE_GRAPHICS_QUERY_MOVIE_MESH_SET_STATE( Any p0 )
	{
		auto retval = GRAPHICS::QUERY_MOVIE_MESH_SET_STATE(p0);
		return retval;
	}

	std::tuple<int, int> LUA_NATIVE_GRAPHICS_GET_SCREEN_RESOLUTION( int x, int y )
	{
		std::tuple<int, int> return_values;
		GRAPHICS::GET_SCREEN_RESOLUTION(&x, &y);
		std::get<0>(return_values) = x;
		std::get<1>(return_values) = y;

		return return_values;
	}

	std::tuple<int, int> LUA_NATIVE_GRAPHICS_GET_ACTUAL_SCREEN_RESOLUTION( int x, int y )
	{
		std::tuple<int, int> return_values;
		GRAPHICS::GET_ACTUAL_SCREEN_RESOLUTION(&x, &y);
		std::get<0>(return_values) = x;
		std::get<1>(return_values) = y;

		return return_values;
	}

	float LUA_NATIVE_GRAPHICS_GET_ASPECT_RATIO( bool b )
	{
		auto retval = GRAPHICS::GET_ASPECT_RATIO(b);
		return retval;
	}

	float LUA_NATIVE_GRAPHICS_GET_SCREEN_ASPECT_RATIO(  )
	{
		auto retval = GRAPHICS::GET_SCREEN_ASPECT_RATIO();
		return retval;
	}

	bool LUA_NATIVE_GRAPHICS_GET_IS_WIDESCREEN(  )
	{
		auto retval = (bool)GRAPHICS::GET_IS_WIDESCREEN();
		return retval;
	}

	bool LUA_NATIVE_GRAPHICS_GET_IS_HIDEF(  )
	{
		auto retval = (bool)GRAPHICS::GET_IS_HIDEF();
		return retval;
	}

	void LUA_NATIVE_GRAPHICS_ADJUST_NEXT_POS_SIZE_AS_NORMALIZED_16_9(  )
	{
		GRAPHICS::ADJUST_NEXT_POS_SIZE_AS_NORMALIZED_16_9();
	}

	void LUA_NATIVE_GRAPHICS_SET_NIGHTVISION( bool toggle )
	{
		GRAPHICS::SET_NIGHTVISION(toggle);
	}

	bool LUA_NATIVE_GRAPHICS_GET_REQUESTINGNIGHTVISION(  )
	{
		auto retval = (bool)GRAPHICS::GET_REQUESTINGNIGHTVISION();
		return retval;
	}

	bool LUA_NATIVE_GRAPHICS_GET_USINGNIGHTVISION(  )
	{
		auto retval = (bool)GRAPHICS::GET_USINGNIGHTVISION();
		return retval;
	}

	void LUA_NATIVE_GRAPHICS_SET_EXPOSURETWEAK( bool toggle )
	{
		GRAPHICS::SET_EXPOSURETWEAK(toggle);
	}

	void LUA_NATIVE_GRAPHICS_FORCE_EXPOSURE_READBACK( bool toggle )
	{
		GRAPHICS::FORCE_EXPOSURE_READBACK(toggle);
	}

	void LUA_NATIVE_GRAPHICS_OVERRIDE_NIGHTVISION_LIGHT_RANGE( float p0 )
	{
		GRAPHICS::OVERRIDE_NIGHTVISION_LIGHT_RANGE(p0);
	}

	void LUA_NATIVE_GRAPHICS_SET_NOISEOVERIDE( bool toggle )
	{
		GRAPHICS::SET_NOISEOVERIDE(toggle);
	}

	void LUA_NATIVE_GRAPHICS_SET_NOISINESSOVERIDE( float value )
	{
		GRAPHICS::SET_NOISINESSOVERIDE(value);
	}

	std::tuple<bool, float, float> LUA_NATIVE_GRAPHICS_GET_SCREEN_COORD_FROM_WORLD_COORD( float worldX, float worldY, float worldZ, float screenX, float screenY )
	{
		std::tuple<bool, float, float> return_values;
		std::get<0>(return_values) = (bool)GRAPHICS::GET_SCREEN_COORD_FROM_WORLD_COORD(worldX, worldY, worldZ, &screenX, &screenY);
		std::get<1>(return_values) = screenX;
		std::get<2>(return_values) = screenY;

		return return_values;
	}

	Vector3 LUA_NATIVE_GRAPHICS_GET_TEXTURE_RESOLUTION( const char* textureDict, const char* textureName )
	{
		auto retval = GRAPHICS::GET_TEXTURE_RESOLUTION(textureDict, textureName);
		return retval;
	}

	bool LUA_NATIVE_GRAPHICS_OVERRIDE_PED_CREW_LOGO_TEXTURE( Ped ped, const char* txd, const char* txn )
	{
		auto retval = (bool)GRAPHICS::OVERRIDE_PED_CREW_LOGO_TEXTURE(ped, txd, txn);
		return retval;
	}

	void LUA_NATIVE_GRAPHICS_SET_DISTANCE_BLUR_STRENGTH_OVERRIDE( float p0 )
	{
		GRAPHICS::SET_DISTANCE_BLUR_STRENGTH_OVERRIDE(p0);
	}

	void LUA_NATIVE_GRAPHICS_SET_FLASH( float p0, float p1, float fadeIn, float duration, float fadeOut )
	{
		GRAPHICS::SET_FLASH(p0, p1, fadeIn, duration, fadeOut);
	}

	void LUA_NATIVE_GRAPHICS_DISABLE_OCCLUSION_THIS_FRAME(  )
	{
		GRAPHICS::DISABLE_OCCLUSION_THIS_FRAME();
	}

	void LUA_NATIVE_GRAPHICS_SET_ARTIFICIAL_LIGHTS_STATE( bool state )
	{
		GRAPHICS::SET_ARTIFICIAL_LIGHTS_STATE(state);
	}

	void LUA_NATIVE_GRAPHICS_SET_ARTIFICIAL_VEHICLE_LIGHTS_STATE( bool toggle )
	{
		GRAPHICS::SET_ARTIFICIAL_VEHICLE_LIGHTS_STATE(toggle);
	}

	void LUA_NATIVE_GRAPHICS_DISABLE_HDTEX_THIS_FRAME(  )
	{
		GRAPHICS::DISABLE_HDTEX_THIS_FRAME();
	}

	int LUA_NATIVE_GRAPHICS_CREATE_TRACKED_POINT(  )
	{
		auto retval = GRAPHICS::CREATE_TRACKED_POINT();
		return retval;
	}

	void LUA_NATIVE_GRAPHICS_SET_TRACKED_POINT_INFO( int point, float x, float y, float z, float radius )
	{
		GRAPHICS::SET_TRACKED_POINT_INFO(point, x, y, z, radius);
	}

	bool LUA_NATIVE_GRAPHICS_IS_TRACKED_POINT_VISIBLE( int point )
	{
		auto retval = (bool)GRAPHICS::IS_TRACKED_POINT_VISIBLE(point);
		return retval;
	}

	void LUA_NATIVE_GRAPHICS_DESTROY_TRACKED_POINT( int point )
	{
		GRAPHICS::DESTROY_TRACKED_POINT(point);
	}

	int LUA_NATIVE_GRAPHICS_SET_GRASS_CULL_SPHERE( float p0, float p1, float p2, float p3 )
	{
		auto retval = GRAPHICS::SET_GRASS_CULL_SPHERE(p0, p1, p2, p3);
		return retval;
	}

	void LUA_NATIVE_GRAPHICS_REMOVE_GRASS_CULL_SPHERE( int handle )
	{
		GRAPHICS::REMOVE_GRASS_CULL_SPHERE(handle);
	}

	void LUA_NATIVE_GRAPHICS_PROCGRASS_ENABLE_CULLSPHERE( int handle, float x, float y, float z, float scale )
	{
		GRAPHICS::PROCGRASS_ENABLE_CULLSPHERE(handle, x, y, z, scale);
	}

	void LUA_NATIVE_GRAPHICS_PROCGRASS_DISABLE_CULLSPHERE( int handle )
	{
		GRAPHICS::PROCGRASS_DISABLE_CULLSPHERE(handle);
	}

	bool LUA_NATIVE_GRAPHICS_PROCGRASS_IS_CULLSPHERE_ENABLED( int handle )
	{
		auto retval = (bool)GRAPHICS::PROCGRASS_IS_CULLSPHERE_ENABLED(handle);
		return retval;
	}

	void LUA_NATIVE_GRAPHICS_PROCGRASS_ENABLE_AMBSCALESCAN(  )
	{
		GRAPHICS::PROCGRASS_ENABLE_AMBSCALESCAN();
	}

	void LUA_NATIVE_GRAPHICS_PROCGRASS_DISABLE_AMBSCALESCAN(  )
	{
		GRAPHICS::PROCGRASS_DISABLE_AMBSCALESCAN();
	}

	void LUA_NATIVE_GRAPHICS_DISABLE_PROCOBJ_CREATION(  )
	{
		GRAPHICS::DISABLE_PROCOBJ_CREATION();
	}

	void LUA_NATIVE_GRAPHICS_ENABLE_PROCOBJ_CREATION(  )
	{
		GRAPHICS::ENABLE_PROCOBJ_CREATION();
	}

	void LUA_NATIVE_GRAPHICS_GRASSBATCH_ENABLE_FLATTENING_EXT_IN_SPHERE( float x, float y, float z, Any p3, float p4, float p5, float p6, float scale )
	{
		GRAPHICS::GRASSBATCH_ENABLE_FLATTENING_EXT_IN_SPHERE(x, y, z, p3, p4, p5, p6, scale);
	}

	void LUA_NATIVE_GRAPHICS_GRASSBATCH_ENABLE_FLATTENING_IN_SPHERE( float x, float y, float z, float radius, float p4, float p5, float p6 )
	{
		GRAPHICS::GRASSBATCH_ENABLE_FLATTENING_IN_SPHERE(x, y, z, radius, p4, p5, p6);
	}

	void LUA_NATIVE_GRAPHICS_GRASSBATCH_DISABLE_FLATTENING(  )
	{
		GRAPHICS::GRASSBATCH_DISABLE_FLATTENING();
	}

	void LUA_NATIVE_GRAPHICS_CASCADE_SHADOWS_INIT_SESSION(  )
	{
		GRAPHICS::CASCADE_SHADOWS_INIT_SESSION();
	}

	void LUA_NATIVE_GRAPHICS_CASCADE_SHADOWS_SET_CASCADE_BOUNDS( Any p0, bool p1, float p2, float p3, float p4, float p5, bool p6, float p7 )
	{
		GRAPHICS::CASCADE_SHADOWS_SET_CASCADE_BOUNDS(p0, p1, p2, p3, p4, p5, p6, p7);
	}

	void LUA_NATIVE_GRAPHICS_CASCADE_SHADOWS_SET_CASCADE_BOUNDS_SCALE( float p0 )
	{
		GRAPHICS::CASCADE_SHADOWS_SET_CASCADE_BOUNDS_SCALE(p0);
	}

	void LUA_NATIVE_GRAPHICS_CASCADE_SHADOWS_SET_ENTITY_TRACKER_SCALE( float p0 )
	{
		GRAPHICS::CASCADE_SHADOWS_SET_ENTITY_TRACKER_SCALE(p0);
	}

	void LUA_NATIVE_GRAPHICS_CASCADE_SHADOWS_SET_SPLIT_Z_EXP_WEIGHT( float p0 )
	{
		GRAPHICS::CASCADE_SHADOWS_SET_SPLIT_Z_EXP_WEIGHT(p0);
	}

	void LUA_NATIVE_GRAPHICS_CASCADE_SHADOWS_SET_BOUND_POSITION( Any p0 )
	{
		GRAPHICS::CASCADE_SHADOWS_SET_BOUND_POSITION(p0);
	}

	void LUA_NATIVE_GRAPHICS_CASCADE_SHADOWS_ENABLE_ENTITY_TRACKER( bool toggle )
	{
		GRAPHICS::CASCADE_SHADOWS_ENABLE_ENTITY_TRACKER(toggle);
	}

	void LUA_NATIVE_GRAPHICS_CASCADE_SHADOWS_SET_SCREEN_SIZE_CHECK_ENABLED( bool p0 )
	{
		GRAPHICS::CASCADE_SHADOWS_SET_SCREEN_SIZE_CHECK_ENABLED(p0);
	}

	void LUA_NATIVE_GRAPHICS_CASCADE_SHADOWS_SET_SHADOW_SAMPLE_TYPE( const char* type )
	{
		GRAPHICS::CASCADE_SHADOWS_SET_SHADOW_SAMPLE_TYPE(type);
	}

	void LUA_NATIVE_GRAPHICS_CASCADE_SHADOWS_CLEAR_SHADOW_SAMPLE_TYPE(  )
	{
		GRAPHICS::CASCADE_SHADOWS_CLEAR_SHADOW_SAMPLE_TYPE();
	}

	void LUA_NATIVE_GRAPHICS_CASCADE_SHADOWS_SET_AIRCRAFT_MODE( bool p0 )
	{
		GRAPHICS::CASCADE_SHADOWS_SET_AIRCRAFT_MODE(p0);
	}

	void LUA_NATIVE_GRAPHICS_CASCADE_SHADOWS_SET_DYNAMIC_DEPTH_MODE( bool p0 )
	{
		GRAPHICS::CASCADE_SHADOWS_SET_DYNAMIC_DEPTH_MODE(p0);
	}

	void LUA_NATIVE_GRAPHICS_CASCADE_SHADOWS_SET_DYNAMIC_DEPTH_VALUE( float p0 )
	{
		GRAPHICS::CASCADE_SHADOWS_SET_DYNAMIC_DEPTH_VALUE(p0);
	}

	void LUA_NATIVE_GRAPHICS_CASCADE_SHADOWS_ENABLE_FREEZER( bool p0 )
	{
		GRAPHICS::CASCADE_SHADOWS_ENABLE_FREEZER(p0);
	}

	void LUA_NATIVE_GRAPHICS_WATER_REFLECTION_SET_SCRIPT_OBJECT_VISIBILITY( Any p0 )
	{
		GRAPHICS::WATER_REFLECTION_SET_SCRIPT_OBJECT_VISIBILITY(p0);
	}

	void LUA_NATIVE_GRAPHICS_GOLF_TRAIL_SET_ENABLED( bool toggle )
	{
		GRAPHICS::GOLF_TRAIL_SET_ENABLED(toggle);
	}

	void LUA_NATIVE_GRAPHICS_GOLF_TRAIL_SET_PATH( float p0, float p1, float p2, float p3, float p4, float p5, float p6, float p7, bool p8 )
	{
		GRAPHICS::GOLF_TRAIL_SET_PATH(p0, p1, p2, p3, p4, p5, p6, p7, p8);
	}

	void LUA_NATIVE_GRAPHICS_GOLF_TRAIL_SET_RADIUS( float p0, float p1, float p2 )
	{
		GRAPHICS::GOLF_TRAIL_SET_RADIUS(p0, p1, p2);
	}

	void LUA_NATIVE_GRAPHICS_GOLF_TRAIL_SET_COLOUR( int p0, int p1, int p2, int p3, int p4, int p5, int p6, int p7, int p8, int p9, int p10, int p11 )
	{
		GRAPHICS::GOLF_TRAIL_SET_COLOUR(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11);
	}

	void LUA_NATIVE_GRAPHICS_GOLF_TRAIL_SET_TESSELLATION( int p0, int p1 )
	{
		GRAPHICS::GOLF_TRAIL_SET_TESSELLATION(p0, p1);
	}

	void LUA_NATIVE_GRAPHICS_GOLF_TRAIL_SET_FIXED_CONTROL_POINT_ENABLE( bool p0 )
	{
		GRAPHICS::GOLF_TRAIL_SET_FIXED_CONTROL_POINT_ENABLE(p0);
	}

	void LUA_NATIVE_GRAPHICS_GOLF_TRAIL_SET_FIXED_CONTROL_POINT( int type, float xPos, float yPos, float zPos, float p4, int red, int green, int blue, int alpha )
	{
		GRAPHICS::GOLF_TRAIL_SET_FIXED_CONTROL_POINT(type, xPos, yPos, zPos, p4, red, green, blue, alpha);
	}

	void LUA_NATIVE_GRAPHICS_GOLF_TRAIL_SET_SHADER_PARAMS( float p0, float p1, float p2, float p3, float p4 )
	{
		GRAPHICS::GOLF_TRAIL_SET_SHADER_PARAMS(p0, p1, p2, p3, p4);
	}

	void LUA_NATIVE_GRAPHICS_GOLF_TRAIL_SET_FACING( bool p0 )
	{
		GRAPHICS::GOLF_TRAIL_SET_FACING(p0);
	}

	float LUA_NATIVE_GRAPHICS_GOLF_TRAIL_GET_MAX_HEIGHT(  )
	{
		auto retval = GRAPHICS::GOLF_TRAIL_GET_MAX_HEIGHT();
		return retval;
	}

	Vector3 LUA_NATIVE_GRAPHICS_GOLF_TRAIL_GET_VISUAL_CONTROL_POINT( int p0 )
	{
		auto retval = GRAPHICS::GOLF_TRAIL_GET_VISUAL_CONTROL_POINT(p0);
		return retval;
	}

	void LUA_NATIVE_GRAPHICS_SET_SEETHROUGH( bool toggle )
	{
		GRAPHICS::SET_SEETHROUGH(toggle);
	}

	bool LUA_NATIVE_GRAPHICS_GET_USINGSEETHROUGH(  )
	{
		auto retval = (bool)GRAPHICS::GET_USINGSEETHROUGH();
		return retval;
	}

	void LUA_NATIVE_GRAPHICS_SEETHROUGH_RESET(  )
	{
		GRAPHICS::SEETHROUGH_RESET();
	}

	void LUA_NATIVE_GRAPHICS_SEETHROUGH_SET_FADE_STARTDISTANCE( float distance )
	{
		GRAPHICS::SEETHROUGH_SET_FADE_STARTDISTANCE(distance);
	}

	void LUA_NATIVE_GRAPHICS_SEETHROUGH_SET_FADE_ENDDISTANCE( float distance )
	{
		GRAPHICS::SEETHROUGH_SET_FADE_ENDDISTANCE(distance);
	}

	float LUA_NATIVE_GRAPHICS_SEETHROUGH_GET_MAX_THICKNESS(  )
	{
		auto retval = GRAPHICS::SEETHROUGH_GET_MAX_THICKNESS();
		return retval;
	}

	void LUA_NATIVE_GRAPHICS_SEETHROUGH_SET_MAX_THICKNESS( float thickness )
	{
		GRAPHICS::SEETHROUGH_SET_MAX_THICKNESS(thickness);
	}

	void LUA_NATIVE_GRAPHICS_SEETHROUGH_SET_NOISE_MIN( float amount )
	{
		GRAPHICS::SEETHROUGH_SET_NOISE_MIN(amount);
	}

	void LUA_NATIVE_GRAPHICS_SEETHROUGH_SET_NOISE_MAX( float amount )
	{
		GRAPHICS::SEETHROUGH_SET_NOISE_MAX(amount);
	}

	void LUA_NATIVE_GRAPHICS_SEETHROUGH_SET_HILIGHT_INTENSITY( float intensity )
	{
		GRAPHICS::SEETHROUGH_SET_HILIGHT_INTENSITY(intensity);
	}

	void LUA_NATIVE_GRAPHICS_SEETHROUGH_SET_HIGHLIGHT_NOISE( float noise )
	{
		GRAPHICS::SEETHROUGH_SET_HIGHLIGHT_NOISE(noise);
	}

	void LUA_NATIVE_GRAPHICS_SEETHROUGH_SET_HEATSCALE( int index, float heatScale )
	{
		GRAPHICS::SEETHROUGH_SET_HEATSCALE(index, heatScale);
	}

	void LUA_NATIVE_GRAPHICS_SEETHROUGH_SET_COLOR_NEAR( int red, int green, int blue )
	{
		GRAPHICS::SEETHROUGH_SET_COLOR_NEAR(red, green, blue);
	}

	void LUA_NATIVE_GRAPHICS_SET_MOTIONBLUR_MAX_VEL_SCALER( float p0 )
	{
		GRAPHICS::SET_MOTIONBLUR_MAX_VEL_SCALER(p0);
	}

	float LUA_NATIVE_GRAPHICS_GET_MOTIONBLUR_MAX_VEL_SCALER(  )
	{
		auto retval = GRAPHICS::GET_MOTIONBLUR_MAX_VEL_SCALER();
		return retval;
	}

	void LUA_NATIVE_GRAPHICS_SET_FORCE_MOTIONBLUR( bool toggle )
	{
		GRAPHICS::SET_FORCE_MOTIONBLUR(toggle);
	}

	void LUA_NATIVE_GRAPHICS_TOGGLE_PLAYER_DAMAGE_OVERLAY( bool toggle )
	{
		GRAPHICS::TOGGLE_PLAYER_DAMAGE_OVERLAY(toggle);
	}

	void LUA_NATIVE_GRAPHICS_RESET_ADAPTATION( int p0 )
	{
		GRAPHICS::RESET_ADAPTATION(p0);
	}

	bool LUA_NATIVE_GRAPHICS_TRIGGER_SCREENBLUR_FADE_IN( float transitionTime )
	{
		auto retval = (bool)GRAPHICS::TRIGGER_SCREENBLUR_FADE_IN(transitionTime);
		return retval;
	}

	bool LUA_NATIVE_GRAPHICS_TRIGGER_SCREENBLUR_FADE_OUT( float transitionTime )
	{
		auto retval = (bool)GRAPHICS::TRIGGER_SCREENBLUR_FADE_OUT(transitionTime);
		return retval;
	}

	void LUA_NATIVE_GRAPHICS_DISABLE_SCREENBLUR_FADE(  )
	{
		GRAPHICS::DISABLE_SCREENBLUR_FADE();
	}

	float LUA_NATIVE_GRAPHICS_GET_SCREENBLUR_FADE_CURRENT_TIME(  )
	{
		auto retval = GRAPHICS::GET_SCREENBLUR_FADE_CURRENT_TIME();
		return retval;
	}

	bool LUA_NATIVE_GRAPHICS_IS_SCREENBLUR_FADE_RUNNING(  )
	{
		auto retval = (bool)GRAPHICS::IS_SCREENBLUR_FADE_RUNNING();
		return retval;
	}

	void LUA_NATIVE_GRAPHICS_TOGGLE_PAUSED_RENDERPHASES( bool toggle )
	{
		GRAPHICS::TOGGLE_PAUSED_RENDERPHASES(toggle);
	}

	bool LUA_NATIVE_GRAPHICS_GET_TOGGLE_PAUSED_RENDERPHASES_STATUS(  )
	{
		auto retval = (bool)GRAPHICS::GET_TOGGLE_PAUSED_RENDERPHASES_STATUS();
		return retval;
	}

	void LUA_NATIVE_GRAPHICS_RESET_PAUSED_RENDERPHASES(  )
	{
		GRAPHICS::RESET_PAUSED_RENDERPHASES();
	}

	void LUA_NATIVE_GRAPHICS_GRAB_PAUSEMENU_OWNERSHIP(  )
	{
		GRAPHICS::GRAB_PAUSEMENU_OWNERSHIP();
	}

	void LUA_NATIVE_GRAPHICS_SET_HIDOF_OVERRIDE( bool p0, bool p1, float nearplaneOut, float nearplaneIn, float farplaneOut, float farplaneIn )
	{
		GRAPHICS::SET_HIDOF_OVERRIDE(p0, p1, nearplaneOut, nearplaneIn, farplaneOut, farplaneIn);
	}

	void LUA_NATIVE_GRAPHICS_SET_LOCK_ADAPTIVE_DOF_DISTANCE( bool p0 )
	{
		GRAPHICS::SET_LOCK_ADAPTIVE_DOF_DISTANCE(p0);
	}

	bool LUA_NATIVE_GRAPHICS_PHONEPHOTOEDITOR_TOGGLE( bool p0 )
	{
		auto retval = (bool)GRAPHICS::PHONEPHOTOEDITOR_TOGGLE(p0);
		return retval;
	}

	bool LUA_NATIVE_GRAPHICS_PHONEPHOTOEDITOR_IS_ACTIVE(  )
	{
		auto retval = (bool)GRAPHICS::PHONEPHOTOEDITOR_IS_ACTIVE();
		return retval;
	}

	bool LUA_NATIVE_GRAPHICS_PHONEPHOTOEDITOR_SET_FRAME_TXD( const char* textureDict, bool p1 )
	{
		auto retval = (bool)GRAPHICS::PHONEPHOTOEDITOR_SET_FRAME_TXD(textureDict, p1);
		return retval;
	}

	bool LUA_NATIVE_GRAPHICS_START_PARTICLE_FX_NON_LOOPED_AT_COORD( const char* effectName, float xPos, float yPos, float zPos, float xRot, float yRot, float zRot, float scale, bool xAxis, bool yAxis, bool zAxis )
	{
		auto retval = (bool)GRAPHICS::START_PARTICLE_FX_NON_LOOPED_AT_COORD(effectName, xPos, yPos, zPos, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis);
		return retval;
	}

	bool LUA_NATIVE_GRAPHICS_START_NETWORKED_PARTICLE_FX_NON_LOOPED_AT_COORD( const char* effectName, float xPos, float yPos, float zPos, float xRot, float yRot, float zRot, float scale, bool xAxis, bool yAxis, bool zAxis, bool p11 )
	{
		auto retval = (bool)GRAPHICS::START_NETWORKED_PARTICLE_FX_NON_LOOPED_AT_COORD(effectName, xPos, yPos, zPos, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis, p11);
		return retval;
	}

	bool LUA_NATIVE_GRAPHICS_START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE( const char* effectName, Ped ped, float offsetX, float offsetY, float offsetZ, float rotX, float rotY, float rotZ, int boneIndex, float scale, bool axisX, bool axisY, bool axisZ )
	{
		auto retval = (bool)GRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE(effectName, ped, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, boneIndex, scale, axisX, axisY, axisZ);
		return retval;
	}

	bool LUA_NATIVE_GRAPHICS_START_NETWORKED_PARTICLE_FX_NON_LOOPED_ON_PED_BONE( const char* effectName, Ped ped, float offsetX, float offsetY, float offsetZ, float rotX, float rotY, float rotZ, int boneIndex, float scale, bool axisX, bool axisY, bool axisZ )
	{
		auto retval = (bool)GRAPHICS::START_NETWORKED_PARTICLE_FX_NON_LOOPED_ON_PED_BONE(effectName, ped, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, boneIndex, scale, axisX, axisY, axisZ);
		return retval;
	}

	bool LUA_NATIVE_GRAPHICS_START_PARTICLE_FX_NON_LOOPED_ON_ENTITY( const char* effectName, Entity entity, float offsetX, float offsetY, float offsetZ, float rotX, float rotY, float rotZ, float scale, bool axisX, bool axisY, bool axisZ )
	{
		auto retval = (bool)GRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_ENTITY(effectName, entity, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, scale, axisX, axisY, axisZ);
		return retval;
	}

	bool LUA_NATIVE_GRAPHICS_START_NETWORKED_PARTICLE_FX_NON_LOOPED_ON_ENTITY( const char* effectName, Entity entity, float offsetX, float offsetY, float offsetZ, float rotX, float rotY, float rotZ, float scale, bool axisX, bool axisY, bool axisZ )
	{
		auto retval = (bool)GRAPHICS::START_NETWORKED_PARTICLE_FX_NON_LOOPED_ON_ENTITY(effectName, entity, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, scale, axisX, axisY, axisZ);
		return retval;
	}

	bool LUA_NATIVE_GRAPHICS_START_PARTICLE_FX_NON_LOOPED_ON_ENTITY_BONE( const char* effectName, Entity entity, float offsetX, float offsetY, float offsetZ, float rotX, float rotY, float rotZ, int boneIndex, float scale, bool axisX, bool axisY, bool axisZ )
	{
		auto retval = (bool)GRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_ENTITY_BONE(effectName, entity, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, boneIndex, scale, axisX, axisY, axisZ);
		return retval;
	}

	void LUA_NATIVE_GRAPHICS_SET_PARTICLE_FX_NON_LOOPED_COLOUR( float r, float g, float b )
	{
		GRAPHICS::SET_PARTICLE_FX_NON_LOOPED_COLOUR(r, g, b);
	}

	void LUA_NATIVE_GRAPHICS_SET_PARTICLE_FX_NON_LOOPED_ALPHA( float alpha )
	{
		GRAPHICS::SET_PARTICLE_FX_NON_LOOPED_ALPHA(alpha);
	}

	void LUA_NATIVE_GRAPHICS_SET_PARTICLE_FX_NON_LOOPED_SCALE( float scale )
	{
		GRAPHICS::SET_PARTICLE_FX_NON_LOOPED_SCALE(scale);
	}

	void LUA_NATIVE_GRAPHICS_SET_PARTICLE_FX_NON_LOOPED_EMITTER_SIZE( float p0, float p1, float scale )
	{
		GRAPHICS::SET_PARTICLE_FX_NON_LOOPED_EMITTER_SIZE(p0, p1, scale);
	}

	void LUA_NATIVE_GRAPHICS_SET_PARTICLE_FX_FORCE_VEHICLE_INTERIOR( bool toggle )
	{
		GRAPHICS::SET_PARTICLE_FX_FORCE_VEHICLE_INTERIOR(toggle);
	}

	int LUA_NATIVE_GRAPHICS_START_PARTICLE_FX_LOOPED_AT_COORD( const char* effectName, float x, float y, float z, float xRot, float yRot, float zRot, float scale, bool xAxis, bool yAxis, bool zAxis, bool p11 )
	{
		auto retval = GRAPHICS::START_PARTICLE_FX_LOOPED_AT_COORD(effectName, x, y, z, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis, p11);
		return retval;
	}

	int LUA_NATIVE_GRAPHICS_START_PARTICLE_FX_LOOPED_ON_PED_BONE( const char* effectName, Ped ped, float xOffset, float yOffset, float zOffset, float xRot, float yRot, float zRot, int boneIndex, float scale, bool xAxis, bool yAxis, bool zAxis )
	{
		auto retval = GRAPHICS::START_PARTICLE_FX_LOOPED_ON_PED_BONE(effectName, ped, xOffset, yOffset, zOffset, xRot, yRot, zRot, boneIndex, scale, xAxis, yAxis, zAxis);
		return retval;
	}

	int LUA_NATIVE_GRAPHICS_START_PARTICLE_FX_LOOPED_ON_ENTITY( const char* effectName, Entity entity, float xOffset, float yOffset, float zOffset, float xRot, float yRot, float zRot, float scale, bool xAxis, bool yAxis, bool zAxis )
	{
		auto retval = GRAPHICS::START_PARTICLE_FX_LOOPED_ON_ENTITY(effectName, entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis);
		return retval;
	}

	int LUA_NATIVE_GRAPHICS_START_PARTICLE_FX_LOOPED_ON_ENTITY_BONE( const char* effectName, Entity entity, float xOffset, float yOffset, float zOffset, float xRot, float yRot, float zRot, int boneIndex, float scale, bool xAxis, bool yAxis, bool zAxis )
	{
		auto retval = GRAPHICS::START_PARTICLE_FX_LOOPED_ON_ENTITY_BONE(effectName, entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, boneIndex, scale, xAxis, yAxis, zAxis);
		return retval;
	}

	int LUA_NATIVE_GRAPHICS_START_NETWORKED_PARTICLE_FX_LOOPED_ON_ENTITY( const char* effectName, Entity entity, float xOffset, float yOffset, float zOffset, float xRot, float yRot, float zRot, float scale, bool xAxis, bool yAxis, bool zAxis, float r, float g, float b, float a )
	{
		auto retval = GRAPHICS::START_NETWORKED_PARTICLE_FX_LOOPED_ON_ENTITY(effectName, entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis, r, g, b, a);
		return retval;
	}

	int LUA_NATIVE_GRAPHICS_START_NETWORKED_PARTICLE_FX_LOOPED_ON_ENTITY_BONE( const char* effectName, Entity entity, float xOffset, float yOffset, float zOffset, float xRot, float yRot, float zRot, int boneIndex, float scale, bool xAxis, bool yAxis, bool zAxis, float r, float g, float b, float a )
	{
		auto retval = GRAPHICS::START_NETWORKED_PARTICLE_FX_LOOPED_ON_ENTITY_BONE(effectName, entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, boneIndex, scale, xAxis, yAxis, zAxis, r, g, b, a);
		return retval;
	}

	void LUA_NATIVE_GRAPHICS_STOP_PARTICLE_FX_LOOPED( int ptfxHandle, bool p1 )
	{
		GRAPHICS::STOP_PARTICLE_FX_LOOPED(ptfxHandle, p1);
	}

	void LUA_NATIVE_GRAPHICS_REMOVE_PARTICLE_FX( int ptfxHandle, bool p1 )
	{
		GRAPHICS::REMOVE_PARTICLE_FX(ptfxHandle, p1);
	}

	void LUA_NATIVE_GRAPHICS_REMOVE_PARTICLE_FX_FROM_ENTITY( Entity entity )
	{
		GRAPHICS::REMOVE_PARTICLE_FX_FROM_ENTITY(entity);
	}

	void LUA_NATIVE_GRAPHICS_REMOVE_PARTICLE_FX_IN_RANGE( float X, float Y, float Z, float radius )
	{
		GRAPHICS::REMOVE_PARTICLE_FX_IN_RANGE(X, Y, Z, radius);
	}

	void LUA_NATIVE_GRAPHICS_FORCE_PARTICLE_FX_IN_VEHICLE_INTERIOR( Any p0, Any p1 )
	{
		GRAPHICS::FORCE_PARTICLE_FX_IN_VEHICLE_INTERIOR(p0, p1);
	}

	bool LUA_NATIVE_GRAPHICS_DOES_PARTICLE_FX_LOOPED_EXIST( int ptfxHandle )
	{
		auto retval = (bool)GRAPHICS::DOES_PARTICLE_FX_LOOPED_EXIST(ptfxHandle);
		return retval;
	}

	void LUA_NATIVE_GRAPHICS_SET_PARTICLE_FX_LOOPED_OFFSETS( int ptfxHandle, float x, float y, float z, float rotX, float rotY, float rotZ )
	{
		GRAPHICS::SET_PARTICLE_FX_LOOPED_OFFSETS(ptfxHandle, x, y, z, rotX, rotY, rotZ);
	}

	void LUA_NATIVE_GRAPHICS_SET_PARTICLE_FX_LOOPED_EVOLUTION( int ptfxHandle, const char* propertyName, float amount, bool noNetwork )
	{
		GRAPHICS::SET_PARTICLE_FX_LOOPED_EVOLUTION(ptfxHandle, propertyName, amount, noNetwork);
	}

	void LUA_NATIVE_GRAPHICS_SET_PARTICLE_FX_LOOPED_COLOUR( int ptfxHandle, float r, float g, float b, bool p4 )
	{
		GRAPHICS::SET_PARTICLE_FX_LOOPED_COLOUR(ptfxHandle, r, g, b, p4);
	}

	void LUA_NATIVE_GRAPHICS_SET_PARTICLE_FX_LOOPED_ALPHA( int ptfxHandle, float alpha )
	{
		GRAPHICS::SET_PARTICLE_FX_LOOPED_ALPHA(ptfxHandle, alpha);
	}

	void LUA_NATIVE_GRAPHICS_SET_PARTICLE_FX_LOOPED_SCALE( int ptfxHandle, float scale )
	{
		GRAPHICS::SET_PARTICLE_FX_LOOPED_SCALE(ptfxHandle, scale);
	}

	void LUA_NATIVE_GRAPHICS_SET_PARTICLE_FX_LOOPED_FAR_CLIP_DIST( int ptfxHandle, float range )
	{
		GRAPHICS::SET_PARTICLE_FX_LOOPED_FAR_CLIP_DIST(ptfxHandle, range);
	}

	void LUA_NATIVE_GRAPHICS_SET_PARTICLE_FX_CAM_INSIDE_VEHICLE( bool p0 )
	{
		GRAPHICS::SET_PARTICLE_FX_CAM_INSIDE_VEHICLE(p0);
	}

	void LUA_NATIVE_GRAPHICS_SET_PARTICLE_FX_CAM_INSIDE_NONPLAYER_VEHICLE( Vehicle vehicle, bool p1 )
	{
		GRAPHICS::SET_PARTICLE_FX_CAM_INSIDE_NONPLAYER_VEHICLE(vehicle, p1);
	}

	void LUA_NATIVE_GRAPHICS_SET_PARTICLE_FX_SHOOTOUT_BOAT( Any p0 )
	{
		GRAPHICS::SET_PARTICLE_FX_SHOOTOUT_BOAT(p0);
	}

	void LUA_NATIVE_GRAPHICS_CLEAR_PARTICLE_FX_SHOOTOUT_BOAT(  )
	{
		GRAPHICS::CLEAR_PARTICLE_FX_SHOOTOUT_BOAT();
	}

	void LUA_NATIVE_GRAPHICS_SET_PARTICLE_FX_BLOOD_SCALE( Any p0 )
	{
		GRAPHICS::SET_PARTICLE_FX_BLOOD_SCALE(p0);
	}

	void LUA_NATIVE_GRAPHICS_DISABLE_IN_WATER_PTFX( bool toggle )
	{
		GRAPHICS::DISABLE_IN_WATER_PTFX(toggle);
	}

	void LUA_NATIVE_GRAPHICS_DISABLE_DOWNWASH_PTFX( bool toggle )
	{
		GRAPHICS::DISABLE_DOWNWASH_PTFX(toggle);
	}

	void LUA_NATIVE_GRAPHICS_SET_PARTICLE_FX_SLIPSTREAM_LODRANGE_SCALE( float scale )
	{
		GRAPHICS::SET_PARTICLE_FX_SLIPSTREAM_LODRANGE_SCALE(scale);
	}

	void LUA_NATIVE_GRAPHICS_ENABLE_CLOWN_BLOOD_VFX( bool toggle )
	{
		GRAPHICS::ENABLE_CLOWN_BLOOD_VFX(toggle);
	}

	void LUA_NATIVE_GRAPHICS_ENABLE_ALIEN_BLOOD_VFX( bool toggle )
	{
		GRAPHICS::ENABLE_ALIEN_BLOOD_VFX(toggle);
	}

	void LUA_NATIVE_GRAPHICS_SET_PARTICLE_FX_BULLET_IMPACT_SCALE( float scale )
	{
		GRAPHICS::SET_PARTICLE_FX_BULLET_IMPACT_SCALE(scale);
	}

	void LUA_NATIVE_GRAPHICS_SET_PARTICLE_FX_BULLET_IMPACT_LODRANGE_SCALE( float p0 )
	{
		GRAPHICS::SET_PARTICLE_FX_BULLET_IMPACT_LODRANGE_SCALE(p0);
	}

	void LUA_NATIVE_GRAPHICS_SET_PARTICLE_FX_BULLET_TRACE_NO_ANGLE_REJECT( bool p0 )
	{
		GRAPHICS::SET_PARTICLE_FX_BULLET_TRACE_NO_ANGLE_REJECT(p0);
	}

	void LUA_NATIVE_GRAPHICS_SET_PARTICLE_FX_BANG_SCRAPE_LODRANGE_SCALE( float p0 )
	{
		GRAPHICS::SET_PARTICLE_FX_BANG_SCRAPE_LODRANGE_SCALE(p0);
	}

	void LUA_NATIVE_GRAPHICS_SET_PARTICLE_FX_FOOT_LODRANGE_SCALE( float p0 )
	{
		GRAPHICS::SET_PARTICLE_FX_FOOT_LODRANGE_SCALE(p0);
	}

	void LUA_NATIVE_GRAPHICS_SET_PARTICLE_FX_FOOT_OVERRIDE_NAME( const char* p0 )
	{
		GRAPHICS::SET_PARTICLE_FX_FOOT_OVERRIDE_NAME(p0);
	}

	void LUA_NATIVE_GRAPHICS_SET_SKIDMARK_RANGE_SCALE( float scale )
	{
		GRAPHICS::SET_SKIDMARK_RANGE_SCALE(scale);
	}

	void LUA_NATIVE_GRAPHICS_SET_PTFX_FORCE_VEHICLE_INTERIOR_FLAG( Any p0 )
	{
		GRAPHICS::SET_PTFX_FORCE_VEHICLE_INTERIOR_FLAG(p0);
	}

	void LUA_NATIVE_GRAPHICS_REGISTER_POSTFX_BULLET_IMPACT( float weaponWorldPosX, float weaponWorldPosY, float weaponWorldPosZ, float intensity )
	{
		GRAPHICS::REGISTER_POSTFX_BULLET_IMPACT(weaponWorldPosX, weaponWorldPosY, weaponWorldPosZ, intensity);
	}

	void LUA_NATIVE_GRAPHICS_FORCE_POSTFX_BULLET_IMPACTS_AFTER_HUD( bool p0 )
	{
		GRAPHICS::FORCE_POSTFX_BULLET_IMPACTS_AFTER_HUD(p0);
	}

	void LUA_NATIVE_GRAPHICS_USE_PARTICLE_FX_ASSET( const char* name )
	{
		GRAPHICS::USE_PARTICLE_FX_ASSET(name);
	}

	void LUA_NATIVE_GRAPHICS_SET_PARTICLE_FX_OVERRIDE( const char* oldAsset, const char* newAsset )
	{
		GRAPHICS::SET_PARTICLE_FX_OVERRIDE(oldAsset, newAsset);
	}

	void LUA_NATIVE_GRAPHICS_RESET_PARTICLE_FX_OVERRIDE( const char* name )
	{
		GRAPHICS::RESET_PARTICLE_FX_OVERRIDE(name);
	}

	void LUA_NATIVE_GRAPHICS_SET_WEATHER_PTFX_USE_OVERRIDE_SETTINGS( bool p0 )
	{
		GRAPHICS::SET_WEATHER_PTFX_USE_OVERRIDE_SETTINGS(p0);
	}

	void LUA_NATIVE_GRAPHICS_SET_WEATHER_PTFX_OVERRIDE_CURR_LEVEL( float p0 )
	{
		GRAPHICS::SET_WEATHER_PTFX_OVERRIDE_CURR_LEVEL(p0);
	}

	void LUA_NATIVE_GRAPHICS_WASH_DECALS_IN_RANGE( float x, float y, float z, float range, float p4 )
	{
		GRAPHICS::WASH_DECALS_IN_RANGE(x, y, z, range, p4);
	}

	void LUA_NATIVE_GRAPHICS_WASH_DECALS_FROM_VEHICLE( Vehicle vehicle, float p1 )
	{
		GRAPHICS::WASH_DECALS_FROM_VEHICLE(vehicle, p1);
	}

	void LUA_NATIVE_GRAPHICS_FADE_DECALS_IN_RANGE( float x, float y, float z, float p3, float p4 )
	{
		GRAPHICS::FADE_DECALS_IN_RANGE(x, y, z, p3, p4);
	}

	void LUA_NATIVE_GRAPHICS_REMOVE_DECALS_IN_RANGE( float x, float y, float z, float range )
	{
		GRAPHICS::REMOVE_DECALS_IN_RANGE(x, y, z, range);
	}

	void LUA_NATIVE_GRAPHICS_REMOVE_DECALS_FROM_OBJECT( Object obj )
	{
		GRAPHICS::REMOVE_DECALS_FROM_OBJECT(obj);
	}

	void LUA_NATIVE_GRAPHICS_REMOVE_DECALS_FROM_OBJECT_FACING( Object obj, float x, float y, float z )
	{
		GRAPHICS::REMOVE_DECALS_FROM_OBJECT_FACING(obj, x, y, z);
	}

	void LUA_NATIVE_GRAPHICS_REMOVE_DECALS_FROM_VEHICLE( Vehicle vehicle )
	{
		GRAPHICS::REMOVE_DECALS_FROM_VEHICLE(vehicle);
	}

	int LUA_NATIVE_GRAPHICS_ADD_DECAL( int decalType, float posX, float posY, float posZ, float p4, float p5, float p6, float p7, float p8, float p9, float width, float height, float rCoef, float gCoef, float bCoef, float opacity, float timeout, bool p17, bool p18, bool p19 )
	{
		auto retval = GRAPHICS::ADD_DECAL(decalType, posX, posY, posZ, p4, p5, p6, p7, p8, p9, width, height, rCoef, gCoef, bCoef, opacity, timeout, p17, p18, p19);
		return retval;
	}

	int LUA_NATIVE_GRAPHICS_ADD_PETROL_DECAL( float x, float y, float z, float groundLvl, float width, float transparency )
	{
		auto retval = GRAPHICS::ADD_PETROL_DECAL(x, y, z, groundLvl, width, transparency);
		return retval;
	}

	int LUA_NATIVE_GRAPHICS_ADD_OIL_DECAL( float x, float y, float z, float groundLvl, float width, float transparency )
	{
		auto retval = GRAPHICS::ADD_OIL_DECAL(x, y, z, groundLvl, width, transparency);
		return retval;
	}

	void LUA_NATIVE_GRAPHICS_START_PETROL_TRAIL_DECALS( float p0 )
	{
		GRAPHICS::START_PETROL_TRAIL_DECALS(p0);
	}

	void LUA_NATIVE_GRAPHICS_ADD_PETROL_TRAIL_DECAL_INFO( float x, float y, float z, float p3 )
	{
		GRAPHICS::ADD_PETROL_TRAIL_DECAL_INFO(x, y, z, p3);
	}

	void LUA_NATIVE_GRAPHICS_END_PETROL_TRAIL_DECALS(  )
	{
		GRAPHICS::END_PETROL_TRAIL_DECALS();
	}

	void LUA_NATIVE_GRAPHICS_REMOVE_DECAL( int decal )
	{
		GRAPHICS::REMOVE_DECAL(decal);
	}

	bool LUA_NATIVE_GRAPHICS_IS_DECAL_ALIVE( int decal )
	{
		auto retval = (bool)GRAPHICS::IS_DECAL_ALIVE(decal);
		return retval;
	}

	float LUA_NATIVE_GRAPHICS_GET_DECAL_WASH_LEVEL( int decal )
	{
		auto retval = GRAPHICS::GET_DECAL_WASH_LEVEL(decal);
		return retval;
	}

	void LUA_NATIVE_GRAPHICS_SET_DISABLE_PETROL_DECALS_IGNITING_THIS_FRAME(  )
	{
		GRAPHICS::SET_DISABLE_PETROL_DECALS_IGNITING_THIS_FRAME();
	}

	void LUA_NATIVE_GRAPHICS_SET_DISABLE_PETROL_DECALS_RECYCLING_THIS_FRAME(  )
	{
		GRAPHICS::SET_DISABLE_PETROL_DECALS_RECYCLING_THIS_FRAME();
	}

	void LUA_NATIVE_GRAPHICS_SET_DISABLE_DECAL_RENDERING_THIS_FRAME(  )
	{
		GRAPHICS::SET_DISABLE_DECAL_RENDERING_THIS_FRAME();
	}

	bool LUA_NATIVE_GRAPHICS_GET_IS_PETROL_DECAL_IN_RANGE( float xCoord, float yCoord, float zCoord, float radius )
	{
		auto retval = (bool)GRAPHICS::GET_IS_PETROL_DECAL_IN_RANGE(xCoord, yCoord, zCoord, radius);
		return retval;
	}

	void LUA_NATIVE_GRAPHICS_PATCH_DECAL_DIFFUSE_MAP( int decalType, const char* textureDict, const char* textureName )
	{
		GRAPHICS::PATCH_DECAL_DIFFUSE_MAP(decalType, textureDict, textureName);
	}

	void LUA_NATIVE_GRAPHICS_UNPATCH_DECAL_DIFFUSE_MAP( int decalType )
	{
		GRAPHICS::UNPATCH_DECAL_DIFFUSE_MAP(decalType);
	}

	void LUA_NATIVE_GRAPHICS_MOVE_VEHICLE_DECALS( Any p0, Any p1 )
	{
		GRAPHICS::MOVE_VEHICLE_DECALS(p0, p1);
	}

	bool LUA_NATIVE_GRAPHICS_ADD_VEHICLE_CREW_EMBLEM( Vehicle vehicle, Ped ped, int boneIndex, float x1, float x2, float x3, float y1, float y2, float y3, float z1, float z2, float z3, float scale, Any p13, int alpha )
	{
		auto retval = (bool)GRAPHICS::ADD_VEHICLE_CREW_EMBLEM(vehicle, ped, boneIndex, x1, x2, x3, y1, y2, y3, z1, z2, z3, scale, p13, alpha);
		return retval;
	}

	std::tuple<bool, int> LUA_NATIVE_GRAPHICS_ABORT_VEHICLE_CREW_EMBLEM_REQUEST( int p0 )
	{
		std::tuple<bool, int> return_values;
		std::get<0>(return_values) = (bool)GRAPHICS::ABORT_VEHICLE_CREW_EMBLEM_REQUEST(&p0);
		std::get<1>(return_values) = p0;

		return return_values;
	}

	void LUA_NATIVE_GRAPHICS_REMOVE_VEHICLE_CREW_EMBLEM( Vehicle vehicle, int p1 )
	{
		GRAPHICS::REMOVE_VEHICLE_CREW_EMBLEM(vehicle, p1);
	}

	int LUA_NATIVE_GRAPHICS_GET_VEHICLE_CREW_EMBLEM_REQUEST_STATE( Vehicle vehicle, int p1 )
	{
		auto retval = GRAPHICS::GET_VEHICLE_CREW_EMBLEM_REQUEST_STATE(vehicle, p1);
		return retval;
	}

	bool LUA_NATIVE_GRAPHICS_DOES_VEHICLE_HAVE_CREW_EMBLEM( Vehicle vehicle, int p1 )
	{
		auto retval = (bool)GRAPHICS::DOES_VEHICLE_HAVE_CREW_EMBLEM(vehicle, p1);
		return retval;
	}

	void LUA_NATIVE_GRAPHICS_DISABLE_COMPOSITE_SHOTGUN_DECALS( bool toggle )
	{
		GRAPHICS::DISABLE_COMPOSITE_SHOTGUN_DECALS(toggle);
	}

	void LUA_NATIVE_GRAPHICS_DISABLE_SCUFF_DECALS( bool toggle )
	{
		GRAPHICS::DISABLE_SCUFF_DECALS(toggle);
	}

	void LUA_NATIVE_GRAPHICS_SET_DECAL_BULLET_IMPACT_RANGE_SCALE( float p0 )
	{
		GRAPHICS::SET_DECAL_BULLET_IMPACT_RANGE_SCALE(p0);
	}

	void LUA_NATIVE_GRAPHICS_OVERRIDE_INTERIOR_SMOKE_NAME( const char* name )
	{
		GRAPHICS::OVERRIDE_INTERIOR_SMOKE_NAME(name);
	}

	void LUA_NATIVE_GRAPHICS_OVERRIDE_INTERIOR_SMOKE_LEVEL( float level )
	{
		GRAPHICS::OVERRIDE_INTERIOR_SMOKE_LEVEL(level);
	}

	void LUA_NATIVE_GRAPHICS_OVERRIDE_INTERIOR_SMOKE_END(  )
	{
		GRAPHICS::OVERRIDE_INTERIOR_SMOKE_END();
	}

	void LUA_NATIVE_GRAPHICS_REGISTER_NOIR_LENS_EFFECT(  )
	{
		GRAPHICS::REGISTER_NOIR_LENS_EFFECT();
	}

	void LUA_NATIVE_GRAPHICS_DISABLE_VEHICLE_DISTANTLIGHTS( bool toggle )
	{
		GRAPHICS::DISABLE_VEHICLE_DISTANTLIGHTS(toggle);
	}

	void LUA_NATIVE_GRAPHICS_RENDER_SHADOWED_LIGHTS_WITH_NO_SHADOWS( bool p0 )
	{
		GRAPHICS::RENDER_SHADOWED_LIGHTS_WITH_NO_SHADOWS(p0);
	}

	void LUA_NATIVE_GRAPHICS_REQUEST_EARLY_LIGHT_CHECK(  )
	{
		GRAPHICS::REQUEST_EARLY_LIGHT_CHECK();
	}

	void LUA_NATIVE_GRAPHICS_USE_SNOW_FOOT_VFX_WHEN_UNSHELTERED( bool toggle )
	{
		GRAPHICS::USE_SNOW_FOOT_VFX_WHEN_UNSHELTERED(toggle);
	}

	void LUA_NATIVE_GRAPHICS_USE_SNOW_WHEEL_VFX_WHEN_UNSHELTERED( bool toggle )
	{
		GRAPHICS::USE_SNOW_WHEEL_VFX_WHEN_UNSHELTERED(toggle);
	}

	void LUA_NATIVE_GRAPHICS_DISABLE_REGION_VFX( Any p0 )
	{
		GRAPHICS::DISABLE_REGION_VFX(p0);
	}

	void LUA_NATIVE_GRAPHICS_PRESET_INTERIOR_AMBIENT_CACHE( const char* timecycleModifierName )
	{
		GRAPHICS::PRESET_INTERIOR_AMBIENT_CACHE(timecycleModifierName);
	}

	void LUA_NATIVE_GRAPHICS_SET_TIMECYCLE_MODIFIER( const char* modifierName )
	{
		GRAPHICS::SET_TIMECYCLE_MODIFIER(modifierName);
	}

	void LUA_NATIVE_GRAPHICS_SET_TIMECYCLE_MODIFIER_STRENGTH( float strength )
	{
		GRAPHICS::SET_TIMECYCLE_MODIFIER_STRENGTH(strength);
	}

	void LUA_NATIVE_GRAPHICS_SET_TRANSITION_TIMECYCLE_MODIFIER( const char* modifierName, float transition )
	{
		GRAPHICS::SET_TRANSITION_TIMECYCLE_MODIFIER(modifierName, transition);
	}

	void LUA_NATIVE_GRAPHICS_SET_TRANSITION_OUT_OF_TIMECYCLE_MODIFIER( float strength )
	{
		GRAPHICS::SET_TRANSITION_OUT_OF_TIMECYCLE_MODIFIER(strength);
	}

	void LUA_NATIVE_GRAPHICS_CLEAR_TIMECYCLE_MODIFIER(  )
	{
		GRAPHICS::CLEAR_TIMECYCLE_MODIFIER();
	}

	int LUA_NATIVE_GRAPHICS_GET_TIMECYCLE_MODIFIER_INDEX(  )
	{
		auto retval = GRAPHICS::GET_TIMECYCLE_MODIFIER_INDEX();
		return retval;
	}

	int LUA_NATIVE_GRAPHICS_GET_TIMECYCLE_TRANSITION_MODIFIER_INDEX(  )
	{
		auto retval = GRAPHICS::GET_TIMECYCLE_TRANSITION_MODIFIER_INDEX();
		return retval;
	}

	bool LUA_NATIVE_GRAPHICS_GET_IS_TIMECYCLE_TRANSITIONING_OUT(  )
	{
		auto retval = (bool)GRAPHICS::GET_IS_TIMECYCLE_TRANSITIONING_OUT();
		return retval;
	}

	void LUA_NATIVE_GRAPHICS_PUSH_TIMECYCLE_MODIFIER(  )
	{
		GRAPHICS::PUSH_TIMECYCLE_MODIFIER();
	}

	void LUA_NATIVE_GRAPHICS_POP_TIMECYCLE_MODIFIER(  )
	{
		GRAPHICS::POP_TIMECYCLE_MODIFIER();
	}

	void LUA_NATIVE_GRAPHICS_SET_CURRENT_PLAYER_TCMODIFIER( const char* modifierName )
	{
		GRAPHICS::SET_CURRENT_PLAYER_TCMODIFIER(modifierName);
	}

	void LUA_NATIVE_GRAPHICS_SET_PLAYER_TCMODIFIER_TRANSITION( float value )
	{
		GRAPHICS::SET_PLAYER_TCMODIFIER_TRANSITION(value);
	}

	void LUA_NATIVE_GRAPHICS_SET_NEXT_PLAYER_TCMODIFIER( const char* modifierName )
	{
		GRAPHICS::SET_NEXT_PLAYER_TCMODIFIER(modifierName);
	}

	void LUA_NATIVE_GRAPHICS_ADD_TCMODIFIER_OVERRIDE( const char* modifierName1, const char* modifierName2 )
	{
		GRAPHICS::ADD_TCMODIFIER_OVERRIDE(modifierName1, modifierName2);
	}

	void LUA_NATIVE_GRAPHICS_CLEAR_ALL_TCMODIFIER_OVERRIDES( const char* p0 )
	{
		GRAPHICS::CLEAR_ALL_TCMODIFIER_OVERRIDES(p0);
	}

	void LUA_NATIVE_GRAPHICS_SET_EXTRA_TCMODIFIER( const char* modifierName )
	{
		GRAPHICS::SET_EXTRA_TCMODIFIER(modifierName);
	}

	void LUA_NATIVE_GRAPHICS_CLEAR_EXTRA_TCMODIFIER(  )
	{
		GRAPHICS::CLEAR_EXTRA_TCMODIFIER();
	}

	int LUA_NATIVE_GRAPHICS_GET_EXTRA_TCMODIFIER(  )
	{
		auto retval = GRAPHICS::GET_EXTRA_TCMODIFIER();
		return retval;
	}

	void LUA_NATIVE_GRAPHICS_ENABLE_MOON_CYCLE_OVERRIDE( float strength )
	{
		GRAPHICS::ENABLE_MOON_CYCLE_OVERRIDE(strength);
	}

	void LUA_NATIVE_GRAPHICS_DISABLE_MOON_CYCLE_OVERRIDE(  )
	{
		GRAPHICS::DISABLE_MOON_CYCLE_OVERRIDE();
	}

	int LUA_NATIVE_GRAPHICS_REQUEST_SCALEFORM_MOVIE( const char* scaleformName )
	{
		auto retval = GRAPHICS::REQUEST_SCALEFORM_MOVIE(scaleformName);
		return retval;
	}

	int LUA_NATIVE_GRAPHICS_REQUEST_SCALEFORM_MOVIE_WITH_IGNORE_SUPER_WIDESCREEN( const char* scaleformName )
	{
		auto retval = GRAPHICS::REQUEST_SCALEFORM_MOVIE_WITH_IGNORE_SUPER_WIDESCREEN(scaleformName);
		return retval;
	}

	int LUA_NATIVE_GRAPHICS_REQUEST_SCALEFORM_MOVIE_INSTANCE( const char* scaleformName )
	{
		auto retval = GRAPHICS::REQUEST_SCALEFORM_MOVIE_INSTANCE(scaleformName);
		return retval;
	}

	int LUA_NATIVE_GRAPHICS_REQUEST_SCALEFORM_MOVIE_SKIP_RENDER_WHILE_PAUSED( const char* scaleformName )
	{
		auto retval = GRAPHICS::REQUEST_SCALEFORM_MOVIE_SKIP_RENDER_WHILE_PAUSED(scaleformName);
		return retval;
	}

	bool LUA_NATIVE_GRAPHICS_HAS_SCALEFORM_MOVIE_LOADED( int scaleformHandle )
	{
		auto retval = (bool)GRAPHICS::HAS_SCALEFORM_MOVIE_LOADED(scaleformHandle);
		return retval;
	}

	bool LUA_NATIVE_GRAPHICS_IS_ACTIVE_SCALEFORM_MOVIE_DELETING( int val )
	{
		auto retval = (bool)GRAPHICS::IS_ACTIVE_SCALEFORM_MOVIE_DELETING(val);
		return retval;
	}

	bool LUA_NATIVE_GRAPHICS_IS_SCALEFORM_MOVIE_DELETING( int val )
	{
		auto retval = (bool)GRAPHICS::IS_SCALEFORM_MOVIE_DELETING(val);
		return retval;
	}

	bool LUA_NATIVE_GRAPHICS_HAS_SCALEFORM_MOVIE_FILENAME_LOADED( const char* scaleformName )
	{
		auto retval = (bool)GRAPHICS::HAS_SCALEFORM_MOVIE_FILENAME_LOADED(scaleformName);
		return retval;
	}

	bool LUA_NATIVE_GRAPHICS_HAS_SCALEFORM_CONTAINER_MOVIE_LOADED_INTO_PARENT( int scaleformHandle )
	{
		auto retval = (bool)GRAPHICS::HAS_SCALEFORM_CONTAINER_MOVIE_LOADED_INTO_PARENT(scaleformHandle);
		return retval;
	}

	int LUA_NATIVE_GRAPHICS_SET_SCALEFORM_MOVIE_AS_NO_LONGER_NEEDED( int scaleformHandle )
	{
		GRAPHICS::SET_SCALEFORM_MOVIE_AS_NO_LONGER_NEEDED(&scaleformHandle);
		return scaleformHandle;
	}

	void LUA_NATIVE_GRAPHICS_SET_SCALEFORM_MOVIE_TO_USE_SYSTEM_TIME( int scaleform, bool toggle )
	{
		GRAPHICS::SET_SCALEFORM_MOVIE_TO_USE_SYSTEM_TIME(scaleform, toggle);
	}

	void LUA_NATIVE_GRAPHICS_SET_SCALEFORM_MOVIE_TO_USE_LARGE_RT( int scaleformHandle, bool toggle )
	{
		GRAPHICS::SET_SCALEFORM_MOVIE_TO_USE_LARGE_RT(scaleformHandle, toggle);
	}

	void LUA_NATIVE_GRAPHICS_SET_SCALEFORM_MOVIE_TO_USE_SUPER_LARGE_RT( int scaleformHandle, bool toggle )
	{
		GRAPHICS::SET_SCALEFORM_MOVIE_TO_USE_SUPER_LARGE_RT(scaleformHandle, toggle);
	}

	void LUA_NATIVE_GRAPHICS_DRAW_SCALEFORM_MOVIE( int scaleformHandle, float x, float y, float width, float height, int red, int green, int blue, int alpha, int p9 )
	{
		GRAPHICS::DRAW_SCALEFORM_MOVIE(scaleformHandle, x, y, width, height, red, green, blue, alpha, p9);
	}

	void LUA_NATIVE_GRAPHICS_DRAW_SCALEFORM_MOVIE_FULLSCREEN( int scaleform, int red, int green, int blue, int alpha, int p5 )
	{
		GRAPHICS::DRAW_SCALEFORM_MOVIE_FULLSCREEN(scaleform, red, green, blue, alpha, p5);
	}

	void LUA_NATIVE_GRAPHICS_DRAW_SCALEFORM_MOVIE_FULLSCREEN_MASKED( int scaleform1, int scaleform2, int red, int green, int blue, int alpha )
	{
		GRAPHICS::DRAW_SCALEFORM_MOVIE_FULLSCREEN_MASKED(scaleform1, scaleform2, red, green, blue, alpha);
	}

	void LUA_NATIVE_GRAPHICS_DRAW_SCALEFORM_MOVIE_3D( int scaleform, float posX, float posY, float posZ, float rotX, float rotY, float rotZ, float p7, float p8, float p9, float scaleX, float scaleY, float scaleZ, int rotationOrder )
	{
		GRAPHICS::DRAW_SCALEFORM_MOVIE_3D(scaleform, posX, posY, posZ, rotX, rotY, rotZ, p7, p8, p9, scaleX, scaleY, scaleZ, rotationOrder);
	}

	void LUA_NATIVE_GRAPHICS_DRAW_SCALEFORM_MOVIE_3D_SOLID( int scaleform, float posX, float posY, float posZ, float rotX, float rotY, float rotZ, float p7, float p8, float p9, float scaleX, float scaleY, float scaleZ, int rotationOrder )
	{
		GRAPHICS::DRAW_SCALEFORM_MOVIE_3D_SOLID(scaleform, posX, posY, posZ, rotX, rotY, rotZ, p7, p8, p9, scaleX, scaleY, scaleZ, rotationOrder);
	}

	void LUA_NATIVE_GRAPHICS_CALL_SCALEFORM_MOVIE_METHOD( int scaleform, const char* method )
	{
		GRAPHICS::CALL_SCALEFORM_MOVIE_METHOD(scaleform, method);
	}

	void LUA_NATIVE_GRAPHICS_CALL_SCALEFORM_MOVIE_METHOD_WITH_NUMBER( int scaleform, const char* methodName, float param1, float param2, float param3, float param4, float param5 )
	{
		GRAPHICS::CALL_SCALEFORM_MOVIE_METHOD_WITH_NUMBER(scaleform, methodName, param1, param2, param3, param4, param5);
	}

	void LUA_NATIVE_GRAPHICS_CALL_SCALEFORM_MOVIE_METHOD_WITH_STRING( int scaleform, const char* methodName, const char* param1, const char* param2, const char* param3, const char* param4, const char* param5 )
	{
		GRAPHICS::CALL_SCALEFORM_MOVIE_METHOD_WITH_STRING(scaleform, methodName, param1, param2, param3, param4, param5);
	}

	void LUA_NATIVE_GRAPHICS_CALL_SCALEFORM_MOVIE_METHOD_WITH_NUMBER_AND_STRING( int scaleform, const char* methodName, float floatParam1, float floatParam2, float floatParam3, float floatParam4, float floatParam5, const char* stringParam1, const char* stringParam2, const char* stringParam3, const char* stringParam4, const char* stringParam5 )
	{
		GRAPHICS::CALL_SCALEFORM_MOVIE_METHOD_WITH_NUMBER_AND_STRING(scaleform, methodName, floatParam1, floatParam2, floatParam3, floatParam4, floatParam5, stringParam1, stringParam2, stringParam3, stringParam4, stringParam5);
	}

	bool LUA_NATIVE_GRAPHICS_BEGIN_SCALEFORM_SCRIPT_HUD_MOVIE_METHOD( int hudComponent, const char* methodName )
	{
		auto retval = (bool)GRAPHICS::BEGIN_SCALEFORM_SCRIPT_HUD_MOVIE_METHOD(hudComponent, methodName);
		return retval;
	}

	bool LUA_NATIVE_GRAPHICS_BEGIN_SCALEFORM_MOVIE_METHOD( int scaleform, const char* methodName )
	{
		auto retval = (bool)GRAPHICS::BEGIN_SCALEFORM_MOVIE_METHOD(scaleform, methodName);
		return retval;
	}

	bool LUA_NATIVE_GRAPHICS_BEGIN_SCALEFORM_MOVIE_METHOD_ON_FRONTEND( const char* methodName )
	{
		auto retval = (bool)GRAPHICS::BEGIN_SCALEFORM_MOVIE_METHOD_ON_FRONTEND(methodName);
		return retval;
	}

	bool LUA_NATIVE_GRAPHICS_BEGIN_SCALEFORM_MOVIE_METHOD_ON_FRONTEND_HEADER( const char* methodName )
	{
		auto retval = (bool)GRAPHICS::BEGIN_SCALEFORM_MOVIE_METHOD_ON_FRONTEND_HEADER(methodName);
		return retval;
	}

	void LUA_NATIVE_GRAPHICS_END_SCALEFORM_MOVIE_METHOD(  )
	{
		GRAPHICS::END_SCALEFORM_MOVIE_METHOD();
	}

	int LUA_NATIVE_GRAPHICS_END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE(  )
	{
		auto retval = GRAPHICS::END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE();
		return retval;
	}

	bool LUA_NATIVE_GRAPHICS_IS_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_READY( int methodReturn )
	{
		auto retval = (bool)GRAPHICS::IS_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_READY(methodReturn);
		return retval;
	}

	int LUA_NATIVE_GRAPHICS_GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT( int methodReturn )
	{
		auto retval = GRAPHICS::GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT(methodReturn);
		return retval;
	}

	bool LUA_NATIVE_GRAPHICS_GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_BOOL( int methodReturn )
	{
		auto retval = (bool)GRAPHICS::GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_BOOL(methodReturn);
		return retval;
	}

	const char* LUA_NATIVE_GRAPHICS_GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_STRING( int methodReturn )
	{
		auto retval = GRAPHICS::GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_STRING(methodReturn);
		return retval;
	}

	void LUA_NATIVE_GRAPHICS_SCALEFORM_MOVIE_METHOD_ADD_PARAM_INT( int value )
	{
		GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_INT(value);
	}

	void LUA_NATIVE_GRAPHICS_SCALEFORM_MOVIE_METHOD_ADD_PARAM_FLOAT( float value )
	{
		GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_FLOAT(value);
	}

	void LUA_NATIVE_GRAPHICS_SCALEFORM_MOVIE_METHOD_ADD_PARAM_BOOL( bool value )
	{
		GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_BOOL(value);
	}

	void LUA_NATIVE_GRAPHICS_BEGIN_TEXT_COMMAND_SCALEFORM_STRING( const char* componentType )
	{
		GRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING(componentType);
	}

	void LUA_NATIVE_GRAPHICS_END_TEXT_COMMAND_SCALEFORM_STRING(  )
	{
		GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING();
	}

	void LUA_NATIVE_GRAPHICS_END_TEXT_COMMAND_UNPARSED_SCALEFORM_STRING(  )
	{
		GRAPHICS::END_TEXT_COMMAND_UNPARSED_SCALEFORM_STRING();
	}

	void LUA_NATIVE_GRAPHICS_SCALEFORM_MOVIE_METHOD_ADD_PARAM_LITERAL_STRING( const char* string )
	{
		GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_LITERAL_STRING(string);
	}

	void LUA_NATIVE_GRAPHICS_SCALEFORM_MOVIE_METHOD_ADD_PARAM_TEXTURE_NAME_STRING( const char* string )
	{
		GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_TEXTURE_NAME_STRING(string);
	}

	void LUA_NATIVE_GRAPHICS_SCALEFORM_MOVIE_METHOD_ADD_PARAM_PLAYER_NAME_STRING( const char* string )
	{
		GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_PLAYER_NAME_STRING(string);
	}

	bool LUA_NATIVE_GRAPHICS_DOES_LATEST_BRIEF_STRING_EXIST( int p0 )
	{
		auto retval = (bool)GRAPHICS::DOES_LATEST_BRIEF_STRING_EXIST(p0);
		return retval;
	}

	void LUA_NATIVE_GRAPHICS_SCALEFORM_MOVIE_METHOD_ADD_PARAM_LATEST_BRIEF_STRING( int value )
	{
		GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_LATEST_BRIEF_STRING(value);
	}

	void LUA_NATIVE_GRAPHICS_REQUEST_SCALEFORM_SCRIPT_HUD_MOVIE( int hudComponent )
	{
		GRAPHICS::REQUEST_SCALEFORM_SCRIPT_HUD_MOVIE(hudComponent);
	}

	bool LUA_NATIVE_GRAPHICS_HAS_SCALEFORM_SCRIPT_HUD_MOVIE_LOADED( int hudComponent )
	{
		auto retval = (bool)GRAPHICS::HAS_SCALEFORM_SCRIPT_HUD_MOVIE_LOADED(hudComponent);
		return retval;
	}

	void LUA_NATIVE_GRAPHICS_REMOVE_SCALEFORM_SCRIPT_HUD_MOVIE( int hudComponent )
	{
		GRAPHICS::REMOVE_SCALEFORM_SCRIPT_HUD_MOVIE(hudComponent);
	}

	bool LUA_NATIVE_GRAPHICS_PASS_KEYBOARD_INPUT_TO_SCALEFORM( int scaleformHandle )
	{
		auto retval = (bool)GRAPHICS::PASS_KEYBOARD_INPUT_TO_SCALEFORM(scaleformHandle);
		return retval;
	}

	void LUA_NATIVE_GRAPHICS_SET_TV_CHANNEL( int channel )
	{
		GRAPHICS::SET_TV_CHANNEL(channel);
	}

	int LUA_NATIVE_GRAPHICS_GET_TV_CHANNEL(  )
	{
		auto retval = GRAPHICS::GET_TV_CHANNEL();
		return retval;
	}

	void LUA_NATIVE_GRAPHICS_SET_TV_VOLUME( float volume )
	{
		GRAPHICS::SET_TV_VOLUME(volume);
	}

	float LUA_NATIVE_GRAPHICS_GET_TV_VOLUME(  )
	{
		auto retval = GRAPHICS::GET_TV_VOLUME();
		return retval;
	}

	void LUA_NATIVE_GRAPHICS_DRAW_TV_CHANNEL( float xPos, float yPos, float xScale, float yScale, float rotation, int red, int green, int blue, int alpha )
	{
		GRAPHICS::DRAW_TV_CHANNEL(xPos, yPos, xScale, yScale, rotation, red, green, blue, alpha);
	}

	void LUA_NATIVE_GRAPHICS_SET_TV_CHANNEL_PLAYLIST( int tvChannel, const char* playlistName, bool restart )
	{
		GRAPHICS::SET_TV_CHANNEL_PLAYLIST(tvChannel, playlistName, restart);
	}

	void LUA_NATIVE_GRAPHICS_SET_TV_CHANNEL_PLAYLIST_AT_HOUR( int tvChannel, const char* playlistName, int hour )
	{
		GRAPHICS::SET_TV_CHANNEL_PLAYLIST_AT_HOUR(tvChannel, playlistName, hour);
	}

	void LUA_NATIVE_GRAPHICS_CLEAR_TV_CHANNEL_PLAYLIST( int tvChannel )
	{
		GRAPHICS::CLEAR_TV_CHANNEL_PLAYLIST(tvChannel);
	}

	bool LUA_NATIVE_GRAPHICS_IS_PLAYLIST_ON_CHANNEL( int tvChannel, Any p1 )
	{
		auto retval = (bool)GRAPHICS::IS_PLAYLIST_ON_CHANNEL(tvChannel, p1);
		return retval;
	}

	bool LUA_NATIVE_GRAPHICS_IS_TVSHOW_CURRENTLY_PLAYING( Hash videoCliphash )
	{
		auto retval = (bool)GRAPHICS::IS_TVSHOW_CURRENTLY_PLAYING(videoCliphash);
		return retval;
	}

	void LUA_NATIVE_GRAPHICS_ENABLE_MOVIE_KEYFRAME_WAIT( bool toggle )
	{
		GRAPHICS::ENABLE_MOVIE_KEYFRAME_WAIT(toggle);
	}

	void LUA_NATIVE_GRAPHICS_SET_TV_PLAYER_WATCHING_THIS_FRAME( Any p0 )
	{
		GRAPHICS::SET_TV_PLAYER_WATCHING_THIS_FRAME(p0);
	}

	Hash LUA_NATIVE_GRAPHICS_GET_CURRENT_TV_CLIP_NAMEHASH(  )
	{
		auto retval = GRAPHICS::GET_CURRENT_TV_CLIP_NAMEHASH();
		return retval;
	}

	void LUA_NATIVE_GRAPHICS_ENABLE_MOVIE_SUBTITLES( bool toggle )
	{
		GRAPHICS::ENABLE_MOVIE_SUBTITLES(toggle);
	}

	bool LUA_NATIVE_GRAPHICS_UI3DSCENE_IS_AVAILABLE(  )
	{
		auto retval = (bool)GRAPHICS::UI3DSCENE_IS_AVAILABLE();
		return retval;
	}

	bool LUA_NATIVE_GRAPHICS_UI3DSCENE_PUSH_PRESET( const char* presetName )
	{
		auto retval = (bool)GRAPHICS::UI3DSCENE_PUSH_PRESET(presetName);
		return retval;
	}

	bool LUA_NATIVE_GRAPHICS_UI3DSCENE_ASSIGN_PED_TO_SLOT( const char* presetName, Ped ped, int slot, float posX, float posY, float posZ )
	{
		auto retval = (bool)GRAPHICS::UI3DSCENE_ASSIGN_PED_TO_SLOT(presetName, ped, slot, posX, posY, posZ);
		return retval;
	}

	void LUA_NATIVE_GRAPHICS_UI3DSCENE_CLEAR_PATCHED_DATA(  )
	{
		GRAPHICS::UI3DSCENE_CLEAR_PATCHED_DATA();
	}

	void LUA_NATIVE_GRAPHICS_UI3DSCENE_MAKE_PUSHED_PRESET_PERSISTENT( bool toggle )
	{
		GRAPHICS::UI3DSCENE_MAKE_PUSHED_PRESET_PERSISTENT(toggle);
	}

	void LUA_NATIVE_GRAPHICS_TERRAINGRID_ACTIVATE( bool toggle )
	{
		GRAPHICS::TERRAINGRID_ACTIVATE(toggle);
	}

	void LUA_NATIVE_GRAPHICS_TERRAINGRID_SET_PARAMS( float x, float y, float z, float forwardX, float forwardY, float forwardZ, float sizeX, float sizeY, float sizeZ, float gridScale, float glowIntensity, float normalHeight, float heightDiff )
	{
		GRAPHICS::TERRAINGRID_SET_PARAMS(x, y, z, forwardX, forwardY, forwardZ, sizeX, sizeY, sizeZ, gridScale, glowIntensity, normalHeight, heightDiff);
	}

	void LUA_NATIVE_GRAPHICS_TERRAINGRID_SET_COLOURS( int lowR, int lowG, int lowB, int lowAlpha, int r, int g, int b, int alpha, int highR, int highG, int highB, int highAlpha )
	{
		GRAPHICS::TERRAINGRID_SET_COLOURS(lowR, lowG, lowB, lowAlpha, r, g, b, alpha, highR, highG, highB, highAlpha);
	}

	void LUA_NATIVE_GRAPHICS_ANIMPOSTFX_PLAY( const char* effectName, int duration, bool looped )
	{
		GRAPHICS::ANIMPOSTFX_PLAY(effectName, duration, looped);
	}

	void LUA_NATIVE_GRAPHICS_ANIMPOSTFX_STOP( const char* effectName )
	{
		GRAPHICS::ANIMPOSTFX_STOP(effectName);
	}

	float LUA_NATIVE_GRAPHICS_ANIMPOSTFX_GET_CURRENT_TIME( const char* effectName )
	{
		auto retval = GRAPHICS::ANIMPOSTFX_GET_CURRENT_TIME(effectName);
		return retval;
	}

	bool LUA_NATIVE_GRAPHICS_ANIMPOSTFX_IS_RUNNING( const char* effectName )
	{
		auto retval = (bool)GRAPHICS::ANIMPOSTFX_IS_RUNNING(effectName);
		return retval;
	}

	void LUA_NATIVE_GRAPHICS_ANIMPOSTFX_STOP_ALL(  )
	{
		GRAPHICS::ANIMPOSTFX_STOP_ALL();
	}

	void LUA_NATIVE_GRAPHICS_ANIMPOSTFX_STOP_AND_FLUSH_REQUESTS( const char* effectName )
	{
		GRAPHICS::ANIMPOSTFX_STOP_AND_FLUSH_REQUESTS(effectName);
	}

	void LUA_NATIVE_HUD_BEGIN_TEXT_COMMAND_BUSYSPINNER_ON( const char* string )
	{
		HUD::BEGIN_TEXT_COMMAND_BUSYSPINNER_ON(string);
	}

	void LUA_NATIVE_HUD_END_TEXT_COMMAND_BUSYSPINNER_ON( int busySpinnerType )
	{
		HUD::END_TEXT_COMMAND_BUSYSPINNER_ON(busySpinnerType);
	}

	void LUA_NATIVE_HUD_BUSYSPINNER_OFF(  )
	{
		HUD::BUSYSPINNER_OFF();
	}

	void LUA_NATIVE_HUD_PRELOAD_BUSYSPINNER(  )
	{
		HUD::PRELOAD_BUSYSPINNER();
	}

	bool LUA_NATIVE_HUD_BUSYSPINNER_IS_ON(  )
	{
		auto retval = (bool)HUD::BUSYSPINNER_IS_ON();
		return retval;
	}

	bool LUA_NATIVE_HUD_BUSYSPINNER_IS_DISPLAYING(  )
	{
		auto retval = (bool)HUD::BUSYSPINNER_IS_DISPLAYING();
		return retval;
	}

	void LUA_NATIVE_HUD_DISABLE_PAUSEMENU_SPINNER( bool p0 )
	{
		HUD::DISABLE_PAUSEMENU_SPINNER(p0);
	}

	void LUA_NATIVE_HUD_SET_MOUSE_CURSOR_THIS_FRAME(  )
	{
		HUD::SET_MOUSE_CURSOR_THIS_FRAME();
	}

	void LUA_NATIVE_HUD_SET_MOUSE_CURSOR_STYLE( int spriteId )
	{
		HUD::SET_MOUSE_CURSOR_STYLE(spriteId);
	}

	void LUA_NATIVE_HUD_SET_MOUSE_CURSOR_VISIBLE( bool toggle )
	{
		HUD::SET_MOUSE_CURSOR_VISIBLE(toggle);
	}

	bool LUA_NATIVE_HUD_IS_MOUSE_ROLLED_OVER_INSTRUCTIONAL_BUTTONS(  )
	{
		auto retval = (bool)HUD::IS_MOUSE_ROLLED_OVER_INSTRUCTIONAL_BUTTONS();
		return retval;
	}

	std::tuple<bool, Any, Any, Any> LUA_NATIVE_HUD_GET_MOUSE_EVENT( int scaleformHandle, Any p1, Any p2, Any p3 )
	{
		std::tuple<bool, Any, Any, Any> return_values;
		std::get<0>(return_values) = (bool)HUD::GET_MOUSE_EVENT(scaleformHandle, &p1, &p2, &p3);
		std::get<1>(return_values) = p1;
		std::get<2>(return_values) = p2;
		std::get<3>(return_values) = p3;

		return return_values;
	}

	void LUA_NATIVE_HUD_THEFEED_ONLY_SHOW_TOOLTIPS( bool toggle )
	{
		HUD::THEFEED_ONLY_SHOW_TOOLTIPS(toggle);
	}

	void LUA_NATIVE_HUD_THEFEED_SET_SCRIPTED_MENU_HEIGHT( float pos )
	{
		HUD::THEFEED_SET_SCRIPTED_MENU_HEIGHT(pos);
	}

	void LUA_NATIVE_HUD_THEFEED_HIDE(  )
	{
		HUD::THEFEED_HIDE();
	}

	void LUA_NATIVE_HUD_THEFEED_HIDE_THIS_FRAME(  )
	{
		HUD::THEFEED_HIDE_THIS_FRAME();
	}

	void LUA_NATIVE_HUD_THEFEED_SHOW(  )
	{
		HUD::THEFEED_SHOW();
	}

	void LUA_NATIVE_HUD_THEFEED_FLUSH_QUEUE(  )
	{
		HUD::THEFEED_FLUSH_QUEUE();
	}

	void LUA_NATIVE_HUD_THEFEED_REMOVE_ITEM( int notificationId )
	{
		HUD::THEFEED_REMOVE_ITEM(notificationId);
	}

	void LUA_NATIVE_HUD_THEFEED_FORCE_RENDER_ON(  )
	{
		HUD::THEFEED_FORCE_RENDER_ON();
	}

	void LUA_NATIVE_HUD_THEFEED_FORCE_RENDER_OFF(  )
	{
		HUD::THEFEED_FORCE_RENDER_OFF();
	}

	void LUA_NATIVE_HUD_THEFEED_PAUSE(  )
	{
		HUD::THEFEED_PAUSE();
	}

	void LUA_NATIVE_HUD_THEFEED_RESUME(  )
	{
		HUD::THEFEED_RESUME();
	}

	bool LUA_NATIVE_HUD_THEFEED_IS_PAUSED(  )
	{
		auto retval = (bool)HUD::THEFEED_IS_PAUSED();
		return retval;
	}

	void LUA_NATIVE_HUD_THEFEED_REPORT_LOGO_ON(  )
	{
		HUD::THEFEED_REPORT_LOGO_ON();
	}

	void LUA_NATIVE_HUD_THEFEED_REPORT_LOGO_OFF(  )
	{
		HUD::THEFEED_REPORT_LOGO_OFF();
	}

	int LUA_NATIVE_HUD_THEFEED_GET_LAST_SHOWN_PHONE_ACTIVATABLE_FEED_ID(  )
	{
		auto retval = HUD::THEFEED_GET_LAST_SHOWN_PHONE_ACTIVATABLE_FEED_ID();
		return retval;
	}

	void LUA_NATIVE_HUD_THEFEED_AUTO_POST_GAMETIPS_ON(  )
	{
		HUD::THEFEED_AUTO_POST_GAMETIPS_ON();
	}

	void LUA_NATIVE_HUD_THEFEED_AUTO_POST_GAMETIPS_OFF(  )
	{
		HUD::THEFEED_AUTO_POST_GAMETIPS_OFF();
	}

	void LUA_NATIVE_HUD_THEFEED_SET_BACKGROUND_COLOR_FOR_NEXT_POST( int hudColorIndex )
	{
		HUD::THEFEED_SET_BACKGROUND_COLOR_FOR_NEXT_POST(hudColorIndex);
	}

	void LUA_NATIVE_HUD_THEFEED_SET_RGBA_PARAMETER_FOR_NEXT_MESSAGE( int red, int green, int blue, int alpha )
	{
		HUD::THEFEED_SET_RGBA_PARAMETER_FOR_NEXT_MESSAGE(red, green, blue, alpha);
	}

	void LUA_NATIVE_HUD_THEFEED_SET_FLASH_DURATION_PARAMETER_FOR_NEXT_MESSAGE( int count )
	{
		HUD::THEFEED_SET_FLASH_DURATION_PARAMETER_FOR_NEXT_MESSAGE(count);
	}

	void LUA_NATIVE_HUD_THEFEED_SET_VIBRATE_PARAMETER_FOR_NEXT_MESSAGE( bool toggle )
	{
		HUD::THEFEED_SET_VIBRATE_PARAMETER_FOR_NEXT_MESSAGE(toggle);
	}

	void LUA_NATIVE_HUD_THEFEED_RESET_ALL_PARAMETERS(  )
	{
		HUD::THEFEED_RESET_ALL_PARAMETERS();
	}

	void LUA_NATIVE_HUD_THEFEED_FREEZE_NEXT_POST(  )
	{
		HUD::THEFEED_FREEZE_NEXT_POST();
	}

	void LUA_NATIVE_HUD_THEFEED_CLEAR_FROZEN_POST(  )
	{
		HUD::THEFEED_CLEAR_FROZEN_POST();
	}

	void LUA_NATIVE_HUD_THEFEED_SET_SNAP_FEED_ITEM_POSITIONS( bool p0 )
	{
		HUD::THEFEED_SET_SNAP_FEED_ITEM_POSITIONS(p0);
	}

	void LUA_NATIVE_HUD_THEFEED_UPDATE_ITEM_TEXTURE( const char* txdString1, const char* txnString1, const char* txdString2, const char* txnString2 )
	{
		HUD::THEFEED_UPDATE_ITEM_TEXTURE(txdString1, txnString1, txdString2, txnString2);
	}

	void LUA_NATIVE_HUD_BEGIN_TEXT_COMMAND_THEFEED_POST( const char* text )
	{
		HUD::BEGIN_TEXT_COMMAND_THEFEED_POST(text);
	}

	int LUA_NATIVE_HUD_END_TEXT_COMMAND_THEFEED_POST_STATS( const char* statTitle, int iconEnum, bool stepVal, int barValue, bool isImportant, const char* pictureTextureDict, const char* pictureTextureName )
	{
		auto retval = HUD::END_TEXT_COMMAND_THEFEED_POST_STATS(statTitle, iconEnum, stepVal, barValue, isImportant, pictureTextureDict, pictureTextureName);
		return retval;
	}

	int LUA_NATIVE_HUD_END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT( const char* txdName, const char* textureName, bool flash, int iconType, const char* sender, const char* subject )
	{
		auto retval = HUD::END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT(txdName, textureName, flash, iconType, sender, subject);
		return retval;
	}

	int LUA_NATIVE_HUD_END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_SUBTITLE_LABEL( const char* txdName, const char* textureName, bool flash, int iconType, const char* sender, const char* subject )
	{
		auto retval = HUD::END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_SUBTITLE_LABEL(txdName, textureName, flash, iconType, sender, subject);
		return retval;
	}

	int LUA_NATIVE_HUD_END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_TU( const char* txdName, const char* textureName, bool flash, int iconType, const char* sender, const char* subject, float duration )
	{
		auto retval = HUD::END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_TU(txdName, textureName, flash, iconType, sender, subject, duration);
		return retval;
	}

	int LUA_NATIVE_HUD_END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_WITH_CREW_TAG( const char* txdName, const char* textureName, bool flash, int iconType, const char* sender, const char* subject, float duration, const char* clanTag )
	{
		auto retval = HUD::END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_WITH_CREW_TAG(txdName, textureName, flash, iconType, sender, subject, duration, clanTag);
		return retval;
	}

	int LUA_NATIVE_HUD_END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_WITH_CREW_TAG_AND_ADDITIONAL_ICON( const char* txdName, const char* textureName, bool flash, int iconType1, const char* sender, const char* subject, float duration, const char* clanTag, int iconType2, int p9 )
	{
		auto retval = HUD::END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_WITH_CREW_TAG_AND_ADDITIONAL_ICON(txdName, textureName, flash, iconType1, sender, subject, duration, clanTag, iconType2, p9);
		return retval;
	}

	int LUA_NATIVE_HUD_END_TEXT_COMMAND_THEFEED_POST_TICKER( bool blink, bool p1 )
	{
		auto retval = HUD::END_TEXT_COMMAND_THEFEED_POST_TICKER(blink, p1);
		return retval;
	}

	int LUA_NATIVE_HUD_END_TEXT_COMMAND_THEFEED_POST_TICKER_FORCED( bool blink, bool p1 )
	{
		auto retval = HUD::END_TEXT_COMMAND_THEFEED_POST_TICKER_FORCED(blink, p1);
		return retval;
	}

	int LUA_NATIVE_HUD_END_TEXT_COMMAND_THEFEED_POST_TICKER_WITH_TOKENS( bool blink, bool p1 )
	{
		auto retval = HUD::END_TEXT_COMMAND_THEFEED_POST_TICKER_WITH_TOKENS(blink, p1);
		return retval;
	}

	int LUA_NATIVE_HUD_END_TEXT_COMMAND_THEFEED_POST_AWARD( const char* textureDict, const char* textureName, int rpBonus, int colorOverlay, const char* titleLabel )
	{
		auto retval = HUD::END_TEXT_COMMAND_THEFEED_POST_AWARD(textureDict, textureName, rpBonus, colorOverlay, titleLabel);
		return retval;
	}

	std::tuple<int, int> LUA_NATIVE_HUD_END_TEXT_COMMAND_THEFEED_POST_CREWTAG( bool p0, bool p1, int p2, int p3, bool isLeader, bool unk0, int clanDesc, int R, int G, int B )
	{
		std::tuple<int, int> return_values;
		std::get<0>(return_values) = HUD::END_TEXT_COMMAND_THEFEED_POST_CREWTAG(p0, p1, &p2, p3, isLeader, unk0, clanDesc, R, G, B);
		std::get<1>(return_values) = p2;

		return return_values;
	}

	std::tuple<int, int> LUA_NATIVE_HUD_END_TEXT_COMMAND_THEFEED_POST_CREWTAG_WITH_GAME_NAME( bool p0, bool p1, int p2, int p3, bool isLeader, bool unk0, int clanDesc, const char* playerName, int R, int G, int B )
	{
		std::tuple<int, int> return_values;
		std::get<0>(return_values) = HUD::END_TEXT_COMMAND_THEFEED_POST_CREWTAG_WITH_GAME_NAME(p0, p1, &p2, p3, isLeader, unk0, clanDesc, playerName, R, G, B);
		std::get<1>(return_values) = p2;

		return return_values;
	}

	int LUA_NATIVE_HUD_END_TEXT_COMMAND_THEFEED_POST_UNLOCK( const char* gxtLabel1, int p1, const char* gxtLabel2 )
	{
		auto retval = HUD::END_TEXT_COMMAND_THEFEED_POST_UNLOCK(gxtLabel1, p1, gxtLabel2);
		return retval;
	}

	int LUA_NATIVE_HUD_END_TEXT_COMMAND_THEFEED_POST_UNLOCK_TU( const char* gxtLabel1, int p1, const char* gxtLabel2, int p3 )
	{
		auto retval = HUD::END_TEXT_COMMAND_THEFEED_POST_UNLOCK_TU(gxtLabel1, p1, gxtLabel2, p3);
		return retval;
	}

	int LUA_NATIVE_HUD_END_TEXT_COMMAND_THEFEED_POST_UNLOCK_TU_WITH_COLOR( Any p0, Any p1, Any p2, Any p3, Any p4, Any p5 )
	{
		auto retval = HUD::END_TEXT_COMMAND_THEFEED_POST_UNLOCK_TU_WITH_COLOR(p0, p1, p2, p3, p4, p5);
		return retval;
	}

	int LUA_NATIVE_HUD_END_TEXT_COMMAND_THEFEED_POST_MPTICKER( bool blink, bool p1 )
	{
		auto retval = HUD::END_TEXT_COMMAND_THEFEED_POST_MPTICKER(blink, p1);
		return retval;
	}

	int LUA_NATIVE_HUD_END_TEXT_COMMAND_THEFEED_POST_CREW_RANKUP_WITH_LITERAL_FLAG( const char* p0, const char* p1, const char* p2, bool p3, bool p4 )
	{
		auto retval = HUD::END_TEXT_COMMAND_THEFEED_POST_CREW_RANKUP_WITH_LITERAL_FLAG(p0, p1, p2, p3, p4);
		return retval;
	}

	int LUA_NATIVE_HUD_END_TEXT_COMMAND_THEFEED_POST_VERSUS_TU( const char* txdName1, const char* textureName1, int count1, const char* txdName2, const char* textureName2, int count2, int hudColor1, int hudColor2 )
	{
		auto retval = HUD::END_TEXT_COMMAND_THEFEED_POST_VERSUS_TU(txdName1, textureName1, count1, txdName2, textureName2, count2, hudColor1, hudColor2);
		return retval;
	}

	int LUA_NATIVE_HUD_END_TEXT_COMMAND_THEFEED_POST_REPLAY( int type, int image, const char* text )
	{
		auto retval = HUD::END_TEXT_COMMAND_THEFEED_POST_REPLAY(type, image, text);
		return retval;
	}

	int LUA_NATIVE_HUD_END_TEXT_COMMAND_THEFEED_POST_REPLAY_INPUT( int type, const char* button, const char* text )
	{
		auto retval = HUD::END_TEXT_COMMAND_THEFEED_POST_REPLAY_INPUT(type, button, text);
		return retval;
	}

	void LUA_NATIVE_HUD_BEGIN_TEXT_COMMAND_PRINT( const char* GxtEntry )
	{
		HUD::BEGIN_TEXT_COMMAND_PRINT(GxtEntry);
	}

	void LUA_NATIVE_HUD_END_TEXT_COMMAND_PRINT( int duration, bool drawImmediately )
	{
		HUD::END_TEXT_COMMAND_PRINT(duration, drawImmediately);
	}

	void LUA_NATIVE_HUD_BEGIN_TEXT_COMMAND_IS_MESSAGE_DISPLAYED( const char* text )
	{
		HUD::BEGIN_TEXT_COMMAND_IS_MESSAGE_DISPLAYED(text);
	}

	bool LUA_NATIVE_HUD_END_TEXT_COMMAND_IS_MESSAGE_DISPLAYED(  )
	{
		auto retval = (bool)HUD::END_TEXT_COMMAND_IS_MESSAGE_DISPLAYED();
		return retval;
	}

	void LUA_NATIVE_HUD_BEGIN_TEXT_COMMAND_DISPLAY_TEXT( const char* text )
	{
		HUD::BEGIN_TEXT_COMMAND_DISPLAY_TEXT(text);
	}

	void LUA_NATIVE_HUD_END_TEXT_COMMAND_DISPLAY_TEXT( float x, float y, int p2 )
	{
		HUD::END_TEXT_COMMAND_DISPLAY_TEXT(x, y, p2);
	}

	void LUA_NATIVE_HUD_BEGIN_TEXT_COMMAND_GET_SCREEN_WIDTH_OF_DISPLAY_TEXT( const char* text )
	{
		HUD::BEGIN_TEXT_COMMAND_GET_SCREEN_WIDTH_OF_DISPLAY_TEXT(text);
	}

	float LUA_NATIVE_HUD_END_TEXT_COMMAND_GET_SCREEN_WIDTH_OF_DISPLAY_TEXT( bool p0 )
	{
		auto retval = HUD::END_TEXT_COMMAND_GET_SCREEN_WIDTH_OF_DISPLAY_TEXT(p0);
		return retval;
	}

	void LUA_NATIVE_HUD_BEGIN_TEXT_COMMAND_GET_NUMBER_OF_LINES_FOR_STRING( const char* entry )
	{
		HUD::BEGIN_TEXT_COMMAND_GET_NUMBER_OF_LINES_FOR_STRING(entry);
	}

	int LUA_NATIVE_HUD_END_TEXT_COMMAND_GET_NUMBER_OF_LINES_FOR_STRING( float x, float y )
	{
		auto retval = HUD::END_TEXT_COMMAND_GET_NUMBER_OF_LINES_FOR_STRING(x, y);
		return retval;
	}

	void LUA_NATIVE_HUD_BEGIN_TEXT_COMMAND_DISPLAY_HELP( const char* inputType )
	{
		HUD::BEGIN_TEXT_COMMAND_DISPLAY_HELP(inputType);
	}

	void LUA_NATIVE_HUD_END_TEXT_COMMAND_DISPLAY_HELP( int p0, bool loop, bool beep, int shape )
	{
		HUD::END_TEXT_COMMAND_DISPLAY_HELP(p0, loop, beep, shape);
	}

	void LUA_NATIVE_HUD_BEGIN_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED( const char* labelName )
	{
		HUD::BEGIN_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(labelName);
	}

	bool LUA_NATIVE_HUD_END_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED( int p0 )
	{
		auto retval = (bool)HUD::END_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(p0);
		return retval;
	}

	void LUA_NATIVE_HUD_BEGIN_TEXT_COMMAND_SET_BLIP_NAME( const char* textLabel )
	{
		HUD::BEGIN_TEXT_COMMAND_SET_BLIP_NAME(textLabel);
	}

	void LUA_NATIVE_HUD_END_TEXT_COMMAND_SET_BLIP_NAME( Blip blip )
	{
		HUD::END_TEXT_COMMAND_SET_BLIP_NAME(blip);
	}

	void LUA_NATIVE_HUD_BEGIN_TEXT_COMMAND_ADD_DIRECTLY_TO_PREVIOUS_BRIEFS( const char* p0 )
	{
		HUD::BEGIN_TEXT_COMMAND_ADD_DIRECTLY_TO_PREVIOUS_BRIEFS(p0);
	}

	void LUA_NATIVE_HUD_END_TEXT_COMMAND_ADD_DIRECTLY_TO_PREVIOUS_BRIEFS( bool p0 )
	{
		HUD::END_TEXT_COMMAND_ADD_DIRECTLY_TO_PREVIOUS_BRIEFS(p0);
	}

	void LUA_NATIVE_HUD_BEGIN_TEXT_COMMAND_CLEAR_PRINT( const char* text )
	{
		HUD::BEGIN_TEXT_COMMAND_CLEAR_PRINT(text);
	}

	void LUA_NATIVE_HUD_END_TEXT_COMMAND_CLEAR_PRINT(  )
	{
		HUD::END_TEXT_COMMAND_CLEAR_PRINT();
	}

	void LUA_NATIVE_HUD_BEGIN_TEXT_COMMAND_OVERRIDE_BUTTON_TEXT( const char* gxtEntry )
	{
		HUD::BEGIN_TEXT_COMMAND_OVERRIDE_BUTTON_TEXT(gxtEntry);
	}

	void LUA_NATIVE_HUD_END_TEXT_COMMAND_OVERRIDE_BUTTON_TEXT( int p0 )
	{
		HUD::END_TEXT_COMMAND_OVERRIDE_BUTTON_TEXT(p0);
	}

	void LUA_NATIVE_HUD_ADD_TEXT_COMPONENT_INTEGER( int value )
	{
		HUD::ADD_TEXT_COMPONENT_INTEGER(value);
	}

	void LUA_NATIVE_HUD_ADD_TEXT_COMPONENT_FLOAT( float value, int decimalPlaces )
	{
		HUD::ADD_TEXT_COMPONENT_FLOAT(value, decimalPlaces);
	}

	void LUA_NATIVE_HUD_ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL( const char* labelName )
	{
		HUD::ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL(labelName);
	}

	void LUA_NATIVE_HUD_ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL_HASH_KEY( Hash gxtEntryHash )
	{
		HUD::ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL_HASH_KEY(gxtEntryHash);
	}

	void LUA_NATIVE_HUD_ADD_TEXT_COMPONENT_SUBSTRING_BLIP_NAME( Blip blip )
	{
		HUD::ADD_TEXT_COMPONENT_SUBSTRING_BLIP_NAME(blip);
	}

	void LUA_NATIVE_HUD_ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME( const char* text )
	{
		HUD::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
	}

	void LUA_NATIVE_HUD_ADD_TEXT_COMPONENT_SUBSTRING_TIME( int timestamp, int flags )
	{
		HUD::ADD_TEXT_COMPONENT_SUBSTRING_TIME(timestamp, flags);
	}

	void LUA_NATIVE_HUD_ADD_TEXT_COMPONENT_FORMATTED_INTEGER( int value, bool commaSeparated )
	{
		HUD::ADD_TEXT_COMPONENT_FORMATTED_INTEGER(value, commaSeparated);
	}

	void LUA_NATIVE_HUD_ADD_TEXT_COMPONENT_SUBSTRING_PHONE_NUMBER( const char* p0, int p1 )
	{
		HUD::ADD_TEXT_COMPONENT_SUBSTRING_PHONE_NUMBER(p0, p1);
	}

	void LUA_NATIVE_HUD_ADD_TEXT_COMPONENT_SUBSTRING_WEBSITE( const char* website )
	{
		HUD::ADD_TEXT_COMPONENT_SUBSTRING_WEBSITE(website);
	}

	void LUA_NATIVE_HUD_ADD_TEXT_COMPONENT_SUBSTRING_KEYBOARD_DISPLAY( const char* string )
	{
		HUD::ADD_TEXT_COMPONENT_SUBSTRING_KEYBOARD_DISPLAY(string);
	}

	void LUA_NATIVE_HUD_SET_COLOUR_OF_NEXT_TEXT_COMPONENT( int hudColor )
	{
		HUD::SET_COLOUR_OF_NEXT_TEXT_COMPONENT(hudColor);
	}

	const char* LUA_NATIVE_HUD_GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME( const char* text, int position, int length )
	{
		auto retval = HUD::GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME(text, position, length);
		return retval;
	}

	const char* LUA_NATIVE_HUD_GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME_WITH_BYTE_LIMIT( const char* text, int position, int length, int maxLength )
	{
		auto retval = HUD::GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME_WITH_BYTE_LIMIT(text, position, length, maxLength);
		return retval;
	}

	const char* LUA_NATIVE_HUD_GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME_BYTES( const char* text, int startPosition, int endPosition )
	{
		auto retval = HUD::GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME_BYTES(text, startPosition, endPosition);
		return retval;
	}

	const char* LUA_NATIVE_HUD_GET_FILENAME_FOR_AUDIO_CONVERSATION( const char* labelName )
	{
		auto retval = HUD::GET_FILENAME_FOR_AUDIO_CONVERSATION(labelName);
		return retval;
	}

	void LUA_NATIVE_HUD_CLEAR_PRINTS(  )
	{
		HUD::CLEAR_PRINTS();
	}

	void LUA_NATIVE_HUD_CLEAR_BRIEF(  )
	{
		HUD::CLEAR_BRIEF();
	}

	void LUA_NATIVE_HUD_CLEAR_ALL_HELP_MESSAGES(  )
	{
		HUD::CLEAR_ALL_HELP_MESSAGES();
	}

	void LUA_NATIVE_HUD_CLEAR_THIS_PRINT( const char* p0 )
	{
		HUD::CLEAR_THIS_PRINT(p0);
	}

	void LUA_NATIVE_HUD_CLEAR_SMALL_PRINTS(  )
	{
		HUD::CLEAR_SMALL_PRINTS();
	}

	bool LUA_NATIVE_HUD_DOES_TEXT_BLOCK_EXIST( const char* gxt )
	{
		auto retval = (bool)HUD::DOES_TEXT_BLOCK_EXIST(gxt);
		return retval;
	}

	void LUA_NATIVE_HUD_REQUEST_ADDITIONAL_TEXT( const char* gxt, int slot )
	{
		HUD::REQUEST_ADDITIONAL_TEXT(gxt, slot);
	}

	void LUA_NATIVE_HUD_REQUEST_ADDITIONAL_TEXT_FOR_DLC( const char* gxt, int slot )
	{
		HUD::REQUEST_ADDITIONAL_TEXT_FOR_DLC(gxt, slot);
	}

	bool LUA_NATIVE_HUD_HAS_ADDITIONAL_TEXT_LOADED( int slot )
	{
		auto retval = (bool)HUD::HAS_ADDITIONAL_TEXT_LOADED(slot);
		return retval;
	}

	void LUA_NATIVE_HUD_CLEAR_ADDITIONAL_TEXT( int p0, bool p1 )
	{
		HUD::CLEAR_ADDITIONAL_TEXT(p0, p1);
	}

	bool LUA_NATIVE_HUD_IS_STREAMING_ADDITIONAL_TEXT( int p0 )
	{
		auto retval = (bool)HUD::IS_STREAMING_ADDITIONAL_TEXT(p0);
		return retval;
	}

	bool LUA_NATIVE_HUD_HAS_THIS_ADDITIONAL_TEXT_LOADED( const char* gxt, int slot )
	{
		auto retval = (bool)HUD::HAS_THIS_ADDITIONAL_TEXT_LOADED(gxt, slot);
		return retval;
	}

	bool LUA_NATIVE_HUD_IS_MESSAGE_BEING_DISPLAYED(  )
	{
		auto retval = (bool)HUD::IS_MESSAGE_BEING_DISPLAYED();
		return retval;
	}

	bool LUA_NATIVE_HUD_DOES_TEXT_LABEL_EXIST( const char* gxt )
	{
		auto retval = (bool)HUD::DOES_TEXT_LABEL_EXIST(gxt);
		return retval;
	}

	const char* LUA_NATIVE_HUD_GET_FIRST_N_CHARACTERS_OF_LITERAL_STRING( const char* string, int length )
	{
		auto retval = HUD::GET_FIRST_N_CHARACTERS_OF_LITERAL_STRING(string, length);
		return retval;
	}

	int LUA_NATIVE_HUD_GET_LENGTH_OF_STRING_WITH_THIS_TEXT_LABEL( const char* gxt )
	{
		auto retval = HUD::GET_LENGTH_OF_STRING_WITH_THIS_TEXT_LABEL(gxt);
		return retval;
	}

	int LUA_NATIVE_HUD_GET_LENGTH_OF_LITERAL_STRING( const char* string )
	{
		auto retval = HUD::GET_LENGTH_OF_LITERAL_STRING(string);
		return retval;
	}

	int LUA_NATIVE_HUD_GET_LENGTH_OF_LITERAL_STRING_IN_BYTES( const char* string )
	{
		auto retval = HUD::GET_LENGTH_OF_LITERAL_STRING_IN_BYTES(string);
		return retval;
	}

	const char* LUA_NATIVE_HUD_GET_STREET_NAME_FROM_HASH_KEY( Hash hash )
	{
		auto retval = HUD::GET_STREET_NAME_FROM_HASH_KEY(hash);
		return retval;
	}

	bool LUA_NATIVE_HUD_IS_HUD_PREFERENCE_SWITCHED_ON(  )
	{
		auto retval = (bool)HUD::IS_HUD_PREFERENCE_SWITCHED_ON();
		return retval;
	}

	bool LUA_NATIVE_HUD_IS_RADAR_PREFERENCE_SWITCHED_ON(  )
	{
		auto retval = (bool)HUD::IS_RADAR_PREFERENCE_SWITCHED_ON();
		return retval;
	}

	bool LUA_NATIVE_HUD_IS_SUBTITLE_PREFERENCE_SWITCHED_ON(  )
	{
		auto retval = (bool)HUD::IS_SUBTITLE_PREFERENCE_SWITCHED_ON();
		return retval;
	}

	void LUA_NATIVE_HUD_DISPLAY_HUD( bool toggle )
	{
		HUD::DISPLAY_HUD(toggle);
	}

	void LUA_NATIVE_HUD_DISPLAY_HUD_WHEN_NOT_IN_STATE_OF_PLAY_THIS_FRAME(  )
	{
		HUD::DISPLAY_HUD_WHEN_NOT_IN_STATE_OF_PLAY_THIS_FRAME();
	}

	void LUA_NATIVE_HUD_DISPLAY_HUD_WHEN_PAUSED_THIS_FRAME(  )
	{
		HUD::DISPLAY_HUD_WHEN_PAUSED_THIS_FRAME();
	}

	void LUA_NATIVE_HUD_DISPLAY_RADAR( bool toggle )
	{
		HUD::DISPLAY_RADAR(toggle);
	}

	void LUA_NATIVE_HUD_SET_FAKE_SPECTATOR_MODE( bool toggle )
	{
		HUD::SET_FAKE_SPECTATOR_MODE(toggle);
	}

	bool LUA_NATIVE_HUD_GET_FAKE_SPECTATOR_MODE(  )
	{
		auto retval = (bool)HUD::GET_FAKE_SPECTATOR_MODE();
		return retval;
	}

	bool LUA_NATIVE_HUD_IS_HUD_HIDDEN(  )
	{
		auto retval = (bool)HUD::IS_HUD_HIDDEN();
		return retval;
	}

	bool LUA_NATIVE_HUD_IS_RADAR_HIDDEN(  )
	{
		auto retval = (bool)HUD::IS_RADAR_HIDDEN();
		return retval;
	}

	bool LUA_NATIVE_HUD_IS_MINIMAP_RENDERING(  )
	{
		auto retval = (bool)HUD::IS_MINIMAP_RENDERING();
		return retval;
	}

	void LUA_NATIVE_HUD_USE_VEHICLE_TARGETING_RETICULE( Any p0 )
	{
		HUD::USE_VEHICLE_TARGETING_RETICULE(p0);
	}

	void LUA_NATIVE_HUD_ADD_VALID_VEHICLE_HIT_HASH( Any p0 )
	{
		HUD::ADD_VALID_VEHICLE_HIT_HASH(p0);
	}

	void LUA_NATIVE_HUD_CLEAR_VALID_VEHICLE_HIT_HASHES(  )
	{
		HUD::CLEAR_VALID_VEHICLE_HIT_HASHES();
	}

	void LUA_NATIVE_HUD_SET_BLIP_ROUTE( Blip blip, bool enabled )
	{
		HUD::SET_BLIP_ROUTE(blip, enabled);
	}

	void LUA_NATIVE_HUD_CLEAR_ALL_BLIP_ROUTES(  )
	{
		HUD::CLEAR_ALL_BLIP_ROUTES();
	}

	void LUA_NATIVE_HUD_SET_BLIP_ROUTE_COLOUR( Blip blip, int colour )
	{
		HUD::SET_BLIP_ROUTE_COLOUR(blip, colour);
	}

	void LUA_NATIVE_HUD_SET_FORCE_SHOW_GPS( bool toggle )
	{
		HUD::SET_FORCE_SHOW_GPS(toggle);
	}

	void LUA_NATIVE_HUD_SET_USE_SET_DESTINATION_IN_PAUSE_MAP( bool toggle )
	{
		HUD::SET_USE_SET_DESTINATION_IN_PAUSE_MAP(toggle);
	}

	void LUA_NATIVE_HUD_SET_BLOCK_WANTED_FLASH( bool disabled )
	{
		HUD::SET_BLOCK_WANTED_FLASH(disabled);
	}

	void LUA_NATIVE_HUD_ADD_NEXT_MESSAGE_TO_PREVIOUS_BRIEFS( bool p0 )
	{
		HUD::ADD_NEXT_MESSAGE_TO_PREVIOUS_BRIEFS(p0);
	}

	void LUA_NATIVE_HUD_FORCE_NEXT_MESSAGE_TO_PREVIOUS_BRIEFS_LIST( int p0 )
	{
		HUD::FORCE_NEXT_MESSAGE_TO_PREVIOUS_BRIEFS_LIST(p0);
	}

	void LUA_NATIVE_HUD_SET_RADAR_ZOOM_PRECISE( float zoom )
	{
		HUD::SET_RADAR_ZOOM_PRECISE(zoom);
	}

	void LUA_NATIVE_HUD_SET_RADAR_ZOOM( int zoomLevel )
	{
		HUD::SET_RADAR_ZOOM(zoomLevel);
	}

	void LUA_NATIVE_HUD_SET_RADAR_ZOOM_TO_BLIP( Blip blip, float zoom )
	{
		HUD::SET_RADAR_ZOOM_TO_BLIP(blip, zoom);
	}

	void LUA_NATIVE_HUD_SET_RADAR_ZOOM_TO_DISTANCE( float zoom )
	{
		HUD::SET_RADAR_ZOOM_TO_DISTANCE(zoom);
	}

	void LUA_NATIVE_HUD_UPDATE_RADAR_ZOOM_TO_BLIP(  )
	{
		HUD::UPDATE_RADAR_ZOOM_TO_BLIP();
	}

	std::tuple<int, int, int, int> LUA_NATIVE_HUD_GET_HUD_COLOUR( int hudColorIndex, int r, int g, int b, int a )
	{
		std::tuple<int, int, int, int> return_values;
		HUD::GET_HUD_COLOUR(hudColorIndex, &r, &g, &b, &a);
		std::get<0>(return_values) = r;
		std::get<1>(return_values) = g;
		std::get<2>(return_values) = b;
		std::get<3>(return_values) = a;

		return return_values;
	}

	void LUA_NATIVE_HUD_SET_SCRIPT_VARIABLE_HUD_COLOUR( int r, int g, int b, int a )
	{
		HUD::SET_SCRIPT_VARIABLE_HUD_COLOUR(r, g, b, a);
	}

	void LUA_NATIVE_HUD_SET_SECOND_SCRIPT_VARIABLE_HUD_COLOUR( int r, int g, int b, int a )
	{
		HUD::SET_SECOND_SCRIPT_VARIABLE_HUD_COLOUR(r, g, b, a);
	}

	void LUA_NATIVE_HUD_REPLACE_HUD_COLOUR( int hudColorIndex, int hudColorIndex2 )
	{
		HUD::REPLACE_HUD_COLOUR(hudColorIndex, hudColorIndex2);
	}

	void LUA_NATIVE_HUD_REPLACE_HUD_COLOUR_WITH_RGBA( int hudColorIndex, int r, int g, int b, int a )
	{
		HUD::REPLACE_HUD_COLOUR_WITH_RGBA(hudColorIndex, r, g, b, a);
	}

	void LUA_NATIVE_HUD_SET_ABILITY_BAR_VISIBILITY( bool visible )
	{
		HUD::SET_ABILITY_BAR_VISIBILITY(visible);
	}

	void LUA_NATIVE_HUD_SET_ALLOW_ABILITY_BAR( bool toggle )
	{
		HUD::SET_ALLOW_ABILITY_BAR(toggle);
	}

	void LUA_NATIVE_HUD_FLASH_ABILITY_BAR( int millisecondsToFlash )
	{
		HUD::FLASH_ABILITY_BAR(millisecondsToFlash);
	}

	void LUA_NATIVE_HUD_SET_ABILITY_BAR_VALUE( float p0, float p1 )
	{
		HUD::SET_ABILITY_BAR_VALUE(p0, p1);
	}

	void LUA_NATIVE_HUD_FLASH_WANTED_DISPLAY( bool p0 )
	{
		HUD::FLASH_WANTED_DISPLAY(p0);
	}

	void LUA_NATIVE_HUD_FORCE_OFF_WANTED_STAR_FLASH( bool toggle )
	{
		HUD::FORCE_OFF_WANTED_STAR_FLASH(toggle);
	}

	void LUA_NATIVE_HUD_SET_CUSTOM_MP_HUD_COLOR( int hudColorId )
	{
		HUD::SET_CUSTOM_MP_HUD_COLOR(hudColorId);
	}

	float LUA_NATIVE_HUD_GET_RENDERED_CHARACTER_HEIGHT( float size, int font )
	{
		auto retval = HUD::GET_RENDERED_CHARACTER_HEIGHT(size, font);
		return retval;
	}

	void LUA_NATIVE_HUD_SET_TEXT_SCALE( float scale, float size )
	{
		HUD::SET_TEXT_SCALE(scale, size);
	}

	void LUA_NATIVE_HUD_SET_TEXT_COLOUR( int red, int green, int blue, int alpha )
	{
		HUD::SET_TEXT_COLOUR(red, green, blue, alpha);
	}

	void LUA_NATIVE_HUD_SET_TEXT_CENTRE( bool align )
	{
		HUD::SET_TEXT_CENTRE(align);
	}

	void LUA_NATIVE_HUD_SET_TEXT_RIGHT_JUSTIFY( bool toggle )
	{
		HUD::SET_TEXT_RIGHT_JUSTIFY(toggle);
	}

	void LUA_NATIVE_HUD_SET_TEXT_JUSTIFICATION( int justifyType )
	{
		HUD::SET_TEXT_JUSTIFICATION(justifyType);
	}

	void LUA_NATIVE_HUD_SET_TEXT_WRAP( float start, float end )
	{
		HUD::SET_TEXT_WRAP(start, end);
	}

	void LUA_NATIVE_HUD_SET_TEXT_LEADING( int p0 )
	{
		HUD::SET_TEXT_LEADING(p0);
	}

	void LUA_NATIVE_HUD_SET_TEXT_PROPORTIONAL( bool p0 )
	{
		HUD::SET_TEXT_PROPORTIONAL(p0);
	}

	void LUA_NATIVE_HUD_SET_TEXT_FONT( int fontType )
	{
		HUD::SET_TEXT_FONT(fontType);
	}

	void LUA_NATIVE_HUD_SET_TEXT_DROP_SHADOW(  )
	{
		HUD::SET_TEXT_DROP_SHADOW();
	}

	void LUA_NATIVE_HUD_SET_TEXT_DROPSHADOW( int distance, int r, int g, int b, int a )
	{
		HUD::SET_TEXT_DROPSHADOW(distance, r, g, b, a);
	}

	void LUA_NATIVE_HUD_SET_TEXT_OUTLINE(  )
	{
		HUD::SET_TEXT_OUTLINE();
	}

	void LUA_NATIVE_HUD_SET_TEXT_EDGE( int p0, int r, int g, int b, int a )
	{
		HUD::SET_TEXT_EDGE(p0, r, g, b, a);
	}

	void LUA_NATIVE_HUD_SET_TEXT_RENDER_ID( int renderId )
	{
		HUD::SET_TEXT_RENDER_ID(renderId);
	}

	int LUA_NATIVE_HUD_GET_DEFAULT_SCRIPT_RENDERTARGET_RENDER_ID(  )
	{
		auto retval = HUD::GET_DEFAULT_SCRIPT_RENDERTARGET_RENDER_ID();
		return retval;
	}

	bool LUA_NATIVE_HUD_REGISTER_NAMED_RENDERTARGET( const char* name, bool p1 )
	{
		auto retval = (bool)HUD::REGISTER_NAMED_RENDERTARGET(name, p1);
		return retval;
	}

	bool LUA_NATIVE_HUD_IS_NAMED_RENDERTARGET_REGISTERED( const char* name )
	{
		auto retval = (bool)HUD::IS_NAMED_RENDERTARGET_REGISTERED(name);
		return retval;
	}

	bool LUA_NATIVE_HUD_RELEASE_NAMED_RENDERTARGET( const char* name )
	{
		auto retval = (bool)HUD::RELEASE_NAMED_RENDERTARGET(name);
		return retval;
	}

	void LUA_NATIVE_HUD_LINK_NAMED_RENDERTARGET( Hash modelHash )
	{
		HUD::LINK_NAMED_RENDERTARGET(modelHash);
	}

	int LUA_NATIVE_HUD_GET_NAMED_RENDERTARGET_RENDER_ID( const char* name )
	{
		auto retval = HUD::GET_NAMED_RENDERTARGET_RENDER_ID(name);
		return retval;
	}

	bool LUA_NATIVE_HUD_IS_NAMED_RENDERTARGET_LINKED( Hash modelHash )
	{
		auto retval = (bool)HUD::IS_NAMED_RENDERTARGET_LINKED(modelHash);
		return retval;
	}

	void LUA_NATIVE_HUD_CLEAR_HELP( bool toggle )
	{
		HUD::CLEAR_HELP(toggle);
	}

	bool LUA_NATIVE_HUD_IS_HELP_MESSAGE_ON_SCREEN(  )
	{
		auto retval = (bool)HUD::IS_HELP_MESSAGE_ON_SCREEN();
		return retval;
	}

	bool LUA_NATIVE_HUD_HAS_SCRIPT_HIDDEN_HELP_THIS_FRAME(  )
	{
		auto retval = (bool)HUD::HAS_SCRIPT_HIDDEN_HELP_THIS_FRAME();
		return retval;
	}

	bool LUA_NATIVE_HUD_IS_HELP_MESSAGE_BEING_DISPLAYED(  )
	{
		auto retval = (bool)HUD::IS_HELP_MESSAGE_BEING_DISPLAYED();
		return retval;
	}

	bool LUA_NATIVE_HUD_IS_HELP_MESSAGE_FADING_OUT(  )
	{
		auto retval = (bool)HUD::IS_HELP_MESSAGE_FADING_OUT();
		return retval;
	}

	void LUA_NATIVE_HUD_SET_HELP_MESSAGE_STYLE( int style, int hudColor, int alpha, int p3, int p4 )
	{
		HUD::SET_HELP_MESSAGE_STYLE(style, hudColor, alpha, p3, p4);
	}

	int LUA_NATIVE_HUD_GET_STANDARD_BLIP_ENUM_ID(  )
	{
		auto retval = HUD::GET_STANDARD_BLIP_ENUM_ID();
		return retval;
	}

	int LUA_NATIVE_HUD_GET_WAYPOINT_BLIP_ENUM_ID(  )
	{
		auto retval = HUD::GET_WAYPOINT_BLIP_ENUM_ID();
		return retval;
	}

	int LUA_NATIVE_HUD_GET_NUMBER_OF_ACTIVE_BLIPS(  )
	{
		auto retval = HUD::GET_NUMBER_OF_ACTIVE_BLIPS();
		return retval;
	}

	Blip LUA_NATIVE_HUD_GET_NEXT_BLIP_INFO_ID( int blipSprite )
	{
		auto retval = HUD::GET_NEXT_BLIP_INFO_ID(blipSprite);
		return retval;
	}

	Blip LUA_NATIVE_HUD_GET_FIRST_BLIP_INFO_ID( int blipSprite )
	{
		auto retval = HUD::GET_FIRST_BLIP_INFO_ID(blipSprite);
		return retval;
	}

	Blip LUA_NATIVE_HUD_GET_CLOSEST_BLIP_INFO_ID( int blipSprite )
	{
		auto retval = HUD::GET_CLOSEST_BLIP_INFO_ID(blipSprite);
		return retval;
	}

	Vector3 LUA_NATIVE_HUD_GET_BLIP_INFO_ID_COORD( Blip blip )
	{
		auto retval = HUD::GET_BLIP_INFO_ID_COORD(blip);
		return retval;
	}

	int LUA_NATIVE_HUD_GET_BLIP_INFO_ID_DISPLAY( Blip blip )
	{
		auto retval = HUD::GET_BLIP_INFO_ID_DISPLAY(blip);
		return retval;
	}

	int LUA_NATIVE_HUD_GET_BLIP_INFO_ID_TYPE( Blip blip )
	{
		auto retval = HUD::GET_BLIP_INFO_ID_TYPE(blip);
		return retval;
	}

	Entity LUA_NATIVE_HUD_GET_BLIP_INFO_ID_ENTITY_INDEX( Blip blip )
	{
		auto retval = HUD::GET_BLIP_INFO_ID_ENTITY_INDEX(blip);
		return retval;
	}

	Pickup LUA_NATIVE_HUD_GET_BLIP_INFO_ID_PICKUP_INDEX( Blip blip )
	{
		auto retval = HUD::GET_BLIP_INFO_ID_PICKUP_INDEX(blip);
		return retval;
	}

	Blip LUA_NATIVE_HUD_GET_BLIP_FROM_ENTITY( Entity entity )
	{
		auto retval = HUD::GET_BLIP_FROM_ENTITY(entity);
		return retval;
	}

	Blip LUA_NATIVE_HUD_ADD_BLIP_FOR_RADIUS( float posX, float posY, float posZ, float radius )
	{
		auto retval = HUD::ADD_BLIP_FOR_RADIUS(posX, posY, posZ, radius);
		return retval;
	}

	Blip LUA_NATIVE_HUD_ADD_BLIP_FOR_AREA( float x, float y, float z, float width, float height )
	{
		auto retval = HUD::ADD_BLIP_FOR_AREA(x, y, z, width, height);
		return retval;
	}

	Blip LUA_NATIVE_HUD_ADD_BLIP_FOR_ENTITY( Entity entity )
	{
		auto retval = HUD::ADD_BLIP_FOR_ENTITY(entity);
		return retval;
	}

	Blip LUA_NATIVE_HUD_ADD_BLIP_FOR_PICKUP( Pickup pickup )
	{
		auto retval = HUD::ADD_BLIP_FOR_PICKUP(pickup);
		return retval;
	}

	Blip LUA_NATIVE_HUD_ADD_BLIP_FOR_COORD( float x, float y, float z )
	{
		auto retval = HUD::ADD_BLIP_FOR_COORD(x, y, z);
		return retval;
	}

	void LUA_NATIVE_HUD_TRIGGER_SONAR_BLIP( float posX, float posY, float posZ, float radius, int p4 )
	{
		HUD::TRIGGER_SONAR_BLIP(posX, posY, posZ, radius, p4);
	}

	void LUA_NATIVE_HUD_ALLOW_SONAR_BLIPS( bool toggle )
	{
		HUD::ALLOW_SONAR_BLIPS(toggle);
	}

	void LUA_NATIVE_HUD_SET_BLIP_COORDS( Blip blip, float posX, float posY, float posZ )
	{
		HUD::SET_BLIP_COORDS(blip, posX, posY, posZ);
	}

	Vector3 LUA_NATIVE_HUD_GET_BLIP_COORDS( Blip blip )
	{
		auto retval = HUD::GET_BLIP_COORDS(blip);
		return retval;
	}

	void LUA_NATIVE_HUD_SET_BLIP_SPRITE( Blip blip, int spriteId )
	{
		HUD::SET_BLIP_SPRITE(blip, spriteId);
	}

	int LUA_NATIVE_HUD_GET_BLIP_SPRITE( Blip blip )
	{
		auto retval = HUD::GET_BLIP_SPRITE(blip);
		return retval;
	}

	void LUA_NATIVE_HUD_SET_COP_BLIP_SPRITE( int p0, float p1 )
	{
		HUD::SET_COP_BLIP_SPRITE(p0, p1);
	}

	void LUA_NATIVE_HUD_SET_COP_BLIP_SPRITE_AS_STANDARD(  )
	{
		HUD::SET_COP_BLIP_SPRITE_AS_STANDARD();
	}

	void LUA_NATIVE_HUD_SET_BLIP_NAME_FROM_TEXT_FILE( Blip blip, const char* gxtEntry )
	{
		HUD::SET_BLIP_NAME_FROM_TEXT_FILE(blip, gxtEntry);
	}

	void LUA_NATIVE_HUD_SET_BLIP_NAME_TO_PLAYER_NAME( Blip blip, Player player )
	{
		HUD::SET_BLIP_NAME_TO_PLAYER_NAME(blip, player);
	}

	void LUA_NATIVE_HUD_SET_BLIP_ALPHA( Blip blip, int alpha )
	{
		HUD::SET_BLIP_ALPHA(blip, alpha);
	}

	int LUA_NATIVE_HUD_GET_BLIP_ALPHA( Blip blip )
	{
		auto retval = HUD::GET_BLIP_ALPHA(blip);
		return retval;
	}

	void LUA_NATIVE_HUD_SET_BLIP_FADE( Blip blip, int opacity, int duration )
	{
		HUD::SET_BLIP_FADE(blip, opacity, duration);
	}

	int LUA_NATIVE_HUD_GET_BLIP_FADE_DIRECTION( Blip blip )
	{
		auto retval = HUD::GET_BLIP_FADE_DIRECTION(blip);
		return retval;
	}

	void LUA_NATIVE_HUD_SET_BLIP_ROTATION( Blip blip, int rotation )
	{
		HUD::SET_BLIP_ROTATION(blip, rotation);
	}

	void LUA_NATIVE_HUD_SET_BLIP_ROTATION_WITH_FLOAT( Blip blip, float heading )
	{
		HUD::SET_BLIP_ROTATION_WITH_FLOAT(blip, heading);
	}

	int LUA_NATIVE_HUD_GET_BLIP_ROTATION( Blip blip )
	{
		auto retval = HUD::GET_BLIP_ROTATION(blip);
		return retval;
	}

	void LUA_NATIVE_HUD_SET_BLIP_FLASH_TIMER( Blip blip, int duration )
	{
		HUD::SET_BLIP_FLASH_TIMER(blip, duration);
	}

	void LUA_NATIVE_HUD_SET_BLIP_FLASH_INTERVAL( Blip blip, Any p1 )
	{
		HUD::SET_BLIP_FLASH_INTERVAL(blip, p1);
	}

	void LUA_NATIVE_HUD_SET_BLIP_COLOUR( Blip blip, int color )
	{
		HUD::SET_BLIP_COLOUR(blip, color);
	}

	void LUA_NATIVE_HUD_SET_BLIP_SECONDARY_COLOUR( Blip blip, int r, int g, int b )
	{
		HUD::SET_BLIP_SECONDARY_COLOUR(blip, r, g, b);
	}

	int LUA_NATIVE_HUD_GET_BLIP_COLOUR( Blip blip )
	{
		auto retval = HUD::GET_BLIP_COLOUR(blip);
		return retval;
	}

	int LUA_NATIVE_HUD_GET_BLIP_HUD_COLOUR( Blip blip )
	{
		auto retval = HUD::GET_BLIP_HUD_COLOUR(blip);
		return retval;
	}

	bool LUA_NATIVE_HUD_IS_BLIP_SHORT_RANGE( Blip blip )
	{
		auto retval = (bool)HUD::IS_BLIP_SHORT_RANGE(blip);
		return retval;
	}

	bool LUA_NATIVE_HUD_IS_BLIP_ON_MINIMAP( Blip blip )
	{
		auto retval = (bool)HUD::IS_BLIP_ON_MINIMAP(blip);
		return retval;
	}

	bool LUA_NATIVE_HUD_DOES_BLIP_HAVE_GPS_ROUTE( Blip blip )
	{
		auto retval = (bool)HUD::DOES_BLIP_HAVE_GPS_ROUTE(blip);
		return retval;
	}

	void LUA_NATIVE_HUD_SET_BLIP_HIDDEN_ON_LEGEND( Blip blip, bool toggle )
	{
		HUD::SET_BLIP_HIDDEN_ON_LEGEND(blip, toggle);
	}

	void LUA_NATIVE_HUD_SET_BLIP_HIGH_DETAIL( Blip blip, bool toggle )
	{
		HUD::SET_BLIP_HIGH_DETAIL(blip, toggle);
	}

	void LUA_NATIVE_HUD_SET_BLIP_AS_MISSION_CREATOR_BLIP( Blip blip, bool toggle )
	{
		HUD::SET_BLIP_AS_MISSION_CREATOR_BLIP(blip, toggle);
	}

	bool LUA_NATIVE_HUD_IS_MISSION_CREATOR_BLIP( Blip blip )
	{
		auto retval = (bool)HUD::IS_MISSION_CREATOR_BLIP(blip);
		return retval;
	}

	Blip LUA_NATIVE_HUD_GET_NEW_SELECTED_MISSION_CREATOR_BLIP(  )
	{
		auto retval = HUD::GET_NEW_SELECTED_MISSION_CREATOR_BLIP();
		return retval;
	}

	bool LUA_NATIVE_HUD_IS_HOVERING_OVER_MISSION_CREATOR_BLIP(  )
	{
		auto retval = (bool)HUD::IS_HOVERING_OVER_MISSION_CREATOR_BLIP();
		return retval;
	}

	void LUA_NATIVE_HUD_SHOW_START_MISSION_INSTRUCTIONAL_BUTTON( bool toggle )
	{
		HUD::SHOW_START_MISSION_INSTRUCTIONAL_BUTTON(toggle);
	}

	void LUA_NATIVE_HUD_SHOW_CONTACT_INSTRUCTIONAL_BUTTON( bool toggle )
	{
		HUD::SHOW_CONTACT_INSTRUCTIONAL_BUTTON(toggle);
	}

	void LUA_NATIVE_HUD_RELOAD_MAP_MENU(  )
	{
		HUD::RELOAD_MAP_MENU();
	}

	void LUA_NATIVE_HUD_SET_BLIP_MARKER_LONG_DISTANCE( Any p0, Any p1 )
	{
		HUD::SET_BLIP_MARKER_LONG_DISTANCE(p0, p1);
	}

	void LUA_NATIVE_HUD_SET_BLIP_FLASHES( Blip blip, bool toggle )
	{
		HUD::SET_BLIP_FLASHES(blip, toggle);
	}

	void LUA_NATIVE_HUD_SET_BLIP_FLASHES_ALTERNATE( Blip blip, bool toggle )
	{
		HUD::SET_BLIP_FLASHES_ALTERNATE(blip, toggle);
	}

	bool LUA_NATIVE_HUD_IS_BLIP_FLASHING( Blip blip )
	{
		auto retval = (bool)HUD::IS_BLIP_FLASHING(blip);
		return retval;
	}

	void LUA_NATIVE_HUD_SET_BLIP_AS_SHORT_RANGE( Blip blip, bool toggle )
	{
		HUD::SET_BLIP_AS_SHORT_RANGE(blip, toggle);
	}

	void LUA_NATIVE_HUD_SET_BLIP_SCALE( Blip blip, float scale )
	{
		HUD::SET_BLIP_SCALE(blip, scale);
	}

	void LUA_NATIVE_HUD_SET_BLIP_SCALE_2D( Blip blip, float xScale, float yScale )
	{
		HUD::SET_BLIP_SCALE_2D(blip, xScale, yScale);
	}

	void LUA_NATIVE_HUD_SET_BLIP_PRIORITY( Blip blip, int priority )
	{
		HUD::SET_BLIP_PRIORITY(blip, priority);
	}

	void LUA_NATIVE_HUD_SET_BLIP_DISPLAY( Blip blip, int displayId )
	{
		HUD::SET_BLIP_DISPLAY(blip, displayId);
	}

	void LUA_NATIVE_HUD_SET_BLIP_CATEGORY( Blip blip, int index )
	{
		HUD::SET_BLIP_CATEGORY(blip, index);
	}

	Blip LUA_NATIVE_HUD_REMOVE_BLIP( Blip blip )
	{
		HUD::REMOVE_BLIP(&blip);
		return blip;
	}

	void LUA_NATIVE_HUD_SET_BLIP_AS_FRIENDLY( Blip blip, bool toggle )
	{
		HUD::SET_BLIP_AS_FRIENDLY(blip, toggle);
	}

	void LUA_NATIVE_HUD_PULSE_BLIP( Blip blip )
	{
		HUD::PULSE_BLIP(blip);
	}

	void LUA_NATIVE_HUD_SHOW_NUMBER_ON_BLIP( Blip blip, int number )
	{
		HUD::SHOW_NUMBER_ON_BLIP(blip, number);
	}

	void LUA_NATIVE_HUD_HIDE_NUMBER_ON_BLIP( Blip blip )
	{
		HUD::HIDE_NUMBER_ON_BLIP(blip);
	}

	void LUA_NATIVE_HUD_SHOW_HEIGHT_ON_BLIP( Blip blip, bool toggle )
	{
		HUD::SHOW_HEIGHT_ON_BLIP(blip, toggle);
	}

	void LUA_NATIVE_HUD_SHOW_TICK_ON_BLIP( Blip blip, bool toggle )
	{
		HUD::SHOW_TICK_ON_BLIP(blip, toggle);
	}

	void LUA_NATIVE_HUD_SHOW_GOLD_TICK_ON_BLIP( Blip blip, bool toggle )
	{
		HUD::SHOW_GOLD_TICK_ON_BLIP(blip, toggle);
	}

	void LUA_NATIVE_HUD_SHOW_FOR_SALE_ICON_ON_BLIP( Blip blip, bool toggle )
	{
		HUD::SHOW_FOR_SALE_ICON_ON_BLIP(blip, toggle);
	}

	void LUA_NATIVE_HUD_SHOW_HEADING_INDICATOR_ON_BLIP( Blip blip, bool toggle )
	{
		HUD::SHOW_HEADING_INDICATOR_ON_BLIP(blip, toggle);
	}

	void LUA_NATIVE_HUD_SHOW_OUTLINE_INDICATOR_ON_BLIP( Blip blip, bool toggle )
	{
		HUD::SHOW_OUTLINE_INDICATOR_ON_BLIP(blip, toggle);
	}

	void LUA_NATIVE_HUD_SHOW_FRIEND_INDICATOR_ON_BLIP( Blip blip, bool toggle )
	{
		HUD::SHOW_FRIEND_INDICATOR_ON_BLIP(blip, toggle);
	}

	void LUA_NATIVE_HUD_SHOW_CREW_INDICATOR_ON_BLIP( Blip blip, bool toggle )
	{
		HUD::SHOW_CREW_INDICATOR_ON_BLIP(blip, toggle);
	}

	void LUA_NATIVE_HUD_SET_BLIP_EXTENDED_HEIGHT_THRESHOLD( Blip blip, bool toggle )
	{
		HUD::SET_BLIP_EXTENDED_HEIGHT_THRESHOLD(blip, toggle);
	}

	void LUA_NATIVE_HUD_SET_BLIP_SHORT_HEIGHT_THRESHOLD( Any p0, Any p1 )
	{
		HUD::SET_BLIP_SHORT_HEIGHT_THRESHOLD(p0, p1);
	}

	void LUA_NATIVE_HUD_SET_BLIP_USE_HEIGHT_INDICATOR_ON_EDGE( Blip blip, Any p1 )
	{
		HUD::SET_BLIP_USE_HEIGHT_INDICATOR_ON_EDGE(blip, p1);
	}

	void LUA_NATIVE_HUD_SET_BLIP_AS_MINIMAL_ON_EDGE( Blip blip, bool toggle )
	{
		HUD::SET_BLIP_AS_MINIMAL_ON_EDGE(blip, toggle);
	}

	void LUA_NATIVE_HUD_SET_RADIUS_BLIP_EDGE( Blip blip, bool toggle )
	{
		HUD::SET_RADIUS_BLIP_EDGE(blip, toggle);
	}

	bool LUA_NATIVE_HUD_DOES_BLIP_EXIST( Blip blip )
	{
		auto retval = (bool)HUD::DOES_BLIP_EXIST(blip);
		return retval;
	}

	void LUA_NATIVE_HUD_SET_WAYPOINT_OFF(  )
	{
		HUD::SET_WAYPOINT_OFF();
	}

	void LUA_NATIVE_HUD_DELETE_WAYPOINTS_FROM_THIS_PLAYER(  )
	{
		HUD::DELETE_WAYPOINTS_FROM_THIS_PLAYER();
	}

	void LUA_NATIVE_HUD_REFRESH_WAYPOINT(  )
	{
		HUD::REFRESH_WAYPOINT();
	}

	bool LUA_NATIVE_HUD_IS_WAYPOINT_ACTIVE(  )
	{
		auto retval = (bool)HUD::IS_WAYPOINT_ACTIVE();
		return retval;
	}

	void LUA_NATIVE_HUD_SET_NEW_WAYPOINT( float x, float y )
	{
		HUD::SET_NEW_WAYPOINT(x, y);
	}

	void LUA_NATIVE_HUD_SET_BLIP_BRIGHT( Blip blip, bool toggle )
	{
		HUD::SET_BLIP_BRIGHT(blip, toggle);
	}

	void LUA_NATIVE_HUD_SET_BLIP_SHOW_CONE( Blip blip, bool toggle, int hudColorIndex )
	{
		HUD::SET_BLIP_SHOW_CONE(blip, toggle, hudColorIndex);
	}

	void LUA_NATIVE_HUD_REMOVE_COP_BLIP_FROM_PED( Ped ped )
	{
		HUD::REMOVE_COP_BLIP_FROM_PED(ped);
	}

	void LUA_NATIVE_HUD_SETUP_FAKE_CONE_DATA( Blip blip, float p1, float p2, float p3, float p4, float p5, float p6, Any p7, int p8 )
	{
		HUD::SETUP_FAKE_CONE_DATA(blip, p1, p2, p3, p4, p5, p6, p7, p8);
	}

	void LUA_NATIVE_HUD_REMOVE_FAKE_CONE_DATA( Blip blip )
	{
		HUD::REMOVE_FAKE_CONE_DATA(blip);
	}

	void LUA_NATIVE_HUD_CLEAR_FAKE_CONE_ARRAY(  )
	{
		HUD::CLEAR_FAKE_CONE_ARRAY();
	}

	bool LUA_NATIVE_HUD_SET_MINIMAP_COMPONENT( int componentId, bool toggle, int overrideColor )
	{
		auto retval = (bool)HUD::SET_MINIMAP_COMPONENT(componentId, toggle, overrideColor);
		return retval;
	}

	void LUA_NATIVE_HUD_SET_MINIMAP_SONAR_SWEEP( bool toggle )
	{
		HUD::SET_MINIMAP_SONAR_SWEEP(toggle);
	}

	void LUA_NATIVE_HUD_SHOW_ACCOUNT_PICKER(  )
	{
		HUD::SHOW_ACCOUNT_PICKER();
	}

	Blip LUA_NATIVE_HUD_GET_MAIN_PLAYER_BLIP_ID(  )
	{
		auto retval = HUD::GET_MAIN_PLAYER_BLIP_ID();
		return retval;
	}

	void LUA_NATIVE_HUD_SET_PM_WARNINGSCREEN_ACTIVE( bool p0 )
	{
		HUD::SET_PM_WARNINGSCREEN_ACTIVE(p0);
	}

	void LUA_NATIVE_HUD_HIDE_LOADING_ON_FADE_THIS_FRAME(  )
	{
		HUD::HIDE_LOADING_ON_FADE_THIS_FRAME();
	}

	void LUA_NATIVE_HUD_SET_RADAR_AS_INTERIOR_THIS_FRAME( Hash interior, float x, float y, int z, int zoom )
	{
		HUD::SET_RADAR_AS_INTERIOR_THIS_FRAME(interior, x, y, z, zoom);
	}

	void LUA_NATIVE_HUD_SET_INSIDE_VERY_SMALL_INTERIOR( bool toggle )
	{
		HUD::SET_INSIDE_VERY_SMALL_INTERIOR(toggle);
	}

	void LUA_NATIVE_HUD_SET_INSIDE_VERY_LARGE_INTERIOR( bool toggle )
	{
		HUD::SET_INSIDE_VERY_LARGE_INTERIOR(toggle);
	}

	void LUA_NATIVE_HUD_SET_RADAR_AS_EXTERIOR_THIS_FRAME(  )
	{
		HUD::SET_RADAR_AS_EXTERIOR_THIS_FRAME();
	}

	void LUA_NATIVE_HUD_SET_FAKE_PAUSEMAP_PLAYER_POSITION_THIS_FRAME( float x, float y )
	{
		HUD::SET_FAKE_PAUSEMAP_PLAYER_POSITION_THIS_FRAME(x, y);
	}

	void LUA_NATIVE_HUD_SET_FAKE_GPS_PLAYER_POSITION_THIS_FRAME( float x, float y, Any p2 )
	{
		HUD::SET_FAKE_GPS_PLAYER_POSITION_THIS_FRAME(x, y, p2);
	}

	bool LUA_NATIVE_HUD_IS_PAUSEMAP_IN_INTERIOR_MODE(  )
	{
		auto retval = (bool)HUD::IS_PAUSEMAP_IN_INTERIOR_MODE();
		return retval;
	}

	void LUA_NATIVE_HUD_HIDE_MINIMAP_EXTERIOR_MAP_THIS_FRAME(  )
	{
		HUD::HIDE_MINIMAP_EXTERIOR_MAP_THIS_FRAME();
	}

	void LUA_NATIVE_HUD_HIDE_MINIMAP_INTERIOR_MAP_THIS_FRAME(  )
	{
		HUD::HIDE_MINIMAP_INTERIOR_MAP_THIS_FRAME();
	}

	void LUA_NATIVE_HUD_SET_USE_ISLAND_MAP( bool toggle )
	{
		HUD::SET_USE_ISLAND_MAP(toggle);
	}

	void LUA_NATIVE_HUD_SET_PAUSE_EXTERIOR_RENDERING_WHILE_IN_INTERIOR_(  )
	{
		HUD::SET_PAUSE_EXTERIOR_RENDERING_WHILE_IN_INTERIOR_();
	}

	void LUA_NATIVE_HUD_DONT_TILT_MINIMAP_THIS_FRAME(  )
	{
		HUD::DONT_TILT_MINIMAP_THIS_FRAME();
	}

	void LUA_NATIVE_HUD_DONT_ZOOM_MINIMAP_WHEN_RUNNING_THIS_FRAME(  )
	{
		HUD::DONT_ZOOM_MINIMAP_WHEN_RUNNING_THIS_FRAME();
	}

	void LUA_NATIVE_HUD_DONT_ZOOM_MINIMAP_WHEN_SNIPING_THIS_FRAME(  )
	{
		HUD::DONT_ZOOM_MINIMAP_WHEN_SNIPING_THIS_FRAME();
	}

	void LUA_NATIVE_HUD_SET_WIDESCREEN_FORMAT( Any p0 )
	{
		HUD::SET_WIDESCREEN_FORMAT(p0);
	}

	void LUA_NATIVE_HUD_DISPLAY_AREA_NAME( bool toggle )
	{
		HUD::DISPLAY_AREA_NAME(toggle);
	}

	void LUA_NATIVE_HUD_DISPLAY_CASH( bool toggle )
	{
		HUD::DISPLAY_CASH(toggle);
	}

	void LUA_NATIVE_HUD_USE_FAKE_MP_CASH( bool toggle )
	{
		HUD::USE_FAKE_MP_CASH(toggle);
	}

	void LUA_NATIVE_HUD_CHANGE_FAKE_MP_CASH( int cash, int bank )
	{
		HUD::CHANGE_FAKE_MP_CASH(cash, bank);
	}

	void LUA_NATIVE_HUD_DISPLAY_AMMO_THIS_FRAME( bool display )
	{
		HUD::DISPLAY_AMMO_THIS_FRAME(display);
	}

	void LUA_NATIVE_HUD_DISPLAY_SNIPER_SCOPE_THIS_FRAME(  )
	{
		HUD::DISPLAY_SNIPER_SCOPE_THIS_FRAME();
	}

	void LUA_NATIVE_HUD_HIDE_HUD_AND_RADAR_THIS_FRAME(  )
	{
		HUD::HIDE_HUD_AND_RADAR_THIS_FRAME();
	}

	void LUA_NATIVE_HUD_ALLOW_DISPLAY_OF_MULTIPLAYER_CASH_TEXT( bool allow )
	{
		HUD::ALLOW_DISPLAY_OF_MULTIPLAYER_CASH_TEXT(allow);
	}

	void LUA_NATIVE_HUD_SET_MULTIPLAYER_WALLET_CASH(  )
	{
		HUD::SET_MULTIPLAYER_WALLET_CASH();
	}

	void LUA_NATIVE_HUD_REMOVE_MULTIPLAYER_WALLET_CASH(  )
	{
		HUD::REMOVE_MULTIPLAYER_WALLET_CASH();
	}

	void LUA_NATIVE_HUD_SET_MULTIPLAYER_BANK_CASH(  )
	{
		HUD::SET_MULTIPLAYER_BANK_CASH();
	}

	void LUA_NATIVE_HUD_REMOVE_MULTIPLAYER_BANK_CASH(  )
	{
		HUD::REMOVE_MULTIPLAYER_BANK_CASH();
	}

	void LUA_NATIVE_HUD_SET_MULTIPLAYER_HUD_CASH( int p0, bool p1 )
	{
		HUD::SET_MULTIPLAYER_HUD_CASH(p0, p1);
	}

	void LUA_NATIVE_HUD_REMOVE_MULTIPLAYER_HUD_CASH(  )
	{
		HUD::REMOVE_MULTIPLAYER_HUD_CASH();
	}

	void LUA_NATIVE_HUD_HIDE_HELP_TEXT_THIS_FRAME(  )
	{
		HUD::HIDE_HELP_TEXT_THIS_FRAME();
	}

	bool LUA_NATIVE_HUD_IS_IME_IN_PROGRESS(  )
	{
		auto retval = (bool)HUD::IS_IME_IN_PROGRESS();
		return retval;
	}

	void LUA_NATIVE_HUD_DISPLAY_HELP_TEXT_THIS_FRAME( const char* message, bool p1 )
	{
		HUD::DISPLAY_HELP_TEXT_THIS_FRAME(message, p1);
	}

	void LUA_NATIVE_HUD_HUD_FORCE_WEAPON_WHEEL( bool show )
	{
		HUD::HUD_FORCE_WEAPON_WHEEL(show);
	}

	void LUA_NATIVE_HUD_HUD_FORCE_SPECIAL_VEHICLE_WEAPON_WHEEL(  )
	{
		HUD::HUD_FORCE_SPECIAL_VEHICLE_WEAPON_WHEEL();
	}

	void LUA_NATIVE_HUD_HUD_SUPPRESS_WEAPON_WHEEL_RESULTS_THIS_FRAME(  )
	{
		HUD::HUD_SUPPRESS_WEAPON_WHEEL_RESULTS_THIS_FRAME();
	}

	Hash LUA_NATIVE_HUD_HUD_GET_WEAPON_WHEEL_CURRENTLY_HIGHLIGHTED(  )
	{
		auto retval = HUD::HUD_GET_WEAPON_WHEEL_CURRENTLY_HIGHLIGHTED();
		return retval;
	}

	void LUA_NATIVE_HUD_HUD_SET_WEAPON_WHEEL_TOP_SLOT( Hash weaponHash )
	{
		HUD::HUD_SET_WEAPON_WHEEL_TOP_SLOT(weaponHash);
	}

	Hash LUA_NATIVE_HUD_HUD_GET_WEAPON_WHEEL_TOP_SLOT( int weaponTypeIndex )
	{
		auto retval = HUD::HUD_GET_WEAPON_WHEEL_TOP_SLOT(weaponTypeIndex);
		return retval;
	}

	void LUA_NATIVE_HUD_HUD_SHOWING_CHARACTER_SWITCH_SELECTION( bool toggle )
	{
		HUD::HUD_SHOWING_CHARACTER_SWITCH_SELECTION(toggle);
	}

	void LUA_NATIVE_HUD_SET_GPS_FLAGS( int p0, float p1 )
	{
		HUD::SET_GPS_FLAGS(p0, p1);
	}

	void LUA_NATIVE_HUD_CLEAR_GPS_FLAGS(  )
	{
		HUD::CLEAR_GPS_FLAGS();
	}

	void LUA_NATIVE_HUD_SET_RACE_TRACK_RENDER( bool toggle )
	{
		HUD::SET_RACE_TRACK_RENDER(toggle);
	}

	void LUA_NATIVE_HUD_CLEAR_GPS_RACE_TRACK(  )
	{
		HUD::CLEAR_GPS_RACE_TRACK();
	}

	void LUA_NATIVE_HUD_START_GPS_CUSTOM_ROUTE( int hudColor, bool displayOnFoot, bool followPlayer )
	{
		HUD::START_GPS_CUSTOM_ROUTE(hudColor, displayOnFoot, followPlayer);
	}

	void LUA_NATIVE_HUD_ADD_POINT_TO_GPS_CUSTOM_ROUTE( float x, float y, float z )
	{
		HUD::ADD_POINT_TO_GPS_CUSTOM_ROUTE(x, y, z);
	}

	void LUA_NATIVE_HUD_SET_GPS_CUSTOM_ROUTE_RENDER( bool toggle, int radarThickness, int mapThickness )
	{
		HUD::SET_GPS_CUSTOM_ROUTE_RENDER(toggle, radarThickness, mapThickness);
	}

	void LUA_NATIVE_HUD_CLEAR_GPS_CUSTOM_ROUTE(  )
	{
		HUD::CLEAR_GPS_CUSTOM_ROUTE();
	}

	void LUA_NATIVE_HUD_START_GPS_MULTI_ROUTE( int hudColor, bool routeFromPlayer, bool displayOnFoot )
	{
		HUD::START_GPS_MULTI_ROUTE(hudColor, routeFromPlayer, displayOnFoot);
	}

	void LUA_NATIVE_HUD_ADD_POINT_TO_GPS_MULTI_ROUTE( float x, float y, float z )
	{
		HUD::ADD_POINT_TO_GPS_MULTI_ROUTE(x, y, z);
	}

	void LUA_NATIVE_HUD_SET_GPS_MULTI_ROUTE_RENDER( bool toggle )
	{
		HUD::SET_GPS_MULTI_ROUTE_RENDER(toggle);
	}

	void LUA_NATIVE_HUD_CLEAR_GPS_MULTI_ROUTE(  )
	{
		HUD::CLEAR_GPS_MULTI_ROUTE();
	}

	void LUA_NATIVE_HUD_CLEAR_GPS_PLAYER_WAYPOINT(  )
	{
		HUD::CLEAR_GPS_PLAYER_WAYPOINT();
	}

	void LUA_NATIVE_HUD_SET_GPS_FLASHES( bool toggle )
	{
		HUD::SET_GPS_FLASHES(toggle);
	}

	void LUA_NATIVE_HUD_SET_PLAYER_ICON_COLOUR( int color )
	{
		HUD::SET_PLAYER_ICON_COLOUR(color);
	}

	void LUA_NATIVE_HUD_FLASH_MINIMAP_DISPLAY(  )
	{
		HUD::FLASH_MINIMAP_DISPLAY();
	}

	void LUA_NATIVE_HUD_FLASH_MINIMAP_DISPLAY_WITH_COLOR( int hudColorIndex )
	{
		HUD::FLASH_MINIMAP_DISPLAY_WITH_COLOR(hudColorIndex);
	}

	void LUA_NATIVE_HUD_TOGGLE_STEALTH_RADAR( bool toggle )
	{
		HUD::TOGGLE_STEALTH_RADAR(toggle);
	}

	void LUA_NATIVE_HUD_SET_MINIMAP_IN_SPECTATOR_MODE( bool toggle, Ped ped )
	{
		HUD::SET_MINIMAP_IN_SPECTATOR_MODE(toggle, ped);
	}

	void LUA_NATIVE_HUD_SET_MISSION_NAME( bool p0, const char* name )
	{
		HUD::SET_MISSION_NAME(p0, name);
	}

	void LUA_NATIVE_HUD_SET_MISSION_NAME_FOR_UGC_MISSION( bool p0, const char* name )
	{
		HUD::SET_MISSION_NAME_FOR_UGC_MISSION(p0, name);
	}

	void LUA_NATIVE_HUD_SET_DESCRIPTION_FOR_UGC_MISSION_EIGHT_STRINGS( bool p0, const char* p1, const char* p2, const char* p3, const char* p4, const char* p5, const char* p6, const char* p7, const char* p8 )
	{
		HUD::SET_DESCRIPTION_FOR_UGC_MISSION_EIGHT_STRINGS(p0, p1, p2, p3, p4, p5, p6, p7, p8);
	}

	void LUA_NATIVE_HUD_SET_MINIMAP_BLOCK_WAYPOINT( bool toggle )
	{
		HUD::SET_MINIMAP_BLOCK_WAYPOINT(toggle);
	}

	void LUA_NATIVE_HUD_SET_MINIMAP_IN_PROLOGUE( bool toggle )
	{
		HUD::SET_MINIMAP_IN_PROLOGUE(toggle);
	}

	void LUA_NATIVE_HUD_SET_MINIMAP_HIDE_FOW( bool toggle )
	{
		HUD::SET_MINIMAP_HIDE_FOW(toggle);
	}

	float LUA_NATIVE_HUD_GET_MINIMAP_FOW_DISCOVERY_RATIO(  )
	{
		auto retval = HUD::GET_MINIMAP_FOW_DISCOVERY_RATIO();
		return retval;
	}

	bool LUA_NATIVE_HUD_GET_MINIMAP_FOW_COORDINATE_IS_REVEALED( float x, float y, float z )
	{
		auto retval = (bool)HUD::GET_MINIMAP_FOW_COORDINATE_IS_REVEALED(x, y, z);
		return retval;
	}

	void LUA_NATIVE_HUD_SET_MINIMAP_FOW_DO_NOT_UPDATE( bool p0 )
	{
		HUD::SET_MINIMAP_FOW_DO_NOT_UPDATE(p0);
	}

	void LUA_NATIVE_HUD_SET_MINIMAP_FOW_REVEAL_COORDINATE( float x, float y, float z )
	{
		HUD::SET_MINIMAP_FOW_REVEAL_COORDINATE(x, y, z);
	}

	void LUA_NATIVE_HUD_SET_MINIMAP_GOLF_COURSE( int hole )
	{
		HUD::SET_MINIMAP_GOLF_COURSE(hole);
	}

	void LUA_NATIVE_HUD_SET_MINIMAP_GOLF_COURSE_OFF(  )
	{
		HUD::SET_MINIMAP_GOLF_COURSE_OFF();
	}

	void LUA_NATIVE_HUD_LOCK_MINIMAP_ANGLE( int angle )
	{
		HUD::LOCK_MINIMAP_ANGLE(angle);
	}

	void LUA_NATIVE_HUD_UNLOCK_MINIMAP_ANGLE(  )
	{
		HUD::UNLOCK_MINIMAP_ANGLE();
	}

	void LUA_NATIVE_HUD_LOCK_MINIMAP_POSITION( float x, float y )
	{
		HUD::LOCK_MINIMAP_POSITION(x, y);
	}

	void LUA_NATIVE_HUD_UNLOCK_MINIMAP_POSITION(  )
	{
		HUD::UNLOCK_MINIMAP_POSITION();
	}

	void LUA_NATIVE_HUD_SET_FAKE_MINIMAP_MAX_ALTIMETER_HEIGHT( float altitude, bool p1, Any p2 )
	{
		HUD::SET_FAKE_MINIMAP_MAX_ALTIMETER_HEIGHT(altitude, p1, p2);
	}

	void LUA_NATIVE_HUD_SET_HEALTH_HUD_DISPLAY_VALUES( int health, int capacity, bool wasAdded )
	{
		HUD::SET_HEALTH_HUD_DISPLAY_VALUES(health, capacity, wasAdded);
	}

	void LUA_NATIVE_HUD_SET_MAX_HEALTH_HUD_DISPLAY( int maximumValue )
	{
		HUD::SET_MAX_HEALTH_HUD_DISPLAY(maximumValue);
	}

	void LUA_NATIVE_HUD_SET_MAX_ARMOUR_HUD_DISPLAY( int maximumValue )
	{
		HUD::SET_MAX_ARMOUR_HUD_DISPLAY(maximumValue);
	}

	void LUA_NATIVE_HUD_SET_BIGMAP_ACTIVE( bool toggleBigMap, bool showFullMap )
	{
		HUD::SET_BIGMAP_ACTIVE(toggleBigMap, showFullMap);
	}

	bool LUA_NATIVE_HUD_IS_HUD_COMPONENT_ACTIVE( int id )
	{
		auto retval = (bool)HUD::IS_HUD_COMPONENT_ACTIVE(id);
		return retval;
	}

	bool LUA_NATIVE_HUD_IS_SCRIPTED_HUD_COMPONENT_ACTIVE( int id )
	{
		auto retval = (bool)HUD::IS_SCRIPTED_HUD_COMPONENT_ACTIVE(id);
		return retval;
	}

	void LUA_NATIVE_HUD_HIDE_SCRIPTED_HUD_COMPONENT_THIS_FRAME( int id )
	{
		HUD::HIDE_SCRIPTED_HUD_COMPONENT_THIS_FRAME(id);
	}

	void LUA_NATIVE_HUD_SHOW_SCRIPTED_HUD_COMPONENT_THIS_FRAME( int id )
	{
		HUD::SHOW_SCRIPTED_HUD_COMPONENT_THIS_FRAME(id);
	}

	bool LUA_NATIVE_HUD_IS_SCRIPTED_HUD_COMPONENT_HIDDEN_THIS_FRAME( int id )
	{
		auto retval = (bool)HUD::IS_SCRIPTED_HUD_COMPONENT_HIDDEN_THIS_FRAME(id);
		return retval;
	}

	void LUA_NATIVE_HUD_HIDE_HUD_COMPONENT_THIS_FRAME( int id )
	{
		HUD::HIDE_HUD_COMPONENT_THIS_FRAME(id);
	}

	void LUA_NATIVE_HUD_SHOW_HUD_COMPONENT_THIS_FRAME( int id )
	{
		HUD::SHOW_HUD_COMPONENT_THIS_FRAME(id);
	}

	void LUA_NATIVE_HUD_HIDE_STREET_AND_CAR_NAMES_THIS_FRAME(  )
	{
		HUD::HIDE_STREET_AND_CAR_NAMES_THIS_FRAME();
	}

	void LUA_NATIVE_HUD_RESET_RETICULE_VALUES(  )
	{
		HUD::RESET_RETICULE_VALUES();
	}

	void LUA_NATIVE_HUD_RESET_HUD_COMPONENT_VALUES( int id )
	{
		HUD::RESET_HUD_COMPONENT_VALUES(id);
	}

	void LUA_NATIVE_HUD_SET_HUD_COMPONENT_POSITION( int id, float x, float y )
	{
		HUD::SET_HUD_COMPONENT_POSITION(id, x, y);
	}

	Vector3 LUA_NATIVE_HUD_GET_HUD_COMPONENT_POSITION( int id )
	{
		auto retval = HUD::GET_HUD_COMPONENT_POSITION(id);
		return retval;
	}

	void LUA_NATIVE_HUD_CLEAR_REMINDER_MESSAGE(  )
	{
		HUD::CLEAR_REMINDER_MESSAGE();
	}

	std::tuple<int, float, float> LUA_NATIVE_HUD_GET_HUD_SCREEN_POSITION_FROM_WORLD_POSITION( float worldX, float worldY, float worldZ, float screenX, float screenY )
	{
		std::tuple<int, float, float> return_values;
		std::get<0>(return_values) = HUD::GET_HUD_SCREEN_POSITION_FROM_WORLD_POSITION(worldX, worldY, worldZ, &screenX, &screenY);
		std::get<1>(return_values) = screenX;
		std::get<2>(return_values) = screenY;

		return return_values;
	}

	void LUA_NATIVE_HUD_OPEN_REPORTUGC_MENU(  )
	{
		HUD::OPEN_REPORTUGC_MENU();
	}

	void LUA_NATIVE_HUD_FORCE_CLOSE_REPORTUGC_MENU(  )
	{
		HUD::FORCE_CLOSE_REPORTUGC_MENU();
	}

	bool LUA_NATIVE_HUD_IS_REPORTUGC_MENU_OPEN(  )
	{
		auto retval = (bool)HUD::IS_REPORTUGC_MENU_OPEN();
		return retval;
	}

	bool LUA_NATIVE_HUD_IS_FLOATING_HELP_TEXT_ON_SCREEN( int hudIndex )
	{
		auto retval = (bool)HUD::IS_FLOATING_HELP_TEXT_ON_SCREEN(hudIndex);
		return retval;
	}

	void LUA_NATIVE_HUD_SET_FLOATING_HELP_TEXT_SCREEN_POSITION( int hudIndex, float x, float y )
	{
		HUD::SET_FLOATING_HELP_TEXT_SCREEN_POSITION(hudIndex, x, y);
	}

	void LUA_NATIVE_HUD_SET_FLOATING_HELP_TEXT_WORLD_POSITION( int hudIndex, float x, float y, float z )
	{
		HUD::SET_FLOATING_HELP_TEXT_WORLD_POSITION(hudIndex, x, y, z);
	}

	void LUA_NATIVE_HUD_SET_FLOATING_HELP_TEXT_TO_ENTITY( int hudIndex, Entity entity, float offsetX, float offsetY )
	{
		HUD::SET_FLOATING_HELP_TEXT_TO_ENTITY(hudIndex, entity, offsetX, offsetY);
	}

	void LUA_NATIVE_HUD_SET_FLOATING_HELP_TEXT_STYLE( int hudIndex, int p1, int p2, int p3, int p4, int p5 )
	{
		HUD::SET_FLOATING_HELP_TEXT_STYLE(hudIndex, p1, p2, p3, p4, p5);
	}

	void LUA_NATIVE_HUD_CLEAR_FLOATING_HELP( int hudIndex, bool p1 )
	{
		HUD::CLEAR_FLOATING_HELP(hudIndex, p1);
	}

	void LUA_NATIVE_HUD_CREATE_MP_GAMER_TAG_WITH_CREW_COLOR( Player player, const char* username, bool pointedClanTag, bool isRockstarClan, const char* clanTag, int clanFlag, int r, int g, int b )
	{
		HUD::CREATE_MP_GAMER_TAG_WITH_CREW_COLOR(player, username, pointedClanTag, isRockstarClan, clanTag, clanFlag, r, g, b);
	}

	bool LUA_NATIVE_HUD_IS_MP_GAMER_TAG_MOVIE_ACTIVE(  )
	{
		auto retval = (bool)HUD::IS_MP_GAMER_TAG_MOVIE_ACTIVE();
		return retval;
	}

	int LUA_NATIVE_HUD_CREATE_FAKE_MP_GAMER_TAG( Ped ped, const char* username, bool pointedClanTag, bool isRockstarClan, const char* clanTag, int clanFlag )
	{
		auto retval = HUD::CREATE_FAKE_MP_GAMER_TAG(ped, username, pointedClanTag, isRockstarClan, clanTag, clanFlag);
		return retval;
	}

	void LUA_NATIVE_HUD_REMOVE_MP_GAMER_TAG( int gamerTagId )
	{
		HUD::REMOVE_MP_GAMER_TAG(gamerTagId);
	}

	bool LUA_NATIVE_HUD_IS_MP_GAMER_TAG_ACTIVE( int gamerTagId )
	{
		auto retval = (bool)HUD::IS_MP_GAMER_TAG_ACTIVE(gamerTagId);
		return retval;
	}

	bool LUA_NATIVE_HUD_IS_MP_GAMER_TAG_FREE( int gamerTagId )
	{
		auto retval = (bool)HUD::IS_MP_GAMER_TAG_FREE(gamerTagId);
		return retval;
	}

	void LUA_NATIVE_HUD_SET_MP_GAMER_TAG_VISIBILITY( int gamerTagId, int component, bool toggle, Any p3 )
	{
		HUD::SET_MP_GAMER_TAG_VISIBILITY(gamerTagId, component, toggle, p3);
	}

	void LUA_NATIVE_HUD_SET_ALL_MP_GAMER_TAGS_VISIBILITY( int gamerTagId, bool toggle )
	{
		HUD::SET_ALL_MP_GAMER_TAGS_VISIBILITY(gamerTagId, toggle);
	}

	void LUA_NATIVE_HUD_SET_MP_GAMER_TAGS_SHOULD_USE_VEHICLE_HEALTH( int gamerTagId, bool toggle )
	{
		HUD::SET_MP_GAMER_TAGS_SHOULD_USE_VEHICLE_HEALTH(gamerTagId, toggle);
	}

	void LUA_NATIVE_HUD_SET_MP_GAMER_TAGS_SHOULD_USE_POINTS_HEALTH( int gamerTagId, bool toggle )
	{
		HUD::SET_MP_GAMER_TAGS_SHOULD_USE_POINTS_HEALTH(gamerTagId, toggle);
	}

	void LUA_NATIVE_HUD_SET_MP_GAMER_TAGS_POINT_HEALTH( int gamerTagId, int value, int maximumValue )
	{
		HUD::SET_MP_GAMER_TAGS_POINT_HEALTH(gamerTagId, value, maximumValue);
	}

	void LUA_NATIVE_HUD_SET_MP_GAMER_TAG_COLOUR( int gamerTagId, int component, int hudColorIndex )
	{
		HUD::SET_MP_GAMER_TAG_COLOUR(gamerTagId, component, hudColorIndex);
	}

	void LUA_NATIVE_HUD_SET_MP_GAMER_TAG_HEALTH_BAR_COLOUR( int gamerTagId, int hudColorIndex )
	{
		HUD::SET_MP_GAMER_TAG_HEALTH_BAR_COLOUR(gamerTagId, hudColorIndex);
	}

	void LUA_NATIVE_HUD_SET_MP_GAMER_TAG_ALPHA( int gamerTagId, int component, int alpha )
	{
		HUD::SET_MP_GAMER_TAG_ALPHA(gamerTagId, component, alpha);
	}

	void LUA_NATIVE_HUD_SET_MP_GAMER_TAG_WANTED_LEVEL( int gamerTagId, int wantedlvl )
	{
		HUD::SET_MP_GAMER_TAG_WANTED_LEVEL(gamerTagId, wantedlvl);
	}

	void LUA_NATIVE_HUD_SET_MP_GAMER_TAG_NUM_PACKAGES( int gamerTagId, int p1 )
	{
		HUD::SET_MP_GAMER_TAG_NUM_PACKAGES(gamerTagId, p1);
	}

	void LUA_NATIVE_HUD_SET_MP_GAMER_TAG_NAME( int gamerTagId, const char* string )
	{
		HUD::SET_MP_GAMER_TAG_NAME(gamerTagId, string);
	}

	bool LUA_NATIVE_HUD_IS_UPDATING_MP_GAMER_TAG_NAME_AND_CREW_DETAILS( int gamerTagId )
	{
		auto retval = (bool)HUD::IS_UPDATING_MP_GAMER_TAG_NAME_AND_CREW_DETAILS(gamerTagId);
		return retval;
	}

	void LUA_NATIVE_HUD_SET_MP_GAMER_TAG_BIG_TEXT( int gamerTagId, const char* string )
	{
		HUD::SET_MP_GAMER_TAG_BIG_TEXT(gamerTagId, string);
	}

	int LUA_NATIVE_HUD_GET_CURRENT_WEBPAGE_ID(  )
	{
		auto retval = HUD::GET_CURRENT_WEBPAGE_ID();
		return retval;
	}

	int LUA_NATIVE_HUD_GET_CURRENT_WEBSITE_ID(  )
	{
		auto retval = HUD::GET_CURRENT_WEBSITE_ID();
		return retval;
	}

	int LUA_NATIVE_HUD_GET_GLOBAL_ACTIONSCRIPT_FLAG( int flagIndex )
	{
		auto retval = HUD::GET_GLOBAL_ACTIONSCRIPT_FLAG(flagIndex);
		return retval;
	}

	void LUA_NATIVE_HUD_RESET_GLOBAL_ACTIONSCRIPT_FLAG( int flagIndex )
	{
		HUD::RESET_GLOBAL_ACTIONSCRIPT_FLAG(flagIndex);
	}

	bool LUA_NATIVE_HUD_IS_WARNING_MESSAGE_READY_FOR_CONTROL(  )
	{
		auto retval = (bool)HUD::IS_WARNING_MESSAGE_READY_FOR_CONTROL();
		return retval;
	}

	void LUA_NATIVE_HUD_SET_WARNING_MESSAGE( const char* titleMsg, int flags, const char* promptMsg, bool p3, int p4, const char* p5, const char* p6, bool showBackground, int errorCode )
	{
		HUD::SET_WARNING_MESSAGE(titleMsg, flags, promptMsg, p3, p4, p5, p6, showBackground, errorCode);
	}

	std::tuple<Any, Any> LUA_NATIVE_HUD_SET_WARNING_MESSAGE_WITH_HEADER( const char* entryHeader, const char* entryLine1, int instructionalKey, const char* entryLine2, bool p4, Any p5, Any showBackground, Any p7, bool p8, Any p9 )
	{
		std::tuple<Any, Any> return_values;
		HUD::SET_WARNING_MESSAGE_WITH_HEADER(entryHeader, entryLine1, instructionalKey, entryLine2, p4, p5, &showBackground, &p7, p8, p9);
		std::get<0>(return_values) = showBackground;
		std::get<1>(return_values) = p7;

		return return_values;
	}

	void LUA_NATIVE_HUD_SET_WARNING_MESSAGE_WITH_HEADER_AND_SUBSTRING_FLAGS( const char* entryHeader, const char* entryLine1, int instructionalKey, const char* entryLine2, bool p4, Any p5, Any additionalIntInfo, const char* additionalTextInfoLine1, const char* additionalTextInfoLine2, bool showBackground, int errorCode )
	{
		HUD::SET_WARNING_MESSAGE_WITH_HEADER_AND_SUBSTRING_FLAGS(entryHeader, entryLine1, instructionalKey, entryLine2, p4, p5, additionalIntInfo, additionalTextInfoLine1, additionalTextInfoLine2, showBackground, errorCode);
	}

	std::tuple<Any, Any> LUA_NATIVE_HUD_SET_WARNING_MESSAGE_WITH_HEADER_EXTENDED( const char* entryHeader, const char* entryLine1, int flags, const char* entryLine2, bool p4, Any p5, Any p6, Any p7, bool showBg, Any p9, Any p10 )
	{
		std::tuple<Any, Any> return_values;
		HUD::SET_WARNING_MESSAGE_WITH_HEADER_EXTENDED(entryHeader, entryLine1, flags, entryLine2, p4, p5, &p6, &p7, showBg, p9, p10);
		std::get<0>(return_values) = p6;
		std::get<1>(return_values) = p7;

		return return_values;
	}

	void LUA_NATIVE_HUD_SET_WARNING_MESSAGE_WITH_HEADER_AND_SUBSTRING_FLAGS_EXTENDED( const char* labelTitle, const char* labelMessage, int p2, int p3, const char* labelMessage2, bool p5, int p6, int p7, const char* p8, const char* p9, bool background, int errorCode )
	{
		HUD::SET_WARNING_MESSAGE_WITH_HEADER_AND_SUBSTRING_FLAGS_EXTENDED(labelTitle, labelMessage, p2, p3, labelMessage2, p5, p6, p7, p8, p9, background, errorCode);
	}

	Hash LUA_NATIVE_HUD_GET_WARNING_SCREEN_MESSAGE_HASH(  )
	{
		auto retval = HUD::GET_WARNING_SCREEN_MESSAGE_HASH();
		return retval;
	}

	bool LUA_NATIVE_HUD_SET_WARNING_MESSAGE_OPTION_ITEMS( int index, const char* name, int cash, int rp, int lvl, int colour )
	{
		auto retval = (bool)HUD::SET_WARNING_MESSAGE_OPTION_ITEMS(index, name, cash, rp, lvl, colour);
		return retval;
	}

	bool LUA_NATIVE_HUD_SET_WARNING_MESSAGE_OPTION_HIGHLIGHT( Any p0 )
	{
		auto retval = (bool)HUD::SET_WARNING_MESSAGE_OPTION_HIGHLIGHT(p0);
		return retval;
	}

	void LUA_NATIVE_HUD_REMOVE_WARNING_MESSAGE_OPTION_ITEMS(  )
	{
		HUD::REMOVE_WARNING_MESSAGE_OPTION_ITEMS();
	}

	bool LUA_NATIVE_HUD_IS_WARNING_MESSAGE_ACTIVE(  )
	{
		auto retval = (bool)HUD::IS_WARNING_MESSAGE_ACTIVE();
		return retval;
	}

	void LUA_NATIVE_HUD_CLEAR_DYNAMIC_PAUSE_MENU_ERROR_MESSAGE(  )
	{
		HUD::CLEAR_DYNAMIC_PAUSE_MENU_ERROR_MESSAGE();
	}

	void LUA_NATIVE_HUD_CUSTOM_MINIMAP_SET_ACTIVE( bool toggle )
	{
		HUD::CUSTOM_MINIMAP_SET_ACTIVE(toggle);
	}

	void LUA_NATIVE_HUD_CUSTOM_MINIMAP_SET_BLIP_OBJECT( int spriteId )
	{
		HUD::CUSTOM_MINIMAP_SET_BLIP_OBJECT(spriteId);
	}

	int LUA_NATIVE_HUD_CUSTOM_MINIMAP_CREATE_BLIP( float x, float y, float z )
	{
		auto retval = HUD::CUSTOM_MINIMAP_CREATE_BLIP(x, y, z);
		return retval;
	}

	void LUA_NATIVE_HUD_CUSTOM_MINIMAP_CLEAR_BLIPS(  )
	{
		HUD::CUSTOM_MINIMAP_CLEAR_BLIPS();
	}

	bool LUA_NATIVE_HUD_FORCE_SONAR_BLIPS_THIS_FRAME(  )
	{
		auto retval = (bool)HUD::FORCE_SONAR_BLIPS_THIS_FRAME();
		return retval;
	}

	Blip LUA_NATIVE_HUD_GET_NORTH_BLID_INDEX(  )
	{
		auto retval = HUD::GET_NORTH_BLID_INDEX();
		return retval;
	}

	void LUA_NATIVE_HUD_DISPLAY_PLAYER_NAME_TAGS_ON_BLIPS( bool toggle )
	{
		HUD::DISPLAY_PLAYER_NAME_TAGS_ON_BLIPS(toggle);
	}

	void LUA_NATIVE_HUD_DRAW_FRONTEND_BACKGROUND_THIS_FRAME(  )
	{
		HUD::DRAW_FRONTEND_BACKGROUND_THIS_FRAME();
	}

	void LUA_NATIVE_HUD_DRAW_HUD_OVER_FADE_THIS_FRAME(  )
	{
		HUD::DRAW_HUD_OVER_FADE_THIS_FRAME();
	}

	void LUA_NATIVE_HUD_ACTIVATE_FRONTEND_MENU( Hash menuhash, bool togglePause, int component )
	{
		HUD::ACTIVATE_FRONTEND_MENU(menuhash, togglePause, component);
	}

	void LUA_NATIVE_HUD_RESTART_FRONTEND_MENU( Hash menuHash, int p1 )
	{
		HUD::RESTART_FRONTEND_MENU(menuHash, p1);
	}

	Hash LUA_NATIVE_HUD_GET_CURRENT_FRONTEND_MENU_VERSION(  )
	{
		auto retval = HUD::GET_CURRENT_FRONTEND_MENU_VERSION();
		return retval;
	}

	void LUA_NATIVE_HUD_SET_PAUSE_MENU_ACTIVE( bool toggle )
	{
		HUD::SET_PAUSE_MENU_ACTIVE(toggle);
	}

	void LUA_NATIVE_HUD_DISABLE_FRONTEND_THIS_FRAME(  )
	{
		HUD::DISABLE_FRONTEND_THIS_FRAME();
	}

	void LUA_NATIVE_HUD_SUPPRESS_FRONTEND_RENDERING_THIS_FRAME(  )
	{
		HUD::SUPPRESS_FRONTEND_RENDERING_THIS_FRAME();
	}

	void LUA_NATIVE_HUD_ALLOW_PAUSE_WHEN_NOT_IN_STATE_OF_PLAY_THIS_FRAME(  )
	{
		HUD::ALLOW_PAUSE_WHEN_NOT_IN_STATE_OF_PLAY_THIS_FRAME();
	}

	void LUA_NATIVE_HUD_SET_FRONTEND_ACTIVE( bool active )
	{
		HUD::SET_FRONTEND_ACTIVE(active);
	}

	bool LUA_NATIVE_HUD_IS_PAUSE_MENU_ACTIVE(  )
	{
		auto retval = (bool)HUD::IS_PAUSE_MENU_ACTIVE();
		return retval;
	}

	bool LUA_NATIVE_HUD_IS_STORE_PENDING_NETWORK_SHUTDOWN_TO_OPEN(  )
	{
		auto retval = (bool)HUD::IS_STORE_PENDING_NETWORK_SHUTDOWN_TO_OPEN();
		return retval;
	}

	int LUA_NATIVE_HUD_GET_PAUSE_MENU_STATE(  )
	{
		auto retval = HUD::GET_PAUSE_MENU_STATE();
		return retval;
	}

	Vector3 LUA_NATIVE_HUD_GET_PAUSE_MENU_POSITION(  )
	{
		auto retval = HUD::GET_PAUSE_MENU_POSITION();
		return retval;
	}

	bool LUA_NATIVE_HUD_IS_PAUSE_MENU_RESTARTING(  )
	{
		auto retval = (bool)HUD::IS_PAUSE_MENU_RESTARTING();
		return retval;
	}

	void LUA_NATIVE_HUD_FORCE_SCRIPTED_GFX_WHEN_FRONTEND_ACTIVE( const char* p0 )
	{
		HUD::FORCE_SCRIPTED_GFX_WHEN_FRONTEND_ACTIVE(p0);
	}

	void LUA_NATIVE_HUD_PAUSE_MENUCEPTION_GO_DEEPER( int page )
	{
		HUD::PAUSE_MENUCEPTION_GO_DEEPER(page);
	}

	void LUA_NATIVE_HUD_PAUSE_MENUCEPTION_THE_KICK(  )
	{
		HUD::PAUSE_MENUCEPTION_THE_KICK();
	}

	void LUA_NATIVE_HUD_PAUSE_TOGGLE_FULLSCREEN_MAP( Any p0 )
	{
		HUD::PAUSE_TOGGLE_FULLSCREEN_MAP(p0);
	}

	void LUA_NATIVE_HUD_PAUSE_MENU_ACTIVATE_CONTEXT( Hash contextHash )
	{
		HUD::PAUSE_MENU_ACTIVATE_CONTEXT(contextHash);
	}

	void LUA_NATIVE_HUD_PAUSE_MENU_DEACTIVATE_CONTEXT( Hash contextHash )
	{
		HUD::PAUSE_MENU_DEACTIVATE_CONTEXT(contextHash);
	}

	bool LUA_NATIVE_HUD_PAUSE_MENU_IS_CONTEXT_ACTIVE( Hash contextHash )
	{
		auto retval = (bool)HUD::PAUSE_MENU_IS_CONTEXT_ACTIVE(contextHash);
		return retval;
	}

	bool LUA_NATIVE_HUD_PAUSE_MENU_IS_CONTEXT_MENU_ACTIVE(  )
	{
		auto retval = (bool)HUD::PAUSE_MENU_IS_CONTEXT_MENU_ACTIVE();
		return retval;
	}

	int LUA_NATIVE_HUD_PAUSE_MENU_GET_HAIR_COLOUR_INDEX(  )
	{
		auto retval = HUD::PAUSE_MENU_GET_HAIR_COLOUR_INDEX();
		return retval;
	}

	int LUA_NATIVE_HUD_PAUSE_MENU_GET_MOUSE_HOVER_INDEX(  )
	{
		auto retval = HUD::PAUSE_MENU_GET_MOUSE_HOVER_INDEX();
		return retval;
	}

	int LUA_NATIVE_HUD_PAUSE_MENU_GET_MOUSE_HOVER_UNIQUE_ID(  )
	{
		auto retval = HUD::PAUSE_MENU_GET_MOUSE_HOVER_UNIQUE_ID();
		return retval;
	}

	std::tuple<bool, Any, Any, Any> LUA_NATIVE_HUD_PAUSE_MENU_GET_MOUSE_CLICK_EVENT( Any p0, Any p1, Any p2 )
	{
		std::tuple<bool, Any, Any, Any> return_values;
		std::get<0>(return_values) = (bool)HUD::PAUSE_MENU_GET_MOUSE_CLICK_EVENT(&p0, &p1, &p2);
		std::get<1>(return_values) = p0;
		std::get<2>(return_values) = p1;
		std::get<3>(return_values) = p2;

		return return_values;
	}

	void LUA_NATIVE_HUD_PAUSE_MENU_REDRAW_INSTRUCTIONAL_BUTTONS( int p0 )
	{
		HUD::PAUSE_MENU_REDRAW_INSTRUCTIONAL_BUTTONS(p0);
	}

	void LUA_NATIVE_HUD_PAUSE_MENU_SET_BUSY_SPINNER( bool p0, int position, int spinnerIndex )
	{
		HUD::PAUSE_MENU_SET_BUSY_SPINNER(p0, position, spinnerIndex);
	}

	void LUA_NATIVE_HUD_PAUSE_MENU_SET_WARN_ON_TAB_CHANGE( bool p0 )
	{
		HUD::PAUSE_MENU_SET_WARN_ON_TAB_CHANGE(p0);
	}

	bool LUA_NATIVE_HUD_IS_FRONTEND_READY_FOR_CONTROL(  )
	{
		auto retval = (bool)HUD::IS_FRONTEND_READY_FOR_CONTROL();
		return retval;
	}

	void LUA_NATIVE_HUD_TAKE_CONTROL_OF_FRONTEND(  )
	{
		HUD::TAKE_CONTROL_OF_FRONTEND();
	}

	void LUA_NATIVE_HUD_RELEASE_CONTROL_OF_FRONTEND(  )
	{
		HUD::RELEASE_CONTROL_OF_FRONTEND();
	}

	bool LUA_NATIVE_HUD_CODE_WANTS_SCRIPT_TO_TAKE_CONTROL(  )
	{
		auto retval = (bool)HUD::CODE_WANTS_SCRIPT_TO_TAKE_CONTROL();
		return retval;
	}

	int LUA_NATIVE_HUD_GET_SCREEN_CODE_WANTS_SCRIPT_TO_CONTROL(  )
	{
		auto retval = HUD::GET_SCREEN_CODE_WANTS_SCRIPT_TO_CONTROL();
		return retval;
	}

	bool LUA_NATIVE_HUD_IS_NAVIGATING_MENU_CONTENT(  )
	{
		auto retval = (bool)HUD::IS_NAVIGATING_MENU_CONTENT();
		return retval;
	}

	bool LUA_NATIVE_HUD_HAS_MENU_TRIGGER_EVENT_OCCURRED(  )
	{
		auto retval = (bool)HUD::HAS_MENU_TRIGGER_EVENT_OCCURRED();
		return retval;
	}

	bool LUA_NATIVE_HUD_HAS_MENU_LAYOUT_CHANGED_EVENT_OCCURRED(  )
	{
		auto retval = (bool)HUD::HAS_MENU_LAYOUT_CHANGED_EVENT_OCCURRED();
		return retval;
	}

	void LUA_NATIVE_HUD_SET_SAVEGAME_LIST_UNIQUE_ID( Any p0 )
	{
		HUD::SET_SAVEGAME_LIST_UNIQUE_ID(p0);
	}

	std::tuple<int, int> LUA_NATIVE_HUD_GET_MENU_TRIGGER_EVENT_DETAILS( int lastItemMenuId, int selectedItemUniqueId )
	{
		std::tuple<int, int> return_values;
		HUD::GET_MENU_TRIGGER_EVENT_DETAILS(&lastItemMenuId, &selectedItemUniqueId);
		std::get<0>(return_values) = lastItemMenuId;
		std::get<1>(return_values) = selectedItemUniqueId;

		return return_values;
	}

	std::tuple<int, int, int> LUA_NATIVE_HUD_GET_MENU_LAYOUT_CHANGED_EVENT_DETAILS( int lastItemMenuId, int selectedItemMenuId, int selectedItemUniqueId )
	{
		std::tuple<int, int, int> return_values;
		HUD::GET_MENU_LAYOUT_CHANGED_EVENT_DETAILS(&lastItemMenuId, &selectedItemMenuId, &selectedItemUniqueId);
		std::get<0>(return_values) = lastItemMenuId;
		std::get<1>(return_values) = selectedItemMenuId;
		std::get<2>(return_values) = selectedItemUniqueId;

		return return_values;
	}

	std::tuple<bool, int, int, int> LUA_NATIVE_HUD_GET_PM_PLAYER_CREW_COLOR( int r, int g, int b )
	{
		std::tuple<bool, int, int, int> return_values;
		std::get<0>(return_values) = (bool)HUD::GET_PM_PLAYER_CREW_COLOR(&r, &g, &b);
		std::get<1>(return_values) = r;
		std::get<2>(return_values) = g;
		std::get<3>(return_values) = b;

		return return_values;
	}

	std::tuple<bool, Any> LUA_NATIVE_HUD_GET_MENU_PED_INT_STAT( Any p0, Any p1 )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)HUD::GET_MENU_PED_INT_STAT(p0, &p1);
		std::get<1>(return_values) = p1;

		return return_values;
	}

	std::tuple<bool, Any> LUA_NATIVE_HUD_GET_CHARACTER_MENU_PED_INT_STAT( Any p0, Any p1, Any p2 )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)HUD::GET_CHARACTER_MENU_PED_INT_STAT(p0, &p1, p2);
		std::get<1>(return_values) = p1;

		return return_values;
	}

	std::tuple<bool, int> LUA_NATIVE_HUD_GET_MENU_PED_MASKED_INT_STAT( Hash statHash, int outValue, int mask, bool p3 )
	{
		std::tuple<bool, int> return_values;
		std::get<0>(return_values) = (bool)HUD::GET_MENU_PED_MASKED_INT_STAT(statHash, &outValue, mask, p3);
		std::get<1>(return_values) = outValue;

		return return_values;
	}

	std::tuple<bool, Any> LUA_NATIVE_HUD_GET_CHARACTER_MENU_PED_MASKED_INT_STAT( Hash statHash, Any outValue, int p2, int mask, bool p4 )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)HUD::GET_CHARACTER_MENU_PED_MASKED_INT_STAT(statHash, &outValue, p2, mask, p4);
		std::get<1>(return_values) = outValue;

		return return_values;
	}

	std::tuple<bool, float> LUA_NATIVE_HUD_GET_MENU_PED_FLOAT_STAT( Hash statHash, float outValue )
	{
		std::tuple<bool, float> return_values;
		std::get<0>(return_values) = (bool)HUD::GET_MENU_PED_FLOAT_STAT(statHash, &outValue);
		std::get<1>(return_values) = outValue;

		return return_values;
	}

	std::tuple<bool, float> LUA_NATIVE_HUD_GET_CHARACTER_MENU_PED_FLOAT_STAT( float statHash, float outValue, bool p2 )
	{
		std::tuple<bool, float> return_values;
		std::get<0>(return_values) = (bool)HUD::GET_CHARACTER_MENU_PED_FLOAT_STAT(statHash, &outValue, p2);
		std::get<1>(return_values) = outValue;

		return return_values;
	}

	std::tuple<bool, bool> LUA_NATIVE_HUD_GET_MENU_PED_BOOL_STAT( Hash statHash, bool outValue )
	{
		std::tuple<bool, bool> return_values;
		std::get<0>(return_values) = (bool)HUD::GET_MENU_PED_BOOL_STAT(statHash, (BOOL*)&outValue);
		std::get<1>(return_values) = outValue;

		return return_values;
	}

	void LUA_NATIVE_HUD_CLEAR_PED_IN_PAUSE_MENU(  )
	{
		HUD::CLEAR_PED_IN_PAUSE_MENU();
	}

	void LUA_NATIVE_HUD_GIVE_PED_TO_PAUSE_MENU( Ped ped, int p1 )
	{
		HUD::GIVE_PED_TO_PAUSE_MENU(ped, p1);
	}

	void LUA_NATIVE_HUD_SET_PAUSE_MENU_PED_LIGHTING( bool state )
	{
		HUD::SET_PAUSE_MENU_PED_LIGHTING(state);
	}

	void LUA_NATIVE_HUD_SET_PAUSE_MENU_PED_SLEEP_STATE( bool state )
	{
		HUD::SET_PAUSE_MENU_PED_SLEEP_STATE(state);
	}

	void LUA_NATIVE_HUD_OPEN_ONLINE_POLICIES_MENU(  )
	{
		HUD::OPEN_ONLINE_POLICIES_MENU();
	}

	bool LUA_NATIVE_HUD_ARE_ONLINE_POLICIES_UP_TO_DATE(  )
	{
		auto retval = (bool)HUD::ARE_ONLINE_POLICIES_UP_TO_DATE();
		return retval;
	}

	bool LUA_NATIVE_HUD_IS_ONLINE_POLICIES_MENU_ACTIVE(  )
	{
		auto retval = (bool)HUD::IS_ONLINE_POLICIES_MENU_ACTIVE();
		return retval;
	}

	void LUA_NATIVE_HUD_OPEN_SOCIAL_CLUB_MENU( Hash menu )
	{
		HUD::OPEN_SOCIAL_CLUB_MENU(menu);
	}

	void LUA_NATIVE_HUD_CLOSE_SOCIAL_CLUB_MENU(  )
	{
		HUD::CLOSE_SOCIAL_CLUB_MENU();
	}

	void LUA_NATIVE_HUD_SET_SOCIAL_CLUB_TOUR( const char* name )
	{
		HUD::SET_SOCIAL_CLUB_TOUR(name);
	}

	bool LUA_NATIVE_HUD_IS_SOCIAL_CLUB_ACTIVE(  )
	{
		auto retval = (bool)HUD::IS_SOCIAL_CLUB_ACTIVE();
		return retval;
	}

	void LUA_NATIVE_HUD_SET_TEXT_INPUT_BOX_ENABLED( bool p0 )
	{
		HUD::SET_TEXT_INPUT_BOX_ENABLED(p0);
	}

	void LUA_NATIVE_HUD_FORCE_CLOSE_TEXT_INPUT_BOX(  )
	{
		HUD::FORCE_CLOSE_TEXT_INPUT_BOX();
	}

	void LUA_NATIVE_HUD_SET_ALLOW_COMMA_ON_TEXT_INPUT( Any p0 )
	{
		HUD::SET_ALLOW_COMMA_ON_TEXT_INPUT(p0);
	}

	void LUA_NATIVE_HUD_OVERRIDE_MP_TEXT_CHAT_TEAM_STRING( Hash gxtEntryHash )
	{
		HUD::OVERRIDE_MP_TEXT_CHAT_TEAM_STRING(gxtEntryHash);
	}

	bool LUA_NATIVE_HUD_IS_MP_TEXT_CHAT_TYPING(  )
	{
		auto retval = (bool)HUD::IS_MP_TEXT_CHAT_TYPING();
		return retval;
	}

	void LUA_NATIVE_HUD_CLOSE_MP_TEXT_CHAT(  )
	{
		HUD::CLOSE_MP_TEXT_CHAT();
	}

	void LUA_NATIVE_HUD_MP_TEXT_CHAT_IS_TEAM_JOB( Any p0 )
	{
		HUD::MP_TEXT_CHAT_IS_TEAM_JOB(p0);
	}

	void LUA_NATIVE_HUD_OVERRIDE_MP_TEXT_CHAT_COLOR( int p0, int hudColor )
	{
		HUD::OVERRIDE_MP_TEXT_CHAT_COLOR(p0, hudColor);
	}

	void LUA_NATIVE_HUD_MP_TEXT_CHAT_DISABLE( bool toggle )
	{
		HUD::MP_TEXT_CHAT_DISABLE(toggle);
	}

	void LUA_NATIVE_HUD_FLAG_PLAYER_CONTEXT_IN_TOURNAMENT( bool toggle )
	{
		HUD::FLAG_PLAYER_CONTEXT_IN_TOURNAMENT(toggle);
	}

	void LUA_NATIVE_HUD_SET_PED_HAS_AI_BLIP( Ped ped, bool hasCone )
	{
		HUD::SET_PED_HAS_AI_BLIP(ped, hasCone);
	}

	void LUA_NATIVE_HUD_SET_PED_HAS_AI_BLIP_WITH_COLOUR( Ped ped, bool hasCone, int color )
	{
		HUD::SET_PED_HAS_AI_BLIP_WITH_COLOUR(ped, hasCone, color);
	}

	bool LUA_NATIVE_HUD_DOES_PED_HAVE_AI_BLIP( Ped ped )
	{
		auto retval = (bool)HUD::DOES_PED_HAVE_AI_BLIP(ped);
		return retval;
	}

	void LUA_NATIVE_HUD_SET_PED_AI_BLIP_GANG_ID( Ped ped, int gangId )
	{
		HUD::SET_PED_AI_BLIP_GANG_ID(ped, gangId);
	}

	void LUA_NATIVE_HUD_SET_PED_AI_BLIP_HAS_CONE( Ped ped, bool toggle )
	{
		HUD::SET_PED_AI_BLIP_HAS_CONE(ped, toggle);
	}

	void LUA_NATIVE_HUD_SET_PED_AI_BLIP_FORCED_ON( Ped ped, bool toggle )
	{
		HUD::SET_PED_AI_BLIP_FORCED_ON(ped, toggle);
	}

	void LUA_NATIVE_HUD_SET_PED_AI_BLIP_NOTICE_RANGE( Ped ped, float range )
	{
		HUD::SET_PED_AI_BLIP_NOTICE_RANGE(ped, range);
	}

	void LUA_NATIVE_HUD_SET_PED_AI_BLIP_SPRITE( Ped ped, int spriteId )
	{
		HUD::SET_PED_AI_BLIP_SPRITE(ped, spriteId);
	}

	Blip LUA_NATIVE_HUD_GET_AI_PED_PED_BLIP_INDEX( Ped ped )
	{
		auto retval = HUD::GET_AI_PED_PED_BLIP_INDEX(ped);
		return retval;
	}

	Blip LUA_NATIVE_HUD_GET_AI_PED_VEHICLE_BLIP_INDEX( Ped ped )
	{
		auto retval = HUD::GET_AI_PED_VEHICLE_BLIP_INDEX(ped);
		return retval;
	}

	bool LUA_NATIVE_HUD_HAS_DIRECTOR_MODE_BEEN_LAUNCHED_BY_CODE(  )
	{
		auto retval = (bool)HUD::HAS_DIRECTOR_MODE_BEEN_LAUNCHED_BY_CODE();
		return retval;
	}

	void LUA_NATIVE_HUD_SET_DIRECTOR_MODE_LAUNCHED_BY_SCRIPT(  )
	{
		HUD::SET_DIRECTOR_MODE_LAUNCHED_BY_SCRIPT();
	}

	void LUA_NATIVE_HUD_SET_PLAYER_IS_IN_DIRECTOR_MODE( bool toggle )
	{
		HUD::SET_PLAYER_IS_IN_DIRECTOR_MODE(toggle);
	}

	void LUA_NATIVE_HUD_SET_DIRECTOR_MODE_AVAILABLE( bool toggle )
	{
		HUD::SET_DIRECTOR_MODE_AVAILABLE(toggle);
	}

	void LUA_NATIVE_HUD_HIDE_HUDMARKERS_THIS_FRAME(  )
	{
		HUD::HIDE_HUDMARKERS_THIS_FRAME();
	}

	float LUA_NATIVE_INTERIOR_GET_INTERIOR_HEADING( Interior interior )
	{
		auto retval = INTERIOR::GET_INTERIOR_HEADING(interior);
		return retval;
	}

	std::tuple<Vector3, Hash> LUA_NATIVE_INTERIOR_GET_INTERIOR_LOCATION_AND_NAMEHASH( Interior interior, Vector3 position, Hash nameHash )
	{
		std::tuple<Vector3, Hash> return_values;
		INTERIOR::GET_INTERIOR_LOCATION_AND_NAMEHASH(interior, &position, &nameHash);
		std::get<0>(return_values) = position;
		std::get<1>(return_values) = nameHash;

		return return_values;
	}

	int LUA_NATIVE_INTERIOR_GET_INTERIOR_GROUP_ID( Interior interior )
	{
		auto retval = INTERIOR::GET_INTERIOR_GROUP_ID(interior);
		return retval;
	}

	Vector3 LUA_NATIVE_INTERIOR_GET_OFFSET_FROM_INTERIOR_IN_WORLD_COORDS( Interior interior, float x, float y, float z )
	{
		auto retval = INTERIOR::GET_OFFSET_FROM_INTERIOR_IN_WORLD_COORDS(interior, x, y, z);
		return retval;
	}

	bool LUA_NATIVE_INTERIOR_IS_INTERIOR_SCENE(  )
	{
		auto retval = (bool)INTERIOR::IS_INTERIOR_SCENE();
		return retval;
	}

	bool LUA_NATIVE_INTERIOR_IS_VALID_INTERIOR( Interior interior )
	{
		auto retval = (bool)INTERIOR::IS_VALID_INTERIOR(interior);
		return retval;
	}

	void LUA_NATIVE_INTERIOR_CLEAR_ROOM_FOR_ENTITY( Entity entity )
	{
		INTERIOR::CLEAR_ROOM_FOR_ENTITY(entity);
	}

	void LUA_NATIVE_INTERIOR_FORCE_ROOM_FOR_ENTITY( Entity entity, Interior interior, Hash roomHashKey )
	{
		INTERIOR::FORCE_ROOM_FOR_ENTITY(entity, interior, roomHashKey);
	}

	Hash LUA_NATIVE_INTERIOR_GET_ROOM_KEY_FROM_ENTITY( Entity entity )
	{
		auto retval = INTERIOR::GET_ROOM_KEY_FROM_ENTITY(entity);
		return retval;
	}

	Hash LUA_NATIVE_INTERIOR_GET_KEY_FOR_ENTITY_IN_ROOM( Entity entity )
	{
		auto retval = INTERIOR::GET_KEY_FOR_ENTITY_IN_ROOM(entity);
		return retval;
	}

	Interior LUA_NATIVE_INTERIOR_GET_INTERIOR_FROM_ENTITY( Entity entity )
	{
		auto retval = INTERIOR::GET_INTERIOR_FROM_ENTITY(entity);
		return retval;
	}

	void LUA_NATIVE_INTERIOR_RETAIN_ENTITY_IN_INTERIOR( Entity entity, Interior interior )
	{
		INTERIOR::RETAIN_ENTITY_IN_INTERIOR(entity, interior);
	}

	void LUA_NATIVE_INTERIOR_CLEAR_INTERIOR_STATE_OF_ENTITY( Entity entity )
	{
		INTERIOR::CLEAR_INTERIOR_STATE_OF_ENTITY(entity);
	}

	void LUA_NATIVE_INTERIOR_FORCE_ACTIVATING_TRACKING_ON_ENTITY( Any p0, Any p1 )
	{
		INTERIOR::FORCE_ACTIVATING_TRACKING_ON_ENTITY(p0, p1);
	}

	void LUA_NATIVE_INTERIOR_FORCE_ROOM_FOR_GAME_VIEWPORT( int interiorID, Hash roomHashKey )
	{
		INTERIOR::FORCE_ROOM_FOR_GAME_VIEWPORT(interiorID, roomHashKey);
	}

	void LUA_NATIVE_INTERIOR_SET_ROOM_FOR_GAME_VIEWPORT_BY_NAME( const char* roomName )
	{
		INTERIOR::SET_ROOM_FOR_GAME_VIEWPORT_BY_NAME(roomName);
	}

	void LUA_NATIVE_INTERIOR_SET_ROOM_FOR_GAME_VIEWPORT_BY_KEY( Hash roomHashKey )
	{
		INTERIOR::SET_ROOM_FOR_GAME_VIEWPORT_BY_KEY(roomHashKey);
	}

	Hash LUA_NATIVE_INTERIOR_GET_ROOM_KEY_FOR_GAME_VIEWPORT(  )
	{
		auto retval = INTERIOR::GET_ROOM_KEY_FOR_GAME_VIEWPORT();
		return retval;
	}

	void LUA_NATIVE_INTERIOR_CLEAR_ROOM_FOR_GAME_VIEWPORT(  )
	{
		INTERIOR::CLEAR_ROOM_FOR_GAME_VIEWPORT();
	}

	Interior LUA_NATIVE_INTERIOR_GET_INTERIOR_FROM_PRIMARY_VIEW(  )
	{
		auto retval = INTERIOR::GET_INTERIOR_FROM_PRIMARY_VIEW();
		return retval;
	}

	Interior LUA_NATIVE_INTERIOR_GET_INTERIOR_AT_COORDS( float x, float y, float z )
	{
		auto retval = INTERIOR::GET_INTERIOR_AT_COORDS(x, y, z);
		return retval;
	}

	void LUA_NATIVE_INTERIOR_ADD_PICKUP_TO_INTERIOR_ROOM_BY_NAME( Pickup pickup, const char* roomName )
	{
		INTERIOR::ADD_PICKUP_TO_INTERIOR_ROOM_BY_NAME(pickup, roomName);
	}

	void LUA_NATIVE_INTERIOR_PIN_INTERIOR_IN_MEMORY( Interior interior )
	{
		INTERIOR::PIN_INTERIOR_IN_MEMORY(interior);
	}

	void LUA_NATIVE_INTERIOR_UNPIN_INTERIOR( Interior interior )
	{
		INTERIOR::UNPIN_INTERIOR(interior);
	}

	bool LUA_NATIVE_INTERIOR_IS_INTERIOR_READY( Interior interior )
	{
		auto retval = (bool)INTERIOR::IS_INTERIOR_READY(interior);
		return retval;
	}

	bool LUA_NATIVE_INTERIOR_SET_INTERIOR_IN_USE( Interior interior )
	{
		auto retval = (bool)INTERIOR::SET_INTERIOR_IN_USE(interior);
		return retval;
	}

	Interior LUA_NATIVE_INTERIOR_GET_INTERIOR_AT_COORDS_WITH_TYPE( float x, float y, float z, const char* interiorType )
	{
		auto retval = INTERIOR::GET_INTERIOR_AT_COORDS_WITH_TYPE(x, y, z, interiorType);
		return retval;
	}

	Interior LUA_NATIVE_INTERIOR_GET_INTERIOR_AT_COORDS_WITH_TYPEHASH( float x, float y, float z, Hash typeHash )
	{
		auto retval = INTERIOR::GET_INTERIOR_AT_COORDS_WITH_TYPEHASH(x, y, z, typeHash);
		return retval;
	}

	void LUA_NATIVE_INTERIOR_ACTIVATE_INTERIOR_GROUPS_USING_CAMERA(  )
	{
		INTERIOR::ACTIVATE_INTERIOR_GROUPS_USING_CAMERA();
	}

	bool LUA_NATIVE_INTERIOR_IS_COLLISION_MARKED_OUTSIDE( float x, float y, float z )
	{
		auto retval = (bool)INTERIOR::IS_COLLISION_MARKED_OUTSIDE(x, y, z);
		return retval;
	}

	Interior LUA_NATIVE_INTERIOR_GET_INTERIOR_FROM_COLLISION( float x, float y, float z )
	{
		auto retval = INTERIOR::GET_INTERIOR_FROM_COLLISION(x, y, z);
		return retval;
	}

	void LUA_NATIVE_INTERIOR_ENABLE_STADIUM_PROBES_THIS_FRAME( bool toggle )
	{
		INTERIOR::ENABLE_STADIUM_PROBES_THIS_FRAME(toggle);
	}

	void LUA_NATIVE_INTERIOR_ACTIVATE_INTERIOR_ENTITY_SET( Interior interior, const char* entitySetName )
	{
		INTERIOR::ACTIVATE_INTERIOR_ENTITY_SET(interior, entitySetName);
	}

	void LUA_NATIVE_INTERIOR_DEACTIVATE_INTERIOR_ENTITY_SET( Interior interior, const char* entitySetName )
	{
		INTERIOR::DEACTIVATE_INTERIOR_ENTITY_SET(interior, entitySetName);
	}

	bool LUA_NATIVE_INTERIOR_IS_INTERIOR_ENTITY_SET_ACTIVE( Interior interior, const char* entitySetName )
	{
		auto retval = (bool)INTERIOR::IS_INTERIOR_ENTITY_SET_ACTIVE(interior, entitySetName);
		return retval;
	}

	void LUA_NATIVE_INTERIOR_SET_INTERIOR_ENTITY_SET_TINT_INDEX( Interior interior, const char* entitySetName, int color )
	{
		INTERIOR::SET_INTERIOR_ENTITY_SET_TINT_INDEX(interior, entitySetName, color);
	}

	void LUA_NATIVE_INTERIOR_REFRESH_INTERIOR( Interior interior )
	{
		INTERIOR::REFRESH_INTERIOR(interior);
	}

	void LUA_NATIVE_INTERIOR_ENABLE_EXTERIOR_CULL_MODEL_THIS_FRAME( Hash mapObjectHash )
	{
		INTERIOR::ENABLE_EXTERIOR_CULL_MODEL_THIS_FRAME(mapObjectHash);
	}

	void LUA_NATIVE_INTERIOR_ENABLE_SHADOW_CULL_MODEL_THIS_FRAME( Hash mapObjectHash )
	{
		INTERIOR::ENABLE_SHADOW_CULL_MODEL_THIS_FRAME(mapObjectHash);
	}

	void LUA_NATIVE_INTERIOR_DISABLE_INTERIOR( Interior interior, bool toggle )
	{
		INTERIOR::DISABLE_INTERIOR(interior, toggle);
	}

	bool LUA_NATIVE_INTERIOR_IS_INTERIOR_DISABLED( Interior interior )
	{
		auto retval = (bool)INTERIOR::IS_INTERIOR_DISABLED(interior);
		return retval;
	}

	void LUA_NATIVE_INTERIOR_CAP_INTERIOR( Interior interior, bool toggle )
	{
		INTERIOR::CAP_INTERIOR(interior, toggle);
	}

	bool LUA_NATIVE_INTERIOR_IS_INTERIOR_CAPPED( Interior interior )
	{
		auto retval = (bool)INTERIOR::IS_INTERIOR_CAPPED(interior);
		return retval;
	}

	void LUA_NATIVE_INTERIOR_DISABLE_METRO_SYSTEM( bool toggle )
	{
		INTERIOR::DISABLE_METRO_SYSTEM(toggle);
	}

	void LUA_NATIVE_INTERIOR_SET_IS_EXTERIOR_ONLY( Entity entity, bool toggle )
	{
		INTERIOR::SET_IS_EXTERIOR_ONLY(entity, toggle);
	}

	ScrHandle LUA_NATIVE_ITEMSET_CREATE_ITEMSET( bool p0 )
	{
		auto retval = ITEMSET::CREATE_ITEMSET(p0);
		return retval;
	}

	void LUA_NATIVE_ITEMSET_DESTROY_ITEMSET( ScrHandle itemset )
	{
		ITEMSET::DESTROY_ITEMSET(itemset);
	}

	bool LUA_NATIVE_ITEMSET_IS_ITEMSET_VALID( ScrHandle itemset )
	{
		auto retval = (bool)ITEMSET::IS_ITEMSET_VALID(itemset);
		return retval;
	}

	bool LUA_NATIVE_ITEMSET_ADD_TO_ITEMSET( ScrHandle item, ScrHandle itemset )
	{
		auto retval = (bool)ITEMSET::ADD_TO_ITEMSET(item, itemset);
		return retval;
	}

	void LUA_NATIVE_ITEMSET_REMOVE_FROM_ITEMSET( ScrHandle item, ScrHandle itemset )
	{
		ITEMSET::REMOVE_FROM_ITEMSET(item, itemset);
	}

	int LUA_NATIVE_ITEMSET_GET_ITEMSET_SIZE( ScrHandle itemset )
	{
		auto retval = ITEMSET::GET_ITEMSET_SIZE(itemset);
		return retval;
	}

	ScrHandle LUA_NATIVE_ITEMSET_GET_INDEXED_ITEM_IN_ITEMSET( int index, ScrHandle itemset )
	{
		auto retval = ITEMSET::GET_INDEXED_ITEM_IN_ITEMSET(index, itemset);
		return retval;
	}

	bool LUA_NATIVE_ITEMSET_IS_IN_ITEMSET( ScrHandle item, ScrHandle itemset )
	{
		auto retval = (bool)ITEMSET::IS_IN_ITEMSET(item, itemset);
		return retval;
	}

	void LUA_NATIVE_ITEMSET_CLEAN_ITEMSET( ScrHandle itemset )
	{
		ITEMSET::CLEAN_ITEMSET(itemset);
	}

	bool LUA_NATIVE_LOADINGSCREEN_LOBBY_AUTO_MULTIPLAYER_MENU(  )
	{
		auto retval = (bool)LOADINGSCREEN::LOBBY_AUTO_MULTIPLAYER_MENU();
		return retval;
	}

	bool LUA_NATIVE_LOADINGSCREEN_LOBBY_AUTO_MULTIPLAYER_FREEMODE(  )
	{
		auto retval = (bool)LOADINGSCREEN::LOBBY_AUTO_MULTIPLAYER_FREEMODE();
		return retval;
	}

	void LUA_NATIVE_LOADINGSCREEN_LOBBY_SET_AUTO_MULTIPLAYER( bool toggle )
	{
		LOADINGSCREEN::LOBBY_SET_AUTO_MULTIPLAYER(toggle);
	}

	bool LUA_NATIVE_LOADINGSCREEN_LOBBY_AUTO_MULTIPLAYER_EVENT(  )
	{
		auto retval = (bool)LOADINGSCREEN::LOBBY_AUTO_MULTIPLAYER_EVENT();
		return retval;
	}

	void LUA_NATIVE_LOADINGSCREEN_LOBBY_SET_AUTO_MULTIPLAYER_EVENT( bool toggle )
	{
		LOADINGSCREEN::LOBBY_SET_AUTO_MULTIPLAYER_EVENT(toggle);
	}

	bool LUA_NATIVE_LOADINGSCREEN_LOBBY_AUTO_MULTIPLAYER_RANDOM_JOB(  )
	{
		auto retval = (bool)LOADINGSCREEN::LOBBY_AUTO_MULTIPLAYER_RANDOM_JOB();
		return retval;
	}

	void LUA_NATIVE_LOADINGSCREEN_LOBBY_SET_AUTO_MP_RANDOM_JOB( bool toggle )
	{
		LOADINGSCREEN::LOBBY_SET_AUTO_MP_RANDOM_JOB(toggle);
	}

	void LUA_NATIVE_LOADINGSCREEN_SHUTDOWN_SESSION_CLEARS_AUTO_MULTIPLAYER( bool toggle )
	{
		LOADINGSCREEN::SHUTDOWN_SESSION_CLEARS_AUTO_MULTIPLAYER(toggle);
	}

	int LUA_NATIVE_LOCALIZATION_LOCALIZATION_GET_SYSTEM_LANGUAGE(  )
	{
		auto retval = LOCALIZATION::LOCALIZATION_GET_SYSTEM_LANGUAGE();
		return retval;
	}

	int LUA_NATIVE_LOCALIZATION_GET_CURRENT_LANGUAGE(  )
	{
		auto retval = LOCALIZATION::GET_CURRENT_LANGUAGE();
		return retval;
	}

	int LUA_NATIVE_LOCALIZATION_LOCALIZATION_GET_SYSTEM_DATE_TYPE(  )
	{
		auto retval = LOCALIZATION::LOCALIZATION_GET_SYSTEM_DATE_TYPE();
		return retval;
	}

	int LUA_NATIVE_MISC_GET_ALLOCATED_STACK_SIZE(  )
	{
		auto retval = MISC::GET_ALLOCATED_STACK_SIZE();
		return retval;
	}

	int LUA_NATIVE_MISC_GET_NUMBER_OF_FREE_STACKS_OF_THIS_SIZE( int stackSize )
	{
		auto retval = MISC::GET_NUMBER_OF_FREE_STACKS_OF_THIS_SIZE(stackSize);
		return retval;
	}

	void LUA_NATIVE_MISC_SET_RANDOM_SEED( int seed )
	{
		MISC::SET_RANDOM_SEED(seed);
	}

	void LUA_NATIVE_MISC_SET_TIME_SCALE( float timeScale )
	{
		MISC::SET_TIME_SCALE(timeScale);
	}

	void LUA_NATIVE_MISC_SET_MISSION_FLAG( bool toggle )
	{
		MISC::SET_MISSION_FLAG(toggle);
	}

	bool LUA_NATIVE_MISC_GET_MISSION_FLAG(  )
	{
		auto retval = (bool)MISC::GET_MISSION_FLAG();
		return retval;
	}

	void LUA_NATIVE_MISC_SET_RANDOM_EVENT_FLAG( bool toggle )
	{
		MISC::SET_RANDOM_EVENT_FLAG(toggle);
	}

	bool LUA_NATIVE_MISC_GET_RANDOM_EVENT_FLAG(  )
	{
		auto retval = (bool)MISC::GET_RANDOM_EVENT_FLAG();
		return retval;
	}

	const char* LUA_NATIVE_MISC_GET_CONTENT_TO_LOAD(  )
	{
		auto retval = MISC::GET_CONTENT_TO_LOAD();
		return retval;
	}

	void LUA_NATIVE_MISC_ACTIVITY_FEED_CREATE( const char* p0, const char* p1 )
	{
		MISC::ACTIVITY_FEED_CREATE(p0, p1);
	}

	void LUA_NATIVE_MISC_ACTIVITY_FEED_ADD_SUBSTRING_TO_CAPTION( const char* p0 )
	{
		MISC::ACTIVITY_FEED_ADD_SUBSTRING_TO_CAPTION(p0);
	}

	void LUA_NATIVE_MISC_ACTIVITY_FEED_ADD_LITERAL_SUBSTRING_TO_CAPTION( const char* p0 )
	{
		MISC::ACTIVITY_FEED_ADD_LITERAL_SUBSTRING_TO_CAPTION(p0);
	}

	void LUA_NATIVE_MISC_ACTIVITY_FEED_ADD_INT_TO_CAPTION( Any p0 )
	{
		MISC::ACTIVITY_FEED_ADD_INT_TO_CAPTION(p0);
	}

	void LUA_NATIVE_MISC_ACTIVITY_FEED_LARGE_IMAGE_URL( const char* p0 )
	{
		MISC::ACTIVITY_FEED_LARGE_IMAGE_URL(p0);
	}

	void LUA_NATIVE_MISC_ACTIVITY_FEED_ACTION_START_WITH_COMMAND_LINE( const char* p0, const char* p1 )
	{
		MISC::ACTIVITY_FEED_ACTION_START_WITH_COMMAND_LINE(p0, p1);
	}

	void LUA_NATIVE_MISC_ACTIVITY_FEED_ACTION_START_WITH_COMMAND_LINE_ADD( const char* p0 )
	{
		MISC::ACTIVITY_FEED_ACTION_START_WITH_COMMAND_LINE_ADD(p0);
	}

	void LUA_NATIVE_MISC_ACTIVITY_FEED_POST(  )
	{
		MISC::ACTIVITY_FEED_POST();
	}

	void LUA_NATIVE_MISC_ACTIVITY_FEED_ONLINE_PLAYED_WITH_POST( const char* p0 )
	{
		MISC::ACTIVITY_FEED_ONLINE_PLAYED_WITH_POST(p0);
	}

	bool LUA_NATIVE_MISC_HAS_RESUMED_FROM_SUSPEND(  )
	{
		auto retval = (bool)MISC::HAS_RESUMED_FROM_SUSPEND();
		return retval;
	}

	void LUA_NATIVE_MISC_SET_SCRIPT_HIGH_PRIO( bool toggle )
	{
		MISC::SET_SCRIPT_HIGH_PRIO(toggle);
	}

	void LUA_NATIVE_MISC_SET_THIS_IS_A_TRIGGER_SCRIPT( bool toggle )
	{
		MISC::SET_THIS_IS_A_TRIGGER_SCRIPT(toggle);
	}

	void LUA_NATIVE_MISC_INFORM_CODE_OF_CONTENT_ID_OF_CURRENT_UGC_MISSION( const char* p0 )
	{
		MISC::INFORM_CODE_OF_CONTENT_ID_OF_CURRENT_UGC_MISSION(p0);
	}

	std::tuple<bool, Any, Any> LUA_NATIVE_MISC_GET_BASE_ELEMENT_LOCATION_FROM_METADATA_BLOCK( Any p0, Any p1, Any p2, bool p3 )
	{
		std::tuple<bool, Any, Any> return_values;
		std::get<0>(return_values) = (bool)MISC::GET_BASE_ELEMENT_LOCATION_FROM_METADATA_BLOCK(&p0, &p1, p2, p3);
		std::get<1>(return_values) = p0;
		std::get<2>(return_values) = p1;

		return return_values;
	}

	Hash LUA_NATIVE_MISC_GET_PREV_WEATHER_TYPE_HASH_NAME(  )
	{
		auto retval = MISC::GET_PREV_WEATHER_TYPE_HASH_NAME();
		return retval;
	}

	Hash LUA_NATIVE_MISC_GET_NEXT_WEATHER_TYPE_HASH_NAME(  )
	{
		auto retval = MISC::GET_NEXT_WEATHER_TYPE_HASH_NAME();
		return retval;
	}

	bool LUA_NATIVE_MISC_IS_PREV_WEATHER_TYPE( const char* weatherType )
	{
		auto retval = (bool)MISC::IS_PREV_WEATHER_TYPE(weatherType);
		return retval;
	}

	bool LUA_NATIVE_MISC_IS_NEXT_WEATHER_TYPE( const char* weatherType )
	{
		auto retval = (bool)MISC::IS_NEXT_WEATHER_TYPE(weatherType);
		return retval;
	}

	void LUA_NATIVE_MISC_SET_WEATHER_TYPE_PERSIST( const char* weatherType )
	{
		MISC::SET_WEATHER_TYPE_PERSIST(weatherType);
	}

	void LUA_NATIVE_MISC_SET_WEATHER_TYPE_NOW_PERSIST( const char* weatherType )
	{
		MISC::SET_WEATHER_TYPE_NOW_PERSIST(weatherType);
	}

	void LUA_NATIVE_MISC_SET_WEATHER_TYPE_NOW( const char* weatherType )
	{
		MISC::SET_WEATHER_TYPE_NOW(weatherType);
	}

	void LUA_NATIVE_MISC_SET_WEATHER_TYPE_OVERTIME_PERSIST( const char* weatherType, float time )
	{
		MISC::SET_WEATHER_TYPE_OVERTIME_PERSIST(weatherType, time);
	}

	void LUA_NATIVE_MISC_SET_RANDOM_WEATHER_TYPE(  )
	{
		MISC::SET_RANDOM_WEATHER_TYPE();
	}

	void LUA_NATIVE_MISC_CLEAR_WEATHER_TYPE_PERSIST(  )
	{
		MISC::CLEAR_WEATHER_TYPE_PERSIST();
	}

	void LUA_NATIVE_MISC_CLEAR_WEATHER_TYPE_NOW_PERSIST_NETWORK( int milliseconds )
	{
		MISC::CLEAR_WEATHER_TYPE_NOW_PERSIST_NETWORK(milliseconds);
	}

	std::tuple<Hash, Hash, float> LUA_NATIVE_MISC_GET_CURR_WEATHER_STATE( Hash weatherType1, Hash weatherType2, float percentWeather2 )
	{
		std::tuple<Hash, Hash, float> return_values;
		MISC::GET_CURR_WEATHER_STATE(&weatherType1, &weatherType2, &percentWeather2);
		std::get<0>(return_values) = weatherType1;
		std::get<1>(return_values) = weatherType2;
		std::get<2>(return_values) = percentWeather2;

		return return_values;
	}

	void LUA_NATIVE_MISC_SET_CURR_WEATHER_STATE( Hash weatherType1, Hash weatherType2, float percentWeather2 )
	{
		MISC::SET_CURR_WEATHER_STATE(weatherType1, weatherType2, percentWeather2);
	}

	void LUA_NATIVE_MISC_SET_OVERRIDE_WEATHER( const char* weatherType )
	{
		MISC::SET_OVERRIDE_WEATHER(weatherType);
	}

	void LUA_NATIVE_MISC_SET_OVERRIDE_WEATHEREX( const char* weatherType, bool p1 )
	{
		MISC::SET_OVERRIDE_WEATHEREX(weatherType, p1);
	}

	void LUA_NATIVE_MISC_CLEAR_OVERRIDE_WEATHER(  )
	{
		MISC::CLEAR_OVERRIDE_WEATHER();
	}

	void LUA_NATIVE_MISC_WATER_OVERRIDE_SET_SHOREWAVEAMPLITUDE( float amplitude )
	{
		MISC::WATER_OVERRIDE_SET_SHOREWAVEAMPLITUDE(amplitude);
	}

	void LUA_NATIVE_MISC_WATER_OVERRIDE_SET_SHOREWAVEMINAMPLITUDE( float minAmplitude )
	{
		MISC::WATER_OVERRIDE_SET_SHOREWAVEMINAMPLITUDE(minAmplitude);
	}

	void LUA_NATIVE_MISC_WATER_OVERRIDE_SET_SHOREWAVEMAXAMPLITUDE( float maxAmplitude )
	{
		MISC::WATER_OVERRIDE_SET_SHOREWAVEMAXAMPLITUDE(maxAmplitude);
	}

	void LUA_NATIVE_MISC_WATER_OVERRIDE_SET_OCEANNOISEMINAMPLITUDE( float minAmplitude )
	{
		MISC::WATER_OVERRIDE_SET_OCEANNOISEMINAMPLITUDE(minAmplitude);
	}

	void LUA_NATIVE_MISC_WATER_OVERRIDE_SET_OCEANWAVEAMPLITUDE( float amplitude )
	{
		MISC::WATER_OVERRIDE_SET_OCEANWAVEAMPLITUDE(amplitude);
	}

	void LUA_NATIVE_MISC_WATER_OVERRIDE_SET_OCEANWAVEMINAMPLITUDE( float minAmplitude )
	{
		MISC::WATER_OVERRIDE_SET_OCEANWAVEMINAMPLITUDE(minAmplitude);
	}

	void LUA_NATIVE_MISC_WATER_OVERRIDE_SET_OCEANWAVEMAXAMPLITUDE( float maxAmplitude )
	{
		MISC::WATER_OVERRIDE_SET_OCEANWAVEMAXAMPLITUDE(maxAmplitude);
	}

	void LUA_NATIVE_MISC_WATER_OVERRIDE_SET_RIPPLEBUMPINESS( float bumpiness )
	{
		MISC::WATER_OVERRIDE_SET_RIPPLEBUMPINESS(bumpiness);
	}

	void LUA_NATIVE_MISC_WATER_OVERRIDE_SET_RIPPLEMINBUMPINESS( float minBumpiness )
	{
		MISC::WATER_OVERRIDE_SET_RIPPLEMINBUMPINESS(minBumpiness);
	}

	void LUA_NATIVE_MISC_WATER_OVERRIDE_SET_RIPPLEMAXBUMPINESS( float maxBumpiness )
	{
		MISC::WATER_OVERRIDE_SET_RIPPLEMAXBUMPINESS(maxBumpiness);
	}

	void LUA_NATIVE_MISC_WATER_OVERRIDE_SET_RIPPLEDISTURB( float disturb )
	{
		MISC::WATER_OVERRIDE_SET_RIPPLEDISTURB(disturb);
	}

	void LUA_NATIVE_MISC_WATER_OVERRIDE_SET_STRENGTH( float strength )
	{
		MISC::WATER_OVERRIDE_SET_STRENGTH(strength);
	}

	void LUA_NATIVE_MISC_WATER_OVERRIDE_FADE_IN( float p0 )
	{
		MISC::WATER_OVERRIDE_FADE_IN(p0);
	}

	void LUA_NATIVE_MISC_WATER_OVERRIDE_FADE_OUT( float p0 )
	{
		MISC::WATER_OVERRIDE_FADE_OUT(p0);
	}

	void LUA_NATIVE_MISC_SET_WIND( float speed )
	{
		MISC::SET_WIND(speed);
	}

	void LUA_NATIVE_MISC_SET_WIND_SPEED( float speed )
	{
		MISC::SET_WIND_SPEED(speed);
	}

	float LUA_NATIVE_MISC_GET_WIND_SPEED(  )
	{
		auto retval = MISC::GET_WIND_SPEED();
		return retval;
	}

	void LUA_NATIVE_MISC_SET_WIND_DIRECTION( float direction )
	{
		MISC::SET_WIND_DIRECTION(direction);
	}

	Vector3 LUA_NATIVE_MISC_GET_WIND_DIRECTION(  )
	{
		auto retval = MISC::GET_WIND_DIRECTION();
		return retval;
	}

	void LUA_NATIVE_MISC_SET_RAIN( float intensity )
	{
		MISC::SET_RAIN(intensity);
	}

	float LUA_NATIVE_MISC_GET_RAIN_LEVEL(  )
	{
		auto retval = MISC::GET_RAIN_LEVEL();
		return retval;
	}

	void LUA_NATIVE_MISC_SET_SNOW( float level )
	{
		MISC::SET_SNOW(level);
	}

	float LUA_NATIVE_MISC_GET_SNOW_LEVEL(  )
	{
		auto retval = MISC::GET_SNOW_LEVEL();
		return retval;
	}

	void LUA_NATIVE_MISC_FORCE_LIGHTNING_FLASH(  )
	{
		MISC::FORCE_LIGHTNING_FLASH();
	}

	void LUA_NATIVE_MISC_SET_CLOUD_SETTINGS_OVERRIDE( const char* p0 )
	{
		MISC::SET_CLOUD_SETTINGS_OVERRIDE(p0);
	}

	void LUA_NATIVE_MISC_PRELOAD_CLOUD_HAT( const char* name )
	{
		MISC::PRELOAD_CLOUD_HAT(name);
	}

	void LUA_NATIVE_MISC_LOAD_CLOUD_HAT( const char* name, float transitionTime )
	{
		MISC::LOAD_CLOUD_HAT(name, transitionTime);
	}

	void LUA_NATIVE_MISC_UNLOAD_CLOUD_HAT( const char* name, float p1 )
	{
		MISC::UNLOAD_CLOUD_HAT(name, p1);
	}

	void LUA_NATIVE_MISC_UNLOAD_ALL_CLOUD_HATS(  )
	{
		MISC::UNLOAD_ALL_CLOUD_HATS();
	}

	void LUA_NATIVE_MISC_SET_CLOUDS_ALPHA( float opacity )
	{
		MISC::SET_CLOUDS_ALPHA(opacity);
	}

	float LUA_NATIVE_MISC_GET_CLOUDS_ALPHA(  )
	{
		auto retval = MISC::GET_CLOUDS_ALPHA();
		return retval;
	}

	int LUA_NATIVE_MISC_GET_GAME_TIMER(  )
	{
		auto retval = MISC::GET_GAME_TIMER();
		return retval;
	}

	float LUA_NATIVE_MISC_GET_FRAME_TIME(  )
	{
		auto retval = MISC::GET_FRAME_TIME();
		return retval;
	}

	float LUA_NATIVE_MISC_GET_SYSTEM_TIME_STEP(  )
	{
		auto retval = MISC::GET_SYSTEM_TIME_STEP();
		return retval;
	}

	int LUA_NATIVE_MISC_GET_FRAME_COUNT(  )
	{
		auto retval = MISC::GET_FRAME_COUNT();
		return retval;
	}

	float LUA_NATIVE_MISC_GET_RANDOM_FLOAT_IN_RANGE( float startRange, float endRange )
	{
		auto retval = MISC::GET_RANDOM_FLOAT_IN_RANGE(startRange, endRange);
		return retval;
	}

	int LUA_NATIVE_MISC_GET_RANDOM_INT_IN_RANGE( int startRange, int endRange )
	{
		auto retval = MISC::GET_RANDOM_INT_IN_RANGE(startRange, endRange);
		return retval;
	}

	int LUA_NATIVE_MISC_GET_RANDOM_MWC_INT_IN_RANGE( int startRange, int endRange )
	{
		auto retval = MISC::GET_RANDOM_MWC_INT_IN_RANGE(startRange, endRange);
		return retval;
	}

	std::tuple<bool, float> LUA_NATIVE_MISC_GET_GROUND_Z_FOR_3D_COORD( float x, float y, float z, float groundZ, bool ignoreWater, bool p5 )
	{
		std::tuple<bool, float> return_values;
		std::get<0>(return_values) = (bool)MISC::GET_GROUND_Z_FOR_3D_COORD(x, y, z, &groundZ, ignoreWater, p5);
		std::get<1>(return_values) = groundZ;

		return return_values;
	}

	std::tuple<bool, float, Vector3> LUA_NATIVE_MISC_GET_GROUND_Z_AND_NORMAL_FOR_3D_COORD( float x, float y, float z, float groundZ, Vector3 normal )
	{
		std::tuple<bool, float, Vector3> return_values;
		std::get<0>(return_values) = (bool)MISC::GET_GROUND_Z_AND_NORMAL_FOR_3D_COORD(x, y, z, &groundZ, &normal);
		std::get<1>(return_values) = groundZ;
		std::get<2>(return_values) = normal;

		return return_values;
	}

	std::tuple<bool, float> LUA_NATIVE_MISC_GET_GROUND_Z_EXCLUDING_OBJECTS_FOR_3D_COORD( float x, float y, float z, float groundZ, bool p4, bool p5 )
	{
		std::tuple<bool, float> return_values;
		std::get<0>(return_values) = (bool)MISC::GET_GROUND_Z_EXCLUDING_OBJECTS_FOR_3D_COORD(x, y, z, &groundZ, p4, p5);
		std::get<1>(return_values) = groundZ;

		return return_values;
	}

	float LUA_NATIVE_MISC_ASIN( float p0 )
	{
		auto retval = MISC::ASIN(p0);
		return retval;
	}

	float LUA_NATIVE_MISC_ACOS( float p0 )
	{
		auto retval = MISC::ACOS(p0);
		return retval;
	}

	float LUA_NATIVE_MISC_TAN( float p0 )
	{
		auto retval = MISC::TAN(p0);
		return retval;
	}

	float LUA_NATIVE_MISC_ATAN( float p0 )
	{
		auto retval = MISC::ATAN(p0);
		return retval;
	}

	float LUA_NATIVE_MISC_ATAN2( float p0, float p1 )
	{
		auto retval = MISC::ATAN2(p0, p1);
		return retval;
	}

	float LUA_NATIVE_MISC_GET_DISTANCE_BETWEEN_COORDS( float x1, float y1, float z1, float x2, float y2, float z2, bool useZ )
	{
		auto retval = MISC::GET_DISTANCE_BETWEEN_COORDS(x1, y1, z1, x2, y2, z2, useZ);
		return retval;
	}

	float LUA_NATIVE_MISC_GET_ANGLE_BETWEEN_2D_VECTORS( float x1, float y1, float x2, float y2 )
	{
		auto retval = MISC::GET_ANGLE_BETWEEN_2D_VECTORS(x1, y1, x2, y2);
		return retval;
	}

	float LUA_NATIVE_MISC_GET_HEADING_FROM_VECTOR_2D( float dx, float dy )
	{
		auto retval = MISC::GET_HEADING_FROM_VECTOR_2D(dx, dy);
		return retval;
	}

	float LUA_NATIVE_MISC_GET_RATIO_OF_CLOSEST_POINT_ON_LINE( float x1, float y1, float z1, float x2, float y2, float z2, float x3, float y3, float z3, bool clamp )
	{
		auto retval = MISC::GET_RATIO_OF_CLOSEST_POINT_ON_LINE(x1, y1, z1, x2, y2, z2, x3, y3, z3, clamp);
		return retval;
	}

	Vector3 LUA_NATIVE_MISC_GET_CLOSEST_POINT_ON_LINE( float x1, float y1, float z1, float x2, float y2, float z2, float x3, float y3, float z3, bool clamp )
	{
		auto retval = MISC::GET_CLOSEST_POINT_ON_LINE(x1, y1, z1, x2, y2, z2, x3, y3, z3, clamp);
		return retval;
	}

	std::tuple<bool, float> LUA_NATIVE_MISC_GET_LINE_PLANE_INTERSECTION( float p0, float p1, float p2, float p3, float p4, float p5, float p6, float p7, float p8, float p9, float p10, float p11, float p12 )
	{
		std::tuple<bool, float> return_values;
		std::get<0>(return_values) = (bool)MISC::GET_LINE_PLANE_INTERSECTION(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, &p12);
		std::get<1>(return_values) = p12;

		return return_values;
	}

	bool LUA_NATIVE_MISC_GET_POINT_AREA_OVERLAP( Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9, Any p10, Any p11, Any p12, Any p13 )
	{
		auto retval = (bool)MISC::GET_POINT_AREA_OVERLAP(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13);
		return retval;
	}

	int LUA_NATIVE_MISC_SET_BIT( int address, int offset )
	{
		MISC::SET_BIT(&address, offset);
		return address;
	}

	int LUA_NATIVE_MISC_CLEAR_BIT( int address, int offset )
	{
		MISC::CLEAR_BIT(&address, offset);
		return address;
	}

	Hash LUA_NATIVE_MISC_GET_HASH_KEY( const char* string )
	{
		auto retval = MISC::GET_HASH_KEY(string);
		return retval;
	}

	std::tuple<float, float, float, float> LUA_NATIVE_MISC_SLERP_NEAR_QUATERNION( float t, float x, float y, float z, float w, float x1, float y1, float z1, float w1, float outX, float outY, float outZ, float outW )
	{
		std::tuple<float, float, float, float> return_values;
		MISC::SLERP_NEAR_QUATERNION(t, x, y, z, w, x1, y1, z1, w1, &outX, &outY, &outZ, &outW);
		std::get<0>(return_values) = outX;
		std::get<1>(return_values) = outY;
		std::get<2>(return_values) = outZ;
		std::get<3>(return_values) = outW;

		return return_values;
	}

	bool LUA_NATIVE_MISC_IS_AREA_OCCUPIED( float p0, float p1, float p2, float p3, float p4, float p5, bool p6, bool p7, bool p8, bool p9, bool p10, Any p11, bool p12 )
	{
		auto retval = (bool)MISC::IS_AREA_OCCUPIED(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12);
		return retval;
	}

	bool LUA_NATIVE_MISC_IS_AREA_OCCUPIED_SLOW( Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9, Any p10, Any p11, Any p12 )
	{
		auto retval = (bool)MISC::IS_AREA_OCCUPIED_SLOW(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12);
		return retval;
	}

	bool LUA_NATIVE_MISC_IS_POSITION_OCCUPIED( float x, float y, float z, float range, bool p4, bool checkVehicles, bool checkPeds, bool p7, bool p8, Entity ignoreEntity, bool p10 )
	{
		auto retval = (bool)MISC::IS_POSITION_OCCUPIED(x, y, z, range, p4, checkVehicles, checkPeds, p7, p8, ignoreEntity, p10);
		return retval;
	}

	bool LUA_NATIVE_MISC_IS_POINT_OBSCURED_BY_A_MISSION_ENTITY( float p0, float p1, float p2, float p3, float p4, float p5, Any p6 )
	{
		auto retval = (bool)MISC::IS_POINT_OBSCURED_BY_A_MISSION_ENTITY(p0, p1, p2, p3, p4, p5, p6);
		return retval;
	}

	void LUA_NATIVE_MISC_CLEAR_AREA( float X, float Y, float Z, float radius, bool p4, bool ignoreCopCars, bool ignoreObjects, bool p7 )
	{
		MISC::CLEAR_AREA(X, Y, Z, radius, p4, ignoreCopCars, ignoreObjects, p7);
	}

	void LUA_NATIVE_MISC_CLEAR_AREA_LEAVE_VEHICLE_HEALTH( float x, float y, float z, float radius, bool p4, bool p5, bool p6, bool p7 )
	{
		MISC::CLEAR_AREA_LEAVE_VEHICLE_HEALTH(x, y, z, radius, p4, p5, p6, p7);
	}

	void LUA_NATIVE_MISC_CLEAR_AREA_OF_VEHICLES( float x, float y, float z, float radius, bool p4, bool p5, bool p6, bool p7, bool p8, bool p9, Any p10 )
	{
		MISC::CLEAR_AREA_OF_VEHICLES(x, y, z, radius, p4, p5, p6, p7, p8, p9, p10);
	}

	void LUA_NATIVE_MISC_CLEAR_ANGLED_AREA_OF_VEHICLES( float x1, float y1, float z1, float x2, float y2, float z2, float width, bool p7, bool p8, bool p9, bool p10, bool p11, Any p12, Any p13 )
	{
		MISC::CLEAR_ANGLED_AREA_OF_VEHICLES(x1, y1, z1, x2, y2, z2, width, p7, p8, p9, p10, p11, p12, p13);
	}

	void LUA_NATIVE_MISC_CLEAR_AREA_OF_OBJECTS( float x, float y, float z, float radius, int flags )
	{
		MISC::CLEAR_AREA_OF_OBJECTS(x, y, z, radius, flags);
	}

	void LUA_NATIVE_MISC_CLEAR_AREA_OF_PEDS( float x, float y, float z, float radius, int flags )
	{
		MISC::CLEAR_AREA_OF_PEDS(x, y, z, radius, flags);
	}

	void LUA_NATIVE_MISC_CLEAR_AREA_OF_COPS( float x, float y, float z, float radius, int flags )
	{
		MISC::CLEAR_AREA_OF_COPS(x, y, z, radius, flags);
	}

	void LUA_NATIVE_MISC_CLEAR_AREA_OF_PROJECTILES( float x, float y, float z, float radius, int flags )
	{
		MISC::CLEAR_AREA_OF_PROJECTILES(x, y, z, radius, flags);
	}

	void LUA_NATIVE_MISC_CLEAR_SCENARIO_SPAWN_HISTORY(  )
	{
		MISC::CLEAR_SCENARIO_SPAWN_HISTORY();
	}

	void LUA_NATIVE_MISC_SET_SAVE_MENU_ACTIVE( bool ignoreVehicle )
	{
		MISC::SET_SAVE_MENU_ACTIVE(ignoreVehicle);
	}

	int LUA_NATIVE_MISC_GET_STATUS_OF_MANUAL_SAVE(  )
	{
		auto retval = MISC::GET_STATUS_OF_MANUAL_SAVE();
		return retval;
	}

	void LUA_NATIVE_MISC_SET_CREDITS_ACTIVE( bool toggle )
	{
		MISC::SET_CREDITS_ACTIVE(toggle);
	}

	void LUA_NATIVE_MISC_SET_CREDITS_FADE_OUT_WITH_SCREEN( bool toggle )
	{
		MISC::SET_CREDITS_FADE_OUT_WITH_SCREEN(toggle);
	}

	bool LUA_NATIVE_MISC_HAVE_CREDITS_REACHED_END(  )
	{
		auto retval = (bool)MISC::HAVE_CREDITS_REACHED_END();
		return retval;
	}

	bool LUA_NATIVE_MISC_ARE_CREDITS_RUNNING(  )
	{
		auto retval = (bool)MISC::ARE_CREDITS_RUNNING();
		return retval;
	}

	void LUA_NATIVE_MISC_TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME( const char* scriptName )
	{
		MISC::TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME(scriptName);
	}

	void LUA_NATIVE_MISC_NETWORK_SET_SCRIPT_IS_SAFE_FOR_NETWORK_GAME(  )
	{
		MISC::NETWORK_SET_SCRIPT_IS_SAFE_FOR_NETWORK_GAME();
	}

	int LUA_NATIVE_MISC_ADD_HOSPITAL_RESTART( float x, float y, float z, float p3, Any p4 )
	{
		auto retval = MISC::ADD_HOSPITAL_RESTART(x, y, z, p3, p4);
		return retval;
	}

	void LUA_NATIVE_MISC_DISABLE_HOSPITAL_RESTART( int hospitalIndex, bool toggle )
	{
		MISC::DISABLE_HOSPITAL_RESTART(hospitalIndex, toggle);
	}

	int LUA_NATIVE_MISC_ADD_POLICE_RESTART( float p0, float p1, float p2, float p3, Any p4 )
	{
		auto retval = MISC::ADD_POLICE_RESTART(p0, p1, p2, p3, p4);
		return retval;
	}

	void LUA_NATIVE_MISC_DISABLE_POLICE_RESTART( int policeIndex, bool toggle )
	{
		MISC::DISABLE_POLICE_RESTART(policeIndex, toggle);
	}

	void LUA_NATIVE_MISC_SET_RESTART_COORD_OVERRIDE( float x, float y, float z, float heading )
	{
		MISC::SET_RESTART_COORD_OVERRIDE(x, y, z, heading);
	}

	void LUA_NATIVE_MISC_CLEAR_RESTART_COORD_OVERRIDE(  )
	{
		MISC::CLEAR_RESTART_COORD_OVERRIDE();
	}

	void LUA_NATIVE_MISC_PAUSE_DEATH_ARREST_RESTART( bool toggle )
	{
		MISC::PAUSE_DEATH_ARREST_RESTART(toggle);
	}

	void LUA_NATIVE_MISC_IGNORE_NEXT_RESTART( bool toggle )
	{
		MISC::IGNORE_NEXT_RESTART(toggle);
	}

	void LUA_NATIVE_MISC_SET_FADE_OUT_AFTER_DEATH( bool toggle )
	{
		MISC::SET_FADE_OUT_AFTER_DEATH(toggle);
	}

	void LUA_NATIVE_MISC_SET_FADE_OUT_AFTER_ARREST( bool toggle )
	{
		MISC::SET_FADE_OUT_AFTER_ARREST(toggle);
	}

	void LUA_NATIVE_MISC_SET_FADE_IN_AFTER_DEATH_ARREST( bool toggle )
	{
		MISC::SET_FADE_IN_AFTER_DEATH_ARREST(toggle);
	}

	void LUA_NATIVE_MISC_SET_FADE_IN_AFTER_LOAD( bool toggle )
	{
		MISC::SET_FADE_IN_AFTER_LOAD(toggle);
	}

	int LUA_NATIVE_MISC_REGISTER_SAVE_HOUSE( float x, float y, float z, float p3, const char* p4, Any p5, Any p6 )
	{
		auto retval = MISC::REGISTER_SAVE_HOUSE(x, y, z, p3, p4, p5, p6);
		return retval;
	}

	void LUA_NATIVE_MISC_SET_SAVE_HOUSE( int savehouseHandle, bool p1, bool p2 )
	{
		MISC::SET_SAVE_HOUSE(savehouseHandle, p1, p2);
	}

	bool LUA_NATIVE_MISC_OVERRIDE_SAVE_HOUSE( bool p0, float p1, float p2, float p3, float p4, bool p5, float p6, float p7 )
	{
		auto retval = (bool)MISC::OVERRIDE_SAVE_HOUSE(p0, p1, p2, p3, p4, p5, p6, p7);
		return retval;
	}

	std::tuple<bool, Vector3, float, bool, bool> LUA_NATIVE_MISC_GET_SAVE_HOUSE_DETAILS_AFTER_SUCCESSFUL_LOAD( Vector3 p0, float p1, bool fadeInAfterLoad, bool p3 )
	{
		std::tuple<bool, Vector3, float, bool, bool> return_values;
		std::get<0>(return_values) = (bool)MISC::GET_SAVE_HOUSE_DETAILS_AFTER_SUCCESSFUL_LOAD(&p0, &p1, (BOOL*)&fadeInAfterLoad, (BOOL*)&p3);
		std::get<1>(return_values) = p0;
		std::get<2>(return_values) = p1;
		std::get<3>(return_values) = fadeInAfterLoad;
		std::get<4>(return_values) = p3;

		return return_values;
	}

	void LUA_NATIVE_MISC_DO_AUTO_SAVE(  )
	{
		MISC::DO_AUTO_SAVE();
	}

	bool LUA_NATIVE_MISC_GET_IS_AUTO_SAVE_OFF(  )
	{
		auto retval = (bool)MISC::GET_IS_AUTO_SAVE_OFF();
		return retval;
	}

	bool LUA_NATIVE_MISC_IS_AUTO_SAVE_IN_PROGRESS(  )
	{
		auto retval = (bool)MISC::IS_AUTO_SAVE_IN_PROGRESS();
		return retval;
	}

	bool LUA_NATIVE_MISC_HAS_CODE_REQUESTED_AUTOSAVE(  )
	{
		auto retval = (bool)MISC::HAS_CODE_REQUESTED_AUTOSAVE();
		return retval;
	}

	void LUA_NATIVE_MISC_CLEAR_CODE_REQUESTED_AUTOSAVE(  )
	{
		MISC::CLEAR_CODE_REQUESTED_AUTOSAVE();
	}

	void LUA_NATIVE_MISC_BEGIN_REPLAY_STATS( Any p0, Any p1 )
	{
		MISC::BEGIN_REPLAY_STATS(p0, p1);
	}

	void LUA_NATIVE_MISC_ADD_REPLAY_STAT_VALUE( Any value )
	{
		MISC::ADD_REPLAY_STAT_VALUE(value);
	}

	void LUA_NATIVE_MISC_END_REPLAY_STATS(  )
	{
		MISC::END_REPLAY_STATS();
	}

	bool LUA_NATIVE_MISC_HAVE_REPLAY_STATS_BEEN_STORED(  )
	{
		auto retval = (bool)MISC::HAVE_REPLAY_STATS_BEEN_STORED();
		return retval;
	}

	int LUA_NATIVE_MISC_GET_REPLAY_STAT_MISSION_ID(  )
	{
		auto retval = MISC::GET_REPLAY_STAT_MISSION_ID();
		return retval;
	}

	int LUA_NATIVE_MISC_GET_REPLAY_STAT_MISSION_TYPE(  )
	{
		auto retval = MISC::GET_REPLAY_STAT_MISSION_TYPE();
		return retval;
	}

	int LUA_NATIVE_MISC_GET_REPLAY_STAT_COUNT(  )
	{
		auto retval = MISC::GET_REPLAY_STAT_COUNT();
		return retval;
	}

	int LUA_NATIVE_MISC_GET_REPLAY_STAT_AT_INDEX( int index )
	{
		auto retval = MISC::GET_REPLAY_STAT_AT_INDEX(index);
		return retval;
	}

	void LUA_NATIVE_MISC_CLEAR_REPLAY_STATS(  )
	{
		MISC::CLEAR_REPLAY_STATS();
	}

	bool LUA_NATIVE_MISC_QUEUE_MISSION_REPEAT_LOAD(  )
	{
		auto retval = (bool)MISC::QUEUE_MISSION_REPEAT_LOAD();
		return retval;
	}

	bool LUA_NATIVE_MISC_QUEUE_MISSION_REPEAT_SAVE(  )
	{
		auto retval = (bool)MISC::QUEUE_MISSION_REPEAT_SAVE();
		return retval;
	}

	bool LUA_NATIVE_MISC_QUEUE_MISSION_REPEAT_SAVE_FOR_BENCHMARK_TEST(  )
	{
		auto retval = (bool)MISC::QUEUE_MISSION_REPEAT_SAVE_FOR_BENCHMARK_TEST();
		return retval;
	}

	int LUA_NATIVE_MISC_GET_STATUS_OF_MISSION_REPEAT_SAVE(  )
	{
		auto retval = MISC::GET_STATUS_OF_MISSION_REPEAT_SAVE();
		return retval;
	}

	bool LUA_NATIVE_MISC_IS_MEMORY_CARD_IN_USE(  )
	{
		auto retval = (bool)MISC::IS_MEMORY_CARD_IN_USE();
		return retval;
	}

	void LUA_NATIVE_MISC_SHOOT_SINGLE_BULLET_BETWEEN_COORDS( float x1, float y1, float z1, float x2, float y2, float z2, int damage, bool p7, Hash weaponHash, Ped ownerPed, bool isAudible, bool isInvisible, float speed )
	{
		MISC::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(x1, y1, z1, x2, y2, z2, damage, p7, weaponHash, ownerPed, isAudible, isInvisible, speed);
	}

	void LUA_NATIVE_MISC_SHOOT_SINGLE_BULLET_BETWEEN_COORDS_IGNORE_ENTITY( float x1, float y1, float z1, float x2, float y2, float z2, int damage, bool p7, Hash weaponHash, Ped ownerPed, bool isAudible, bool isInvisible, float speed, Entity entity, Any p14 )
	{
		MISC::SHOOT_SINGLE_BULLET_BETWEEN_COORDS_IGNORE_ENTITY(x1, y1, z1, x2, y2, z2, damage, p7, weaponHash, ownerPed, isAudible, isInvisible, speed, entity, p14);
	}

	void LUA_NATIVE_MISC_SHOOT_SINGLE_BULLET_BETWEEN_COORDS_IGNORE_ENTITY_NEW( float x1, float y1, float z1, float x2, float y2, float z2, int damage, bool p7, Hash weaponHash, Ped ownerPed, bool isAudible, bool isInvisible, float speed, Entity entity, bool p14, bool p15, Entity targetEntity, bool p17, Any p18, Any p19, Any p20 )
	{
		MISC::SHOOT_SINGLE_BULLET_BETWEEN_COORDS_IGNORE_ENTITY_NEW(x1, y1, z1, x2, y2, z2, damage, p7, weaponHash, ownerPed, isAudible, isInvisible, speed, entity, p14, p15, targetEntity, p17, p18, p19, p20);
	}

	std::tuple<Vector3, Vector3> LUA_NATIVE_MISC_GET_MODEL_DIMENSIONS( Hash modelHash, Vector3 minimum, Vector3 maximum )
	{
		std::tuple<Vector3, Vector3> return_values;
		MISC::GET_MODEL_DIMENSIONS(modelHash, &minimum, &maximum);
		std::get<0>(return_values) = minimum;
		std::get<1>(return_values) = maximum;

		return return_values;
	}

	void LUA_NATIVE_MISC_SET_FAKE_WANTED_LEVEL( int fakeWantedLevel )
	{
		MISC::SET_FAKE_WANTED_LEVEL(fakeWantedLevel);
	}

	int LUA_NATIVE_MISC_GET_FAKE_WANTED_LEVEL(  )
	{
		auto retval = MISC::GET_FAKE_WANTED_LEVEL();
		return retval;
	}

	void LUA_NATIVE_MISC_USING_MISSION_CREATOR( bool toggle )
	{
		MISC::USING_MISSION_CREATOR(toggle);
	}

	void LUA_NATIVE_MISC_ALLOW_MISSION_CREATOR_WARP( bool toggle )
	{
		MISC::ALLOW_MISSION_CREATOR_WARP(toggle);
	}

	void LUA_NATIVE_MISC_SET_MINIGAME_IN_PROGRESS( bool toggle )
	{
		MISC::SET_MINIGAME_IN_PROGRESS(toggle);
	}

	bool LUA_NATIVE_MISC_IS_MINIGAME_IN_PROGRESS(  )
	{
		auto retval = (bool)MISC::IS_MINIGAME_IN_PROGRESS();
		return retval;
	}

	bool LUA_NATIVE_MISC_IS_THIS_A_MINIGAME_SCRIPT(  )
	{
		auto retval = (bool)MISC::IS_THIS_A_MINIGAME_SCRIPT();
		return retval;
	}

	bool LUA_NATIVE_MISC_IS_SNIPER_INVERTED(  )
	{
		auto retval = (bool)MISC::IS_SNIPER_INVERTED();
		return retval;
	}

	bool LUA_NATIVE_MISC_SHOULD_USE_METRIC_MEASUREMENTS(  )
	{
		auto retval = (bool)MISC::SHOULD_USE_METRIC_MEASUREMENTS();
		return retval;
	}

	int LUA_NATIVE_MISC_GET_PROFILE_SETTING( int profileSetting )
	{
		auto retval = MISC::GET_PROFILE_SETTING(profileSetting);
		return retval;
	}

	bool LUA_NATIVE_MISC_ARE_STRINGS_EQUAL( const char* string1, const char* string2 )
	{
		auto retval = (bool)MISC::ARE_STRINGS_EQUAL(string1, string2);
		return retval;
	}

	int LUA_NATIVE_MISC_COMPARE_STRINGS( const char* str1, const char* str2, bool matchCase, int maxLength )
	{
		auto retval = MISC::COMPARE_STRINGS(str1, str2, matchCase, maxLength);
		return retval;
	}

	int LUA_NATIVE_MISC_ABSI( int value )
	{
		auto retval = MISC::ABSI(value);
		return retval;
	}

	float LUA_NATIVE_MISC_ABSF( float value )
	{
		auto retval = MISC::ABSF(value);
		return retval;
	}

	bool LUA_NATIVE_MISC_IS_SNIPER_BULLET_IN_AREA( float x1, float y1, float z1, float x2, float y2, float z2 )
	{
		auto retval = (bool)MISC::IS_SNIPER_BULLET_IN_AREA(x1, y1, z1, x2, y2, z2);
		return retval;
	}

	bool LUA_NATIVE_MISC_IS_PROJECTILE_IN_AREA( float x1, float y1, float z1, float x2, float y2, float z2, bool ownedByPlayer )
	{
		auto retval = (bool)MISC::IS_PROJECTILE_IN_AREA(x1, y1, z1, x2, y2, z2, ownedByPlayer);
		return retval;
	}

	bool LUA_NATIVE_MISC_IS_PROJECTILE_TYPE_IN_AREA( float x1, float y1, float z1, float x2, float y2, float z2, int type, bool ownedByPlayer )
	{
		auto retval = (bool)MISC::IS_PROJECTILE_TYPE_IN_AREA(x1, y1, z1, x2, y2, z2, type, ownedByPlayer);
		return retval;
	}

	bool LUA_NATIVE_MISC_IS_PROJECTILE_TYPE_IN_ANGLED_AREA( float x1, float y1, float z1, float x2, float y2, float z2, float width, Any p7, bool ownedByPlayer )
	{
		auto retval = (bool)MISC::IS_PROJECTILE_TYPE_IN_ANGLED_AREA(x1, y1, z1, x2, y2, z2, width, p7, ownedByPlayer);
		return retval;
	}

	bool LUA_NATIVE_MISC_IS_PROJECTILE_TYPE_WITHIN_DISTANCE( float x, float y, float z, Hash projectileHash, float radius, bool ownedByPlayer )
	{
		auto retval = (bool)MISC::IS_PROJECTILE_TYPE_WITHIN_DISTANCE(x, y, z, projectileHash, radius, ownedByPlayer);
		return retval;
	}

	std::tuple<bool, Vector3> LUA_NATIVE_MISC_GET_COORDS_OF_PROJECTILE_TYPE_IN_AREA( float x1, float y1, float z1, float x2, float y2, float z2, Hash projectileHash, Vector3 projectilePos, bool ownedByPlayer )
	{
		std::tuple<bool, Vector3> return_values;
		std::get<0>(return_values) = (bool)MISC::GET_COORDS_OF_PROJECTILE_TYPE_IN_AREA(x1, y1, z1, x2, y2, z2, projectileHash, &projectilePos, ownedByPlayer);
		std::get<1>(return_values) = projectilePos;

		return return_values;
	}

	std::tuple<bool, Vector3> LUA_NATIVE_MISC_GET_COORDS_OF_PROJECTILE_TYPE_IN_ANGLED_AREA( float vecAngledAreaPoint1X, float vecAngledAreaPoint1Y, float vecAngledAreaPoint1Z, float vecAngledAreaPoint2X, float vecAngledAreaPoint2Y, float vecAngledAreaPoint2Z, float distanceOfOppositeFace, Hash weaponType, Vector3 positionOut, bool bIsPlayer )
	{
		std::tuple<bool, Vector3> return_values;
		std::get<0>(return_values) = (bool)MISC::GET_COORDS_OF_PROJECTILE_TYPE_IN_ANGLED_AREA(vecAngledAreaPoint1X, vecAngledAreaPoint1Y, vecAngledAreaPoint1Z, vecAngledAreaPoint2X, vecAngledAreaPoint2Y, vecAngledAreaPoint2Z, distanceOfOppositeFace, weaponType, &positionOut, bIsPlayer);
		std::get<1>(return_values) = positionOut;

		return return_values;
	}

	std::tuple<bool, Vector3> LUA_NATIVE_MISC_GET_COORDS_OF_PROJECTILE_TYPE_WITHIN_DISTANCE( Ped ped, Hash weaponHash, float distance, Vector3 outCoords, bool p4 )
	{
		std::tuple<bool, Vector3> return_values;
		std::get<0>(return_values) = (bool)MISC::GET_COORDS_OF_PROJECTILE_TYPE_WITHIN_DISTANCE(ped, weaponHash, distance, &outCoords, p4);
		std::get<1>(return_values) = outCoords;

		return return_values;
	}

	std::tuple<bool, Vector3, Object> LUA_NATIVE_MISC_GET_PROJECTILE_OF_PROJECTILE_TYPE_WITHIN_DISTANCE( Ped ped, Hash weaponHash, float distance, Vector3 outCoords, Object outProjectile, bool p5 )
	{
		std::tuple<bool, Vector3, Object> return_values;
		std::get<0>(return_values) = (bool)MISC::GET_PROJECTILE_OF_PROJECTILE_TYPE_WITHIN_DISTANCE(ped, weaponHash, distance, &outCoords, &outProjectile, p5);
		std::get<1>(return_values) = outCoords;
		std::get<2>(return_values) = outProjectile;

		return return_values;
	}

	bool LUA_NATIVE_MISC_IS_BULLET_IN_ANGLED_AREA( float x1, float y1, float z1, float x2, float y2, float z2, float width, bool ownedByPlayer )
	{
		auto retval = (bool)MISC::IS_BULLET_IN_ANGLED_AREA(x1, y1, z1, x2, y2, z2, width, ownedByPlayer);
		return retval;
	}

	bool LUA_NATIVE_MISC_IS_BULLET_IN_AREA( float x, float y, float z, float radius, bool ownedByPlayer )
	{
		auto retval = (bool)MISC::IS_BULLET_IN_AREA(x, y, z, radius, ownedByPlayer);
		return retval;
	}

	bool LUA_NATIVE_MISC_IS_BULLET_IN_BOX( float x1, float y1, float z1, float x2, float y2, float z2, bool ownedByPlayer )
	{
		auto retval = (bool)MISC::IS_BULLET_IN_BOX(x1, y1, z1, x2, y2, z2, ownedByPlayer);
		return retval;
	}

	bool LUA_NATIVE_MISC_HAS_BULLET_IMPACTED_IN_AREA( float x, float y, float z, float p3, bool p4, bool p5 )
	{
		auto retval = (bool)MISC::HAS_BULLET_IMPACTED_IN_AREA(x, y, z, p3, p4, p5);
		return retval;
	}

	bool LUA_NATIVE_MISC_HAS_BULLET_IMPACTED_IN_BOX( float p0, float p1, float p2, float p3, float p4, float p5, bool p6, bool p7 )
	{
		auto retval = (bool)MISC::HAS_BULLET_IMPACTED_IN_BOX(p0, p1, p2, p3, p4, p5, p6, p7);
		return retval;
	}

	bool LUA_NATIVE_MISC_IS_ORBIS_VERSION(  )
	{
		auto retval = (bool)MISC::IS_ORBIS_VERSION();
		return retval;
	}

	bool LUA_NATIVE_MISC_IS_DURANGO_VERSION(  )
	{
		auto retval = (bool)MISC::IS_DURANGO_VERSION();
		return retval;
	}

	bool LUA_NATIVE_MISC_IS_XBOX360_VERSION(  )
	{
		auto retval = (bool)MISC::IS_XBOX360_VERSION();
		return retval;
	}

	bool LUA_NATIVE_MISC_IS_PS3_VERSION(  )
	{
		auto retval = (bool)MISC::IS_PS3_VERSION();
		return retval;
	}

	bool LUA_NATIVE_MISC_IS_PC_VERSION(  )
	{
		auto retval = (bool)MISC::IS_PC_VERSION();
		return retval;
	}

	bool LUA_NATIVE_MISC_IS_STEAM_VERSION(  )
	{
		auto retval = (bool)MISC::IS_STEAM_VERSION();
		return retval;
	}

	bool LUA_NATIVE_MISC_IS_AUSSIE_VERSION(  )
	{
		auto retval = (bool)MISC::IS_AUSSIE_VERSION();
		return retval;
	}

	bool LUA_NATIVE_MISC_IS_JAPANESE_VERSION(  )
	{
		auto retval = (bool)MISC::IS_JAPANESE_VERSION();
		return retval;
	}

	bool LUA_NATIVE_MISC_IS_XBOX_PLATFORM(  )
	{
		auto retval = (bool)MISC::IS_XBOX_PLATFORM();
		return retval;
	}

	bool LUA_NATIVE_MISC_IS_SCARLETT_VERSION(  )
	{
		auto retval = (bool)MISC::IS_SCARLETT_VERSION();
		return retval;
	}

	bool LUA_NATIVE_MISC_IS_SCE_PLATFORM(  )
	{
		auto retval = (bool)MISC::IS_SCE_PLATFORM();
		return retval;
	}

	bool LUA_NATIVE_MISC_IS_PROSPERO_VERSION(  )
	{
		auto retval = (bool)MISC::IS_PROSPERO_VERSION();
		return retval;
	}

	bool LUA_NATIVE_MISC_IS_STRING_NULL( const char* string )
	{
		auto retval = (bool)MISC::IS_STRING_NULL(string);
		return retval;
	}

	bool LUA_NATIVE_MISC_IS_STRING_NULL_OR_EMPTY( const char* string )
	{
		auto retval = (bool)MISC::IS_STRING_NULL_OR_EMPTY(string);
		return retval;
	}

	std::tuple<bool, int> LUA_NATIVE_MISC_STRING_TO_INT( const char* string, int outInteger )
	{
		std::tuple<bool, int> return_values;
		std::get<0>(return_values) = (bool)MISC::STRING_TO_INT(string, &outInteger);
		std::get<1>(return_values) = outInteger;

		return return_values;
	}

	int LUA_NATIVE_MISC_SET_BITS_IN_RANGE( int var, int rangeStart, int rangeEnd, int p3 )
	{
		MISC::SET_BITS_IN_RANGE(&var, rangeStart, rangeEnd, p3);
		return var;
	}

	int LUA_NATIVE_MISC_GET_BITS_IN_RANGE( int var, int rangeStart, int rangeEnd )
	{
		auto retval = MISC::GET_BITS_IN_RANGE(var, rangeStart, rangeEnd);
		return retval;
	}

	int LUA_NATIVE_MISC_ADD_STUNT_JUMP( float x1, float y1, float z1, float x2, float y2, float z2, float x3, float y3, float z3, float x4, float y4, float z4, float camX, float camY, float camZ, int p15, int p16, int p17 )
	{
		auto retval = MISC::ADD_STUNT_JUMP(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4, camX, camY, camZ, p15, p16, p17);
		return retval;
	}

	int LUA_NATIVE_MISC_ADD_STUNT_JUMP_ANGLED( float x1, float y1, float z1, float x2, float y2, float z2, float radius1, float x3, float y3, float z3, float x4, float y4, float z4, float radius2, float camX, float camY, float camZ, int p17, int p18, int p19 )
	{
		auto retval = MISC::ADD_STUNT_JUMP_ANGLED(x1, y1, z1, x2, y2, z2, radius1, x3, y3, z3, x4, y4, z4, radius2, camX, camY, camZ, p17, p18, p19);
		return retval;
	}

	void LUA_NATIVE_MISC_TOGGLE_SHOW_OPTIONAL_STUNT_JUMP_CAMERA( bool toggle )
	{
		MISC::TOGGLE_SHOW_OPTIONAL_STUNT_JUMP_CAMERA(toggle);
	}

	void LUA_NATIVE_MISC_DELETE_STUNT_JUMP( int p0 )
	{
		MISC::DELETE_STUNT_JUMP(p0);
	}

	void LUA_NATIVE_MISC_ENABLE_STUNT_JUMP_SET( int p0 )
	{
		MISC::ENABLE_STUNT_JUMP_SET(p0);
	}

	void LUA_NATIVE_MISC_DISABLE_STUNT_JUMP_SET( int p0 )
	{
		MISC::DISABLE_STUNT_JUMP_SET(p0);
	}

	void LUA_NATIVE_MISC_SET_STUNT_JUMPS_CAN_TRIGGER( bool toggle )
	{
		MISC::SET_STUNT_JUMPS_CAN_TRIGGER(toggle);
	}

	bool LUA_NATIVE_MISC_IS_STUNT_JUMP_IN_PROGRESS(  )
	{
		auto retval = (bool)MISC::IS_STUNT_JUMP_IN_PROGRESS();
		return retval;
	}

	bool LUA_NATIVE_MISC_IS_STUNT_JUMP_MESSAGE_SHOWING(  )
	{
		auto retval = (bool)MISC::IS_STUNT_JUMP_MESSAGE_SHOWING();
		return retval;
	}

	int LUA_NATIVE_MISC_GET_NUM_SUCCESSFUL_STUNT_JUMPS(  )
	{
		auto retval = MISC::GET_NUM_SUCCESSFUL_STUNT_JUMPS();
		return retval;
	}

	int LUA_NATIVE_MISC_GET_TOTAL_SUCCESSFUL_STUNT_JUMPS(  )
	{
		auto retval = MISC::GET_TOTAL_SUCCESSFUL_STUNT_JUMPS();
		return retval;
	}

	void LUA_NATIVE_MISC_CANCEL_STUNT_JUMP(  )
	{
		MISC::CANCEL_STUNT_JUMP();
	}

	void LUA_NATIVE_MISC_SET_GAME_PAUSED( bool toggle )
	{
		MISC::SET_GAME_PAUSED(toggle);
	}

	void LUA_NATIVE_MISC_SET_THIS_SCRIPT_CAN_BE_PAUSED( bool toggle )
	{
		MISC::SET_THIS_SCRIPT_CAN_BE_PAUSED(toggle);
	}

	void LUA_NATIVE_MISC_SET_THIS_SCRIPT_CAN_REMOVE_BLIPS_CREATED_BY_ANY_SCRIPT( bool toggle )
	{
		MISC::SET_THIS_SCRIPT_CAN_REMOVE_BLIPS_CREATED_BY_ANY_SCRIPT(toggle);
	}

	bool LUA_NATIVE_MISC_HAS_CHEAT_WITH_HASH_BEEN_ACTIVATED( Hash hash, int amount )
	{
		auto retval = (bool)MISC::HAS_CHEAT_WITH_HASH_BEEN_ACTIVATED(hash, amount);
		return retval;
	}

	bool LUA_NATIVE_MISC_HAS_PC_CHEAT_WITH_HASH_BEEN_ACTIVATED( Hash hash )
	{
		auto retval = (bool)MISC::HAS_PC_CHEAT_WITH_HASH_BEEN_ACTIVATED(hash);
		return retval;
	}

	void LUA_NATIVE_MISC_OVERRIDE_FREEZE_FLAGS( bool p0 )
	{
		MISC::OVERRIDE_FREEZE_FLAGS(p0);
	}

	void LUA_NATIVE_MISC_SET_INSTANCE_PRIORITY_MODE( int p0 )
	{
		MISC::SET_INSTANCE_PRIORITY_MODE(p0);
	}

	void LUA_NATIVE_MISC_SET_INSTANCE_PRIORITY_HINT( int flag )
	{
		MISC::SET_INSTANCE_PRIORITY_HINT(flag);
	}

	bool LUA_NATIVE_MISC_IS_FRONTEND_FADING(  )
	{
		auto retval = (bool)MISC::IS_FRONTEND_FADING();
		return retval;
	}

	void LUA_NATIVE_MISC_POPULATE_NOW(  )
	{
		MISC::POPULATE_NOW();
	}

	int LUA_NATIVE_MISC_GET_INDEX_OF_CURRENT_LEVEL(  )
	{
		auto retval = MISC::GET_INDEX_OF_CURRENT_LEVEL();
		return retval;
	}

	void LUA_NATIVE_MISC_SET_GRAVITY_LEVEL( int level )
	{
		MISC::SET_GRAVITY_LEVEL(level);
	}

	Any LUA_NATIVE_MISC_START_SAVE_DATA( Any p0, Any p1, bool p2 )
	{
		MISC::START_SAVE_DATA(&p0, p1, p2);
		return p0;
	}

	void LUA_NATIVE_MISC_STOP_SAVE_DATA(  )
	{
		MISC::STOP_SAVE_DATA();
	}

	int LUA_NATIVE_MISC_GET_SIZE_OF_SAVE_DATA( bool p0 )
	{
		auto retval = MISC::GET_SIZE_OF_SAVE_DATA(p0);
		return retval;
	}

	Any LUA_NATIVE_MISC_REGISTER_INT_TO_SAVE( Any p0, const char* name )
	{
		MISC::REGISTER_INT_TO_SAVE(&p0, name);
		return p0;
	}

	Any LUA_NATIVE_MISC_REGISTER_INT64_TO_SAVE( Any p0, const char* name )
	{
		MISC::REGISTER_INT64_TO_SAVE(&p0, name);
		return p0;
	}

	Any LUA_NATIVE_MISC_REGISTER_ENUM_TO_SAVE( Any p0, const char* name )
	{
		MISC::REGISTER_ENUM_TO_SAVE(&p0, name);
		return p0;
	}

	Any LUA_NATIVE_MISC_REGISTER_FLOAT_TO_SAVE( Any p0, const char* name )
	{
		MISC::REGISTER_FLOAT_TO_SAVE(&p0, name);
		return p0;
	}

	Any LUA_NATIVE_MISC_REGISTER_BOOL_TO_SAVE( Any p0, const char* name )
	{
		MISC::REGISTER_BOOL_TO_SAVE(&p0, name);
		return p0;
	}

	Any LUA_NATIVE_MISC_REGISTER_TEXT_LABEL_TO_SAVE( Any p0, const char* name )
	{
		MISC::REGISTER_TEXT_LABEL_TO_SAVE(&p0, name);
		return p0;
	}

	Any LUA_NATIVE_MISC_REGISTER_TEXT_LABEL_15_TO_SAVE( Any p0, const char* name )
	{
		MISC::REGISTER_TEXT_LABEL_15_TO_SAVE(&p0, name);
		return p0;
	}

	Any LUA_NATIVE_MISC_REGISTER_TEXT_LABEL_23_TO_SAVE( Any p0, const char* name )
	{
		MISC::REGISTER_TEXT_LABEL_23_TO_SAVE(&p0, name);
		return p0;
	}

	Any LUA_NATIVE_MISC_REGISTER_TEXT_LABEL_31_TO_SAVE( Any p0, const char* name )
	{
		MISC::REGISTER_TEXT_LABEL_31_TO_SAVE(&p0, name);
		return p0;
	}

	Any LUA_NATIVE_MISC_REGISTER_TEXT_LABEL_63_TO_SAVE( Any p0, const char* name )
	{
		MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(&p0, name);
		return p0;
	}

	Any LUA_NATIVE_MISC_START_SAVE_STRUCT_WITH_SIZE( Any p0, int size, const char* structName )
	{
		MISC::START_SAVE_STRUCT_WITH_SIZE(&p0, size, structName);
		return p0;
	}

	void LUA_NATIVE_MISC_STOP_SAVE_STRUCT(  )
	{
		MISC::STOP_SAVE_STRUCT();
	}

	Any LUA_NATIVE_MISC_START_SAVE_ARRAY_WITH_SIZE( Any p0, int size, const char* arrayName )
	{
		MISC::START_SAVE_ARRAY_WITH_SIZE(&p0, size, arrayName);
		return p0;
	}

	void LUA_NATIVE_MISC_STOP_SAVE_ARRAY(  )
	{
		MISC::STOP_SAVE_ARRAY();
	}

	std::tuple<Any, Any> LUA_NATIVE_MISC_COPY_SCRIPT_STRUCT( Any dst, Any src, int size )
	{
		std::tuple<Any, Any> return_values;
		MISC::COPY_SCRIPT_STRUCT(&dst, &src, size);
		std::get<0>(return_values) = dst;
		std::get<1>(return_values) = src;

		return return_values;
	}

	void LUA_NATIVE_MISC_ENABLE_DISPATCH_SERVICE( int dispatchService, bool toggle )
	{
		MISC::ENABLE_DISPATCH_SERVICE(dispatchService, toggle);
	}

	void LUA_NATIVE_MISC_BLOCK_DISPATCH_SERVICE_RESOURCE_CREATION( int dispatchService, bool toggle )
	{
		MISC::BLOCK_DISPATCH_SERVICE_RESOURCE_CREATION(dispatchService, toggle);
	}

	int LUA_NATIVE_MISC_GET_NUMBER_RESOURCES_ALLOCATED_TO_WANTED_LEVEL( int dispatchService )
	{
		auto retval = MISC::GET_NUMBER_RESOURCES_ALLOCATED_TO_WANTED_LEVEL(dispatchService);
		return retval;
	}

	std::tuple<bool, int> LUA_NATIVE_MISC_CREATE_INCIDENT( int dispatchService, float x, float y, float z, int numUnits, float radius, int outIncidentID, Any p7, Any p8 )
	{
		std::tuple<bool, int> return_values;
		std::get<0>(return_values) = (bool)MISC::CREATE_INCIDENT(dispatchService, x, y, z, numUnits, radius, &outIncidentID, p7, p8);
		std::get<1>(return_values) = outIncidentID;

		return return_values;
	}

	std::tuple<bool, int> LUA_NATIVE_MISC_CREATE_INCIDENT_WITH_ENTITY( int dispatchService, Ped ped, int numUnits, float radius, int outIncidentID, Any p5, Any p6 )
	{
		std::tuple<bool, int> return_values;
		std::get<0>(return_values) = (bool)MISC::CREATE_INCIDENT_WITH_ENTITY(dispatchService, ped, numUnits, radius, &outIncidentID, p5, p6);
		std::get<1>(return_values) = outIncidentID;

		return return_values;
	}

	void LUA_NATIVE_MISC_DELETE_INCIDENT( int incidentId )
	{
		MISC::DELETE_INCIDENT(incidentId);
	}

	bool LUA_NATIVE_MISC_IS_INCIDENT_VALID( int incidentId )
	{
		auto retval = (bool)MISC::IS_INCIDENT_VALID(incidentId);
		return retval;
	}

	void LUA_NATIVE_MISC_SET_INCIDENT_REQUESTED_UNITS( int incidentId, int dispatchService, int numUnits )
	{
		MISC::SET_INCIDENT_REQUESTED_UNITS(incidentId, dispatchService, numUnits);
	}

	void LUA_NATIVE_MISC_SET_IDEAL_SPAWN_DISTANCE_FOR_INCIDENT( int incidentId, float p1 )
	{
		MISC::SET_IDEAL_SPAWN_DISTANCE_FOR_INCIDENT(incidentId, p1);
	}

	std::tuple<bool, Vector3> LUA_NATIVE_MISC_FIND_SPAWN_POINT_IN_DIRECTION( float posX, float posY, float posZ, float fwdVecX, float fwdVecY, float fwdVecZ, float distance, Vector3 spawnPoint )
	{
		std::tuple<bool, Vector3> return_values;
		std::get<0>(return_values) = (bool)MISC::FIND_SPAWN_POINT_IN_DIRECTION(posX, posY, posZ, fwdVecX, fwdVecY, fwdVecZ, distance, &spawnPoint);
		std::get<1>(return_values) = spawnPoint;

		return return_values;
	}

	int LUA_NATIVE_MISC_ADD_POP_MULTIPLIER_AREA( float x1, float y1, float z1, float x2, float y2, float z2, float p6, float p7, bool p8, bool p9 )
	{
		auto retval = MISC::ADD_POP_MULTIPLIER_AREA(x1, y1, z1, x2, y2, z2, p6, p7, p8, p9);
		return retval;
	}

	bool LUA_NATIVE_MISC_DOES_POP_MULTIPLIER_AREA_EXIST( int id )
	{
		auto retval = (bool)MISC::DOES_POP_MULTIPLIER_AREA_EXIST(id);
		return retval;
	}

	void LUA_NATIVE_MISC_REMOVE_POP_MULTIPLIER_AREA( int id, bool p1 )
	{
		MISC::REMOVE_POP_MULTIPLIER_AREA(id, p1);
	}

	bool LUA_NATIVE_MISC_IS_POP_MULTIPLIER_AREA_NETWORKED( int id )
	{
		auto retval = (bool)MISC::IS_POP_MULTIPLIER_AREA_NETWORKED(id);
		return retval;
	}

	int LUA_NATIVE_MISC_ADD_POP_MULTIPLIER_SPHERE( float x, float y, float z, float radius, float pedMultiplier, float vehicleMultiplier, bool p6, bool p7 )
	{
		auto retval = MISC::ADD_POP_MULTIPLIER_SPHERE(x, y, z, radius, pedMultiplier, vehicleMultiplier, p6, p7);
		return retval;
	}

	bool LUA_NATIVE_MISC_DOES_POP_MULTIPLIER_SPHERE_EXIST( int id )
	{
		auto retval = (bool)MISC::DOES_POP_MULTIPLIER_SPHERE_EXIST(id);
		return retval;
	}

	void LUA_NATIVE_MISC_REMOVE_POP_MULTIPLIER_SPHERE( int id, bool p1 )
	{
		MISC::REMOVE_POP_MULTIPLIER_SPHERE(id, p1);
	}

	void LUA_NATIVE_MISC_ENABLE_TENNIS_MODE( Ped ped, bool toggle, bool p2 )
	{
		MISC::ENABLE_TENNIS_MODE(ped, toggle, p2);
	}

	bool LUA_NATIVE_MISC_IS_TENNIS_MODE( Ped ped )
	{
		auto retval = (bool)MISC::IS_TENNIS_MODE(ped);
		return retval;
	}

	void LUA_NATIVE_MISC_PLAY_TENNIS_SWING_ANIM( Ped ped, const char* animDict, const char* animName, float p3, float p4, bool p5 )
	{
		MISC::PLAY_TENNIS_SWING_ANIM(ped, animDict, animName, p3, p4, p5);
	}

	bool LUA_NATIVE_MISC_GET_TENNIS_SWING_ANIM_COMPLETE( Ped ped )
	{
		auto retval = (bool)MISC::GET_TENNIS_SWING_ANIM_COMPLETE(ped);
		return retval;
	}

	bool LUA_NATIVE_MISC_GET_TENNIS_SWING_ANIM_CAN_BE_INTERRUPTED( Ped ped )
	{
		auto retval = (bool)MISC::GET_TENNIS_SWING_ANIM_CAN_BE_INTERRUPTED(ped);
		return retval;
	}

	bool LUA_NATIVE_MISC_GET_TENNIS_SWING_ANIM_SWUNG( Ped ped )
	{
		auto retval = (bool)MISC::GET_TENNIS_SWING_ANIM_SWUNG(ped);
		return retval;
	}

	void LUA_NATIVE_MISC_PLAY_TENNIS_DIVE_ANIM( Ped ped, int p1, float p2, float p3, float p4, bool p5 )
	{
		MISC::PLAY_TENNIS_DIVE_ANIM(ped, p1, p2, p3, p4, p5);
	}

	void LUA_NATIVE_MISC_SET_TENNIS_MOVE_NETWORK_SIGNAL_FLOAT( Ped ped, const char* p1, float p2 )
	{
		MISC::SET_TENNIS_MOVE_NETWORK_SIGNAL_FLOAT(ped, p1, p2);
	}

	void LUA_NATIVE_MISC_RESET_DISPATCH_SPAWN_LOCATION(  )
	{
		MISC::RESET_DISPATCH_SPAWN_LOCATION();
	}

	void LUA_NATIVE_MISC_SET_DISPATCH_SPAWN_LOCATION( float x, float y, float z )
	{
		MISC::SET_DISPATCH_SPAWN_LOCATION(x, y, z);
	}

	void LUA_NATIVE_MISC_RESET_DISPATCH_IDEAL_SPAWN_DISTANCE(  )
	{
		MISC::RESET_DISPATCH_IDEAL_SPAWN_DISTANCE();
	}

	void LUA_NATIVE_MISC_SET_DISPATCH_IDEAL_SPAWN_DISTANCE( float distance )
	{
		MISC::SET_DISPATCH_IDEAL_SPAWN_DISTANCE(distance);
	}

	void LUA_NATIVE_MISC_RESET_DISPATCH_TIME_BETWEEN_SPAWN_ATTEMPTS( Any p0 )
	{
		MISC::RESET_DISPATCH_TIME_BETWEEN_SPAWN_ATTEMPTS(p0);
	}

	void LUA_NATIVE_MISC_SET_DISPATCH_TIME_BETWEEN_SPAWN_ATTEMPTS( Any p0, float p1 )
	{
		MISC::SET_DISPATCH_TIME_BETWEEN_SPAWN_ATTEMPTS(p0, p1);
	}

	void LUA_NATIVE_MISC_SET_DISPATCH_TIME_BETWEEN_SPAWN_ATTEMPTS_MULTIPLIER( Any p0, float p1 )
	{
		MISC::SET_DISPATCH_TIME_BETWEEN_SPAWN_ATTEMPTS_MULTIPLIER(p0, p1);
	}

	int LUA_NATIVE_MISC_ADD_DISPATCH_SPAWN_ANGLED_BLOCKING_AREA( float x1, float y1, float z1, float x2, float y2, float z2, float width )
	{
		auto retval = MISC::ADD_DISPATCH_SPAWN_ANGLED_BLOCKING_AREA(x1, y1, z1, x2, y2, z2, width);
		return retval;
	}

	int LUA_NATIVE_MISC_ADD_DISPATCH_SPAWN_SPHERE_BLOCKING_AREA( float x1, float y1, float x2, float y2 )
	{
		auto retval = MISC::ADD_DISPATCH_SPAWN_SPHERE_BLOCKING_AREA(x1, y1, x2, y2);
		return retval;
	}

	void LUA_NATIVE_MISC_REMOVE_DISPATCH_SPAWN_BLOCKING_AREA( int p0 )
	{
		MISC::REMOVE_DISPATCH_SPAWN_BLOCKING_AREA(p0);
	}

	void LUA_NATIVE_MISC_RESET_DISPATCH_SPAWN_BLOCKING_AREAS(  )
	{
		MISC::RESET_DISPATCH_SPAWN_BLOCKING_AREAS();
	}

	void LUA_NATIVE_MISC_RESET_WANTED_RESPONSE_NUM_PEDS_TO_SPAWN(  )
	{
		MISC::RESET_WANTED_RESPONSE_NUM_PEDS_TO_SPAWN();
	}

	void LUA_NATIVE_MISC_SET_WANTED_RESPONSE_NUM_PEDS_TO_SPAWN( int p0, int p1 )
	{
		MISC::SET_WANTED_RESPONSE_NUM_PEDS_TO_SPAWN(p0, p1);
	}

	void LUA_NATIVE_MISC_ADD_TACTICAL_NAV_MESH_POINT( float x, float y, float z )
	{
		MISC::ADD_TACTICAL_NAV_MESH_POINT(x, y, z);
	}

	void LUA_NATIVE_MISC_CLEAR_TACTICAL_NAV_MESH_POINTS(  )
	{
		MISC::CLEAR_TACTICAL_NAV_MESH_POINTS();
	}

	void LUA_NATIVE_MISC_SET_RIOT_MODE_ENABLED( bool toggle )
	{
		MISC::SET_RIOT_MODE_ENABLED(toggle);
	}

	Any LUA_NATIVE_MISC_DISPLAY_ONSCREEN_KEYBOARD_WITH_LONGER_INITIAL_STRING( int p0, const char* windowTitle, Any p2, const char* defaultText, const char* defaultConcat1, const char* defaultConcat2, const char* defaultConcat3, const char* defaultConcat4, const char* defaultConcat5, const char* defaultConcat6, const char* defaultConcat7, int maxInputLength )
	{
		MISC::DISPLAY_ONSCREEN_KEYBOARD_WITH_LONGER_INITIAL_STRING(p0, windowTitle, &p2, defaultText, defaultConcat1, defaultConcat2, defaultConcat3, defaultConcat4, defaultConcat5, defaultConcat6, defaultConcat7, maxInputLength);
		return p2;
	}

	void LUA_NATIVE_MISC_DISPLAY_ONSCREEN_KEYBOARD( int p0, const char* windowTitle, const char* p2, const char* defaultText, const char* defaultConcat1, const char* defaultConcat2, const char* defaultConcat3, int maxInputLength )
	{
		MISC::DISPLAY_ONSCREEN_KEYBOARD(p0, windowTitle, p2, defaultText, defaultConcat1, defaultConcat2, defaultConcat3, maxInputLength);
	}

	int LUA_NATIVE_MISC_UPDATE_ONSCREEN_KEYBOARD(  )
	{
		auto retval = MISC::UPDATE_ONSCREEN_KEYBOARD();
		return retval;
	}

	const char* LUA_NATIVE_MISC_GET_ONSCREEN_KEYBOARD_RESULT(  )
	{
		auto retval = MISC::GET_ONSCREEN_KEYBOARD_RESULT();
		return retval;
	}

	void LUA_NATIVE_MISC_CANCEL_ONSCREEN_KEYBOARD(  )
	{
		MISC::CANCEL_ONSCREEN_KEYBOARD();
	}

	void LUA_NATIVE_MISC_NEXT_ONSCREEN_KEYBOARD_RESULT_WILL_DISPLAY_USING_THESE_FONTS( int p0 )
	{
		MISC::NEXT_ONSCREEN_KEYBOARD_RESULT_WILL_DISPLAY_USING_THESE_FONTS(p0);
	}

	void LUA_NATIVE_MISC_ACTION_MANAGER_ENABLE_ACTION( Hash hash, bool enable )
	{
		MISC::ACTION_MANAGER_ENABLE_ACTION(hash, enable);
	}

	int LUA_NATIVE_MISC_GET_REAL_WORLD_TIME(  )
	{
		auto retval = MISC::GET_REAL_WORLD_TIME();
		return retval;
	}

	void LUA_NATIVE_MISC_SUPRESS_RANDOM_EVENT_THIS_FRAME( int eventType, bool suppress )
	{
		MISC::SUPRESS_RANDOM_EVENT_THIS_FRAME(eventType, suppress);
	}

	void LUA_NATIVE_MISC_SET_EXPLOSIVE_AMMO_THIS_FRAME( Player player )
	{
		MISC::SET_EXPLOSIVE_AMMO_THIS_FRAME(player);
	}

	void LUA_NATIVE_MISC_SET_FIRE_AMMO_THIS_FRAME( Player player )
	{
		MISC::SET_FIRE_AMMO_THIS_FRAME(player);
	}

	void LUA_NATIVE_MISC_SET_EXPLOSIVE_MELEE_THIS_FRAME( Player player )
	{
		MISC::SET_EXPLOSIVE_MELEE_THIS_FRAME(player);
	}

	void LUA_NATIVE_MISC_SET_SUPER_JUMP_THIS_FRAME( Player player )
	{
		MISC::SET_SUPER_JUMP_THIS_FRAME(player);
	}

	void LUA_NATIVE_MISC_SET_BEAST_JUMP_THIS_FRAME( Player player )
	{
		MISC::SET_BEAST_JUMP_THIS_FRAME(player);
	}

	void LUA_NATIVE_MISC_SET_FORCED_JUMP_THIS_FRAME( Player player )
	{
		MISC::SET_FORCED_JUMP_THIS_FRAME(player);
	}

	bool LUA_NATIVE_MISC_HAS_GAME_INSTALLED_THIS_SESSION(  )
	{
		auto retval = (bool)MISC::HAS_GAME_INSTALLED_THIS_SESSION();
		return retval;
	}

	void LUA_NATIVE_MISC_SET_TICKER_JOHNMARSTON_IS_DONE(  )
	{
		MISC::SET_TICKER_JOHNMARSTON_IS_DONE();
	}

	bool LUA_NATIVE_MISC_ARE_PROFILE_SETTINGS_VALID(  )
	{
		auto retval = (bool)MISC::ARE_PROFILE_SETTINGS_VALID();
		return retval;
	}

	void LUA_NATIVE_MISC_PREVENT_ARREST_STATE_THIS_FRAME(  )
	{
		MISC::PREVENT_ARREST_STATE_THIS_FRAME();
	}

	void LUA_NATIVE_MISC_FORCE_GAME_STATE_PLAYING(  )
	{
		MISC::FORCE_GAME_STATE_PLAYING();
	}

	void LUA_NATIVE_MISC_SCRIPT_RACE_INIT( int p0, int p1, Any p2, Any p3 )
	{
		MISC::SCRIPT_RACE_INIT(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MISC_SCRIPT_RACE_SHUTDOWN(  )
	{
		MISC::SCRIPT_RACE_SHUTDOWN();
	}

	void LUA_NATIVE_MISC_SCRIPT_RACE_PLAYER_HIT_CHECKPOINT( Player player, Any p1, Any p2, Any p3 )
	{
		MISC::SCRIPT_RACE_PLAYER_HIT_CHECKPOINT(player, p1, p2, p3);
	}

	std::tuple<bool, int, int> LUA_NATIVE_MISC_SCRIPT_RACE_GET_PLAYER_SPLIT_TIME( Player player, int p1, int p2 )
	{
		std::tuple<bool, int, int> return_values;
		std::get<0>(return_values) = (bool)MISC::SCRIPT_RACE_GET_PLAYER_SPLIT_TIME(player, &p1, &p2);
		std::get<1>(return_values) = p1;
		std::get<2>(return_values) = p2;

		return return_values;
	}

	void LUA_NATIVE_MISC_START_END_USER_BENCHMARK(  )
	{
		MISC::START_END_USER_BENCHMARK();
	}

	void LUA_NATIVE_MISC_STOP_END_USER_BENCHMARK(  )
	{
		MISC::STOP_END_USER_BENCHMARK();
	}

	void LUA_NATIVE_MISC_RESET_END_USER_BENCHMARK(  )
	{
		MISC::RESET_END_USER_BENCHMARK();
	}

	void LUA_NATIVE_MISC_SAVE_END_USER_BENCHMARK(  )
	{
		MISC::SAVE_END_USER_BENCHMARK();
	}

	bool LUA_NATIVE_MISC_UI_STARTED_END_USER_BENCHMARK(  )
	{
		auto retval = (bool)MISC::UI_STARTED_END_USER_BENCHMARK();
		return retval;
	}

	bool LUA_NATIVE_MISC_LANDING_SCREEN_STARTED_END_USER_BENCHMARK(  )
	{
		auto retval = (bool)MISC::LANDING_SCREEN_STARTED_END_USER_BENCHMARK();
		return retval;
	}

	bool LUA_NATIVE_MISC_IS_COMMANDLINE_END_USER_BENCHMARK(  )
	{
		auto retval = (bool)MISC::IS_COMMANDLINE_END_USER_BENCHMARK();
		return retval;
	}

	int LUA_NATIVE_MISC_GET_BENCHMARK_ITERATIONS(  )
	{
		auto retval = MISC::GET_BENCHMARK_ITERATIONS();
		return retval;
	}

	int LUA_NATIVE_MISC_GET_BENCHMARK_PASS(  )
	{
		auto retval = MISC::GET_BENCHMARK_PASS();
		return retval;
	}

	void LUA_NATIVE_MISC_RESTART_GAME(  )
	{
		MISC::RESTART_GAME();
	}

	void LUA_NATIVE_MISC_QUIT_GAME(  )
	{
		MISC::QUIT_GAME();
	}

	bool LUA_NATIVE_MISC_HAS_ASYNC_INSTALL_FINISHED(  )
	{
		auto retval = (bool)MISC::HAS_ASYNC_INSTALL_FINISHED();
		return retval;
	}

	void LUA_NATIVE_MISC_CLEANUP_ASYNC_INSTALL(  )
	{
		MISC::CLEANUP_ASYNC_INSTALL();
	}

	bool LUA_NATIVE_MISC_PLM_IS_IN_CONSTRAINED_MODE(  )
	{
		auto retval = (bool)MISC::PLM_IS_IN_CONSTRAINED_MODE();
		return retval;
	}

	int LUA_NATIVE_MISC_PLM_GET_CONSTRAINED_DURATION_MS(  )
	{
		auto retval = MISC::PLM_GET_CONSTRAINED_DURATION_MS();
		return retval;
	}

	void LUA_NATIVE_MISC_SET_PLAYER_IS_IN_ANIMAL_FORM( bool toggle )
	{
		MISC::SET_PLAYER_IS_IN_ANIMAL_FORM(toggle);
	}

	bool LUA_NATIVE_MISC_GET_IS_PLAYER_IN_ANIMAL_FORM(  )
	{
		auto retval = (bool)MISC::GET_IS_PLAYER_IN_ANIMAL_FORM();
		return retval;
	}

	void LUA_NATIVE_MISC_SET_PLAYER_IS_REPEATING_A_MISSION( bool toggle )
	{
		MISC::SET_PLAYER_IS_REPEATING_A_MISSION(toggle);
	}

	void LUA_NATIVE_MISC_DISABLE_SCREEN_DIMMING_THIS_FRAME(  )
	{
		MISC::DISABLE_SCREEN_DIMMING_THIS_FRAME();
	}

	float LUA_NATIVE_MISC_GET_CITY_DENSITY(  )
	{
		auto retval = MISC::GET_CITY_DENSITY();
		return retval;
	}

	void LUA_NATIVE_MISC_USE_ACTIVE_CAMERA_FOR_TIMESLICING_CENTRE(  )
	{
		MISC::USE_ACTIVE_CAMERA_FOR_TIMESLICING_CENTRE();
	}

	void LUA_NATIVE_MISC_SET_CONTENT_ID_INDEX( Hash contentId, int index )
	{
		MISC::SET_CONTENT_ID_INDEX(contentId, index);
	}

	int LUA_NATIVE_MISC_GET_CONTENT_ID_INDEX( Hash contentId )
	{
		auto retval = MISC::GET_CONTENT_ID_INDEX(contentId);
		return retval;
	}

	void LUA_NATIVE_MOBILE_CREATE_MOBILE_PHONE( int phoneType )
	{
		MOBILE::CREATE_MOBILE_PHONE(phoneType);
	}

	void LUA_NATIVE_MOBILE_DESTROY_MOBILE_PHONE(  )
	{
		MOBILE::DESTROY_MOBILE_PHONE();
	}

	void LUA_NATIVE_MOBILE_SET_MOBILE_PHONE_SCALE( float scale )
	{
		MOBILE::SET_MOBILE_PHONE_SCALE(scale);
	}

	void LUA_NATIVE_MOBILE_SET_MOBILE_PHONE_ROTATION( float rotX, float rotY, float rotZ, Any p3 )
	{
		MOBILE::SET_MOBILE_PHONE_ROTATION(rotX, rotY, rotZ, p3);
	}

	Vector3 LUA_NATIVE_MOBILE_GET_MOBILE_PHONE_ROTATION( Vector3 rotation, Vehicle p1 )
	{
		MOBILE::GET_MOBILE_PHONE_ROTATION(&rotation, p1);
		return rotation;
	}

	void LUA_NATIVE_MOBILE_SET_MOBILE_PHONE_POSITION( float posX, float posY, float posZ )
	{
		MOBILE::SET_MOBILE_PHONE_POSITION(posX, posY, posZ);
	}

	Vector3 LUA_NATIVE_MOBILE_GET_MOBILE_PHONE_POSITION( Vector3 position )
	{
		MOBILE::GET_MOBILE_PHONE_POSITION(&position);
		return position;
	}

	void LUA_NATIVE_MOBILE_SCRIPT_IS_MOVING_MOBILE_PHONE_OFFSCREEN( bool toggle )
	{
		MOBILE::SCRIPT_IS_MOVING_MOBILE_PHONE_OFFSCREEN(toggle);
	}

	bool LUA_NATIVE_MOBILE_CAN_PHONE_BE_SEEN_ON_SCREEN(  )
	{
		auto retval = (bool)MOBILE::CAN_PHONE_BE_SEEN_ON_SCREEN();
		return retval;
	}

	void LUA_NATIVE_MOBILE_SET_MOBILE_PHONE_DOF_STATE( bool toggle )
	{
		MOBILE::SET_MOBILE_PHONE_DOF_STATE(toggle);
	}

	void LUA_NATIVE_MOBILE_CELL_SET_INPUT( int direction )
	{
		MOBILE::CELL_SET_INPUT(direction);
	}

	void LUA_NATIVE_MOBILE_CELL_HORIZONTAL_MODE_TOGGLE( bool toggle )
	{
		MOBILE::CELL_HORIZONTAL_MODE_TOGGLE(toggle);
	}

	void LUA_NATIVE_MOBILE_CELL_CAM_ACTIVATE( bool p0, bool p1 )
	{
		MOBILE::CELL_CAM_ACTIVATE(p0, p1);
	}

	void LUA_NATIVE_MOBILE_CELL_CAM_ACTIVATE_SELFIE_MODE( bool toggle )
	{
		MOBILE::CELL_CAM_ACTIVATE_SELFIE_MODE(toggle);
	}

	void LUA_NATIVE_MOBILE_CELL_CAM_ACTIVATE_SHALLOW_DOF_MODE( bool toggle )
	{
		MOBILE::CELL_CAM_ACTIVATE_SHALLOW_DOF_MODE(toggle);
	}

	void LUA_NATIVE_MOBILE_CELL_CAM_SET_SELFIE_MODE_SIDE_OFFSET_SCALING( float p0 )
	{
		MOBILE::CELL_CAM_SET_SELFIE_MODE_SIDE_OFFSET_SCALING(p0);
	}

	void LUA_NATIVE_MOBILE_CELL_CAM_SET_SELFIE_MODE_HORZ_PAN_OFFSET( float horizontalPan )
	{
		MOBILE::CELL_CAM_SET_SELFIE_MODE_HORZ_PAN_OFFSET(horizontalPan);
	}

	void LUA_NATIVE_MOBILE_CELL_CAM_SET_SELFIE_MODE_VERT_PAN_OFFSET( float vertPan )
	{
		MOBILE::CELL_CAM_SET_SELFIE_MODE_VERT_PAN_OFFSET(vertPan);
	}

	void LUA_NATIVE_MOBILE_CELL_CAM_SET_SELFIE_MODE_ROLL_OFFSET( float roll )
	{
		MOBILE::CELL_CAM_SET_SELFIE_MODE_ROLL_OFFSET(roll);
	}

	void LUA_NATIVE_MOBILE_CELL_CAM_SET_SELFIE_MODE_DISTANCE_SCALING( float distanceScaling )
	{
		MOBILE::CELL_CAM_SET_SELFIE_MODE_DISTANCE_SCALING(distanceScaling);
	}

	void LUA_NATIVE_MOBILE_CELL_CAM_SET_SELFIE_MODE_HEAD_YAW_OFFSET( float yaw )
	{
		MOBILE::CELL_CAM_SET_SELFIE_MODE_HEAD_YAW_OFFSET(yaw);
	}

	void LUA_NATIVE_MOBILE_CELL_CAM_SET_SELFIE_MODE_HEAD_ROLL_OFFSET( float roll )
	{
		MOBILE::CELL_CAM_SET_SELFIE_MODE_HEAD_ROLL_OFFSET(roll);
	}

	void LUA_NATIVE_MOBILE_CELL_CAM_SET_SELFIE_MODE_HEAD_PITCH_OFFSET( float pitch )
	{
		MOBILE::CELL_CAM_SET_SELFIE_MODE_HEAD_PITCH_OFFSET(pitch);
	}

	bool LUA_NATIVE_MOBILE_CELL_CAM_IS_CHAR_VISIBLE_NO_FACE_CHECK( Entity entity )
	{
		auto retval = (bool)MOBILE::CELL_CAM_IS_CHAR_VISIBLE_NO_FACE_CHECK(entity);
		return retval;
	}

	int LUA_NATIVE_MOBILE_GET_MOBILE_PHONE_RENDER_ID( int renderId )
	{
		MOBILE::GET_MOBILE_PHONE_RENDER_ID(&renderId);
		return renderId;
	}

	void LUA_NATIVE_MONEY_NETWORK_INITIALIZE_CASH( int wallet, int bank )
	{
		MONEY::NETWORK_INITIALIZE_CASH(wallet, bank);
	}

	void LUA_NATIVE_MONEY_NETWORK_DELETE_CHARACTER( int characterSlot, bool p1, bool p2 )
	{
		MONEY::NETWORK_DELETE_CHARACTER(characterSlot, p1, p2);
	}

	void LUA_NATIVE_MONEY_NETWORK_MANUAL_DELETE_CHARACTER( int characterSlot )
	{
		MONEY::NETWORK_MANUAL_DELETE_CHARACTER(characterSlot);
	}

	bool LUA_NATIVE_MONEY_NETWORK_GET_PLAYER_IS_HIGH_EARNER(  )
	{
		auto retval = (bool)MONEY::NETWORK_GET_PLAYER_IS_HIGH_EARNER();
		return retval;
	}

	void LUA_NATIVE_MONEY_NETWORK_CLEAR_CHARACTER_WALLET( int characterSlot )
	{
		MONEY::NETWORK_CLEAR_CHARACTER_WALLET(characterSlot);
	}

	Any LUA_NATIVE_MONEY_NETWORK_GIVE_PLAYER_JOBSHARE_CASH( int amount, Any gamerHandle )
	{
		MONEY::NETWORK_GIVE_PLAYER_JOBSHARE_CASH(amount, &gamerHandle);
		return gamerHandle;
	}

	Any LUA_NATIVE_MONEY_NETWORK_RECEIVE_PLAYER_JOBSHARE_CASH( int value, Any gamerHandle )
	{
		MONEY::NETWORK_RECEIVE_PLAYER_JOBSHARE_CASH(value, &gamerHandle);
		return gamerHandle;
	}

	bool LUA_NATIVE_MONEY_NETWORK_CAN_SHARE_JOB_CASH(  )
	{
		auto retval = (bool)MONEY::NETWORK_CAN_SHARE_JOB_CASH();
		return retval;
	}

	void LUA_NATIVE_MONEY_NETWORK_REFUND_CASH( int index, const char* context, const char* reason, bool p3 )
	{
		MONEY::NETWORK_REFUND_CASH(index, context, reason, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_DEDUCT_CASH( int amount, const char* p1, const char* p2, bool p3, bool p4, bool p5 )
	{
		MONEY::NETWORK_DEDUCT_CASH(amount, p1, p2, p3, p4, p5);
	}

	bool LUA_NATIVE_MONEY_NETWORK_MONEY_CAN_BET( int amount, bool p1, bool p2 )
	{
		auto retval = (bool)MONEY::NETWORK_MONEY_CAN_BET(amount, p1, p2);
		return retval;
	}

	bool LUA_NATIVE_MONEY_NETWORK_CAN_BET( int amount )
	{
		auto retval = (bool)MONEY::NETWORK_CAN_BET(amount);
		return retval;
	}

	bool LUA_NATIVE_MONEY_NETWORK_CASINO_CAN_BET( Hash hash )
	{
		auto retval = (bool)MONEY::NETWORK_CASINO_CAN_BET(hash);
		return retval;
	}

	bool LUA_NATIVE_MONEY_NETWORK_CASINO_CAN_BET_PVC(  )
	{
		auto retval = (bool)MONEY::NETWORK_CASINO_CAN_BET_PVC();
		return retval;
	}

	bool LUA_NATIVE_MONEY_NETWORK_CASINO_CAN_BET_AMOUNT( Any p0 )
	{
		auto retval = (bool)MONEY::NETWORK_CASINO_CAN_BET_AMOUNT(p0);
		return retval;
	}

	bool LUA_NATIVE_MONEY_NETWORK_CASINO_CAN_BUY_CHIPS_PVC(  )
	{
		auto retval = (bool)MONEY::NETWORK_CASINO_CAN_BUY_CHIPS_PVC();
		return retval;
	}

	bool LUA_NATIVE_MONEY_NETWORK_CASINO_BUY_CHIPS( int p0, int p1 )
	{
		auto retval = (bool)MONEY::NETWORK_CASINO_BUY_CHIPS(p0, p1);
		return retval;
	}

	bool LUA_NATIVE_MONEY_NETWORK_CASINO_SELL_CHIPS( int p0, int p1 )
	{
		auto retval = (bool)MONEY::NETWORK_CASINO_SELL_CHIPS(p0, p1);
		return retval;
	}

	void LUA_NATIVE_MONEY_NETWORK_DEFER_CASH_TRANSACTIONS_UNTIL_SHOP_SAVE(  )
	{
		MONEY::NETWORK_DEFER_CASH_TRANSACTIONS_UNTIL_SHOP_SAVE();
	}

	std::tuple<bool, int> LUA_NATIVE_MONEY_CAN_PAY_AMOUNT_TO_BOSS( int p0, int p1, int amount, int p3 )
	{
		std::tuple<bool, int> return_values;
		std::get<0>(return_values) = (bool)MONEY::CAN_PAY_AMOUNT_TO_BOSS(p0, p1, amount, &p3);
		std::get<1>(return_values) = p3;

		return return_values;
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_FROM_PICKUP( int amount )
	{
		MONEY::NETWORK_EARN_FROM_PICKUP(amount);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_FROM_CASHING_OUT( int amount )
	{
		MONEY::NETWORK_EARN_FROM_CASHING_OUT(amount);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_FROM_GANGATTACK_PICKUP( int amount )
	{
		MONEY::NETWORK_EARN_FROM_GANGATTACK_PICKUP(amount);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_ASSASSINATE_TARGET_KILLED( int amount )
	{
		MONEY::NETWORK_EARN_ASSASSINATE_TARGET_KILLED(amount);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_FROM_ROB_ARMORED_CARS( int amount )
	{
		MONEY::NETWORK_EARN_FROM_ROB_ARMORED_CARS(amount);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_FROM_CRATE_DROP( int amount )
	{
		MONEY::NETWORK_EARN_FROM_CRATE_DROP(amount);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_FROM_BETTING( int amount, const char* p1 )
	{
		MONEY::NETWORK_EARN_FROM_BETTING(amount, p1);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_FROM_JOB( int amount, const char* p1 )
	{
		MONEY::NETWORK_EARN_FROM_JOB(amount, p1);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_FROM_JOBX2( int amount, const char* p1 )
	{
		MONEY::NETWORK_EARN_FROM_JOBX2(amount, p1);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_FROM_PREMIUM_JOB( int amount, const char* p1 )
	{
		MONEY::NETWORK_EARN_FROM_PREMIUM_JOB(amount, p1);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_FROM_BEND_JOB( int amount, const char* heistHash )
	{
		MONEY::NETWORK_EARN_FROM_BEND_JOB(amount, heistHash);
	}

	Any LUA_NATIVE_MONEY_NETWORK_EARN_FROM_CHALLENGE_WIN( Any p0, Any p1, bool p2 )
	{
		MONEY::NETWORK_EARN_FROM_CHALLENGE_WIN(p0, &p1, p2);
		return p1;
	}

	std::tuple<Any, Any> LUA_NATIVE_MONEY_NETWORK_EARN_FROM_BOUNTY( int amount, Any gamerHandle, Any p2, Any p3 )
	{
		std::tuple<Any, Any> return_values;
		MONEY::NETWORK_EARN_FROM_BOUNTY(amount, &gamerHandle, &p2, p3);
		std::get<0>(return_values) = gamerHandle;
		std::get<1>(return_values) = p2;

		return return_values;
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_FROM_IMPORT_EXPORT( int amount, Hash modelHash )
	{
		MONEY::NETWORK_EARN_FROM_IMPORT_EXPORT(amount, modelHash);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_FROM_HOLDUPS( int amount )
	{
		MONEY::NETWORK_EARN_FROM_HOLDUPS(amount);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_FROM_PROPERTY( int amount, Hash propertyName )
	{
		MONEY::NETWORK_EARN_FROM_PROPERTY(amount, propertyName);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_FROM_AI_TARGET_KILL( Any p0, Any p1 )
	{
		MONEY::NETWORK_EARN_FROM_AI_TARGET_KILL(p0, p1);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_FROM_NOT_BADSPORT( int amount )
	{
		MONEY::NETWORK_EARN_FROM_NOT_BADSPORT(amount);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_FROM_VEHICLE( Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7 )
	{
		MONEY::NETWORK_EARN_FROM_VEHICLE(p0, p1, p2, p3, p4, p5, p6, p7);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_FROM_PERSONAL_VEHICLE( Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8 )
	{
		MONEY::NETWORK_EARN_FROM_PERSONAL_VEHICLE(p0, p1, p2, p3, p4, p5, p6, p7, p8);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_FROM_DAILY_OBJECTIVES( int amount, const char* type, int characterSlot )
	{
		MONEY::NETWORK_EARN_FROM_DAILY_OBJECTIVES(amount, type, characterSlot);
	}

	Any LUA_NATIVE_MONEY_NETWORK_EARN_FROM_AMBIENT_JOB( int p0, const char* p1, Any p2 )
	{
		MONEY::NETWORK_EARN_FROM_AMBIENT_JOB(p0, p1, &p2);
		return p2;
	}

	std::tuple<Any, Any> LUA_NATIVE_MONEY_NETWORK_EARN_FROM_JOB_BONUS( Any p0, Any p1, Any p2 )
	{
		std::tuple<Any, Any> return_values;
		MONEY::NETWORK_EARN_FROM_JOB_BONUS(p0, &p1, &p2);
		std::get<0>(return_values) = p1;
		std::get<1>(return_values) = p2;

		return return_values;
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_FROM_CRIMINAL_MASTERMIND( Any p0, Any p1, Any p2 )
	{
		MONEY::NETWORK_EARN_FROM_CRIMINAL_MASTERMIND(p0, p1, p2);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_HEIST_AWARD( Any p0, Any p1, Any p2 )
	{
		MONEY::NETWORK_EARN_HEIST_AWARD(p0, p1, p2);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_FIRST_TIME_BONUS( Any p0, Any p1, Any p2 )
	{
		MONEY::NETWORK_EARN_FIRST_TIME_BONUS(p0, p1, p2);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_GOON( Any p0, Any p1, Any p2 )
	{
		MONEY::NETWORK_EARN_GOON(p0, p1, p2);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_BOSS( Any p0, Any p1, Any p2 )
	{
		MONEY::NETWORK_EARN_BOSS(p0, p1, p2);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_AGENCY( Any p0, Any p1, Any p2, Any p3 )
	{
		MONEY::NETWORK_EARN_AGENCY(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_FROM_WAREHOUSE( int amount, int id )
	{
		MONEY::NETWORK_EARN_FROM_WAREHOUSE(amount, id);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_FROM_CONTRABAND( int amount, Any p1 )
	{
		MONEY::NETWORK_EARN_FROM_CONTRABAND(amount, p1);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_FROM_DESTROYING_CONTRABAND( Any p0, Any p1, Any p2 )
	{
		MONEY::NETWORK_EARN_FROM_DESTROYING_CONTRABAND(p0, p1, p2);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_FROM_SMUGGLER_WORK( Any p0, Any p1, Any p2, Any p3, Any p4, Any p5 )
	{
		MONEY::NETWORK_EARN_FROM_SMUGGLER_WORK(p0, p1, p2, p3, p4, p5);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_FROM_HANGAR_TRADE( Any p0, Any p1 )
	{
		MONEY::NETWORK_EARN_FROM_HANGAR_TRADE(p0, p1);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_PURCHASE_CLUB_HOUSE( Any p0, Any p1 )
	{
		MONEY::NETWORK_EARN_PURCHASE_CLUB_HOUSE(p0, p1);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_FROM_BUSINESS_PRODUCT( int amount, Any p1, Any p2, Any p3 )
	{
		MONEY::NETWORK_EARN_FROM_BUSINESS_PRODUCT(amount, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_FROM_VEHICLE_EXPORT( int amount, Any p1, Any p2 )
	{
		MONEY::NETWORK_EARN_FROM_VEHICLE_EXPORT(amount, p1, p2);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_SMUGGLER_AGENCY( int amount, Any p1, Any p2, Any p3 )
	{
		MONEY::NETWORK_EARN_SMUGGLER_AGENCY(amount, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_BOUNTY_HUNTER_REWARD( Any p0 )
	{
		MONEY::NETWORK_EARN_BOUNTY_HUNTER_REWARD(p0);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_FROM_BUSINESS_BATTLE( Any p0 )
	{
		MONEY::NETWORK_EARN_FROM_BUSINESS_BATTLE(p0);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_FROM_CLUB_MANAGEMENT_PARTICIPATION( Any p0, int p1 )
	{
		MONEY::NETWORK_EARN_FROM_CLUB_MANAGEMENT_PARTICIPATION(p0, p1);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_FROM_FMBB_PHONECALL_MISSION( Any p0 )
	{
		MONEY::NETWORK_EARN_FROM_FMBB_PHONECALL_MISSION(p0);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_FROM_BUSINESS_HUB_SELL( Any p0, Any p1, Any p2 )
	{
		MONEY::NETWORK_EARN_FROM_BUSINESS_HUB_SELL(p0, p1, p2);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_FROM_FMBB_BOSS_WORK( Any p0 )
	{
		MONEY::NETWORK_EARN_FROM_FMBB_BOSS_WORK(p0);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_FMBB_WAGE_BONUS( Any p0 )
	{
		MONEY::NETWORK_EARN_FMBB_WAGE_BONUS(p0);
	}

	bool LUA_NATIVE_MONEY_NETWORK_CAN_SPEND_MONEY( Any p0, bool p1, bool p2, bool p3, Any p4, Any p5 )
	{
		auto retval = (bool)MONEY::NETWORK_CAN_SPEND_MONEY(p0, p1, p2, p3, p4, p5);
		return retval;
	}

	std::tuple<bool, Any> LUA_NATIVE_MONEY_NETWORK_CAN_SPEND_MONEY2( Any p0, bool p1, bool p2, bool p3, Any p4, Any p5, Any p6 )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)MONEY::NETWORK_CAN_SPEND_MONEY2(p0, p1, p2, p3, &p4, p5, p6);
		std::get<1>(return_values) = p4;

		return return_values;
	}

	void LUA_NATIVE_MONEY_NETWORK_BUY_ITEM( int amount, Hash item, Any p2, Any p3, bool p4, const char* item_name, Any p6, Any p7, Any p8, bool p9 )
	{
		MONEY::NETWORK_BUY_ITEM(amount, item, p2, p3, p4, item_name, p6, p7, p8, p9);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_TAXI( int amount, bool p1, bool p2, Any p3, Any p4 )
	{
		MONEY::NETWORK_SPENT_TAXI(amount, p1, p2, p3, p4);
	}

	void LUA_NATIVE_MONEY_NETWORK_PAY_EMPLOYEE_WAGE( Any p0, bool p1, bool p2 )
	{
		MONEY::NETWORK_PAY_EMPLOYEE_WAGE(p0, p1, p2);
	}

	void LUA_NATIVE_MONEY_NETWORK_PAY_MATCH_ENTRY_FEE( int amount, const char* matchId, bool p2, bool p3 )
	{
		MONEY::NETWORK_PAY_MATCH_ENTRY_FEE(amount, matchId, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_BETTING( int amount, int p1, const char* matchId, bool p3, bool p4 )
	{
		MONEY::NETWORK_SPENT_BETTING(amount, p1, matchId, p3, p4);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_WAGER( Any p0, Any p1, int amount )
	{
		MONEY::NETWORK_SPENT_WAGER(p0, p1, amount);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_IN_STRIPCLUB( Any p0, bool p1, Any p2, bool p3 )
	{
		MONEY::NETWORK_SPENT_IN_STRIPCLUB(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_BUY_HEALTHCARE( int cost, bool p1, bool p2 )
	{
		MONEY::NETWORK_BUY_HEALTHCARE(cost, p1, p2);
	}

	void LUA_NATIVE_MONEY_NETWORK_BUY_AIRSTRIKE( int cost, bool p1, bool p2, Any p3 )
	{
		MONEY::NETWORK_BUY_AIRSTRIKE(cost, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_BUY_BACKUP_GANG( int p0, int p1, bool p2, bool p3, int npcProvider )
	{
		MONEY::NETWORK_BUY_BACKUP_GANG(p0, p1, p2, p3, npcProvider);
	}

	void LUA_NATIVE_MONEY_NETWORK_BUY_HELI_STRIKE( int cost, bool p1, bool p2, Any p3 )
	{
		MONEY::NETWORK_BUY_HELI_STRIKE(cost, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_AMMO_DROP( Any p0, bool p1, bool p2, Any p3 )
	{
		MONEY::NETWORK_SPENT_AMMO_DROP(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_BUY_BOUNTY( int amount, Player victim, bool p2, bool p3, Any p4 )
	{
		MONEY::NETWORK_BUY_BOUNTY(amount, victim, p2, p3, p4);
	}

	void LUA_NATIVE_MONEY_NETWORK_BUY_PROPERTY( int cost, Hash propertyName, bool p2, bool p3 )
	{
		MONEY::NETWORK_BUY_PROPERTY(cost, propertyName, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_BUY_SMOKES( int p0, bool p1, bool p2 )
	{
		MONEY::NETWORK_BUY_SMOKES(p0, p1, p2);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_HELI_PICKUP( Any p0, bool p1, bool p2, Any p3 )
	{
		MONEY::NETWORK_SPENT_HELI_PICKUP(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_BOAT_PICKUP( Any p0, bool p1, bool p2, Any p3 )
	{
		MONEY::NETWORK_SPENT_BOAT_PICKUP(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_BULL_SHARK( Any p0, bool p1, bool p2, Any p3 )
	{
		MONEY::NETWORK_SPENT_BULL_SHARK(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_CASH_DROP( int amount, bool p1, bool p2 )
	{
		MONEY::NETWORK_SPENT_CASH_DROP(amount, p1, p2);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_HIRE_MUGGER( Any p0, bool p1, bool p2, Any p3 )
	{
		MONEY::NETWORK_SPENT_HIRE_MUGGER(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_ROBBED_BY_MUGGER( int amount, bool p1, bool p2, Any p3 )
	{
		MONEY::NETWORK_SPENT_ROBBED_BY_MUGGER(amount, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_HIRE_MERCENARY( Any p0, bool p1, bool p2, Any p3 )
	{
		MONEY::NETWORK_SPENT_HIRE_MERCENARY(p0, p1, p2, p3);
	}

	Any LUA_NATIVE_MONEY_NETWORK_SPENT_BUY_WANTEDLEVEL( Any p0, Any p1, bool p2, bool p3, Any p4 )
	{
		MONEY::NETWORK_SPENT_BUY_WANTEDLEVEL(p0, &p1, p2, p3, p4);
		return p1;
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_BUY_OFFTHERADAR( Any p0, bool p1, bool p2, Any p3 )
	{
		MONEY::NETWORK_SPENT_BUY_OFFTHERADAR(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_BUY_REVEAL_PLAYERS( Any p0, bool p1, bool p2, Any p3 )
	{
		MONEY::NETWORK_SPENT_BUY_REVEAL_PLAYERS(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_CARWASH( Any p0, Any p1, Any p2, bool p3, bool p4 )
	{
		MONEY::NETWORK_SPENT_CARWASH(p0, p1, p2, p3, p4);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_CINEMA( Any p0, Any p1, bool p2, bool p3 )
	{
		MONEY::NETWORK_SPENT_CINEMA(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_TELESCOPE( Any p0, bool p1, bool p2 )
	{
		MONEY::NETWORK_SPENT_TELESCOPE(p0, p1, p2);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_HOLDUPS( Any p0, bool p1, bool p2 )
	{
		MONEY::NETWORK_SPENT_HOLDUPS(p0, p1, p2);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_BUY_PASSIVE_MODE( Any p0, bool p1, bool p2, Any p3 )
	{
		MONEY::NETWORK_SPENT_BUY_PASSIVE_MODE(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_BANK_INTEREST( int p0, bool p1, bool p2 )
	{
		MONEY::NETWORK_SPENT_BANK_INTEREST(p0, p1, p2);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_PROSTITUTES( Any p0, bool p1, bool p2 )
	{
		MONEY::NETWORK_SPENT_PROSTITUTES(p0, p1, p2);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_ARREST_BAIL( Any p0, bool p1, bool p2 )
	{
		MONEY::NETWORK_SPENT_ARREST_BAIL(p0, p1, p2);
	}

	Any LUA_NATIVE_MONEY_NETWORK_SPENT_PAY_VEHICLE_INSURANCE_PREMIUM( int amount, Hash vehicleModel, Any gamerHandle, bool notBankrupt, bool hasTheMoney )
	{
		MONEY::NETWORK_SPENT_PAY_VEHICLE_INSURANCE_PREMIUM(amount, vehicleModel, &gamerHandle, notBankrupt, hasTheMoney);
		return gamerHandle;
	}

	Any LUA_NATIVE_MONEY_NETWORK_SPENT_CALL_PLAYER( Any p0, Any p1, bool p2, bool p3 )
	{
		MONEY::NETWORK_SPENT_CALL_PLAYER(p0, &p1, p2, p3);
		return p1;
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_BOUNTY( Any p0, bool p1, bool p2 )
	{
		MONEY::NETWORK_SPENT_BOUNTY(p0, p1, p2);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_FROM_ROCKSTAR( int p0, bool p1, bool p2 )
	{
		MONEY::NETWORK_SPENT_FROM_ROCKSTAR(p0, p1, p2);
	}

	int LUA_NATIVE_MONEY_NETWORK_SPEND_EARNED_FROM_BANK_AND_WALLETS( int amount )
	{
		auto retval = MONEY::NETWORK_SPEND_EARNED_FROM_BANK_AND_WALLETS(amount);
		return retval;
	}

	std::tuple<const char*, int, int> LUA_NATIVE_MONEY_PROCESS_CASH_GIFT( int p0, int p1, const char* p2 )
	{
		std::tuple<const char*, int, int> return_values;
		std::get<0>(return_values) = MONEY::PROCESS_CASH_GIFT(&p0, &p1, p2);
		std::get<1>(return_values) = p0;
		std::get<2>(return_values) = p1;

		return return_values;
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_MOVE_SUBMARINE( Any p0, Any p1, Any p2 )
	{
		MONEY::NETWORK_SPENT_MOVE_SUBMARINE(p0, p1, p2);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_PLAYER_HEALTHCARE( int p0, int p1, bool p2, bool p3 )
	{
		MONEY::NETWORK_SPENT_PLAYER_HEALTHCARE(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_NO_COPS( Any p0, bool p1, bool p2, Any p3 )
	{
		MONEY::NETWORK_SPENT_NO_COPS(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_CARGO_SOURCING( Any p0, Any p1, Any p2, Any p3, Any p4, Any p5 )
	{
		MONEY::NETWORK_SPENT_CARGO_SOURCING(p0, p1, p2, p3, p4, p5);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_REQUEST_JOB( Any p0, bool p1, bool p2, Any p3 )
	{
		MONEY::NETWORK_SPENT_REQUEST_JOB(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_REQUEST_HEIST( Any p0, bool p1, bool p2, Any p3 )
	{
		MONEY::NETWORK_SPENT_REQUEST_HEIST(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_BUY_FAIRGROUND_RIDE( int amount, Any p1, bool p2, bool p3, Any p4 )
	{
		MONEY::NETWORK_BUY_FAIRGROUND_RIDE(amount, p1, p2, p3, p4);
	}

	bool LUA_NATIVE_MONEY_NETWORK_ECONOMY_HAS_FIXED_CRAZY_NUMBERS(  )
	{
		auto retval = (bool)MONEY::NETWORK_ECONOMY_HAS_FIXED_CRAZY_NUMBERS();
		return retval;
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_JOB_SKIP( int amount, const char* matchId, bool p2, bool p3 )
	{
		MONEY::NETWORK_SPENT_JOB_SKIP(amount, matchId, p2, p3);
	}

	bool LUA_NATIVE_MONEY_NETWORK_SPENT_BOSS_GOON( int amount, bool p1, bool p2 )
	{
		auto retval = (bool)MONEY::NETWORK_SPENT_BOSS_GOON(amount, p1, p2);
		return retval;
	}

	void LUA_NATIVE_MONEY_NETWORK_SPEND_GOON( int p0, int p1, int amount )
	{
		MONEY::NETWORK_SPEND_GOON(p0, p1, amount);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPEND_BOSS( Any p0, Any p1, Any p2 )
	{
		MONEY::NETWORK_SPEND_BOSS(p0, p1, p2);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_MOVE_YACHT( int amount, bool p1, bool p2 )
	{
		MONEY::NETWORK_SPENT_MOVE_YACHT(amount, p1, p2);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_RENAME_ORGANIZATION( Any p0, Any p1, Any p2, Any p3 )
	{
		MONEY::NETWORK_SPENT_RENAME_ORGANIZATION(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_BUY_CONTRABAND_MISSION( int p0, int p1, Hash p2, bool p3, bool p4 )
	{
		MONEY::NETWORK_BUY_CONTRABAND_MISSION(p0, p1, p2, p3, p4);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_PA_SERVICE_HELI( Any p0, Any p1, Any p2, Any p3 )
	{
		MONEY::NETWORK_SPENT_PA_SERVICE_HELI(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_PA_SERVICE_VEHICLE( Any p0, Any p1, Any p2, Any p3 )
	{
		MONEY::NETWORK_SPENT_PA_SERVICE_VEHICLE(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_PA_SERVICE_SNACK( Any p0, Any p1, Any p2, Any p3 )
	{
		MONEY::NETWORK_SPENT_PA_SERVICE_SNACK(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_PA_SERVICE_DANCER( Any p0, Any p1, Any p2, Any p3 )
	{
		MONEY::NETWORK_SPENT_PA_SERVICE_DANCER(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_PA_SERVICE_IMPOUND( Any p0, Any p1, Any p2 )
	{
		MONEY::NETWORK_SPENT_PA_SERVICE_IMPOUND(p0, p1, p2);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_PA_HELI_PICKUP( Any p0, Any p1, Any p2, Any p3 )
	{
		MONEY::NETWORK_SPENT_PA_HELI_PICKUP(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_PURCHASE_OFFICE_PROPERTY( Any p0, Any p1, Any p2, Any p3, Any p4 )
	{
		MONEY::NETWORK_SPENT_PURCHASE_OFFICE_PROPERTY(p0, p1, p2, p3, p4);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_UPGRADE_OFFICE_PROPERTY( Any p0, Any p1, Any p2, Any p3, Any p4 )
	{
		MONEY::NETWORK_SPENT_UPGRADE_OFFICE_PROPERTY(p0, p1, p2, p3, p4);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_PURCHASE_WAREHOUSE_PROPERTY( Any p0, Any p1, Any p2, Any p3 )
	{
		MONEY::NETWORK_SPENT_PURCHASE_WAREHOUSE_PROPERTY(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_UPGRADE_WAREHOUSE_PROPERTY( Any p0, Any p1, Any p2, Any p3 )
	{
		MONEY::NETWORK_SPENT_UPGRADE_WAREHOUSE_PROPERTY(p0, p1, p2, p3);
	}

	Any LUA_NATIVE_MONEY_NETWORK_SPENT_PURCHASE_IMPEXP_WAREHOUSE_PROPERTY( int amount, Any data, bool p2, bool p3 )
	{
		MONEY::NETWORK_SPENT_PURCHASE_IMPEXP_WAREHOUSE_PROPERTY(amount, &data, p2, p3);
		return data;
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_UPGRADE_IMPEXP_WAREHOUSE_PROPERTY( Any p0, Any p1, Any p2, Any p3 )
	{
		MONEY::NETWORK_SPENT_UPGRADE_IMPEXP_WAREHOUSE_PROPERTY(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_TRADE_IMPEXP_WAREHOUSE_PROPERTY( Any p0, Any p1, Any p2, Any p3 )
	{
		MONEY::NETWORK_SPENT_TRADE_IMPEXP_WAREHOUSE_PROPERTY(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_ORDER_WAREHOUSE_VEHICLE( Any p0, Any p1, Any p2, Any p3 )
	{
		MONEY::NETWORK_SPENT_ORDER_WAREHOUSE_VEHICLE(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_ORDER_BODYGUARD_VEHICLE( Any p0, Any p1, Any p2, Any p3 )
	{
		MONEY::NETWORK_SPENT_ORDER_BODYGUARD_VEHICLE(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_JUKEBOX( Any p0, Any p1, Any p2, Any p3 )
	{
		MONEY::NETWORK_SPENT_JUKEBOX(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_PURCHASE_CLUB_HOUSE( Any p0, Any p1, Any p2, Any p3 )
	{
		MONEY::NETWORK_SPENT_PURCHASE_CLUB_HOUSE(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_UPGRADE_CLUB_HOUSE( Any p0, Any p1, Any p2, Any p3 )
	{
		MONEY::NETWORK_SPENT_UPGRADE_CLUB_HOUSE(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_PURCHASE_BUSINESS_PROPERTY( Any p0, Any p1, Any p2, Any p3 )
	{
		MONEY::NETWORK_SPENT_PURCHASE_BUSINESS_PROPERTY(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_UPGRADE_BUSINESS_PROPERTY( Any p0, Any p1, Any p2, Any p3 )
	{
		MONEY::NETWORK_SPENT_UPGRADE_BUSINESS_PROPERTY(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_TRADE_BUSINESS_PROPERTY( Any p0, Any p1, Any p2, Any p3 )
	{
		MONEY::NETWORK_SPENT_TRADE_BUSINESS_PROPERTY(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_MC_ABILITY( Any p0, Any p1, Any p2, Any p3, Any p4 )
	{
		MONEY::NETWORK_SPENT_MC_ABILITY(p0, p1, p2, p3, p4);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_PAY_BUSINESS_SUPPLIES( Any p0, Any p1, Any p2, Any p3 )
	{
		MONEY::NETWORK_SPENT_PAY_BUSINESS_SUPPLIES(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_CHANGE_APPEARANCE( Any p0, Any p1, Any p2 )
	{
		MONEY::NETWORK_SPENT_CHANGE_APPEARANCE(p0, p1, p2);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_VEHICLE_EXPORT_MODS( Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9 )
	{
		MONEY::NETWORK_SPENT_VEHICLE_EXPORT_MODS(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_PURCHASE_OFFICE_GARAGE( Any p0, Any p1, Any p2, Any p3 )
	{
		MONEY::NETWORK_SPENT_PURCHASE_OFFICE_GARAGE(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_UPGRADE_OFFICE_GARAGE( Any p0, Any p1, Any p2, Any p3 )
	{
		MONEY::NETWORK_SPENT_UPGRADE_OFFICE_GARAGE(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_IMPORT_EXPORT_REPAIR( Any p0, Any p1, Any p2 )
	{
		MONEY::NETWORK_SPENT_IMPORT_EXPORT_REPAIR(p0, p1, p2);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_PURCHASE_HANGAR( Any p0, Any p1, Any p2, Any p3 )
	{
		MONEY::NETWORK_SPENT_PURCHASE_HANGAR(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_UPGRADE_HANGAR( Any p0, Any p1, Any p2, Any p3 )
	{
		MONEY::NETWORK_SPENT_UPGRADE_HANGAR(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_HANGAR_UTILITY_CHARGES( int amount, bool p1, bool p2 )
	{
		MONEY::NETWORK_SPENT_HANGAR_UTILITY_CHARGES(amount, p1, p2);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_HANGAR_STAFF_CHARGES( int amount, bool p1, bool p2 )
	{
		MONEY::NETWORK_SPENT_HANGAR_STAFF_CHARGES(amount, p1, p2);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_BUY_TRUCK( Any p0, Any p1, Any p2, Any p3 )
	{
		MONEY::NETWORK_SPENT_BUY_TRUCK(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_UPGRADE_TRUCK( Any p0, Any p1, Any p2, Any p3 )
	{
		MONEY::NETWORK_SPENT_UPGRADE_TRUCK(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_BUY_BUNKER( Any p0, Any p1, Any p2, Any p3 )
	{
		MONEY::NETWORK_SPENT_BUY_BUNKER(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_UPRADE_BUNKER( Any p0, Any p1, Any p2, Any p3 )
	{
		MONEY::NETWORK_SPENT_UPRADE_BUNKER(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_FROM_SELL_BUNKER( int amount, Hash bunkerHash )
	{
		MONEY::NETWORK_EARN_FROM_SELL_BUNKER(amount, bunkerHash);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_BALLISTIC_EQUIPMENT( int amount, bool p1, bool p2 )
	{
		MONEY::NETWORK_SPENT_BALLISTIC_EQUIPMENT(amount, p1, p2);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_RDR_BONUS( int amount, Any p1 )
	{
		MONEY::NETWORK_EARN_RDR_BONUS(amount, p1);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_WAGE_PAYMENT( int amount, Any p1 )
	{
		MONEY::NETWORK_EARN_WAGE_PAYMENT(amount, p1);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_WAGE_PAYMENT_BONUS( int amount )
	{
		MONEY::NETWORK_EARN_WAGE_PAYMENT_BONUS(amount);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_BUY_BASE( Any p0, Any p1, Any p2, Any p3 )
	{
		MONEY::NETWORK_SPENT_BUY_BASE(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_UPGRADE_BASE( Any p0, Any p1, Any p2, Any p3 )
	{
		MONEY::NETWORK_SPENT_UPGRADE_BASE(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_BUY_TILTROTOR( Any p0, Any p1, Any p2, Any p3 )
	{
		MONEY::NETWORK_SPENT_BUY_TILTROTOR(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_UPGRADE_TILTROTOR( Any p0, Any p1, Any p2, Any p3 )
	{
		MONEY::NETWORK_SPENT_UPGRADE_TILTROTOR(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_EMPLOY_ASSASSINS( Any p0, Any p1, Any p2, Any p3 )
	{
		MONEY::NETWORK_SPENT_EMPLOY_ASSASSINS(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPEND_GANGOPS_CANNON( Any p0, Any p1, Any p2, Any p3 )
	{
		MONEY::NETWORK_SPEND_GANGOPS_CANNON(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPEND_GANGOPS_SKIP_MISSION( Any p0, Any p1, Any p2, Any p3 )
	{
		MONEY::NETWORK_SPEND_GANGOPS_SKIP_MISSION(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPEND_CASINO_HEIST_SKIP_MISSION( Any p0, Any p1, Any p2, Any p3 )
	{
		MONEY::NETWORK_SPEND_CASINO_HEIST_SKIP_MISSION(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_SELL_BASE( int amount, Hash baseNameHash )
	{
		MONEY::NETWORK_EARN_SELL_BASE(amount, baseNameHash);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_TARGET_REFUND( int amount, int p1 )
	{
		MONEY::NETWORK_EARN_TARGET_REFUND(amount, p1);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_GANGOPS_WAGES( int amount, int p1 )
	{
		MONEY::NETWORK_EARN_GANGOPS_WAGES(amount, p1);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_GANGOPS_WAGES_BONUS( int amount, int p1 )
	{
		MONEY::NETWORK_EARN_GANGOPS_WAGES_BONUS(amount, p1);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_DAR_CHALLENGE( int amount, Any p1 )
	{
		MONEY::NETWORK_EARN_DAR_CHALLENGE(amount, p1);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_DOOMSDAY_FINALE_BONUS( int amount, Hash vehicleHash )
	{
		MONEY::NETWORK_EARN_DOOMSDAY_FINALE_BONUS(amount, vehicleHash);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_GANGOPS_AWARD( int amount, const char* p1, Any p2 )
	{
		MONEY::NETWORK_EARN_GANGOPS_AWARD(amount, p1, p2);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_GANGOPS_ELITE( int amount, const char* p1, int actIndex )
	{
		MONEY::NETWORK_EARN_GANGOPS_ELITE(amount, p1, actIndex);
	}

	void LUA_NATIVE_MONEY_NETWORK_SERVICE_EARN_GANGOPS_RIVAL_DELIVERY( int earnedMoney )
	{
		MONEY::NETWORK_SERVICE_EARN_GANGOPS_RIVAL_DELIVERY(earnedMoney);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPEND_GANGOPS_START_STRAND( int type, int amount, bool p2, bool p3 )
	{
		MONEY::NETWORK_SPEND_GANGOPS_START_STRAND(type, amount, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPEND_GANGOPS_TRIP_SKIP( int amount, bool p1, bool p2 )
	{
		MONEY::NETWORK_SPEND_GANGOPS_TRIP_SKIP(amount, p1, p2);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_GANGOPS_PREP_PARTICIPATION( int amount )
	{
		MONEY::NETWORK_EARN_GANGOPS_PREP_PARTICIPATION(amount);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_GANGOPS_SETUP( int amount, const char* p1 )
	{
		MONEY::NETWORK_EARN_GANGOPS_SETUP(amount, p1);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_GANGOPS_FINALE( int amount, const char* p1 )
	{
		MONEY::NETWORK_EARN_GANGOPS_FINALE(amount, p1);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPEND_GANGOPS_REPAIR_COST( Any p0, Any p1, Any p2 )
	{
		MONEY::NETWORK_SPEND_GANGOPS_REPAIR_COST(p0, p1, p2);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_NIGHTCLUB( Any p0 )
	{
		MONEY::NETWORK_EARN_NIGHTCLUB(p0);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_NIGHTCLUB_DANCING( Any p0 )
	{
		MONEY::NETWORK_EARN_NIGHTCLUB_DANCING(p0);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_BB_EVENT_BONUS( int amount )
	{
		MONEY::NETWORK_EARN_BB_EVENT_BONUS(amount);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_PURCHASE_HACKER_TRUCK( Any p0, Any p1, Any p2, Any p3 )
	{
		MONEY::NETWORK_SPENT_PURCHASE_HACKER_TRUCK(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_UPGRADE_HACKER_TRUCK( Any p0, Any p1, Any p2, Any p3 )
	{
		MONEY::NETWORK_SPENT_UPGRADE_HACKER_TRUCK(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_HACKER_TRUCK( Any p0, int amount, Any p2, Any p3 )
	{
		MONEY::NETWORK_EARN_HACKER_TRUCK(p0, amount, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_PURCHASE_NIGHTCLUB_AND_WAREHOUSE( Any p0, Any p1, Any p2, Any p3 )
	{
		MONEY::NETWORK_SPENT_PURCHASE_NIGHTCLUB_AND_WAREHOUSE(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_UPGRADE_NIGHTCLUB_AND_WAREHOUSE( Any p0, Any p1, Any p2, Any p3 )
	{
		MONEY::NETWORK_SPENT_UPGRADE_NIGHTCLUB_AND_WAREHOUSE(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_NIGHTCLUB_AND_WAREHOUSE( Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6 )
	{
		MONEY::NETWORK_EARN_NIGHTCLUB_AND_WAREHOUSE(p0, p1, p2, p3, p4, p5, p6);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPEND_NIGHTCLUB_AND_WAREHOUSE( Any p0, Any p1, Any p2, Any p3 )
	{
		MONEY::NETWORK_SPEND_NIGHTCLUB_AND_WAREHOUSE(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_RDR_HATCHET_BONUS( int amount, bool p1, bool p2 )
	{
		MONEY::NETWORK_SPENT_RDR_HATCHET_BONUS(amount, p1, p2);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_NIGHTCLUB_ENTRY_FEE( Player player, int amount, Any p1, bool p2, bool p3 )
	{
		MONEY::NETWORK_SPENT_NIGHTCLUB_ENTRY_FEE(player, amount, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPEND_NIGHTCLUB_BAR_DRINK( int amount, Any p1, bool p2, bool p3 )
	{
		MONEY::NETWORK_SPEND_NIGHTCLUB_BAR_DRINK(amount, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPEND_BOUNTY_HUNTER_MISSION( int amount, bool p1, bool p2 )
	{
		MONEY::NETWORK_SPEND_BOUNTY_HUNTER_MISSION(amount, p1, p2);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_REHIRE_DJ( int amount, Any p1, bool p2, bool p3 )
	{
		MONEY::NETWORK_SPENT_REHIRE_DJ(amount, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_ARENA_JOIN_SPECTATOR( int amount, Any p1, bool p2, bool p3 )
	{
		MONEY::NETWORK_SPENT_ARENA_JOIN_SPECTATOR(amount, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_ARENA_SKILL_LEVEL_PROGRESSION( int amount, Any p1 )
	{
		MONEY::NETWORK_EARN_ARENA_SKILL_LEVEL_PROGRESSION(amount, p1);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_ARENA_CAREER_PROGRESSION( int amount, Any p1 )
	{
		MONEY::NETWORK_EARN_ARENA_CAREER_PROGRESSION(amount, p1);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPEND_MAKE_IT_RAIN( int amount, bool p1, bool p2 )
	{
		MONEY::NETWORK_SPEND_MAKE_IT_RAIN(amount, p1, p2);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPEND_BUY_ARENA( int amount, bool p1, bool p2, const char* p3 )
	{
		MONEY::NETWORK_SPEND_BUY_ARENA(amount, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPEND_UPGRADE_ARENA( int amount, bool p1, bool p2, const char* p3 )
	{
		MONEY::NETWORK_SPEND_UPGRADE_ARENA(amount, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPEND_ARENA_SPECTATOR_BOX( int amount, int type, bool p2, bool p3 )
	{
		MONEY::NETWORK_SPEND_ARENA_SPECTATOR_BOX(amount, type, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPEND_SPIN_THE_WHEEL_PAYMENT( int amount, Any p1, bool p2 )
	{
		MONEY::NETWORK_SPEND_SPIN_THE_WHEEL_PAYMENT(amount, p1, p2);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_SPIN_THE_WHEEL_CASH( int amount )
	{
		MONEY::NETWORK_EARN_SPIN_THE_WHEEL_CASH(amount);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPEND_ARENA_PREMIUM( int amount, bool p1, bool p2 )
	{
		MONEY::NETWORK_SPEND_ARENA_PREMIUM(amount, p1, p2);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_ARENA_WAR( int amount, Any p1, Any p2, Any p3 )
	{
		MONEY::NETWORK_EARN_ARENA_WAR(amount, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_ARENA_WAR_ASSASSINATE_TARGET( int amount )
	{
		MONEY::NETWORK_EARN_ARENA_WAR_ASSASSINATE_TARGET(amount);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_ARENA_WAR_EVENT_CARGO( int amount )
	{
		MONEY::NETWORK_EARN_ARENA_WAR_EVENT_CARGO(amount);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_RC_TIME_TRIAL( int amount )
	{
		MONEY::NETWORK_EARN_RC_TIME_TRIAL(amount);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_DAILY_OBJECTIVE_EVENT( int amount )
	{
		MONEY::NETWORK_EARN_DAILY_OBJECTIVE_EVENT(amount);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPEND_CASINO_MEMBERSHIP( int amount, bool p1, bool p2, int p3 )
	{
		MONEY::NETWORK_SPEND_CASINO_MEMBERSHIP(amount, p1, p2, p3);
	}

	Any LUA_NATIVE_MONEY_NETWORK_SPEND_BUY_CASINO( int amount, bool p1, bool p2, Any data )
	{
		MONEY::NETWORK_SPEND_BUY_CASINO(amount, p1, p2, &data);
		return data;
	}

	Any LUA_NATIVE_MONEY_NETWORK_SPEND_UPGRADE_CASINO( int amount, bool p1, bool p2, Any data )
	{
		MONEY::NETWORK_SPEND_UPGRADE_CASINO(amount, p1, p2, &data);
		return data;
	}

	void LUA_NATIVE_MONEY_NETWORK_SPEND_CASINO_GENERIC( int amount, Any p1, Any p2, Any p3, Any p4 )
	{
		MONEY::NETWORK_SPEND_CASINO_GENERIC(amount, p1, p2, p3, p4);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_CASINO_TIME_TRIAL_WIN( int amount )
	{
		MONEY::NETWORK_EARN_CASINO_TIME_TRIAL_WIN(amount);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_COLLECTABLES_ACTION_FIGURES( int amount )
	{
		MONEY::NETWORK_EARN_COLLECTABLES_ACTION_FIGURES(amount);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_CASINO_COLLECTABLE_COMPLETED_COLLECTION( int amount )
	{
		MONEY::NETWORK_EARN_CASINO_COLLECTABLE_COMPLETED_COLLECTION(amount);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_SELL_PRIZE_VEHICLE( int amount, Any p1, Any p2 )
	{
		MONEY::NETWORK_EARN_SELL_PRIZE_VEHICLE(amount, p1, p2);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_CASINO_MISSION_REWARD( int amount )
	{
		MONEY::NETWORK_EARN_CASINO_MISSION_REWARD(amount);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_CASINO_STORY_MISSION_REWARD( int amount )
	{
		MONEY::NETWORK_EARN_CASINO_STORY_MISSION_REWARD(amount);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_CASINO_MISSION_PARTICIPATION( int amount )
	{
		MONEY::NETWORK_EARN_CASINO_MISSION_PARTICIPATION(amount);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_CASINO_AWARD( int amount, Hash hash )
	{
		MONEY::NETWORK_EARN_CASINO_AWARD(amount, hash);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPEND_BUY_ARCADE( Any p0, Any p1, Any p2, Any p3 )
	{
		MONEY::NETWORK_SPEND_BUY_ARCADE(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPEND_UPGRADE_ARCADE( Any p0, Any p1, Any p2, Any p3 )
	{
		MONEY::NETWORK_SPEND_UPGRADE_ARCADE(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPEND_CASINO_HEIST( Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9, Any p10 )
	{
		MONEY::NETWORK_SPEND_CASINO_HEIST(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPEND_ARCADE_MGMT( Any p0, Any p1, Any p2, Any p3, Any p4 )
	{
		MONEY::NETWORK_SPEND_ARCADE_MGMT(p0, p1, p2, p3, p4);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPEND_PLAY_ARCADE( Any p0, Any p1, Any p2, Any p3, Any p4 )
	{
		MONEY::NETWORK_SPEND_PLAY_ARCADE(p0, p1, p2, p3, p4);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPEND_ARCADE( Any p0, Any p1, Any p2, Any p3, Any p4 )
	{
		MONEY::NETWORK_SPEND_ARCADE(p0, p1, p2, p3, p4);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_CASINO_HEIST( Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6 )
	{
		MONEY::NETWORK_EARN_CASINO_HEIST(p0, p1, p2, p3, p4, p5, p6);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_UPGRADE_ARCADE( Any p0, Any p1, Any p2 )
	{
		MONEY::NETWORK_EARN_UPGRADE_ARCADE(p0, p1, p2);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_ARCADE( Any p0, Any p1, Any p2, Any p3, Any p4 )
	{
		MONEY::NETWORK_EARN_ARCADE(p0, p1, p2, p3, p4);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_COLLECTABLES( Any p0, Any p1, Any p2 )
	{
		MONEY::NETWORK_EARN_COLLECTABLES(p0, p1, p2);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_CHALLENGE( int amount, Any p1, Any p2 )
	{
		MONEY::NETWORK_EARN_CHALLENGE(amount, p1, p2);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_CASINO_HEIST_AWARDS( Any p0, Any p1, Any p2, Any p3, Any p4 )
	{
		MONEY::NETWORK_EARN_CASINO_HEIST_AWARDS(p0, p1, p2, p3, p4);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_COLLECTABLE_ITEM( int amount, Any p1 )
	{
		MONEY::NETWORK_EARN_COLLECTABLE_ITEM(amount, p1);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_COLLECTABLE_COMPLETED_COLLECTION( int amount, Any p1 )
	{
		MONEY::NETWORK_EARN_COLLECTABLE_COMPLETED_COLLECTION(amount, p1);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_YATCH_MISSION( int amount, Any p1 )
	{
		MONEY::NETWORK_EARN_YATCH_MISSION(amount, p1);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_DISPATCH_CALL( int amount, Any p1 )
	{
		MONEY::NETWORK_EARN_DISPATCH_CALL(amount, p1);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPEND_BEACH_PARTY( Any p0 )
	{
		MONEY::NETWORK_SPEND_BEACH_PARTY(p0);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPEND_SUBMARINE( Any p0, Any p1, Any p2, Any p3, Any p4, Any p5 )
	{
		MONEY::NETWORK_SPEND_SUBMARINE(p0, p1, p2, p3, p4, p5);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPEND_CASINO_CLUB( int amount1, Any p1, bool p2, Any p3, int p4, int p5, int p6, int amount2, Any p8 )
	{
		MONEY::NETWORK_SPEND_CASINO_CLUB(amount1, p1, p2, p3, p4, p5, p6, amount2, p8);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPEND_BUY_SUB( Any p0, Any p1, Any p2, Any p3 )
	{
		MONEY::NETWORK_SPEND_BUY_SUB(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPEND_UPGRADE_SUB( Any p0, Any p1, Any p2, Any p3 )
	{
		MONEY::NETWORK_SPEND_UPGRADE_SUB(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPEND_ISLAND_HEIST( Any p0, Any p1, Any p2, Any p3 )
	{
		MONEY::NETWORK_SPEND_ISLAND_HEIST(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_ISLAND_HEIST( int amount1, Any p1, Any p2, Any p3, int amount2, int p5 )
	{
		MONEY::NETWORK_EARN_ISLAND_HEIST(amount1, p1, p2, p3, amount2, p5);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_BEACH_PARTY_LOST_FOUND( Any p0, Any p1, Any p2 )
	{
		MONEY::NETWORK_EARN_BEACH_PARTY_LOST_FOUND(p0, p1, p2);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_FROM_ISLAND_HEIST_DJ_MISSION( Any p0, Any p1 )
	{
		MONEY::NETWORK_EARN_FROM_ISLAND_HEIST_DJ_MISSION(p0, p1);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPEND_CAR_CLUB_MEMBERSHIP( int amount1, Any p1, Any p2, int amount2, Any p4 )
	{
		MONEY::NETWORK_SPEND_CAR_CLUB_MEMBERSHIP(amount1, p1, p2, amount2, p4);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPEND_CAR_CLUB_BAR( Any p0, bool p1, bool p2, Any p3 )
	{
		MONEY::NETWORK_SPEND_CAR_CLUB_BAR(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPEND_AUTOSHOP_MODIFY( Any p0, Any p1, Any p2, Any p3, Any p4 )
	{
		MONEY::NETWORK_SPEND_AUTOSHOP_MODIFY(p0, p1, p2, p3, p4);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPEND_CAR_CLUB_TAKEOVER( Any p0, Any p1, Any p2, Any p3 )
	{
		MONEY::NETWORK_SPEND_CAR_CLUB_TAKEOVER(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPEND_BUY_AUTOSHOP( Any p0, Any p1, Any p2, Any p3 )
	{
		MONEY::NETWORK_SPEND_BUY_AUTOSHOP(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPEND_UPGRADE_AUTOSHOP( Any p0, Any p1, Any p2, Any p3 )
	{
		MONEY::NETWORK_SPEND_UPGRADE_AUTOSHOP(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_AUTOSHOP_BUSINESS( Any p0, Any p1, Any p2 )
	{
		MONEY::NETWORK_EARN_AUTOSHOP_BUSINESS(p0, p1, p2);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_AUTOSHOP_INCOME( Any p0, int p1 )
	{
		MONEY::NETWORK_EARN_AUTOSHOP_INCOME(p0, p1);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_CARCLUB_MEMBERSHIP( Any p0 )
	{
		MONEY::NETWORK_EARN_CARCLUB_MEMBERSHIP(p0);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_DAILY_VEHICLE( Any p0, Any p1 )
	{
		MONEY::NETWORK_EARN_DAILY_VEHICLE(p0, p1);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_DAILY_VEHICLE_BONUS( Any p0 )
	{
		MONEY::NETWORK_EARN_DAILY_VEHICLE_BONUS(p0);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_TUNER_AWARD( Any p0, Any p1, Any p2 )
	{
		MONEY::NETWORK_EARN_TUNER_AWARD(p0, p1, p2);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_TUNER_ROBBERY( Any p0, Any p1, Any p2, Any p3, Any p4 )
	{
		MONEY::NETWORK_EARN_TUNER_ROBBERY(p0, p1, p2, p3, p4);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_UPGRADE_AUTOSHOP( Any p0, Any p1 )
	{
		MONEY::NETWORK_EARN_UPGRADE_AUTOSHOP(p0, p1);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPEND_INTERACTION_MENU_ABILITY( Any p0, Any p1, Any p2, Any p3 )
	{
		MONEY::NETWORK_SPEND_INTERACTION_MENU_ABILITY(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPEND_SET_COMMON_FIELDS( Any p0, Any p1, Any p2, bool p3 )
	{
		MONEY::NETWORK_SPEND_SET_COMMON_FIELDS(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPEND_SET_DISCOUNT( bool p0 )
	{
		MONEY::NETWORK_SPEND_SET_DISCOUNT(p0);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPEND_BUY_AGENCY( Any p0, Any p1, Any p2, Any p3 )
	{
		MONEY::NETWORK_SPEND_BUY_AGENCY(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPEND_UPGRADE_AGENCY( Any p0, Any p1, Any p2, Any p3 )
	{
		MONEY::NETWORK_SPEND_UPGRADE_AGENCY(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPEND_AGENCY( Any p0, Any p1, Any p2, Any p3, Any p4 )
	{
		MONEY::NETWORK_SPEND_AGENCY(p0, p1, p2, p3, p4);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPEND_HIDDEN( Any p0, Any p1, Any p2, Any p3 )
	{
		MONEY::NETWORK_SPEND_HIDDEN(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPEND_SOURCE_BIKE( Any p0, Any p1, Any p2, Any p3 )
	{
		MONEY::NETWORK_SPEND_SOURCE_BIKE(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPEND_COMP_SUV( Any p0, Any p1, Any p2, Any p3 )
	{
		MONEY::NETWORK_SPEND_COMP_SUV(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPEND_SUV_FST_TRVL( int p0, bool p1, bool p2, Any p3 )
	{
		MONEY::NETWORK_SPEND_SUV_FST_TRVL(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPEND_SUPPLY( Any p0, Any p1, Any p2, Any p3 )
	{
		MONEY::NETWORK_SPEND_SUPPLY(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPEND_BIKE_SHOP( Any p0, Any p1, Any p2, Any p3 )
	{
		MONEY::NETWORK_SPEND_BIKE_SHOP(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPEND_VEHICLE_REQUESTED( Any p0, Any p1, Any p2, Any p3, Any p4 )
	{
		MONEY::NETWORK_SPEND_VEHICLE_REQUESTED(p0, p1, p2, p3, p4);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPEND_GUNRUNNING( Any p0, Any p1, Any p2, Any p3 )
	{
		MONEY::NETWORK_SPEND_GUNRUNNING(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_AGENCY_SAFE( Any p0 )
	{
		MONEY::NETWORK_EARN_AGENCY_SAFE(p0);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_AWARD_CONTRACT( Any p0, Any p1 )
	{
		MONEY::NETWORK_EARN_AWARD_CONTRACT(p0, p1);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_AGENCY_CONTRACT( Any p0, Any p1 )
	{
		MONEY::NETWORK_EARN_AGENCY_CONTRACT(p0, p1);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_AWARD_PHONE( Any p0, Any p1 )
	{
		MONEY::NETWORK_EARN_AWARD_PHONE(p0, p1);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_AGENCY_PHONE( Any p0, Any p1, Any p2 )
	{
		MONEY::NETWORK_EARN_AGENCY_PHONE(p0, p1, p2);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_AWARD_FIXER_MISSION( Any p0, Any p1 )
	{
		MONEY::NETWORK_EARN_AWARD_FIXER_MISSION(p0, p1);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_FIXER_PREP( Any p0, Any p1 )
	{
		MONEY::NETWORK_EARN_FIXER_PREP(p0, p1);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_FIXER_FINALE( Any p0, Any p1 )
	{
		MONEY::NETWORK_EARN_FIXER_FINALE(p0, p1);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_FIXER_AGENCY_SHORT_TRIP( Any p0, Any p1 )
	{
		MONEY::NETWORK_EARN_FIXER_AGENCY_SHORT_TRIP(p0, p1);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_AWARD_SHORT_TRIP( Any p0, Any p1 )
	{
		MONEY::NETWORK_EARN_AWARD_SHORT_TRIP(p0, p1);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_FIXER_RIVAL_DELIVERY( Any p0, Any p1 )
	{
		MONEY::NETWORK_EARN_FIXER_RIVAL_DELIVERY(p0, p1);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_UPGRADE_AGENCY( Any p0, Any p1 )
	{
		MONEY::NETWORK_EARN_UPGRADE_AGENCY(p0, p1);
	}

	Any LUA_NATIVE_MONEY_NETWORK_SPEND_APARTMENT_UTILITIES( int amount, bool p1, bool p2, Any data )
	{
		MONEY::NETWORK_SPEND_APARTMENT_UTILITIES(amount, p1, p2, &data);
		return data;
	}

	void LUA_NATIVE_MONEY_NETWORK_SPEND_BUSINESS_PROPERTY_FEES( Any p0, Any p1, Any p2, Any p3 )
	{
		MONEY::NETWORK_SPEND_BUSINESS_PROPERTY_FEES(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_SIGHTSEEING_REWARD( Any p0, Any p1, Any p2, Any p3 )
	{
		MONEY::NETWORK_EARN_SIGHTSEEING_REWARD(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_BIKER_SHOP( Any p0, Any p1 )
	{
		MONEY::NETWORK_EARN_BIKER_SHOP(p0, p1);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_BIKER( Any p0 )
	{
		MONEY::NETWORK_EARN_BIKER(p0);
	}

	void LUA_NATIVE_MONEY_NETWORK_YOHAN_SOURCE_GOODS( Any p0, Any p1, Any p2, Any p3 )
	{
		MONEY::NETWORK_YOHAN_SOURCE_GOODS(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPEND_BUY_MFGARAGE_( Any p0, Any p1, Any p2, Any p3 )
	{
		MONEY::NETWORK_SPEND_BUY_MFGARAGE_(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPEND_UPGRADE_MFGARAGE_( Any p0, Any p1, Any p2, Any p3 )
	{
		MONEY::NETWORK_SPEND_UPGRADE_MFGARAGE_(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPEND_BUY_SUPPLIES_( int p0, bool p1, bool p2, int p3 )
	{
		MONEY::NETWORK_SPEND_BUY_SUPPLIES_(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPEND_BUY_ACID_LAB_( Any p0, Any p1, Any p2, Any p3 )
	{
		MONEY::NETWORK_SPEND_BUY_ACID_LAB_(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPEND_UPGRADE_ACID_LAB_EQUIPMENT_( Any p0, Any p1, Any p2, Any p3 )
	{
		MONEY::NETWORK_SPEND_UPGRADE_ACID_LAB_EQUIPMENT_(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPEND_UPGRADE_ACID_LAB_ARMOR_( int p0, bool p1, bool p2, int p3 )
	{
		MONEY::NETWORK_SPEND_UPGRADE_ACID_LAB_ARMOR_(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPEND_UPGRADE_ACID_LAB_SCOOP_( int p0, bool p1, bool p2, int p3 )
	{
		MONEY::NETWORK_SPEND_UPGRADE_ACID_LAB_SCOOP_(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPEND_UPGRADE_ACID_LAB_MINES_( int p0, bool p1, bool p2, int p3 )
	{
		MONEY::NETWORK_SPEND_UPGRADE_ACID_LAB_MINES_(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPEND_RENAME_ACID_LAB_( Any p0, Any p1, Any p2, Any p3 )
	{
		MONEY::NETWORK_SPEND_RENAME_ACID_LAB_(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPEND_RENAME_ACID_PRODUCT_( Any p0, Any p1, Any p2, Any p3 )
	{
		MONEY::NETWORK_SPEND_RENAME_ACID_PRODUCT_(p0, p1, p2, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_AWARD_JUGGALO_MISSION_( Any p0, Any p1 )
	{
		MONEY::NETWORK_EARN_AWARD_JUGGALO_MISSION_(p0, p1);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_AWARD_ACID_LAB_( Any p0, Any p1 )
	{
		MONEY::NETWORK_EARN_AWARD_ACID_LAB_(p0, p1);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_AWARD_DAILY_STASH_( Any p0, Any p1 )
	{
		MONEY::NETWORK_EARN_AWARD_DAILY_STASH_(p0, p1);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_AWARD_DEAD_DROP_( Any p0, Any p1 )
	{
		MONEY::NETWORK_EARN_AWARD_DEAD_DROP_(p0, p1);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_AWARD_RANDOM_EVENT_( Any p0, Any p1 )
	{
		MONEY::NETWORK_EARN_AWARD_RANDOM_EVENT_(p0, p1);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_AWARD_TAXI_( Any p0, Any p1 )
	{
		MONEY::NETWORK_EARN_AWARD_TAXI_(p0, p1);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_STREET_DEALER_( Any p0, Any p1 )
	{
		MONEY::NETWORK_EARN_STREET_DEALER_(p0, p1);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_SELL_ACID_( Any p0, Any p1 )
	{
		MONEY::NETWORK_EARN_SELL_ACID_(p0, p1);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_SETUP_PARTICIPATION_ACID_LAB_( Any p0, Any p1 )
	{
		MONEY::NETWORK_EARN_SETUP_PARTICIPATION_ACID_LAB_(p0, p1);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_SOURCE_PARTICIPATION_ACID_LAB_( Any p0, Any p1 )
	{
		MONEY::NETWORK_EARN_SOURCE_PARTICIPATION_ACID_LAB_(p0, p1);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_SELL_PARTICIPATION_ACID_LAB_( Any p0, Any p1 )
	{
		MONEY::NETWORK_EARN_SELL_PARTICIPATION_ACID_LAB_(p0, p1);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_JUGGALO_STORY_MISSION_( Any p0, Any p1 )
	{
		MONEY::NETWORK_EARN_JUGGALO_STORY_MISSION_(p0, p1);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_JUGGALO_STORY_MISSION_PARTICIPATION_( Any p0, Any p1 )
	{
		MONEY::NETWORK_EARN_JUGGALO_STORY_MISSION_PARTICIPATION_(p0, p1);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_FOOLIGAN_JOB_( Any p0, Any p1 )
	{
		MONEY::NETWORK_EARN_FOOLIGAN_JOB_(p0, p1);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_FOOLIGAN_JOB_PARTICIPATION_( Any p0, Any p1 )
	{
		MONEY::NETWORK_EARN_FOOLIGAN_JOB_PARTICIPATION_(p0, p1);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_TAXI_JOB_( Any p0, Any p1 )
	{
		MONEY::NETWORK_EARN_TAXI_JOB_(p0, p1);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_DAILY_STASH_HOUSE_COMPLETED_( Any p0, Any p1 )
	{
		MONEY::NETWORK_EARN_DAILY_STASH_HOUSE_COMPLETED_(p0, p1);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_DAILY_STASH_HOUSE_PARTICIPATION_( Any p0, Any p1 )
	{
		MONEY::NETWORK_EARN_DAILY_STASH_HOUSE_PARTICIPATION_(p0, p1);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_AVENGER_( int amount, int p1 )
	{
		MONEY::NETWORK_EARN_AVENGER_(amount, p1);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_SMUGGLER_OPS_( Any p0, Any p1, Any p2 )
	{
		MONEY::NETWORK_EARN_SMUGGLER_OPS_(p0, p1, p2);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_BONUS_OBJECTIVE_( int amount, Any p1, Any p2 )
	{
		MONEY::NETWORK_EARN_BONUS_OBJECTIVE_(amount, p1, p2);
	}

	void LUA_NATIVE_MONEY_NETWORK_EARN_PROGRESS_HUB_( Any p0, Any p1 )
	{
		MONEY::NETWORK_EARN_PROGRESS_HUB_(p0, p1);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_AIR_FREIGHT_( int hangarCargoSourcingPrice, bool fromBank, bool fromBankAndWallet, int cost, int warehouseId, int warehouseSlot )
	{
		MONEY::NETWORK_SPENT_AIR_FREIGHT_(hangarCargoSourcingPrice, fromBank, fromBankAndWallet, cost, warehouseId, warehouseSlot);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_SKIP_CARGO_SOURCE_SETUP_( int amount, bool fromBank, bool fromBankAndWallet, int cost )
	{
		MONEY::NETWORK_SPENT_SKIP_CARGO_SOURCE_SETUP_(amount, fromBank, fromBankAndWallet, cost);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_STEALTH_MODULE_( int amount, bool fromBank, bool fromBankAndWallet, Hash p3 )
	{
		MONEY::NETWORK_SPENT_STEALTH_MODULE_(amount, fromBank, fromBankAndWallet, p3);
	}

	void LUA_NATIVE_MONEY_NETWORK_SPENT_MISSILE_JAMMER_( int amount, bool fromBank, bool fromBankAndWallet, Hash p3 )
	{
		MONEY::NETWORK_SPENT_MISSILE_JAMMER_(amount, fromBank, fromBankAndWallet, p3);
	}

	int LUA_NATIVE_MONEY_NETWORK_GET_VC_BANK_BALANCE(  )
	{
		auto retval = MONEY::NETWORK_GET_VC_BANK_BALANCE();
		return retval;
	}

	int LUA_NATIVE_MONEY_NETWORK_GET_VC_WALLET_BALANCE( int characterSlot )
	{
		auto retval = MONEY::NETWORK_GET_VC_WALLET_BALANCE(characterSlot);
		return retval;
	}

	int LUA_NATIVE_MONEY_NETWORK_GET_VC_BALANCE(  )
	{
		auto retval = MONEY::NETWORK_GET_VC_BALANCE();
		return retval;
	}

	int LUA_NATIVE_MONEY_NETWORK_GET_EVC_BALANCE(  )
	{
		auto retval = MONEY::NETWORK_GET_EVC_BALANCE();
		return retval;
	}

	int LUA_NATIVE_MONEY_NETWORK_GET_PVC_BALANCE(  )
	{
		auto retval = MONEY::NETWORK_GET_PVC_BALANCE();
		return retval;
	}

	const char* LUA_NATIVE_MONEY_NETWORK_GET_STRING_WALLET_BALANCE( int characterSlot )
	{
		auto retval = MONEY::NETWORK_GET_STRING_WALLET_BALANCE(characterSlot);
		return retval;
	}

	const char* LUA_NATIVE_MONEY_NETWORK_GET_STRING_BANK_BALANCE(  )
	{
		auto retval = MONEY::NETWORK_GET_STRING_BANK_BALANCE();
		return retval;
	}

	const char* LUA_NATIVE_MONEY_NETWORK_GET_STRING_BANK_WALLET_BALANCE( int character )
	{
		auto retval = MONEY::NETWORK_GET_STRING_BANK_WALLET_BALANCE(character);
		return retval;
	}

	bool LUA_NATIVE_MONEY_NETWORK_GET_CAN_SPEND_FROM_WALLET( int amount, int characterSlot )
	{
		auto retval = (bool)MONEY::NETWORK_GET_CAN_SPEND_FROM_WALLET(amount, characterSlot);
		return retval;
	}

	bool LUA_NATIVE_MONEY_NETWORK_GET_CAN_SPEND_FROM_BANK( int amount )
	{
		auto retval = (bool)MONEY::NETWORK_GET_CAN_SPEND_FROM_BANK(amount);
		return retval;
	}

	bool LUA_NATIVE_MONEY_NETWORK_GET_CAN_SPEND_FROM_BANK_AND_WALLET( int amount, int characterSlot )
	{
		auto retval = (bool)MONEY::NETWORK_GET_CAN_SPEND_FROM_BANK_AND_WALLET(amount, characterSlot);
		return retval;
	}

	int LUA_NATIVE_MONEY_NETWORK_GET_PVC_TRANSFER_BALANCE(  )
	{
		auto retval = MONEY::NETWORK_GET_PVC_TRANSFER_BALANCE();
		return retval;
	}

	bool LUA_NATIVE_MONEY_NETWORK_GET_CAN_TRANSFER_CASH( int amount )
	{
		auto retval = (bool)MONEY::NETWORK_GET_CAN_TRANSFER_CASH(amount);
		return retval;
	}

	bool LUA_NATIVE_MONEY_NETWORK_CAN_RECEIVE_PLAYER_CASH( Any p0, Any p1, Any p2, Any p3 )
	{
		auto retval = (bool)MONEY::NETWORK_CAN_RECEIVE_PLAYER_CASH(p0, p1, p2, p3);
		return retval;
	}

	int LUA_NATIVE_MONEY_NETWORK_GET_REMAINING_TRANSFER_BALANCE(  )
	{
		auto retval = MONEY::NETWORK_GET_REMAINING_TRANSFER_BALANCE();
		return retval;
	}

	int LUA_NATIVE_MONEY_WITHDRAW_VC( int amount )
	{
		auto retval = MONEY::WITHDRAW_VC(amount);
		return retval;
	}

	bool LUA_NATIVE_MONEY_DEPOSIT_VC( int amount )
	{
		auto retval = (bool)MONEY::DEPOSIT_VC(amount);
		return retval;
	}

	bool LUA_NATIVE_MONEY_HAS_VC_WITHDRAWAL_COMPLETED( Any p0 )
	{
		auto retval = (bool)MONEY::HAS_VC_WITHDRAWAL_COMPLETED(p0);
		return retval;
	}

	bool LUA_NATIVE_MONEY_WAS_VC_WITHDRAWAL_SUCCESSFUL( Any p0 )
	{
		auto retval = (bool)MONEY::WAS_VC_WITHDRAWAL_SUCCESSFUL(p0);
		return retval;
	}

	bool LUA_NATIVE_NETSHOPPING_NET_GAMESERVER_USE_SERVER_TRANSACTIONS(  )
	{
		auto retval = (bool)NETSHOPPING::NET_GAMESERVER_USE_SERVER_TRANSACTIONS();
		return retval;
	}

	bool LUA_NATIVE_NETSHOPPING_NET_GAMESERVER_CATALOG_ITEM_IS_VALID( const char* name )
	{
		auto retval = (bool)NETSHOPPING::NET_GAMESERVER_CATALOG_ITEM_IS_VALID(name);
		return retval;
	}

	bool LUA_NATIVE_NETSHOPPING_NET_GAMESERVER_CATALOG_ITEM_KEY_IS_VALID( Hash hash )
	{
		auto retval = (bool)NETSHOPPING::NET_GAMESERVER_CATALOG_ITEM_KEY_IS_VALID(hash);
		return retval;
	}

	int LUA_NATIVE_NETSHOPPING_NET_GAMESERVER_GET_PRICE( Hash itemHash, Hash categoryHash, bool p2 )
	{
		auto retval = NETSHOPPING::NET_GAMESERVER_GET_PRICE(itemHash, categoryHash, p2);
		return retval;
	}

	bool LUA_NATIVE_NETSHOPPING_NET_GAMESERVER_CATALOG_IS_VALID(  )
	{
		auto retval = (bool)NETSHOPPING::NET_GAMESERVER_CATALOG_IS_VALID();
		return retval;
	}

	bool LUA_NATIVE_NETSHOPPING_NET_GAMESERVER_IS_CATALOG_CURRENT(  )
	{
		auto retval = (bool)NETSHOPPING::NET_GAMESERVER_IS_CATALOG_CURRENT();
		return retval;
	}

	Hash LUA_NATIVE_NETSHOPPING_NET_GAMESERVER_GET_CATALOG_CLOUD_CRC(  )
	{
		auto retval = NETSHOPPING::NET_GAMESERVER_GET_CATALOG_CLOUD_CRC();
		return retval;
	}

	bool LUA_NATIVE_NETSHOPPING_NET_GAMESERVER_REFRESH_SERVER_CATALOG(  )
	{
		auto retval = (bool)NETSHOPPING::NET_GAMESERVER_REFRESH_SERVER_CATALOG();
		return retval;
	}

	std::tuple<bool, int> LUA_NATIVE_NETSHOPPING_NET_GAMESERVER_RETRIEVE_CATALOG_REFRESH_STATUS( int state )
	{
		std::tuple<bool, int> return_values;
		std::get<0>(return_values) = (bool)NETSHOPPING::NET_GAMESERVER_RETRIEVE_CATALOG_REFRESH_STATUS(&state);
		std::get<1>(return_values) = state;

		return return_values;
	}

	bool LUA_NATIVE_NETSHOPPING_NET_GAMESERVER_INIT_SESSION(  )
	{
		auto retval = (bool)NETSHOPPING::NET_GAMESERVER_INIT_SESSION();
		return retval;
	}

	std::tuple<bool, int> LUA_NATIVE_NETSHOPPING_NET_GAMESERVER_RETRIEVE_INIT_SESSION_STATUS( int p0 )
	{
		std::tuple<bool, int> return_values;
		std::get<0>(return_values) = (bool)NETSHOPPING::NET_GAMESERVER_RETRIEVE_INIT_SESSION_STATUS(&p0);
		std::get<1>(return_values) = p0;

		return return_values;
	}

	bool LUA_NATIVE_NETSHOPPING_NET_GAMESERVER_START_SESSION( int charSlot )
	{
		auto retval = (bool)NETSHOPPING::NET_GAMESERVER_START_SESSION(charSlot);
		return retval;
	}

	bool LUA_NATIVE_NETSHOPPING_NET_GAMESERVER_START_SESSION_PENDING(  )
	{
		auto retval = (bool)NETSHOPPING::NET_GAMESERVER_START_SESSION_PENDING();
		return retval;
	}

	std::tuple<bool, int> LUA_NATIVE_NETSHOPPING_NET_GAMESERVER_RETRIEVE_START_SESSION_STATUS( int p0 )
	{
		std::tuple<bool, int> return_values;
		std::get<0>(return_values) = (bool)NETSHOPPING::NET_GAMESERVER_RETRIEVE_START_SESSION_STATUS(&p0);
		std::get<1>(return_values) = p0;

		return return_values;
	}

	std::tuple<bool, int> LUA_NATIVE_NETSHOPPING_NET_GAMESERVER_RETRIEVE_SESSION_ERROR_CODE( int p0 )
	{
		std::tuple<bool, int> return_values;
		std::get<0>(return_values) = (bool)NETSHOPPING::NET_GAMESERVER_RETRIEVE_SESSION_ERROR_CODE(&p0);
		std::get<1>(return_values) = p0;

		return return_values;
	}

	bool LUA_NATIVE_NETSHOPPING_NET_GAMESERVER_IS_SESSION_VALID( int charSlot )
	{
		auto retval = (bool)NETSHOPPING::NET_GAMESERVER_IS_SESSION_VALID(charSlot);
		return retval;
	}

	bool LUA_NATIVE_NETSHOPPING_NET_GAMESERVER_CLEAR_SESSION( int p0 )
	{
		auto retval = (bool)NETSHOPPING::NET_GAMESERVER_CLEAR_SESSION(p0);
		return retval;
	}

	bool LUA_NATIVE_NETSHOPPING_NET_GAMESERVER_SESSION_APPLY_RECEIVED_DATA( int charSlot )
	{
		auto retval = (bool)NETSHOPPING::NET_GAMESERVER_SESSION_APPLY_RECEIVED_DATA(charSlot);
		return retval;
	}

	bool LUA_NATIVE_NETSHOPPING_NET_GAMESERVER_IS_SESSION_REFRESH_PENDING(  )
	{
		auto retval = (bool)NETSHOPPING::NET_GAMESERVER_IS_SESSION_REFRESH_PENDING();
		return retval;
	}

	bool LUA_NATIVE_NETSHOPPING_NET_GAMESERVER_START_SESSION_RESTART( bool inventory, bool playerbalance )
	{
		auto retval = (bool)NETSHOPPING::NET_GAMESERVER_START_SESSION_RESTART(inventory, playerbalance);
		return retval;
	}

	bool LUA_NATIVE_NETSHOPPING_NET_GAMESERVER_TRANSACTION_IN_PROGRESS(  )
	{
		auto retval = (bool)NETSHOPPING::NET_GAMESERVER_TRANSACTION_IN_PROGRESS();
		return retval;
	}

	std::tuple<bool, int, bool> LUA_NATIVE_NETSHOPPING_NET_GAMESERVER_GET_SESSION_STATE_AND_STATUS( int p0, bool p1 )
	{
		std::tuple<bool, int, bool> return_values;
		std::get<0>(return_values) = (bool)NETSHOPPING::NET_GAMESERVER_GET_SESSION_STATE_AND_STATUS(&p0, (BOOL*)&p1);
		std::get<1>(return_values) = p0;
		std::get<2>(return_values) = p1;

		return return_values;
	}

	std::tuple<bool, int> LUA_NATIVE_NETSHOPPING_NET_GAMESERVER_BASKET_START( int transactionId, Hash categoryHash, Hash actionHash, int flags )
	{
		std::tuple<bool, int> return_values;
		std::get<0>(return_values) = (bool)NETSHOPPING::NET_GAMESERVER_BASKET_START(&transactionId, categoryHash, actionHash, flags);
		std::get<1>(return_values) = transactionId;

		return return_values;
	}

	bool LUA_NATIVE_NETSHOPPING_NET_GAMESERVER_BASKET_END(  )
	{
		auto retval = (bool)NETSHOPPING::NET_GAMESERVER_BASKET_END();
		return retval;
	}

	bool LUA_NATIVE_NETSHOPPING_NET_GAMESERVER_BASKET_IS_ACTIVE(  )
	{
		auto retval = (bool)NETSHOPPING::NET_GAMESERVER_BASKET_IS_ACTIVE();
		return retval;
	}

	std::tuple<bool, Any> LUA_NATIVE_NETSHOPPING_NET_GAMESERVER_BASKET_ADD_ITEM( Any itemData, int quantity )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)NETSHOPPING::NET_GAMESERVER_BASKET_ADD_ITEM(&itemData, quantity);
		std::get<1>(return_values) = itemData;

		return return_values;
	}

	bool LUA_NATIVE_NETSHOPPING_NET_GAMESERVER_BASKET_IS_FULL(  )
	{
		auto retval = (bool)NETSHOPPING::NET_GAMESERVER_BASKET_IS_FULL();
		return retval;
	}

	std::tuple<bool, Any> LUA_NATIVE_NETSHOPPING_NET_GAMESERVER_BASKET_APPLY_SERVER_DATA( Any p0, Any p1 )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)NETSHOPPING::NET_GAMESERVER_BASKET_APPLY_SERVER_DATA(p0, &p1);
		std::get<1>(return_values) = p1;

		return return_values;
	}

	bool LUA_NATIVE_NETSHOPPING_NET_GAMESERVER_CHECKOUT_START( int transactionId )
	{
		auto retval = (bool)NETSHOPPING::NET_GAMESERVER_CHECKOUT_START(transactionId);
		return retval;
	}

	std::tuple<bool, int> LUA_NATIVE_NETSHOPPING_NET_GAMESERVER_BEGIN_SERVICE( int transactionId, Hash categoryHash, Hash itemHash, Hash actionTypeHash, int value, int flags )
	{
		std::tuple<bool, int> return_values;
		std::get<0>(return_values) = (bool)NETSHOPPING::NET_GAMESERVER_BEGIN_SERVICE(&transactionId, categoryHash, itemHash, actionTypeHash, value, flags);
		std::get<1>(return_values) = transactionId;

		return return_values;
	}

	bool LUA_NATIVE_NETSHOPPING_NET_GAMESERVER_END_SERVICE( int transactionId )
	{
		auto retval = (bool)NETSHOPPING::NET_GAMESERVER_END_SERVICE(transactionId);
		return retval;
	}

	bool LUA_NATIVE_NETSHOPPING_NET_GAMESERVER_DELETE_CHARACTER( int slot, bool transfer, Hash reason )
	{
		auto retval = (bool)NETSHOPPING::NET_GAMESERVER_DELETE_CHARACTER(slot, transfer, reason);
		return retval;
	}

	int LUA_NATIVE_NETSHOPPING_NET_GAMESERVER_DELETE_CHARACTER_GET_STATUS(  )
	{
		auto retval = NETSHOPPING::NET_GAMESERVER_DELETE_CHARACTER_GET_STATUS();
		return retval;
	}

	bool LUA_NATIVE_NETSHOPPING_NET_GAMESERVER_DELETE_SET_TELEMETRY_NONCE_SEED(  )
	{
		auto retval = (bool)NETSHOPPING::NET_GAMESERVER_DELETE_SET_TELEMETRY_NONCE_SEED();
		return retval;
	}

	bool LUA_NATIVE_NETSHOPPING_NET_GAMESERVER_TRANSFER_BANK_TO_WALLET( int charSlot, int amount )
	{
		auto retval = (bool)NETSHOPPING::NET_GAMESERVER_TRANSFER_BANK_TO_WALLET(charSlot, amount);
		return retval;
	}

	bool LUA_NATIVE_NETSHOPPING_NET_GAMESERVER_TRANSFER_WALLET_TO_BANK( int charSlot, int amount )
	{
		auto retval = (bool)NETSHOPPING::NET_GAMESERVER_TRANSFER_WALLET_TO_BANK(charSlot, amount);
		return retval;
	}

	int LUA_NATIVE_NETSHOPPING_NET_GAMESERVER_TRANSFER_BANK_TO_WALLET_GET_STATUS(  )
	{
		auto retval = NETSHOPPING::NET_GAMESERVER_TRANSFER_BANK_TO_WALLET_GET_STATUS();
		return retval;
	}

	int LUA_NATIVE_NETSHOPPING_NET_GAMESERVER_TRANSFER_WALLET_TO_BANK_GET_STATUS(  )
	{
		auto retval = NETSHOPPING::NET_GAMESERVER_TRANSFER_WALLET_TO_BANK_GET_STATUS();
		return retval;
	}

	bool LUA_NATIVE_NETSHOPPING_NET_GAMESERVER_TRANSFER_CASH_SET_TELEMETRY_NONCE_SEED(  )
	{
		auto retval = (bool)NETSHOPPING::NET_GAMESERVER_TRANSFER_CASH_SET_TELEMETRY_NONCE_SEED();
		return retval;
	}

	bool LUA_NATIVE_NETSHOPPING_NET_GAMESERVER_SET_TELEMETRY_NONCE_SEED( int p0 )
	{
		auto retval = (bool)NETSHOPPING::NET_GAMESERVER_SET_TELEMETRY_NONCE_SEED(p0);
		return retval;
	}

	const char* LUA_NATIVE_NETWORK_GET_ONLINE_VERSION(  )
	{
		auto retval = NETWORK::GET_ONLINE_VERSION();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_IS_SIGNED_IN(  )
	{
		auto retval = (bool)NETWORK::NETWORK_IS_SIGNED_IN();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_IS_SIGNED_ONLINE(  )
	{
		auto retval = (bool)NETWORK::NETWORK_IS_SIGNED_ONLINE();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_IS_NP_AVAILABLE(  )
	{
		auto retval = (bool)NETWORK::NETWORK_IS_NP_AVAILABLE();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_IS_NP_PENDING(  )
	{
		auto retval = (bool)NETWORK::NETWORK_IS_NP_PENDING();
		return retval;
	}

	int LUA_NATIVE_NETWORK_NETWORK_GET_NP_UNAVAILABLE_REASON(  )
	{
		auto retval = NETWORK::NETWORK_GET_NP_UNAVAILABLE_REASON();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_IS_CONNETED_TO_NP_PRESENCE(  )
	{
		auto retval = (bool)NETWORK::NETWORK_IS_CONNETED_TO_NP_PRESENCE();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_IS_LOGGED_IN_TO_PSN(  )
	{
		auto retval = (bool)NETWORK::NETWORK_IS_LOGGED_IN_TO_PSN();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_HAS_VALID_ROS_CREDENTIALS(  )
	{
		auto retval = (bool)NETWORK::NETWORK_HAS_VALID_ROS_CREDENTIALS();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_IS_REFRESHING_ROS_CREDENTIALS(  )
	{
		auto retval = (bool)NETWORK::NETWORK_IS_REFRESHING_ROS_CREDENTIALS();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_IS_CLOUD_AVAILABLE(  )
	{
		auto retval = (bool)NETWORK::NETWORK_IS_CLOUD_AVAILABLE();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_HAS_SOCIAL_CLUB_ACCOUNT(  )
	{
		auto retval = (bool)NETWORK::NETWORK_HAS_SOCIAL_CLUB_ACCOUNT();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_ARE_SOCIAL_CLUB_POLICIES_CURRENT(  )
	{
		auto retval = (bool)NETWORK::NETWORK_ARE_SOCIAL_CLUB_POLICIES_CURRENT();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_IS_HOST(  )
	{
		auto retval = (bool)NETWORK::NETWORK_IS_HOST();
		return retval;
	}

	Player LUA_NATIVE_NETWORK_NETWORK_GET_HOST_PLAYER_INDEX(  )
	{
		auto retval = NETWORK::NETWORK_GET_HOST_PLAYER_INDEX();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_WAS_GAME_SUSPENDED(  )
	{
		auto retval = (bool)NETWORK::NETWORK_WAS_GAME_SUSPENDED();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_HAVE_ONLINE_PRIVILEGES(  )
	{
		auto retval = (bool)NETWORK::NETWORK_HAVE_ONLINE_PRIVILEGES();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_HAS_AGE_RESTRICTIONS(  )
	{
		auto retval = (bool)NETWORK::NETWORK_HAS_AGE_RESTRICTIONS();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_HAVE_USER_CONTENT_PRIVILEGES( int p0 )
	{
		auto retval = (bool)NETWORK::NETWORK_HAVE_USER_CONTENT_PRIVILEGES(p0);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_HAVE_COMMUNICATION_PRIVILEGES( int p0, Player player )
	{
		auto retval = (bool)NETWORK::NETWORK_HAVE_COMMUNICATION_PRIVILEGES(p0, player);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_CHECK_ONLINE_PRIVILEGES( Any p0, bool p1 )
	{
		auto retval = (bool)NETWORK::NETWORK_CHECK_ONLINE_PRIVILEGES(p0, p1);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_CHECK_USER_CONTENT_PRIVILEGES( int p0, int p1, bool p2 )
	{
		auto retval = (bool)NETWORK::NETWORK_CHECK_USER_CONTENT_PRIVILEGES(p0, p1, p2);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_CHECK_COMMUNICATION_PRIVILEGES( int p0, int p1, bool p2 )
	{
		auto retval = (bool)NETWORK::NETWORK_CHECK_COMMUNICATION_PRIVILEGES(p0, p1, p2);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_CHECK_TEXT_COMMUNICATION_PRIVILEGES( Any p0, Any p1, Any p2 )
	{
		auto retval = (bool)NETWORK::NETWORK_CHECK_TEXT_COMMUNICATION_PRIVILEGES(p0, p1, p2);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_IS_USING_ONLINE_PROMOTION(  )
	{
		auto retval = (bool)NETWORK::NETWORK_IS_USING_ONLINE_PROMOTION();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_SHOULD_SHOW_PROMOTION_ALERT_SCREEN(  )
	{
		auto retval = (bool)NETWORK::NETWORK_SHOULD_SHOW_PROMOTION_ALERT_SCREEN();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_HAS_SOCIAL_NETWORKING_SHARING_PRIV(  )
	{
		auto retval = (bool)NETWORK::NETWORK_HAS_SOCIAL_NETWORKING_SHARING_PRIV();
		return retval;
	}

	int LUA_NATIVE_NETWORK_NETWORK_GET_AGE_GROUP(  )
	{
		auto retval = NETWORK::NETWORK_GET_AGE_GROUP();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_CHECK_PRIVILEGES( Any p0, Any p1, Any p2 )
	{
		auto retval = (bool)NETWORK::NETWORK_CHECK_PRIVILEGES(p0, p1, p2);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_IS_PRIVILEGE_CHECK_IN_PROGRESS(  )
	{
		auto retval = (bool)NETWORK::NETWORK_IS_PRIVILEGE_CHECK_IN_PROGRESS();
		return retval;
	}

	void LUA_NATIVE_NETWORK_NETWORK_SET_PRIVILEGE_CHECK_RESULT_NOT_NEEDED(  )
	{
		NETWORK::NETWORK_SET_PRIVILEGE_CHECK_RESULT_NOT_NEEDED();
	}

	bool LUA_NATIVE_NETWORK_NETWORK_RESOLVE_PRIVILEGE_USER_CONTENT(  )
	{
		auto retval = (bool)NETWORK::NETWORK_RESOLVE_PRIVILEGE_USER_CONTENT();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_HAVE_PLATFORM_SUBSCRIPTION(  )
	{
		auto retval = (bool)NETWORK::NETWORK_HAVE_PLATFORM_SUBSCRIPTION();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_IS_PLATFORM_SUBSCRIPTION_CHECK_PENDING(  )
	{
		auto retval = (bool)NETWORK::NETWORK_IS_PLATFORM_SUBSCRIPTION_CHECK_PENDING();
		return retval;
	}

	void LUA_NATIVE_NETWORK_NETWORK_SHOW_ACCOUNT_UPGRADE_UI(  )
	{
		NETWORK::NETWORK_SHOW_ACCOUNT_UPGRADE_UI();
	}

	bool LUA_NATIVE_NETWORK_NETWORK_IS_SHOWING_SYSTEM_UI_OR_RECENTLY_REQUESTED_UPSELL(  )
	{
		auto retval = (bool)NETWORK::NETWORK_IS_SHOWING_SYSTEM_UI_OR_RECENTLY_REQUESTED_UPSELL();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_NEED_TO_START_NEW_GAME_BUT_BLOCKED(  )
	{
		auto retval = (bool)NETWORK::NETWORK_NEED_TO_START_NEW_GAME_BUT_BLOCKED();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_CAN_BAIL(  )
	{
		auto retval = (bool)NETWORK::NETWORK_CAN_BAIL();
		return retval;
	}

	void LUA_NATIVE_NETWORK_NETWORK_BAIL( int p0, int p1, int p2 )
	{
		NETWORK::NETWORK_BAIL(p0, p1, p2);
	}

	void LUA_NATIVE_NETWORK_NETWORK_ON_RETURN_TO_SINGLE_PLAYER(  )
	{
		NETWORK::NETWORK_ON_RETURN_TO_SINGLE_PLAYER();
	}

	bool LUA_NATIVE_NETWORK_NETWORK_TRANSITION_START( int p0, Any p1, Any p2, Any p3 )
	{
		auto retval = (bool)NETWORK::NETWORK_TRANSITION_START(p0, p1, p2, p3);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_TRANSITION_ADD_STAGE( Hash hash, int p1, int p2, int state, int p4 )
	{
		auto retval = (bool)NETWORK::NETWORK_TRANSITION_ADD_STAGE(hash, p1, p2, state, p4);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_TRANSITION_FINISH( Any p0, Any p1, Any p2 )
	{
		auto retval = (bool)NETWORK::NETWORK_TRANSITION_FINISH(p0, p1, p2);
		return retval;
	}

	std::tuple<bool, int> LUA_NATIVE_NETWORK_NETWORK_CAN_ACCESS_MULTIPLAYER( int loadingState )
	{
		std::tuple<bool, int> return_values;
		std::get<0>(return_values) = (bool)NETWORK::NETWORK_CAN_ACCESS_MULTIPLAYER(&loadingState);
		std::get<1>(return_values) = loadingState;

		return return_values;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_IS_MULTIPLAYER_DISABLED(  )
	{
		auto retval = (bool)NETWORK::NETWORK_IS_MULTIPLAYER_DISABLED();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_CAN_ENTER_MULTIPLAYER(  )
	{
		auto retval = (bool)NETWORK::NETWORK_CAN_ENTER_MULTIPLAYER();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_SESSION_DO_FREEROAM_QUICKMATCH( Any p0, Any p1, Any p2, int maxPlayers )
	{
		auto retval = (bool)NETWORK::NETWORK_SESSION_DO_FREEROAM_QUICKMATCH(p0, p1, p2, maxPlayers);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_SESSION_DO_FRIEND_MATCHMAKING( int p0, int p1, int maxPlayers )
	{
		auto retval = (bool)NETWORK::NETWORK_SESSION_DO_FRIEND_MATCHMAKING(p0, p1, maxPlayers);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_SESSION_DO_CREW_MATCHMAKING( int crewId, int p1, int p2, int maxPlayers )
	{
		auto retval = (bool)NETWORK::NETWORK_SESSION_DO_CREW_MATCHMAKING(crewId, p1, p2, maxPlayers);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_SESSION_DO_ACTIVITY_QUICKMATCH( Any p0, Any p1, Any p2, Any p3, Any p4 )
	{
		auto retval = (bool)NETWORK::NETWORK_SESSION_DO_ACTIVITY_QUICKMATCH(p0, p1, p2, p3, p4);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_SESSION_HOST( int p0, int maxPlayers, bool p2 )
	{
		auto retval = (bool)NETWORK::NETWORK_SESSION_HOST(p0, maxPlayers, p2);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_SESSION_HOST_CLOSED( int p0, int maxPlayers )
	{
		auto retval = (bool)NETWORK::NETWORK_SESSION_HOST_CLOSED(p0, maxPlayers);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_SESSION_HOST_FRIENDS_ONLY( int p0, int maxPlayers )
	{
		auto retval = (bool)NETWORK::NETWORK_SESSION_HOST_FRIENDS_ONLY(p0, maxPlayers);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_SESSION_IS_CLOSED_FRIENDS(  )
	{
		auto retval = (bool)NETWORK::NETWORK_SESSION_IS_CLOSED_FRIENDS();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_SESSION_IS_CLOSED_CREW(  )
	{
		auto retval = (bool)NETWORK::NETWORK_SESSION_IS_CLOSED_CREW();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_SESSION_IS_SOLO(  )
	{
		auto retval = (bool)NETWORK::NETWORK_SESSION_IS_SOLO();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_SESSION_IS_PRIVATE(  )
	{
		auto retval = (bool)NETWORK::NETWORK_SESSION_IS_PRIVATE();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_SESSION_END( bool p0, bool p1 )
	{
		auto retval = (bool)NETWORK::NETWORK_SESSION_END(p0, p1);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_SESSION_LEAVE( Any p0 )
	{
		auto retval = (bool)NETWORK::NETWORK_SESSION_LEAVE(p0);
		return retval;
	}

	void LUA_NATIVE_NETWORK_NETWORK_SESSION_KICK_PLAYER( Player player )
	{
		NETWORK::NETWORK_SESSION_KICK_PLAYER(player);
	}

	bool LUA_NATIVE_NETWORK_NETWORK_SESSION_GET_KICK_VOTE( Player player )
	{
		auto retval = (bool)NETWORK::NETWORK_SESSION_GET_KICK_VOTE(player);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_SESSION_RESERVE_SLOTS_TRANSITION( Any p0, Any p1, Any p2 )
	{
		auto retval = (bool)NETWORK::NETWORK_SESSION_RESERVE_SLOTS_TRANSITION(p0, p1, p2);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_JOIN_PREVIOUSLY_FAILED_SESSION(  )
	{
		auto retval = (bool)NETWORK::NETWORK_JOIN_PREVIOUSLY_FAILED_SESSION();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_JOIN_PREVIOUSLY_FAILED_TRANSITION(  )
	{
		auto retval = (bool)NETWORK::NETWORK_JOIN_PREVIOUSLY_FAILED_TRANSITION();
		return retval;
	}

	void LUA_NATIVE_NETWORK_NETWORK_SESSION_SET_MATCHMAKING_GROUP( int matchmakingGroup )
	{
		NETWORK::NETWORK_SESSION_SET_MATCHMAKING_GROUP(matchmakingGroup);
	}

	void LUA_NATIVE_NETWORK_NETWORK_SESSION_SET_MATCHMAKING_GROUP_MAX( int playerType, int playerCount )
	{
		NETWORK::NETWORK_SESSION_SET_MATCHMAKING_GROUP_MAX(playerType, playerCount);
	}

	int LUA_NATIVE_NETWORK_NETWORK_SESSION_GET_MATCHMAKING_GROUP_FREE( int p0 )
	{
		auto retval = NETWORK::NETWORK_SESSION_GET_MATCHMAKING_GROUP_FREE(p0);
		return retval;
	}

	void LUA_NATIVE_NETWORK_NETWORK_SESSION_ADD_ACTIVE_MATCHMAKING_GROUP( int groupId )
	{
		NETWORK::NETWORK_SESSION_ADD_ACTIVE_MATCHMAKING_GROUP(groupId);
	}

	void LUA_NATIVE_NETWORK_NETWORK_SESSION_SET_UNIQUE_CREW_LIMIT( Any p0 )
	{
		NETWORK::NETWORK_SESSION_SET_UNIQUE_CREW_LIMIT(p0);
	}

	void LUA_NATIVE_NETWORK_NETWORK_SESSION_SET_UNIQUE_CREW_LIMIT_TRANSITION( Any p0 )
	{
		NETWORK::NETWORK_SESSION_SET_UNIQUE_CREW_LIMIT_TRANSITION(p0);
	}

	void LUA_NATIVE_NETWORK_NETWORK_SESSION_SET_UNIQUE_CREW_ONLY_CREWS_TRANSITION( bool p0 )
	{
		NETWORK::NETWORK_SESSION_SET_UNIQUE_CREW_ONLY_CREWS_TRANSITION(p0);
	}

	void LUA_NATIVE_NETWORK_NETWORK_SESSION_SET_CREW_LIMIT_MAX_MEMBERS_TRANSITION( Any p0 )
	{
		NETWORK::NETWORK_SESSION_SET_CREW_LIMIT_MAX_MEMBERS_TRANSITION(p0);
	}

	void LUA_NATIVE_NETWORK_NETWORK_SESSION_SET_MATCHMAKING_PROPERTY_ID( bool p0 )
	{
		NETWORK::NETWORK_SESSION_SET_MATCHMAKING_PROPERTY_ID(p0);
	}

	void LUA_NATIVE_NETWORK_NETWORK_SESSION_SET_MATCHMAKING_MENTAL_STATE( int p0 )
	{
		NETWORK::NETWORK_SESSION_SET_MATCHMAKING_MENTAL_STATE(p0);
	}

	void LUA_NATIVE_NETWORK_NETWORK_SESSION_SET_NUM_BOSSES( int num )
	{
		NETWORK::NETWORK_SESSION_SET_NUM_BOSSES(num);
	}

	void LUA_NATIVE_NETWORK_NETWORK_SESSION_SET_SCRIPT_VALIDATE_JOIN(  )
	{
		NETWORK::NETWORK_SESSION_SET_SCRIPT_VALIDATE_JOIN();
	}

	void LUA_NATIVE_NETWORK_NETWORK_SESSION_VALIDATE_JOIN( bool p0 )
	{
		NETWORK::NETWORK_SESSION_VALIDATE_JOIN(p0);
	}

	int LUA_NATIVE_NETWORK_NETWORK_ADD_FOLLOWERS( int p0, int p1 )
	{
		NETWORK::NETWORK_ADD_FOLLOWERS(&p0, p1);
		return p0;
	}

	void LUA_NATIVE_NETWORK_NETWORK_CLEAR_FOLLOWERS(  )
	{
		NETWORK::NETWORK_CLEAR_FOLLOWERS();
	}

	std::tuple<int, int, int> LUA_NATIVE_NETWORK_NETWORK_GET_GLOBAL_MULTIPLAYER_CLOCK( int hours, int minutes, int seconds )
	{
		std::tuple<int, int, int> return_values;
		NETWORK::NETWORK_GET_GLOBAL_MULTIPLAYER_CLOCK(&hours, &minutes, &seconds);
		std::get<0>(return_values) = hours;
		std::get<1>(return_values) = minutes;
		std::get<2>(return_values) = seconds;

		return return_values;
	}

	void LUA_NATIVE_NETWORK_NETWORK_SESSION_SET_GAMEMODE( Any p0 )
	{
		NETWORK::NETWORK_SESSION_SET_GAMEMODE(p0);
	}

	int LUA_NATIVE_NETWORK_NETWORK_SESSION_GET_HOST_AIM_PREFERENCE(  )
	{
		auto retval = NETWORK::NETWORK_SESSION_GET_HOST_AIM_PREFERENCE();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_FIND_GAMERS_IN_CREW( int crewId )
	{
		auto retval = (bool)NETWORK::NETWORK_FIND_GAMERS_IN_CREW(crewId);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_FIND_MATCHED_GAMERS( int attribute, float fallbackLimit, float lowerLimit, float upperLimit )
	{
		auto retval = (bool)NETWORK::NETWORK_FIND_MATCHED_GAMERS(attribute, fallbackLimit, lowerLimit, upperLimit);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_IS_FINDING_GAMERS(  )
	{
		auto retval = (bool)NETWORK::NETWORK_IS_FINDING_GAMERS();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_DID_FIND_GAMERS_SUCCEED(  )
	{
		auto retval = (bool)NETWORK::NETWORK_DID_FIND_GAMERS_SUCCEED();
		return retval;
	}

	int LUA_NATIVE_NETWORK_NETWORK_GET_NUM_FOUND_GAMERS(  )
	{
		auto retval = NETWORK::NETWORK_GET_NUM_FOUND_GAMERS();
		return retval;
	}

	std::tuple<bool, Any> LUA_NATIVE_NETWORK_NETWORK_GET_FOUND_GAMER( Any p0, Any p1 )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::NETWORK_GET_FOUND_GAMER(&p0, p1);
		std::get<1>(return_values) = p0;

		return return_values;
	}

	void LUA_NATIVE_NETWORK_NETWORK_CLEAR_FOUND_GAMERS(  )
	{
		NETWORK::NETWORK_CLEAR_FOUND_GAMERS();
	}

	std::tuple<bool, Any> LUA_NATIVE_NETWORK_NETWORK_QUEUE_GAMER_FOR_STATUS( Any p0 )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::NETWORK_QUEUE_GAMER_FOR_STATUS(&p0);
		std::get<1>(return_values) = p0;

		return return_values;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_GET_GAMER_STATUS_FROM_QUEUE(  )
	{
		auto retval = (bool)NETWORK::NETWORK_GET_GAMER_STATUS_FROM_QUEUE();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_IS_GETTING_GAMER_STATUS(  )
	{
		auto retval = (bool)NETWORK::NETWORK_IS_GETTING_GAMER_STATUS();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_DID_GET_GAMER_STATUS_SUCCEED(  )
	{
		auto retval = (bool)NETWORK::NETWORK_DID_GET_GAMER_STATUS_SUCCEED();
		return retval;
	}

	std::tuple<bool, Any> LUA_NATIVE_NETWORK_NETWORK_GET_GAMER_STATUS_RESULT( Any p0, Any p1 )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::NETWORK_GET_GAMER_STATUS_RESULT(&p0, p1);
		std::get<1>(return_values) = p0;

		return return_values;
	}

	void LUA_NATIVE_NETWORK_NETWORK_CLEAR_GET_GAMER_STATUS(  )
	{
		NETWORK::NETWORK_CLEAR_GET_GAMER_STATUS();
	}

	void LUA_NATIVE_NETWORK_NETWORK_SESSION_JOIN_INVITE(  )
	{
		NETWORK::NETWORK_SESSION_JOIN_INVITE();
	}

	void LUA_NATIVE_NETWORK_NETWORK_SESSION_CANCEL_INVITE(  )
	{
		NETWORK::NETWORK_SESSION_CANCEL_INVITE();
	}

	void LUA_NATIVE_NETWORK_NETWORK_SESSION_FORCE_CANCEL_INVITE(  )
	{
		NETWORK::NETWORK_SESSION_FORCE_CANCEL_INVITE();
	}

	bool LUA_NATIVE_NETWORK_NETWORK_HAS_PENDING_INVITE(  )
	{
		auto retval = (bool)NETWORK::NETWORK_HAS_PENDING_INVITE();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_HAS_CONFIRMED_INVITE(  )
	{
		auto retval = (bool)NETWORK::NETWORK_HAS_CONFIRMED_INVITE();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_REQUEST_INVITE_CONFIRMED_EVENT(  )
	{
		auto retval = (bool)NETWORK::NETWORK_REQUEST_INVITE_CONFIRMED_EVENT();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_SESSION_WAS_INVITED(  )
	{
		auto retval = (bool)NETWORK::NETWORK_SESSION_WAS_INVITED();
		return retval;
	}

	Any LUA_NATIVE_NETWORK_NETWORK_SESSION_GET_INVITER( Any gamerHandle )
	{
		NETWORK::NETWORK_SESSION_GET_INVITER(&gamerHandle);
		return gamerHandle;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_SESSION_IS_AWAITING_INVITE_RESPONSE(  )
	{
		auto retval = (bool)NETWORK::NETWORK_SESSION_IS_AWAITING_INVITE_RESPONSE();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_SESSION_IS_DISPLAYING_INVITE_CONFIRMATION(  )
	{
		auto retval = (bool)NETWORK::NETWORK_SESSION_IS_DISPLAYING_INVITE_CONFIRMATION();
		return retval;
	}

	void LUA_NATIVE_NETWORK_NETWORK_SUPPRESS_INVITE( bool toggle )
	{
		NETWORK::NETWORK_SUPPRESS_INVITE(toggle);
	}

	void LUA_NATIVE_NETWORK_NETWORK_BLOCK_INVITES( bool toggle )
	{
		NETWORK::NETWORK_BLOCK_INVITES(toggle);
	}

	void LUA_NATIVE_NETWORK_NETWORK_BLOCK_JOIN_QUEUE_INVITES( bool toggle )
	{
		NETWORK::NETWORK_BLOCK_JOIN_QUEUE_INVITES(toggle);
	}

	void LUA_NATIVE_NETWORK_NETWORK_SET_CAN_RECEIVE_RS_INVITES( bool p0 )
	{
		NETWORK::NETWORK_SET_CAN_RECEIVE_RS_INVITES(p0);
	}

	void LUA_NATIVE_NETWORK_NETWORK_STORE_INVITE_THROUGH_RESTART(  )
	{
		NETWORK::NETWORK_STORE_INVITE_THROUGH_RESTART();
	}

	void LUA_NATIVE_NETWORK_NETWORK_ALLOW_INVITE_PROCESS_IN_PLAYER_SWITCH( bool p0 )
	{
		NETWORK::NETWORK_ALLOW_INVITE_PROCESS_IN_PLAYER_SWITCH(p0);
	}

	void LUA_NATIVE_NETWORK_NETWORK_SET_SCRIPT_READY_FOR_EVENTS( bool toggle )
	{
		NETWORK::NETWORK_SET_SCRIPT_READY_FOR_EVENTS(toggle);
	}

	bool LUA_NATIVE_NETWORK_NETWORK_IS_OFFLINE_INVITE_PENDING(  )
	{
		auto retval = (bool)NETWORK::NETWORK_IS_OFFLINE_INVITE_PENDING();
		return retval;
	}

	void LUA_NATIVE_NETWORK_NETWORK_CLEAR_OFFLINE_INVITE_PENDING(  )
	{
		NETWORK::NETWORK_CLEAR_OFFLINE_INVITE_PENDING();
	}

	void LUA_NATIVE_NETWORK_NETWORK_SESSION_HOST_SINGLE_PLAYER( int p0 )
	{
		NETWORK::NETWORK_SESSION_HOST_SINGLE_PLAYER(p0);
	}

	void LUA_NATIVE_NETWORK_NETWORK_SESSION_LEAVE_SINGLE_PLAYER(  )
	{
		NETWORK::NETWORK_SESSION_LEAVE_SINGLE_PLAYER();
	}

	bool LUA_NATIVE_NETWORK_NETWORK_IS_GAME_IN_PROGRESS(  )
	{
		auto retval = (bool)NETWORK::NETWORK_IS_GAME_IN_PROGRESS();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_IS_SESSION_ACTIVE(  )
	{
		auto retval = (bool)NETWORK::NETWORK_IS_SESSION_ACTIVE();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_IS_IN_SESSION(  )
	{
		auto retval = (bool)NETWORK::NETWORK_IS_IN_SESSION();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_IS_SESSION_STARTED(  )
	{
		auto retval = (bool)NETWORK::NETWORK_IS_SESSION_STARTED();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_IS_SESSION_BUSY(  )
	{
		auto retval = (bool)NETWORK::NETWORK_IS_SESSION_BUSY();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_CAN_SESSION_END(  )
	{
		auto retval = (bool)NETWORK::NETWORK_CAN_SESSION_END();
		return retval;
	}

	int LUA_NATIVE_NETWORK_NETWORK_GET_GAME_MODE(  )
	{
		auto retval = NETWORK::NETWORK_GET_GAME_MODE();
		return retval;
	}

	void LUA_NATIVE_NETWORK_NETWORK_SESSION_MARK_VISIBLE( bool toggle )
	{
		NETWORK::NETWORK_SESSION_MARK_VISIBLE(toggle);
	}

	bool LUA_NATIVE_NETWORK_NETWORK_SESSION_IS_VISIBLE(  )
	{
		auto retval = (bool)NETWORK::NETWORK_SESSION_IS_VISIBLE();
		return retval;
	}

	void LUA_NATIVE_NETWORK_NETWORK_SESSION_BLOCK_JOIN_REQUESTS( bool toggle )
	{
		NETWORK::NETWORK_SESSION_BLOCK_JOIN_REQUESTS(toggle);
	}

	void LUA_NATIVE_NETWORK_NETWORK_SESSION_CHANGE_SLOTS( int slots, bool p1 )
	{
		NETWORK::NETWORK_SESSION_CHANGE_SLOTS(slots, p1);
	}

	int LUA_NATIVE_NETWORK_NETWORK_SESSION_GET_PRIVATE_SLOTS(  )
	{
		auto retval = NETWORK::NETWORK_SESSION_GET_PRIVATE_SLOTS();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_SESSION_VOICE_HOST(  )
	{
		auto retval = (bool)NETWORK::NETWORK_SESSION_VOICE_HOST();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_SESSION_VOICE_LEAVE(  )
	{
		auto retval = (bool)NETWORK::NETWORK_SESSION_VOICE_LEAVE();
		return retval;
	}

	Any LUA_NATIVE_NETWORK_NETWORK_SESSION_VOICE_CONNECT_TO_PLAYER( Any gamerHandle )
	{
		NETWORK::NETWORK_SESSION_VOICE_CONNECT_TO_PLAYER(&gamerHandle);
		return gamerHandle;
	}

	void LUA_NATIVE_NETWORK_NETWORK_SESSION_VOICE_RESPOND_TO_REQUEST( bool p0, int p1 )
	{
		NETWORK::NETWORK_SESSION_VOICE_RESPOND_TO_REQUEST(p0, p1);
	}

	void LUA_NATIVE_NETWORK_NETWORK_SESSION_VOICE_SET_TIMEOUT( int timeout )
	{
		NETWORK::NETWORK_SESSION_VOICE_SET_TIMEOUT(timeout);
	}

	bool LUA_NATIVE_NETWORK_NETWORK_SESSION_IS_IN_VOICE_SESSION(  )
	{
		auto retval = (bool)NETWORK::NETWORK_SESSION_IS_IN_VOICE_SESSION();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_SESSION_IS_VOICE_SESSION_ACTIVE(  )
	{
		auto retval = (bool)NETWORK::NETWORK_SESSION_IS_VOICE_SESSION_ACTIVE();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_SESSION_IS_VOICE_SESSION_BUSY(  )
	{
		auto retval = (bool)NETWORK::NETWORK_SESSION_IS_VOICE_SESSION_BUSY();
		return retval;
	}

	std::tuple<bool, Any> LUA_NATIVE_NETWORK_NETWORK_SEND_TEXT_MESSAGE( const char* message, Any gamerHandle )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::NETWORK_SEND_TEXT_MESSAGE(message, &gamerHandle);
		std::get<1>(return_values) = gamerHandle;

		return return_values;
	}

	void LUA_NATIVE_NETWORK_NETWORK_SET_ACTIVITY_SPECTATOR( bool toggle )
	{
		NETWORK::NETWORK_SET_ACTIVITY_SPECTATOR(toggle);
	}

	bool LUA_NATIVE_NETWORK_NETWORK_IS_ACTIVITY_SPECTATOR(  )
	{
		auto retval = (bool)NETWORK::NETWORK_IS_ACTIVITY_SPECTATOR();
		return retval;
	}

	void LUA_NATIVE_NETWORK_NETWORK_SET_ACTIVITY_PLAYER_MAX( Any p0 )
	{
		NETWORK::NETWORK_SET_ACTIVITY_PLAYER_MAX(p0);
	}

	void LUA_NATIVE_NETWORK_NETWORK_SET_ACTIVITY_SPECTATOR_MAX( int maxSpectators )
	{
		NETWORK::NETWORK_SET_ACTIVITY_SPECTATOR_MAX(maxSpectators);
	}

	int LUA_NATIVE_NETWORK_NETWORK_GET_ACTIVITY_PLAYER_NUM( bool p0 )
	{
		auto retval = NETWORK::NETWORK_GET_ACTIVITY_PLAYER_NUM(p0);
		return retval;
	}

	std::tuple<bool, Any> LUA_NATIVE_NETWORK_NETWORK_IS_ACTIVITY_SPECTATOR_FROM_HANDLE( Any gamerHandle )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::NETWORK_IS_ACTIVITY_SPECTATOR_FROM_HANDLE(&gamerHandle);
		std::get<1>(return_values) = gamerHandle;

		return return_values;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_HOST_TRANSITION( int p0, int p1, int p2, int p3, Any p4, bool p5, bool p6, int p7, Any p8, int p9 )
	{
		auto retval = (bool)NETWORK::NETWORK_HOST_TRANSITION(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_DO_TRANSITION_QUICKMATCH( Any p0, Any p1, Any p2, Any p3, Any p4, Any p5 )
	{
		auto retval = (bool)NETWORK::NETWORK_DO_TRANSITION_QUICKMATCH(p0, p1, p2, p3, p4, p5);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_DO_TRANSITION_QUICKMATCH_ASYNC( Any p0, Any p1, Any p2, Any p3, Any p4, Any p5 )
	{
		auto retval = (bool)NETWORK::NETWORK_DO_TRANSITION_QUICKMATCH_ASYNC(p0, p1, p2, p3, p4, p5);
		return retval;
	}

	std::tuple<bool, Any> LUA_NATIVE_NETWORK_NETWORK_DO_TRANSITION_QUICKMATCH_WITH_GROUP( Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7 )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::NETWORK_DO_TRANSITION_QUICKMATCH_WITH_GROUP(p0, p1, p2, p3, &p4, p5, p6, p7);
		std::get<1>(return_values) = p4;

		return return_values;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_JOIN_GROUP_ACTIVITY(  )
	{
		auto retval = (bool)NETWORK::NETWORK_JOIN_GROUP_ACTIVITY();
		return retval;
	}

	void LUA_NATIVE_NETWORK_NETWORK_CLEAR_GROUP_ACTIVITY(  )
	{
		NETWORK::NETWORK_CLEAR_GROUP_ACTIVITY();
	}

	void LUA_NATIVE_NETWORK_NETWORK_RETAIN_ACTIVITY_GROUP(  )
	{
		NETWORK::NETWORK_RETAIN_ACTIVITY_GROUP();
	}

	bool LUA_NATIVE_NETWORK_NETWORK_IS_TRANSITION_CLOSED_FRIENDS(  )
	{
		auto retval = (bool)NETWORK::NETWORK_IS_TRANSITION_CLOSED_FRIENDS();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_IS_TRANSITION_CLOSED_CREW(  )
	{
		auto retval = (bool)NETWORK::NETWORK_IS_TRANSITION_CLOSED_CREW();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_IS_TRANSITION_SOLO(  )
	{
		auto retval = (bool)NETWORK::NETWORK_IS_TRANSITION_SOLO();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_IS_TRANSITION_PRIVATE(  )
	{
		auto retval = (bool)NETWORK::NETWORK_IS_TRANSITION_PRIVATE();
		return retval;
	}

	int LUA_NATIVE_NETWORK_NETWORK_GET_NUM_TRANSITION_NON_ASYNC_GAMERS(  )
	{
		auto retval = NETWORK::NETWORK_GET_NUM_TRANSITION_NON_ASYNC_GAMERS();
		return retval;
	}

	void LUA_NATIVE_NETWORK_NETWORK_MARK_AS_PREFERRED_ACTIVITY( bool p0 )
	{
		NETWORK::NETWORK_MARK_AS_PREFERRED_ACTIVITY(p0);
	}

	void LUA_NATIVE_NETWORK_NETWORK_MARK_AS_WAITING_ASYNC( bool p0 )
	{
		NETWORK::NETWORK_MARK_AS_WAITING_ASYNC(p0);
	}

	void LUA_NATIVE_NETWORK_NETWORK_SET_IN_PROGRESS_FINISH_TIME( Any p0 )
	{
		NETWORK::NETWORK_SET_IN_PROGRESS_FINISH_TIME(p0);
	}

	Any LUA_NATIVE_NETWORK_NETWORK_SET_TRANSITION_CREATOR_HANDLE( Any p0 )
	{
		NETWORK::NETWORK_SET_TRANSITION_CREATOR_HANDLE(&p0);
		return p0;
	}

	void LUA_NATIVE_NETWORK_NETWORK_CLEAR_TRANSITION_CREATOR_HANDLE(  )
	{
		NETWORK::NETWORK_CLEAR_TRANSITION_CREATOR_HANDLE();
	}

	std::tuple<bool, Any> LUA_NATIVE_NETWORK_NETWORK_INVITE_GAMERS_TO_TRANSITION( Any p0, Any p1 )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::NETWORK_INVITE_GAMERS_TO_TRANSITION(&p0, p1);
		std::get<1>(return_values) = p0;

		return return_values;
	}

	Any LUA_NATIVE_NETWORK_NETWORK_SET_GAMER_INVITED_TO_TRANSITION( Any gamerHandle )
	{
		NETWORK::NETWORK_SET_GAMER_INVITED_TO_TRANSITION(&gamerHandle);
		return gamerHandle;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_LEAVE_TRANSITION(  )
	{
		auto retval = (bool)NETWORK::NETWORK_LEAVE_TRANSITION();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_LAUNCH_TRANSITION(  )
	{
		auto retval = (bool)NETWORK::NETWORK_LAUNCH_TRANSITION();
		return retval;
	}

	void LUA_NATIVE_NETWORK_NETWORK_SET_DO_NOT_LAUNCH_FROM_JOIN_AS_MIGRATED_HOST( bool toggle )
	{
		NETWORK::NETWORK_SET_DO_NOT_LAUNCH_FROM_JOIN_AS_MIGRATED_HOST(toggle);
	}

	void LUA_NATIVE_NETWORK_NETWORK_CANCEL_TRANSITION_MATCHMAKING(  )
	{
		NETWORK::NETWORK_CANCEL_TRANSITION_MATCHMAKING();
	}

	void LUA_NATIVE_NETWORK_NETWORK_BAIL_TRANSITION( int p0, int p1, int p2 )
	{
		NETWORK::NETWORK_BAIL_TRANSITION(p0, p1, p2);
	}

	bool LUA_NATIVE_NETWORK_NETWORK_DO_TRANSITION_TO_GAME( bool p0, int maxPlayers )
	{
		auto retval = (bool)NETWORK::NETWORK_DO_TRANSITION_TO_GAME(p0, maxPlayers);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_DO_TRANSITION_TO_NEW_GAME( bool p0, int maxPlayers, bool p2 )
	{
		auto retval = (bool)NETWORK::NETWORK_DO_TRANSITION_TO_NEW_GAME(p0, maxPlayers, p2);
		return retval;
	}

	std::tuple<bool, Any> LUA_NATIVE_NETWORK_NETWORK_DO_TRANSITION_TO_FREEMODE( Any p0, Any p1, bool p2, int players, bool p4 )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::NETWORK_DO_TRANSITION_TO_FREEMODE(&p0, p1, p2, players, p4);
		std::get<1>(return_values) = p0;

		return return_values;
	}

	std::tuple<bool, Any> LUA_NATIVE_NETWORK_NETWORK_DO_TRANSITION_TO_NEW_FREEMODE( Any p0, Any p1, int players, bool p3, bool p4, bool p5 )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::NETWORK_DO_TRANSITION_TO_NEW_FREEMODE(&p0, p1, players, p3, p4, p5);
		std::get<1>(return_values) = p0;

		return return_values;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_IS_TRANSITION_TO_GAME(  )
	{
		auto retval = (bool)NETWORK::NETWORK_IS_TRANSITION_TO_GAME();
		return retval;
	}

	std::tuple<int, Any> LUA_NATIVE_NETWORK_NETWORK_GET_TRANSITION_MEMBERS( Any data, int dataCount )
	{
		std::tuple<int, Any> return_values;
		std::get<0>(return_values) = NETWORK::NETWORK_GET_TRANSITION_MEMBERS(&data, dataCount);
		std::get<1>(return_values) = data;

		return return_values;
	}

	void LUA_NATIVE_NETWORK_NETWORK_APPLY_TRANSITION_PARAMETER( int p0, int p1 )
	{
		NETWORK::NETWORK_APPLY_TRANSITION_PARAMETER(p0, p1);
	}

	void LUA_NATIVE_NETWORK_NETWORK_APPLY_TRANSITION_PARAMETER_STRING( int p0, const char* string, bool p2 )
	{
		NETWORK::NETWORK_APPLY_TRANSITION_PARAMETER_STRING(p0, string, p2);
	}

	std::tuple<bool, Any> LUA_NATIVE_NETWORK_NETWORK_SEND_TRANSITION_GAMER_INSTRUCTION( Any gamerHandle, const char* p1, int p2, int p3, bool p4 )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::NETWORK_SEND_TRANSITION_GAMER_INSTRUCTION(&gamerHandle, p1, p2, p3, p4);
		std::get<1>(return_values) = gamerHandle;

		return return_values;
	}

	std::tuple<bool, Any> LUA_NATIVE_NETWORK_NETWORK_MARK_TRANSITION_GAMER_AS_FULLY_JOINED( Any p0 )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::NETWORK_MARK_TRANSITION_GAMER_AS_FULLY_JOINED(&p0);
		std::get<1>(return_values) = p0;

		return return_values;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_IS_TRANSITION_HOST(  )
	{
		auto retval = (bool)NETWORK::NETWORK_IS_TRANSITION_HOST();
		return retval;
	}

	std::tuple<bool, Any> LUA_NATIVE_NETWORK_NETWORK_IS_TRANSITION_HOST_FROM_HANDLE( Any gamerHandle )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::NETWORK_IS_TRANSITION_HOST_FROM_HANDLE(&gamerHandle);
		std::get<1>(return_values) = gamerHandle;

		return return_values;
	}

	std::tuple<bool, Any> LUA_NATIVE_NETWORK_NETWORK_GET_TRANSITION_HOST( Any gamerHandle )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::NETWORK_GET_TRANSITION_HOST(&gamerHandle);
		std::get<1>(return_values) = gamerHandle;

		return return_values;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_IS_IN_TRANSITION(  )
	{
		auto retval = (bool)NETWORK::NETWORK_IS_IN_TRANSITION();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_IS_TRANSITION_STARTED(  )
	{
		auto retval = (bool)NETWORK::NETWORK_IS_TRANSITION_STARTED();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_IS_TRANSITION_BUSY(  )
	{
		auto retval = (bool)NETWORK::NETWORK_IS_TRANSITION_BUSY();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_IS_TRANSITION_MATCHMAKING(  )
	{
		auto retval = (bool)NETWORK::NETWORK_IS_TRANSITION_MATCHMAKING();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_IS_TRANSITION_LEAVE_POSTPONED(  )
	{
		auto retval = (bool)NETWORK::NETWORK_IS_TRANSITION_LEAVE_POSTPONED();
		return retval;
	}

	void LUA_NATIVE_NETWORK_NETWORK_TRANSITION_SET_IN_PROGRESS( Any p0 )
	{
		NETWORK::NETWORK_TRANSITION_SET_IN_PROGRESS(p0);
	}

	void LUA_NATIVE_NETWORK_NETWORK_TRANSITION_SET_CONTENT_CREATOR( Any p0 )
	{
		NETWORK::NETWORK_TRANSITION_SET_CONTENT_CREATOR(p0);
	}

	void LUA_NATIVE_NETWORK_NETWORK_TRANSITION_SET_ACTIVITY_ISLAND( Any p0 )
	{
		NETWORK::NETWORK_TRANSITION_SET_ACTIVITY_ISLAND(p0);
	}

	void LUA_NATIVE_NETWORK_NETWORK_OPEN_TRANSITION_MATCHMAKING(  )
	{
		NETWORK::NETWORK_OPEN_TRANSITION_MATCHMAKING();
	}

	void LUA_NATIVE_NETWORK_NETWORK_CLOSE_TRANSITION_MATCHMAKING(  )
	{
		NETWORK::NETWORK_CLOSE_TRANSITION_MATCHMAKING();
	}

	bool LUA_NATIVE_NETWORK_NETWORK_IS_TRANSITION_OPEN_TO_MATCHMAKING(  )
	{
		auto retval = (bool)NETWORK::NETWORK_IS_TRANSITION_OPEN_TO_MATCHMAKING();
		return retval;
	}

	void LUA_NATIVE_NETWORK_NETWORK_SET_TRANSITION_VISIBILITY_LOCK( bool p0, bool p1 )
	{
		NETWORK::NETWORK_SET_TRANSITION_VISIBILITY_LOCK(p0, p1);
	}

	bool LUA_NATIVE_NETWORK_NETWORK_IS_TRANSITION_VISIBILITY_LOCKED(  )
	{
		auto retval = (bool)NETWORK::NETWORK_IS_TRANSITION_VISIBILITY_LOCKED();
		return retval;
	}

	void LUA_NATIVE_NETWORK_NETWORK_SET_TRANSITION_ACTIVITY_ID( Any p0 )
	{
		NETWORK::NETWORK_SET_TRANSITION_ACTIVITY_ID(p0);
	}

	void LUA_NATIVE_NETWORK_NETWORK_CHANGE_TRANSITION_SLOTS( Any p0, bool p1 )
	{
		NETWORK::NETWORK_CHANGE_TRANSITION_SLOTS(p0, p1);
	}

	void LUA_NATIVE_NETWORK_NETWORK_TRANSITION_BLOCK_JOIN_REQUESTS( bool p0 )
	{
		NETWORK::NETWORK_TRANSITION_BLOCK_JOIN_REQUESTS(p0);
	}

	bool LUA_NATIVE_NETWORK_NETWORK_HAS_PLAYER_STARTED_TRANSITION( Player player )
	{
		auto retval = (bool)NETWORK::NETWORK_HAS_PLAYER_STARTED_TRANSITION(player);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_ARE_TRANSITION_DETAILS_VALID( Any p0 )
	{
		auto retval = (bool)NETWORK::NETWORK_ARE_TRANSITION_DETAILS_VALID(p0);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_JOIN_TRANSITION( Player player )
	{
		auto retval = (bool)NETWORK::NETWORK_JOIN_TRANSITION(player);
		return retval;
	}

	std::tuple<bool, Any> LUA_NATIVE_NETWORK_NETWORK_HAS_INVITED_GAMER_TO_TRANSITION( Any p0 )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::NETWORK_HAS_INVITED_GAMER_TO_TRANSITION(&p0);
		std::get<1>(return_values) = p0;

		return return_values;
	}

	std::tuple<bool, Any> LUA_NATIVE_NETWORK_NETWORK_HAS_TRANSITION_INVITE_BEEN_ACKED( Any p0 )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::NETWORK_HAS_TRANSITION_INVITE_BEEN_ACKED(&p0);
		std::get<1>(return_values) = p0;

		return return_values;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_IS_ACTIVITY_SESSION(  )
	{
		auto retval = (bool)NETWORK::NETWORK_IS_ACTIVITY_SESSION();
		return retval;
	}

	void LUA_NATIVE_NETWORK_NETWORK_DISABLE_REALTIME_MULTIPLAYER(  )
	{
		NETWORK::NETWORK_DISABLE_REALTIME_MULTIPLAYER();
	}

	void LUA_NATIVE_NETWORK_NETWORK_SET_PRESENCE_SESSION_INVITES_BLOCKED( bool toggle )
	{
		NETWORK::NETWORK_SET_PRESENCE_SESSION_INVITES_BLOCKED(toggle);
	}

	std::tuple<bool, Any> LUA_NATIVE_NETWORK_NETWORK_SEND_INVITE_VIA_PRESENCE( Any gamerHandle, const char* p1, int dataCount, int p3 )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::NETWORK_SEND_INVITE_VIA_PRESENCE(&gamerHandle, p1, dataCount, p3);
		std::get<1>(return_values) = gamerHandle;

		return return_values;
	}

	std::tuple<bool, Any> LUA_NATIVE_NETWORK_NETWORK_SEND_TRANSITION_INVITE_VIA_PRESENCE( Any gamerHandle, const char* p1, int dataCount, int p3 )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::NETWORK_SEND_TRANSITION_INVITE_VIA_PRESENCE(&gamerHandle, p1, dataCount, p3);
		std::get<1>(return_values) = gamerHandle;

		return return_values;
	}

	std::tuple<bool, Any> LUA_NATIVE_NETWORK_NETWORK_SEND_IMPORTANT_TRANSITION_INVITE_VIA_PRESENCE( Any gamerHandle, const char* p1, int dataCount, int p3 )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::NETWORK_SEND_IMPORTANT_TRANSITION_INVITE_VIA_PRESENCE(&gamerHandle, p1, dataCount, p3);
		std::get<1>(return_values) = gamerHandle;

		return return_values;
	}

	int LUA_NATIVE_NETWORK_NETWORK_GET_PRESENCE_INVITE_INDEX_BY_ID( int p0 )
	{
		auto retval = NETWORK::NETWORK_GET_PRESENCE_INVITE_INDEX_BY_ID(p0);
		return retval;
	}

	int LUA_NATIVE_NETWORK_NETWORK_GET_NUM_PRESENCE_INVITES(  )
	{
		auto retval = NETWORK::NETWORK_GET_NUM_PRESENCE_INVITES();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_ACCEPT_PRESENCE_INVITE( int p0 )
	{
		auto retval = (bool)NETWORK::NETWORK_ACCEPT_PRESENCE_INVITE(p0);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_REMOVE_PRESENCE_INVITE( int p0 )
	{
		auto retval = (bool)NETWORK::NETWORK_REMOVE_PRESENCE_INVITE(p0);
		return retval;
	}

	int LUA_NATIVE_NETWORK_NETWORK_GET_PRESENCE_INVITE_ID( int p0 )
	{
		auto retval = NETWORK::NETWORK_GET_PRESENCE_INVITE_ID(p0);
		return retval;
	}

	const char* LUA_NATIVE_NETWORK_NETWORK_GET_PRESENCE_INVITE_INVITER( int p0 )
	{
		auto retval = NETWORK::NETWORK_GET_PRESENCE_INVITE_INVITER(p0);
		return retval;
	}

	std::tuple<bool, Any> LUA_NATIVE_NETWORK_NETWORK_GET_PRESENCE_INVITE_HANDLE( Any p0, Any p1 )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::NETWORK_GET_PRESENCE_INVITE_HANDLE(p0, &p1);
		std::get<1>(return_values) = p1;

		return return_values;
	}

	int LUA_NATIVE_NETWORK_NETWORK_GET_PRESENCE_INVITE_SESSION_ID( Any p0 )
	{
		auto retval = NETWORK::NETWORK_GET_PRESENCE_INVITE_SESSION_ID(p0);
		return retval;
	}

	const char* LUA_NATIVE_NETWORK_NETWORK_GET_PRESENCE_INVITE_CONTENT_ID( int p0 )
	{
		auto retval = NETWORK::NETWORK_GET_PRESENCE_INVITE_CONTENT_ID(p0);
		return retval;
	}

	int LUA_NATIVE_NETWORK_NETWORK_GET_PRESENCE_INVITE_PLAYLIST_LENGTH( int p0 )
	{
		auto retval = NETWORK::NETWORK_GET_PRESENCE_INVITE_PLAYLIST_LENGTH(p0);
		return retval;
	}

	int LUA_NATIVE_NETWORK_NETWORK_GET_PRESENCE_INVITE_PLAYLIST_CURRENT( int p0 )
	{
		auto retval = NETWORK::NETWORK_GET_PRESENCE_INVITE_PLAYLIST_CURRENT(p0);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_GET_PRESENCE_INVITE_FROM_ADMIN( int p0 )
	{
		auto retval = (bool)NETWORK::NETWORK_GET_PRESENCE_INVITE_FROM_ADMIN(p0);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_GET_PRESENCE_INVITE_IS_TOURNAMENT( Any p0 )
	{
		auto retval = (bool)NETWORK::NETWORK_GET_PRESENCE_INVITE_IS_TOURNAMENT(p0);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_HAS_FOLLOW_INVITE(  )
	{
		auto retval = (bool)NETWORK::NETWORK_HAS_FOLLOW_INVITE();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_ACTION_FOLLOW_INVITE(  )
	{
		auto retval = (bool)NETWORK::NETWORK_ACTION_FOLLOW_INVITE();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_CLEAR_FOLLOW_INVITE(  )
	{
		auto retval = (bool)NETWORK::NETWORK_CLEAR_FOLLOW_INVITE();
		return retval;
	}

	void LUA_NATIVE_NETWORK_NETWORK_REMOVE_AND_CANCEL_ALL_INVITES(  )
	{
		NETWORK::NETWORK_REMOVE_AND_CANCEL_ALL_INVITES();
	}

	Any LUA_NATIVE_NETWORK_NETWORK_REMOVE_TRANSITION_INVITE( Any p0 )
	{
		NETWORK::NETWORK_REMOVE_TRANSITION_INVITE(&p0);
		return p0;
	}

	void LUA_NATIVE_NETWORK_NETWORK_REMOVE_ALL_TRANSITION_INVITE(  )
	{
		NETWORK::NETWORK_REMOVE_ALL_TRANSITION_INVITE();
	}

	void LUA_NATIVE_NETWORK_NETWORK_REMOVE_AND_CANCEL_ALL_TRANSITION_INVITES(  )
	{
		NETWORK::NETWORK_REMOVE_AND_CANCEL_ALL_TRANSITION_INVITES();
	}

	std::tuple<bool, Any, Any> LUA_NATIVE_NETWORK_NETWORK_INVITE_GAMERS( Any p0, Any p1, Any p2, Any p3 )
	{
		std::tuple<bool, Any, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::NETWORK_INVITE_GAMERS(&p0, p1, &p2, p3);
		std::get<1>(return_values) = p0;
		std::get<2>(return_values) = p2;

		return return_values;
	}

	std::tuple<bool, Any> LUA_NATIVE_NETWORK_NETWORK_HAS_INVITED_GAMER( Any p0 )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::NETWORK_HAS_INVITED_GAMER(&p0);
		std::get<1>(return_values) = p0;

		return return_values;
	}

	std::tuple<bool, Any> LUA_NATIVE_NETWORK_NETWORK_HAS_MADE_INVITE_DECISION( Any gamerHandle )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::NETWORK_HAS_MADE_INVITE_DECISION(&gamerHandle);
		std::get<1>(return_values) = gamerHandle;

		return return_values;
	}

	int LUA_NATIVE_NETWORK_NETWORK_GET_INVITE_REPLY_STATUS( Any p0 )
	{
		auto retval = NETWORK::NETWORK_GET_INVITE_REPLY_STATUS(p0);
		return retval;
	}

	std::tuple<bool, Any> LUA_NATIVE_NETWORK_NETWORK_GET_CURRENTLY_SELECTED_GAMER_HANDLE_FROM_INVITE_MENU( Any p0 )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::NETWORK_GET_CURRENTLY_SELECTED_GAMER_HANDLE_FROM_INVITE_MENU(&p0);
		std::get<1>(return_values) = p0;

		return return_values;
	}

	std::tuple<bool, Any> LUA_NATIVE_NETWORK_NETWORK_SET_CURRENTLY_SELECTED_GAMER_HANDLE_FROM_INVITE_MENU( Any p0 )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::NETWORK_SET_CURRENTLY_SELECTED_GAMER_HANDLE_FROM_INVITE_MENU(&p0);
		std::get<1>(return_values) = p0;

		return return_values;
	}

	Any LUA_NATIVE_NETWORK_NETWORK_SET_INVITE_ON_CALL_FOR_INVITE_MENU( Any p0 )
	{
		NETWORK::NETWORK_SET_INVITE_ON_CALL_FOR_INVITE_MENU(&p0);
		return p0;
	}

	std::tuple<bool, Any> LUA_NATIVE_NETWORK_NETWORK_CHECK_DATA_MANAGER_SUCCEEDED_FOR_HANDLE( int p0, Any gamerHandle )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::NETWORK_CHECK_DATA_MANAGER_SUCCEEDED_FOR_HANDLE(p0, &gamerHandle);
		std::get<1>(return_values) = gamerHandle;

		return return_values;
	}

	std::tuple<bool, Any> LUA_NATIVE_NETWORK_NETWORK_CHECK_DATA_MANAGER_FOR_HANDLE( Any p0, Any gamerHandle )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::NETWORK_CHECK_DATA_MANAGER_FOR_HANDLE(p0, &gamerHandle);
		std::get<1>(return_values) = gamerHandle;

		return return_values;
	}

	std::tuple<Any, Any> LUA_NATIVE_NETWORK_NETWORK_SET_INVITE_FAILED_MESSAGE_FOR_INVITE_MENU( Any p0, Any p1 )
	{
		std::tuple<Any, Any> return_values;
		NETWORK::NETWORK_SET_INVITE_FAILED_MESSAGE_FOR_INVITE_MENU(&p0, &p1);
		std::get<0>(return_values) = p0;
		std::get<1>(return_values) = p1;

		return return_values;
	}

	std::tuple<bool, Any> LUA_NATIVE_NETWORK_FILLOUT_PM_PLAYER_LIST( Any gamerHandle, Any p1, Any p2 )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::FILLOUT_PM_PLAYER_LIST(&gamerHandle, p1, p2);
		std::get<1>(return_values) = gamerHandle;

		return return_values;
	}

	std::tuple<bool, Any, Any> LUA_NATIVE_NETWORK_FILLOUT_PM_PLAYER_LIST_WITH_NAMES( Any p0, Any p1, Any p2, Any p3 )
	{
		std::tuple<bool, Any, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::FILLOUT_PM_PLAYER_LIST_WITH_NAMES(&p0, &p1, p2, p3);
		std::get<1>(return_values) = p0;
		std::get<2>(return_values) = p1;

		return return_values;
	}

	bool LUA_NATIVE_NETWORK_REFRESH_PLAYER_LIST_STATS( int p0 )
	{
		auto retval = (bool)NETWORK::REFRESH_PLAYER_LIST_STATS(p0);
		return retval;
	}

	std::tuple<bool, Any> LUA_NATIVE_NETWORK_NETWORK_SET_CURRENT_DATA_MANAGER_HANDLE( Any p0 )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::NETWORK_SET_CURRENT_DATA_MANAGER_HANDLE(&p0);
		std::get<1>(return_values) = p0;

		return return_values;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_IS_IN_PLATFORM_PARTY(  )
	{
		auto retval = (bool)NETWORK::NETWORK_IS_IN_PLATFORM_PARTY();
		return retval;
	}

	int LUA_NATIVE_NETWORK_NETWORK_GET_PLATFORM_PARTY_MEMBER_COUNT(  )
	{
		auto retval = NETWORK::NETWORK_GET_PLATFORM_PARTY_MEMBER_COUNT();
		return retval;
	}

	std::tuple<int, Any> LUA_NATIVE_NETWORK_NETWORK_GET_PLATFORM_PARTY_MEMBERS( Any data, int dataSize )
	{
		std::tuple<int, Any> return_values;
		std::get<0>(return_values) = NETWORK::NETWORK_GET_PLATFORM_PARTY_MEMBERS(&data, dataSize);
		std::get<1>(return_values) = data;

		return return_values;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_IS_IN_PLATFORM_PARTY_CHAT(  )
	{
		auto retval = (bool)NETWORK::NETWORK_IS_IN_PLATFORM_PARTY_CHAT();
		return retval;
	}

	std::tuple<bool, Any> LUA_NATIVE_NETWORK_NETWORK_IS_CHATTING_IN_PLATFORM_PARTY( Any gamerHandle )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::NETWORK_IS_CHATTING_IN_PLATFORM_PARTY(&gamerHandle);
		std::get<1>(return_values) = gamerHandle;

		return return_values;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_CAN_QUEUE_FOR_PREVIOUS_SESSION_JOIN(  )
	{
		auto retval = (bool)NETWORK::NETWORK_CAN_QUEUE_FOR_PREVIOUS_SESSION_JOIN();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_IS_QUEUING_FOR_SESSION_JOIN(  )
	{
		auto retval = (bool)NETWORK::NETWORK_IS_QUEUING_FOR_SESSION_JOIN();
		return retval;
	}

	void LUA_NATIVE_NETWORK_NETWORK_CLEAR_QUEUED_JOIN_REQUEST(  )
	{
		NETWORK::NETWORK_CLEAR_QUEUED_JOIN_REQUEST();
	}

	void LUA_NATIVE_NETWORK_NETWORK_SEND_QUEUED_JOIN_REQUEST(  )
	{
		NETWORK::NETWORK_SEND_QUEUED_JOIN_REQUEST();
	}

	void LUA_NATIVE_NETWORK_NETWORK_REMOVE_ALL_QUEUED_JOIN_REQUESTS(  )
	{
		NETWORK::NETWORK_REMOVE_ALL_QUEUED_JOIN_REQUESTS();
	}

	void LUA_NATIVE_NETWORK_NETWORK_SEED_RANDOM_NUMBER_GENERATOR( int seed )
	{
		NETWORK::NETWORK_SEED_RANDOM_NUMBER_GENERATOR(seed);
	}

	int LUA_NATIVE_NETWORK_NETWORK_GET_RANDOM_INT(  )
	{
		auto retval = NETWORK::NETWORK_GET_RANDOM_INT();
		return retval;
	}

	int LUA_NATIVE_NETWORK_NETWORK_GET_RANDOM_INT_RANGED( int rangeStart, int rangeEnd )
	{
		auto retval = NETWORK::NETWORK_GET_RANDOM_INT_RANGED(rangeStart, rangeEnd);
		return retval;
	}

	float LUA_NATIVE_NETWORK_NETWORK_GET_RANDOM_FLOAT_RANGED_( float rangeStart, float rangeEnd )
	{
		auto retval = NETWORK::NETWORK_GET_RANDOM_FLOAT_RANGED_(rangeStart, rangeEnd);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_PLAYER_IS_CHEATER(  )
	{
		auto retval = (bool)NETWORK::NETWORK_PLAYER_IS_CHEATER();
		return retval;
	}

	int LUA_NATIVE_NETWORK_NETWORK_PLAYER_GET_CHEATER_REASON(  )
	{
		auto retval = NETWORK::NETWORK_PLAYER_GET_CHEATER_REASON();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_PLAYER_IS_BADSPORT(  )
	{
		auto retval = (bool)NETWORK::NETWORK_PLAYER_IS_BADSPORT();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_REMOTE_CHEATER_PLAYER_DETECTED( Player player, int a, int b )
	{
		auto retval = (bool)NETWORK::REMOTE_CHEATER_PLAYER_DETECTED(player, a, b);
		return retval;
	}

	std::tuple<bool, Any> LUA_NATIVE_NETWORK_BAD_SPORT_PLAYER_LEFT_DETECTED( Any gamerHandle, int event, int amountReceived )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::BAD_SPORT_PLAYER_LEFT_DETECTED(&gamerHandle, event, amountReceived);
		std::get<1>(return_values) = gamerHandle;

		return return_values;
	}

	void LUA_NATIVE_NETWORK_NETWORK_ADD_INVALID_OBJECT_MODEL( Hash modelHash )
	{
		NETWORK::NETWORK_ADD_INVALID_OBJECT_MODEL(modelHash);
	}

	void LUA_NATIVE_NETWORK_NETWORK_REMOVE_INVALID_OBJECT_MODEL( Hash modelHash )
	{
		NETWORK::NETWORK_REMOVE_INVALID_OBJECT_MODEL(modelHash);
	}

	void LUA_NATIVE_NETWORK_NETWORK_CLEAR_INVALID_OBJECT_MODELS(  )
	{
		NETWORK::NETWORK_CLEAR_INVALID_OBJECT_MODELS();
	}

	void LUA_NATIVE_NETWORK_NETWORK_APPLY_PED_SCAR_DATA( Ped ped, int p1 )
	{
		NETWORK::NETWORK_APPLY_PED_SCAR_DATA(ped, p1);
	}

	void LUA_NATIVE_NETWORK_NETWORK_SET_THIS_SCRIPT_IS_NETWORK_SCRIPT( int maxNumMissionParticipants, bool p1, int instanceId )
	{
		NETWORK::NETWORK_SET_THIS_SCRIPT_IS_NETWORK_SCRIPT(maxNumMissionParticipants, p1, instanceId);
	}

	bool LUA_NATIVE_NETWORK_NETWORK_TRY_TO_SET_THIS_SCRIPT_IS_NETWORK_SCRIPT( Any p0, bool p1, Any p2 )
	{
		auto retval = (bool)NETWORK::NETWORK_TRY_TO_SET_THIS_SCRIPT_IS_NETWORK_SCRIPT(p0, p1, p2);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_GET_THIS_SCRIPT_IS_NETWORK_SCRIPT(  )
	{
		auto retval = (bool)NETWORK::NETWORK_GET_THIS_SCRIPT_IS_NETWORK_SCRIPT();
		return retval;
	}

	int LUA_NATIVE_NETWORK_NETWORK_GET_MAX_NUM_PARTICIPANTS(  )
	{
		auto retval = NETWORK::NETWORK_GET_MAX_NUM_PARTICIPANTS();
		return retval;
	}

	int LUA_NATIVE_NETWORK_NETWORK_GET_NUM_PARTICIPANTS(  )
	{
		auto retval = NETWORK::NETWORK_GET_NUM_PARTICIPANTS();
		return retval;
	}

	int LUA_NATIVE_NETWORK_NETWORK_GET_SCRIPT_STATUS(  )
	{
		auto retval = NETWORK::NETWORK_GET_SCRIPT_STATUS();
		return retval;
	}

	int LUA_NATIVE_NETWORK_NETWORK_REGISTER_HOST_BROADCAST_VARIABLES( int vars, int numVars, const char* debugName )
	{
		NETWORK::NETWORK_REGISTER_HOST_BROADCAST_VARIABLES(&vars, numVars, debugName);
		return vars;
	}

	int LUA_NATIVE_NETWORK_NETWORK_REGISTER_PLAYER_BROADCAST_VARIABLES( int vars, int numVars, const char* debugName )
	{
		NETWORK::NETWORK_REGISTER_PLAYER_BROADCAST_VARIABLES(&vars, numVars, debugName);
		return vars;
	}

	void LUA_NATIVE_NETWORK_NETWORK_REGISTER_HIGH_FREQUENCY_HOST_BROADCAST_VARIABLES( Any p0, Any p1, Any p2 )
	{
		NETWORK::NETWORK_REGISTER_HIGH_FREQUENCY_HOST_BROADCAST_VARIABLES(p0, p1, p2);
	}

	void LUA_NATIVE_NETWORK_NETWORK_REGISTER_HIGH_FREQUENCY_PLAYER_BROADCAST_VARIABLES( Any p0, Any p1, Any p2 )
	{
		NETWORK::NETWORK_REGISTER_HIGH_FREQUENCY_PLAYER_BROADCAST_VARIABLES(p0, p1, p2);
	}

	void LUA_NATIVE_NETWORK_NETWORK_FINISH_BROADCASTING_DATA(  )
	{
		NETWORK::NETWORK_FINISH_BROADCASTING_DATA();
	}

	bool LUA_NATIVE_NETWORK_NETWORK_HAS_RECEIVED_HOST_BROADCAST_DATA(  )
	{
		auto retval = (bool)NETWORK::NETWORK_HAS_RECEIVED_HOST_BROADCAST_DATA();
		return retval;
	}

	Player LUA_NATIVE_NETWORK_NETWORK_GET_PLAYER_INDEX( Player player )
	{
		auto retval = NETWORK::NETWORK_GET_PLAYER_INDEX(player);
		return retval;
	}

	int LUA_NATIVE_NETWORK_NETWORK_GET_PARTICIPANT_INDEX( int index )
	{
		auto retval = NETWORK::NETWORK_GET_PARTICIPANT_INDEX(index);
		return retval;
	}

	Player LUA_NATIVE_NETWORK_NETWORK_GET_PLAYER_INDEX_FROM_PED( Ped ped )
	{
		auto retval = NETWORK::NETWORK_GET_PLAYER_INDEX_FROM_PED(ped);
		return retval;
	}

	int LUA_NATIVE_NETWORK_NETWORK_GET_NUM_CONNECTED_PLAYERS(  )
	{
		auto retval = NETWORK::NETWORK_GET_NUM_CONNECTED_PLAYERS();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_IS_PLAYER_CONNECTED( Player player )
	{
		auto retval = (bool)NETWORK::NETWORK_IS_PLAYER_CONNECTED(player);
		return retval;
	}

	int LUA_NATIVE_NETWORK_NETWORK_GET_TOTAL_NUM_PLAYERS(  )
	{
		auto retval = NETWORK::NETWORK_GET_TOTAL_NUM_PLAYERS();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_IS_PARTICIPANT_ACTIVE( int p0 )
	{
		auto retval = (bool)NETWORK::NETWORK_IS_PARTICIPANT_ACTIVE(p0);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_IS_PLAYER_ACTIVE( Player player )
	{
		auto retval = (bool)NETWORK::NETWORK_IS_PLAYER_ACTIVE(player);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_IS_PLAYER_A_PARTICIPANT( Player player )
	{
		auto retval = (bool)NETWORK::NETWORK_IS_PLAYER_A_PARTICIPANT(player);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_IS_HOST_OF_THIS_SCRIPT(  )
	{
		auto retval = (bool)NETWORK::NETWORK_IS_HOST_OF_THIS_SCRIPT();
		return retval;
	}

	Player LUA_NATIVE_NETWORK_NETWORK_GET_HOST_OF_THIS_SCRIPT(  )
	{
		auto retval = NETWORK::NETWORK_GET_HOST_OF_THIS_SCRIPT();
		return retval;
	}

	Player LUA_NATIVE_NETWORK_NETWORK_GET_HOST_OF_SCRIPT( const char* scriptName, int instance_id, int position_hash )
	{
		auto retval = NETWORK::NETWORK_GET_HOST_OF_SCRIPT(scriptName, instance_id, position_hash);
		return retval;
	}

	void LUA_NATIVE_NETWORK_NETWORK_SET_MISSION_FINISHED(  )
	{
		NETWORK::NETWORK_SET_MISSION_FINISHED();
	}

	bool LUA_NATIVE_NETWORK_NETWORK_IS_SCRIPT_ACTIVE( const char* scriptName, int instance_id, bool p2, int position_hash )
	{
		auto retval = (bool)NETWORK::NETWORK_IS_SCRIPT_ACTIVE(scriptName, instance_id, p2, position_hash);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_IS_SCRIPT_ACTIVE_BY_HASH( Hash scriptHash, int p1, bool p2, int p3 )
	{
		auto retval = (bool)NETWORK::NETWORK_IS_SCRIPT_ACTIVE_BY_HASH(scriptHash, p1, p2, p3);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_IS_THREAD_A_NETWORK_SCRIPT( int threadId )
	{
		auto retval = (bool)NETWORK::NETWORK_IS_THREAD_A_NETWORK_SCRIPT(threadId);
		return retval;
	}

	int LUA_NATIVE_NETWORK_NETWORK_GET_NUM_SCRIPT_PARTICIPANTS( const char* scriptName, int instance_id, int position_hash )
	{
		auto retval = NETWORK::NETWORK_GET_NUM_SCRIPT_PARTICIPANTS(scriptName, instance_id, position_hash);
		return retval;
	}

	int LUA_NATIVE_NETWORK_NETWORK_GET_INSTANCE_ID_OF_THIS_SCRIPT(  )
	{
		auto retval = NETWORK::NETWORK_GET_INSTANCE_ID_OF_THIS_SCRIPT();
		return retval;
	}

	Hash LUA_NATIVE_NETWORK_NETWORK_GET_POSITION_HASH_OF_THIS_SCRIPT(  )
	{
		auto retval = NETWORK::NETWORK_GET_POSITION_HASH_OF_THIS_SCRIPT();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_IS_PLAYER_A_PARTICIPANT_ON_SCRIPT( Player player, const char* script, int instance_id )
	{
		auto retval = (bool)NETWORK::NETWORK_IS_PLAYER_A_PARTICIPANT_ON_SCRIPT(player, script, instance_id);
		return retval;
	}

	void LUA_NATIVE_NETWORK_NETWORK_PREVENT_SCRIPT_HOST_MIGRATION(  )
	{
		NETWORK::NETWORK_PREVENT_SCRIPT_HOST_MIGRATION();
	}

	void LUA_NATIVE_NETWORK_NETWORK_REQUEST_TO_BE_HOST_OF_THIS_SCRIPT(  )
	{
		NETWORK::NETWORK_REQUEST_TO_BE_HOST_OF_THIS_SCRIPT();
	}

	Player LUA_NATIVE_NETWORK_PARTICIPANT_ID(  )
	{
		auto retval = NETWORK::PARTICIPANT_ID();
		return retval;
	}

	int LUA_NATIVE_NETWORK_PARTICIPANT_ID_TO_INT(  )
	{
		auto retval = NETWORK::PARTICIPANT_ID_TO_INT();
		return retval;
	}

	std::tuple<Player, Hash> LUA_NATIVE_NETWORK_NETWORK_GET_KILLER_OF_PLAYER( Player player, Hash weaponHash )
	{
		std::tuple<Player, Hash> return_values;
		std::get<0>(return_values) = NETWORK::NETWORK_GET_KILLER_OF_PLAYER(player, &weaponHash);
		std::get<1>(return_values) = weaponHash;

		return return_values;
	}

	std::tuple<Player, Hash> LUA_NATIVE_NETWORK_NETWORK_GET_DESTROYER_OF_NETWORK_ID( int netId, Hash weaponHash )
	{
		std::tuple<Player, Hash> return_values;
		std::get<0>(return_values) = NETWORK::NETWORK_GET_DESTROYER_OF_NETWORK_ID(netId, &weaponHash);
		std::get<1>(return_values) = weaponHash;

		return return_values;
	}

	std::tuple<Player, Hash> LUA_NATIVE_NETWORK_NETWORK_GET_DESTROYER_OF_ENTITY( Entity entity, Hash weaponHash )
	{
		std::tuple<Player, Hash> return_values;
		std::get<0>(return_values) = NETWORK::NETWORK_GET_DESTROYER_OF_ENTITY(entity, &weaponHash);
		std::get<1>(return_values) = weaponHash;

		return return_values;
	}

	std::tuple<bool, int> LUA_NATIVE_NETWORK_NETWORK_GET_ASSISTED_KILL_OF_ENTITY( Player player, Entity entity, int p2 )
	{
		std::tuple<bool, int> return_values;
		std::get<0>(return_values) = (bool)NETWORK::NETWORK_GET_ASSISTED_KILL_OF_ENTITY(player, entity, &p2);
		std::get<1>(return_values) = p2;

		return return_values;
	}

	std::tuple<bool, int> LUA_NATIVE_NETWORK_NETWORK_GET_ASSISTED_DAMAGE_OF_ENTITY( Player player, Entity entity, int p2 )
	{
		std::tuple<bool, int> return_values;
		std::get<0>(return_values) = (bool)NETWORK::NETWORK_GET_ASSISTED_DAMAGE_OF_ENTITY(player, entity, &p2);
		std::get<1>(return_values) = p2;

		return return_values;
	}

	std::tuple<Entity, Hash> LUA_NATIVE_NETWORK_NETWORK_GET_ENTITY_KILLER_OF_PLAYER( Player player, Hash weaponHash )
	{
		std::tuple<Entity, Hash> return_values;
		std::get<0>(return_values) = NETWORK::NETWORK_GET_ENTITY_KILLER_OF_PLAYER(player, &weaponHash);
		std::get<1>(return_values) = weaponHash;

		return return_values;
	}

	void LUA_NATIVE_NETWORK_NETWORK_SET_CURRENT_PUBLIC_CONTENT_ID( const char* missionId )
	{
		NETWORK::NETWORK_SET_CURRENT_PUBLIC_CONTENT_ID(missionId);
	}

	void LUA_NATIVE_NETWORK_NETWORK_SET_CURRENT_CHAT_OPTION( int newChatOption )
	{
		NETWORK::NETWORK_SET_CURRENT_CHAT_OPTION(newChatOption);
	}

	void LUA_NATIVE_NETWORK_NETWORK_SET_CURRENT_SPAWN_LOCATION_OPTION( Hash mpSettingSpawn )
	{
		NETWORK::NETWORK_SET_CURRENT_SPAWN_LOCATION_OPTION(mpSettingSpawn);
	}

	void LUA_NATIVE_NETWORK_NETWORK_SET_VEHICLE_DRIVEN_IN_TEST_DRIVE( bool toggle )
	{
		NETWORK::NETWORK_SET_VEHICLE_DRIVEN_IN_TEST_DRIVE(toggle);
	}

	void LUA_NATIVE_NETWORK_NETWORK_SET_VEHICLE_DRIVEN_LOCATION( Hash location )
	{
		NETWORK::NETWORK_SET_VEHICLE_DRIVEN_LOCATION(location);
	}

	void LUA_NATIVE_NETWORK_NETWORK_RESURRECT_LOCAL_PLAYER( float x, float y, float z, float heading, bool p4, bool changetime, bool p6, int p7, int p8 )
	{
		NETWORK::NETWORK_RESURRECT_LOCAL_PLAYER(x, y, z, heading, p4, changetime, p6, p7, p8);
	}

	void LUA_NATIVE_NETWORK_NETWORK_SET_LOCAL_PLAYER_INVINCIBLE_TIME( int time )
	{
		NETWORK::NETWORK_SET_LOCAL_PLAYER_INVINCIBLE_TIME(time);
	}

	bool LUA_NATIVE_NETWORK_NETWORK_IS_LOCAL_PLAYER_INVINCIBLE(  )
	{
		auto retval = (bool)NETWORK::NETWORK_IS_LOCAL_PLAYER_INVINCIBLE();
		return retval;
	}

	void LUA_NATIVE_NETWORK_NETWORK_DISABLE_INVINCIBLE_FLASHING( Player player, bool toggle )
	{
		NETWORK::NETWORK_DISABLE_INVINCIBLE_FLASHING(player, toggle);
	}

	void LUA_NATIVE_NETWORK_NETWORK_PATCH_POST_CUTSCENE_HS4F_TUN_ENT( Ped ped )
	{
		NETWORK::NETWORK_PATCH_POST_CUTSCENE_HS4F_TUN_ENT(ped);
	}

	void LUA_NATIVE_NETWORK_NETWORK_SET_LOCAL_PLAYER_SYNC_LOOK_AT( bool toggle )
	{
		NETWORK::NETWORK_SET_LOCAL_PLAYER_SYNC_LOOK_AT(toggle);
	}

	bool LUA_NATIVE_NETWORK_NETWORK_HAS_ENTITY_BEEN_REGISTERED_WITH_THIS_THREAD( Entity entity )
	{
		auto retval = (bool)NETWORK::NETWORK_HAS_ENTITY_BEEN_REGISTERED_WITH_THIS_THREAD(entity);
		return retval;
	}

	int LUA_NATIVE_NETWORK_NETWORK_GET_NETWORK_ID_FROM_ENTITY( Entity entity )
	{
		auto retval = NETWORK::NETWORK_GET_NETWORK_ID_FROM_ENTITY(entity);
		return retval;
	}

	Entity LUA_NATIVE_NETWORK_NETWORK_GET_ENTITY_FROM_NETWORK_ID( int netId )
	{
		auto retval = NETWORK::NETWORK_GET_ENTITY_FROM_NETWORK_ID(netId);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_GET_ENTITY_IS_NETWORKED( Entity entity )
	{
		auto retval = (bool)NETWORK::NETWORK_GET_ENTITY_IS_NETWORKED(entity);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_GET_ENTITY_IS_LOCAL( Entity entity )
	{
		auto retval = (bool)NETWORK::NETWORK_GET_ENTITY_IS_LOCAL(entity);
		return retval;
	}

	void LUA_NATIVE_NETWORK_NETWORK_REGISTER_ENTITY_AS_NETWORKED( Entity entity )
	{
		NETWORK::NETWORK_REGISTER_ENTITY_AS_NETWORKED(entity);
	}

	void LUA_NATIVE_NETWORK_NETWORK_UNREGISTER_NETWORKED_ENTITY( Entity entity )
	{
		NETWORK::NETWORK_UNREGISTER_NETWORKED_ENTITY(entity);
	}

	bool LUA_NATIVE_NETWORK_NETWORK_DOES_NETWORK_ID_EXIST( int netId )
	{
		auto retval = (bool)NETWORK::NETWORK_DOES_NETWORK_ID_EXIST(netId);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_DOES_ENTITY_EXIST_WITH_NETWORK_ID( int netId )
	{
		auto retval = (bool)NETWORK::NETWORK_DOES_ENTITY_EXIST_WITH_NETWORK_ID(netId);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_REQUEST_CONTROL_OF_NETWORK_ID( int netId )
	{
		auto retval = (bool)NETWORK::NETWORK_REQUEST_CONTROL_OF_NETWORK_ID(netId);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_HAS_CONTROL_OF_NETWORK_ID( int netId )
	{
		auto retval = (bool)NETWORK::NETWORK_HAS_CONTROL_OF_NETWORK_ID(netId);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_IS_NETWORK_ID_REMOTELY_CONTROLLED( int netId )
	{
		auto retval = (bool)NETWORK::NETWORK_IS_NETWORK_ID_REMOTELY_CONTROLLED(netId);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_REQUEST_CONTROL_OF_ENTITY( Entity entity )
	{
		auto retval = (bool)NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(entity);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_REQUEST_CONTROL_OF_DOOR( int doorID )
	{
		auto retval = (bool)NETWORK::NETWORK_REQUEST_CONTROL_OF_DOOR(doorID);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_HAS_CONTROL_OF_ENTITY( Entity entity )
	{
		auto retval = (bool)NETWORK::NETWORK_HAS_CONTROL_OF_ENTITY(entity);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_HAS_CONTROL_OF_PICKUP( Pickup pickup )
	{
		auto retval = (bool)NETWORK::NETWORK_HAS_CONTROL_OF_PICKUP(pickup);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_HAS_CONTROL_OF_DOOR( Hash doorHash )
	{
		auto retval = (bool)NETWORK::NETWORK_HAS_CONTROL_OF_DOOR(doorHash);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_IS_DOOR_NETWORKED( Hash doorHash )
	{
		auto retval = (bool)NETWORK::NETWORK_IS_DOOR_NETWORKED(doorHash);
		return retval;
	}

	int LUA_NATIVE_NETWORK_VEH_TO_NET( Vehicle vehicle )
	{
		auto retval = NETWORK::VEH_TO_NET(vehicle);
		return retval;
	}

	int LUA_NATIVE_NETWORK_PED_TO_NET( Ped ped )
	{
		auto retval = NETWORK::PED_TO_NET(ped);
		return retval;
	}

	int LUA_NATIVE_NETWORK_OBJ_TO_NET( Object object )
	{
		auto retval = NETWORK::OBJ_TO_NET(object);
		return retval;
	}

	Vehicle LUA_NATIVE_NETWORK_NET_TO_VEH( int netHandle )
	{
		auto retval = NETWORK::NET_TO_VEH(netHandle);
		return retval;
	}

	Ped LUA_NATIVE_NETWORK_NET_TO_PED( int netHandle )
	{
		auto retval = NETWORK::NET_TO_PED(netHandle);
		return retval;
	}

	Object LUA_NATIVE_NETWORK_NET_TO_OBJ( int netHandle )
	{
		auto retval = NETWORK::NET_TO_OBJ(netHandle);
		return retval;
	}

	Entity LUA_NATIVE_NETWORK_NET_TO_ENT( int netHandle )
	{
		auto retval = NETWORK::NET_TO_ENT(netHandle);
		return retval;
	}

	Any LUA_NATIVE_NETWORK_NETWORK_GET_LOCAL_HANDLE( Any gamerHandle, int gamerHandleSize )
	{
		NETWORK::NETWORK_GET_LOCAL_HANDLE(&gamerHandle, gamerHandleSize);
		return gamerHandle;
	}

	Any LUA_NATIVE_NETWORK_NETWORK_HANDLE_FROM_USER_ID( const char* userId, Any gamerHandle, int gamerHandleSize )
	{
		NETWORK::NETWORK_HANDLE_FROM_USER_ID(userId, &gamerHandle, gamerHandleSize);
		return gamerHandle;
	}

	Any LUA_NATIVE_NETWORK_NETWORK_HANDLE_FROM_MEMBER_ID( const char* memberId, Any gamerHandle, int gamerHandleSize )
	{
		NETWORK::NETWORK_HANDLE_FROM_MEMBER_ID(memberId, &gamerHandle, gamerHandleSize);
		return gamerHandle;
	}

	Any LUA_NATIVE_NETWORK_NETWORK_HANDLE_FROM_PLAYER( Player player, Any gamerHandle, int gamerHandleSize )
	{
		NETWORK::NETWORK_HANDLE_FROM_PLAYER(player, &gamerHandle, gamerHandleSize);
		return gamerHandle;
	}

	Hash LUA_NATIVE_NETWORK_NETWORK_HASH_FROM_PLAYER_HANDLE( Player player )
	{
		auto retval = NETWORK::NETWORK_HASH_FROM_PLAYER_HANDLE(player);
		return retval;
	}

	std::tuple<Hash, Any> LUA_NATIVE_NETWORK_NETWORK_HASH_FROM_GAMER_HANDLE( Any gamerHandle )
	{
		std::tuple<Hash, Any> return_values;
		std::get<0>(return_values) = NETWORK::NETWORK_HASH_FROM_GAMER_HANDLE(&gamerHandle);
		std::get<1>(return_values) = gamerHandle;

		return return_values;
	}

	Any LUA_NATIVE_NETWORK_NETWORK_HANDLE_FROM_FRIEND( int friendIndex, Any gamerHandle, int gamerHandleSize )
	{
		NETWORK::NETWORK_HANDLE_FROM_FRIEND(friendIndex, &gamerHandle, gamerHandleSize);
		return gamerHandle;
	}

	std::tuple<bool, Any> LUA_NATIVE_NETWORK_NETWORK_GAMERTAG_FROM_HANDLE_START( Any gamerHandle )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::NETWORK_GAMERTAG_FROM_HANDLE_START(&gamerHandle);
		std::get<1>(return_values) = gamerHandle;

		return return_values;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_GAMERTAG_FROM_HANDLE_PENDING(  )
	{
		auto retval = (bool)NETWORK::NETWORK_GAMERTAG_FROM_HANDLE_PENDING();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_GAMERTAG_FROM_HANDLE_SUCCEEDED(  )
	{
		auto retval = (bool)NETWORK::NETWORK_GAMERTAG_FROM_HANDLE_SUCCEEDED();
		return retval;
	}

	std::tuple<const char*, Any> LUA_NATIVE_NETWORK_NETWORK_GET_GAMERTAG_FROM_HANDLE( Any gamerHandle )
	{
		std::tuple<const char*, Any> return_values;
		std::get<0>(return_values) = NETWORK::NETWORK_GET_GAMERTAG_FROM_HANDLE(&gamerHandle);
		std::get<1>(return_values) = gamerHandle;

		return return_values;
	}

	std::tuple<int, Any> LUA_NATIVE_NETWORK_NETWORK_DISPLAYNAMES_FROM_HANDLES_START( Any p0, Any p1 )
	{
		std::tuple<int, Any> return_values;
		std::get<0>(return_values) = NETWORK::NETWORK_DISPLAYNAMES_FROM_HANDLES_START(&p0, p1);
		std::get<1>(return_values) = p0;

		return return_values;
	}

	int LUA_NATIVE_NETWORK_NETWORK_GET_DISPLAYNAMES_FROM_HANDLES( Any p0, Any p1, Any p2 )
	{
		auto retval = NETWORK::NETWORK_GET_DISPLAYNAMES_FROM_HANDLES(p0, p1, p2);
		return retval;
	}

	std::tuple<bool, Any, Any> LUA_NATIVE_NETWORK_NETWORK_ARE_HANDLES_THE_SAME( Any gamerHandle1, Any gamerHandle2 )
	{
		std::tuple<bool, Any, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::NETWORK_ARE_HANDLES_THE_SAME(&gamerHandle1, &gamerHandle2);
		std::get<1>(return_values) = gamerHandle1;
		std::get<2>(return_values) = gamerHandle2;

		return return_values;
	}

	std::tuple<bool, Any> LUA_NATIVE_NETWORK_NETWORK_IS_HANDLE_VALID( Any gamerHandle, int gamerHandleSize )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::NETWORK_IS_HANDLE_VALID(&gamerHandle, gamerHandleSize);
		std::get<1>(return_values) = gamerHandle;

		return return_values;
	}

	std::tuple<Player, Any> LUA_NATIVE_NETWORK_NETWORK_GET_PLAYER_FROM_GAMER_HANDLE( Any gamerHandle )
	{
		std::tuple<Player, Any> return_values;
		std::get<0>(return_values) = NETWORK::NETWORK_GET_PLAYER_FROM_GAMER_HANDLE(&gamerHandle);
		std::get<1>(return_values) = gamerHandle;

		return return_values;
	}

	std::tuple<const char*, Any> LUA_NATIVE_NETWORK_NETWORK_MEMBER_ID_FROM_GAMER_HANDLE( Any gamerHandle )
	{
		std::tuple<const char*, Any> return_values;
		std::get<0>(return_values) = NETWORK::NETWORK_MEMBER_ID_FROM_GAMER_HANDLE(&gamerHandle);
		std::get<1>(return_values) = gamerHandle;

		return return_values;
	}

	std::tuple<bool, Any> LUA_NATIVE_NETWORK_NETWORK_IS_GAMER_IN_MY_SESSION( Any gamerHandle )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::NETWORK_IS_GAMER_IN_MY_SESSION(&gamerHandle);
		std::get<1>(return_values) = gamerHandle;

		return return_values;
	}

	Any LUA_NATIVE_NETWORK_NETWORK_SHOW_PROFILE_UI( Any gamerHandle )
	{
		NETWORK::NETWORK_SHOW_PROFILE_UI(&gamerHandle);
		return gamerHandle;
	}

	const char* LUA_NATIVE_NETWORK_NETWORK_PLAYER_GET_NAME( Player player )
	{
		auto retval = NETWORK::NETWORK_PLAYER_GET_NAME(player);
		return retval;
	}

	std::tuple<const char*, int> LUA_NATIVE_NETWORK_NETWORK_PLAYER_GET_USERID( Player player, int userID )
	{
		std::tuple<const char*, int> return_values;
		std::get<0>(return_values) = NETWORK::NETWORK_PLAYER_GET_USERID(player, &userID);
		std::get<1>(return_values) = userID;

		return return_values;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_PLAYER_IS_ROCKSTAR_DEV( Player player )
	{
		auto retval = (bool)NETWORK::NETWORK_PLAYER_IS_ROCKSTAR_DEV(player);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_PLAYER_INDEX_IS_CHEATER( Player player )
	{
		auto retval = (bool)NETWORK::NETWORK_PLAYER_INDEX_IS_CHEATER(player);
		return retval;
	}

	int LUA_NATIVE_NETWORK_NETWORK_ENTITY_GET_OBJECT_ID( Entity entity )
	{
		auto retval = NETWORK::NETWORK_ENTITY_GET_OBJECT_ID(entity);
		return retval;
	}

	Entity LUA_NATIVE_NETWORK_NETWORK_GET_ENTITY_FROM_OBJECT_ID( Any p0 )
	{
		auto retval = NETWORK::NETWORK_GET_ENTITY_FROM_OBJECT_ID(p0);
		return retval;
	}

	std::tuple<bool, Any> LUA_NATIVE_NETWORK_NETWORK_IS_INACTIVE_PROFILE( Any p0 )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::NETWORK_IS_INACTIVE_PROFILE(&p0);
		std::get<1>(return_values) = p0;

		return return_values;
	}

	int LUA_NATIVE_NETWORK_NETWORK_GET_MAX_FRIENDS(  )
	{
		auto retval = NETWORK::NETWORK_GET_MAX_FRIENDS();
		return retval;
	}

	int LUA_NATIVE_NETWORK_NETWORK_GET_FRIEND_COUNT(  )
	{
		auto retval = NETWORK::NETWORK_GET_FRIEND_COUNT();
		return retval;
	}

	const char* LUA_NATIVE_NETWORK_NETWORK_GET_FRIEND_NAME( int friendIndex )
	{
		auto retval = NETWORK::NETWORK_GET_FRIEND_NAME(friendIndex);
		return retval;
	}

	const char* LUA_NATIVE_NETWORK_NETWORK_GET_FRIEND_DISPLAY_NAME( int friendIndex )
	{
		auto retval = NETWORK::NETWORK_GET_FRIEND_DISPLAY_NAME(friendIndex);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_IS_FRIEND_ONLINE( const char* name )
	{
		auto retval = (bool)NETWORK::NETWORK_IS_FRIEND_ONLINE(name);
		return retval;
	}

	std::tuple<bool, Any> LUA_NATIVE_NETWORK_NETWORK_IS_FRIEND_HANDLE_ONLINE( Any gamerHandle )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::NETWORK_IS_FRIEND_HANDLE_ONLINE(&gamerHandle);
		std::get<1>(return_values) = gamerHandle;

		return return_values;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_IS_FRIEND_IN_SAME_TITLE( const char* friendName )
	{
		auto retval = (bool)NETWORK::NETWORK_IS_FRIEND_IN_SAME_TITLE(friendName);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_IS_FRIEND_IN_MULTIPLAYER( const char* friendName )
	{
		auto retval = (bool)NETWORK::NETWORK_IS_FRIEND_IN_MULTIPLAYER(friendName);
		return retval;
	}

	std::tuple<bool, Any> LUA_NATIVE_NETWORK_NETWORK_IS_FRIEND( Any gamerHandle )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::NETWORK_IS_FRIEND(&gamerHandle);
		std::get<1>(return_values) = gamerHandle;

		return return_values;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_IS_PENDING_FRIEND( Any p0 )
	{
		auto retval = (bool)NETWORK::NETWORK_IS_PENDING_FRIEND(p0);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_IS_ADDING_FRIEND(  )
	{
		auto retval = (bool)NETWORK::NETWORK_IS_ADDING_FRIEND();
		return retval;
	}

	std::tuple<bool, Any> LUA_NATIVE_NETWORK_NETWORK_ADD_FRIEND( Any gamerHandle, const char* message )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::NETWORK_ADD_FRIEND(&gamerHandle, message);
		std::get<1>(return_values) = gamerHandle;

		return return_values;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_IS_FRIEND_INDEX_ONLINE( int friendIndex )
	{
		auto retval = (bool)NETWORK::NETWORK_IS_FRIEND_INDEX_ONLINE(friendIndex);
		return retval;
	}

	void LUA_NATIVE_NETWORK_NETWORK_SET_PLAYER_IS_PASSIVE( bool toggle )
	{
		NETWORK::NETWORK_SET_PLAYER_IS_PASSIVE(toggle);
	}

	bool LUA_NATIVE_NETWORK_NETWORK_GET_PLAYER_OWNS_WAYPOINT( Player player )
	{
		auto retval = (bool)NETWORK::NETWORK_GET_PLAYER_OWNS_WAYPOINT(player);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_CAN_SET_WAYPOINT(  )
	{
		auto retval = (bool)NETWORK::NETWORK_CAN_SET_WAYPOINT();
		return retval;
	}

	void LUA_NATIVE_NETWORK_NETWORK_IGNORE_REMOTE_WAYPOINTS(  )
	{
		NETWORK::NETWORK_IGNORE_REMOTE_WAYPOINTS();
	}

	std::tuple<bool, Any> LUA_NATIVE_NETWORK_NETWORK_IS_PLAYER_ON_BLOCKLIST( Any gamerHandle )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::NETWORK_IS_PLAYER_ON_BLOCKLIST(&gamerHandle);
		std::get<1>(return_values) = gamerHandle;

		return return_values;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_SET_SCRIPT_AUTOMUTED( Any p0 )
	{
		auto retval = (bool)NETWORK::NETWORK_SET_SCRIPT_AUTOMUTED(p0);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_HAS_AUTOMUTE_OVERRIDE(  )
	{
		auto retval = (bool)NETWORK::NETWORK_HAS_AUTOMUTE_OVERRIDE();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_HAS_HEADSET(  )
	{
		auto retval = (bool)NETWORK::NETWORK_HAS_HEADSET();
		return retval;
	}

	void LUA_NATIVE_NETWORK_NETWORK_SET_LOOK_AT_TALKERS( bool p0 )
	{
		NETWORK::NETWORK_SET_LOOK_AT_TALKERS(p0);
	}

	bool LUA_NATIVE_NETWORK_NETWORK_IS_PUSH_TO_TALK_ACTIVE(  )
	{
		auto retval = (bool)NETWORK::NETWORK_IS_PUSH_TO_TALK_ACTIVE();
		return retval;
	}

	std::tuple<bool, Any> LUA_NATIVE_NETWORK_NETWORK_GAMER_HAS_HEADSET( Any gamerHandle )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::NETWORK_GAMER_HAS_HEADSET(&gamerHandle);
		std::get<1>(return_values) = gamerHandle;

		return return_values;
	}

	std::tuple<bool, Any> LUA_NATIVE_NETWORK_NETWORK_IS_GAMER_TALKING( Any gamerHandle )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::NETWORK_IS_GAMER_TALKING(&gamerHandle);
		std::get<1>(return_values) = gamerHandle;

		return return_values;
	}

	std::tuple<bool, Any> LUA_NATIVE_NETWORK_NETWORK_PERMISSIONS_HAS_GAMER_RECORD( Any gamerHandle )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::NETWORK_PERMISSIONS_HAS_GAMER_RECORD(&gamerHandle);
		std::get<1>(return_values) = gamerHandle;

		return return_values;
	}

	std::tuple<bool, Any> LUA_NATIVE_NETWORK_NETWORK_CAN_COMMUNICATE_WITH_GAMER( Any gamerHandle )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::NETWORK_CAN_COMMUNICATE_WITH_GAMER(&gamerHandle);
		std::get<1>(return_values) = gamerHandle;

		return return_values;
	}

	std::tuple<bool, Any> LUA_NATIVE_NETWORK_NETWORK_CAN_TEXT_CHAT_WITH_GAMER( Any gamerHandle )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::NETWORK_CAN_TEXT_CHAT_WITH_GAMER(&gamerHandle);
		std::get<1>(return_values) = gamerHandle;

		return return_values;
	}

	std::tuple<bool, Any> LUA_NATIVE_NETWORK_NETWORK_IS_GAMER_MUTED_BY_ME( Any gamerHandle )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::NETWORK_IS_GAMER_MUTED_BY_ME(&gamerHandle);
		std::get<1>(return_values) = gamerHandle;

		return return_values;
	}

	std::tuple<bool, Any> LUA_NATIVE_NETWORK_NETWORK_AM_I_MUTED_BY_GAMER( Any gamerHandle )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::NETWORK_AM_I_MUTED_BY_GAMER(&gamerHandle);
		std::get<1>(return_values) = gamerHandle;

		return return_values;
	}

	std::tuple<bool, Any> LUA_NATIVE_NETWORK_NETWORK_IS_GAMER_BLOCKED_BY_ME( Any gamerHandle )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::NETWORK_IS_GAMER_BLOCKED_BY_ME(&gamerHandle);
		std::get<1>(return_values) = gamerHandle;

		return return_values;
	}

	std::tuple<bool, Any> LUA_NATIVE_NETWORK_NETWORK_AM_I_BLOCKED_BY_GAMER( Any gamerHandle )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::NETWORK_AM_I_BLOCKED_BY_GAMER(&gamerHandle);
		std::get<1>(return_values) = gamerHandle;

		return return_values;
	}

	std::tuple<bool, Any> LUA_NATIVE_NETWORK_NETWORK_CAN_VIEW_GAMER_USER_CONTENT( Any gamerHandle )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::NETWORK_CAN_VIEW_GAMER_USER_CONTENT(&gamerHandle);
		std::get<1>(return_values) = gamerHandle;

		return return_values;
	}

	std::tuple<bool, Any> LUA_NATIVE_NETWORK_NETWORK_HAS_VIEW_GAMER_USER_CONTENT_RESULT( Any gamerHandle )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::NETWORK_HAS_VIEW_GAMER_USER_CONTENT_RESULT(&gamerHandle);
		std::get<1>(return_values) = gamerHandle;

		return return_values;
	}

	std::tuple<bool, Any> LUA_NATIVE_NETWORK_NETWORK_CAN_PLAY_MULTIPLAYER_WITH_GAMER( Any gamerHandle )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::NETWORK_CAN_PLAY_MULTIPLAYER_WITH_GAMER(&gamerHandle);
		std::get<1>(return_values) = gamerHandle;

		return return_values;
	}

	std::tuple<bool, Any> LUA_NATIVE_NETWORK_NETWORK_CAN_GAMER_PLAY_MULTIPLAYER_WITH_ME( Any gamerHandle )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::NETWORK_CAN_GAMER_PLAY_MULTIPLAYER_WITH_ME(&gamerHandle);
		std::get<1>(return_values) = gamerHandle;

		return return_values;
	}

	std::tuple<bool, Any> LUA_NATIVE_NETWORK_NETWORK_CAN_SEND_LOCAL_INVITE( Any gamerHandle )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::NETWORK_CAN_SEND_LOCAL_INVITE(&gamerHandle);
		std::get<1>(return_values) = gamerHandle;

		return return_values;
	}

	std::tuple<bool, Any> LUA_NATIVE_NETWORK_NETWORK_CAN_RECEIVE_LOCAL_INVITE( Any gamerHandle )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::NETWORK_CAN_RECEIVE_LOCAL_INVITE(&gamerHandle);
		std::get<1>(return_values) = gamerHandle;

		return return_values;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_IS_PLAYER_TALKING( Player player )
	{
		auto retval = (bool)NETWORK::NETWORK_IS_PLAYER_TALKING(player);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_PLAYER_HAS_HEADSET( Player player )
	{
		auto retval = (bool)NETWORK::NETWORK_PLAYER_HAS_HEADSET(player);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_IS_PLAYER_MUTED_BY_ME( Player player )
	{
		auto retval = (bool)NETWORK::NETWORK_IS_PLAYER_MUTED_BY_ME(player);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_AM_I_MUTED_BY_PLAYER( Player player )
	{
		auto retval = (bool)NETWORK::NETWORK_AM_I_MUTED_BY_PLAYER(player);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_IS_PLAYER_BLOCKED_BY_ME( Player player )
	{
		auto retval = (bool)NETWORK::NETWORK_IS_PLAYER_BLOCKED_BY_ME(player);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_AM_I_BLOCKED_BY_PLAYER( Player player )
	{
		auto retval = (bool)NETWORK::NETWORK_AM_I_BLOCKED_BY_PLAYER(player);
		return retval;
	}

	float LUA_NATIVE_NETWORK_NETWORK_GET_PLAYER_LOUDNESS( Player player )
	{
		auto retval = NETWORK::NETWORK_GET_PLAYER_LOUDNESS(player);
		return retval;
	}

	void LUA_NATIVE_NETWORK_NETWORK_SET_TALKER_PROXIMITY( float value )
	{
		NETWORK::NETWORK_SET_TALKER_PROXIMITY(value);
	}

	float LUA_NATIVE_NETWORK_NETWORK_GET_TALKER_PROXIMITY(  )
	{
		auto retval = NETWORK::NETWORK_GET_TALKER_PROXIMITY();
		return retval;
	}

	void LUA_NATIVE_NETWORK_NETWORK_SET_VOICE_ACTIVE( bool toggle )
	{
		NETWORK::NETWORK_SET_VOICE_ACTIVE(toggle);
	}

	void LUA_NATIVE_NETWORK_NETWORK_REMAIN_IN_GAME_CHAT( bool p0 )
	{
		NETWORK::NETWORK_REMAIN_IN_GAME_CHAT(p0);
	}

	void LUA_NATIVE_NETWORK_NETWORK_OVERRIDE_TRANSITION_CHAT( bool p0 )
	{
		NETWORK::NETWORK_OVERRIDE_TRANSITION_CHAT(p0);
	}

	void LUA_NATIVE_NETWORK_NETWORK_SET_TEAM_ONLY_CHAT( bool toggle )
	{
		NETWORK::NETWORK_SET_TEAM_ONLY_CHAT(toggle);
	}

	void LUA_NATIVE_NETWORK_NETWORK_SET_SCRIPT_CONTROLLING_TEAMS( Any p0 )
	{
		NETWORK::NETWORK_SET_SCRIPT_CONTROLLING_TEAMS(p0);
	}

	bool LUA_NATIVE_NETWORK_NETWORK_SET_SAME_TEAM_AS_LOCAL_PLAYER( Any p0, Any p1 )
	{
		auto retval = (bool)NETWORK::NETWORK_SET_SAME_TEAM_AS_LOCAL_PLAYER(p0, p1);
		return retval;
	}

	void LUA_NATIVE_NETWORK_NETWORK_OVERRIDE_TEAM_RESTRICTIONS( int team, bool toggle )
	{
		NETWORK::NETWORK_OVERRIDE_TEAM_RESTRICTIONS(team, toggle);
	}

	void LUA_NATIVE_NETWORK_NETWORK_SET_OVERRIDE_SPECTATOR_MODE( bool toggle )
	{
		NETWORK::NETWORK_SET_OVERRIDE_SPECTATOR_MODE(toggle);
	}

	void LUA_NATIVE_NETWORK_NETWORK_SET_OVERRIDE_TUTORIAL_SESSION_CHAT( bool toggle )
	{
		NETWORK::NETWORK_SET_OVERRIDE_TUTORIAL_SESSION_CHAT(toggle);
	}

	void LUA_NATIVE_NETWORK_NETWORK_SET_PROXIMITY_AFFECTS_TEAM( bool toggle )
	{
		NETWORK::NETWORK_SET_PROXIMITY_AFFECTS_TEAM(toggle);
	}

	void LUA_NATIVE_NETWORK_NETWORK_SET_NO_SPECTATOR_CHAT( bool toggle )
	{
		NETWORK::NETWORK_SET_NO_SPECTATOR_CHAT(toggle);
	}

	void LUA_NATIVE_NETWORK_NETWORK_SET_IGNORE_SPECTATOR_CHAT_LIMITS_SAME_TEAM( bool toggle )
	{
		NETWORK::NETWORK_SET_IGNORE_SPECTATOR_CHAT_LIMITS_SAME_TEAM(toggle);
	}

	void LUA_NATIVE_NETWORK_NETWORK_OVERRIDE_CHAT_RESTRICTIONS( Player player, bool toggle )
	{
		NETWORK::NETWORK_OVERRIDE_CHAT_RESTRICTIONS(player, toggle);
	}

	void LUA_NATIVE_NETWORK_NETWORK_OVERRIDE_SEND_RESTRICTIONS( Player player, bool toggle )
	{
		NETWORK::NETWORK_OVERRIDE_SEND_RESTRICTIONS(player, toggle);
	}

	void LUA_NATIVE_NETWORK_NETWORK_OVERRIDE_SEND_RESTRICTIONS_ALL( bool toggle )
	{
		NETWORK::NETWORK_OVERRIDE_SEND_RESTRICTIONS_ALL(toggle);
	}

	void LUA_NATIVE_NETWORK_NETWORK_OVERRIDE_RECEIVE_RESTRICTIONS( Player player, bool toggle )
	{
		NETWORK::NETWORK_OVERRIDE_RECEIVE_RESTRICTIONS(player, toggle);
	}

	void LUA_NATIVE_NETWORK_NETWORK_OVERRIDE_RECEIVE_RESTRICTIONS_ALL( bool toggle )
	{
		NETWORK::NETWORK_OVERRIDE_RECEIVE_RESTRICTIONS_ALL(toggle);
	}

	void LUA_NATIVE_NETWORK_NETWORK_SET_VOICE_CHANNEL( int channel )
	{
		NETWORK::NETWORK_SET_VOICE_CHANNEL(channel);
	}

	void LUA_NATIVE_NETWORK_NETWORK_CLEAR_VOICE_CHANNEL(  )
	{
		NETWORK::NETWORK_CLEAR_VOICE_CHANNEL();
	}

	void LUA_NATIVE_NETWORK_NETWORK_APPLY_VOICE_PROXIMITY_OVERRIDE( float x, float y, float z )
	{
		NETWORK::NETWORK_APPLY_VOICE_PROXIMITY_OVERRIDE(x, y, z);
	}

	void LUA_NATIVE_NETWORK_NETWORK_CLEAR_VOICE_PROXIMITY_OVERRIDE(  )
	{
		NETWORK::NETWORK_CLEAR_VOICE_PROXIMITY_OVERRIDE();
	}

	void LUA_NATIVE_NETWORK_NETWORK_ENABLE_VOICE_BANDWIDTH_RESTRICTION( Player player )
	{
		NETWORK::NETWORK_ENABLE_VOICE_BANDWIDTH_RESTRICTION(player);
	}

	void LUA_NATIVE_NETWORK_NETWORK_DISABLE_VOICE_BANDWIDTH_RESTRICTION( Player player )
	{
		NETWORK::NETWORK_DISABLE_VOICE_BANDWIDTH_RESTRICTION(player);
	}

	std::tuple<float, float> LUA_NATIVE_NETWORK_NETWORK_GET_MUTE_COUNT_FOR_PLAYER( Player p0, float p1, float p2 )
	{
		std::tuple<float, float> return_values;
		NETWORK::NETWORK_GET_MUTE_COUNT_FOR_PLAYER(p0, &p1, &p2);
		std::get<0>(return_values) = p1;
		std::get<1>(return_values) = p2;

		return return_values;
	}

	void LUA_NATIVE_NETWORK_NETWORK_SET_SPECTATOR_TO_NON_SPECTATOR_TEXT_CHAT( bool toggle )
	{
		NETWORK::NETWORK_SET_SPECTATOR_TO_NON_SPECTATOR_TEXT_CHAT(toggle);
	}

	bool LUA_NATIVE_NETWORK_NETWORK_TEXT_CHAT_IS_TYPING(  )
	{
		auto retval = (bool)NETWORK::NETWORK_TEXT_CHAT_IS_TYPING();
		return retval;
	}

	void LUA_NATIVE_NETWORK_SHUTDOWN_AND_LAUNCH_SINGLE_PLAYER_GAME(  )
	{
		NETWORK::SHUTDOWN_AND_LAUNCH_SINGLE_PLAYER_GAME();
	}

	bool LUA_NATIVE_NETWORK_SHUTDOWN_AND_LOAD_MOST_RECENT_SAVE(  )
	{
		auto retval = (bool)NETWORK::SHUTDOWN_AND_LOAD_MOST_RECENT_SAVE();
		return retval;
	}

	void LUA_NATIVE_NETWORK_NETWORK_SET_FRIENDLY_FIRE_OPTION( bool toggle )
	{
		NETWORK::NETWORK_SET_FRIENDLY_FIRE_OPTION(toggle);
	}

	void LUA_NATIVE_NETWORK_NETWORK_SET_RICH_PRESENCE( int p0, int p1, Any p2, Any p3 )
	{
		NETWORK::NETWORK_SET_RICH_PRESENCE(p0, p1, p2, p3);
	}

	void LUA_NATIVE_NETWORK_NETWORK_SET_RICH_PRESENCE_STRING( int p0, const char* textLabel )
	{
		NETWORK::NETWORK_SET_RICH_PRESENCE_STRING(p0, textLabel);
	}

	int LUA_NATIVE_NETWORK_NETWORK_GET_TIMEOUT_TIME(  )
	{
		auto retval = NETWORK::NETWORK_GET_TIMEOUT_TIME();
		return retval;
	}

	void LUA_NATIVE_NETWORK_NETWORK_LEAVE_PED_BEHIND_BEFORE_WARP( Player player, float x, float y, float z, bool p4, bool p5 )
	{
		NETWORK::NETWORK_LEAVE_PED_BEHIND_BEFORE_WARP(player, x, y, z, p4, p5);
	}

	void LUA_NATIVE_NETWORK_NETWORK_LEAVE_PED_BEHIND_BEFORE_CUTSCENE( Player player, bool p1 )
	{
		NETWORK::NETWORK_LEAVE_PED_BEHIND_BEFORE_CUTSCENE(player, p1);
	}

	void LUA_NATIVE_NETWORK_REMOVE_ALL_STICKY_BOMBS_FROM_ENTITY( Entity entity, Ped ped )
	{
		NETWORK::REMOVE_ALL_STICKY_BOMBS_FROM_ENTITY(entity, ped);
	}

	void LUA_NATIVE_NETWORK_NETWORK_KEEP_ENTITY_COLLISION_DISABLED_AFTER_ANIM_SCENE( Any p0, Any p1 )
	{
		NETWORK::NETWORK_KEEP_ENTITY_COLLISION_DISABLED_AFTER_ANIM_SCENE(p0, p1);
	}

	bool LUA_NATIVE_NETWORK_NETWORK_IS_ANY_PLAYER_NEAR( Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6 )
	{
		auto retval = (bool)NETWORK::NETWORK_IS_ANY_PLAYER_NEAR(p0, p1, p2, p3, p4, p5, p6);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_CLAN_SERVICE_IS_VALID(  )
	{
		auto retval = (bool)NETWORK::NETWORK_CLAN_SERVICE_IS_VALID();
		return retval;
	}

	std::tuple<bool, Any> LUA_NATIVE_NETWORK_NETWORK_CLAN_PLAYER_IS_ACTIVE( Any gamerHandle )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::NETWORK_CLAN_PLAYER_IS_ACTIVE(&gamerHandle);
		std::get<1>(return_values) = gamerHandle;

		return return_values;
	}

	std::tuple<bool, Any, Any> LUA_NATIVE_NETWORK_NETWORK_CLAN_PLAYER_GET_DESC( Any clanDesc, int bufferSize, Any gamerHandle )
	{
		std::tuple<bool, Any, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::NETWORK_CLAN_PLAYER_GET_DESC(&clanDesc, bufferSize, &gamerHandle);
		std::get<1>(return_values) = clanDesc;
		std::get<2>(return_values) = gamerHandle;

		return return_values;
	}

	std::tuple<bool, Any> LUA_NATIVE_NETWORK_NETWORK_CLAN_IS_ROCKSTAR_CLAN( Any clanDesc, int bufferSize )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::NETWORK_CLAN_IS_ROCKSTAR_CLAN(&clanDesc, bufferSize);
		std::get<1>(return_values) = clanDesc;

		return return_values;
	}

	std::tuple<Any, char> LUA_NATIVE_NETWORK_NETWORK_CLAN_GET_UI_FORMATTED_TAG( Any clanDesc, int bufferSize, char formattedTag )
	{
		std::tuple<Any, char> return_values;
		NETWORK::NETWORK_CLAN_GET_UI_FORMATTED_TAG(&clanDesc, bufferSize, &formattedTag);
		std::get<0>(return_values) = clanDesc;
		std::get<1>(return_values) = formattedTag;

		return return_values;
	}

	int LUA_NATIVE_NETWORK_NETWORK_CLAN_GET_LOCAL_MEMBERSHIPS_COUNT(  )
	{
		auto retval = NETWORK::NETWORK_CLAN_GET_LOCAL_MEMBERSHIPS_COUNT();
		return retval;
	}

	std::tuple<bool, Any> LUA_NATIVE_NETWORK_NETWORK_CLAN_GET_MEMBERSHIP_DESC( Any memberDesc, int p1 )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::NETWORK_CLAN_GET_MEMBERSHIP_DESC(&memberDesc, p1);
		std::get<1>(return_values) = memberDesc;

		return return_values;
	}

	std::tuple<bool, Any> LUA_NATIVE_NETWORK_NETWORK_CLAN_DOWNLOAD_MEMBERSHIP( Any gamerHandle )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::NETWORK_CLAN_DOWNLOAD_MEMBERSHIP(&gamerHandle);
		std::get<1>(return_values) = gamerHandle;

		return return_values;
	}

	std::tuple<bool, Any> LUA_NATIVE_NETWORK_NETWORK_CLAN_DOWNLOAD_MEMBERSHIP_PENDING( Any p0 )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::NETWORK_CLAN_DOWNLOAD_MEMBERSHIP_PENDING(&p0);
		std::get<1>(return_values) = p0;

		return return_values;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_CLAN_ANY_DOWNLOAD_MEMBERSHIP_PENDING(  )
	{
		auto retval = (bool)NETWORK::NETWORK_CLAN_ANY_DOWNLOAD_MEMBERSHIP_PENDING();
		return retval;
	}

	std::tuple<bool, int> LUA_NATIVE_NETWORK_NETWORK_CLAN_REMOTE_MEMBERSHIPS_ARE_IN_CACHE( int p0 )
	{
		std::tuple<bool, int> return_values;
		std::get<0>(return_values) = (bool)NETWORK::NETWORK_CLAN_REMOTE_MEMBERSHIPS_ARE_IN_CACHE(&p0);
		std::get<1>(return_values) = p0;

		return return_values;
	}

	std::tuple<int, int> LUA_NATIVE_NETWORK_NETWORK_CLAN_GET_MEMBERSHIP_COUNT( int p0 )
	{
		std::tuple<int, int> return_values;
		std::get<0>(return_values) = NETWORK::NETWORK_CLAN_GET_MEMBERSHIP_COUNT(&p0);
		std::get<1>(return_values) = p0;

		return return_values;
	}

	std::tuple<bool, int> LUA_NATIVE_NETWORK_NETWORK_CLAN_GET_MEMBERSHIP_VALID( int p0, Any p1 )
	{
		std::tuple<bool, int> return_values;
		std::get<0>(return_values) = (bool)NETWORK::NETWORK_CLAN_GET_MEMBERSHIP_VALID(&p0, p1);
		std::get<1>(return_values) = p0;

		return return_values;
	}

	std::tuple<bool, int, Any> LUA_NATIVE_NETWORK_NETWORK_CLAN_GET_MEMBERSHIP( int p0, Any clanMembership, int p2 )
	{
		std::tuple<bool, int, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::NETWORK_CLAN_GET_MEMBERSHIP(&p0, &clanMembership, p2);
		std::get<1>(return_values) = p0;
		std::get<2>(return_values) = clanMembership;

		return return_values;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_CLAN_JOIN( int clanDesc )
	{
		auto retval = (bool)NETWORK::NETWORK_CLAN_JOIN(clanDesc);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_CLAN_CREWINFO_GET_STRING_VALUE( const char* animDict, const char* animName )
	{
		auto retval = (bool)NETWORK::NETWORK_CLAN_CREWINFO_GET_STRING_VALUE(animDict, animName);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_CLAN_CREWINFO_GET_CREWRANKTITLE( int p0, const char* p1 )
	{
		auto retval = (bool)NETWORK::NETWORK_CLAN_CREWINFO_GET_CREWRANKTITLE(p0, p1);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_CLAN_HAS_CREWINFO_METADATA_BEEN_RECEIVED(  )
	{
		auto retval = (bool)NETWORK::NETWORK_CLAN_HAS_CREWINFO_METADATA_BEEN_RECEIVED();
		return retval;
	}

	std::tuple<bool, Any, char> LUA_NATIVE_NETWORK_NETWORK_CLAN_GET_EMBLEM_TXD_NAME( Any netHandle, char txdName )
	{
		std::tuple<bool, Any, char> return_values;
		std::get<0>(return_values) = (bool)NETWORK::NETWORK_CLAN_GET_EMBLEM_TXD_NAME(&netHandle, &txdName);
		std::get<1>(return_values) = netHandle;
		std::get<2>(return_values) = txdName;

		return return_values;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_CLAN_REQUEST_EMBLEM( Any p0 )
	{
		auto retval = (bool)NETWORK::NETWORK_CLAN_REQUEST_EMBLEM(p0);
		return retval;
	}

	std::tuple<bool, Any> LUA_NATIVE_NETWORK_NETWORK_CLAN_IS_EMBLEM_READY( Any p0, Any p1 )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::NETWORK_CLAN_IS_EMBLEM_READY(p0, &p1);
		std::get<1>(return_values) = p1;

		return return_values;
	}

	void LUA_NATIVE_NETWORK_NETWORK_CLAN_RELEASE_EMBLEM( Any p0 )
	{
		NETWORK::NETWORK_CLAN_RELEASE_EMBLEM(p0);
	}

	bool LUA_NATIVE_NETWORK_NETWORK_GET_PRIMARY_CLAN_DATA_CLEAR(  )
	{
		auto retval = (bool)NETWORK::NETWORK_GET_PRIMARY_CLAN_DATA_CLEAR();
		return retval;
	}

	void LUA_NATIVE_NETWORK_NETWORK_GET_PRIMARY_CLAN_DATA_CANCEL(  )
	{
		NETWORK::NETWORK_GET_PRIMARY_CLAN_DATA_CANCEL();
	}

	std::tuple<bool, Any> LUA_NATIVE_NETWORK_NETWORK_GET_PRIMARY_CLAN_DATA_START( Any p0, Any p1 )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::NETWORK_GET_PRIMARY_CLAN_DATA_START(&p0, p1);
		std::get<1>(return_values) = p0;

		return return_values;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_GET_PRIMARY_CLAN_DATA_PENDING(  )
	{
		auto retval = (bool)NETWORK::NETWORK_GET_PRIMARY_CLAN_DATA_PENDING();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_GET_PRIMARY_CLAN_DATA_SUCCESS(  )
	{
		auto retval = (bool)NETWORK::NETWORK_GET_PRIMARY_CLAN_DATA_SUCCESS();
		return retval;
	}

	std::tuple<bool, Any, Any> LUA_NATIVE_NETWORK_NETWORK_GET_PRIMARY_CLAN_DATA_NEW( Any p0, Any p1 )
	{
		std::tuple<bool, Any, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::NETWORK_GET_PRIMARY_CLAN_DATA_NEW(&p0, &p1);
		std::get<1>(return_values) = p0;
		std::get<2>(return_values) = p1;

		return return_values;
	}

	void LUA_NATIVE_NETWORK_SET_NETWORK_ID_CAN_MIGRATE( int netId, bool toggle )
	{
		NETWORK::SET_NETWORK_ID_CAN_MIGRATE(netId, toggle);
	}

	void LUA_NATIVE_NETWORK_SET_NETWORK_ID_EXISTS_ON_ALL_MACHINES( int netId, bool toggle )
	{
		NETWORK::SET_NETWORK_ID_EXISTS_ON_ALL_MACHINES(netId, toggle);
	}

	void LUA_NATIVE_NETWORK_SET_NETWORK_ID_ALWAYS_EXISTS_FOR_PLAYER( int netId, Player player, bool toggle )
	{
		NETWORK::SET_NETWORK_ID_ALWAYS_EXISTS_FOR_PLAYER(netId, player, toggle);
	}

	void LUA_NATIVE_NETWORK_SET_NETWORK_ID_CAN_BE_REASSIGNED( int netId, bool toggle )
	{
		NETWORK::SET_NETWORK_ID_CAN_BE_REASSIGNED(netId, toggle);
	}

	void LUA_NATIVE_NETWORK_NETWORK_SET_ENTITY_CAN_BLEND( Entity entity, bool toggle )
	{
		NETWORK::NETWORK_SET_ENTITY_CAN_BLEND(entity, toggle);
	}

	void LUA_NATIVE_NETWORK_NETWORK_SET_OBJECT_CAN_BLEND_WHEN_FIXED( Object object, bool toggle )
	{
		NETWORK::NETWORK_SET_OBJECT_CAN_BLEND_WHEN_FIXED(object, toggle);
	}

	void LUA_NATIVE_NETWORK_NETWORK_SET_ENTITY_ONLY_EXISTS_FOR_PARTICIPANTS( Entity entity, bool toggle )
	{
		NETWORK::NETWORK_SET_ENTITY_ONLY_EXISTS_FOR_PARTICIPANTS(entity, toggle);
	}

	void LUA_NATIVE_NETWORK_SET_NETWORK_ID_VISIBLE_IN_CUTSCENE( int netId, bool p1, bool p2 )
	{
		NETWORK::SET_NETWORK_ID_VISIBLE_IN_CUTSCENE(netId, p1, p2);
	}

	void LUA_NATIVE_NETWORK_SET_NETWORK_ID_VISIBLE_IN_CUTSCENE_HACK( int netId, bool p1, bool p2 )
	{
		NETWORK::SET_NETWORK_ID_VISIBLE_IN_CUTSCENE_HACK(netId, p1, p2);
	}

	void LUA_NATIVE_NETWORK_SET_NETWORK_ID_VISIBLE_IN_CUTSCENE_REMAIN_HACK( Any p0, Any p1 )
	{
		NETWORK::SET_NETWORK_ID_VISIBLE_IN_CUTSCENE_REMAIN_HACK(p0, p1);
	}

	void LUA_NATIVE_NETWORK_SET_NETWORK_CUTSCENE_ENTITIES( bool toggle )
	{
		NETWORK::SET_NETWORK_CUTSCENE_ENTITIES(toggle);
	}

	bool LUA_NATIVE_NETWORK_ARE_CUTSCENE_ENTITIES_NETWORKED(  )
	{
		auto retval = (bool)NETWORK::ARE_CUTSCENE_ENTITIES_NETWORKED();
		return retval;
	}

	void LUA_NATIVE_NETWORK_SET_NETWORK_ID_PASS_CONTROL_IN_TUTORIAL( int netId, bool state )
	{
		NETWORK::SET_NETWORK_ID_PASS_CONTROL_IN_TUTORIAL(netId, state);
	}

	bool LUA_NATIVE_NETWORK_IS_NETWORK_ID_OWNED_BY_PARTICIPANT( int netId )
	{
		auto retval = (bool)NETWORK::IS_NETWORK_ID_OWNED_BY_PARTICIPANT(netId);
		return retval;
	}

	void LUA_NATIVE_NETWORK_SET_REMOTE_PLAYER_VISIBLE_IN_CUTSCENE( Player player, bool locallyVisible )
	{
		NETWORK::SET_REMOTE_PLAYER_VISIBLE_IN_CUTSCENE(player, locallyVisible);
	}

	void LUA_NATIVE_NETWORK_SET_LOCAL_PLAYER_VISIBLE_IN_CUTSCENE( bool p0, bool p1 )
	{
		NETWORK::SET_LOCAL_PLAYER_VISIBLE_IN_CUTSCENE(p0, p1);
	}

	void LUA_NATIVE_NETWORK_SET_LOCAL_PLAYER_INVISIBLE_LOCALLY( bool bIncludePlayersVehicle )
	{
		NETWORK::SET_LOCAL_PLAYER_INVISIBLE_LOCALLY(bIncludePlayersVehicle);
	}

	void LUA_NATIVE_NETWORK_SET_LOCAL_PLAYER_VISIBLE_LOCALLY( bool bIncludePlayersVehicle )
	{
		NETWORK::SET_LOCAL_PLAYER_VISIBLE_LOCALLY(bIncludePlayersVehicle);
	}

	void LUA_NATIVE_NETWORK_SET_PLAYER_INVISIBLE_LOCALLY( Player player, bool bIncludePlayersVehicle )
	{
		NETWORK::SET_PLAYER_INVISIBLE_LOCALLY(player, bIncludePlayersVehicle);
	}

	void LUA_NATIVE_NETWORK_SET_PLAYER_VISIBLE_LOCALLY( Player player, bool bIncludePlayersVehicle )
	{
		NETWORK::SET_PLAYER_VISIBLE_LOCALLY(player, bIncludePlayersVehicle);
	}

	void LUA_NATIVE_NETWORK_FADE_OUT_LOCAL_PLAYER( bool p0 )
	{
		NETWORK::FADE_OUT_LOCAL_PLAYER(p0);
	}

	void LUA_NATIVE_NETWORK_NETWORK_FADE_OUT_ENTITY( Entity entity, bool normal, bool slow )
	{
		NETWORK::NETWORK_FADE_OUT_ENTITY(entity, normal, slow);
	}

	void LUA_NATIVE_NETWORK_NETWORK_FADE_IN_ENTITY( Entity entity, bool state, Any p2 )
	{
		NETWORK::NETWORK_FADE_IN_ENTITY(entity, state, p2);
	}

	bool LUA_NATIVE_NETWORK_NETWORK_IS_PLAYER_FADING( Player player )
	{
		auto retval = (bool)NETWORK::NETWORK_IS_PLAYER_FADING(player);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_IS_ENTITY_FADING( Entity entity )
	{
		auto retval = (bool)NETWORK::NETWORK_IS_ENTITY_FADING(entity);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_IS_PLAYER_IN_CUTSCENE( Player player )
	{
		auto retval = (bool)NETWORK::IS_PLAYER_IN_CUTSCENE(player);
		return retval;
	}

	void LUA_NATIVE_NETWORK_SET_ENTITY_VISIBLE_IN_CUTSCENE( Any p0, bool p1, bool p2 )
	{
		NETWORK::SET_ENTITY_VISIBLE_IN_CUTSCENE(p0, p1, p2);
	}

	void LUA_NATIVE_NETWORK_SET_ENTITY_LOCALLY_INVISIBLE( Entity entity )
	{
		NETWORK::SET_ENTITY_LOCALLY_INVISIBLE(entity);
	}

	void LUA_NATIVE_NETWORK_SET_ENTITY_LOCALLY_VISIBLE( Entity entity )
	{
		NETWORK::SET_ENTITY_LOCALLY_VISIBLE(entity);
	}

	bool LUA_NATIVE_NETWORK_IS_DAMAGE_TRACKER_ACTIVE_ON_NETWORK_ID( int netID )
	{
		auto retval = (bool)NETWORK::IS_DAMAGE_TRACKER_ACTIVE_ON_NETWORK_ID(netID);
		return retval;
	}

	void LUA_NATIVE_NETWORK_ACTIVATE_DAMAGE_TRACKER_ON_NETWORK_ID( int netID, bool toggle )
	{
		NETWORK::ACTIVATE_DAMAGE_TRACKER_ON_NETWORK_ID(netID, toggle);
	}

	bool LUA_NATIVE_NETWORK_IS_DAMAGE_TRACKER_ACTIVE_ON_PLAYER( Player player )
	{
		auto retval = (bool)NETWORK::IS_DAMAGE_TRACKER_ACTIVE_ON_PLAYER(player);
		return retval;
	}

	void LUA_NATIVE_NETWORK_ACTIVATE_DAMAGE_TRACKER_ON_PLAYER( Player player, bool toggle )
	{
		NETWORK::ACTIVATE_DAMAGE_TRACKER_ON_PLAYER(player, toggle);
	}

	bool LUA_NATIVE_NETWORK_IS_SPHERE_VISIBLE_TO_ANOTHER_MACHINE( float p0, float p1, float p2, float p3 )
	{
		auto retval = (bool)NETWORK::IS_SPHERE_VISIBLE_TO_ANOTHER_MACHINE(p0, p1, p2, p3);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_IS_SPHERE_VISIBLE_TO_PLAYER( Any p0, float p1, float p2, float p3, float p4 )
	{
		auto retval = (bool)NETWORK::IS_SPHERE_VISIBLE_TO_PLAYER(p0, p1, p2, p3, p4);
		return retval;
	}

	void LUA_NATIVE_NETWORK_RESERVE_NETWORK_MISSION_OBJECTS( int amount )
	{
		NETWORK::RESERVE_NETWORK_MISSION_OBJECTS(amount);
	}

	void LUA_NATIVE_NETWORK_RESERVE_NETWORK_MISSION_PEDS( int amount )
	{
		NETWORK::RESERVE_NETWORK_MISSION_PEDS(amount);
	}

	void LUA_NATIVE_NETWORK_RESERVE_NETWORK_MISSION_VEHICLES( int amount )
	{
		NETWORK::RESERVE_NETWORK_MISSION_VEHICLES(amount);
	}

	void LUA_NATIVE_NETWORK_RESERVE_LOCAL_NETWORK_MISSION_OBJECTS( int amount )
	{
		NETWORK::RESERVE_LOCAL_NETWORK_MISSION_OBJECTS(amount);
	}

	void LUA_NATIVE_NETWORK_RESERVE_LOCAL_NETWORK_MISSION_PEDS( int amount )
	{
		NETWORK::RESERVE_LOCAL_NETWORK_MISSION_PEDS(amount);
	}

	void LUA_NATIVE_NETWORK_RESERVE_LOCAL_NETWORK_MISSION_VEHICLES( int amount )
	{
		NETWORK::RESERVE_LOCAL_NETWORK_MISSION_VEHICLES(amount);
	}

	bool LUA_NATIVE_NETWORK_CAN_REGISTER_MISSION_OBJECTS( int amount )
	{
		auto retval = (bool)NETWORK::CAN_REGISTER_MISSION_OBJECTS(amount);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_CAN_REGISTER_MISSION_PEDS( int amount )
	{
		auto retval = (bool)NETWORK::CAN_REGISTER_MISSION_PEDS(amount);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_CAN_REGISTER_MISSION_VEHICLES( int amount )
	{
		auto retval = (bool)NETWORK::CAN_REGISTER_MISSION_VEHICLES(amount);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_CAN_REGISTER_MISSION_PICKUPS( int amount )
	{
		auto retval = (bool)NETWORK::CAN_REGISTER_MISSION_PICKUPS(amount);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_CAN_REGISTER_MISSION_DOORS( Any p0 )
	{
		auto retval = (bool)NETWORK::CAN_REGISTER_MISSION_DOORS(p0);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_CAN_REGISTER_MISSION_ENTITIES( int ped_amt, int vehicle_amt, int object_amt, int pickup_amt )
	{
		auto retval = (bool)NETWORK::CAN_REGISTER_MISSION_ENTITIES(ped_amt, vehicle_amt, object_amt, pickup_amt);
		return retval;
	}

	int LUA_NATIVE_NETWORK_GET_NUM_RESERVED_MISSION_OBJECTS( bool p0, Any p1 )
	{
		auto retval = NETWORK::GET_NUM_RESERVED_MISSION_OBJECTS(p0, p1);
		return retval;
	}

	int LUA_NATIVE_NETWORK_GET_NUM_RESERVED_MISSION_PEDS( bool p0, Any p1 )
	{
		auto retval = NETWORK::GET_NUM_RESERVED_MISSION_PEDS(p0, p1);
		return retval;
	}

	int LUA_NATIVE_NETWORK_GET_NUM_RESERVED_MISSION_VEHICLES( bool p0, Any p1 )
	{
		auto retval = NETWORK::GET_NUM_RESERVED_MISSION_VEHICLES(p0, p1);
		return retval;
	}

	int LUA_NATIVE_NETWORK_GET_NUM_CREATED_MISSION_OBJECTS( bool p0 )
	{
		auto retval = NETWORK::GET_NUM_CREATED_MISSION_OBJECTS(p0);
		return retval;
	}

	int LUA_NATIVE_NETWORK_GET_NUM_CREATED_MISSION_PEDS( bool p0 )
	{
		auto retval = NETWORK::GET_NUM_CREATED_MISSION_PEDS(p0);
		return retval;
	}

	int LUA_NATIVE_NETWORK_GET_NUM_CREATED_MISSION_VEHICLES( bool p0 )
	{
		auto retval = NETWORK::GET_NUM_CREATED_MISSION_VEHICLES(p0);
		return retval;
	}

	std::tuple<Any, Any, Any> LUA_NATIVE_NETWORK_GET_RESERVED_MISSION_ENTITIES_IN_AREA( float x, float y, float z, Any p3, Any out1, Any out2, Any out3 )
	{
		std::tuple<Any, Any, Any> return_values;
		NETWORK::GET_RESERVED_MISSION_ENTITIES_IN_AREA(x, y, z, p3, &out1, &out2, &out3);
		std::get<0>(return_values) = out1;
		std::get<1>(return_values) = out2;
		std::get<2>(return_values) = out3;

		return return_values;
	}

	int LUA_NATIVE_NETWORK_GET_MAX_NUM_NETWORK_OBJECTS(  )
	{
		auto retval = NETWORK::GET_MAX_NUM_NETWORK_OBJECTS();
		return retval;
	}

	int LUA_NATIVE_NETWORK_GET_MAX_NUM_NETWORK_PEDS(  )
	{
		auto retval = NETWORK::GET_MAX_NUM_NETWORK_PEDS();
		return retval;
	}

	int LUA_NATIVE_NETWORK_GET_MAX_NUM_NETWORK_VEHICLES(  )
	{
		auto retval = NETWORK::GET_MAX_NUM_NETWORK_VEHICLES();
		return retval;
	}

	int LUA_NATIVE_NETWORK_GET_MAX_NUM_NETWORK_PICKUPS(  )
	{
		auto retval = NETWORK::GET_MAX_NUM_NETWORK_PICKUPS();
		return retval;
	}

	void LUA_NATIVE_NETWORK_NETWORK_SET_OBJECT_SCOPE_DISTANCE( Object object, float range )
	{
		NETWORK::NETWORK_SET_OBJECT_SCOPE_DISTANCE(object, range);
	}

	void LUA_NATIVE_NETWORK_NETWORK_ALLOW_CLONING_WHILE_IN_TUTORIAL( Any p0, Any p1 )
	{
		NETWORK::NETWORK_ALLOW_CLONING_WHILE_IN_TUTORIAL(p0, p1);
	}

	void LUA_NATIVE_NETWORK_NETWORK_SET_TASK_CUTSCENE_INSCOPE_MULTIPLER( Any p0 )
	{
		NETWORK::NETWORK_SET_TASK_CUTSCENE_INSCOPE_MULTIPLER(p0);
	}

	int LUA_NATIVE_NETWORK_GET_NETWORK_TIME(  )
	{
		auto retval = NETWORK::GET_NETWORK_TIME();
		return retval;
	}

	int LUA_NATIVE_NETWORK_GET_NETWORK_TIME_ACCURATE(  )
	{
		auto retval = NETWORK::GET_NETWORK_TIME_ACCURATE();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_HAS_NETWORK_TIME_STARTED(  )
	{
		auto retval = (bool)NETWORK::HAS_NETWORK_TIME_STARTED();
		return retval;
	}

	int LUA_NATIVE_NETWORK_GET_TIME_OFFSET( int timeA, int timeB )
	{
		auto retval = NETWORK::GET_TIME_OFFSET(timeA, timeB);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_IS_TIME_LESS_THAN( int timeA, int timeB )
	{
		auto retval = (bool)NETWORK::IS_TIME_LESS_THAN(timeA, timeB);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_IS_TIME_MORE_THAN( int timeA, int timeB )
	{
		auto retval = (bool)NETWORK::IS_TIME_MORE_THAN(timeA, timeB);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_IS_TIME_EQUAL_TO( int timeA, int timeB )
	{
		auto retval = (bool)NETWORK::IS_TIME_EQUAL_TO(timeA, timeB);
		return retval;
	}

	int LUA_NATIVE_NETWORK_GET_TIME_DIFFERENCE( int timeA, int timeB )
	{
		auto retval = NETWORK::GET_TIME_DIFFERENCE(timeA, timeB);
		return retval;
	}

	const char* LUA_NATIVE_NETWORK_GET_TIME_AS_STRING( int time )
	{
		auto retval = NETWORK::GET_TIME_AS_STRING(time);
		return retval;
	}

	const char* LUA_NATIVE_NETWORK_GET_CLOUD_TIME_AS_STRING(  )
	{
		auto retval = NETWORK::GET_CLOUD_TIME_AS_STRING();
		return retval;
	}

	int LUA_NATIVE_NETWORK_GET_CLOUD_TIME_AS_INT(  )
	{
		auto retval = NETWORK::GET_CLOUD_TIME_AS_INT();
		return retval;
	}

	Any LUA_NATIVE_NETWORK_CONVERT_POSIX_TIME( int posixTime, Any timeStructure )
	{
		NETWORK::CONVERT_POSIX_TIME(posixTime, &timeStructure);
		return timeStructure;
	}

	void LUA_NATIVE_NETWORK_NETWORK_SET_IN_SPECTATOR_MODE( bool toggle, Ped playerPed )
	{
		NETWORK::NETWORK_SET_IN_SPECTATOR_MODE(toggle, playerPed);
	}

	void LUA_NATIVE_NETWORK_NETWORK_SET_IN_SPECTATOR_MODE_EXTENDED( bool toggle, Ped playerPed, bool p2 )
	{
		NETWORK::NETWORK_SET_IN_SPECTATOR_MODE_EXTENDED(toggle, playerPed, p2);
	}

	void LUA_NATIVE_NETWORK_NETWORK_SET_IN_FREE_CAM_MODE( bool toggle )
	{
		NETWORK::NETWORK_SET_IN_FREE_CAM_MODE(toggle);
	}

	void LUA_NATIVE_NETWORK_NETWORK_SET_ANTAGONISTIC_TO_PLAYER( bool toggle, Player player )
	{
		NETWORK::NETWORK_SET_ANTAGONISTIC_TO_PLAYER(toggle, player);
	}

	bool LUA_NATIVE_NETWORK_NETWORK_IS_IN_SPECTATOR_MODE(  )
	{
		auto retval = (bool)NETWORK::NETWORK_IS_IN_SPECTATOR_MODE();
		return retval;
	}

	void LUA_NATIVE_NETWORK_NETWORK_SET_IN_MP_CUTSCENE( bool p0, bool p1 )
	{
		NETWORK::NETWORK_SET_IN_MP_CUTSCENE(p0, p1);
	}

	bool LUA_NATIVE_NETWORK_NETWORK_IS_IN_MP_CUTSCENE(  )
	{
		auto retval = (bool)NETWORK::NETWORK_IS_IN_MP_CUTSCENE();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_IS_PLAYER_IN_MP_CUTSCENE( Player player )
	{
		auto retval = (bool)NETWORK::NETWORK_IS_PLAYER_IN_MP_CUTSCENE(player);
		return retval;
	}

	void LUA_NATIVE_NETWORK_NETWORK_HIDE_PROJECTILE_IN_CUTSCENE(  )
	{
		NETWORK::NETWORK_HIDE_PROJECTILE_IN_CUTSCENE();
	}

	void LUA_NATIVE_NETWORK_SET_NETWORK_VEHICLE_RESPOT_TIMER( int netId, int time, Any p2, Any p3 )
	{
		NETWORK::SET_NETWORK_VEHICLE_RESPOT_TIMER(netId, time, p2, p3);
	}

	bool LUA_NATIVE_NETWORK_IS_NETWORK_VEHICLE_RUNNING_RESPOT_TIMER( int networkID )
	{
		auto retval = (bool)NETWORK::IS_NETWORK_VEHICLE_RUNNING_RESPOT_TIMER(networkID);
		return retval;
	}

	void LUA_NATIVE_NETWORK_SET_NETWORK_VEHICLE_AS_GHOST( Vehicle vehicle, bool toggle )
	{
		NETWORK::SET_NETWORK_VEHICLE_AS_GHOST(vehicle, toggle);
	}

	void LUA_NATIVE_NETWORK_SET_NETWORK_VEHICLE_MAX_POSITION_DELTA_MULTIPLIER( Vehicle vehicle, float multiplier )
	{
		NETWORK::SET_NETWORK_VEHICLE_MAX_POSITION_DELTA_MULTIPLIER(vehicle, multiplier);
	}

	void LUA_NATIVE_NETWORK_SET_NETWORK_ENABLE_HIGH_SPEED_EDGE_FALL_DETECTION( Vehicle vehicle, bool toggle )
	{
		NETWORK::SET_NETWORK_ENABLE_HIGH_SPEED_EDGE_FALL_DETECTION(vehicle, toggle);
	}

	void LUA_NATIVE_NETWORK_SET_LOCAL_PLAYER_AS_GHOST( bool toggle, bool p1 )
	{
		NETWORK::SET_LOCAL_PLAYER_AS_GHOST(toggle, p1);
	}

	bool LUA_NATIVE_NETWORK_IS_ENTITY_A_GHOST( Entity entity )
	{
		auto retval = (bool)NETWORK::IS_ENTITY_A_GHOST(entity);
		return retval;
	}

	void LUA_NATIVE_NETWORK_SET_NON_PARTICIPANTS_OF_THIS_SCRIPT_AS_GHOSTS( bool p0 )
	{
		NETWORK::SET_NON_PARTICIPANTS_OF_THIS_SCRIPT_AS_GHOSTS(p0);
	}

	void LUA_NATIVE_NETWORK_SET_REMOTE_PLAYER_AS_GHOST( Player player, bool p1 )
	{
		NETWORK::SET_REMOTE_PLAYER_AS_GHOST(player, p1);
	}

	void LUA_NATIVE_NETWORK_SET_GHOST_ALPHA( int alpha )
	{
		NETWORK::SET_GHOST_ALPHA(alpha);
	}

	void LUA_NATIVE_NETWORK_RESET_GHOST_ALPHA(  )
	{
		NETWORK::RESET_GHOST_ALPHA();
	}

	void LUA_NATIVE_NETWORK_SET_ENTITY_GHOSTED_FOR_GHOST_PLAYERS( Entity entity, bool toggle )
	{
		NETWORK::SET_ENTITY_GHOSTED_FOR_GHOST_PLAYERS(entity, toggle);
	}

	void LUA_NATIVE_NETWORK_SET_INVERT_GHOSTING( bool p0 )
	{
		NETWORK::SET_INVERT_GHOSTING(p0);
	}

	bool LUA_NATIVE_NETWORK_IS_ENTITY_IN_GHOST_COLLISION( Entity entity )
	{
		auto retval = (bool)NETWORK::IS_ENTITY_IN_GHOST_COLLISION(entity);
		return retval;
	}

	void LUA_NATIVE_NETWORK_USE_PLAYER_COLOUR_INSTEAD_OF_TEAM_COLOUR( bool toggle )
	{
		NETWORK::USE_PLAYER_COLOUR_INSTEAD_OF_TEAM_COLOUR(toggle);
	}

	int LUA_NATIVE_NETWORK_NETWORK_CREATE_SYNCHRONISED_SCENE( float x, float y, float z, float xRot, float yRot, float zRot, int rotationOrder, bool useOcclusionPortal, bool looped, float p9, float animTime, float p11 )
	{
		auto retval = NETWORK::NETWORK_CREATE_SYNCHRONISED_SCENE(x, y, z, xRot, yRot, zRot, rotationOrder, useOcclusionPortal, looped, p9, animTime, p11);
		return retval;
	}

	void LUA_NATIVE_NETWORK_NETWORK_ADD_PED_TO_SYNCHRONISED_SCENE( Ped ped, int netScene, const char* animDict, const char* animnName, float speed, float speedMultiplier, int duration, int flag, float playbackRate, Any p9 )
	{
		NETWORK::NETWORK_ADD_PED_TO_SYNCHRONISED_SCENE(ped, netScene, animDict, animnName, speed, speedMultiplier, duration, flag, playbackRate, p9);
	}

	void LUA_NATIVE_NETWORK_NETWORK_ADD_PED_TO_SYNCHRONISED_SCENE_WITH_IK( Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9 )
	{
		NETWORK::NETWORK_ADD_PED_TO_SYNCHRONISED_SCENE_WITH_IK(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
	}

	void LUA_NATIVE_NETWORK_NETWORK_ADD_ENTITY_TO_SYNCHRONISED_SCENE( Entity entity, int netScene, const char* animDict, const char* animName, float speed, float speedMulitiplier, int flag )
	{
		NETWORK::NETWORK_ADD_ENTITY_TO_SYNCHRONISED_SCENE(entity, netScene, animDict, animName, speed, speedMulitiplier, flag);
	}

	void LUA_NATIVE_NETWORK_NETWORK_ADD_MAP_ENTITY_TO_SYNCHRONISED_SCENE( int netScene, Hash modelHash, float x, float y, float z, float p5, const char* p6, float p7, float p8, int flags )
	{
		NETWORK::NETWORK_ADD_MAP_ENTITY_TO_SYNCHRONISED_SCENE(netScene, modelHash, x, y, z, p5, p6, p7, p8, flags);
	}

	void LUA_NATIVE_NETWORK_NETWORK_ADD_SYNCHRONISED_SCENE_CAMERA( int netScene, const char* animDict, const char* animName )
	{
		NETWORK::NETWORK_ADD_SYNCHRONISED_SCENE_CAMERA(netScene, animDict, animName);
	}

	void LUA_NATIVE_NETWORK_NETWORK_ATTACH_SYNCHRONISED_SCENE_TO_ENTITY( int netScene, Entity entity, int bone )
	{
		NETWORK::NETWORK_ATTACH_SYNCHRONISED_SCENE_TO_ENTITY(netScene, entity, bone);
	}

	void LUA_NATIVE_NETWORK_NETWORK_START_SYNCHRONISED_SCENE( int netScene )
	{
		NETWORK::NETWORK_START_SYNCHRONISED_SCENE(netScene);
	}

	void LUA_NATIVE_NETWORK_NETWORK_STOP_SYNCHRONISED_SCENE( int netScene )
	{
		NETWORK::NETWORK_STOP_SYNCHRONISED_SCENE(netScene);
	}

	int LUA_NATIVE_NETWORK_NETWORK_GET_LOCAL_SCENE_FROM_NETWORK_ID( int netId )
	{
		auto retval = NETWORK::NETWORK_GET_LOCAL_SCENE_FROM_NETWORK_ID(netId);
		return retval;
	}

	void LUA_NATIVE_NETWORK_NETWORK_FORCE_LOCAL_USE_OF_SYNCED_SCENE_CAMERA( int netScene )
	{
		NETWORK::NETWORK_FORCE_LOCAL_USE_OF_SYNCED_SCENE_CAMERA(netScene);
	}

	void LUA_NATIVE_NETWORK_NETWORK_ALLOW_REMOTE_SYNCED_SCENE_LOCAL_PLAYER_REQUESTS( Any p0 )
	{
		NETWORK::NETWORK_ALLOW_REMOTE_SYNCED_SCENE_LOCAL_PLAYER_REQUESTS(p0);
	}

	bool LUA_NATIVE_NETWORK_NETWORK_FIND_LARGEST_BUNCH_OF_PLAYERS( int p0, Any p1 )
	{
		auto retval = (bool)NETWORK::NETWORK_FIND_LARGEST_BUNCH_OF_PLAYERS(p0, p1);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_START_RESPAWN_SEARCH_FOR_PLAYER( Player player, float x, float y, float z, float radius, float p5, float p6, float p7, int flags )
	{
		auto retval = (bool)NETWORK::NETWORK_START_RESPAWN_SEARCH_FOR_PLAYER(player, x, y, z, radius, p5, p6, p7, flags);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_START_RESPAWN_SEARCH_IN_ANGLED_AREA_FOR_PLAYER( Player player, float x1, float y1, float z1, float x2, float y2, float z2, float width, float p8, float p9, float p10, int flags )
	{
		auto retval = (bool)NETWORK::NETWORK_START_RESPAWN_SEARCH_IN_ANGLED_AREA_FOR_PLAYER(player, x1, y1, z1, x2, y2, z2, width, p8, p9, p10, flags);
		return retval;
	}

	std::tuple<int, Any> LUA_NATIVE_NETWORK_NETWORK_QUERY_RESPAWN_RESULTS( Any p0 )
	{
		std::tuple<int, Any> return_values;
		std::get<0>(return_values) = NETWORK::NETWORK_QUERY_RESPAWN_RESULTS(&p0);
		std::get<1>(return_values) = p0;

		return return_values;
	}

	void LUA_NATIVE_NETWORK_NETWORK_CANCEL_RESPAWN_SEARCH(  )
	{
		NETWORK::NETWORK_CANCEL_RESPAWN_SEARCH();
	}

	std::tuple<Vector3, float> LUA_NATIVE_NETWORK_NETWORK_GET_RESPAWN_RESULT( int randomInt, Vector3 coordinates, float heading )
	{
		std::tuple<Vector3, float> return_values;
		NETWORK::NETWORK_GET_RESPAWN_RESULT(randomInt, &coordinates, &heading);
		std::get<0>(return_values) = coordinates;
		std::get<1>(return_values) = heading;

		return return_values;
	}

	int LUA_NATIVE_NETWORK_NETWORK_GET_RESPAWN_RESULT_FLAGS( int p0 )
	{
		auto retval = NETWORK::NETWORK_GET_RESPAWN_RESULT_FLAGS(p0);
		return retval;
	}

	void LUA_NATIVE_NETWORK_NETWORK_START_SOLO_TUTORIAL_SESSION(  )
	{
		NETWORK::NETWORK_START_SOLO_TUTORIAL_SESSION();
	}

	void LUA_NATIVE_NETWORK_NETWORK_ALLOW_GANG_TO_JOIN_TUTORIAL_SESSION( int teamId, int instanceId )
	{
		NETWORK::NETWORK_ALLOW_GANG_TO_JOIN_TUTORIAL_SESSION(teamId, instanceId);
	}

	void LUA_NATIVE_NETWORK_NETWORK_END_TUTORIAL_SESSION(  )
	{
		NETWORK::NETWORK_END_TUTORIAL_SESSION();
	}

	bool LUA_NATIVE_NETWORK_NETWORK_IS_IN_TUTORIAL_SESSION(  )
	{
		auto retval = (bool)NETWORK::NETWORK_IS_IN_TUTORIAL_SESSION();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_WAITING_POP_CLEAR_TUTORIAL_SESSION(  )
	{
		auto retval = (bool)NETWORK::NETWORK_WAITING_POP_CLEAR_TUTORIAL_SESSION();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_IS_TUTORIAL_SESSION_CHANGE_PENDING(  )
	{
		auto retval = (bool)NETWORK::NETWORK_IS_TUTORIAL_SESSION_CHANGE_PENDING();
		return retval;
	}

	int LUA_NATIVE_NETWORK_NETWORK_GET_PLAYER_TUTORIAL_SESSION_INSTANCE( Player player )
	{
		auto retval = NETWORK::NETWORK_GET_PLAYER_TUTORIAL_SESSION_INSTANCE(player);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_ARE_PLAYERS_IN_SAME_TUTORIAL_SESSION( Player player, int index )
	{
		auto retval = (bool)NETWORK::NETWORK_ARE_PLAYERS_IN_SAME_TUTORIAL_SESSION(player, index);
		return retval;
	}

	void LUA_NATIVE_NETWORK_NETWORK_BLOCK_PROXY_MIGRATION_BETWEEN_TUTORIAL_SESSIONS( Any p0 )
	{
		NETWORK::NETWORK_BLOCK_PROXY_MIGRATION_BETWEEN_TUTORIAL_SESSIONS(p0);
	}

	void LUA_NATIVE_NETWORK_NETWORK_CONCEAL_PLAYER( Player player, bool toggle, bool p2 )
	{
		NETWORK::NETWORK_CONCEAL_PLAYER(player, toggle, p2);
	}

	bool LUA_NATIVE_NETWORK_NETWORK_IS_PLAYER_CONCEALED( Player player )
	{
		auto retval = (bool)NETWORK::NETWORK_IS_PLAYER_CONCEALED(player);
		return retval;
	}

	void LUA_NATIVE_NETWORK_NETWORK_CONCEAL_ENTITY( Entity entity, bool toggle )
	{
		NETWORK::NETWORK_CONCEAL_ENTITY(entity, toggle);
	}

	bool LUA_NATIVE_NETWORK_NETWORK_IS_ENTITY_CONCEALED( Entity entity )
	{
		auto retval = (bool)NETWORK::NETWORK_IS_ENTITY_CONCEALED(entity);
		return retval;
	}

	void LUA_NATIVE_NETWORK_NETWORK_OVERRIDE_CLOCK_TIME( int hours, int minutes, int seconds )
	{
		NETWORK::NETWORK_OVERRIDE_CLOCK_TIME(hours, minutes, seconds);
	}

	void LUA_NATIVE_NETWORK_NETWORK_OVERRIDE_CLOCK_RATE( int ms )
	{
		NETWORK::NETWORK_OVERRIDE_CLOCK_RATE(ms);
	}

	void LUA_NATIVE_NETWORK_NETWORK_CLEAR_CLOCK_TIME_OVERRIDE(  )
	{
		NETWORK::NETWORK_CLEAR_CLOCK_TIME_OVERRIDE();
	}

	bool LUA_NATIVE_NETWORK_NETWORK_IS_CLOCK_TIME_OVERRIDDEN(  )
	{
		auto retval = (bool)NETWORK::NETWORK_IS_CLOCK_TIME_OVERRIDDEN();
		return retval;
	}

	int LUA_NATIVE_NETWORK_NETWORK_ADD_ENTITY_AREA( float x1, float y1, float z1, float x2, float y2, float z2 )
	{
		auto retval = NETWORK::NETWORK_ADD_ENTITY_AREA(x1, y1, z1, x2, y2, z2);
		return retval;
	}

	int LUA_NATIVE_NETWORK_NETWORK_ADD_ENTITY_ANGLED_AREA( float x1, float y1, float z1, float x2, float y2, float z2, float width )
	{
		auto retval = NETWORK::NETWORK_ADD_ENTITY_ANGLED_AREA(x1, y1, z1, x2, y2, z2, width);
		return retval;
	}

	int LUA_NATIVE_NETWORK_NETWORK_ADD_CLIENT_ENTITY_AREA( float x1, float y1, float z1, float x2, float y2, float z2 )
	{
		auto retval = NETWORK::NETWORK_ADD_CLIENT_ENTITY_AREA(x1, y1, z1, x2, y2, z2);
		return retval;
	}

	int LUA_NATIVE_NETWORK_NETWORK_ADD_CLIENT_ENTITY_ANGLED_AREA( float x1, float y1, float z1, float x2, float y2, float z2, float radius )
	{
		auto retval = NETWORK::NETWORK_ADD_CLIENT_ENTITY_ANGLED_AREA(x1, y1, z1, x2, y2, z2, radius);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_REMOVE_ENTITY_AREA( int areaHandle )
	{
		auto retval = (bool)NETWORK::NETWORK_REMOVE_ENTITY_AREA(areaHandle);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_ENTITY_AREA_DOES_EXIST( int areaHandle )
	{
		auto retval = (bool)NETWORK::NETWORK_ENTITY_AREA_DOES_EXIST(areaHandle);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_ENTITY_AREA_HAVE_ALL_REPLIED( int areaHandle )
	{
		auto retval = (bool)NETWORK::NETWORK_ENTITY_AREA_HAVE_ALL_REPLIED(areaHandle);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_ENTITY_AREA_IS_OCCUPIED( int areaHandle )
	{
		auto retval = (bool)NETWORK::NETWORK_ENTITY_AREA_IS_OCCUPIED(areaHandle);
		return retval;
	}

	void LUA_NATIVE_NETWORK_NETWORK_USE_HIGH_PRECISION_BLENDING( int netID, bool toggle )
	{
		NETWORK::NETWORK_USE_HIGH_PRECISION_BLENDING(netID, toggle);
	}

	void LUA_NATIVE_NETWORK_NETWORK_SET_CUSTOM_ARENA_BALL_PARAMS( int netId )
	{
		NETWORK::NETWORK_SET_CUSTOM_ARENA_BALL_PARAMS(netId);
	}

	void LUA_NATIVE_NETWORK_NETWORK_ENTITY_USE_HIGH_PRECISION_ROTATION( int netId, bool toggle )
	{
		NETWORK::NETWORK_ENTITY_USE_HIGH_PRECISION_ROTATION(netId, toggle);
	}

	bool LUA_NATIVE_NETWORK_NETWORK_REQUEST_CLOUD_BACKGROUND_SCRIPTS(  )
	{
		auto retval = (bool)NETWORK::NETWORK_REQUEST_CLOUD_BACKGROUND_SCRIPTS();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_IS_CLOUD_BACKGROUND_SCRIPT_REQUEST_PENDING(  )
	{
		auto retval = (bool)NETWORK::NETWORK_IS_CLOUD_BACKGROUND_SCRIPT_REQUEST_PENDING();
		return retval;
	}

	void LUA_NATIVE_NETWORK_NETWORK_REQUEST_CLOUD_TUNABLES(  )
	{
		NETWORK::NETWORK_REQUEST_CLOUD_TUNABLES();
	}

	bool LUA_NATIVE_NETWORK_NETWORK_IS_TUNABLE_CLOUD_REQUEST_PENDING(  )
	{
		auto retval = (bool)NETWORK::NETWORK_IS_TUNABLE_CLOUD_REQUEST_PENDING();
		return retval;
	}

	int LUA_NATIVE_NETWORK_NETWORK_GET_TUNABLE_CLOUD_CRC(  )
	{
		auto retval = NETWORK::NETWORK_GET_TUNABLE_CLOUD_CRC();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_DOES_TUNABLE_EXIST( const char* tunableContext, const char* tunableName )
	{
		auto retval = (bool)NETWORK::NETWORK_DOES_TUNABLE_EXIST(tunableContext, tunableName);
		return retval;
	}

	std::tuple<bool, int> LUA_NATIVE_NETWORK_NETWORK_ACCESS_TUNABLE_INT( const char* tunableContext, const char* tunableName, int value )
	{
		std::tuple<bool, int> return_values;
		std::get<0>(return_values) = (bool)NETWORK::NETWORK_ACCESS_TUNABLE_INT(tunableContext, tunableName, &value);
		std::get<1>(return_values) = value;

		return return_values;
	}

	std::tuple<bool, float> LUA_NATIVE_NETWORK_NETWORK_ACCESS_TUNABLE_FLOAT( const char* tunableContext, const char* tunableName, float value )
	{
		std::tuple<bool, float> return_values;
		std::get<0>(return_values) = (bool)NETWORK::NETWORK_ACCESS_TUNABLE_FLOAT(tunableContext, tunableName, &value);
		std::get<1>(return_values) = value;

		return return_values;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_ACCESS_TUNABLE_BOOL( const char* tunableContext, const char* tunableName )
	{
		auto retval = (bool)NETWORK::NETWORK_ACCESS_TUNABLE_BOOL(tunableContext, tunableName);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_DOES_TUNABLE_EXIST_HASH( Hash tunableContext, Hash tunableName )
	{
		auto retval = (bool)NETWORK::NETWORK_DOES_TUNABLE_EXIST_HASH(tunableContext, tunableName);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_ACCESS_TUNABLE_MODIFICATION_DETECTION_CLEAR(  )
	{
		auto retval = (bool)NETWORK::NETWORK_ACCESS_TUNABLE_MODIFICATION_DETECTION_CLEAR();
		return retval;
	}

	std::tuple<bool, int> LUA_NATIVE_NETWORK_NETWORK_ACCESS_TUNABLE_INT_HASH( Hash tunableContext, Hash tunableName, int value )
	{
		std::tuple<bool, int> return_values;
		std::get<0>(return_values) = (bool)NETWORK::NETWORK_ACCESS_TUNABLE_INT_HASH(tunableContext, tunableName, &value);
		std::get<1>(return_values) = value;

		return return_values;
	}

	std::tuple<bool, int> LUA_NATIVE_NETWORK_NETWORK_ACCESS_TUNABLE_INT_MODIFICATION_DETECTION_REGISTRATION_HASH( Hash contextHash, Hash nameHash, int value )
	{
		std::tuple<bool, int> return_values;
		std::get<0>(return_values) = (bool)NETWORK::NETWORK_ACCESS_TUNABLE_INT_MODIFICATION_DETECTION_REGISTRATION_HASH(contextHash, nameHash, &value);
		std::get<1>(return_values) = value;

		return return_values;
	}

	std::tuple<bool, float> LUA_NATIVE_NETWORK_NETWORK_ACCESS_TUNABLE_FLOAT_HASH( Hash tunableContext, Hash tunableName, float value )
	{
		std::tuple<bool, float> return_values;
		std::get<0>(return_values) = (bool)NETWORK::NETWORK_ACCESS_TUNABLE_FLOAT_HASH(tunableContext, tunableName, &value);
		std::get<1>(return_values) = value;

		return return_values;
	}

	std::tuple<bool, float> LUA_NATIVE_NETWORK_NETWORK_ACCESS_TUNABLE_FLOAT_MODIFICATION_DETECTION_REGISTRATION_HASH( Hash contextHash, Hash nameHash, float value )
	{
		std::tuple<bool, float> return_values;
		std::get<0>(return_values) = (bool)NETWORK::NETWORK_ACCESS_TUNABLE_FLOAT_MODIFICATION_DETECTION_REGISTRATION_HASH(contextHash, nameHash, &value);
		std::get<1>(return_values) = value;

		return return_values;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_ACCESS_TUNABLE_BOOL_HASH( Hash tunableContext, Hash tunableName )
	{
		auto retval = (bool)NETWORK::NETWORK_ACCESS_TUNABLE_BOOL_HASH(tunableContext, tunableName);
		return retval;
	}

	std::tuple<bool, bool> LUA_NATIVE_NETWORK_NETWORK_ACCESS_TUNABLE_BOOL_MODIFICATION_DETECTION_REGISTRATION_HASH( Hash contextHash, Hash nameHash, bool value )
	{
		std::tuple<bool, bool> return_values;
		std::get<0>(return_values) = (bool)NETWORK::NETWORK_ACCESS_TUNABLE_BOOL_MODIFICATION_DETECTION_REGISTRATION_HASH(contextHash, nameHash, (BOOL*)&value);
		std::get<1>(return_values) = value;

		return return_values;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_TRY_ACCESS_TUNABLE_BOOL_HASH( Hash tunableContext, Hash tunableName, bool defaultValue )
	{
		auto retval = (bool)NETWORK::NETWORK_TRY_ACCESS_TUNABLE_BOOL_HASH(tunableContext, tunableName, defaultValue);
		return retval;
	}

	int LUA_NATIVE_NETWORK_NETWORK_GET_CONTENT_MODIFIER_LIST_ID( Hash contentHash )
	{
		auto retval = NETWORK::NETWORK_GET_CONTENT_MODIFIER_LIST_ID(contentHash);
		return retval;
	}

	int LUA_NATIVE_NETWORK_NETWORK_GET_BONE_ID_OF_FATAL_HIT(  )
	{
		auto retval = NETWORK::NETWORK_GET_BONE_ID_OF_FATAL_HIT();
		return retval;
	}

	void LUA_NATIVE_NETWORK_NETWORK_RESET_BODY_TRACKER(  )
	{
		NETWORK::NETWORK_RESET_BODY_TRACKER();
	}

	int LUA_NATIVE_NETWORK_NETWORK_GET_NUMBER_BODY_TRACKER_HITS(  )
	{
		auto retval = NETWORK::NETWORK_GET_NUMBER_BODY_TRACKER_HITS();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_HAS_BONE_BEEN_HIT_BY_KILLER( int boneIndex )
	{
		auto retval = (bool)NETWORK::NETWORK_HAS_BONE_BEEN_HIT_BY_KILLER(boneIndex);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_SET_ATTRIBUTE_DAMAGE_TO_PLAYER( Ped ped, Player player )
	{
		auto retval = (bool)NETWORK::NETWORK_SET_ATTRIBUTE_DAMAGE_TO_PLAYER(ped, player);
		return retval;
	}

	void LUA_NATIVE_NETWORK_NETWORK_TRIGGER_DAMAGE_EVENT_FOR_ZERO_DAMAGE( Entity entity, bool toggle )
	{
		NETWORK::NETWORK_TRIGGER_DAMAGE_EVENT_FOR_ZERO_DAMAGE(entity, toggle);
	}

	void LUA_NATIVE_NETWORK_NETWORK_TRIGGER_DAMAGE_EVENT_FOR_ZERO_WEAPON_HASH( Entity entity, bool toggle )
	{
		NETWORK::NETWORK_TRIGGER_DAMAGE_EVENT_FOR_ZERO_WEAPON_HASH(entity, toggle);
	}

	void LUA_NATIVE_NETWORK_NETWORK_SET_NO_LONGER_NEEDED( Entity entity, bool toggle )
	{
		NETWORK::NETWORK_SET_NO_LONGER_NEEDED(entity, toggle);
	}

	bool LUA_NATIVE_NETWORK_NETWORK_EXPLODE_VEHICLE( Vehicle vehicle, bool isAudible, bool isInvisible, int netId )
	{
		auto retval = (bool)NETWORK::NETWORK_EXPLODE_VEHICLE(vehicle, isAudible, isInvisible, netId);
		return retval;
	}

	void LUA_NATIVE_NETWORK_NETWORK_EXPLODE_HELI( Vehicle vehicle, bool isAudible, bool isInvisible, int netId )
	{
		NETWORK::NETWORK_EXPLODE_HELI(vehicle, isAudible, isInvisible, netId);
	}

	void LUA_NATIVE_NETWORK_NETWORK_USE_LOGARITHMIC_BLENDING_THIS_FRAME( Entity entity )
	{
		NETWORK::NETWORK_USE_LOGARITHMIC_BLENDING_THIS_FRAME(entity);
	}

	void LUA_NATIVE_NETWORK_NETWORK_OVERRIDE_COORDS_AND_HEADING( Entity entity, float x, float y, float z, float heading )
	{
		NETWORK::NETWORK_OVERRIDE_COORDS_AND_HEADING(entity, x, y, z, heading);
	}

	void LUA_NATIVE_NETWORK_NETWORK_ENABLE_EXTRA_VEHICLE_ORIENTATION_BLEND_CHECKS( int netId, bool toggle )
	{
		NETWORK::NETWORK_ENABLE_EXTRA_VEHICLE_ORIENTATION_BLEND_CHECKS(netId, toggle);
	}

	void LUA_NATIVE_NETWORK_NETWORK_DISABLE_PROXIMITY_MIGRATION( int netID )
	{
		NETWORK::NETWORK_DISABLE_PROXIMITY_MIGRATION(netID);
	}

	void LUA_NATIVE_NETWORK_NETWORK_SET_PROPERTY_ID( int id )
	{
		NETWORK::NETWORK_SET_PROPERTY_ID(id);
	}

	void LUA_NATIVE_NETWORK_NETWORK_CLEAR_PROPERTY_ID(  )
	{
		NETWORK::NETWORK_CLEAR_PROPERTY_ID();
	}

	void LUA_NATIVE_NETWORK_NETWORK_SET_PLAYER_MENTAL_STATE( int p0 )
	{
		NETWORK::NETWORK_SET_PLAYER_MENTAL_STATE(p0);
	}

	void LUA_NATIVE_NETWORK_NETWORK_SET_MINIMUM_RANK_FOR_MISSION( bool p0 )
	{
		NETWORK::NETWORK_SET_MINIMUM_RANK_FOR_MISSION(p0);
	}

	void LUA_NATIVE_NETWORK_NETWORK_CACHE_LOCAL_PLAYER_HEAD_BLEND_DATA(  )
	{
		NETWORK::NETWORK_CACHE_LOCAL_PLAYER_HEAD_BLEND_DATA();
	}

	bool LUA_NATIVE_NETWORK_NETWORK_HAS_CACHED_PLAYER_HEAD_BLEND_DATA( Player player )
	{
		auto retval = (bool)NETWORK::NETWORK_HAS_CACHED_PLAYER_HEAD_BLEND_DATA(player);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_APPLY_CACHED_PLAYER_HEAD_BLEND_DATA( Ped ped, Player player )
	{
		auto retval = (bool)NETWORK::NETWORK_APPLY_CACHED_PLAYER_HEAD_BLEND_DATA(ped, player);
		return retval;
	}

	int LUA_NATIVE_NETWORK_GET_NUM_COMMERCE_ITEMS(  )
	{
		auto retval = NETWORK::GET_NUM_COMMERCE_ITEMS();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_IS_COMMERCE_DATA_VALID(  )
	{
		auto retval = (bool)NETWORK::IS_COMMERCE_DATA_VALID();
		return retval;
	}

	void LUA_NATIVE_NETWORK_TRIGGER_COMMERCE_DATA_FETCH( Any p0 )
	{
		NETWORK::TRIGGER_COMMERCE_DATA_FETCH(p0);
	}

	bool LUA_NATIVE_NETWORK_IS_COMMERCE_DATA_FETCH_IN_PROGRESS(  )
	{
		auto retval = (bool)NETWORK::IS_COMMERCE_DATA_FETCH_IN_PROGRESS();
		return retval;
	}

	const char* LUA_NATIVE_NETWORK_GET_COMMERCE_ITEM_ID( int index )
	{
		auto retval = NETWORK::GET_COMMERCE_ITEM_ID(index);
		return retval;
	}

	const char* LUA_NATIVE_NETWORK_GET_COMMERCE_ITEM_NAME( int index )
	{
		auto retval = NETWORK::GET_COMMERCE_ITEM_NAME(index);
		return retval;
	}

	const char* LUA_NATIVE_NETWORK_GET_COMMERCE_PRODUCT_PRICE( int index )
	{
		auto retval = NETWORK::GET_COMMERCE_PRODUCT_PRICE(index);
		return retval;
	}

	int LUA_NATIVE_NETWORK_GET_COMMERCE_ITEM_NUM_CATS( int index )
	{
		auto retval = NETWORK::GET_COMMERCE_ITEM_NUM_CATS(index);
		return retval;
	}

	const char* LUA_NATIVE_NETWORK_GET_COMMERCE_ITEM_CAT( int index, int index2 )
	{
		auto retval = NETWORK::GET_COMMERCE_ITEM_CAT(index, index2);
		return retval;
	}

	void LUA_NATIVE_NETWORK_OPEN_COMMERCE_STORE( const char* p0, const char* p1, int p2 )
	{
		NETWORK::OPEN_COMMERCE_STORE(p0, p1, p2);
	}

	bool LUA_NATIVE_NETWORK_IS_COMMERCE_STORE_OPEN(  )
	{
		auto retval = (bool)NETWORK::IS_COMMERCE_STORE_OPEN();
		return retval;
	}

	void LUA_NATIVE_NETWORK_SET_STORE_ENABLED( bool toggle )
	{
		NETWORK::SET_STORE_ENABLED(toggle);
	}

	bool LUA_NATIVE_NETWORK_REQUEST_COMMERCE_ITEM_IMAGE( int index )
	{
		auto retval = (bool)NETWORK::REQUEST_COMMERCE_ITEM_IMAGE(index);
		return retval;
	}

	void LUA_NATIVE_NETWORK_RELEASE_ALL_COMMERCE_ITEM_IMAGES(  )
	{
		NETWORK::RELEASE_ALL_COMMERCE_ITEM_IMAGES();
	}

	const char* LUA_NATIVE_NETWORK_GET_COMMERCE_ITEM_TEXTURENAME( int index )
	{
		auto retval = NETWORK::GET_COMMERCE_ITEM_TEXTURENAME(index);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_IS_STORE_AVAILABLE_TO_USER(  )
	{
		auto retval = (bool)NETWORK::IS_STORE_AVAILABLE_TO_USER();
		return retval;
	}

	void LUA_NATIVE_NETWORK_DELAY_MP_STORE_OPEN(  )
	{
		NETWORK::DELAY_MP_STORE_OPEN();
	}

	void LUA_NATIVE_NETWORK_RESET_STORE_NETWORK_GAME_TRACKING(  )
	{
		NETWORK::RESET_STORE_NETWORK_GAME_TRACKING();
	}

	bool LUA_NATIVE_NETWORK_IS_USER_OLD_ENOUGH_TO_ACCESS_STORE(  )
	{
		auto retval = (bool)NETWORK::IS_USER_OLD_ENOUGH_TO_ACCESS_STORE();
		return retval;
	}

	void LUA_NATIVE_NETWORK_SET_LAST_VIEWED_SHOP_ITEM( Hash p0, int p1, Hash p2 )
	{
		NETWORK::SET_LAST_VIEWED_SHOP_ITEM(p0, p1, p2);
	}

	int LUA_NATIVE_NETWORK_GET_USER_PREMIUM_ACCESS(  )
	{
		auto retval = NETWORK::GET_USER_PREMIUM_ACCESS();
		return retval;
	}

	int LUA_NATIVE_NETWORK_GET_USER_STARTER_ACCESS(  )
	{
		auto retval = NETWORK::GET_USER_STARTER_ACCESS();
		return retval;
	}

	int LUA_NATIVE_NETWORK_CLOUD_DELETE_MEMBER_FILE( const char* p0 )
	{
		auto retval = NETWORK::CLOUD_DELETE_MEMBER_FILE(p0);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_CLOUD_HAS_REQUEST_COMPLETED( int requestId )
	{
		auto retval = (bool)NETWORK::CLOUD_HAS_REQUEST_COMPLETED(requestId);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_CLOUD_DID_REQUEST_SUCCEED( int requestId )
	{
		auto retval = (bool)NETWORK::CLOUD_DID_REQUEST_SUCCEED(requestId);
		return retval;
	}

	void LUA_NATIVE_NETWORK_CLOUD_CHECK_AVAILABILITY(  )
	{
		NETWORK::CLOUD_CHECK_AVAILABILITY();
	}

	bool LUA_NATIVE_NETWORK_CLOUD_IS_CHECKING_AVAILABILITY(  )
	{
		auto retval = (bool)NETWORK::CLOUD_IS_CHECKING_AVAILABILITY();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_CLOUD_GET_AVAILABILITY_CHECK_RESULT(  )
	{
		auto retval = (bool)NETWORK::CLOUD_GET_AVAILABILITY_CHECK_RESULT();
		return retval;
	}

	int LUA_NATIVE_NETWORK_GET_CONTENT_TO_LOAD_TYPE(  )
	{
		auto retval = NETWORK::GET_CONTENT_TO_LOAD_TYPE();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_GET_IS_LAUNCH_FROM_LIVE_AREA(  )
	{
		auto retval = (bool)NETWORK::GET_IS_LAUNCH_FROM_LIVE_AREA();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_GET_IS_LIVE_AREA_LAUNCH_WITH_CONTENT(  )
	{
		auto retval = (bool)NETWORK::GET_IS_LIVE_AREA_LAUNCH_WITH_CONTENT();
		return retval;
	}

	void LUA_NATIVE_NETWORK_CLEAR_SERVICE_EVENT_ARGUMENTS(  )
	{
		NETWORK::CLEAR_SERVICE_EVENT_ARGUMENTS();
	}

	std::tuple<bool, Any, Any> LUA_NATIVE_NETWORK_UGC_COPY_CONTENT( Any p0, Any p1 )
	{
		std::tuple<bool, Any, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::UGC_COPY_CONTENT(&p0, &p1);
		std::get<1>(return_values) = p0;
		std::get<2>(return_values) = p1;

		return return_values;
	}

	bool LUA_NATIVE_NETWORK_UGC_IS_CREATING(  )
	{
		auto retval = (bool)NETWORK::UGC_IS_CREATING();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_UGC_HAS_CREATE_FINISHED(  )
	{
		auto retval = (bool)NETWORK::UGC_HAS_CREATE_FINISHED();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_UGC_DID_CREATE_SUCCEED(  )
	{
		auto retval = (bool)NETWORK::UGC_DID_CREATE_SUCCEED();
		return retval;
	}

	int LUA_NATIVE_NETWORK_UGC_GET_CREATE_RESULT(  )
	{
		auto retval = NETWORK::UGC_GET_CREATE_RESULT();
		return retval;
	}

	const char* LUA_NATIVE_NETWORK_UGC_GET_CREATE_CONTENT_ID(  )
	{
		auto retval = NETWORK::UGC_GET_CREATE_CONTENT_ID();
		return retval;
	}

	void LUA_NATIVE_NETWORK_UGC_CLEAR_CREATE_RESULT(  )
	{
		NETWORK::UGC_CLEAR_CREATE_RESULT();
	}

	std::tuple<bool, Any> LUA_NATIVE_NETWORK_UGC_QUERY_MY_CONTENT( Any p0, Any p1, Any p2, Any p3, Any p4, Any p5 )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::UGC_QUERY_MY_CONTENT(p0, p1, &p2, p3, p4, p5);
		std::get<1>(return_values) = p2;

		return return_values;
	}

	bool LUA_NATIVE_NETWORK_UGC_QUERY_BY_CATEGORY( Any p0, Any p1, Any p2, const char* p3, Any p4, bool p5 )
	{
		auto retval = (bool)NETWORK::UGC_QUERY_BY_CATEGORY(p0, p1, p2, p3, p4, p5);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_UGC_QUERY_BY_CONTENT_ID( const char* contentId, bool latestVersion, const char* contentTypeName )
	{
		auto retval = (bool)NETWORK::UGC_QUERY_BY_CONTENT_ID(contentId, latestVersion, contentTypeName);
		return retval;
	}

	std::tuple<bool, Any> LUA_NATIVE_NETWORK_UGC_QUERY_BY_CONTENT_IDS( Any data, int count, bool latestVersion, const char* contentTypeName )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::UGC_QUERY_BY_CONTENT_IDS(&data, count, latestVersion, contentTypeName);
		std::get<1>(return_values) = data;

		return return_values;
	}

	bool LUA_NATIVE_NETWORK_UGC_QUERY_MOST_RECENTLY_CREATED_CONTENT( int offset, int count, const char* contentTypeName, int p3 )
	{
		auto retval = (bool)NETWORK::UGC_QUERY_MOST_RECENTLY_CREATED_CONTENT(offset, count, contentTypeName, p3);
		return retval;
	}

	std::tuple<bool, Any> LUA_NATIVE_NETWORK_UGC_GET_BOOKMARKED_CONTENT( Any p0, Any p1, const char* p2, Any p3 )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::UGC_GET_BOOKMARKED_CONTENT(p0, p1, p2, &p3);
		std::get<1>(return_values) = p3;

		return return_values;
	}

	std::tuple<bool, Any> LUA_NATIVE_NETWORK_UGC_GET_MY_CONTENT( Any p0, Any p1, const char* p2, Any p3 )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::UGC_GET_MY_CONTENT(p0, p1, p2, &p3);
		std::get<1>(return_values) = p3;

		return return_values;
	}

	std::tuple<bool, Any> LUA_NATIVE_NETWORK_UGC_GET_FRIEND_CONTENT( Any p0, Any p1, const char* p2, Any p3 )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::UGC_GET_FRIEND_CONTENT(p0, p1, p2, &p3);
		std::get<1>(return_values) = p3;

		return return_values;
	}

	std::tuple<bool, Any> LUA_NATIVE_NETWORK_UGC_GET_CREW_CONTENT( Any p0, Any p1, Any p2, const char* p3, Any p4 )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::UGC_GET_CREW_CONTENT(p0, p1, p2, p3, &p4);
		std::get<1>(return_values) = p4;

		return return_values;
	}

	std::tuple<bool, Any> LUA_NATIVE_NETWORK_UGC_GET_GET_BY_CATEGORY( Any p0, Any p1, Any p2, const char* p3, Any p4 )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::UGC_GET_GET_BY_CATEGORY(p0, p1, p2, p3, &p4);
		std::get<1>(return_values) = p4;

		return return_values;
	}

	bool LUA_NATIVE_NETWORK_UGC_GET_GET_BY_CONTENT_ID( const char* contentId, const char* contentTypeName )
	{
		auto retval = (bool)NETWORK::UGC_GET_GET_BY_CONTENT_ID(contentId, contentTypeName);
		return retval;
	}

	std::tuple<bool, Any> LUA_NATIVE_NETWORK_UGC_GET_GET_BY_CONTENT_IDS( Any data, int dataCount, const char* contentTypeName )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::UGC_GET_GET_BY_CONTENT_IDS(&data, dataCount, contentTypeName);
		std::get<1>(return_values) = data;

		return return_values;
	}

	std::tuple<bool, Any, Any> LUA_NATIVE_NETWORK_UGC_GET_MOST_RECENTLY_CREATED_CONTENT( Any p0, Any p1, Any p2, Any p3 )
	{
		std::tuple<bool, Any, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::UGC_GET_MOST_RECENTLY_CREATED_CONTENT(p0, p1, &p2, &p3);
		std::get<1>(return_values) = p2;
		std::get<2>(return_values) = p3;

		return return_values;
	}

	std::tuple<bool, Any, Any> LUA_NATIVE_NETWORK_UGC_GET_MOST_RECENTLY_PLAYED_CONTENT( Any p0, Any p1, Any p2, Any p3 )
	{
		std::tuple<bool, Any, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::UGC_GET_MOST_RECENTLY_PLAYED_CONTENT(p0, p1, &p2, &p3);
		std::get<1>(return_values) = p2;
		std::get<2>(return_values) = p3;

		return return_values;
	}

	std::tuple<bool, Any, Any> LUA_NATIVE_NETWORK_UGC_GET_TOP_RATED_CONTENT( Any p0, Any p1, Any p2, Any p3 )
	{
		std::tuple<bool, Any, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::UGC_GET_TOP_RATED_CONTENT(p0, p1, &p2, &p3);
		std::get<1>(return_values) = p2;
		std::get<2>(return_values) = p3;

		return return_values;
	}

	void LUA_NATIVE_NETWORK_UGC_CANCEL_QUERY(  )
	{
		NETWORK::UGC_CANCEL_QUERY();
	}

	bool LUA_NATIVE_NETWORK_UGC_IS_GETTING(  )
	{
		auto retval = (bool)NETWORK::UGC_IS_GETTING();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_UGC_HAS_GET_FINISHED(  )
	{
		auto retval = (bool)NETWORK::UGC_HAS_GET_FINISHED();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_UGC_DID_GET_SUCCEED(  )
	{
		auto retval = (bool)NETWORK::UGC_DID_GET_SUCCEED();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_UGC_WAS_QUERY_FORCE_CANCELLED(  )
	{
		auto retval = (bool)NETWORK::UGC_WAS_QUERY_FORCE_CANCELLED();
		return retval;
	}

	int LUA_NATIVE_NETWORK_UGC_GET_QUERY_RESULT(  )
	{
		auto retval = NETWORK::UGC_GET_QUERY_RESULT();
		return retval;
	}

	int LUA_NATIVE_NETWORK_UGC_GET_CONTENT_NUM(  )
	{
		auto retval = NETWORK::UGC_GET_CONTENT_NUM();
		return retval;
	}

	int LUA_NATIVE_NETWORK_UGC_GET_CONTENT_TOTAL(  )
	{
		auto retval = NETWORK::UGC_GET_CONTENT_TOTAL();
		return retval;
	}

	Hash LUA_NATIVE_NETWORK_UGC_GET_CONTENT_HASH(  )
	{
		auto retval = NETWORK::UGC_GET_CONTENT_HASH();
		return retval;
	}

	void LUA_NATIVE_NETWORK_UGC_CLEAR_QUERY_RESULTS(  )
	{
		NETWORK::UGC_CLEAR_QUERY_RESULTS();
	}

	const char* LUA_NATIVE_NETWORK_UGC_GET_CONTENT_USER_ID( int p0 )
	{
		auto retval = NETWORK::UGC_GET_CONTENT_USER_ID(p0);
		return retval;
	}

	std::tuple<bool, Any> LUA_NATIVE_NETWORK_UGC_GET_CONTENT_CREATOR_GAMER_HANDLE( int p0, Any p1 )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::UGC_GET_CONTENT_CREATOR_GAMER_HANDLE(p0, &p1);
		std::get<1>(return_values) = p1;

		return return_values;
	}

	bool LUA_NATIVE_NETWORK_UGC_GET_CONTENT_CREATED_BY_LOCAL_PLAYER( Any p0 )
	{
		auto retval = (bool)NETWORK::UGC_GET_CONTENT_CREATED_BY_LOCAL_PLAYER(p0);
		return retval;
	}

	const char* LUA_NATIVE_NETWORK_UGC_GET_CONTENT_USER_NAME( Any p0 )
	{
		auto retval = NETWORK::UGC_GET_CONTENT_USER_NAME(p0);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_UGC_GET_CONTENT_IS_USING_SC_NICKNAME( Any p0 )
	{
		auto retval = (bool)NETWORK::UGC_GET_CONTENT_IS_USING_SC_NICKNAME(p0);
		return retval;
	}

	int LUA_NATIVE_NETWORK_UGC_GET_CONTENT_CATEGORY( int p0 )
	{
		auto retval = NETWORK::UGC_GET_CONTENT_CATEGORY(p0);
		return retval;
	}

	const char* LUA_NATIVE_NETWORK_UGC_GET_CONTENT_ID( int p0 )
	{
		auto retval = NETWORK::UGC_GET_CONTENT_ID(p0);
		return retval;
	}

	const char* LUA_NATIVE_NETWORK_UGC_GET_ROOT_CONTENT_ID( int p0 )
	{
		auto retval = NETWORK::UGC_GET_ROOT_CONTENT_ID(p0);
		return retval;
	}

	const char* LUA_NATIVE_NETWORK_UGC_GET_CONTENT_NAME( Any p0 )
	{
		auto retval = NETWORK::UGC_GET_CONTENT_NAME(p0);
		return retval;
	}

	int LUA_NATIVE_NETWORK_UGC_GET_CONTENT_DESCRIPTION_HASH( Any p0 )
	{
		auto retval = NETWORK::UGC_GET_CONTENT_DESCRIPTION_HASH(p0);
		return retval;
	}

	const char* LUA_NATIVE_NETWORK_UGC_GET_CONTENT_PATH( int p0, int p1 )
	{
		auto retval = NETWORK::UGC_GET_CONTENT_PATH(p0, p1);
		return retval;
	}

	Any LUA_NATIVE_NETWORK_UGC_GET_CONTENT_UPDATED_DATE( Any p0, Any p1 )
	{
		NETWORK::UGC_GET_CONTENT_UPDATED_DATE(p0, &p1);
		return p1;
	}

	int LUA_NATIVE_NETWORK_UGC_GET_CONTENT_FILE_VERSION( Any p0, Any p1 )
	{
		auto retval = NETWORK::UGC_GET_CONTENT_FILE_VERSION(p0, p1);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_UGC_GET_CONTENT_HAS_LO_RES_PHOTO( int p0 )
	{
		auto retval = (bool)NETWORK::UGC_GET_CONTENT_HAS_LO_RES_PHOTO(p0);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_UGC_GET_CONTENT_HAS_HI_RES_PHOTO( int p0 )
	{
		auto retval = (bool)NETWORK::UGC_GET_CONTENT_HAS_HI_RES_PHOTO(p0);
		return retval;
	}

	int LUA_NATIVE_NETWORK_UGC_GET_CONTENT_LANGUAGE( Any p0 )
	{
		auto retval = NETWORK::UGC_GET_CONTENT_LANGUAGE(p0);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_UGC_GET_CONTENT_IS_PUBLISHED( Any p0 )
	{
		auto retval = (bool)NETWORK::UGC_GET_CONTENT_IS_PUBLISHED(p0);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_UGC_GET_CONTENT_IS_VERIFIED( Any p0 )
	{
		auto retval = (bool)NETWORK::UGC_GET_CONTENT_IS_VERIFIED(p0);
		return retval;
	}

	float LUA_NATIVE_NETWORK_UGC_GET_CONTENT_RATING( Any p0, Any p1 )
	{
		auto retval = NETWORK::UGC_GET_CONTENT_RATING(p0, p1);
		return retval;
	}

	int LUA_NATIVE_NETWORK_UGC_GET_CONTENT_RATING_COUNT( Any p0, Any p1 )
	{
		auto retval = NETWORK::UGC_GET_CONTENT_RATING_COUNT(p0, p1);
		return retval;
	}

	int LUA_NATIVE_NETWORK_UGC_GET_CONTENT_RATING_POSITIVE_COUNT( Any p0, Any p1 )
	{
		auto retval = NETWORK::UGC_GET_CONTENT_RATING_POSITIVE_COUNT(p0, p1);
		return retval;
	}

	int LUA_NATIVE_NETWORK_UGC_GET_CONTENT_RATING_NEGATIVE_COUNT( Any p0, Any p1 )
	{
		auto retval = NETWORK::UGC_GET_CONTENT_RATING_NEGATIVE_COUNT(p0, p1);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_UGC_GET_CONTENT_HAS_PLAYER_RECORD( Any p0 )
	{
		auto retval = (bool)NETWORK::UGC_GET_CONTENT_HAS_PLAYER_RECORD(p0);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_UGC_GET_CONTENT_HAS_PLAYER_BOOKMARKED( Any p0 )
	{
		auto retval = (bool)NETWORK::UGC_GET_CONTENT_HAS_PLAYER_BOOKMARKED(p0);
		return retval;
	}

	int LUA_NATIVE_NETWORK_UGC_REQUEST_CONTENT_DATA_FROM_INDEX( int p0, int p1 )
	{
		auto retval = NETWORK::UGC_REQUEST_CONTENT_DATA_FROM_INDEX(p0, p1);
		return retval;
	}

	int LUA_NATIVE_NETWORK_UGC_REQUEST_CONTENT_DATA_FROM_PARAMS( const char* contentTypeName, const char* contentId, int p2, int p3, int p4 )
	{
		auto retval = NETWORK::UGC_REQUEST_CONTENT_DATA_FROM_PARAMS(contentTypeName, contentId, p2, p3, p4);
		return retval;
	}

	int LUA_NATIVE_NETWORK_UGC_REQUEST_CACHED_DESCRIPTION( int p0 )
	{
		auto retval = NETWORK::UGC_REQUEST_CACHED_DESCRIPTION(p0);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_UGC_IS_DESCRIPTION_REQUEST_IN_PROGRESS( Any p0 )
	{
		auto retval = (bool)NETWORK::UGC_IS_DESCRIPTION_REQUEST_IN_PROGRESS(p0);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_UGC_HAS_DESCRIPTION_REQUEST_FINISHED( Any p0 )
	{
		auto retval = (bool)NETWORK::UGC_HAS_DESCRIPTION_REQUEST_FINISHED(p0);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_UGC_DID_DESCRIPTION_REQUEST_SUCCEED( Any p0 )
	{
		auto retval = (bool)NETWORK::UGC_DID_DESCRIPTION_REQUEST_SUCCEED(p0);
		return retval;
	}

	const char* LUA_NATIVE_NETWORK_UGC_GET_CACHED_DESCRIPTION( Any p0, Any p1 )
	{
		auto retval = NETWORK::UGC_GET_CACHED_DESCRIPTION(p0, p1);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_UGC_RELEASE_CACHED_DESCRIPTION( Any p0 )
	{
		auto retval = (bool)NETWORK::UGC_RELEASE_CACHED_DESCRIPTION(p0);
		return retval;
	}

	void LUA_NATIVE_NETWORK_UGC_RELEASE_ALL_CACHED_DESCRIPTIONS(  )
	{
		NETWORK::UGC_RELEASE_ALL_CACHED_DESCRIPTIONS();
	}

	bool LUA_NATIVE_NETWORK_UGC_PUBLISH( const char* contentId, const char* baseContentId, const char* contentTypeName )
	{
		auto retval = (bool)NETWORK::UGC_PUBLISH(contentId, baseContentId, contentTypeName);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_UGC_SET_BOOKMARKED( const char* contentId, bool bookmarked, const char* contentTypeName )
	{
		auto retval = (bool)NETWORK::UGC_SET_BOOKMARKED(contentId, bookmarked, contentTypeName);
		return retval;
	}

	std::tuple<bool, Any> LUA_NATIVE_NETWORK_UGC_SET_DELETED( Any p0, bool p1, const char* p2 )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::UGC_SET_DELETED(&p0, p1, p2);
		std::get<1>(return_values) = p0;

		return return_values;
	}

	bool LUA_NATIVE_NETWORK_UGC_IS_MODIFYING(  )
	{
		auto retval = (bool)NETWORK::UGC_IS_MODIFYING();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_UGC_HAS_MODIFY_FINISHED(  )
	{
		auto retval = (bool)NETWORK::UGC_HAS_MODIFY_FINISHED();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_UGC_DID_MODIFY_SUCCEED(  )
	{
		auto retval = (bool)NETWORK::UGC_DID_MODIFY_SUCCEED();
		return retval;
	}

	int LUA_NATIVE_NETWORK_UGC_GET_MODIFY_RESULT(  )
	{
		auto retval = NETWORK::UGC_GET_MODIFY_RESULT();
		return retval;
	}

	void LUA_NATIVE_NETWORK_UGC_CLEAR_MODIFY_RESULT(  )
	{
		NETWORK::UGC_CLEAR_MODIFY_RESULT();
	}

	std::tuple<bool, Any, Any> LUA_NATIVE_NETWORK_UGC_GET_CREATORS_BY_USER_ID( Any p0, Any p1 )
	{
		std::tuple<bool, Any, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::UGC_GET_CREATORS_BY_USER_ID(&p0, &p1);
		std::get<1>(return_values) = p0;
		std::get<2>(return_values) = p1;

		return return_values;
	}

	bool LUA_NATIVE_NETWORK_UGC_HAS_QUERY_CREATORS_FINISHED(  )
	{
		auto retval = (bool)NETWORK::UGC_HAS_QUERY_CREATORS_FINISHED();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_UGC_DID_QUERY_CREATORS_SUCCEED(  )
	{
		auto retval = (bool)NETWORK::UGC_DID_QUERY_CREATORS_SUCCEED();
		return retval;
	}

	int LUA_NATIVE_NETWORK_UGC_GET_CREATOR_NUM(  )
	{
		auto retval = NETWORK::UGC_GET_CREATOR_NUM();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_UGC_LOAD_OFFLINE_QUERY( Any p0 )
	{
		auto retval = (bool)NETWORK::UGC_LOAD_OFFLINE_QUERY(p0);
		return retval;
	}

	void LUA_NATIVE_NETWORK_UGC_CLEAR_OFFLINE_QUERY(  )
	{
		NETWORK::UGC_CLEAR_OFFLINE_QUERY();
	}

	void LUA_NATIVE_NETWORK_UGC_SET_QUERY_DATA_FROM_OFFLINE( bool p0 )
	{
		NETWORK::UGC_SET_QUERY_DATA_FROM_OFFLINE(p0);
	}

	void LUA_NATIVE_NETWORK_UGC_SET_USING_OFFLINE_CONTENT( bool p0 )
	{
		NETWORK::UGC_SET_USING_OFFLINE_CONTENT(p0);
	}

	bool LUA_NATIVE_NETWORK_UGC_IS_LANGUAGE_SUPPORTED( Any p0 )
	{
		auto retval = (bool)NETWORK::UGC_IS_LANGUAGE_SUPPORTED(p0);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_FACEBOOK_POST_COMPLETED_HEIST( const char* heistName, int cashEarned, int xpEarned )
	{
		auto retval = (bool)NETWORK::FACEBOOK_POST_COMPLETED_HEIST(heistName, cashEarned, xpEarned);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_FACEBOOK_POST_CREATE_CHARACTER(  )
	{
		auto retval = (bool)NETWORK::FACEBOOK_POST_CREATE_CHARACTER();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_FACEBOOK_POST_COMPLETED_MILESTONE( int milestoneId )
	{
		auto retval = (bool)NETWORK::FACEBOOK_POST_COMPLETED_MILESTONE(milestoneId);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_FACEBOOK_HAS_POST_COMPLETED(  )
	{
		auto retval = (bool)NETWORK::FACEBOOK_HAS_POST_COMPLETED();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_FACEBOOK_DID_POST_SUCCEED(  )
	{
		auto retval = (bool)NETWORK::FACEBOOK_DID_POST_SUCCEED();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_FACEBOOK_CAN_POST_TO_FACEBOOK(  )
	{
		auto retval = (bool)NETWORK::FACEBOOK_CAN_POST_TO_FACEBOOK();
		return retval;
	}

	std::tuple<int, Any> LUA_NATIVE_NETWORK_TEXTURE_DOWNLOAD_REQUEST( Any gamerHandle, const char* filePath, const char* name, bool p3 )
	{
		std::tuple<int, Any> return_values;
		std::get<0>(return_values) = NETWORK::TEXTURE_DOWNLOAD_REQUEST(&gamerHandle, filePath, name, p3);
		std::get<1>(return_values) = gamerHandle;

		return return_values;
	}

	int LUA_NATIVE_NETWORK_TITLE_TEXTURE_DOWNLOAD_REQUEST( const char* filePath, const char* name, bool p2 )
	{
		auto retval = NETWORK::TITLE_TEXTURE_DOWNLOAD_REQUEST(filePath, name, p2);
		return retval;
	}

	int LUA_NATIVE_NETWORK_UGC_TEXTURE_DOWNLOAD_REQUEST( const char* p0, int p1, int p2, int p3, const char* p4, bool p5 )
	{
		auto retval = NETWORK::UGC_TEXTURE_DOWNLOAD_REQUEST(p0, p1, p2, p3, p4, p5);
		return retval;
	}

	void LUA_NATIVE_NETWORK_TEXTURE_DOWNLOAD_RELEASE( int p0 )
	{
		NETWORK::TEXTURE_DOWNLOAD_RELEASE(p0);
	}

	bool LUA_NATIVE_NETWORK_TEXTURE_DOWNLOAD_HAS_FAILED( int p0 )
	{
		auto retval = (bool)NETWORK::TEXTURE_DOWNLOAD_HAS_FAILED(p0);
		return retval;
	}

	const char* LUA_NATIVE_NETWORK_TEXTURE_DOWNLOAD_GET_NAME( int p0 )
	{
		auto retval = NETWORK::TEXTURE_DOWNLOAD_GET_NAME(p0);
		return retval;
	}

	int LUA_NATIVE_NETWORK_GET_STATUS_OF_TEXTURE_DOWNLOAD( int p0 )
	{
		auto retval = NETWORK::GET_STATUS_OF_TEXTURE_DOWNLOAD(p0);
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_CHECK_ROS_LINK_WENTDOWN_NOT_NET(  )
	{
		auto retval = (bool)NETWORK::NETWORK_CHECK_ROS_LINK_WENTDOWN_NOT_NET();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_SHOULD_SHOW_STRICT_NAT_WARNING(  )
	{
		auto retval = (bool)NETWORK::NETWORK_SHOULD_SHOW_STRICT_NAT_WARNING();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_IS_CABLE_CONNECTED(  )
	{
		auto retval = (bool)NETWORK::NETWORK_IS_CABLE_CONNECTED();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_HAVE_SCS_PRIVATE_MSG_PRIV(  )
	{
		auto retval = (bool)NETWORK::NETWORK_HAVE_SCS_PRIVATE_MSG_PRIV();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_HAVE_ROS_SOCIAL_CLUB_PRIV(  )
	{
		auto retval = (bool)NETWORK::NETWORK_HAVE_ROS_SOCIAL_CLUB_PRIV();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_HAVE_ROS_BANNED_PRIV(  )
	{
		auto retval = (bool)NETWORK::NETWORK_HAVE_ROS_BANNED_PRIV();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_HAVE_ROS_CREATE_TICKET_PRIV(  )
	{
		auto retval = (bool)NETWORK::NETWORK_HAVE_ROS_CREATE_TICKET_PRIV();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_HAVE_ROS_MULTIPLAYER_PRIV(  )
	{
		auto retval = (bool)NETWORK::NETWORK_HAVE_ROS_MULTIPLAYER_PRIV();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_HAVE_ROS_LEADERBOARD_WRITE_PRIV(  )
	{
		auto retval = (bool)NETWORK::NETWORK_HAVE_ROS_LEADERBOARD_WRITE_PRIV();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_HAS_ROS_PRIVILEGE( int index )
	{
		auto retval = (bool)NETWORK::NETWORK_HAS_ROS_PRIVILEGE(index);
		return retval;
	}

	std::tuple<bool, int, Any> LUA_NATIVE_NETWORK_NETWORK_HAS_ROS_PRIVILEGE_END_DATE( int privilege, int banType, Any timeData )
	{
		std::tuple<bool, int, Any> return_values;
		std::get<0>(return_values) = (bool)NETWORK::NETWORK_HAS_ROS_PRIVILEGE_END_DATE(privilege, &banType, &timeData);
		std::get<1>(return_values) = banType;
		std::get<2>(return_values) = timeData;

		return return_values;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_HAS_ROS_PRIVILEGE_PLAYED_LAST_GEN(  )
	{
		auto retval = (bool)NETWORK::NETWORK_HAS_ROS_PRIVILEGE_PLAYED_LAST_GEN();
		return retval;
	}

	bool LUA_NATIVE_NETWORK_NETWORK_HAS_ROS_PRIVILEGE_SPECIAL_EDITION_CONTENT(  )
	{
		auto retval = (bool)NETWORK::NETWORK_HAS_ROS_PRIVILEGE_SPECIAL_EDITION_CONTENT();
		return retval;
	}

	int LUA_NATIVE_NETWORK_NETWORK_START_COMMUNICATION_PERMISSIONS_CHECK( Any p0 )
	{
		auto retval = NETWORK::NETWORK_START_COMMUNICATION_PERMISSIONS_CHECK(p0);
		return retval;
	}

	std::tuple<int, Any> LUA_NATIVE_NETWORK_NETWORK_START_USER_CONTENT_PERMISSIONS_CHECK( Any netHandle )
	{
		std::tuple<int, Any> return_values;
		std::get<0>(return_values) = NETWORK::NETWORK_START_USER_CONTENT_PERMISSIONS_CHECK(&netHandle);
		std::get<1>(return_values) = netHandle;

		return return_values;
	}

	void LUA_NATIVE_NETWORK_NETWORK_SKIP_RADIO_RESET_NEXT_CLOSE(  )
	{
		NETWORK::NETWORK_SKIP_RADIO_RESET_NEXT_CLOSE();
	}

	void LUA_NATIVE_NETWORK_NETWORK_SKIP_RADIO_RESET_NEXT_OPEN(  )
	{
		NETWORK::NETWORK_SKIP_RADIO_RESET_NEXT_OPEN();
	}

	bool LUA_NATIVE_NETWORK_NETWORK_SKIP_RADIO_WARNING(  )
	{
		auto retval = (bool)NETWORK::NETWORK_SKIP_RADIO_WARNING();
		return retval;
	}

	void LUA_NATIVE_NETWORK_NETWORK_FORCE_LOCAL_PLAYER_SCAR_SYNC(  )
	{
		NETWORK::NETWORK_FORCE_LOCAL_PLAYER_SCAR_SYNC();
	}

	void LUA_NATIVE_NETWORK_NETWORK_DISABLE_LEAVE_REMOTE_PED_BEHIND( bool toggle )
	{
		NETWORK::NETWORK_DISABLE_LEAVE_REMOTE_PED_BEHIND(toggle);
	}

	void LUA_NATIVE_NETWORK_NETWORK_ALLOW_REMOTE_ATTACHMENT_MODIFICATION( Entity entity, bool toggle )
	{
		NETWORK::NETWORK_ALLOW_REMOTE_ATTACHMENT_MODIFICATION(entity, toggle);
	}

	void LUA_NATIVE_NETWORK_NETWORK_SHOW_CHAT_RESTRICTION_MSC( Player player )
	{
		NETWORK::NETWORK_SHOW_CHAT_RESTRICTION_MSC(player);
	}

	void LUA_NATIVE_NETWORK_NETWORK_SHOW_PSN_UGC_RESTRICTION(  )
	{
		NETWORK::NETWORK_SHOW_PSN_UGC_RESTRICTION();
	}

	bool LUA_NATIVE_NETWORK_NETWORK_IS_TITLE_UPDATE_REQUIRED(  )
	{
		auto retval = (bool)NETWORK::NETWORK_IS_TITLE_UPDATE_REQUIRED();
		return retval;
	}

	void LUA_NATIVE_NETWORK_NETWORK_QUIT_MP_TO_DESKTOP(  )
	{
		NETWORK::NETWORK_QUIT_MP_TO_DESKTOP();
	}

	bool LUA_NATIVE_NETWORK_NETWORK_IS_CONNECTED_VIA_RELAY( Player player )
	{
		auto retval = (bool)NETWORK::NETWORK_IS_CONNECTED_VIA_RELAY(player);
		return retval;
	}

	float LUA_NATIVE_NETWORK_NETWORK_GET_AVERAGE_LATENCY( Player player )
	{
		auto retval = NETWORK::NETWORK_GET_AVERAGE_LATENCY(player);
		return retval;
	}

	float LUA_NATIVE_NETWORK_NETWORK_GET_AVERAGE_PING( Player player )
	{
		auto retval = NETWORK::NETWORK_GET_AVERAGE_PING(player);
		return retval;
	}

	float LUA_NATIVE_NETWORK_NETWORK_GET_AVERAGE_PACKET_LOSS( Player player )
	{
		auto retval = NETWORK::NETWORK_GET_AVERAGE_PACKET_LOSS(player);
		return retval;
	}

	int LUA_NATIVE_NETWORK_NETWORK_GET_NUM_UNACKED_RELIABLES( Player player )
	{
		auto retval = NETWORK::NETWORK_GET_NUM_UNACKED_RELIABLES(player);
		return retval;
	}

	int LUA_NATIVE_NETWORK_NETWORK_GET_UNRELIABLE_RESEND_COUNT( Player player )
	{
		auto retval = NETWORK::NETWORK_GET_UNRELIABLE_RESEND_COUNT(player);
		return retval;
	}

	int LUA_NATIVE_NETWORK_NETWORK_GET_HIGHEST_RELIABLE_RESEND_COUNT( Player player )
	{
		auto retval = NETWORK::NETWORK_GET_HIGHEST_RELIABLE_RESEND_COUNT(player);
		return retval;
	}

	void LUA_NATIVE_NETWORK_NETWORK_REPORT_CODE_TAMPER(  )
	{
		NETWORK::NETWORK_REPORT_CODE_TAMPER();
	}

	Vector3 LUA_NATIVE_NETWORK_NETWORK_GET_LAST_ENTITY_POS_RECEIVED_OVER_NETWORK( Entity entity )
	{
		auto retval = NETWORK::NETWORK_GET_LAST_ENTITY_POS_RECEIVED_OVER_NETWORK(entity);
		return retval;
	}

	Vector3 LUA_NATIVE_NETWORK_NETWORK_GET_LAST_PLAYER_POS_RECEIVED_OVER_NETWORK( Player player )
	{
		auto retval = NETWORK::NETWORK_GET_LAST_PLAYER_POS_RECEIVED_OVER_NETWORK(player);
		return retval;
	}

	Vector3 LUA_NATIVE_NETWORK_NETWORK_GET_LAST_VEL_RECEIVED_OVER_NETWORK( Entity entity )
	{
		auto retval = NETWORK::NETWORK_GET_LAST_VEL_RECEIVED_OVER_NETWORK(entity);
		return retval;
	}

	Vector3 LUA_NATIVE_NETWORK_NETWORK_GET_PREDICTED_VELOCITY( Entity entity )
	{
		auto retval = NETWORK::NETWORK_GET_PREDICTED_VELOCITY(entity);
		return retval;
	}

	void LUA_NATIVE_NETWORK_NETWORK_DUMP_NET_IF_CONFIG(  )
	{
		NETWORK::NETWORK_DUMP_NET_IF_CONFIG();
	}

	Any LUA_NATIVE_NETWORK_NETWORK_GET_SIGNALLING_INFO( Any p0 )
	{
		NETWORK::NETWORK_GET_SIGNALLING_INFO(&p0);
		return p0;
	}

	Any LUA_NATIVE_NETWORK_NETWORK_GET_NET_STATISTICS_INFO( Any p0 )
	{
		NETWORK::NETWORK_GET_NET_STATISTICS_INFO(&p0);
		return p0;
	}

	int LUA_NATIVE_NETWORK_NETWORK_GET_PLAYER_ACCOUNT_ID( Player player )
	{
		auto retval = NETWORK::NETWORK_GET_PLAYER_ACCOUNT_ID(player);
		return retval;
	}

	void LUA_NATIVE_NETWORK_NETWORK_UGC_NAV( Any p0, Any p1 )
	{
		NETWORK::NETWORK_UGC_NAV(p0, p1);
	}

	Object LUA_NATIVE_OBJECT_CREATE_OBJECT( Hash modelHash, float x, float y, float z, bool isNetwork, bool bScriptHostObj, bool dynamic )
	{
		auto retval = OBJECT::CREATE_OBJECT(modelHash, x, y, z, isNetwork, bScriptHostObj, dynamic);
		return retval;
	}

	Object LUA_NATIVE_OBJECT_CREATE_OBJECT_NO_OFFSET( Hash modelHash, float x, float y, float z, bool isNetwork, bool bScriptHostObj, bool dynamic )
	{
		auto retval = OBJECT::CREATE_OBJECT_NO_OFFSET(modelHash, x, y, z, isNetwork, bScriptHostObj, dynamic);
		return retval;
	}

	Object LUA_NATIVE_OBJECT_DELETE_OBJECT( Object object )
	{
		OBJECT::DELETE_OBJECT(&object);
		return object;
	}

	bool LUA_NATIVE_OBJECT_PLACE_OBJECT_ON_GROUND_PROPERLY( Object object )
	{
		auto retval = (bool)OBJECT::PLACE_OBJECT_ON_GROUND_PROPERLY(object);
		return retval;
	}

	bool LUA_NATIVE_OBJECT_PLACE_OBJECT_ON_GROUND_OR_OBJECT_PROPERLY( Object object )
	{
		auto retval = (bool)OBJECT::PLACE_OBJECT_ON_GROUND_OR_OBJECT_PROPERLY(object);
		return retval;
	}

	bool LUA_NATIVE_OBJECT_ROTATE_OBJECT( Object object, float p1, float p2, bool p3 )
	{
		auto retval = (bool)OBJECT::ROTATE_OBJECT(object, p1, p2, p3);
		return retval;
	}

	bool LUA_NATIVE_OBJECT_SLIDE_OBJECT( Object object, float toX, float toY, float toZ, float speedX, float speedY, float speedZ, bool collision )
	{
		auto retval = (bool)OBJECT::SLIDE_OBJECT(object, toX, toY, toZ, speedX, speedY, speedZ, collision);
		return retval;
	}

	void LUA_NATIVE_OBJECT_SET_OBJECT_TARGETTABLE( Object object, bool targettable )
	{
		OBJECT::SET_OBJECT_TARGETTABLE(object, targettable);
	}

	void LUA_NATIVE_OBJECT_SET_OBJECT_FORCE_VEHICLES_TO_AVOID( Object object, bool toggle )
	{
		OBJECT::SET_OBJECT_FORCE_VEHICLES_TO_AVOID(object, toggle);
	}

	Object LUA_NATIVE_OBJECT_GET_CLOSEST_OBJECT_OF_TYPE( float x, float y, float z, float radius, Hash modelHash, bool isMission, bool p6, bool p7 )
	{
		auto retval = OBJECT::GET_CLOSEST_OBJECT_OF_TYPE(x, y, z, radius, modelHash, isMission, p6, p7);
		return retval;
	}

	bool LUA_NATIVE_OBJECT_HAS_OBJECT_BEEN_BROKEN( Object object, Any p1 )
	{
		auto retval = (bool)OBJECT::HAS_OBJECT_BEEN_BROKEN(object, p1);
		return retval;
	}

	bool LUA_NATIVE_OBJECT_HAS_CLOSEST_OBJECT_OF_TYPE_BEEN_BROKEN( float p0, float p1, float p2, float p3, Hash modelHash, Any p5 )
	{
		auto retval = (bool)OBJECT::HAS_CLOSEST_OBJECT_OF_TYPE_BEEN_BROKEN(p0, p1, p2, p3, modelHash, p5);
		return retval;
	}

	bool LUA_NATIVE_OBJECT_HAS_CLOSEST_OBJECT_OF_TYPE_BEEN_COMPLETELY_DESTROYED( float x, float y, float z, float radius, Hash modelHash, bool p5 )
	{
		auto retval = (bool)OBJECT::HAS_CLOSEST_OBJECT_OF_TYPE_BEEN_COMPLETELY_DESTROYED(x, y, z, radius, modelHash, p5);
		return retval;
	}

	bool LUA_NATIVE_OBJECT_GET_HAS_OBJECT_BEEN_COMPLETELY_DESTROYED( Any p0 )
	{
		auto retval = (bool)OBJECT::GET_HAS_OBJECT_BEEN_COMPLETELY_DESTROYED(p0);
		return retval;
	}

	Vector3 LUA_NATIVE_OBJECT_GET_OFFSET_FROM_COORD_AND_HEADING_IN_WORLD_COORDS( float xPos, float yPos, float zPos, float heading, float xOffset, float yOffset, float zOffset )
	{
		auto retval = OBJECT::GET_OFFSET_FROM_COORD_AND_HEADING_IN_WORLD_COORDS(xPos, yPos, zPos, heading, xOffset, yOffset, zOffset);
		return retval;
	}

	std::tuple<bool, Vector3, Vector3> LUA_NATIVE_OBJECT_GET_COORDS_AND_ROTATION_OF_CLOSEST_OBJECT_OF_TYPE( float x, float y, float z, float radius, Hash modelHash, Vector3 outPosition, Vector3 outRotation, int rotationOrder )
	{
		std::tuple<bool, Vector3, Vector3> return_values;
		std::get<0>(return_values) = (bool)OBJECT::GET_COORDS_AND_ROTATION_OF_CLOSEST_OBJECT_OF_TYPE(x, y, z, radius, modelHash, &outPosition, &outRotation, rotationOrder);
		std::get<1>(return_values) = outPosition;
		std::get<2>(return_values) = outRotation;

		return return_values;
	}

	void LUA_NATIVE_OBJECT_SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( Hash type, float x, float y, float z, bool locked, float heading, bool p6 )
	{
		OBJECT::SET_STATE_OF_CLOSEST_DOOR_OF_TYPE(type, x, y, z, locked, heading, p6);
	}

	std::tuple<bool, float> LUA_NATIVE_OBJECT_GET_STATE_OF_CLOSEST_DOOR_OF_TYPE( Hash type, float x, float y, float z, bool locked, float heading )
	{
		std::tuple<bool, float> return_values;
		OBJECT::GET_STATE_OF_CLOSEST_DOOR_OF_TYPE(type, x, y, z, (BOOL*)&locked, &heading);
		std::get<0>(return_values) = locked;
		std::get<1>(return_values) = heading;

		return return_values;
	}

	void LUA_NATIVE_OBJECT_SET_LOCKED_UNSTREAMED_IN_DOOR_OF_TYPE( Hash modelHash, float x, float y, float z, bool locked, float xRotMult, float yRotMult, float zRotMult )
	{
		OBJECT::SET_LOCKED_UNSTREAMED_IN_DOOR_OF_TYPE(modelHash, x, y, z, locked, xRotMult, yRotMult, zRotMult);
	}

	void LUA_NATIVE_OBJECT_PLAY_OBJECT_AUTO_START_ANIM( Any p0 )
	{
		OBJECT::PLAY_OBJECT_AUTO_START_ANIM(p0);
	}

	void LUA_NATIVE_OBJECT_ADD_DOOR_TO_SYSTEM( Hash doorHash, Hash modelHash, float x, float y, float z, bool p5, bool scriptDoor, bool isLocal )
	{
		OBJECT::ADD_DOOR_TO_SYSTEM(doorHash, modelHash, x, y, z, p5, scriptDoor, isLocal);
	}

	void LUA_NATIVE_OBJECT_REMOVE_DOOR_FROM_SYSTEM( Hash doorHash, Any p1 )
	{
		OBJECT::REMOVE_DOOR_FROM_SYSTEM(doorHash, p1);
	}

	void LUA_NATIVE_OBJECT_DOOR_SYSTEM_SET_DOOR_STATE( Hash doorHash, int state, bool requestDoor, bool forceUpdate )
	{
		OBJECT::DOOR_SYSTEM_SET_DOOR_STATE(doorHash, state, requestDoor, forceUpdate);
	}

	int LUA_NATIVE_OBJECT_DOOR_SYSTEM_GET_DOOR_STATE( Hash doorHash )
	{
		auto retval = OBJECT::DOOR_SYSTEM_GET_DOOR_STATE(doorHash);
		return retval;
	}

	int LUA_NATIVE_OBJECT_DOOR_SYSTEM_GET_DOOR_PENDING_STATE( Hash doorHash )
	{
		auto retval = OBJECT::DOOR_SYSTEM_GET_DOOR_PENDING_STATE(doorHash);
		return retval;
	}

	void LUA_NATIVE_OBJECT_DOOR_SYSTEM_SET_AUTOMATIC_RATE( Hash doorHash, float rate, bool requestDoor, bool forceUpdate )
	{
		OBJECT::DOOR_SYSTEM_SET_AUTOMATIC_RATE(doorHash, rate, requestDoor, forceUpdate);
	}

	void LUA_NATIVE_OBJECT_DOOR_SYSTEM_SET_AUTOMATIC_DISTANCE( Hash doorHash, float distance, bool requestDoor, bool forceUpdate )
	{
		OBJECT::DOOR_SYSTEM_SET_AUTOMATIC_DISTANCE(doorHash, distance, requestDoor, forceUpdate);
	}

	void LUA_NATIVE_OBJECT_DOOR_SYSTEM_SET_OPEN_RATIO( Hash doorHash, float ajar, bool requestDoor, bool forceUpdate )
	{
		OBJECT::DOOR_SYSTEM_SET_OPEN_RATIO(doorHash, ajar, requestDoor, forceUpdate);
	}

	float LUA_NATIVE_OBJECT_DOOR_SYSTEM_GET_AUTOMATIC_DISTANCE( Hash doorHash )
	{
		auto retval = OBJECT::DOOR_SYSTEM_GET_AUTOMATIC_DISTANCE(doorHash);
		return retval;
	}

	float LUA_NATIVE_OBJECT_DOOR_SYSTEM_GET_OPEN_RATIO( Hash doorHash )
	{
		auto retval = OBJECT::DOOR_SYSTEM_GET_OPEN_RATIO(doorHash);
		return retval;
	}

	void LUA_NATIVE_OBJECT_DOOR_SYSTEM_SET_SPRING_REMOVED( Hash doorHash, bool removed, bool requestDoor, bool forceUpdate )
	{
		OBJECT::DOOR_SYSTEM_SET_SPRING_REMOVED(doorHash, removed, requestDoor, forceUpdate);
	}

	void LUA_NATIVE_OBJECT_DOOR_SYSTEM_SET_HOLD_OPEN( Hash doorHash, bool toggle )
	{
		OBJECT::DOOR_SYSTEM_SET_HOLD_OPEN(doorHash, toggle);
	}

	void LUA_NATIVE_OBJECT_DOOR_SYSTEM_SET_DOOR_OPEN_FOR_RACES( Hash doorHash, bool p1 )
	{
		OBJECT::DOOR_SYSTEM_SET_DOOR_OPEN_FOR_RACES(doorHash, p1);
	}

	bool LUA_NATIVE_OBJECT_IS_DOOR_REGISTERED_WITH_SYSTEM( Hash doorHash )
	{
		auto retval = (bool)OBJECT::IS_DOOR_REGISTERED_WITH_SYSTEM(doorHash);
		return retval;
	}

	bool LUA_NATIVE_OBJECT_IS_DOOR_CLOSED( Hash doorHash )
	{
		auto retval = (bool)OBJECT::IS_DOOR_CLOSED(doorHash);
		return retval;
	}

	void LUA_NATIVE_OBJECT_OPEN_ALL_BARRIERS_FOR_RACE( bool p0 )
	{
		OBJECT::OPEN_ALL_BARRIERS_FOR_RACE(p0);
	}

	void LUA_NATIVE_OBJECT_CLOSE_ALL_BARRIERS_FOR_RACE(  )
	{
		OBJECT::CLOSE_ALL_BARRIERS_FOR_RACE();
	}

	bool LUA_NATIVE_OBJECT_DOOR_SYSTEM_GET_IS_PHYSICS_LOADED( Any p0 )
	{
		auto retval = (bool)OBJECT::DOOR_SYSTEM_GET_IS_PHYSICS_LOADED(p0);
		return retval;
	}

	std::tuple<bool, Hash> LUA_NATIVE_OBJECT_DOOR_SYSTEM_FIND_EXISTING_DOOR( float x, float y, float z, Hash modelHash, Hash outDoorHash )
	{
		std::tuple<bool, Hash> return_values;
		std::get<0>(return_values) = (bool)OBJECT::DOOR_SYSTEM_FIND_EXISTING_DOOR(x, y, z, modelHash, &outDoorHash);
		std::get<1>(return_values) = outDoorHash;

		return return_values;
	}

	bool LUA_NATIVE_OBJECT_IS_GARAGE_EMPTY( Hash garageHash, bool p1, int p2 )
	{
		auto retval = (bool)OBJECT::IS_GARAGE_EMPTY(garageHash, p1, p2);
		return retval;
	}

	bool LUA_NATIVE_OBJECT_IS_PLAYER_ENTIRELY_INSIDE_GARAGE( Hash garageHash, Player player, float p2, int p3 )
	{
		auto retval = (bool)OBJECT::IS_PLAYER_ENTIRELY_INSIDE_GARAGE(garageHash, player, p2, p3);
		return retval;
	}

	bool LUA_NATIVE_OBJECT_IS_PLAYER_PARTIALLY_INSIDE_GARAGE( Hash garageHash, Player player, int p2 )
	{
		auto retval = (bool)OBJECT::IS_PLAYER_PARTIALLY_INSIDE_GARAGE(garageHash, player, p2);
		return retval;
	}

	bool LUA_NATIVE_OBJECT_ARE_ENTITIES_ENTIRELY_INSIDE_GARAGE( Hash garageHash, bool p1, bool p2, bool p3, Any p4 )
	{
		auto retval = (bool)OBJECT::ARE_ENTITIES_ENTIRELY_INSIDE_GARAGE(garageHash, p1, p2, p3, p4);
		return retval;
	}

	bool LUA_NATIVE_OBJECT_IS_ANY_ENTITY_ENTIRELY_INSIDE_GARAGE( Hash garageHash, bool p1, bool p2, bool p3, Any p4 )
	{
		auto retval = (bool)OBJECT::IS_ANY_ENTITY_ENTIRELY_INSIDE_GARAGE(garageHash, p1, p2, p3, p4);
		return retval;
	}

	bool LUA_NATIVE_OBJECT_IS_OBJECT_ENTIRELY_INSIDE_GARAGE( Hash garageHash, Entity entity, float p2, int p3 )
	{
		auto retval = (bool)OBJECT::IS_OBJECT_ENTIRELY_INSIDE_GARAGE(garageHash, entity, p2, p3);
		return retval;
	}

	bool LUA_NATIVE_OBJECT_IS_OBJECT_PARTIALLY_INSIDE_GARAGE( Hash garageHash, Entity entity, int p2 )
	{
		auto retval = (bool)OBJECT::IS_OBJECT_PARTIALLY_INSIDE_GARAGE(garageHash, entity, p2);
		return retval;
	}

	void LUA_NATIVE_OBJECT_CLEAR_GARAGE( Hash garageHash, bool isNetwork )
	{
		OBJECT::CLEAR_GARAGE(garageHash, isNetwork);
	}

	void LUA_NATIVE_OBJECT_CLEAR_OBJECTS_INSIDE_GARAGE( Hash garageHash, bool vehicles, bool peds, bool objects, bool isNetwork )
	{
		OBJECT::CLEAR_OBJECTS_INSIDE_GARAGE(garageHash, vehicles, peds, objects, isNetwork);
	}

	void LUA_NATIVE_OBJECT_DISABLE_TIDYING_UP_IN_GARAGE( int id, bool toggle )
	{
		OBJECT::DISABLE_TIDYING_UP_IN_GARAGE(id, toggle);
	}

	void LUA_NATIVE_OBJECT_ENABLE_SAVING_IN_GARAGE( Hash garageHash, bool toggle )
	{
		OBJECT::ENABLE_SAVING_IN_GARAGE(garageHash, toggle);
	}

	void LUA_NATIVE_OBJECT_CLOSE_SAFEHOUSE_GARAGES(  )
	{
		OBJECT::CLOSE_SAFEHOUSE_GARAGES();
	}

	bool LUA_NATIVE_OBJECT_DOES_OBJECT_OF_TYPE_EXIST_AT_COORDS( float x, float y, float z, float radius, Hash hash, bool p5 )
	{
		auto retval = (bool)OBJECT::DOES_OBJECT_OF_TYPE_EXIST_AT_COORDS(x, y, z, radius, hash, p5);
		return retval;
	}

	bool LUA_NATIVE_OBJECT_IS_POINT_IN_ANGLED_AREA( float xPos, float yPos, float zPos, float x1, float y1, float z1, float x2, float y2, float z2, float width, bool debug, bool includeZ )
	{
		auto retval = (bool)OBJECT::IS_POINT_IN_ANGLED_AREA(xPos, yPos, zPos, x1, y1, z1, x2, y2, z2, width, debug, includeZ);
		return retval;
	}

	void LUA_NATIVE_OBJECT_SET_OBJECT_ALLOW_LOW_LOD_BUOYANCY( Object object, bool toggle )
	{
		OBJECT::SET_OBJECT_ALLOW_LOW_LOD_BUOYANCY(object, toggle);
	}

	void LUA_NATIVE_OBJECT_SET_OBJECT_PHYSICS_PARAMS( Object object, float weight, float p2, float p3, float p4, float p5, float gravity, float p7, float p8, float p9, float p10, float buoyancy )
	{
		OBJECT::SET_OBJECT_PHYSICS_PARAMS(object, weight, p2, p3, p4, p5, gravity, p7, p8, p9, p10, buoyancy);
	}

	float LUA_NATIVE_OBJECT_GET_OBJECT_FRAGMENT_DAMAGE_HEALTH( Any p0, bool p1 )
	{
		auto retval = OBJECT::GET_OBJECT_FRAGMENT_DAMAGE_HEALTH(p0, p1);
		return retval;
	}

	void LUA_NATIVE_OBJECT_SET_ACTIVATE_OBJECT_PHYSICS_AS_SOON_AS_IT_IS_UNFROZEN( Object object, bool toggle )
	{
		OBJECT::SET_ACTIVATE_OBJECT_PHYSICS_AS_SOON_AS_IT_IS_UNFROZEN(object, toggle);
	}

	bool LUA_NATIVE_OBJECT_IS_ANY_OBJECT_NEAR_POINT( float x, float y, float z, float range, bool p4 )
	{
		auto retval = (bool)OBJECT::IS_ANY_OBJECT_NEAR_POINT(x, y, z, range, p4);
		return retval;
	}

	bool LUA_NATIVE_OBJECT_IS_OBJECT_NEAR_POINT( Hash objectHash, float x, float y, float z, float range )
	{
		auto retval = (bool)OBJECT::IS_OBJECT_NEAR_POINT(objectHash, x, y, z, range);
		return retval;
	}

	void LUA_NATIVE_OBJECT_REMOVE_OBJECT_HIGH_DETAIL_MODEL( Object object )
	{
		OBJECT::REMOVE_OBJECT_HIGH_DETAIL_MODEL(object);
	}

	void LUA_NATIVE_OBJECT_BREAK_OBJECT_FRAGMENT_CHILD( Object p0, Any p1, bool p2 )
	{
		OBJECT::BREAK_OBJECT_FRAGMENT_CHILD(p0, p1, p2);
	}

	void LUA_NATIVE_OBJECT_DAMAGE_OBJECT_FRAGMENT_CHILD( Any p0, Any p1, Any p2 )
	{
		OBJECT::DAMAGE_OBJECT_FRAGMENT_CHILD(p0, p1, p2);
	}

	void LUA_NATIVE_OBJECT_FIX_OBJECT_FRAGMENT( Object object )
	{
		OBJECT::FIX_OBJECT_FRAGMENT(object);
	}

	void LUA_NATIVE_OBJECT_TRACK_OBJECT_VISIBILITY( Object object )
	{
		OBJECT::TRACK_OBJECT_VISIBILITY(object);
	}

	bool LUA_NATIVE_OBJECT_IS_OBJECT_VISIBLE( Object object )
	{
		auto retval = (bool)OBJECT::IS_OBJECT_VISIBLE(object);
		return retval;
	}

	void LUA_NATIVE_OBJECT_SET_OBJECT_IS_SPECIAL_GOLFBALL( Object object, bool toggle )
	{
		OBJECT::SET_OBJECT_IS_SPECIAL_GOLFBALL(object, toggle);
	}

	void LUA_NATIVE_OBJECT_SET_OBJECT_TAKES_DAMAGE_FROM_COLLIDING_WITH_BUILDINGS( Any p0, bool p1 )
	{
		OBJECT::SET_OBJECT_TAKES_DAMAGE_FROM_COLLIDING_WITH_BUILDINGS(p0, p1);
	}

	void LUA_NATIVE_OBJECT_ALLOW_DAMAGE_EVENTS_FOR_NON_NETWORKED_OBJECTS( bool value )
	{
		OBJECT::ALLOW_DAMAGE_EVENTS_FOR_NON_NETWORKED_OBJECTS(value);
	}

	void LUA_NATIVE_OBJECT_SET_CUTSCENES_WEAPON_FLASHLIGHT_ON_THIS_FRAME( Object object, bool toggle )
	{
		OBJECT::SET_CUTSCENES_WEAPON_FLASHLIGHT_ON_THIS_FRAME(object, toggle);
	}

	Object LUA_NATIVE_OBJECT_GET_RAYFIRE_MAP_OBJECT( float x, float y, float z, float radius, const char* name )
	{
		auto retval = OBJECT::GET_RAYFIRE_MAP_OBJECT(x, y, z, radius, name);
		return retval;
	}

	void LUA_NATIVE_OBJECT_SET_STATE_OF_RAYFIRE_MAP_OBJECT( Object object, int state )
	{
		OBJECT::SET_STATE_OF_RAYFIRE_MAP_OBJECT(object, state);
	}

	int LUA_NATIVE_OBJECT_GET_STATE_OF_RAYFIRE_MAP_OBJECT( Object object )
	{
		auto retval = OBJECT::GET_STATE_OF_RAYFIRE_MAP_OBJECT(object);
		return retval;
	}

	bool LUA_NATIVE_OBJECT_DOES_RAYFIRE_MAP_OBJECT_EXIST( Object object )
	{
		auto retval = (bool)OBJECT::DOES_RAYFIRE_MAP_OBJECT_EXIST(object);
		return retval;
	}

	float LUA_NATIVE_OBJECT_GET_RAYFIRE_MAP_OBJECT_ANIM_PHASE( Object object )
	{
		auto retval = OBJECT::GET_RAYFIRE_MAP_OBJECT_ANIM_PHASE(object);
		return retval;
	}

	Pickup LUA_NATIVE_OBJECT_CREATE_PICKUP( Hash pickupHash, float posX, float posY, float posZ, int p4, int value, bool p6, Hash modelHash )
	{
		auto retval = OBJECT::CREATE_PICKUP(pickupHash, posX, posY, posZ, p4, value, p6, modelHash);
		return retval;
	}

	Pickup LUA_NATIVE_OBJECT_CREATE_PICKUP_ROTATE( Hash pickupHash, float posX, float posY, float posZ, float rotX, float rotY, float rotZ, int flag, int amount, Any p9, bool p10, Hash modelHash )
	{
		auto retval = OBJECT::CREATE_PICKUP_ROTATE(pickupHash, posX, posY, posZ, rotX, rotY, rotZ, flag, amount, p9, p10, modelHash);
		return retval;
	}

	void LUA_NATIVE_OBJECT_FORCE_PICKUP_ROTATE_FACE_UP(  )
	{
		OBJECT::FORCE_PICKUP_ROTATE_FACE_UP();
	}

	void LUA_NATIVE_OBJECT_SET_CUSTOM_PICKUP_WEAPON_HASH( Hash pickupHash, Pickup pickup )
	{
		OBJECT::SET_CUSTOM_PICKUP_WEAPON_HASH(pickupHash, pickup);
	}

	Object LUA_NATIVE_OBJECT_CREATE_AMBIENT_PICKUP( Hash pickupHash, float posX, float posY, float posZ, int flags, int value, Hash modelHash, bool p7, bool p8 )
	{
		auto retval = OBJECT::CREATE_AMBIENT_PICKUP(pickupHash, posX, posY, posZ, flags, value, modelHash, p7, p8);
		return retval;
	}

	Object LUA_NATIVE_OBJECT_CREATE_NON_NETWORKED_AMBIENT_PICKUP( Hash pickupHash, float posX, float posY, float posZ, int flags, int value, Hash modelHash, bool p7, bool p8 )
	{
		auto retval = OBJECT::CREATE_NON_NETWORKED_AMBIENT_PICKUP(pickupHash, posX, posY, posZ, flags, value, modelHash, p7, p8);
		return retval;
	}

	void LUA_NATIVE_OBJECT_BLOCK_PLAYERS_FOR_AMBIENT_PICKUP( Any p0, Any p1 )
	{
		OBJECT::BLOCK_PLAYERS_FOR_AMBIENT_PICKUP(p0, p1);
	}

	Object LUA_NATIVE_OBJECT_CREATE_PORTABLE_PICKUP( Hash pickupHash, float x, float y, float z, bool placeOnGround, Hash modelHash )
	{
		auto retval = OBJECT::CREATE_PORTABLE_PICKUP(pickupHash, x, y, z, placeOnGround, modelHash);
		return retval;
	}

	Object LUA_NATIVE_OBJECT_CREATE_NON_NETWORKED_PORTABLE_PICKUP( Hash pickupHash, float x, float y, float z, bool placeOnGround, Hash modelHash )
	{
		auto retval = OBJECT::CREATE_NON_NETWORKED_PORTABLE_PICKUP(pickupHash, x, y, z, placeOnGround, modelHash);
		return retval;
	}

	void LUA_NATIVE_OBJECT_ATTACH_PORTABLE_PICKUP_TO_PED( Object pickupObject, Ped ped )
	{
		OBJECT::ATTACH_PORTABLE_PICKUP_TO_PED(pickupObject, ped);
	}

	void LUA_NATIVE_OBJECT_DETACH_PORTABLE_PICKUP_FROM_PED( Object pickupObject )
	{
		OBJECT::DETACH_PORTABLE_PICKUP_FROM_PED(pickupObject);
	}

	void LUA_NATIVE_OBJECT_FORCE_PORTABLE_PICKUP_LAST_ACCESSIBLE_POSITION_SETTING( Object object )
	{
		OBJECT::FORCE_PORTABLE_PICKUP_LAST_ACCESSIBLE_POSITION_SETTING(object);
	}

	void LUA_NATIVE_OBJECT_HIDE_PORTABLE_PICKUP_WHEN_DETACHED( Object pickupObject, bool toggle )
	{
		OBJECT::HIDE_PORTABLE_PICKUP_WHEN_DETACHED(pickupObject, toggle);
	}

	void LUA_NATIVE_OBJECT_SET_MAX_NUM_PORTABLE_PICKUPS_CARRIED_BY_PLAYER( Hash modelHash, int number )
	{
		OBJECT::SET_MAX_NUM_PORTABLE_PICKUPS_CARRIED_BY_PLAYER(modelHash, number);
	}

	void LUA_NATIVE_OBJECT_SET_LOCAL_PLAYER_CAN_COLLECT_PORTABLE_PICKUPS( bool toggle )
	{
		OBJECT::SET_LOCAL_PLAYER_CAN_COLLECT_PORTABLE_PICKUPS(toggle);
	}

	Vector3 LUA_NATIVE_OBJECT_GET_SAFE_PICKUP_COORDS( float x, float y, float z, float p3, float p4 )
	{
		auto retval = OBJECT::GET_SAFE_PICKUP_COORDS(x, y, z, p3, p4);
		return retval;
	}

	void LUA_NATIVE_OBJECT_ADD_EXTENDED_PICKUP_PROBE_AREA( float x, float y, float z, float radius )
	{
		OBJECT::ADD_EXTENDED_PICKUP_PROBE_AREA(x, y, z, radius);
	}

	void LUA_NATIVE_OBJECT_CLEAR_EXTENDED_PICKUP_PROBE_AREAS(  )
	{
		OBJECT::CLEAR_EXTENDED_PICKUP_PROBE_AREAS();
	}

	Vector3 LUA_NATIVE_OBJECT_GET_PICKUP_COORDS( Pickup pickup )
	{
		auto retval = OBJECT::GET_PICKUP_COORDS(pickup);
		return retval;
	}

	void LUA_NATIVE_OBJECT_SUPPRESS_PICKUP_SOUND_FOR_PICKUP( Any p0, Any p1 )
	{
		OBJECT::SUPPRESS_PICKUP_SOUND_FOR_PICKUP(p0, p1);
	}

	void LUA_NATIVE_OBJECT_REMOVE_ALL_PICKUPS_OF_TYPE( Hash pickupHash )
	{
		OBJECT::REMOVE_ALL_PICKUPS_OF_TYPE(pickupHash);
	}

	bool LUA_NATIVE_OBJECT_HAS_PICKUP_BEEN_COLLECTED( Pickup pickup )
	{
		auto retval = (bool)OBJECT::HAS_PICKUP_BEEN_COLLECTED(pickup);
		return retval;
	}

	void LUA_NATIVE_OBJECT_REMOVE_PICKUP( Pickup pickup )
	{
		OBJECT::REMOVE_PICKUP(pickup);
	}

	void LUA_NATIVE_OBJECT_CREATE_MONEY_PICKUPS( float x, float y, float z, int value, int amount, Hash model )
	{
		OBJECT::CREATE_MONEY_PICKUPS(x, y, z, value, amount, model);
	}

	bool LUA_NATIVE_OBJECT_DOES_PICKUP_EXIST( Pickup pickup )
	{
		auto retval = (bool)OBJECT::DOES_PICKUP_EXIST(pickup);
		return retval;
	}

	bool LUA_NATIVE_OBJECT_DOES_PICKUP_OBJECT_EXIST( Object pickupObject )
	{
		auto retval = (bool)OBJECT::DOES_PICKUP_OBJECT_EXIST(pickupObject);
		return retval;
	}

	Object LUA_NATIVE_OBJECT_GET_PICKUP_OBJECT( Pickup pickup )
	{
		auto retval = OBJECT::GET_PICKUP_OBJECT(pickup);
		return retval;
	}

	bool LUA_NATIVE_OBJECT_IS_OBJECT_A_PICKUP( Object object )
	{
		auto retval = (bool)OBJECT::IS_OBJECT_A_PICKUP(object);
		return retval;
	}

	bool LUA_NATIVE_OBJECT_IS_OBJECT_A_PORTABLE_PICKUP( Object object )
	{
		auto retval = (bool)OBJECT::IS_OBJECT_A_PORTABLE_PICKUP(object);
		return retval;
	}

	bool LUA_NATIVE_OBJECT_DOES_PICKUP_OF_TYPE_EXIST_IN_AREA( Hash pickupHash, float x, float y, float z, float radius )
	{
		auto retval = (bool)OBJECT::DOES_PICKUP_OF_TYPE_EXIST_IN_AREA(pickupHash, x, y, z, radius);
		return retval;
	}

	void LUA_NATIVE_OBJECT_SET_PICKUP_REGENERATION_TIME( Pickup pickup, int duration )
	{
		OBJECT::SET_PICKUP_REGENERATION_TIME(pickup, duration);
	}

	void LUA_NATIVE_OBJECT_FORCE_PICKUP_REGENERATE( Any p0 )
	{
		OBJECT::FORCE_PICKUP_REGENERATE(p0);
	}

	void LUA_NATIVE_OBJECT_SET_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_OF_TYPE( Player player, Hash pickupHash, bool toggle )
	{
		OBJECT::SET_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_OF_TYPE(player, pickupHash, toggle);
	}

	void LUA_NATIVE_OBJECT_SET_LOCAL_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_WITH_MODEL( Hash modelHash, bool toggle )
	{
		OBJECT::SET_LOCAL_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_WITH_MODEL(modelHash, toggle);
	}

	void LUA_NATIVE_OBJECT_ALLOW_ALL_PLAYERS_TO_COLLECT_PICKUPS_OF_TYPE( Hash pickupHash )
	{
		OBJECT::ALLOW_ALL_PLAYERS_TO_COLLECT_PICKUPS_OF_TYPE(pickupHash);
	}

	void LUA_NATIVE_OBJECT_SET_TEAM_PICKUP_OBJECT( Object object, Any p1, bool p2 )
	{
		OBJECT::SET_TEAM_PICKUP_OBJECT(object, p1, p2);
	}

	void LUA_NATIVE_OBJECT_PREVENT_COLLECTION_OF_PORTABLE_PICKUP( Object object, bool p1, bool p2 )
	{
		OBJECT::PREVENT_COLLECTION_OF_PORTABLE_PICKUP(object, p1, p2);
	}

	void LUA_NATIVE_OBJECT_SET_PICKUP_OBJECT_GLOW_WHEN_UNCOLLECTABLE( Pickup pickup, bool toggle )
	{
		OBJECT::SET_PICKUP_OBJECT_GLOW_WHEN_UNCOLLECTABLE(pickup, toggle);
	}

	void LUA_NATIVE_OBJECT_SET_PICKUP_GLOW_OFFSET( Pickup pickup, float p1 )
	{
		OBJECT::SET_PICKUP_GLOW_OFFSET(pickup, p1);
	}

	void LUA_NATIVE_OBJECT_SET_PICKUP_OBJECT_GLOW_OFFSET( Pickup pickup, float p1, bool p2 )
	{
		OBJECT::SET_PICKUP_OBJECT_GLOW_OFFSET(pickup, p1, p2);
	}

	void LUA_NATIVE_OBJECT_SET_OBJECT_GLOW_IN_SAME_TEAM( Pickup pickup )
	{
		OBJECT::SET_OBJECT_GLOW_IN_SAME_TEAM(pickup);
	}

	void LUA_NATIVE_OBJECT_SET_PICKUP_OBJECT_ARROW_MARKER( Pickup pickup, bool toggle )
	{
		OBJECT::SET_PICKUP_OBJECT_ARROW_MARKER(pickup, toggle);
	}

	void LUA_NATIVE_OBJECT_ALLOW_PICKUP_ARROW_MARKER_WHEN_UNCOLLECTABLE( Pickup pickup, bool toggle )
	{
		OBJECT::ALLOW_PICKUP_ARROW_MARKER_WHEN_UNCOLLECTABLE(pickup, toggle);
	}

	int LUA_NATIVE_OBJECT_GET_DEFAULT_AMMO_FOR_WEAPON_PICKUP( Hash pickupHash )
	{
		auto retval = OBJECT::GET_DEFAULT_AMMO_FOR_WEAPON_PICKUP(pickupHash);
		return retval;
	}

	void LUA_NATIVE_OBJECT_SET_PICKUP_GENERATION_RANGE_MULTIPLIER( float multiplier )
	{
		OBJECT::SET_PICKUP_GENERATION_RANGE_MULTIPLIER(multiplier);
	}

	float LUA_NATIVE_OBJECT_GET_PICKUP_GENERATION_RANGE_MULTIPLIER(  )
	{
		auto retval = OBJECT::GET_PICKUP_GENERATION_RANGE_MULTIPLIER();
		return retval;
	}

	void LUA_NATIVE_OBJECT_SET_ONLY_ALLOW_AMMO_COLLECTION_WHEN_LOW( bool p0 )
	{
		OBJECT::SET_ONLY_ALLOW_AMMO_COLLECTION_WHEN_LOW(p0);
	}

	void LUA_NATIVE_OBJECT_SET_PICKUP_UNCOLLECTABLE( Pickup pickup, bool toggle )
	{
		OBJECT::SET_PICKUP_UNCOLLECTABLE(pickup, toggle);
	}

	void LUA_NATIVE_OBJECT_SET_PICKUP_TRANSPARENT_WHEN_UNCOLLECTABLE( Pickup pickup, bool toggle )
	{
		OBJECT::SET_PICKUP_TRANSPARENT_WHEN_UNCOLLECTABLE(pickup, toggle);
	}

	void LUA_NATIVE_OBJECT_SET_PICKUP_HIDDEN_WHEN_UNCOLLECTABLE( Pickup pickup, bool toggle )
	{
		OBJECT::SET_PICKUP_HIDDEN_WHEN_UNCOLLECTABLE(pickup, toggle);
	}

	void LUA_NATIVE_OBJECT_SET_PICKUP_OBJECT_TRANSPARENT_WHEN_UNCOLLECTABLE( Pickup pickup, bool toggle )
	{
		OBJECT::SET_PICKUP_OBJECT_TRANSPARENT_WHEN_UNCOLLECTABLE(pickup, toggle);
	}

	void LUA_NATIVE_OBJECT_SET_PICKUP_OBJECT_ALPHA_WHEN_TRANSPARENT( int p0 )
	{
		OBJECT::SET_PICKUP_OBJECT_ALPHA_WHEN_TRANSPARENT(p0);
	}

	void LUA_NATIVE_OBJECT_SET_PORTABLE_PICKUP_PERSIST( Pickup pickup, bool toggle )
	{
		OBJECT::SET_PORTABLE_PICKUP_PERSIST(pickup, toggle);
	}

	void LUA_NATIVE_OBJECT_ALLOW_PORTABLE_PICKUP_TO_MIGRATE_TO_NON_PARTICIPANTS( Pickup pickup, bool toggle )
	{
		OBJECT::ALLOW_PORTABLE_PICKUP_TO_MIGRATE_TO_NON_PARTICIPANTS(pickup, toggle);
	}

	void LUA_NATIVE_OBJECT_FORCE_ACTIVATE_PHYSICS_ON_UNFIXED_PICKUP( Pickup pickup, bool toggle )
	{
		OBJECT::FORCE_ACTIVATE_PHYSICS_ON_UNFIXED_PICKUP(pickup, toggle);
	}

	void LUA_NATIVE_OBJECT_ALLOW_PICKUP_BY_NONE_PARTICIPANT( Pickup pickup, bool toggle )
	{
		OBJECT::ALLOW_PICKUP_BY_NONE_PARTICIPANT(pickup, toggle);
	}

	void LUA_NATIVE_OBJECT_SUPPRESS_PICKUP_REWARD_TYPE( int rewardType, bool suppress )
	{
		OBJECT::SUPPRESS_PICKUP_REWARD_TYPE(rewardType, suppress);
	}

	void LUA_NATIVE_OBJECT_CLEAR_ALL_PICKUP_REWARD_TYPE_SUPPRESSION(  )
	{
		OBJECT::CLEAR_ALL_PICKUP_REWARD_TYPE_SUPPRESSION();
	}

	void LUA_NATIVE_OBJECT_CLEAR_PICKUP_REWARD_TYPE_SUPPRESSION( int rewardType )
	{
		OBJECT::CLEAR_PICKUP_REWARD_TYPE_SUPPRESSION(rewardType);
	}

	void LUA_NATIVE_OBJECT_RENDER_FAKE_PICKUP_GLOW( float x, float y, float z, int colorIndex )
	{
		OBJECT::RENDER_FAKE_PICKUP_GLOW(x, y, z, colorIndex);
	}

	void LUA_NATIVE_OBJECT_SET_PICKUP_OBJECT_COLLECTABLE_IN_VEHICLE( Pickup pickup )
	{
		OBJECT::SET_PICKUP_OBJECT_COLLECTABLE_IN_VEHICLE(pickup);
	}

	void LUA_NATIVE_OBJECT_SET_PICKUP_TRACK_DAMAGE_EVENTS( Pickup pickup, bool toggle )
	{
		OBJECT::SET_PICKUP_TRACK_DAMAGE_EVENTS(pickup, toggle);
	}

	void LUA_NATIVE_OBJECT_SET_ENTITY_FLAG_SUPPRESS_SHADOW( Entity entity, bool toggle )
	{
		OBJECT::SET_ENTITY_FLAG_SUPPRESS_SHADOW(entity, toggle);
	}

	void LUA_NATIVE_OBJECT_SET_ENTITY_FLAG_RENDER_SMALL_SHADOW( Object object, bool toggle )
	{
		OBJECT::SET_ENTITY_FLAG_RENDER_SMALL_SHADOW(object, toggle);
	}

	Hash LUA_NATIVE_OBJECT_GET_WEAPON_TYPE_FROM_PICKUP_TYPE( Hash pickupHash )
	{
		auto retval = OBJECT::GET_WEAPON_TYPE_FROM_PICKUP_TYPE(pickupHash);
		return retval;
	}

	Hash LUA_NATIVE_OBJECT_GET_PICKUP_TYPE_FROM_WEAPON_HASH( Hash weaponHash )
	{
		auto retval = OBJECT::GET_PICKUP_TYPE_FROM_WEAPON_HASH(weaponHash);
		return retval;
	}

	bool LUA_NATIVE_OBJECT_IS_PICKUP_WEAPON_OBJECT_VALID( Object object )
	{
		auto retval = (bool)OBJECT::IS_PICKUP_WEAPON_OBJECT_VALID(object);
		return retval;
	}

	int LUA_NATIVE_OBJECT_GET_OBJECT_TINT_INDEX( Object object )
	{
		auto retval = OBJECT::GET_OBJECT_TINT_INDEX(object);
		return retval;
	}

	void LUA_NATIVE_OBJECT_SET_OBJECT_TINT_INDEX( Object object, int textureVariation )
	{
		OBJECT::SET_OBJECT_TINT_INDEX(object, textureVariation);
	}

	bool LUA_NATIVE_OBJECT_SET_TINT_INDEX_CLOSEST_BUILDING_OF_TYPE( float x, float y, float z, float radius, Hash modelHash, int textureVariation )
	{
		auto retval = (bool)OBJECT::SET_TINT_INDEX_CLOSEST_BUILDING_OF_TYPE(x, y, z, radius, modelHash, textureVariation);
		return retval;
	}

	void LUA_NATIVE_OBJECT_SET_PROP_TINT_INDEX( Any p0, Any p1 )
	{
		OBJECT::SET_PROP_TINT_INDEX(p0, p1);
	}

	bool LUA_NATIVE_OBJECT_SET_PROP_LIGHT_COLOR( Object object, bool p1, int r, int g, int b )
	{
		auto retval = (bool)OBJECT::SET_PROP_LIGHT_COLOR(object, p1, r, g, b);
		return retval;
	}

	bool LUA_NATIVE_OBJECT_IS_PROP_LIGHT_OVERRIDEN( Object object )
	{
		auto retval = (bool)OBJECT::IS_PROP_LIGHT_OVERRIDEN(object);
		return retval;
	}

	void LUA_NATIVE_OBJECT_SET_OBJECT_IS_VISIBLE_IN_MIRRORS( Object object, bool toggle )
	{
		OBJECT::SET_OBJECT_IS_VISIBLE_IN_MIRRORS(object, toggle);
	}

	void LUA_NATIVE_OBJECT_SET_OBJECT_SPEED_BOOST_AMOUNT( Object object, Any p1 )
	{
		OBJECT::SET_OBJECT_SPEED_BOOST_AMOUNT(object, p1);
	}

	void LUA_NATIVE_OBJECT_SET_OBJECT_SPEED_BOOST_DURATION( Object object, float duration )
	{
		OBJECT::SET_OBJECT_SPEED_BOOST_DURATION(object, duration);
	}

	Hash LUA_NATIVE_OBJECT_CONVERT_OLD_PICKUP_TYPE_TO_NEW( Hash pickupHash )
	{
		auto retval = OBJECT::CONVERT_OLD_PICKUP_TYPE_TO_NEW(pickupHash);
		return retval;
	}

	void LUA_NATIVE_OBJECT_SET_FORCE_OBJECT_THIS_FRAME( float x, float y, float z, float p3 )
	{
		OBJECT::SET_FORCE_OBJECT_THIS_FRAME(x, y, z, p3);
	}

	void LUA_NATIVE_OBJECT_ONLY_CLEAN_UP_OBJECT_WHEN_OUT_OF_RANGE( Object object )
	{
		OBJECT::ONLY_CLEAN_UP_OBJECT_WHEN_OUT_OF_RANGE(object);
	}

	void LUA_NATIVE_OBJECT_SET_DISABLE_COLLISIONS_BETWEEN_CARS_AND_CAR_PARACHUTE( Any p0 )
	{
		OBJECT::SET_DISABLE_COLLISIONS_BETWEEN_CARS_AND_CAR_PARACHUTE(p0);
	}

	void LUA_NATIVE_OBJECT_SET_PROJECTILES_SHOULD_EXPLODE_ON_CONTACT( Entity entity, Any p1 )
	{
		OBJECT::SET_PROJECTILES_SHOULD_EXPLODE_ON_CONTACT(entity, p1);
	}

	void LUA_NATIVE_OBJECT_SET_DRIVE_ARTICULATED_JOINT( Object object, bool toggle, int p2 )
	{
		OBJECT::SET_DRIVE_ARTICULATED_JOINT(object, toggle, p2);
	}

	void LUA_NATIVE_OBJECT_SET_DRIVE_ARTICULATED_JOINT_WITH_INFLICTOR( Object object, bool toggle, int p2, Ped ped )
	{
		OBJECT::SET_DRIVE_ARTICULATED_JOINT_WITH_INFLICTOR(object, toggle, p2, ped);
	}

	void LUA_NATIVE_OBJECT_SET_OBJECT_IS_A_PRESSURE_PLATE( Object object, bool toggle )
	{
		OBJECT::SET_OBJECT_IS_A_PRESSURE_PLATE(object, toggle);
	}

	void LUA_NATIVE_OBJECT_SET_WEAPON_IMPACTS_APPLY_GREATER_FORCE( Object object, bool p1 )
	{
		OBJECT::SET_WEAPON_IMPACTS_APPLY_GREATER_FORCE(object, p1);
	}

	bool LUA_NATIVE_OBJECT_GET_IS_ARTICULATED_JOINT_AT_MIN_ANGLE( Object object, Any p1 )
	{
		auto retval = (bool)OBJECT::GET_IS_ARTICULATED_JOINT_AT_MIN_ANGLE(object, p1);
		return retval;
	}

	bool LUA_NATIVE_OBJECT_GET_IS_ARTICULATED_JOINT_AT_MAX_ANGLE( Any p0, Any p1 )
	{
		auto retval = (bool)OBJECT::GET_IS_ARTICULATED_JOINT_AT_MAX_ANGLE(p0, p1);
		return retval;
	}

	void LUA_NATIVE_OBJECT_SET_IS_OBJECT_ARTICULATED( Object object, bool toggle )
	{
		OBJECT::SET_IS_OBJECT_ARTICULATED(object, toggle);
	}

	void LUA_NATIVE_OBJECT_SET_IS_OBJECT_BALL( Object object, bool toggle )
	{
		OBJECT::SET_IS_OBJECT_BALL(object, toggle);
	}

	bool LUA_NATIVE_PAD_IS_CONTROL_ENABLED( int control, int action )
	{
		auto retval = (bool)PAD::IS_CONTROL_ENABLED(control, action);
		return retval;
	}

	bool LUA_NATIVE_PAD_IS_CONTROL_PRESSED( int control, int action )
	{
		auto retval = (bool)PAD::IS_CONTROL_PRESSED(control, action);
		return retval;
	}

	bool LUA_NATIVE_PAD_IS_CONTROL_RELEASED( int control, int action )
	{
		auto retval = (bool)PAD::IS_CONTROL_RELEASED(control, action);
		return retval;
	}

	bool LUA_NATIVE_PAD_IS_CONTROL_JUST_PRESSED( int control, int action )
	{
		auto retval = (bool)PAD::IS_CONTROL_JUST_PRESSED(control, action);
		return retval;
	}

	bool LUA_NATIVE_PAD_IS_CONTROL_JUST_RELEASED( int control, int action )
	{
		auto retval = (bool)PAD::IS_CONTROL_JUST_RELEASED(control, action);
		return retval;
	}

	int LUA_NATIVE_PAD_GET_CONTROL_VALUE( int control, int action )
	{
		auto retval = PAD::GET_CONTROL_VALUE(control, action);
		return retval;
	}

	float LUA_NATIVE_PAD_GET_CONTROL_NORMAL( int control, int action )
	{
		auto retval = PAD::GET_CONTROL_NORMAL(control, action);
		return retval;
	}

	void LUA_NATIVE_PAD_SET_USE_ADJUSTED_MOUSE_COORDS( bool toggle )
	{
		PAD::SET_USE_ADJUSTED_MOUSE_COORDS(toggle);
	}

	float LUA_NATIVE_PAD_GET_CONTROL_UNBOUND_NORMAL( int control, int action )
	{
		auto retval = PAD::GET_CONTROL_UNBOUND_NORMAL(control, action);
		return retval;
	}

	bool LUA_NATIVE_PAD_SET_CONTROL_VALUE_NEXT_FRAME( int control, int action, float value )
	{
		auto retval = (bool)PAD::SET_CONTROL_VALUE_NEXT_FRAME(control, action, value);
		return retval;
	}

	bool LUA_NATIVE_PAD_IS_DISABLED_CONTROL_PRESSED( int control, int action )
	{
		auto retval = (bool)PAD::IS_DISABLED_CONTROL_PRESSED(control, action);
		return retval;
	}

	bool LUA_NATIVE_PAD_IS_DISABLED_CONTROL_RELEASED( int control, int action )
	{
		auto retval = (bool)PAD::IS_DISABLED_CONTROL_RELEASED(control, action);
		return retval;
	}

	bool LUA_NATIVE_PAD_IS_DISABLED_CONTROL_JUST_PRESSED( int control, int action )
	{
		auto retval = (bool)PAD::IS_DISABLED_CONTROL_JUST_PRESSED(control, action);
		return retval;
	}

	bool LUA_NATIVE_PAD_IS_DISABLED_CONTROL_JUST_RELEASED( int control, int action )
	{
		auto retval = (bool)PAD::IS_DISABLED_CONTROL_JUST_RELEASED(control, action);
		return retval;
	}

	float LUA_NATIVE_PAD_GET_DISABLED_CONTROL_NORMAL( int control, int action )
	{
		auto retval = PAD::GET_DISABLED_CONTROL_NORMAL(control, action);
		return retval;
	}

	float LUA_NATIVE_PAD_GET_DISABLED_CONTROL_UNBOUND_NORMAL( int control, int action )
	{
		auto retval = PAD::GET_DISABLED_CONTROL_UNBOUND_NORMAL(control, action);
		return retval;
	}

	int LUA_NATIVE_PAD_GET_CONTROL_HOW_LONG_AGO( int control )
	{
		auto retval = PAD::GET_CONTROL_HOW_LONG_AGO(control);
		return retval;
	}

	bool LUA_NATIVE_PAD_IS_USING_KEYBOARD_AND_MOUSE( int control )
	{
		auto retval = (bool)PAD::IS_USING_KEYBOARD_AND_MOUSE(control);
		return retval;
	}

	bool LUA_NATIVE_PAD_IS_USING_CURSOR( int control )
	{
		auto retval = (bool)PAD::IS_USING_CURSOR(control);
		return retval;
	}

	bool LUA_NATIVE_PAD_SET_CURSOR_POSITION( float x, float y )
	{
		auto retval = (bool)PAD::SET_CURSOR_POSITION(x, y);
		return retval;
	}

	bool LUA_NATIVE_PAD_IS_USING_REMOTE_PLAY( int control )
	{
		auto retval = (bool)PAD::IS_USING_REMOTE_PLAY(control);
		return retval;
	}

	bool LUA_NATIVE_PAD_HAVE_CONTROLS_CHANGED( int control )
	{
		auto retval = (bool)PAD::HAVE_CONTROLS_CHANGED(control);
		return retval;
	}

	const char* LUA_NATIVE_PAD_GET_CONTROL_INSTRUCTIONAL_BUTTONS_STRING( int control, int action, bool allowXOSwap )
	{
		auto retval = PAD::GET_CONTROL_INSTRUCTIONAL_BUTTONS_STRING(control, action, allowXOSwap);
		return retval;
	}

	const char* LUA_NATIVE_PAD_GET_CONTROL_GROUP_INSTRUCTIONAL_BUTTONS_STRING( int control, int controlGroup, bool allowXOSwap )
	{
		auto retval = PAD::GET_CONTROL_GROUP_INSTRUCTIONAL_BUTTONS_STRING(control, controlGroup, allowXOSwap);
		return retval;
	}

	void LUA_NATIVE_PAD_SET_CONTROL_LIGHT_EFFECT_COLOR( int control, int red, int green, int blue )
	{
		PAD::SET_CONTROL_LIGHT_EFFECT_COLOR(control, red, green, blue);
	}

	void LUA_NATIVE_PAD_CLEAR_CONTROL_LIGHT_EFFECT( int control )
	{
		PAD::CLEAR_CONTROL_LIGHT_EFFECT(control);
	}

	void LUA_NATIVE_PAD_SET_CONTROL_SHAKE( int control, int duration, int frequency )
	{
		PAD::SET_CONTROL_SHAKE(control, duration, frequency);
	}

	void LUA_NATIVE_PAD_SET_CONTROL_TRIGGER_SHAKE( int control, int leftDuration, int leftFrequency, int rightDuration, int rightFrequency )
	{
		PAD::SET_CONTROL_TRIGGER_SHAKE(control, leftDuration, leftFrequency, rightDuration, rightFrequency);
	}

	void LUA_NATIVE_PAD_STOP_CONTROL_SHAKE( int control )
	{
		PAD::STOP_CONTROL_SHAKE(control);
	}

	void LUA_NATIVE_PAD_SET_CONTROL_SHAKE_SUPPRESSED_ID( int control, int uniqueId )
	{
		PAD::SET_CONTROL_SHAKE_SUPPRESSED_ID(control, uniqueId);
	}

	void LUA_NATIVE_PAD_CLEAR_CONTROL_SHAKE_SUPPRESSED_ID( int control )
	{
		PAD::CLEAR_CONTROL_SHAKE_SUPPRESSED_ID(control);
	}

	bool LUA_NATIVE_PAD_IS_LOOK_INVERTED(  )
	{
		auto retval = (bool)PAD::IS_LOOK_INVERTED();
		return retval;
	}

	bool LUA_NATIVE_PAD_IS_MOUSE_LOOK_INVERTED(  )
	{
		auto retval = (bool)PAD::IS_MOUSE_LOOK_INVERTED();
		return retval;
	}

	int LUA_NATIVE_PAD_GET_LOCAL_PLAYER_AIM_STATE(  )
	{
		auto retval = PAD::GET_LOCAL_PLAYER_AIM_STATE();
		return retval;
	}

	int LUA_NATIVE_PAD_GET_LOCAL_PLAYER_GAMEPAD_AIM_STATE(  )
	{
		auto retval = PAD::GET_LOCAL_PLAYER_GAMEPAD_AIM_STATE();
		return retval;
	}

	bool LUA_NATIVE_PAD_GET_IS_USING_ALTERNATE_HANDBRAKE(  )
	{
		auto retval = (bool)PAD::GET_IS_USING_ALTERNATE_HANDBRAKE();
		return retval;
	}

	bool LUA_NATIVE_PAD_GET_IS_USING_ALTERNATE_DRIVEBY(  )
	{
		auto retval = (bool)PAD::GET_IS_USING_ALTERNATE_DRIVEBY();
		return retval;
	}

	bool LUA_NATIVE_PAD_GET_ALLOW_MOVEMENT_WHILE_ZOOMED(  )
	{
		auto retval = (bool)PAD::GET_ALLOW_MOVEMENT_WHILE_ZOOMED();
		return retval;
	}

	void LUA_NATIVE_PAD_SET_PLAYERPAD_SHAKES_WHEN_CONTROLLER_DISABLED( bool toggle )
	{
		PAD::SET_PLAYERPAD_SHAKES_WHEN_CONTROLLER_DISABLED(toggle);
	}

	void LUA_NATIVE_PAD_SET_INPUT_EXCLUSIVE( int control, int action )
	{
		PAD::SET_INPUT_EXCLUSIVE(control, action);
	}

	void LUA_NATIVE_PAD_DISABLE_CONTROL_ACTION( int control, int action, bool disableRelatedActions )
	{
		PAD::DISABLE_CONTROL_ACTION(control, action, disableRelatedActions);
	}

	void LUA_NATIVE_PAD_ENABLE_CONTROL_ACTION( int control, int action, bool enableRelatedActions )
	{
		PAD::ENABLE_CONTROL_ACTION(control, action, enableRelatedActions);
	}

	void LUA_NATIVE_PAD_DISABLE_ALL_CONTROL_ACTIONS( int control )
	{
		PAD::DISABLE_ALL_CONTROL_ACTIONS(control);
	}

	void LUA_NATIVE_PAD_ENABLE_ALL_CONTROL_ACTIONS( int control )
	{
		PAD::ENABLE_ALL_CONTROL_ACTIONS(control);
	}

	bool LUA_NATIVE_PAD_INIT_PC_SCRIPTED_CONTROLS( const char* schemeName )
	{
		auto retval = (bool)PAD::INIT_PC_SCRIPTED_CONTROLS(schemeName);
		return retval;
	}

	bool LUA_NATIVE_PAD_SWITCH_PC_SCRIPTED_CONTROLS( const char* schemeName )
	{
		auto retval = (bool)PAD::SWITCH_PC_SCRIPTED_CONTROLS(schemeName);
		return retval;
	}

	void LUA_NATIVE_PAD_SHUTDOWN_PC_SCRIPTED_CONTROLS(  )
	{
		PAD::SHUTDOWN_PC_SCRIPTED_CONTROLS();
	}

	void LUA_NATIVE_PAD_ALLOW_ALTERNATIVE_SCRIPT_CONTROLS_LAYOUT( int control )
	{
		PAD::ALLOW_ALTERNATIVE_SCRIPT_CONTROLS_LAYOUT(control);
	}

	void LUA_NATIVE_PATHFIND_SET_ROADS_IN_AREA( float x1, float y1, float z1, float x2, float y2, float z2, bool nodeEnabled, bool unknown2 )
	{
		PATHFIND::SET_ROADS_IN_AREA(x1, y1, z1, x2, y2, z2, nodeEnabled, unknown2);
	}

	void LUA_NATIVE_PATHFIND_SET_ROADS_IN_ANGLED_AREA( float x1, float y1, float z1, float x2, float y2, float z2, float width, bool unknown1, bool unknown2, bool unknown3 )
	{
		PATHFIND::SET_ROADS_IN_ANGLED_AREA(x1, y1, z1, x2, y2, z2, width, unknown1, unknown2, unknown3);
	}

	void LUA_NATIVE_PATHFIND_SET_PED_PATHS_IN_AREA( float x1, float y1, float z1, float x2, float y2, float z2, bool p6, Any p7 )
	{
		PATHFIND::SET_PED_PATHS_IN_AREA(x1, y1, z1, x2, y2, z2, p6, p7);
	}

	std::tuple<bool, Vector3> LUA_NATIVE_PATHFIND_GET_SAFE_COORD_FOR_PED( float x, float y, float z, bool onGround, Vector3 outPosition, int flags )
	{
		std::tuple<bool, Vector3> return_values;
		std::get<0>(return_values) = (bool)PATHFIND::GET_SAFE_COORD_FOR_PED(x, y, z, onGround, &outPosition, flags);
		std::get<1>(return_values) = outPosition;

		return return_values;
	}

	std::tuple<bool, Vector3> LUA_NATIVE_PATHFIND_GET_CLOSEST_VEHICLE_NODE( float x, float y, float z, Vector3 outPosition, int nodeFlags, float p5, float p6 )
	{
		std::tuple<bool, Vector3> return_values;
		std::get<0>(return_values) = (bool)PATHFIND::GET_CLOSEST_VEHICLE_NODE(x, y, z, &outPosition, nodeFlags, p5, p6);
		std::get<1>(return_values) = outPosition;

		return return_values;
	}

	std::tuple<bool, Vector3> LUA_NATIVE_PATHFIND_GET_CLOSEST_MAJOR_VEHICLE_NODE( float x, float y, float z, Vector3 outPosition, float unknown1, float unknown2 )
	{
		std::tuple<bool, Vector3> return_values;
		std::get<0>(return_values) = (bool)PATHFIND::GET_CLOSEST_MAJOR_VEHICLE_NODE(x, y, z, &outPosition, unknown1, unknown2);
		std::get<1>(return_values) = outPosition;

		return return_values;
	}

	std::tuple<bool, Vector3, float> LUA_NATIVE_PATHFIND_GET_CLOSEST_VEHICLE_NODE_WITH_HEADING( float x, float y, float z, Vector3 outPosition, float outHeading, int nodeType, float p6, float p7 )
	{
		std::tuple<bool, Vector3, float> return_values;
		std::get<0>(return_values) = (bool)PATHFIND::GET_CLOSEST_VEHICLE_NODE_WITH_HEADING(x, y, z, &outPosition, &outHeading, nodeType, p6, p7);
		std::get<1>(return_values) = outPosition;
		std::get<2>(return_values) = outHeading;

		return return_values;
	}

	std::tuple<bool, Vector3> LUA_NATIVE_PATHFIND_GET_NTH_CLOSEST_VEHICLE_NODE( float x, float y, float z, int nthClosest, Vector3 outPosition, int nodeFlags, float unknown1, float unknown2 )
	{
		std::tuple<bool, Vector3> return_values;
		std::get<0>(return_values) = (bool)PATHFIND::GET_NTH_CLOSEST_VEHICLE_NODE(x, y, z, nthClosest, &outPosition, nodeFlags, unknown1, unknown2);
		std::get<1>(return_values) = outPosition;

		return return_values;
	}

	int LUA_NATIVE_PATHFIND_GET_NTH_CLOSEST_VEHICLE_NODE_ID( float x, float y, float z, int nth, int nodeFlags, float p5, float p6 )
	{
		auto retval = PATHFIND::GET_NTH_CLOSEST_VEHICLE_NODE_ID(x, y, z, nth, nodeFlags, p5, p6);
		return retval;
	}

	std::tuple<bool, Vector3, float, int> LUA_NATIVE_PATHFIND_GET_NTH_CLOSEST_VEHICLE_NODE_WITH_HEADING( float x, float y, float z, int nthClosest, Vector3 outPosition, float outHeading, int outNumLanes, int nodeFlags, float unknown3, float unknown4 )
	{
		std::tuple<bool, Vector3, float, int> return_values;
		std::get<0>(return_values) = (bool)PATHFIND::GET_NTH_CLOSEST_VEHICLE_NODE_WITH_HEADING(x, y, z, nthClosest, &outPosition, &outHeading, &outNumLanes, nodeFlags, unknown3, unknown4);
		std::get<1>(return_values) = outPosition;
		std::get<2>(return_values) = outHeading;
		std::get<3>(return_values) = outNumLanes;

		return return_values;
	}

	std::tuple<int, Vector3, float> LUA_NATIVE_PATHFIND_GET_NTH_CLOSEST_VEHICLE_NODE_ID_WITH_HEADING( float x, float y, float z, int nthClosest, Vector3 outPosition, float outHeading, int nodeFlags, float p7, float p8 )
	{
		std::tuple<int, Vector3, float> return_values;
		std::get<0>(return_values) = PATHFIND::GET_NTH_CLOSEST_VEHICLE_NODE_ID_WITH_HEADING(x, y, z, nthClosest, &outPosition, &outHeading, nodeFlags, p7, p8);
		std::get<1>(return_values) = outPosition;
		std::get<2>(return_values) = outHeading;

		return return_values;
	}

	std::tuple<bool, Vector3, float> LUA_NATIVE_PATHFIND_GET_NTH_CLOSEST_VEHICLE_NODE_FAVOUR_DIRECTION( float x, float y, float z, float desiredX, float desiredY, float desiredZ, int nthClosest, Vector3 outPosition, float outHeading, int nodeFlags, float p10, float p11 )
	{
		std::tuple<bool, Vector3, float> return_values;
		std::get<0>(return_values) = (bool)PATHFIND::GET_NTH_CLOSEST_VEHICLE_NODE_FAVOUR_DIRECTION(x, y, z, desiredX, desiredY, desiredZ, nthClosest, &outPosition, &outHeading, nodeFlags, p10, p11);
		std::get<1>(return_values) = outPosition;
		std::get<2>(return_values) = outHeading;

		return return_values;
	}

	std::tuple<bool, int, int> LUA_NATIVE_PATHFIND_GET_VEHICLE_NODE_PROPERTIES( float x, float y, float z, int density, int flags )
	{
		std::tuple<bool, int, int> return_values;
		std::get<0>(return_values) = (bool)PATHFIND::GET_VEHICLE_NODE_PROPERTIES(x, y, z, &density, &flags);
		std::get<1>(return_values) = density;
		std::get<2>(return_values) = flags;

		return return_values;
	}

	bool LUA_NATIVE_PATHFIND_IS_VEHICLE_NODE_ID_VALID( int vehicleNodeId )
	{
		auto retval = (bool)PATHFIND::IS_VEHICLE_NODE_ID_VALID(vehicleNodeId);
		return retval;
	}

	Vector3 LUA_NATIVE_PATHFIND_GET_VEHICLE_NODE_POSITION( int nodeId, Vector3 outPosition )
	{
		PATHFIND::GET_VEHICLE_NODE_POSITION(nodeId, &outPosition);
		return outPosition;
	}

	bool LUA_NATIVE_PATHFIND_GET_VEHICLE_NODE_IS_GPS_ALLOWED( int nodeID )
	{
		auto retval = (bool)PATHFIND::GET_VEHICLE_NODE_IS_GPS_ALLOWED(nodeID);
		return retval;
	}

	bool LUA_NATIVE_PATHFIND_GET_VEHICLE_NODE_IS_SWITCHED_OFF( int nodeID )
	{
		auto retval = (bool)PATHFIND::GET_VEHICLE_NODE_IS_SWITCHED_OFF(nodeID);
		return retval;
	}

	std::tuple<bool, Vector3, Vector3, Any, Any, float> LUA_NATIVE_PATHFIND_GET_CLOSEST_ROAD( float x, float y, float z, float p3, int p4, Vector3 p5, Vector3 p6, Any p7, Any p8, float p9, bool p10 )
	{
		std::tuple<bool, Vector3, Vector3, Any, Any, float> return_values;
		std::get<0>(return_values) = (bool)PATHFIND::GET_CLOSEST_ROAD(x, y, z, p3, p4, &p5, &p6, &p7, &p8, &p9, p10);
		std::get<1>(return_values) = p5;
		std::get<2>(return_values) = p6;
		std::get<3>(return_values) = p7;
		std::get<4>(return_values) = p8;
		std::get<5>(return_values) = p9;

		return return_values;
	}

	bool LUA_NATIVE_PATHFIND_LOAD_ALL_PATH_NODES( bool set )
	{
		auto retval = (bool)PATHFIND::LOAD_ALL_PATH_NODES(set);
		return retval;
	}

	void LUA_NATIVE_PATHFIND_SET_ALLOW_STREAM_PROLOGUE_NODES( bool toggle )
	{
		PATHFIND::SET_ALLOW_STREAM_PROLOGUE_NODES(toggle);
	}

	void LUA_NATIVE_PATHFIND_SET_ALLOW_STREAM_HEIST_ISLAND_NODES( int type )
	{
		PATHFIND::SET_ALLOW_STREAM_HEIST_ISLAND_NODES(type);
	}

	bool LUA_NATIVE_PATHFIND_ARE_NODES_LOADED_FOR_AREA( float x1, float y1, float x2, float y2 )
	{
		auto retval = (bool)PATHFIND::ARE_NODES_LOADED_FOR_AREA(x1, y1, x2, y2);
		return retval;
	}

	bool LUA_NATIVE_PATHFIND_REQUEST_PATH_NODES_IN_AREA_THIS_FRAME( float x1, float y1, float x2, float y2 )
	{
		auto retval = (bool)PATHFIND::REQUEST_PATH_NODES_IN_AREA_THIS_FRAME(x1, y1, x2, y2);
		return retval;
	}

	void LUA_NATIVE_PATHFIND_SET_ROADS_BACK_TO_ORIGINAL( float p0, float p1, float p2, float p3, float p4, float p5, Any p6 )
	{
		PATHFIND::SET_ROADS_BACK_TO_ORIGINAL(p0, p1, p2, p3, p4, p5, p6);
	}

	void LUA_NATIVE_PATHFIND_SET_ROADS_BACK_TO_ORIGINAL_IN_ANGLED_AREA( float x1, float y1, float z1, float x2, float y2, float z2, float width, Any p7 )
	{
		PATHFIND::SET_ROADS_BACK_TO_ORIGINAL_IN_ANGLED_AREA(x1, y1, z1, x2, y2, z2, width, p7);
	}

	void LUA_NATIVE_PATHFIND_SET_AMBIENT_PED_RANGE_MULTIPLIER_THIS_FRAME( float multiplier )
	{
		PATHFIND::SET_AMBIENT_PED_RANGE_MULTIPLIER_THIS_FRAME(multiplier);
	}

	void LUA_NATIVE_PATHFIND_ADJUST_AMBIENT_PED_SPAWN_DENSITIES_THIS_FRAME( Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6 )
	{
		PATHFIND::ADJUST_AMBIENT_PED_SPAWN_DENSITIES_THIS_FRAME(p0, p1, p2, p3, p4, p5, p6);
	}

	void LUA_NATIVE_PATHFIND_SET_PED_PATHS_BACK_TO_ORIGINAL( float x1, float y1, float z1, float x2, float y2, float z2, Any p6 )
	{
		PATHFIND::SET_PED_PATHS_BACK_TO_ORIGINAL(x1, y1, z1, x2, y2, z2, p6);
	}

	std::tuple<bool, Vector3, int> LUA_NATIVE_PATHFIND_GET_RANDOM_VEHICLE_NODE( float x, float y, float z, float radius, bool p4, bool p5, bool p6, Vector3 outPosition, int nodeId )
	{
		std::tuple<bool, Vector3, int> return_values;
		std::get<0>(return_values) = (bool)PATHFIND::GET_RANDOM_VEHICLE_NODE(x, y, z, radius, p4, p5, p6, &outPosition, &nodeId);
		std::get<1>(return_values) = outPosition;
		std::get<2>(return_values) = nodeId;

		return return_values;
	}

	std::tuple<Vector3, Vector3, float> LUA_NATIVE_PATHFIND_GET_SPAWN_COORDS_FOR_VEHICLE_NODE( int nodeAddress, float towardsCoorsX, float towardsCoorsY, float towardsCoorsZ, Vector3 centrePoint, float heading )
	{
		std::tuple<Vector3, Vector3, float> return_values;
		std::get<0>(return_values) = PATHFIND::GET_SPAWN_COORDS_FOR_VEHICLE_NODE(nodeAddress, towardsCoorsX, towardsCoorsY, towardsCoorsZ, &centrePoint, &heading);
		std::get<1>(return_values) = centrePoint;
		std::get<2>(return_values) = heading;

		return return_values;
	}

	std::tuple<Hash, Hash> LUA_NATIVE_PATHFIND_GET_STREET_NAME_AT_COORD( float x, float y, float z, Hash streetName, Hash crossingRoad )
	{
		std::tuple<Hash, Hash> return_values;
		PATHFIND::GET_STREET_NAME_AT_COORD(x, y, z, &streetName, &crossingRoad);
		std::get<0>(return_values) = streetName;
		std::get<1>(return_values) = crossingRoad;

		return return_values;
	}

	std::tuple<int, int, float, float> LUA_NATIVE_PATHFIND_GENERATE_DIRECTIONS_TO_COORD( float x, float y, float z, bool p3, int direction, float p5, float distToNxJunction )
	{
		std::tuple<int, int, float, float> return_values;
		std::get<0>(return_values) = PATHFIND::GENERATE_DIRECTIONS_TO_COORD(x, y, z, p3, &direction, &p5, &distToNxJunction);
		std::get<1>(return_values) = direction;
		std::get<2>(return_values) = p5;
		std::get<3>(return_values) = distToNxJunction;

		return return_values;
	}

	void LUA_NATIVE_PATHFIND_SET_IGNORE_NO_GPS_FLAG( bool toggle )
	{
		PATHFIND::SET_IGNORE_NO_GPS_FLAG(toggle);
	}

	void LUA_NATIVE_PATHFIND_SET_IGNORE_NO_GPS_FLAG_UNTIL_FIRST_NORMAL_NODE( bool toggle )
	{
		PATHFIND::SET_IGNORE_NO_GPS_FLAG_UNTIL_FIRST_NORMAL_NODE(toggle);
	}

	void LUA_NATIVE_PATHFIND_SET_GPS_DISABLED_ZONE( float x1, float y1, float z1, float x2, float y2, float z3 )
	{
		PATHFIND::SET_GPS_DISABLED_ZONE(x1, y1, z1, x2, y2, z3);
	}

	int LUA_NATIVE_PATHFIND_GET_GPS_BLIP_ROUTE_LENGTH(  )
	{
		auto retval = PATHFIND::GET_GPS_BLIP_ROUTE_LENGTH();
		return retval;
	}

	std::tuple<bool, Vector3> LUA_NATIVE_PATHFIND_GET_POS_ALONG_GPS_TYPE_ROUTE( Vector3 result, bool p1, float p2, int p3 )
	{
		std::tuple<bool, Vector3> return_values;
		std::get<0>(return_values) = (bool)PATHFIND::GET_POS_ALONG_GPS_TYPE_ROUTE(&result, p1, p2, p3);
		std::get<1>(return_values) = result;

		return return_values;
	}

	bool LUA_NATIVE_PATHFIND_GET_GPS_BLIP_ROUTE_FOUND(  )
	{
		auto retval = (bool)PATHFIND::GET_GPS_BLIP_ROUTE_FOUND();
		return retval;
	}

	std::tuple<bool, Vector3> LUA_NATIVE_PATHFIND_GET_ROAD_BOUNDARY_USING_HEADING( float x, float y, float z, float heading, Vector3 outPosition )
	{
		std::tuple<bool, Vector3> return_values;
		std::get<0>(return_values) = (bool)PATHFIND::GET_ROAD_BOUNDARY_USING_HEADING(x, y, z, heading, &outPosition);
		std::get<1>(return_values) = outPosition;

		return return_values;
	}

	std::tuple<bool, Vector3> LUA_NATIVE_PATHFIND_GET_POSITION_BY_SIDE_OF_ROAD( float x, float y, float z, int p3, Vector3 outPosition )
	{
		std::tuple<bool, Vector3> return_values;
		std::get<0>(return_values) = (bool)PATHFIND::GET_POSITION_BY_SIDE_OF_ROAD(x, y, z, p3, &outPosition);
		std::get<1>(return_values) = outPosition;

		return return_values;
	}

	bool LUA_NATIVE_PATHFIND_IS_POINT_ON_ROAD( float x, float y, float z, Vehicle vehicle )
	{
		auto retval = (bool)PATHFIND::IS_POINT_ON_ROAD(x, y, z, vehicle);
		return retval;
	}

	int LUA_NATIVE_PATHFIND_GET_NEXT_GPS_DISABLED_ZONE_INDEX(  )
	{
		auto retval = PATHFIND::GET_NEXT_GPS_DISABLED_ZONE_INDEX();
		return retval;
	}

	void LUA_NATIVE_PATHFIND_SET_GPS_DISABLED_ZONE_AT_INDEX( float x1, float y1, float z1, float x2, float y2, float z2, int index )
	{
		PATHFIND::SET_GPS_DISABLED_ZONE_AT_INDEX(x1, y1, z1, x2, y2, z2, index);
	}

	void LUA_NATIVE_PATHFIND_CLEAR_GPS_DISABLED_ZONE_AT_INDEX( int index )
	{
		PATHFIND::CLEAR_GPS_DISABLED_ZONE_AT_INDEX(index);
	}

	void LUA_NATIVE_PATHFIND_ADD_NAVMESH_REQUIRED_REGION( float x, float y, float radius )
	{
		PATHFIND::ADD_NAVMESH_REQUIRED_REGION(x, y, radius);
	}

	void LUA_NATIVE_PATHFIND_REMOVE_NAVMESH_REQUIRED_REGIONS(  )
	{
		PATHFIND::REMOVE_NAVMESH_REQUIRED_REGIONS();
	}

	bool LUA_NATIVE_PATHFIND_IS_NAVMESH_REQUIRED_REGION_IN_USE(  )
	{
		auto retval = (bool)PATHFIND::IS_NAVMESH_REQUIRED_REGION_IN_USE();
		return retval;
	}

	void LUA_NATIVE_PATHFIND_DISABLE_NAVMESH_IN_AREA( float x1, float y1, float z1, float x2, float y2, float z2, bool toggle )
	{
		PATHFIND::DISABLE_NAVMESH_IN_AREA(x1, y1, z1, x2, y2, z2, toggle);
	}

	bool LUA_NATIVE_PATHFIND_ARE_ALL_NAVMESH_REGIONS_LOADED(  )
	{
		auto retval = (bool)PATHFIND::ARE_ALL_NAVMESH_REGIONS_LOADED();
		return retval;
	}

	bool LUA_NATIVE_PATHFIND_IS_NAVMESH_LOADED_IN_AREA( float x1, float y1, float z1, float x2, float y2, float z2 )
	{
		auto retval = (bool)PATHFIND::IS_NAVMESH_LOADED_IN_AREA(x1, y1, z1, x2, y2, z2);
		return retval;
	}

	int LUA_NATIVE_PATHFIND_GET_NUM_NAVMESHES_EXISTING_IN_AREA( float x1, float y1, float z1, float x2, float y2, float z2 )
	{
		auto retval = PATHFIND::GET_NUM_NAVMESHES_EXISTING_IN_AREA(x1, y1, z1, x2, y2, z2);
		return retval;
	}

	int LUA_NATIVE_PATHFIND_ADD_NAVMESH_BLOCKING_OBJECT( float p0, float p1, float p2, float p3, float p4, float p5, float p6, bool p7, Any p8 )
	{
		auto retval = PATHFIND::ADD_NAVMESH_BLOCKING_OBJECT(p0, p1, p2, p3, p4, p5, p6, p7, p8);
		return retval;
	}

	void LUA_NATIVE_PATHFIND_UPDATE_NAVMESH_BLOCKING_OBJECT( Any p0, float p1, float p2, float p3, float p4, float p5, float p6, float p7, Any p8 )
	{
		PATHFIND::UPDATE_NAVMESH_BLOCKING_OBJECT(p0, p1, p2, p3, p4, p5, p6, p7, p8);
	}

	void LUA_NATIVE_PATHFIND_REMOVE_NAVMESH_BLOCKING_OBJECT( Any p0 )
	{
		PATHFIND::REMOVE_NAVMESH_BLOCKING_OBJECT(p0);
	}

	bool LUA_NATIVE_PATHFIND_DOES_NAVMESH_BLOCKING_OBJECT_EXIST( Any p0 )
	{
		auto retval = (bool)PATHFIND::DOES_NAVMESH_BLOCKING_OBJECT_EXIST(p0);
		return retval;
	}

	float LUA_NATIVE_PATHFIND_GET_APPROX_HEIGHT_FOR_POINT( float x, float y )
	{
		auto retval = PATHFIND::GET_APPROX_HEIGHT_FOR_POINT(x, y);
		return retval;
	}

	float LUA_NATIVE_PATHFIND_GET_APPROX_HEIGHT_FOR_AREA( float x1, float y1, float x2, float y2 )
	{
		auto retval = PATHFIND::GET_APPROX_HEIGHT_FOR_AREA(x1, y1, x2, y2);
		return retval;
	}

	float LUA_NATIVE_PATHFIND_GET_APPROX_FLOOR_FOR_POINT( float x, float y )
	{
		auto retval = PATHFIND::GET_APPROX_FLOOR_FOR_POINT(x, y);
		return retval;
	}

	float LUA_NATIVE_PATHFIND_GET_APPROX_FLOOR_FOR_AREA( float x1, float y1, float x2, float y2 )
	{
		auto retval = PATHFIND::GET_APPROX_FLOOR_FOR_AREA(x1, y1, x2, y2);
		return retval;
	}

	float LUA_NATIVE_PATHFIND_CALCULATE_TRAVEL_DISTANCE_BETWEEN_POINTS( float x1, float y1, float z1, float x2, float y2, float z2 )
	{
		auto retval = PATHFIND::CALCULATE_TRAVEL_DISTANCE_BETWEEN_POINTS(x1, y1, z1, x2, y2, z2);
		return retval;
	}

	Ped LUA_NATIVE_PED_CREATE_PED( int pedType, Hash modelHash, float x, float y, float z, float heading, bool isNetwork, bool bScriptHostPed )
	{
		auto retval = PED::CREATE_PED(pedType, modelHash, x, y, z, heading, isNetwork, bScriptHostPed);
		return retval;
	}

	Ped LUA_NATIVE_PED_DELETE_PED( Ped ped )
	{
		PED::DELETE_PED(&ped);
		return ped;
	}

	Ped LUA_NATIVE_PED_CLONE_PED( Ped ped, bool isNetwork, bool bScriptHostPed, bool copyHeadBlendFlag )
	{
		auto retval = PED::CLONE_PED(ped, isNetwork, bScriptHostPed, copyHeadBlendFlag);
		return retval;
	}

	Ped LUA_NATIVE_PED_CLONE_PED_ALT( Ped ped, bool isNetwork, bool bScriptHostPed, bool copyHeadBlendFlag, bool p4 )
	{
		auto retval = PED::CLONE_PED_ALT(ped, isNetwork, bScriptHostPed, copyHeadBlendFlag, p4);
		return retval;
	}

	void LUA_NATIVE_PED_CLONE_PED_TO_TARGET( Ped ped, Ped targetPed )
	{
		PED::CLONE_PED_TO_TARGET(ped, targetPed);
	}

	void LUA_NATIVE_PED_CLONE_PED_TO_TARGET_ALT( Ped ped, Ped targetPed, bool p2 )
	{
		PED::CLONE_PED_TO_TARGET_ALT(ped, targetPed, p2);
	}

	bool LUA_NATIVE_PED_IS_PED_IN_VEHICLE( Ped ped, Vehicle vehicle, bool atGetIn )
	{
		auto retval = (bool)PED::IS_PED_IN_VEHICLE(ped, vehicle, atGetIn);
		return retval;
	}

	bool LUA_NATIVE_PED_IS_PED_IN_MODEL( Ped ped, Hash modelHash )
	{
		auto retval = (bool)PED::IS_PED_IN_MODEL(ped, modelHash);
		return retval;
	}

	bool LUA_NATIVE_PED_IS_PED_IN_ANY_VEHICLE( Ped ped, bool atGetIn )
	{
		auto retval = (bool)PED::IS_PED_IN_ANY_VEHICLE(ped, atGetIn);
		return retval;
	}

	bool LUA_NATIVE_PED_IS_COP_PED_IN_AREA_3D( float x1, float y1, float z1, float x2, float y2, float z2 )
	{
		auto retval = (bool)PED::IS_COP_PED_IN_AREA_3D(x1, y1, z1, x2, y2, z2);
		return retval;
	}

	bool LUA_NATIVE_PED_IS_PED_INJURED( Ped ped )
	{
		auto retval = (bool)PED::IS_PED_INJURED(ped);
		return retval;
	}

	bool LUA_NATIVE_PED_IS_PED_HURT( Ped ped )
	{
		auto retval = (bool)PED::IS_PED_HURT(ped);
		return retval;
	}

	bool LUA_NATIVE_PED_IS_PED_FATALLY_INJURED( Ped ped )
	{
		auto retval = (bool)PED::IS_PED_FATALLY_INJURED(ped);
		return retval;
	}

	bool LUA_NATIVE_PED_IS_PED_DEAD_OR_DYING( Ped ped, bool p1 )
	{
		auto retval = (bool)PED::IS_PED_DEAD_OR_DYING(ped, p1);
		return retval;
	}

	bool LUA_NATIVE_PED_IS_CONVERSATION_PED_DEAD( Ped ped )
	{
		auto retval = (bool)PED::IS_CONVERSATION_PED_DEAD(ped);
		return retval;
	}

	bool LUA_NATIVE_PED_IS_PED_AIMING_FROM_COVER( Ped ped )
	{
		auto retval = (bool)PED::IS_PED_AIMING_FROM_COVER(ped);
		return retval;
	}

	bool LUA_NATIVE_PED_IS_PED_RELOADING( Ped ped )
	{
		auto retval = (bool)PED::IS_PED_RELOADING(ped);
		return retval;
	}

	bool LUA_NATIVE_PED_IS_PED_A_PLAYER( Ped ped )
	{
		auto retval = (bool)PED::IS_PED_A_PLAYER(ped);
		return retval;
	}

	Ped LUA_NATIVE_PED_CREATE_PED_INSIDE_VEHICLE( Vehicle vehicle, int pedType, Hash modelHash, int seat, bool isNetwork, bool bScriptHostPed )
	{
		auto retval = PED::CREATE_PED_INSIDE_VEHICLE(vehicle, pedType, modelHash, seat, isNetwork, bScriptHostPed);
		return retval;
	}

	void LUA_NATIVE_PED_SET_PED_DESIRED_HEADING( Ped ped, float heading )
	{
		PED::SET_PED_DESIRED_HEADING(ped, heading);
	}

	void LUA_NATIVE_PED_FORCE_ALL_HEADING_VALUES_TO_ALIGN( Ped ped )
	{
		PED::FORCE_ALL_HEADING_VALUES_TO_ALIGN(ped);
	}

	bool LUA_NATIVE_PED_IS_PED_FACING_PED( Ped ped, Ped otherPed, float angle )
	{
		auto retval = (bool)PED::IS_PED_FACING_PED(ped, otherPed, angle);
		return retval;
	}

	bool LUA_NATIVE_PED_IS_PED_IN_MELEE_COMBAT( Ped ped )
	{
		auto retval = (bool)PED::IS_PED_IN_MELEE_COMBAT(ped);
		return retval;
	}

	bool LUA_NATIVE_PED_IS_PED_STOPPED( Ped ped )
	{
		auto retval = (bool)PED::IS_PED_STOPPED(ped);
		return retval;
	}

	bool LUA_NATIVE_PED_IS_PED_SHOOTING_IN_AREA( Ped ped, float x1, float y1, float z1, float x2, float y2, float z2, bool p7, bool p8 )
	{
		auto retval = (bool)PED::IS_PED_SHOOTING_IN_AREA(ped, x1, y1, z1, x2, y2, z2, p7, p8);
		return retval;
	}

	bool LUA_NATIVE_PED_IS_ANY_PED_SHOOTING_IN_AREA( float x1, float y1, float z1, float x2, float y2, float z2, bool p6, bool p7 )
	{
		auto retval = (bool)PED::IS_ANY_PED_SHOOTING_IN_AREA(x1, y1, z1, x2, y2, z2, p6, p7);
		return retval;
	}

	bool LUA_NATIVE_PED_IS_PED_SHOOTING( Ped ped )
	{
		auto retval = (bool)PED::IS_PED_SHOOTING(ped);
		return retval;
	}

	void LUA_NATIVE_PED_SET_PED_ACCURACY( Ped ped, int accuracy )
	{
		PED::SET_PED_ACCURACY(ped, accuracy);
	}

	int LUA_NATIVE_PED_GET_PED_ACCURACY( Ped ped )
	{
		auto retval = PED::GET_PED_ACCURACY(ped);
		return retval;
	}

	void LUA_NATIVE_PED_SET_AMBIENT_LAW_PED_ACCURACY_MODIFIER( float multiplier )
	{
		PED::SET_AMBIENT_LAW_PED_ACCURACY_MODIFIER(multiplier);
	}

	bool LUA_NATIVE_PED_IS_PED_MODEL( Ped ped, Hash modelHash )
	{
		auto retval = (bool)PED::IS_PED_MODEL(ped, modelHash);
		return retval;
	}

	void LUA_NATIVE_PED_EXPLODE_PED_HEAD( Ped ped, Hash weaponHash )
	{
		PED::EXPLODE_PED_HEAD(ped, weaponHash);
	}

	Ped LUA_NATIVE_PED_REMOVE_PED_ELEGANTLY( Ped ped )
	{
		PED::REMOVE_PED_ELEGANTLY(&ped);
		return ped;
	}

	void LUA_NATIVE_PED_ADD_ARMOUR_TO_PED( Ped ped, int amount )
	{
		PED::ADD_ARMOUR_TO_PED(ped, amount);
	}

	void LUA_NATIVE_PED_SET_PED_ARMOUR( Ped ped, int amount )
	{
		PED::SET_PED_ARMOUR(ped, amount);
	}

	void LUA_NATIVE_PED_SET_PED_INTO_VEHICLE( Ped ped, Vehicle vehicle, int seatIndex )
	{
		PED::SET_PED_INTO_VEHICLE(ped, vehicle, seatIndex);
	}

	void LUA_NATIVE_PED_SET_PED_ALLOW_VEHICLES_OVERRIDE( Ped ped, bool toggle )
	{
		PED::SET_PED_ALLOW_VEHICLES_OVERRIDE(ped, toggle);
	}

	bool LUA_NATIVE_PED_CAN_CREATE_RANDOM_PED( bool p0 )
	{
		auto retval = (bool)PED::CAN_CREATE_RANDOM_PED(p0);
		return retval;
	}

	Ped LUA_NATIVE_PED_CREATE_RANDOM_PED( float posX, float posY, float posZ )
	{
		auto retval = PED::CREATE_RANDOM_PED(posX, posY, posZ);
		return retval;
	}

	Ped LUA_NATIVE_PED_CREATE_RANDOM_PED_AS_DRIVER( Vehicle vehicle, bool returnHandle )
	{
		auto retval = PED::CREATE_RANDOM_PED_AS_DRIVER(vehicle, returnHandle);
		return retval;
	}

	bool LUA_NATIVE_PED_CAN_CREATE_RANDOM_DRIVER(  )
	{
		auto retval = (bool)PED::CAN_CREATE_RANDOM_DRIVER();
		return retval;
	}

	bool LUA_NATIVE_PED_CAN_CREATE_RANDOM_BIKE_RIDER(  )
	{
		auto retval = (bool)PED::CAN_CREATE_RANDOM_BIKE_RIDER();
		return retval;
	}

	void LUA_NATIVE_PED_SET_PED_MOVE_ANIMS_BLEND_OUT( Ped ped )
	{
		PED::SET_PED_MOVE_ANIMS_BLEND_OUT(ped);
	}

	void LUA_NATIVE_PED_SET_PED_CAN_BE_DRAGGED_OUT( Ped ped, bool toggle )
	{
		PED::SET_PED_CAN_BE_DRAGGED_OUT(ped, toggle);
	}

	void LUA_NATIVE_PED_SET_PED_ALLOW_HURT_COMBAT_FOR_ALL_MISSION_PEDS( bool toggle )
	{
		PED::SET_PED_ALLOW_HURT_COMBAT_FOR_ALL_MISSION_PEDS(toggle);
	}

	bool LUA_NATIVE_PED_IS_PED_MALE( Ped ped )
	{
		auto retval = (bool)PED::IS_PED_MALE(ped);
		return retval;
	}

	bool LUA_NATIVE_PED_IS_PED_HUMAN( Ped ped )
	{
		auto retval = (bool)PED::IS_PED_HUMAN(ped);
		return retval;
	}

	Vehicle LUA_NATIVE_PED_GET_VEHICLE_PED_IS_IN( Ped ped, bool includeEntering )
	{
		auto retval = PED::GET_VEHICLE_PED_IS_IN(ped, includeEntering);
		return retval;
	}

	void LUA_NATIVE_PED_RESET_PED_LAST_VEHICLE( Ped ped )
	{
		PED::RESET_PED_LAST_VEHICLE(ped);
	}

	void LUA_NATIVE_PED_SET_PED_DENSITY_MULTIPLIER_THIS_FRAME( float multiplier )
	{
		PED::SET_PED_DENSITY_MULTIPLIER_THIS_FRAME(multiplier);
	}

	void LUA_NATIVE_PED_SET_SCENARIO_PED_DENSITY_MULTIPLIER_THIS_FRAME( float p0, float p1 )
	{
		PED::SET_SCENARIO_PED_DENSITY_MULTIPLIER_THIS_FRAME(p0, p1);
	}

	void LUA_NATIVE_PED_SUPPRESS_AMBIENT_PED_AGGRESSIVE_CLEANUP_THIS_FRAME(  )
	{
		PED::SUPPRESS_AMBIENT_PED_AGGRESSIVE_CLEANUP_THIS_FRAME();
	}

	void LUA_NATIVE_PED_SET_SCRIPTED_CONVERSION_COORD_THIS_FRAME( float x, float y, float z )
	{
		PED::SET_SCRIPTED_CONVERSION_COORD_THIS_FRAME(x, y, z);
	}

	void LUA_NATIVE_PED_SET_PED_NON_CREATION_AREA( float x1, float y1, float z1, float x2, float y2, float z2 )
	{
		PED::SET_PED_NON_CREATION_AREA(x1, y1, z1, x2, y2, z2);
	}

	void LUA_NATIVE_PED_CLEAR_PED_NON_CREATION_AREA(  )
	{
		PED::CLEAR_PED_NON_CREATION_AREA();
	}

	void LUA_NATIVE_PED_INSTANTLY_FILL_PED_POPULATION(  )
	{
		PED::INSTANTLY_FILL_PED_POPULATION();
	}

	bool LUA_NATIVE_PED_IS_PED_ON_MOUNT( Ped ped )
	{
		auto retval = (bool)PED::IS_PED_ON_MOUNT(ped);
		return retval;
	}

	Ped LUA_NATIVE_PED_GET_MOUNT( Ped ped )
	{
		auto retval = PED::GET_MOUNT(ped);
		return retval;
	}

	bool LUA_NATIVE_PED_IS_PED_ON_VEHICLE( Ped ped )
	{
		auto retval = (bool)PED::IS_PED_ON_VEHICLE(ped);
		return retval;
	}

	bool LUA_NATIVE_PED_IS_PED_ON_SPECIFIC_VEHICLE( Ped ped, Vehicle vehicle )
	{
		auto retval = (bool)PED::IS_PED_ON_SPECIFIC_VEHICLE(ped, vehicle);
		return retval;
	}

	void LUA_NATIVE_PED_SET_PED_MONEY( Ped ped, int amount )
	{
		PED::SET_PED_MONEY(ped, amount);
	}

	int LUA_NATIVE_PED_GET_PED_MONEY( Ped ped )
	{
		auto retval = PED::GET_PED_MONEY(ped);
		return retval;
	}

	void LUA_NATIVE_PED_SET_HEALTH_SNACKS_CARRIED_BY_ALL_NEW_PEDS( float p0, Any p1 )
	{
		PED::SET_HEALTH_SNACKS_CARRIED_BY_ALL_NEW_PEDS(p0, p1);
	}

	void LUA_NATIVE_PED_SET_AMBIENT_PEDS_DROP_MONEY( bool p0 )
	{
		PED::SET_AMBIENT_PEDS_DROP_MONEY(p0);
	}

	void LUA_NATIVE_PED_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS_FOR_AMBIENT_PEDS_THIS_FRAME( bool p0 )
	{
		PED::SET_BLOCKING_OF_NON_TEMPORARY_EVENTS_FOR_AMBIENT_PEDS_THIS_FRAME(p0);
	}

	void LUA_NATIVE_PED_SET_PED_SUFFERS_CRITICAL_HITS( Ped ped, bool toggle )
	{
		PED::SET_PED_SUFFERS_CRITICAL_HITS(ped, toggle);
	}

	void LUA_NATIVE_PED_SET_PED_UPPER_BODY_DAMAGE_ONLY( Ped ped, bool toggle )
	{
		PED::SET_PED_UPPER_BODY_DAMAGE_ONLY(ped, toggle);
	}

	bool LUA_NATIVE_PED_IS_PED_SITTING_IN_VEHICLE( Ped ped, Vehicle vehicle )
	{
		auto retval = (bool)PED::IS_PED_SITTING_IN_VEHICLE(ped, vehicle);
		return retval;
	}

	bool LUA_NATIVE_PED_IS_PED_SITTING_IN_ANY_VEHICLE( Ped ped )
	{
		auto retval = (bool)PED::IS_PED_SITTING_IN_ANY_VEHICLE(ped);
		return retval;
	}

	bool LUA_NATIVE_PED_IS_PED_ON_FOOT( Ped ped )
	{
		auto retval = (bool)PED::IS_PED_ON_FOOT(ped);
		return retval;
	}

	bool LUA_NATIVE_PED_IS_PED_ON_ANY_BIKE( Ped ped )
	{
		auto retval = (bool)PED::IS_PED_ON_ANY_BIKE(ped);
		return retval;
	}

	bool LUA_NATIVE_PED_IS_PED_PLANTING_BOMB( Ped ped )
	{
		auto retval = (bool)PED::IS_PED_PLANTING_BOMB(ped);
		return retval;
	}

	Vector3 LUA_NATIVE_PED_GET_DEAD_PED_PICKUP_COORDS( Ped ped, float p1, float p2 )
	{
		auto retval = PED::GET_DEAD_PED_PICKUP_COORDS(ped, p1, p2);
		return retval;
	}

	bool LUA_NATIVE_PED_IS_PED_IN_ANY_BOAT( Ped ped )
	{
		auto retval = (bool)PED::IS_PED_IN_ANY_BOAT(ped);
		return retval;
	}

	bool LUA_NATIVE_PED_IS_PED_IN_ANY_SUB( Ped ped )
	{
		auto retval = (bool)PED::IS_PED_IN_ANY_SUB(ped);
		return retval;
	}

	bool LUA_NATIVE_PED_IS_PED_IN_ANY_HELI( Ped ped )
	{
		auto retval = (bool)PED::IS_PED_IN_ANY_HELI(ped);
		return retval;
	}

	bool LUA_NATIVE_PED_IS_PED_IN_ANY_PLANE( Ped ped )
	{
		auto retval = (bool)PED::IS_PED_IN_ANY_PLANE(ped);
		return retval;
	}

	bool LUA_NATIVE_PED_IS_PED_IN_FLYING_VEHICLE( Ped ped )
	{
		auto retval = (bool)PED::IS_PED_IN_FLYING_VEHICLE(ped);
		return retval;
	}

	void LUA_NATIVE_PED_SET_PED_DIES_IN_WATER( Ped ped, bool toggle )
	{
		PED::SET_PED_DIES_IN_WATER(ped, toggle);
	}

	bool LUA_NATIVE_PED_GET_PED_DIES_IN_WATER( Ped ped )
	{
		auto retval = (bool)PED::GET_PED_DIES_IN_WATER(ped);
		return retval;
	}

	void LUA_NATIVE_PED_SET_PED_DIES_IN_SINKING_VEHICLE( Ped ped, bool toggle )
	{
		PED::SET_PED_DIES_IN_SINKING_VEHICLE(ped, toggle);
	}

	int LUA_NATIVE_PED_GET_PED_ARMOUR( Ped ped )
	{
		auto retval = PED::GET_PED_ARMOUR(ped);
		return retval;
	}

	void LUA_NATIVE_PED_SET_PED_STAY_IN_VEHICLE_WHEN_JACKED( Ped ped, bool toggle )
	{
		PED::SET_PED_STAY_IN_VEHICLE_WHEN_JACKED(ped, toggle);
	}

	void LUA_NATIVE_PED_SET_PED_CAN_BE_SHOT_IN_VEHICLE( Ped ped, bool toggle )
	{
		PED::SET_PED_CAN_BE_SHOT_IN_VEHICLE(ped, toggle);
	}

	std::tuple<bool, int> LUA_NATIVE_PED_GET_PED_LAST_DAMAGE_BONE( Ped ped, int outBone )
	{
		std::tuple<bool, int> return_values;
		std::get<0>(return_values) = (bool)PED::GET_PED_LAST_DAMAGE_BONE(ped, &outBone);
		std::get<1>(return_values) = outBone;

		return return_values;
	}

	void LUA_NATIVE_PED_CLEAR_PED_LAST_DAMAGE_BONE( Ped ped )
	{
		PED::CLEAR_PED_LAST_DAMAGE_BONE(ped);
	}

	void LUA_NATIVE_PED_SET_AI_WEAPON_DAMAGE_MODIFIER( float value )
	{
		PED::SET_AI_WEAPON_DAMAGE_MODIFIER(value);
	}

	void LUA_NATIVE_PED_RESET_AI_WEAPON_DAMAGE_MODIFIER(  )
	{
		PED::RESET_AI_WEAPON_DAMAGE_MODIFIER();
	}

	void LUA_NATIVE_PED_SET_AI_MELEE_WEAPON_DAMAGE_MODIFIER( float modifier )
	{
		PED::SET_AI_MELEE_WEAPON_DAMAGE_MODIFIER(modifier);
	}

	void LUA_NATIVE_PED_RESET_AI_MELEE_WEAPON_DAMAGE_MODIFIER(  )
	{
		PED::RESET_AI_MELEE_WEAPON_DAMAGE_MODIFIER();
	}

	void LUA_NATIVE_PED_SET_TREAT_AS_AMBIENT_PED_FOR_DRIVER_LOCKON( Ped ped, bool p1 )
	{
		PED::SET_TREAT_AS_AMBIENT_PED_FOR_DRIVER_LOCKON(ped, p1);
	}

	void LUA_NATIVE_PED_SET_PED_CAN_BE_TARGETTED( Ped ped, bool toggle )
	{
		PED::SET_PED_CAN_BE_TARGETTED(ped, toggle);
	}

	void LUA_NATIVE_PED_SET_PED_CAN_BE_TARGETTED_BY_TEAM( Ped ped, int team, bool toggle )
	{
		PED::SET_PED_CAN_BE_TARGETTED_BY_TEAM(ped, team, toggle);
	}

	void LUA_NATIVE_PED_SET_PED_CAN_BE_TARGETTED_BY_PLAYER( Ped ped, Player player, bool toggle )
	{
		PED::SET_PED_CAN_BE_TARGETTED_BY_PLAYER(ped, player, toggle);
	}

	void LUA_NATIVE_PED_SET_ALLOW_LOCKON_TO_PED_IF_FRIENDLY( Ped ped, bool toggle )
	{
		PED::SET_ALLOW_LOCKON_TO_PED_IF_FRIENDLY(ped, toggle);
	}

	void LUA_NATIVE_PED_SET_USE_CAMERA_HEADING_FOR_DESIRED_DIRECTION_LOCK_ON_TEST( Ped ped, bool toggle )
	{
		PED::SET_USE_CAMERA_HEADING_FOR_DESIRED_DIRECTION_LOCK_ON_TEST(ped, toggle);
	}

	bool LUA_NATIVE_PED_IS_PED_IN_ANY_POLICE_VEHICLE( Ped ped )
	{
		auto retval = (bool)PED::IS_PED_IN_ANY_POLICE_VEHICLE(ped);
		return retval;
	}

	void LUA_NATIVE_PED_FORCE_PED_TO_OPEN_PARACHUTE( Ped ped )
	{
		PED::FORCE_PED_TO_OPEN_PARACHUTE(ped);
	}

	bool LUA_NATIVE_PED_IS_PED_IN_PARACHUTE_FREE_FALL( Ped ped )
	{
		auto retval = (bool)PED::IS_PED_IN_PARACHUTE_FREE_FALL(ped);
		return retval;
	}

	bool LUA_NATIVE_PED_IS_PED_FALLING( Ped ped )
	{
		auto retval = (bool)PED::IS_PED_FALLING(ped);
		return retval;
	}

	bool LUA_NATIVE_PED_IS_PED_JUMPING( Ped ped )
	{
		auto retval = (bool)PED::IS_PED_JUMPING(ped);
		return retval;
	}

	bool LUA_NATIVE_PED_IS_PED_LANDING( Any p0 )
	{
		auto retval = (bool)PED::IS_PED_LANDING(p0);
		return retval;
	}

	bool LUA_NATIVE_PED_IS_PED_DOING_A_BEAST_JUMP( Any p0 )
	{
		auto retval = (bool)PED::IS_PED_DOING_A_BEAST_JUMP(p0);
		return retval;
	}

	bool LUA_NATIVE_PED_IS_PED_CLIMBING( Ped ped )
	{
		auto retval = (bool)PED::IS_PED_CLIMBING(ped);
		return retval;
	}

	bool LUA_NATIVE_PED_IS_PED_VAULTING( Ped ped )
	{
		auto retval = (bool)PED::IS_PED_VAULTING(ped);
		return retval;
	}

	bool LUA_NATIVE_PED_IS_PED_DIVING( Ped ped )
	{
		auto retval = (bool)PED::IS_PED_DIVING(ped);
		return retval;
	}

	bool LUA_NATIVE_PED_IS_PED_JUMPING_OUT_OF_VEHICLE( Ped ped )
	{
		auto retval = (bool)PED::IS_PED_JUMPING_OUT_OF_VEHICLE(ped);
		return retval;
	}

	bool LUA_NATIVE_PED_IS_PED_OPENING_DOOR( Ped ped )
	{
		auto retval = (bool)PED::IS_PED_OPENING_DOOR(ped);
		return retval;
	}

	int LUA_NATIVE_PED_GET_PED_PARACHUTE_STATE( Ped ped )
	{
		auto retval = PED::GET_PED_PARACHUTE_STATE(ped);
		return retval;
	}

	int LUA_NATIVE_PED_GET_PED_PARACHUTE_LANDING_TYPE( Ped ped )
	{
		auto retval = PED::GET_PED_PARACHUTE_LANDING_TYPE(ped);
		return retval;
	}

	void LUA_NATIVE_PED_SET_PED_PARACHUTE_TINT_INDEX( Ped ped, int tintIndex )
	{
		PED::SET_PED_PARACHUTE_TINT_INDEX(ped, tintIndex);
	}

	int LUA_NATIVE_PED_GET_PED_PARACHUTE_TINT_INDEX( Ped ped, int outTintIndex )
	{
		PED::GET_PED_PARACHUTE_TINT_INDEX(ped, &outTintIndex);
		return outTintIndex;
	}

	void LUA_NATIVE_PED_SET_PED_RESERVE_PARACHUTE_TINT_INDEX( Ped ped, Any p1 )
	{
		PED::SET_PED_RESERVE_PARACHUTE_TINT_INDEX(ped, p1);
	}

	Object LUA_NATIVE_PED_CREATE_PARACHUTE_BAG_OBJECT( Ped ped, bool p1, bool p2 )
	{
		auto retval = PED::CREATE_PARACHUTE_BAG_OBJECT(ped, p1, p2);
		return retval;
	}

	void LUA_NATIVE_PED_SET_PED_DUCKING( Ped ped, bool toggle )
	{
		PED::SET_PED_DUCKING(ped, toggle);
	}

	bool LUA_NATIVE_PED_IS_PED_DUCKING( Ped ped )
	{
		auto retval = (bool)PED::IS_PED_DUCKING(ped);
		return retval;
	}

	bool LUA_NATIVE_PED_IS_PED_IN_ANY_TAXI( Ped ped )
	{
		auto retval = (bool)PED::IS_PED_IN_ANY_TAXI(ped);
		return retval;
	}

	void LUA_NATIVE_PED_SET_PED_ID_RANGE( Ped ped, float value )
	{
		PED::SET_PED_ID_RANGE(ped, value);
	}

	void LUA_NATIVE_PED_SET_PED_HIGHLY_PERCEPTIVE( Ped ped, bool toggle )
	{
		PED::SET_PED_HIGHLY_PERCEPTIVE(ped, toggle);
	}

	void LUA_NATIVE_PED_SET_COP_PERCEPTION_OVERRIDES( float seeingRange, float seeingRangePeripheral, float hearingRange, float visualFieldMinAzimuthAngle, float visualFieldMaxAzimuthAngle, float fieldOfGazeMaxAngle, float p6 )
	{
		PED::SET_COP_PERCEPTION_OVERRIDES(seeingRange, seeingRangePeripheral, hearingRange, visualFieldMinAzimuthAngle, visualFieldMaxAzimuthAngle, fieldOfGazeMaxAngle, p6);
	}

	void LUA_NATIVE_PED_SET_PED_INJURED_ON_GROUND_BEHAVIOUR( Ped ped, float p1 )
	{
		PED::SET_PED_INJURED_ON_GROUND_BEHAVIOUR(ped, p1);
	}

	void LUA_NATIVE_PED_DISABLE_PED_INJURED_ON_GROUND_BEHAVIOUR( Ped ped )
	{
		PED::DISABLE_PED_INJURED_ON_GROUND_BEHAVIOUR(ped);
	}

	void LUA_NATIVE_PED_SET_PED_SEEING_RANGE( Ped ped, float value )
	{
		PED::SET_PED_SEEING_RANGE(ped, value);
	}

	void LUA_NATIVE_PED_SET_PED_HEARING_RANGE( Ped ped, float value )
	{
		PED::SET_PED_HEARING_RANGE(ped, value);
	}

	void LUA_NATIVE_PED_SET_PED_VISUAL_FIELD_MIN_ANGLE( Ped ped, float value )
	{
		PED::SET_PED_VISUAL_FIELD_MIN_ANGLE(ped, value);
	}

	void LUA_NATIVE_PED_SET_PED_VISUAL_FIELD_MAX_ANGLE( Ped ped, float value )
	{
		PED::SET_PED_VISUAL_FIELD_MAX_ANGLE(ped, value);
	}

	void LUA_NATIVE_PED_SET_PED_VISUAL_FIELD_MIN_ELEVATION_ANGLE( Ped ped, float angle )
	{
		PED::SET_PED_VISUAL_FIELD_MIN_ELEVATION_ANGLE(ped, angle);
	}

	void LUA_NATIVE_PED_SET_PED_VISUAL_FIELD_MAX_ELEVATION_ANGLE( Ped ped, float angle )
	{
		PED::SET_PED_VISUAL_FIELD_MAX_ELEVATION_ANGLE(ped, angle);
	}

	void LUA_NATIVE_PED_SET_PED_VISUAL_FIELD_PERIPHERAL_RANGE( Ped ped, float range )
	{
		PED::SET_PED_VISUAL_FIELD_PERIPHERAL_RANGE(ped, range);
	}

	void LUA_NATIVE_PED_SET_PED_VISUAL_FIELD_CENTER_ANGLE( Ped ped, float angle )
	{
		PED::SET_PED_VISUAL_FIELD_CENTER_ANGLE(ped, angle);
	}

	float LUA_NATIVE_PED_GET_PED_VISUAL_FIELD_CENTER_ANGLE( Ped ped )
	{
		auto retval = PED::GET_PED_VISUAL_FIELD_CENTER_ANGLE(ped);
		return retval;
	}

	void LUA_NATIVE_PED_SET_PED_STEALTH_MOVEMENT( Ped ped, bool p1, const char* action )
	{
		PED::SET_PED_STEALTH_MOVEMENT(ped, p1, action);
	}

	bool LUA_NATIVE_PED_GET_PED_STEALTH_MOVEMENT( Ped ped )
	{
		auto retval = (bool)PED::GET_PED_STEALTH_MOVEMENT(ped);
		return retval;
	}

	int LUA_NATIVE_PED_CREATE_GROUP( int unused )
	{
		auto retval = PED::CREATE_GROUP(unused);
		return retval;
	}

	void LUA_NATIVE_PED_SET_PED_AS_GROUP_LEADER( Ped ped, int groupId )
	{
		PED::SET_PED_AS_GROUP_LEADER(ped, groupId);
	}

	void LUA_NATIVE_PED_SET_PED_AS_GROUP_MEMBER( Ped ped, int groupId )
	{
		PED::SET_PED_AS_GROUP_MEMBER(ped, groupId);
	}

	void LUA_NATIVE_PED_SET_PED_CAN_TELEPORT_TO_GROUP_LEADER( Ped pedHandle, int groupHandle, bool toggle )
	{
		PED::SET_PED_CAN_TELEPORT_TO_GROUP_LEADER(pedHandle, groupHandle, toggle);
	}

	void LUA_NATIVE_PED_REMOVE_GROUP( int groupId )
	{
		PED::REMOVE_GROUP(groupId);
	}

	void LUA_NATIVE_PED_REMOVE_PED_FROM_GROUP( Ped ped )
	{
		PED::REMOVE_PED_FROM_GROUP(ped);
	}

	bool LUA_NATIVE_PED_IS_PED_GROUP_MEMBER( Ped ped, int groupId )
	{
		auto retval = (bool)PED::IS_PED_GROUP_MEMBER(ped, groupId);
		return retval;
	}

	bool LUA_NATIVE_PED_IS_PED_HANGING_ON_TO_VEHICLE( Ped ped )
	{
		auto retval = (bool)PED::IS_PED_HANGING_ON_TO_VEHICLE(ped);
		return retval;
	}

	void LUA_NATIVE_PED_SET_GROUP_SEPARATION_RANGE( int groupHandle, float separationRange )
	{
		PED::SET_GROUP_SEPARATION_RANGE(groupHandle, separationRange);
	}

	void LUA_NATIVE_PED_SET_PED_MIN_GROUND_TIME_FOR_STUNGUN( Ped ped, int ms )
	{
		PED::SET_PED_MIN_GROUND_TIME_FOR_STUNGUN(ped, ms);
	}

	bool LUA_NATIVE_PED_IS_PED_PRONE( Ped ped )
	{
		auto retval = (bool)PED::IS_PED_PRONE(ped);
		return retval;
	}

	bool LUA_NATIVE_PED_IS_PED_IN_COMBAT( Ped ped, Ped target )
	{
		auto retval = (bool)PED::IS_PED_IN_COMBAT(ped, target);
		return retval;
	}

	Entity LUA_NATIVE_PED_GET_PED_TARGET_FROM_COMBAT_PED( Ped ped, Any p1 )
	{
		auto retval = PED::GET_PED_TARGET_FROM_COMBAT_PED(ped, p1);
		return retval;
	}

	bool LUA_NATIVE_PED_CAN_PED_IN_COMBAT_SEE_TARGET( Ped ped, Ped target )
	{
		auto retval = (bool)PED::CAN_PED_IN_COMBAT_SEE_TARGET(ped, target);
		return retval;
	}

	bool LUA_NATIVE_PED_IS_PED_DOING_DRIVEBY( Ped ped )
	{
		auto retval = (bool)PED::IS_PED_DOING_DRIVEBY(ped);
		return retval;
	}

	bool LUA_NATIVE_PED_IS_PED_JACKING( Ped ped )
	{
		auto retval = (bool)PED::IS_PED_JACKING(ped);
		return retval;
	}

	bool LUA_NATIVE_PED_IS_PED_BEING_JACKED( Ped ped )
	{
		auto retval = (bool)PED::IS_PED_BEING_JACKED(ped);
		return retval;
	}

	bool LUA_NATIVE_PED_IS_PED_BEING_STUNNED( Ped ped, int p1 )
	{
		auto retval = (bool)PED::IS_PED_BEING_STUNNED(ped, p1);
		return retval;
	}

	Ped LUA_NATIVE_PED_GET_PEDS_JACKER( Ped ped )
	{
		auto retval = PED::GET_PEDS_JACKER(ped);
		return retval;
	}

	Ped LUA_NATIVE_PED_GET_JACK_TARGET( Ped ped )
	{
		auto retval = PED::GET_JACK_TARGET(ped);
		return retval;
	}

	bool LUA_NATIVE_PED_IS_PED_FLEEING( Ped ped )
	{
		auto retval = (bool)PED::IS_PED_FLEEING(ped);
		return retval;
	}

	bool LUA_NATIVE_PED_IS_PED_IN_COVER( Ped ped, bool exceptUseWeapon )
	{
		auto retval = (bool)PED::IS_PED_IN_COVER(ped, exceptUseWeapon);
		return retval;
	}

	bool LUA_NATIVE_PED_IS_PED_IN_COVER_FACING_LEFT( Ped ped )
	{
		auto retval = (bool)PED::IS_PED_IN_COVER_FACING_LEFT(ped);
		return retval;
	}

	bool LUA_NATIVE_PED_IS_PED_IN_HIGH_COVER( Ped ped )
	{
		auto retval = (bool)PED::IS_PED_IN_HIGH_COVER(ped);
		return retval;
	}

	bool LUA_NATIVE_PED_IS_PED_GOING_INTO_COVER( Ped ped )
	{
		auto retval = (bool)PED::IS_PED_GOING_INTO_COVER(ped);
		return retval;
	}

	bool LUA_NATIVE_PED_SET_PED_PINNED_DOWN( Ped ped, bool pinned, int i )
	{
		auto retval = (bool)PED::SET_PED_PINNED_DOWN(ped, pinned, i);
		return retval;
	}

	int LUA_NATIVE_PED_GET_SEAT_PED_IS_TRYING_TO_ENTER( Ped ped )
	{
		auto retval = PED::GET_SEAT_PED_IS_TRYING_TO_ENTER(ped);
		return retval;
	}

	Vehicle LUA_NATIVE_PED_GET_VEHICLE_PED_IS_TRYING_TO_ENTER( Ped ped )
	{
		auto retval = PED::GET_VEHICLE_PED_IS_TRYING_TO_ENTER(ped);
		return retval;
	}

	Entity LUA_NATIVE_PED_GET_PED_SOURCE_OF_DEATH( Ped ped )
	{
		auto retval = PED::GET_PED_SOURCE_OF_DEATH(ped);
		return retval;
	}

	Hash LUA_NATIVE_PED_GET_PED_CAUSE_OF_DEATH( Ped ped )
	{
		auto retval = PED::GET_PED_CAUSE_OF_DEATH(ped);
		return retval;
	}

	int LUA_NATIVE_PED_GET_PED_TIME_OF_DEATH( Ped ped )
	{
		auto retval = PED::GET_PED_TIME_OF_DEATH(ped);
		return retval;
	}

	int LUA_NATIVE_PED_COUNT_PEDS_IN_COMBAT_WITH_TARGET( Ped ped )
	{
		auto retval = PED::COUNT_PEDS_IN_COMBAT_WITH_TARGET(ped);
		return retval;
	}

	int LUA_NATIVE_PED_COUNT_PEDS_IN_COMBAT_WITH_TARGET_WITHIN_RADIUS( Ped ped, float x, float y, float z, float radius )
	{
		auto retval = PED::COUNT_PEDS_IN_COMBAT_WITH_TARGET_WITHIN_RADIUS(ped, x, y, z, radius);
		return retval;
	}

	void LUA_NATIVE_PED_SET_PED_RELATIONSHIP_GROUP_DEFAULT_HASH( Ped ped, Hash hash )
	{
		PED::SET_PED_RELATIONSHIP_GROUP_DEFAULT_HASH(ped, hash);
	}

	void LUA_NATIVE_PED_SET_PED_RELATIONSHIP_GROUP_HASH( Ped ped, Hash hash )
	{
		PED::SET_PED_RELATIONSHIP_GROUP_HASH(ped, hash);
	}

	void LUA_NATIVE_PED_SET_RELATIONSHIP_BETWEEN_GROUPS( int relationship, Hash group1, Hash group2 )
	{
		PED::SET_RELATIONSHIP_BETWEEN_GROUPS(relationship, group1, group2);
	}

	void LUA_NATIVE_PED_CLEAR_RELATIONSHIP_BETWEEN_GROUPS( int relationship, Hash group1, Hash group2 )
	{
		PED::CLEAR_RELATIONSHIP_BETWEEN_GROUPS(relationship, group1, group2);
	}

	std::tuple<bool, Hash> LUA_NATIVE_PED_ADD_RELATIONSHIP_GROUP( const char* name, Hash groupHash )
	{
		std::tuple<bool, Hash> return_values;
		std::get<0>(return_values) = (bool)PED::ADD_RELATIONSHIP_GROUP(name, &groupHash);
		std::get<1>(return_values) = groupHash;

		return return_values;
	}

	void LUA_NATIVE_PED_REMOVE_RELATIONSHIP_GROUP( Hash groupHash )
	{
		PED::REMOVE_RELATIONSHIP_GROUP(groupHash);
	}

	bool LUA_NATIVE_PED_DOES_RELATIONSHIP_GROUP_EXIST( Hash groupHash )
	{
		auto retval = (bool)PED::DOES_RELATIONSHIP_GROUP_EXIST(groupHash);
		return retval;
	}

	int LUA_NATIVE_PED_GET_RELATIONSHIP_BETWEEN_PEDS( Ped ped1, Ped ped2 )
	{
		auto retval = PED::GET_RELATIONSHIP_BETWEEN_PEDS(ped1, ped2);
		return retval;
	}

	Hash LUA_NATIVE_PED_GET_PED_RELATIONSHIP_GROUP_DEFAULT_HASH( Ped ped )
	{
		auto retval = PED::GET_PED_RELATIONSHIP_GROUP_DEFAULT_HASH(ped);
		return retval;
	}

	Hash LUA_NATIVE_PED_GET_PED_RELATIONSHIP_GROUP_HASH( Ped ped )
	{
		auto retval = PED::GET_PED_RELATIONSHIP_GROUP_HASH(ped);
		return retval;
	}

	int LUA_NATIVE_PED_GET_RELATIONSHIP_BETWEEN_GROUPS( Hash group1, Hash group2 )
	{
		auto retval = PED::GET_RELATIONSHIP_BETWEEN_GROUPS(group1, group2);
		return retval;
	}

	void LUA_NATIVE_PED_SET_RELATIONSHIP_GROUP_AFFECTS_WANTED_LEVEL( Hash group, bool p1 )
	{
		PED::SET_RELATIONSHIP_GROUP_AFFECTS_WANTED_LEVEL(group, p1);
	}

	void LUA_NATIVE_PED_TELL_GROUP_PEDS_IN_AREA_TO_ATTACK( Ped ped, Any p1, float p2, Hash hash, Any p4, Any p5 )
	{
		PED::TELL_GROUP_PEDS_IN_AREA_TO_ATTACK(ped, p1, p2, hash, p4, p5);
	}

	void LUA_NATIVE_PED_SET_PED_CAN_BE_TARGETED_WITHOUT_LOS( Ped ped, bool toggle )
	{
		PED::SET_PED_CAN_BE_TARGETED_WITHOUT_LOS(ped, toggle);
	}

	void LUA_NATIVE_PED_SET_PED_TO_INFORM_RESPECTED_FRIENDS( Ped ped, float radius, int maxFriends )
	{
		PED::SET_PED_TO_INFORM_RESPECTED_FRIENDS(ped, radius, maxFriends);
	}

	bool LUA_NATIVE_PED_IS_PED_RESPONDING_TO_EVENT( Ped ped, Any event )
	{
		auto retval = (bool)PED::IS_PED_RESPONDING_TO_EVENT(ped, event);
		return retval;
	}

	std::tuple<bool, Any> LUA_NATIVE_PED_GET_POS_FROM_FIRED_EVENT( Ped ped, int eventType, Any outData )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)PED::GET_POS_FROM_FIRED_EVENT(ped, eventType, &outData);
		std::get<1>(return_values) = outData;

		return return_values;
	}

	void LUA_NATIVE_PED_SET_PED_FIRING_PATTERN( Ped ped, Hash patternHash )
	{
		PED::SET_PED_FIRING_PATTERN(ped, patternHash);
	}

	void LUA_NATIVE_PED_SET_PED_SHOOT_RATE( Ped ped, int shootRate )
	{
		PED::SET_PED_SHOOT_RATE(ped, shootRate);
	}

	void LUA_NATIVE_PED_SET_COMBAT_FLOAT( Ped ped, int combatType, float p2 )
	{
		PED::SET_COMBAT_FLOAT(ped, combatType, p2);
	}

	float LUA_NATIVE_PED_GET_COMBAT_FLOAT( Ped ped, int p1 )
	{
		auto retval = PED::GET_COMBAT_FLOAT(ped, p1);
		return retval;
	}

	std::tuple<Any, int> LUA_NATIVE_PED_GET_GROUP_SIZE( int groupID, Any p1, int sizeInMembers )
	{
		std::tuple<Any, int> return_values;
		PED::GET_GROUP_SIZE(groupID, &p1, &sizeInMembers);
		std::get<0>(return_values) = p1;
		std::get<1>(return_values) = sizeInMembers;

		return return_values;
	}

	bool LUA_NATIVE_PED_DOES_GROUP_EXIST( int groupId )
	{
		auto retval = (bool)PED::DOES_GROUP_EXIST(groupId);
		return retval;
	}

	int LUA_NATIVE_PED_GET_PED_GROUP_INDEX( Ped ped )
	{
		auto retval = PED::GET_PED_GROUP_INDEX(ped);
		return retval;
	}

	bool LUA_NATIVE_PED_IS_PED_IN_GROUP( Ped ped )
	{
		auto retval = (bool)PED::IS_PED_IN_GROUP(ped);
		return retval;
	}

	Player LUA_NATIVE_PED_GET_PLAYER_PED_IS_FOLLOWING( Ped ped )
	{
		auto retval = PED::GET_PLAYER_PED_IS_FOLLOWING(ped);
		return retval;
	}

	void LUA_NATIVE_PED_SET_GROUP_FORMATION( int groupId, int formationType )
	{
		PED::SET_GROUP_FORMATION(groupId, formationType);
	}

	void LUA_NATIVE_PED_SET_GROUP_FORMATION_SPACING( int groupId, float x, float y, float z )
	{
		PED::SET_GROUP_FORMATION_SPACING(groupId, x, y, z);
	}

	void LUA_NATIVE_PED_RESET_GROUP_FORMATION_DEFAULT_SPACING( int groupHandle )
	{
		PED::RESET_GROUP_FORMATION_DEFAULT_SPACING(groupHandle);
	}

	Vehicle LUA_NATIVE_PED_GET_VEHICLE_PED_IS_USING( Ped ped )
	{
		auto retval = PED::GET_VEHICLE_PED_IS_USING(ped);
		return retval;
	}

	Vehicle LUA_NATIVE_PED_GET_VEHICLE_PED_IS_ENTERING( Ped ped )
	{
		auto retval = PED::GET_VEHICLE_PED_IS_ENTERING(ped);
		return retval;
	}

	void LUA_NATIVE_PED_SET_PED_GRAVITY( Ped ped, bool toggle )
	{
		PED::SET_PED_GRAVITY(ped, toggle);
	}

	void LUA_NATIVE_PED_APPLY_DAMAGE_TO_PED( Ped ped, int damageAmount, bool p2, Any p3 )
	{
		PED::APPLY_DAMAGE_TO_PED(ped, damageAmount, p2, p3);
	}

	int LUA_NATIVE_PED_GET_TIME_PED_DAMAGED_BY_WEAPON( Ped ped, Hash weaponHash )
	{
		auto retval = PED::GET_TIME_PED_DAMAGED_BY_WEAPON(ped, weaponHash);
		return retval;
	}

	void LUA_NATIVE_PED_SET_PED_ALLOWED_TO_DUCK( Ped ped, bool toggle )
	{
		PED::SET_PED_ALLOWED_TO_DUCK(ped, toggle);
	}

	void LUA_NATIVE_PED_SET_PED_NEVER_LEAVES_GROUP( Ped ped, bool toggle )
	{
		PED::SET_PED_NEVER_LEAVES_GROUP(ped, toggle);
	}

	int LUA_NATIVE_PED_GET_PED_TYPE( Ped ped )
	{
		auto retval = PED::GET_PED_TYPE(ped);
		return retval;
	}

	void LUA_NATIVE_PED_SET_PED_AS_COP( Ped ped, bool toggle )
	{
		PED::SET_PED_AS_COP(ped, toggle);
	}

	void LUA_NATIVE_PED_SET_PED_HEALTH_PENDING_LAST_DAMAGE_EVENT_OVERRIDE_FLAG( bool toggle )
	{
		PED::SET_PED_HEALTH_PENDING_LAST_DAMAGE_EVENT_OVERRIDE_FLAG(toggle);
	}

	void LUA_NATIVE_PED_SET_PED_MAX_HEALTH( Ped ped, int value )
	{
		PED::SET_PED_MAX_HEALTH(ped, value);
	}

	int LUA_NATIVE_PED_GET_PED_MAX_HEALTH( Ped ped )
	{
		auto retval = PED::GET_PED_MAX_HEALTH(ped);
		return retval;
	}

	void LUA_NATIVE_PED_SET_PED_MAX_TIME_IN_WATER( Ped ped, float value )
	{
		PED::SET_PED_MAX_TIME_IN_WATER(ped, value);
	}

	void LUA_NATIVE_PED_SET_PED_MAX_TIME_UNDERWATER( Ped ped, float value )
	{
		PED::SET_PED_MAX_TIME_UNDERWATER(ped, value);
	}

	void LUA_NATIVE_PED_SET_CORPSE_RAGDOLL_FRICTION( Ped ped, float p1 )
	{
		PED::SET_CORPSE_RAGDOLL_FRICTION(ped, p1);
	}

	void LUA_NATIVE_PED_SET_PED_VEHICLE_FORCED_SEAT_USAGE( Ped ped, Vehicle vehicle, int seatIndex, int flags, Any p4 )
	{
		PED::SET_PED_VEHICLE_FORCED_SEAT_USAGE(ped, vehicle, seatIndex, flags, p4);
	}

	void LUA_NATIVE_PED_CLEAR_ALL_PED_VEHICLE_FORCED_SEAT_USAGE( Ped ped )
	{
		PED::CLEAR_ALL_PED_VEHICLE_FORCED_SEAT_USAGE(ped);
	}

	void LUA_NATIVE_PED_SET_PED_CAN_BE_KNOCKED_OFF_BIKE( Any p0, Any p1 )
	{
		PED::SET_PED_CAN_BE_KNOCKED_OFF_BIKE(p0, p1);
	}

	void LUA_NATIVE_PED_SET_PED_CAN_BE_KNOCKED_OFF_VEHICLE( Ped ped, int state )
	{
		PED::SET_PED_CAN_BE_KNOCKED_OFF_VEHICLE(ped, state);
	}

	bool LUA_NATIVE_PED_CAN_KNOCK_PED_OFF_VEHICLE( Ped ped )
	{
		auto retval = (bool)PED::CAN_KNOCK_PED_OFF_VEHICLE(ped);
		return retval;
	}

	void LUA_NATIVE_PED_KNOCK_PED_OFF_VEHICLE( Ped ped )
	{
		PED::KNOCK_PED_OFF_VEHICLE(ped);
	}

	void LUA_NATIVE_PED_SET_PED_COORDS_NO_GANG( Ped ped, float posX, float posY, float posZ )
	{
		PED::SET_PED_COORDS_NO_GANG(ped, posX, posY, posZ);
	}

	Ped LUA_NATIVE_PED_GET_PED_AS_GROUP_MEMBER( int groupID, int memberNumber )
	{
		auto retval = PED::GET_PED_AS_GROUP_MEMBER(groupID, memberNumber);
		return retval;
	}

	Ped LUA_NATIVE_PED_GET_PED_AS_GROUP_LEADER( int groupID )
	{
		auto retval = PED::GET_PED_AS_GROUP_LEADER(groupID);
		return retval;
	}

	void LUA_NATIVE_PED_SET_PED_KEEP_TASK( Ped ped, bool toggle )
	{
		PED::SET_PED_KEEP_TASK(ped, toggle);
	}

	void LUA_NATIVE_PED_SET_PED_ALLOW_MINOR_REACTIONS_AS_MISSION_PED( Ped ped, bool toggle )
	{
		PED::SET_PED_ALLOW_MINOR_REACTIONS_AS_MISSION_PED(ped, toggle);
	}

	bool LUA_NATIVE_PED_IS_PED_SWIMMING( Ped ped )
	{
		auto retval = (bool)PED::IS_PED_SWIMMING(ped);
		return retval;
	}

	bool LUA_NATIVE_PED_IS_PED_SWIMMING_UNDER_WATER( Ped ped )
	{
		auto retval = (bool)PED::IS_PED_SWIMMING_UNDER_WATER(ped);
		return retval;
	}

	void LUA_NATIVE_PED_SET_PED_COORDS_KEEP_VEHICLE( Ped ped, float posX, float posY, float posZ )
	{
		PED::SET_PED_COORDS_KEEP_VEHICLE(ped, posX, posY, posZ);
	}

	void LUA_NATIVE_PED_SET_PED_DIES_IN_VEHICLE( Ped ped, bool toggle )
	{
		PED::SET_PED_DIES_IN_VEHICLE(ped, toggle);
	}

	void LUA_NATIVE_PED_SET_CREATE_RANDOM_COPS( bool toggle )
	{
		PED::SET_CREATE_RANDOM_COPS(toggle);
	}

	void LUA_NATIVE_PED_SET_CREATE_RANDOM_COPS_NOT_ON_SCENARIOS( bool toggle )
	{
		PED::SET_CREATE_RANDOM_COPS_NOT_ON_SCENARIOS(toggle);
	}

	void LUA_NATIVE_PED_SET_CREATE_RANDOM_COPS_ON_SCENARIOS( bool toggle )
	{
		PED::SET_CREATE_RANDOM_COPS_ON_SCENARIOS(toggle);
	}

	bool LUA_NATIVE_PED_CAN_CREATE_RANDOM_COPS(  )
	{
		auto retval = (bool)PED::CAN_CREATE_RANDOM_COPS();
		return retval;
	}

	void LUA_NATIVE_PED_SET_PED_AS_ENEMY( Ped ped, bool toggle )
	{
		PED::SET_PED_AS_ENEMY(ped, toggle);
	}

	void LUA_NATIVE_PED_SET_PED_CAN_SMASH_GLASS( Ped ped, bool p1, bool p2 )
	{
		PED::SET_PED_CAN_SMASH_GLASS(ped, p1, p2);
	}

	bool LUA_NATIVE_PED_IS_PED_IN_ANY_TRAIN( Ped ped )
	{
		auto retval = (bool)PED::IS_PED_IN_ANY_TRAIN(ped);
		return retval;
	}

	bool LUA_NATIVE_PED_IS_PED_GETTING_INTO_A_VEHICLE( Ped ped )
	{
		auto retval = (bool)PED::IS_PED_GETTING_INTO_A_VEHICLE(ped);
		return retval;
	}

	bool LUA_NATIVE_PED_IS_PED_TRYING_TO_ENTER_A_LOCKED_VEHICLE( Ped ped )
	{
		auto retval = (bool)PED::IS_PED_TRYING_TO_ENTER_A_LOCKED_VEHICLE(ped);
		return retval;
	}

	void LUA_NATIVE_PED_SET_ENABLE_HANDCUFFS( Ped ped, bool toggle )
	{
		PED::SET_ENABLE_HANDCUFFS(ped, toggle);
	}

	void LUA_NATIVE_PED_SET_ENABLE_BOUND_ANKLES( Ped ped, bool toggle )
	{
		PED::SET_ENABLE_BOUND_ANKLES(ped, toggle);
	}

	void LUA_NATIVE_PED_SET_ENABLE_SCUBA( Ped ped, bool toggle )
	{
		PED::SET_ENABLE_SCUBA(ped, toggle);
	}

	void LUA_NATIVE_PED_SET_CAN_ATTACK_FRIENDLY( Ped ped, bool toggle, bool p2 )
	{
		PED::SET_CAN_ATTACK_FRIENDLY(ped, toggle, p2);
	}

	int LUA_NATIVE_PED_GET_PED_ALERTNESS( Ped ped )
	{
		auto retval = PED::GET_PED_ALERTNESS(ped);
		return retval;
	}

	void LUA_NATIVE_PED_SET_PED_ALERTNESS( Ped ped, int value )
	{
		PED::SET_PED_ALERTNESS(ped, value);
	}

	void LUA_NATIVE_PED_SET_PED_GET_OUT_UPSIDE_DOWN_VEHICLE( Ped ped, bool toggle )
	{
		PED::SET_PED_GET_OUT_UPSIDE_DOWN_VEHICLE(ped, toggle);
	}

	void LUA_NATIVE_PED_SET_PED_MOVEMENT_CLIPSET( Ped ped, const char* clipSet, float transitionSpeed )
	{
		PED::SET_PED_MOVEMENT_CLIPSET(ped, clipSet, transitionSpeed);
	}

	void LUA_NATIVE_PED_RESET_PED_MOVEMENT_CLIPSET( Ped ped, float p1 )
	{
		PED::RESET_PED_MOVEMENT_CLIPSET(ped, p1);
	}

	void LUA_NATIVE_PED_SET_PED_STRAFE_CLIPSET( Ped ped, const char* clipSet )
	{
		PED::SET_PED_STRAFE_CLIPSET(ped, clipSet);
	}

	void LUA_NATIVE_PED_RESET_PED_STRAFE_CLIPSET( Ped ped )
	{
		PED::RESET_PED_STRAFE_CLIPSET(ped);
	}

	void LUA_NATIVE_PED_SET_PED_WEAPON_MOVEMENT_CLIPSET( Ped ped, const char* clipSet )
	{
		PED::SET_PED_WEAPON_MOVEMENT_CLIPSET(ped, clipSet);
	}

	void LUA_NATIVE_PED_RESET_PED_WEAPON_MOVEMENT_CLIPSET( Ped ped )
	{
		PED::RESET_PED_WEAPON_MOVEMENT_CLIPSET(ped);
	}

	void LUA_NATIVE_PED_SET_PED_DRIVE_BY_CLIPSET_OVERRIDE( Ped ped, const char* clipset )
	{
		PED::SET_PED_DRIVE_BY_CLIPSET_OVERRIDE(ped, clipset);
	}

	void LUA_NATIVE_PED_CLEAR_PED_DRIVE_BY_CLIPSET_OVERRIDE( Ped ped )
	{
		PED::CLEAR_PED_DRIVE_BY_CLIPSET_OVERRIDE(ped);
	}

	void LUA_NATIVE_PED_SET_PED_MOTION_IN_COVER_CLIPSET_OVERRIDE( Ped ped, const char* p1 )
	{
		PED::SET_PED_MOTION_IN_COVER_CLIPSET_OVERRIDE(ped, p1);
	}

	void LUA_NATIVE_PED_CLEAR_PED_MOTION_IN_COVER_CLIPSET_OVERRIDE( Ped ped )
	{
		PED::CLEAR_PED_MOTION_IN_COVER_CLIPSET_OVERRIDE(ped);
	}

	void LUA_NATIVE_PED_CLEAR_PED_FALL_UPPER_BODY_CLIPSET_OVERRIDE( Ped ped )
	{
		PED::CLEAR_PED_FALL_UPPER_BODY_CLIPSET_OVERRIDE(ped);
	}

	void LUA_NATIVE_PED_SET_PED_IN_VEHICLE_CONTEXT( Ped ped, Hash context )
	{
		PED::SET_PED_IN_VEHICLE_CONTEXT(ped, context);
	}

	void LUA_NATIVE_PED_RESET_PED_IN_VEHICLE_CONTEXT( Ped ped )
	{
		PED::RESET_PED_IN_VEHICLE_CONTEXT(ped);
	}

	bool LUA_NATIVE_PED_IS_SCRIPTED_SCENARIO_PED_USING_CONDITIONAL_ANIM( Ped ped, const char* animDict, const char* anim )
	{
		auto retval = (bool)PED::IS_SCRIPTED_SCENARIO_PED_USING_CONDITIONAL_ANIM(ped, animDict, anim);
		return retval;
	}

	void LUA_NATIVE_PED_SET_PED_ALTERNATE_WALK_ANIM( Ped ped, const char* animDict, const char* animName, float p3, bool p4 )
	{
		PED::SET_PED_ALTERNATE_WALK_ANIM(ped, animDict, animName, p3, p4);
	}

	void LUA_NATIVE_PED_CLEAR_PED_ALTERNATE_WALK_ANIM( Ped ped, float p1 )
	{
		PED::CLEAR_PED_ALTERNATE_WALK_ANIM(ped, p1);
	}

	void LUA_NATIVE_PED_SET_PED_ALTERNATE_MOVEMENT_ANIM( Ped ped, int stance, const char* animDictionary, const char* animationName, float p4, bool p5 )
	{
		PED::SET_PED_ALTERNATE_MOVEMENT_ANIM(ped, stance, animDictionary, animationName, p4, p5);
	}

	void LUA_NATIVE_PED_CLEAR_PED_ALTERNATE_MOVEMENT_ANIM( Ped ped, int stance, float p2 )
	{
		PED::CLEAR_PED_ALTERNATE_MOVEMENT_ANIM(ped, stance, p2);
	}

	void LUA_NATIVE_PED_SET_PED_GESTURE_GROUP( Ped ped, const char* animGroupGesture )
	{
		PED::SET_PED_GESTURE_GROUP(ped, animGroupGesture);
	}

	Vector3 LUA_NATIVE_PED_GET_ANIM_INITIAL_OFFSET_POSITION( const char* animDict, const char* animName, float x, float y, float z, float xRot, float yRot, float zRot, float p8, int p9 )
	{
		auto retval = PED::GET_ANIM_INITIAL_OFFSET_POSITION(animDict, animName, x, y, z, xRot, yRot, zRot, p8, p9);
		return retval;
	}

	Vector3 LUA_NATIVE_PED_GET_ANIM_INITIAL_OFFSET_ROTATION( const char* animDict, const char* animName, float x, float y, float z, float xRot, float yRot, float zRot, float p8, int p9 )
	{
		auto retval = PED::GET_ANIM_INITIAL_OFFSET_ROTATION(animDict, animName, x, y, z, xRot, yRot, zRot, p8, p9);
		return retval;
	}

	int LUA_NATIVE_PED_GET_PED_DRAWABLE_VARIATION( Ped ped, int componentId )
	{
		auto retval = PED::GET_PED_DRAWABLE_VARIATION(ped, componentId);
		return retval;
	}

	int LUA_NATIVE_PED_GET_NUMBER_OF_PED_DRAWABLE_VARIATIONS( Ped ped, int componentId )
	{
		auto retval = PED::GET_NUMBER_OF_PED_DRAWABLE_VARIATIONS(ped, componentId);
		return retval;
	}

	int LUA_NATIVE_PED_GET_PED_TEXTURE_VARIATION( Ped ped, int componentId )
	{
		auto retval = PED::GET_PED_TEXTURE_VARIATION(ped, componentId);
		return retval;
	}

	int LUA_NATIVE_PED_GET_NUMBER_OF_PED_TEXTURE_VARIATIONS( Ped ped, int componentId, int drawableId )
	{
		auto retval = PED::GET_NUMBER_OF_PED_TEXTURE_VARIATIONS(ped, componentId, drawableId);
		return retval;
	}

	int LUA_NATIVE_PED_GET_NUMBER_OF_PED_PROP_DRAWABLE_VARIATIONS( Ped ped, int propId )
	{
		auto retval = PED::GET_NUMBER_OF_PED_PROP_DRAWABLE_VARIATIONS(ped, propId);
		return retval;
	}

	int LUA_NATIVE_PED_GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS( Ped ped, int propId, int drawableId )
	{
		auto retval = PED::GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS(ped, propId, drawableId);
		return retval;
	}

	int LUA_NATIVE_PED_GET_PED_PALETTE_VARIATION( Ped ped, int componentId )
	{
		auto retval = PED::GET_PED_PALETTE_VARIATION(ped, componentId);
		return retval;
	}

	std::tuple<bool, Any, Any> LUA_NATIVE_PED_GET_MP_OUTFIT_DATA_FROM_METADATA( Any p0, Any p1 )
	{
		std::tuple<bool, Any, Any> return_values;
		std::get<0>(return_values) = (bool)PED::GET_MP_OUTFIT_DATA_FROM_METADATA(&p0, &p1);
		std::get<1>(return_values) = p0;
		std::get<2>(return_values) = p1;

		return return_values;
	}

	int LUA_NATIVE_PED_GET_FM_MALE_SHOP_PED_APPAREL_ITEM_INDEX( int p0 )
	{
		auto retval = PED::GET_FM_MALE_SHOP_PED_APPAREL_ITEM_INDEX(p0);
		return retval;
	}

	int LUA_NATIVE_PED_GET_FM_FEMALE_SHOP_PED_APPAREL_ITEM_INDEX( int p0 )
	{
		auto retval = PED::GET_FM_FEMALE_SHOP_PED_APPAREL_ITEM_INDEX(p0);
		return retval;
	}

	bool LUA_NATIVE_PED_IS_PED_COMPONENT_VARIATION_VALID( Ped ped, int componentId, int drawableId, int textureId )
	{
		auto retval = (bool)PED::IS_PED_COMPONENT_VARIATION_VALID(ped, componentId, drawableId, textureId);
		return retval;
	}

	void LUA_NATIVE_PED_SET_PED_COMPONENT_VARIATION( Ped ped, int componentId, int drawableId, int textureId, int paletteId )
	{
		PED::SET_PED_COMPONENT_VARIATION(ped, componentId, drawableId, textureId, paletteId);
	}

	void LUA_NATIVE_PED_SET_PED_RANDOM_COMPONENT_VARIATION( Ped ped, int p1 )
	{
		PED::SET_PED_RANDOM_COMPONENT_VARIATION(ped, p1);
	}

	void LUA_NATIVE_PED_SET_PED_RANDOM_PROPS( Ped ped )
	{
		PED::SET_PED_RANDOM_PROPS(ped);
	}

	void LUA_NATIVE_PED_SET_PED_DEFAULT_COMPONENT_VARIATION( Ped ped )
	{
		PED::SET_PED_DEFAULT_COMPONENT_VARIATION(ped);
	}

	void LUA_NATIVE_PED_SET_PED_BLEND_FROM_PARENTS( Ped ped, Any p1, Any p2, float p3, float p4 )
	{
		PED::SET_PED_BLEND_FROM_PARENTS(ped, p1, p2, p3, p4);
	}

	void LUA_NATIVE_PED_SET_PED_HEAD_BLEND_DATA( Ped ped, int shapeFirstID, int shapeSecondID, int shapeThirdID, int skinFirstID, int skinSecondID, int skinThirdID, float shapeMix, float skinMix, float thirdMix, bool isParent )
	{
		PED::SET_PED_HEAD_BLEND_DATA(ped, shapeFirstID, shapeSecondID, shapeThirdID, skinFirstID, skinSecondID, skinThirdID, shapeMix, skinMix, thirdMix, isParent);
	}

	std::tuple<bool, Any> LUA_NATIVE_PED_GET_PED_HEAD_BLEND_DATA( Ped ped, Any headBlendData )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)PED::GET_PED_HEAD_BLEND_DATA(ped, &headBlendData);
		std::get<1>(return_values) = headBlendData;

		return return_values;
	}

	void LUA_NATIVE_PED_UPDATE_PED_HEAD_BLEND_DATA( Ped ped, float shapeMix, float skinMix, float thirdMix )
	{
		PED::UPDATE_PED_HEAD_BLEND_DATA(ped, shapeMix, skinMix, thirdMix);
	}

	void LUA_NATIVE_PED_SET_HEAD_BLEND_EYE_COLOR( Ped ped, int index )
	{
		PED::SET_HEAD_BLEND_EYE_COLOR(ped, index);
	}

	int LUA_NATIVE_PED_GET_HEAD_BLEND_EYE_COLOR( Ped ped )
	{
		auto retval = PED::GET_HEAD_BLEND_EYE_COLOR(ped);
		return retval;
	}

	void LUA_NATIVE_PED_SET_PED_HEAD_OVERLAY( Ped ped, int overlayID, int index, float opacity )
	{
		PED::SET_PED_HEAD_OVERLAY(ped, overlayID, index, opacity);
	}

	int LUA_NATIVE_PED_GET_PED_HEAD_OVERLAY( Ped ped, int overlayID )
	{
		auto retval = PED::GET_PED_HEAD_OVERLAY(ped, overlayID);
		return retval;
	}

	int LUA_NATIVE_PED_GET_PED_HEAD_OVERLAY_NUM( int overlayID )
	{
		auto retval = PED::GET_PED_HEAD_OVERLAY_NUM(overlayID);
		return retval;
	}

	void LUA_NATIVE_PED_SET_PED_HEAD_OVERLAY_TINT( Ped ped, int overlayID, int colorType, int colorID, int secondColorID )
	{
		PED::SET_PED_HEAD_OVERLAY_TINT(ped, overlayID, colorType, colorID, secondColorID);
	}

	void LUA_NATIVE_PED_SET_PED_HAIR_TINT( Ped ped, int colorID, int highlightColorID )
	{
		PED::SET_PED_HAIR_TINT(ped, colorID, highlightColorID);
	}

	int LUA_NATIVE_PED_GET_NUM_PED_HAIR_TINTS(  )
	{
		auto retval = PED::GET_NUM_PED_HAIR_TINTS();
		return retval;
	}

	int LUA_NATIVE_PED_GET_NUM_PED_MAKEUP_TINTS(  )
	{
		auto retval = PED::GET_NUM_PED_MAKEUP_TINTS();
		return retval;
	}

	std::tuple<int, int, int> LUA_NATIVE_PED_GET_PED_HAIR_TINT_COLOR( int hairColorIndex, int outR, int outG, int outB )
	{
		std::tuple<int, int, int> return_values;
		PED::GET_PED_HAIR_TINT_COLOR(hairColorIndex, &outR, &outG, &outB);
		std::get<0>(return_values) = outR;
		std::get<1>(return_values) = outG;
		std::get<2>(return_values) = outB;

		return return_values;
	}

	std::tuple<int, int, int> LUA_NATIVE_PED_GET_PED_MAKEUP_TINT_COLOR( int makeupColorIndex, int outR, int outG, int outB )
	{
		std::tuple<int, int, int> return_values;
		PED::GET_PED_MAKEUP_TINT_COLOR(makeupColorIndex, &outR, &outG, &outB);
		std::get<0>(return_values) = outR;
		std::get<1>(return_values) = outG;
		std::get<2>(return_values) = outB;

		return return_values;
	}

	bool LUA_NATIVE_PED_IS_PED_HAIR_TINT_FOR_CREATOR( int colorId )
	{
		auto retval = (bool)PED::IS_PED_HAIR_TINT_FOR_CREATOR(colorId);
		return retval;
	}

	int LUA_NATIVE_PED_GET_DEFAULT_SECONDARY_TINT_FOR_CREATOR( int colorId )
	{
		auto retval = PED::GET_DEFAULT_SECONDARY_TINT_FOR_CREATOR(colorId);
		return retval;
	}

	bool LUA_NATIVE_PED_IS_PED_LIPSTICK_TINT_FOR_CREATOR( int colorId )
	{
		auto retval = (bool)PED::IS_PED_LIPSTICK_TINT_FOR_CREATOR(colorId);
		return retval;
	}

	bool LUA_NATIVE_PED_IS_PED_BLUSH_TINT_FOR_CREATOR( int colorId )
	{
		auto retval = (bool)PED::IS_PED_BLUSH_TINT_FOR_CREATOR(colorId);
		return retval;
	}

	bool LUA_NATIVE_PED_IS_PED_HAIR_TINT_FOR_BARBER( int colorID )
	{
		auto retval = (bool)PED::IS_PED_HAIR_TINT_FOR_BARBER(colorID);
		return retval;
	}

	int LUA_NATIVE_PED_GET_DEFAULT_SECONDARY_TINT_FOR_BARBER( int colorID )
	{
		auto retval = PED::GET_DEFAULT_SECONDARY_TINT_FOR_BARBER(colorID);
		return retval;
	}

	bool LUA_NATIVE_PED_IS_PED_LIPSTICK_TINT_FOR_BARBER( int colorID )
	{
		auto retval = (bool)PED::IS_PED_LIPSTICK_TINT_FOR_BARBER(colorID);
		return retval;
	}

	bool LUA_NATIVE_PED_IS_PED_BLUSH_TINT_FOR_BARBER( int colorID )
	{
		auto retval = (bool)PED::IS_PED_BLUSH_TINT_FOR_BARBER(colorID);
		return retval;
	}

	bool LUA_NATIVE_PED_IS_PED_BLUSH_FACEPAINT_TINT_FOR_BARBER( int colorId )
	{
		auto retval = (bool)PED::IS_PED_BLUSH_FACEPAINT_TINT_FOR_BARBER(colorId);
		return retval;
	}

	int LUA_NATIVE_PED_GET_TINT_INDEX_FOR_LAST_GEN_HAIR_TEXTURE( Hash modelHash, int drawableId, int textureId )
	{
		auto retval = PED::GET_TINT_INDEX_FOR_LAST_GEN_HAIR_TEXTURE(modelHash, drawableId, textureId);
		return retval;
	}

	void LUA_NATIVE_PED_SET_PED_MICRO_MORPH( Ped ped, int index, float scale )
	{
		PED::SET_PED_MICRO_MORPH(ped, index, scale);
	}

	bool LUA_NATIVE_PED_HAS_PED_HEAD_BLEND_FINISHED( Ped ped )
	{
		auto retval = (bool)PED::HAS_PED_HEAD_BLEND_FINISHED(ped);
		return retval;
	}

	void LUA_NATIVE_PED_FINALIZE_HEAD_BLEND( Ped ped )
	{
		PED::FINALIZE_HEAD_BLEND(ped);
	}

	void LUA_NATIVE_PED_SET_HEAD_BLEND_PALETTE_COLOR( Ped ped, int r, int g, int b, int id )
	{
		PED::SET_HEAD_BLEND_PALETTE_COLOR(ped, r, g, b, id);
	}

	void LUA_NATIVE_PED_DISABLE_HEAD_BLEND_PALETTE_COLOR( Ped ped )
	{
		PED::DISABLE_HEAD_BLEND_PALETTE_COLOR(ped);
	}

	int LUA_NATIVE_PED_GET_PED_HEAD_BLEND_FIRST_INDEX( int type )
	{
		auto retval = PED::GET_PED_HEAD_BLEND_FIRST_INDEX(type);
		return retval;
	}

	int LUA_NATIVE_PED_GET_PED_HEAD_BLEND_NUM_HEADS( int type )
	{
		auto retval = PED::GET_PED_HEAD_BLEND_NUM_HEADS(type);
		return retval;
	}

	int LUA_NATIVE_PED_SET_PED_PRELOAD_VARIATION_DATA( Ped ped, int slot, int drawableId, int textureId )
	{
		auto retval = PED::SET_PED_PRELOAD_VARIATION_DATA(ped, slot, drawableId, textureId);
		return retval;
	}

	bool LUA_NATIVE_PED_HAS_PED_PRELOAD_VARIATION_DATA_FINISHED( Ped ped )
	{
		auto retval = (bool)PED::HAS_PED_PRELOAD_VARIATION_DATA_FINISHED(ped);
		return retval;
	}

	void LUA_NATIVE_PED_RELEASE_PED_PRELOAD_VARIATION_DATA( Ped ped )
	{
		PED::RELEASE_PED_PRELOAD_VARIATION_DATA(ped);
	}

	int LUA_NATIVE_PED_SET_PED_PRELOAD_PROP_DATA( Ped ped, int componentId, int drawableId, int TextureId )
	{
		auto retval = PED::SET_PED_PRELOAD_PROP_DATA(ped, componentId, drawableId, TextureId);
		return retval;
	}

	bool LUA_NATIVE_PED_HAS_PED_PRELOAD_PROP_DATA_FINISHED( Ped ped )
	{
		auto retval = (bool)PED::HAS_PED_PRELOAD_PROP_DATA_FINISHED(ped);
		return retval;
	}

	void LUA_NATIVE_PED_RELEASE_PED_PRELOAD_PROP_DATA( Ped ped )
	{
		PED::RELEASE_PED_PRELOAD_PROP_DATA(ped);
	}

	int LUA_NATIVE_PED_GET_PED_PROP_INDEX( Ped ped, int componentId, Any p2 )
	{
		auto retval = PED::GET_PED_PROP_INDEX(ped, componentId, p2);
		return retval;
	}

	void LUA_NATIVE_PED_SET_PED_PROP_INDEX( Ped ped, int componentId, int drawableId, int TextureId, bool attach, Any p5 )
	{
		PED::SET_PED_PROP_INDEX(ped, componentId, drawableId, TextureId, attach, p5);
	}

	void LUA_NATIVE_PED_KNOCK_OFF_PED_PROP( Ped ped, bool p1, bool p2, bool p3, bool p4 )
	{
		PED::KNOCK_OFF_PED_PROP(ped, p1, p2, p3, p4);
	}

	void LUA_NATIVE_PED_CLEAR_PED_PROP( Ped ped, int propId, Any p2 )
	{
		PED::CLEAR_PED_PROP(ped, propId, p2);
	}

	void LUA_NATIVE_PED_CLEAR_ALL_PED_PROPS( Ped ped, Any p1 )
	{
		PED::CLEAR_ALL_PED_PROPS(ped, p1);
	}

	void LUA_NATIVE_PED_DROP_AMBIENT_PROP( Ped ped )
	{
		PED::DROP_AMBIENT_PROP(ped);
	}

	int LUA_NATIVE_PED_GET_PED_PROP_TEXTURE_INDEX( Ped ped, int componentId )
	{
		auto retval = PED::GET_PED_PROP_TEXTURE_INDEX(ped, componentId);
		return retval;
	}

	void LUA_NATIVE_PED_CLEAR_PED_PARACHUTE_PACK_VARIATION( Ped ped )
	{
		PED::CLEAR_PED_PARACHUTE_PACK_VARIATION(ped);
	}

	void LUA_NATIVE_PED_SET_PED_SCUBA_GEAR_VARIATION( Ped ped )
	{
		PED::SET_PED_SCUBA_GEAR_VARIATION(ped);
	}

	void LUA_NATIVE_PED_CLEAR_PED_SCUBA_GEAR_VARIATION( Ped ped )
	{
		PED::CLEAR_PED_SCUBA_GEAR_VARIATION(ped);
	}

	bool LUA_NATIVE_PED_IS_USING_PED_SCUBA_GEAR_VARIATION( Any p0 )
	{
		auto retval = (bool)PED::IS_USING_PED_SCUBA_GEAR_VARIATION(p0);
		return retval;
	}

	void LUA_NATIVE_PED_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( Ped ped, bool toggle )
	{
		PED::SET_BLOCKING_OF_NON_TEMPORARY_EVENTS(ped, toggle);
	}

	void LUA_NATIVE_PED_SET_PED_BOUNDS_ORIENTATION( Ped ped, float p1, float p2, float x, float y, float z )
	{
		PED::SET_PED_BOUNDS_ORIENTATION(ped, p1, p2, x, y, z);
	}

	void LUA_NATIVE_PED_REGISTER_TARGET( Ped ped, Ped target )
	{
		PED::REGISTER_TARGET(ped, target);
	}

	void LUA_NATIVE_PED_REGISTER_HATED_TARGETS_AROUND_PED( Ped ped, float radius )
	{
		PED::REGISTER_HATED_TARGETS_AROUND_PED(ped, radius);
	}

	Ped LUA_NATIVE_PED_GET_RANDOM_PED_AT_COORD( float x, float y, float z, float xRadius, float yRadius, float zRadius, int pedType )
	{
		auto retval = PED::GET_RANDOM_PED_AT_COORD(x, y, z, xRadius, yRadius, zRadius, pedType);
		return retval;
	}

	std::tuple<bool, Ped> LUA_NATIVE_PED_GET_CLOSEST_PED( float x, float y, float z, float radius, bool p4, bool p5, Ped outPed, bool p7, bool p8, int pedType )
	{
		std::tuple<bool, Ped> return_values;
		std::get<0>(return_values) = (bool)PED::GET_CLOSEST_PED(x, y, z, radius, p4, p5, &outPed, p7, p8, pedType);
		std::get<1>(return_values) = outPed;

		return return_values;
	}

	void LUA_NATIVE_PED_SET_SCENARIO_PEDS_TO_BE_RETURNED_BY_NEXT_COMMAND( bool value )
	{
		PED::SET_SCENARIO_PEDS_TO_BE_RETURNED_BY_NEXT_COMMAND(value);
	}

	bool LUA_NATIVE_PED_GET_CAN_PED_BE_GRABBED_BY_SCRIPT( Ped ped, bool p1, bool p2, bool p3, bool p4, bool p5, bool p6, bool p7, Any p8 )
	{
		auto retval = (bool)PED::GET_CAN_PED_BE_GRABBED_BY_SCRIPT(ped, p1, p2, p3, p4, p5, p6, p7, p8);
		return retval;
	}

	void LUA_NATIVE_PED_SET_DRIVER_RACING_MODIFIER( Ped driver, float modifier )
	{
		PED::SET_DRIVER_RACING_MODIFIER(driver, modifier);
	}

	void LUA_NATIVE_PED_SET_DRIVER_ABILITY( Ped driver, float ability )
	{
		PED::SET_DRIVER_ABILITY(driver, ability);
	}

	void LUA_NATIVE_PED_SET_DRIVER_AGGRESSIVENESS( Ped driver, float aggressiveness )
	{
		PED::SET_DRIVER_AGGRESSIVENESS(driver, aggressiveness);
	}

	bool LUA_NATIVE_PED_CAN_PED_RAGDOLL( Ped ped )
	{
		auto retval = (bool)PED::CAN_PED_RAGDOLL(ped);
		return retval;
	}

	bool LUA_NATIVE_PED_SET_PED_TO_RAGDOLL( Ped ped, int time1, int time2, int ragdollType, bool p4, bool p5, bool p6 )
	{
		auto retval = (bool)PED::SET_PED_TO_RAGDOLL(ped, time1, time2, ragdollType, p4, p5, p6);
		return retval;
	}

	bool LUA_NATIVE_PED_SET_PED_TO_RAGDOLL_WITH_FALL( Ped ped, int time, int p2, int ragdollType, float x, float y, float z, float velocity, float p8, float p9, float p10, float p11, float p12, float p13 )
	{
		auto retval = (bool)PED::SET_PED_TO_RAGDOLL_WITH_FALL(ped, time, p2, ragdollType, x, y, z, velocity, p8, p9, p10, p11, p12, p13);
		return retval;
	}

	void LUA_NATIVE_PED_SET_PED_RAGDOLL_ON_COLLISION( Ped ped, bool toggle )
	{
		PED::SET_PED_RAGDOLL_ON_COLLISION(ped, toggle);
	}

	bool LUA_NATIVE_PED_IS_PED_RAGDOLL( Ped ped )
	{
		auto retval = (bool)PED::IS_PED_RAGDOLL(ped);
		return retval;
	}

	bool LUA_NATIVE_PED_IS_PED_RUNNING_RAGDOLL_TASK( Ped ped )
	{
		auto retval = (bool)PED::IS_PED_RUNNING_RAGDOLL_TASK(ped);
		return retval;
	}

	void LUA_NATIVE_PED_SET_PED_RAGDOLL_FORCE_FALL( Ped ped )
	{
		PED::SET_PED_RAGDOLL_FORCE_FALL(ped);
	}

	void LUA_NATIVE_PED_RESET_PED_RAGDOLL_TIMER( Ped ped )
	{
		PED::RESET_PED_RAGDOLL_TIMER(ped);
	}

	void LUA_NATIVE_PED_SET_PED_CAN_RAGDOLL( Ped ped, bool toggle )
	{
		PED::SET_PED_CAN_RAGDOLL(ped, toggle);
	}

	bool LUA_NATIVE_PED_IS_PED_RUNNING_MELEE_TASK( Ped ped )
	{
		auto retval = (bool)PED::IS_PED_RUNNING_MELEE_TASK(ped);
		return retval;
	}

	bool LUA_NATIVE_PED_IS_PED_RUNNING_MOBILE_PHONE_TASK( Ped ped )
	{
		auto retval = (bool)PED::IS_PED_RUNNING_MOBILE_PHONE_TASK(ped);
		return retval;
	}

	bool LUA_NATIVE_PED_IS_MOBILE_PHONE_TO_PED_EAR( Ped ped )
	{
		auto retval = (bool)PED::IS_MOBILE_PHONE_TO_PED_EAR(ped);
		return retval;
	}

	void LUA_NATIVE_PED_SET_RAGDOLL_BLOCKING_FLAGS( Ped ped, int blockingFlag )
	{
		PED::SET_RAGDOLL_BLOCKING_FLAGS(ped, blockingFlag);
	}

	void LUA_NATIVE_PED_CLEAR_RAGDOLL_BLOCKING_FLAGS( Ped ped, int blockingFlag )
	{
		PED::CLEAR_RAGDOLL_BLOCKING_FLAGS(ped, blockingFlag);
	}

	void LUA_NATIVE_PED_SET_PED_ANGLED_DEFENSIVE_AREA( Ped ped, float p1, float p2, float p3, float p4, float p5, float p6, float p7, bool p8, bool p9 )
	{
		PED::SET_PED_ANGLED_DEFENSIVE_AREA(ped, p1, p2, p3, p4, p5, p6, p7, p8, p9);
	}

	void LUA_NATIVE_PED_SET_PED_SPHERE_DEFENSIVE_AREA( Ped ped, float x, float y, float z, float radius, bool p5, bool p6 )
	{
		PED::SET_PED_SPHERE_DEFENSIVE_AREA(ped, x, y, z, radius, p5, p6);
	}

	void LUA_NATIVE_PED_SET_PED_DEFENSIVE_SPHERE_ATTACHED_TO_PED( Ped ped, Ped target, float xOffset, float yOffset, float zOffset, float radius, bool p6 )
	{
		PED::SET_PED_DEFENSIVE_SPHERE_ATTACHED_TO_PED(ped, target, xOffset, yOffset, zOffset, radius, p6);
	}

	void LUA_NATIVE_PED_SET_PED_DEFENSIVE_SPHERE_ATTACHED_TO_VEHICLE( Ped ped, Vehicle target, float xOffset, float yOffset, float zOffset, float radius, bool p6 )
	{
		PED::SET_PED_DEFENSIVE_SPHERE_ATTACHED_TO_VEHICLE(ped, target, xOffset, yOffset, zOffset, radius, p6);
	}

	void LUA_NATIVE_PED_SET_PED_DEFENSIVE_AREA_ATTACHED_TO_PED( Ped ped, Ped attachPed, float p2, float p3, float p4, float p5, float p6, float p7, float p8, bool p9, bool p10 )
	{
		PED::SET_PED_DEFENSIVE_AREA_ATTACHED_TO_PED(ped, attachPed, p2, p3, p4, p5, p6, p7, p8, p9, p10);
	}

	void LUA_NATIVE_PED_SET_PED_DEFENSIVE_AREA_DIRECTION( Ped ped, float p1, float p2, float p3, bool p4 )
	{
		PED::SET_PED_DEFENSIVE_AREA_DIRECTION(ped, p1, p2, p3, p4);
	}

	void LUA_NATIVE_PED_REMOVE_PED_DEFENSIVE_AREA( Ped ped, bool toggle )
	{
		PED::REMOVE_PED_DEFENSIVE_AREA(ped, toggle);
	}

	Vector3 LUA_NATIVE_PED_GET_PED_DEFENSIVE_AREA_POSITION( Ped ped, bool p1 )
	{
		auto retval = PED::GET_PED_DEFENSIVE_AREA_POSITION(ped, p1);
		return retval;
	}

	bool LUA_NATIVE_PED_IS_PED_DEFENSIVE_AREA_ACTIVE( Ped ped, bool p1 )
	{
		auto retval = (bool)PED::IS_PED_DEFENSIVE_AREA_ACTIVE(ped, p1);
		return retval;
	}

	void LUA_NATIVE_PED_SET_PED_PREFERRED_COVER_SET( Ped ped, Any itemSet )
	{
		PED::SET_PED_PREFERRED_COVER_SET(ped, itemSet);
	}

	void LUA_NATIVE_PED_REMOVE_PED_PREFERRED_COVER_SET( Ped ped )
	{
		PED::REMOVE_PED_PREFERRED_COVER_SET(ped);
	}

	void LUA_NATIVE_PED_REVIVE_INJURED_PED( Ped ped )
	{
		PED::REVIVE_INJURED_PED(ped);
	}

	void LUA_NATIVE_PED_RESURRECT_PED( Ped ped )
	{
		PED::RESURRECT_PED(ped);
	}

	void LUA_NATIVE_PED_SET_PED_NAME_DEBUG( Ped ped, const char* name )
	{
		PED::SET_PED_NAME_DEBUG(ped, name);
	}

	Vector3 LUA_NATIVE_PED_GET_PED_EXTRACTED_DISPLACEMENT( Ped ped, bool worldSpace )
	{
		auto retval = PED::GET_PED_EXTRACTED_DISPLACEMENT(ped, worldSpace);
		return retval;
	}

	void LUA_NATIVE_PED_SET_PED_DIES_WHEN_INJURED( Ped ped, bool toggle )
	{
		PED::SET_PED_DIES_WHEN_INJURED(ped, toggle);
	}

	void LUA_NATIVE_PED_SET_PED_ENABLE_WEAPON_BLOCKING( Ped ped, bool toggle )
	{
		PED::SET_PED_ENABLE_WEAPON_BLOCKING(ped, toggle);
	}

	void LUA_NATIVE_PED_SPECIAL_FUNCTION_DO_NOT_USE( Ped ped, bool p1 )
	{
		PED::SPECIAL_FUNCTION_DO_NOT_USE(ped, p1);
	}

	void LUA_NATIVE_PED_RESET_PED_VISIBLE_DAMAGE( Ped ped )
	{
		PED::RESET_PED_VISIBLE_DAMAGE(ped);
	}

	void LUA_NATIVE_PED_APPLY_PED_BLOOD_DAMAGE_BY_ZONE( Ped ped, Any p1, float p2, float p3, Any p4 )
	{
		PED::APPLY_PED_BLOOD_DAMAGE_BY_ZONE(ped, p1, p2, p3, p4);
	}

	void LUA_NATIVE_PED_APPLY_PED_BLOOD( Ped ped, int boneIndex, float xRot, float yRot, float zRot, const char* woundType )
	{
		PED::APPLY_PED_BLOOD(ped, boneIndex, xRot, yRot, zRot, woundType);
	}

	void LUA_NATIVE_PED_APPLY_PED_BLOOD_BY_ZONE( Ped ped, int p1, float p2, float p3, const char* p4 )
	{
		PED::APPLY_PED_BLOOD_BY_ZONE(ped, p1, p2, p3, p4);
	}

	void LUA_NATIVE_PED_APPLY_PED_BLOOD_SPECIFIC( Ped ped, int p1, float p2, float p3, float p4, float p5, int p6, float p7, const char* p8 )
	{
		PED::APPLY_PED_BLOOD_SPECIFIC(ped, p1, p2, p3, p4, p5, p6, p7, p8);
	}

	void LUA_NATIVE_PED_APPLY_PED_DAMAGE_DECAL( Ped ped, int damageZone, float xOffset, float yOffset, float heading, float scale, float alpha, int variation, bool fadeIn, const char* decalName )
	{
		PED::APPLY_PED_DAMAGE_DECAL(ped, damageZone, xOffset, yOffset, heading, scale, alpha, variation, fadeIn, decalName);
	}

	void LUA_NATIVE_PED_APPLY_PED_DAMAGE_PACK( Ped ped, const char* damagePack, float damage, float mult )
	{
		PED::APPLY_PED_DAMAGE_PACK(ped, damagePack, damage, mult);
	}

	void LUA_NATIVE_PED_CLEAR_PED_BLOOD_DAMAGE( Ped ped )
	{
		PED::CLEAR_PED_BLOOD_DAMAGE(ped);
	}

	void LUA_NATIVE_PED_CLEAR_PED_BLOOD_DAMAGE_BY_ZONE( Ped ped, int p1 )
	{
		PED::CLEAR_PED_BLOOD_DAMAGE_BY_ZONE(ped, p1);
	}

	void LUA_NATIVE_PED_HIDE_PED_BLOOD_DAMAGE_BY_ZONE( Ped ped, Any p1, bool p2 )
	{
		PED::HIDE_PED_BLOOD_DAMAGE_BY_ZONE(ped, p1, p2);
	}

	void LUA_NATIVE_PED_CLEAR_PED_DAMAGE_DECAL_BY_ZONE( Ped ped, int p1, const char* p2 )
	{
		PED::CLEAR_PED_DAMAGE_DECAL_BY_ZONE(ped, p1, p2);
	}

	int LUA_NATIVE_PED_GET_PED_DECORATIONS_STATE( Ped ped )
	{
		auto retval = PED::GET_PED_DECORATIONS_STATE(ped);
		return retval;
	}

	void LUA_NATIVE_PED_MARK_PED_DECORATIONS_AS_CLONED_FROM_LOCAL_PLAYER( Ped ped, bool p1 )
	{
		PED::MARK_PED_DECORATIONS_AS_CLONED_FROM_LOCAL_PLAYER(ped, p1);
	}

	void LUA_NATIVE_PED_CLEAR_PED_WETNESS( Ped ped )
	{
		PED::CLEAR_PED_WETNESS(ped);
	}

	void LUA_NATIVE_PED_SET_PED_WETNESS_HEIGHT( Ped ped, float height )
	{
		PED::SET_PED_WETNESS_HEIGHT(ped, height);
	}

	void LUA_NATIVE_PED_SET_PED_WETNESS_ENABLED_THIS_FRAME( Ped ped )
	{
		PED::SET_PED_WETNESS_ENABLED_THIS_FRAME(ped);
	}

	void LUA_NATIVE_PED_SET_PED_WETNESS( Ped ped, float wetLevel )
	{
		PED::SET_PED_WETNESS(ped, wetLevel);
	}

	void LUA_NATIVE_PED_CLEAR_PED_ENV_DIRT( Ped ped )
	{
		PED::CLEAR_PED_ENV_DIRT(ped);
	}

	void LUA_NATIVE_PED_SET_PED_SWEAT( Ped ped, float sweat )
	{
		PED::SET_PED_SWEAT(ped, sweat);
	}

	void LUA_NATIVE_PED_ADD_PED_DECORATION_FROM_HASHES( Ped ped, Hash collection, Hash overlay )
	{
		PED::ADD_PED_DECORATION_FROM_HASHES(ped, collection, overlay);
	}

	void LUA_NATIVE_PED_ADD_PED_DECORATION_FROM_HASHES_IN_CORONA( Ped ped, Hash collection, Hash overlay )
	{
		PED::ADD_PED_DECORATION_FROM_HASHES_IN_CORONA(ped, collection, overlay);
	}

	int LUA_NATIVE_PED_GET_PED_DECORATION_ZONE_FROM_HASHES( Hash collection, Hash overlay )
	{
		auto retval = PED::GET_PED_DECORATION_ZONE_FROM_HASHES(collection, overlay);
		return retval;
	}

	void LUA_NATIVE_PED_CLEAR_PED_DECORATIONS( Ped ped )
	{
		PED::CLEAR_PED_DECORATIONS(ped);
	}

	void LUA_NATIVE_PED_CLEAR_PED_DECORATIONS_LEAVE_SCARS( Ped ped )
	{
		PED::CLEAR_PED_DECORATIONS_LEAVE_SCARS(ped);
	}

	bool LUA_NATIVE_PED_WAS_PED_SKELETON_UPDATED( Ped ped )
	{
		auto retval = (bool)PED::WAS_PED_SKELETON_UPDATED(ped);
		return retval;
	}

	Vector3 LUA_NATIVE_PED_GET_PED_BONE_COORDS( Ped ped, int boneId, float offsetX, float offsetY, float offsetZ )
	{
		auto retval = PED::GET_PED_BONE_COORDS(ped, boneId, offsetX, offsetY, offsetZ);
		return retval;
	}

	void LUA_NATIVE_PED_CREATE_NM_MESSAGE( bool startImmediately, int messageId )
	{
		PED::CREATE_NM_MESSAGE(startImmediately, messageId);
	}

	void LUA_NATIVE_PED_GIVE_PED_NM_MESSAGE( Ped ped )
	{
		PED::GIVE_PED_NM_MESSAGE(ped);
	}

	int LUA_NATIVE_PED_ADD_SCENARIO_BLOCKING_AREA( float x1, float y1, float z1, float x2, float y2, float z2, bool p6, bool p7, bool p8, bool p9 )
	{
		auto retval = PED::ADD_SCENARIO_BLOCKING_AREA(x1, y1, z1, x2, y2, z2, p6, p7, p8, p9);
		return retval;
	}

	void LUA_NATIVE_PED_REMOVE_SCENARIO_BLOCKING_AREAS(  )
	{
		PED::REMOVE_SCENARIO_BLOCKING_AREAS();
	}

	void LUA_NATIVE_PED_REMOVE_SCENARIO_BLOCKING_AREA( Any p0, bool p1 )
	{
		PED::REMOVE_SCENARIO_BLOCKING_AREA(p0, p1);
	}

	void LUA_NATIVE_PED_SET_SCENARIO_PEDS_SPAWN_IN_SPHERE_AREA( float x, float y, float z, float range, int p4 )
	{
		PED::SET_SCENARIO_PEDS_SPAWN_IN_SPHERE_AREA(x, y, z, range, p4);
	}

	bool LUA_NATIVE_PED_DOES_SCENARIO_BLOCKING_AREA_EXISTS( float x1, float y1, float z1, float x2, float y2, float z2 )
	{
		auto retval = (bool)PED::DOES_SCENARIO_BLOCKING_AREA_EXISTS(x1, y1, z1, x2, y2, z2);
		return retval;
	}

	bool LUA_NATIVE_PED_IS_PED_USING_SCENARIO( Ped ped, const char* scenario )
	{
		auto retval = (bool)PED::IS_PED_USING_SCENARIO(ped, scenario);
		return retval;
	}

	bool LUA_NATIVE_PED_IS_PED_USING_ANY_SCENARIO( Ped ped )
	{
		auto retval = (bool)PED::IS_PED_USING_ANY_SCENARIO(ped);
		return retval;
	}

	bool LUA_NATIVE_PED_SET_PED_PANIC_EXIT_SCENARIO( Any p0, Any p1, Any p2, Any p3 )
	{
		auto retval = (bool)PED::SET_PED_PANIC_EXIT_SCENARIO(p0, p1, p2, p3);
		return retval;
	}

	void LUA_NATIVE_PED_TOGGLE_SCENARIO_PED_COWER_IN_PLACE( Ped ped, bool toggle )
	{
		PED::TOGGLE_SCENARIO_PED_COWER_IN_PLACE(ped, toggle);
	}

	bool LUA_NATIVE_PED_TRIGGER_PED_SCENARIO_PANICEXITTOFLEE( Any p0, Any p1, Any p2, Any p3 )
	{
		auto retval = (bool)PED::TRIGGER_PED_SCENARIO_PANICEXITTOFLEE(p0, p1, p2, p3);
		return retval;
	}

	bool LUA_NATIVE_PED_SET_PED_SHOULD_PLAY_DIRECTED_NORMAL_SCENARIO_EXIT( Any p0, Any p1, Any p2, Any p3 )
	{
		auto retval = (bool)PED::SET_PED_SHOULD_PLAY_DIRECTED_NORMAL_SCENARIO_EXIT(p0, p1, p2, p3);
		return retval;
	}

	void LUA_NATIVE_PED_SET_PED_SHOULD_PLAY_NORMAL_SCENARIO_EXIT( Ped ped )
	{
		PED::SET_PED_SHOULD_PLAY_NORMAL_SCENARIO_EXIT(ped);
	}

	void LUA_NATIVE_PED_SET_PED_SHOULD_PLAY_IMMEDIATE_SCENARIO_EXIT( Ped ped )
	{
		PED::SET_PED_SHOULD_PLAY_IMMEDIATE_SCENARIO_EXIT(ped);
	}

	bool LUA_NATIVE_PED_SET_PED_SHOULD_PLAY_FLEE_SCENARIO_EXIT( Ped ped, Any p1, Any p2, Any p3 )
	{
		auto retval = (bool)PED::SET_PED_SHOULD_PLAY_FLEE_SCENARIO_EXIT(ped, p1, p2, p3);
		return retval;
	}

	void LUA_NATIVE_PED_SET_PED_SHOULD_IGNORE_SCENARIO_EXIT_COLLISION_CHECKS( Ped ped, bool p1 )
	{
		PED::SET_PED_SHOULD_IGNORE_SCENARIO_EXIT_COLLISION_CHECKS(ped, p1);
	}

	void LUA_NATIVE_PED_SET_PED_SHOULD_IGNORE_SCENARIO_NAV_CHECKS( Any p0, bool p1 )
	{
		PED::SET_PED_SHOULD_IGNORE_SCENARIO_NAV_CHECKS(p0, p1);
	}

	void LUA_NATIVE_PED_SET_PED_SHOULD_PROBE_FOR_SCENARIO_EXITS_IN_ONE_FRAME( Any p0, bool p1 )
	{
		PED::SET_PED_SHOULD_PROBE_FOR_SCENARIO_EXITS_IN_ONE_FRAME(p0, p1);
	}

	bool LUA_NATIVE_PED_IS_PED_GESTURING( Any p0 )
	{
		auto retval = (bool)PED::IS_PED_GESTURING(p0);
		return retval;
	}

	void LUA_NATIVE_PED_RESET_FACIAL_IDLE_ANIM( Ped ped )
	{
		PED::RESET_FACIAL_IDLE_ANIM(ped);
	}

	void LUA_NATIVE_PED_PLAY_FACIAL_ANIM( Ped ped, const char* animName, const char* animDict )
	{
		PED::PLAY_FACIAL_ANIM(ped, animName, animDict);
	}

	void LUA_NATIVE_PED_SET_FACIAL_CLIPSET( Ped ped, const char* animDict )
	{
		PED::SET_FACIAL_CLIPSET(ped, animDict);
	}

	void LUA_NATIVE_PED_SET_FACIAL_IDLE_ANIM_OVERRIDE( Ped ped, const char* animName, const char* animDict )
	{
		PED::SET_FACIAL_IDLE_ANIM_OVERRIDE(ped, animName, animDict);
	}

	void LUA_NATIVE_PED_CLEAR_FACIAL_IDLE_ANIM_OVERRIDE( Ped ped )
	{
		PED::CLEAR_FACIAL_IDLE_ANIM_OVERRIDE(ped);
	}

	void LUA_NATIVE_PED_SET_PED_CAN_PLAY_GESTURE_ANIMS( Ped ped, bool toggle )
	{
		PED::SET_PED_CAN_PLAY_GESTURE_ANIMS(ped, toggle);
	}

	void LUA_NATIVE_PED_SET_PED_CAN_PLAY_VISEME_ANIMS( Ped ped, bool toggle, bool p2 )
	{
		PED::SET_PED_CAN_PLAY_VISEME_ANIMS(ped, toggle, p2);
	}

	void LUA_NATIVE_PED_SET_PED_IS_IGNORED_BY_AUTO_OPEN_DOORS( Ped ped, bool p1 )
	{
		PED::SET_PED_IS_IGNORED_BY_AUTO_OPEN_DOORS(ped, p1);
	}

	void LUA_NATIVE_PED_SET_PED_CAN_PLAY_AMBIENT_ANIMS( Ped ped, bool toggle )
	{
		PED::SET_PED_CAN_PLAY_AMBIENT_ANIMS(ped, toggle);
	}

	void LUA_NATIVE_PED_SET_PED_CAN_PLAY_AMBIENT_BASE_ANIMS( Ped ped, bool toggle )
	{
		PED::SET_PED_CAN_PLAY_AMBIENT_BASE_ANIMS(ped, toggle);
	}

	void LUA_NATIVE_PED_TRIGGER_IDLE_ANIMATION_ON_PED( Ped ped )
	{
		PED::TRIGGER_IDLE_ANIMATION_ON_PED(ped);
	}

	void LUA_NATIVE_PED_SET_PED_CAN_ARM_IK( Ped ped, bool toggle )
	{
		PED::SET_PED_CAN_ARM_IK(ped, toggle);
	}

	void LUA_NATIVE_PED_SET_PED_CAN_HEAD_IK( Ped ped, bool toggle )
	{
		PED::SET_PED_CAN_HEAD_IK(ped, toggle);
	}

	void LUA_NATIVE_PED_SET_PED_CAN_LEG_IK( Ped ped, bool toggle )
	{
		PED::SET_PED_CAN_LEG_IK(ped, toggle);
	}

	void LUA_NATIVE_PED_SET_PED_CAN_TORSO_IK( Ped ped, bool toggle )
	{
		PED::SET_PED_CAN_TORSO_IK(ped, toggle);
	}

	void LUA_NATIVE_PED_SET_PED_CAN_TORSO_REACT_IK( Ped ped, bool p1 )
	{
		PED::SET_PED_CAN_TORSO_REACT_IK(ped, p1);
	}

	void LUA_NATIVE_PED_SET_PED_CAN_TORSO_VEHICLE_IK( Ped ped, bool p1 )
	{
		PED::SET_PED_CAN_TORSO_VEHICLE_IK(ped, p1);
	}

	void LUA_NATIVE_PED_SET_PED_CAN_USE_AUTO_CONVERSATION_LOOKAT( Ped ped, bool toggle )
	{
		PED::SET_PED_CAN_USE_AUTO_CONVERSATION_LOOKAT(ped, toggle);
	}

	bool LUA_NATIVE_PED_IS_PED_HEADTRACKING_PED( Ped ped1, Ped ped2 )
	{
		auto retval = (bool)PED::IS_PED_HEADTRACKING_PED(ped1, ped2);
		return retval;
	}

	bool LUA_NATIVE_PED_IS_PED_HEADTRACKING_ENTITY( Ped ped, Entity entity )
	{
		auto retval = (bool)PED::IS_PED_HEADTRACKING_ENTITY(ped, entity);
		return retval;
	}

	void LUA_NATIVE_PED_SET_PED_PRIMARY_LOOKAT( Ped ped, Ped lookAt )
	{
		PED::SET_PED_PRIMARY_LOOKAT(ped, lookAt);
	}

	void LUA_NATIVE_PED_SET_PED_CLOTH_PIN_FRAMES( Any p0, Any p1 )
	{
		PED::SET_PED_CLOTH_PIN_FRAMES(p0, p1);
	}

	void LUA_NATIVE_PED_SET_PED_CLOTH_PACKAGE_INDEX( Any p0, Any p1 )
	{
		PED::SET_PED_CLOTH_PACKAGE_INDEX(p0, p1);
	}

	void LUA_NATIVE_PED_SET_PED_CLOTH_PRONE( Any p0, bool p1 )
	{
		PED::SET_PED_CLOTH_PRONE(p0, p1);
	}

	void LUA_NATIVE_PED_SET_PED_CONFIG_FLAG( Ped ped, int flagId, bool value )
	{
		PED::SET_PED_CONFIG_FLAG(ped, flagId, value);
	}

	void LUA_NATIVE_PED_SET_PED_RESET_FLAG( Ped ped, int flagId, bool doReset )
	{
		PED::SET_PED_RESET_FLAG(ped, flagId, doReset);
	}

	bool LUA_NATIVE_PED_GET_PED_CONFIG_FLAG( Ped ped, int flagId, bool p2 )
	{
		auto retval = (bool)PED::GET_PED_CONFIG_FLAG(ped, flagId, p2);
		return retval;
	}

	bool LUA_NATIVE_PED_GET_PED_RESET_FLAG( Ped ped, int flagId )
	{
		auto retval = (bool)PED::GET_PED_RESET_FLAG(ped, flagId);
		return retval;
	}

	void LUA_NATIVE_PED_SET_PED_GROUP_MEMBER_PASSENGER_INDEX( Ped ped, int index )
	{
		PED::SET_PED_GROUP_MEMBER_PASSENGER_INDEX(ped, index);
	}

	void LUA_NATIVE_PED_SET_PED_CAN_EVASIVE_DIVE( Ped ped, bool toggle )
	{
		PED::SET_PED_CAN_EVASIVE_DIVE(ped, toggle);
	}

	std::tuple<bool, Entity> LUA_NATIVE_PED_IS_PED_EVASIVE_DIVING( Ped ped, Entity evadingEntity )
	{
		std::tuple<bool, Entity> return_values;
		std::get<0>(return_values) = (bool)PED::IS_PED_EVASIVE_DIVING(ped, &evadingEntity);
		std::get<1>(return_values) = evadingEntity;

		return return_values;
	}

	void LUA_NATIVE_PED_SET_PED_SHOOTS_AT_COORD( Ped ped, float x, float y, float z, bool toggle )
	{
		PED::SET_PED_SHOOTS_AT_COORD(ped, x, y, z, toggle);
	}

	void LUA_NATIVE_PED_SET_PED_MODEL_IS_SUPPRESSED( Hash modelHash, bool toggle )
	{
		PED::SET_PED_MODEL_IS_SUPPRESSED(modelHash, toggle);
	}

	void LUA_NATIVE_PED_STOP_ANY_PED_MODEL_BEING_SUPPRESSED(  )
	{
		PED::STOP_ANY_PED_MODEL_BEING_SUPPRESSED();
	}

	void LUA_NATIVE_PED_SET_PED_CAN_BE_TARGETED_WHEN_INJURED( Ped ped, bool toggle )
	{
		PED::SET_PED_CAN_BE_TARGETED_WHEN_INJURED(ped, toggle);
	}

	void LUA_NATIVE_PED_SET_PED_GENERATES_DEAD_BODY_EVENTS( Ped ped, bool toggle )
	{
		PED::SET_PED_GENERATES_DEAD_BODY_EVENTS(ped, toggle);
	}

	void LUA_NATIVE_PED_BLOCK_PED_FROM_GENERATING_DEAD_BODY_EVENTS_WHEN_DEAD( Ped ped, bool toggle )
	{
		PED::BLOCK_PED_FROM_GENERATING_DEAD_BODY_EVENTS_WHEN_DEAD(ped, toggle);
	}

	void LUA_NATIVE_PED_SET_PED_WILL_ONLY_ATTACK_WANTED_PLAYER( Any p0, Any p1 )
	{
		PED::SET_PED_WILL_ONLY_ATTACK_WANTED_PLAYER(p0, p1);
	}

	void LUA_NATIVE_PED_SET_PED_CAN_RAGDOLL_FROM_PLAYER_IMPACT( Ped ped, bool toggle )
	{
		PED::SET_PED_CAN_RAGDOLL_FROM_PLAYER_IMPACT(ped, toggle);
	}

	void LUA_NATIVE_PED_GIVE_PED_HELMET( Ped ped, bool cannotRemove, int helmetFlag, int textureIndex )
	{
		PED::GIVE_PED_HELMET(ped, cannotRemove, helmetFlag, textureIndex);
	}

	void LUA_NATIVE_PED_REMOVE_PED_HELMET( Ped ped, bool instantly )
	{
		PED::REMOVE_PED_HELMET(ped, instantly);
	}

	bool LUA_NATIVE_PED_IS_PED_TAKING_OFF_HELMET( Ped ped )
	{
		auto retval = (bool)PED::IS_PED_TAKING_OFF_HELMET(ped);
		return retval;
	}

	void LUA_NATIVE_PED_SET_PED_HELMET( Ped ped, bool canWearHelmet )
	{
		PED::SET_PED_HELMET(ped, canWearHelmet);
	}

	void LUA_NATIVE_PED_SET_PED_HELMET_FLAG( Ped ped, int helmetFlag )
	{
		PED::SET_PED_HELMET_FLAG(ped, helmetFlag);
	}

	void LUA_NATIVE_PED_SET_PED_HELMET_PROP_INDEX( Ped ped, int propIndex, bool p2 )
	{
		PED::SET_PED_HELMET_PROP_INDEX(ped, propIndex, p2);
	}

	void LUA_NATIVE_PED_SET_PED_HELMET_VISOR_PROP_INDICES( Ped ped, bool p1, int p2, int p3 )
	{
		PED::SET_PED_HELMET_VISOR_PROP_INDICES(ped, p1, p2, p3);
	}

	bool LUA_NATIVE_PED_IS_PED_HELMET_VISOR_UP( Ped ped )
	{
		auto retval = (bool)PED::IS_PED_HELMET_VISOR_UP(ped);
		return retval;
	}

	void LUA_NATIVE_PED_SET_PED_HELMET_TEXTURE_INDEX( Ped ped, int textureIndex )
	{
		PED::SET_PED_HELMET_TEXTURE_INDEX(ped, textureIndex);
	}

	bool LUA_NATIVE_PED_IS_PED_WEARING_HELMET( Ped ped )
	{
		auto retval = (bool)PED::IS_PED_WEARING_HELMET(ped);
		return retval;
	}

	void LUA_NATIVE_PED_CLEAR_PED_STORED_HAT_PROP( Ped ped )
	{
		PED::CLEAR_PED_STORED_HAT_PROP(ped);
	}

	int LUA_NATIVE_PED_GET_PED_HELMET_STORED_HAT_PROP_INDEX( Ped ped )
	{
		auto retval = PED::GET_PED_HELMET_STORED_HAT_PROP_INDEX(ped);
		return retval;
	}

	int LUA_NATIVE_PED_GET_PED_HELMET_STORED_HAT_TEX_INDEX( Ped ped )
	{
		auto retval = PED::GET_PED_HELMET_STORED_HAT_TEX_INDEX(ped);
		return retval;
	}

	bool LUA_NATIVE_PED_IS_CURRENT_HEAD_PROP_A_HELMET( Any p0 )
	{
		auto retval = (bool)PED::IS_CURRENT_HEAD_PROP_A_HELMET(p0);
		return retval;
	}

	void LUA_NATIVE_PED_SET_PED_TO_LOAD_COVER( Ped ped, bool toggle )
	{
		PED::SET_PED_TO_LOAD_COVER(ped, toggle);
	}

	void LUA_NATIVE_PED_SET_PED_CAN_COWER_IN_COVER( Ped ped, bool toggle )
	{
		PED::SET_PED_CAN_COWER_IN_COVER(ped, toggle);
	}

	void LUA_NATIVE_PED_SET_PED_CAN_PEEK_IN_COVER( Ped ped, bool toggle )
	{
		PED::SET_PED_CAN_PEEK_IN_COVER(ped, toggle);
	}

	void LUA_NATIVE_PED_SET_PED_PLAYS_HEAD_ON_HORN_ANIM_WHEN_DIES_IN_VEHICLE( Ped ped, bool toggle )
	{
		PED::SET_PED_PLAYS_HEAD_ON_HORN_ANIM_WHEN_DIES_IN_VEHICLE(ped, toggle);
	}

	void LUA_NATIVE_PED_SET_PED_LEG_IK_MODE( Ped ped, int mode )
	{
		PED::SET_PED_LEG_IK_MODE(ped, mode);
	}

	void LUA_NATIVE_PED_SET_PED_MOTION_BLUR( Ped ped, bool toggle )
	{
		PED::SET_PED_MOTION_BLUR(ped, toggle);
	}

	void LUA_NATIVE_PED_SET_PED_CAN_SWITCH_WEAPON( Ped ped, bool toggle )
	{
		PED::SET_PED_CAN_SWITCH_WEAPON(ped, toggle);
	}

	void LUA_NATIVE_PED_SET_PED_DIES_INSTANTLY_IN_WATER( Ped ped, bool toggle )
	{
		PED::SET_PED_DIES_INSTANTLY_IN_WATER(ped, toggle);
	}

	void LUA_NATIVE_PED_SET_LADDER_CLIMB_INPUT_STATE( Ped ped, int p1 )
	{
		PED::SET_LADDER_CLIMB_INPUT_STATE(ped, p1);
	}

	void LUA_NATIVE_PED_STOP_PED_WEAPON_FIRING_WHEN_DROPPED( Ped ped )
	{
		PED::STOP_PED_WEAPON_FIRING_WHEN_DROPPED(ped);
	}

	void LUA_NATIVE_PED_SET_SCRIPTED_ANIM_SEAT_OFFSET( Ped ped, float p1 )
	{
		PED::SET_SCRIPTED_ANIM_SEAT_OFFSET(ped, p1);
	}

	void LUA_NATIVE_PED_SET_PED_COMBAT_MOVEMENT( Ped ped, int combatMovement )
	{
		PED::SET_PED_COMBAT_MOVEMENT(ped, combatMovement);
	}

	int LUA_NATIVE_PED_GET_PED_COMBAT_MOVEMENT( Ped ped )
	{
		auto retval = PED::GET_PED_COMBAT_MOVEMENT(ped);
		return retval;
	}

	void LUA_NATIVE_PED_SET_PED_COMBAT_ABILITY( Ped ped, int abilityLevel )
	{
		PED::SET_PED_COMBAT_ABILITY(ped, abilityLevel);
	}

	void LUA_NATIVE_PED_SET_PED_COMBAT_RANGE( Ped ped, int combatRange )
	{
		PED::SET_PED_COMBAT_RANGE(ped, combatRange);
	}

	int LUA_NATIVE_PED_GET_PED_COMBAT_RANGE( Ped ped )
	{
		auto retval = PED::GET_PED_COMBAT_RANGE(ped);
		return retval;
	}

	void LUA_NATIVE_PED_SET_PED_COMBAT_ATTRIBUTES( Ped ped, int attributeId, bool enabled )
	{
		PED::SET_PED_COMBAT_ATTRIBUTES(ped, attributeId, enabled);
	}

	void LUA_NATIVE_PED_SET_PED_TARGET_LOSS_RESPONSE( Ped ped, int responseType )
	{
		PED::SET_PED_TARGET_LOSS_RESPONSE(ped, responseType);
	}

	bool LUA_NATIVE_PED_IS_PED_PERFORMING_MELEE_ACTION( Ped ped )
	{
		auto retval = (bool)PED::IS_PED_PERFORMING_MELEE_ACTION(ped);
		return retval;
	}

	bool LUA_NATIVE_PED_IS_PED_PERFORMING_STEALTH_KILL( Ped ped )
	{
		auto retval = (bool)PED::IS_PED_PERFORMING_STEALTH_KILL(ped);
		return retval;
	}

	bool LUA_NATIVE_PED_IS_PED_PERFORMING_A_COUNTER_ATTACK( Ped ped )
	{
		auto retval = (bool)PED::IS_PED_PERFORMING_A_COUNTER_ATTACK(ped);
		return retval;
	}

	bool LUA_NATIVE_PED_IS_PED_BEING_STEALTH_KILLED( Ped ped )
	{
		auto retval = (bool)PED::IS_PED_BEING_STEALTH_KILLED(ped);
		return retval;
	}

	Ped LUA_NATIVE_PED_GET_MELEE_TARGET_FOR_PED( Ped ped )
	{
		auto retval = PED::GET_MELEE_TARGET_FOR_PED(ped);
		return retval;
	}

	bool LUA_NATIVE_PED_WAS_PED_KILLED_BY_STEALTH( Ped ped )
	{
		auto retval = (bool)PED::WAS_PED_KILLED_BY_STEALTH(ped);
		return retval;
	}

	bool LUA_NATIVE_PED_WAS_PED_KILLED_BY_TAKEDOWN( Ped ped )
	{
		auto retval = (bool)PED::WAS_PED_KILLED_BY_TAKEDOWN(ped);
		return retval;
	}

	bool LUA_NATIVE_PED_WAS_PED_KNOCKED_OUT( Ped ped )
	{
		auto retval = (bool)PED::WAS_PED_KNOCKED_OUT(ped);
		return retval;
	}

	void LUA_NATIVE_PED_SET_PED_FLEE_ATTRIBUTES( Ped ped, int attributeFlags, bool enable )
	{
		PED::SET_PED_FLEE_ATTRIBUTES(ped, attributeFlags, enable);
	}

	void LUA_NATIVE_PED_SET_PED_COWER_HASH( Ped ped, const char* p1 )
	{
		PED::SET_PED_COWER_HASH(ped, p1);
	}

	void LUA_NATIVE_PED_SET_PED_STEERS_AROUND_DEAD_BODIES( Ped ped, bool toggle )
	{
		PED::SET_PED_STEERS_AROUND_DEAD_BODIES(ped, toggle);
	}

	void LUA_NATIVE_PED_SET_PED_STEERS_AROUND_PEDS( Ped ped, bool toggle )
	{
		PED::SET_PED_STEERS_AROUND_PEDS(ped, toggle);
	}

	void LUA_NATIVE_PED_SET_PED_STEERS_AROUND_OBJECTS( Ped ped, bool toggle )
	{
		PED::SET_PED_STEERS_AROUND_OBJECTS(ped, toggle);
	}

	void LUA_NATIVE_PED_SET_PED_STEERS_AROUND_VEHICLES( Ped ped, bool toggle )
	{
		PED::SET_PED_STEERS_AROUND_VEHICLES(ped, toggle);
	}

	void LUA_NATIVE_PED_SET_PED_IS_AVOIDED_BY_OTHERS( Any p0, bool p1 )
	{
		PED::SET_PED_IS_AVOIDED_BY_OTHERS(p0, p1);
	}

	void LUA_NATIVE_PED_SET_PED_INCREASED_AVOIDANCE_RADIUS( Ped ped )
	{
		PED::SET_PED_INCREASED_AVOIDANCE_RADIUS(ped);
	}

	void LUA_NATIVE_PED_SET_PED_BLOCKS_PATHING_WHEN_DEAD( Ped ped, bool toggle )
	{
		PED::SET_PED_BLOCKS_PATHING_WHEN_DEAD(ped, toggle);
	}

	void LUA_NATIVE_PED_SET_PED_NO_TIME_DELAY_BEFORE_SHOT( Any p0 )
	{
		PED::SET_PED_NO_TIME_DELAY_BEFORE_SHOT(p0);
	}

	bool LUA_NATIVE_PED_IS_ANY_PED_NEAR_POINT( float x, float y, float z, float radius )
	{
		auto retval = (bool)PED::IS_ANY_PED_NEAR_POINT(x, y, z, radius);
		return retval;
	}

	void LUA_NATIVE_PED_FORCE_PED_AI_AND_ANIMATION_UPDATE( Ped ped, bool p1, bool p2 )
	{
		PED::FORCE_PED_AI_AND_ANIMATION_UPDATE(ped, p1, p2);
	}

	bool LUA_NATIVE_PED_IS_PED_HEADING_TOWARDS_POSITION( Ped ped, float x, float y, float z, float p4 )
	{
		auto retval = (bool)PED::IS_PED_HEADING_TOWARDS_POSITION(ped, x, y, z, p4);
		return retval;
	}

	void LUA_NATIVE_PED_REQUEST_PED_VISIBILITY_TRACKING( Ped ped )
	{
		PED::REQUEST_PED_VISIBILITY_TRACKING(ped);
	}

	void LUA_NATIVE_PED_REQUEST_PED_VEHICLE_VISIBILITY_TRACKING( Ped ped, bool p1 )
	{
		PED::REQUEST_PED_VEHICLE_VISIBILITY_TRACKING(ped, p1);
	}

	void LUA_NATIVE_PED_REQUEST_PED_RESTRICTED_VEHICLE_VISIBILITY_TRACKING( Ped ped, bool p1 )
	{
		PED::REQUEST_PED_RESTRICTED_VEHICLE_VISIBILITY_TRACKING(ped, p1);
	}

	void LUA_NATIVE_PED_REQUEST_PED_USE_SMALL_BBOX_VISIBILITY_TRACKING( Ped ped, bool p1 )
	{
		PED::REQUEST_PED_USE_SMALL_BBOX_VISIBILITY_TRACKING(ped, p1);
	}

	bool LUA_NATIVE_PED_IS_TRACKED_PED_VISIBLE( Ped ped )
	{
		auto retval = (bool)PED::IS_TRACKED_PED_VISIBLE(ped);
		return retval;
	}

	int LUA_NATIVE_PED_GET_TRACKED_PED_PIXELCOUNT( Ped ped )
	{
		auto retval = PED::GET_TRACKED_PED_PIXELCOUNT(ped);
		return retval;
	}

	bool LUA_NATIVE_PED_IS_PED_TRACKED( Ped ped )
	{
		auto retval = (bool)PED::IS_PED_TRACKED(ped);
		return retval;
	}

	bool LUA_NATIVE_PED_HAS_PED_RECEIVED_EVENT( Ped ped, int eventId )
	{
		auto retval = (bool)PED::HAS_PED_RECEIVED_EVENT(ped, eventId);
		return retval;
	}

	bool LUA_NATIVE_PED_CAN_PED_SEE_HATED_PED( Ped ped1, Ped ped2 )
	{
		auto retval = (bool)PED::CAN_PED_SEE_HATED_PED(ped1, ped2);
		return retval;
	}

	std::tuple<bool, int> LUA_NATIVE_PED_CAN_PED_SHUFFLE_TO_OR_FROM_TURRET_SEAT( Ped ped, int p1 )
	{
		std::tuple<bool, int> return_values;
		std::get<0>(return_values) = (bool)PED::CAN_PED_SHUFFLE_TO_OR_FROM_TURRET_SEAT(ped, &p1);
		std::get<1>(return_values) = p1;

		return return_values;
	}

	std::tuple<bool, int> LUA_NATIVE_PED_CAN_PED_SHUFFLE_TO_OR_FROM_EXTRA_SEAT( Ped ped, int p1 )
	{
		std::tuple<bool, int> return_values;
		std::get<0>(return_values) = (bool)PED::CAN_PED_SHUFFLE_TO_OR_FROM_EXTRA_SEAT(ped, &p1);
		std::get<1>(return_values) = p1;

		return return_values;
	}

	int LUA_NATIVE_PED_GET_PED_BONE_INDEX( Ped ped, int boneId )
	{
		auto retval = PED::GET_PED_BONE_INDEX(ped, boneId);
		return retval;
	}

	int LUA_NATIVE_PED_GET_PED_RAGDOLL_BONE_INDEX( Ped ped, int bone )
	{
		auto retval = PED::GET_PED_RAGDOLL_BONE_INDEX(ped, bone);
		return retval;
	}

	void LUA_NATIVE_PED_SET_PED_ENVEFF_SCALE( Ped ped, float value )
	{
		PED::SET_PED_ENVEFF_SCALE(ped, value);
	}

	float LUA_NATIVE_PED_GET_PED_ENVEFF_SCALE( Ped ped )
	{
		auto retval = PED::GET_PED_ENVEFF_SCALE(ped);
		return retval;
	}

	void LUA_NATIVE_PED_SET_ENABLE_PED_ENVEFF_SCALE( Ped ped, bool toggle )
	{
		PED::SET_ENABLE_PED_ENVEFF_SCALE(ped, toggle);
	}

	void LUA_NATIVE_PED_SET_PED_ENVEFF_CPV_ADD( Ped ped, float p1 )
	{
		PED::SET_PED_ENVEFF_CPV_ADD(ped, p1);
	}

	void LUA_NATIVE_PED_SET_PED_ENVEFF_COLOR_MODULATOR( Ped ped, int p1, int p2, int p3 )
	{
		PED::SET_PED_ENVEFF_COLOR_MODULATOR(ped, p1, p2, p3);
	}

	void LUA_NATIVE_PED_SET_PED_EMISSIVE_SCALE( Ped ped, float intensity )
	{
		PED::SET_PED_EMISSIVE_SCALE(ped, intensity);
	}

	float LUA_NATIVE_PED_GET_PED_EMISSIVE_SCALE( Ped ped )
	{
		auto retval = PED::GET_PED_EMISSIVE_SCALE(ped);
		return retval;
	}

	bool LUA_NATIVE_PED_IS_PED_SHADER_READY( Ped ped )
	{
		auto retval = (bool)PED::IS_PED_SHADER_READY(ped);
		return retval;
	}

	void LUA_NATIVE_PED_SET_PED_ENABLE_CREW_EMBLEM( Ped ped, bool toggle )
	{
		PED::SET_PED_ENABLE_CREW_EMBLEM(ped, toggle);
	}

	void LUA_NATIVE_PED_REQUEST_RAGDOLL_BOUNDS_UPDATE( Any p0, Any p1 )
	{
		PED::REQUEST_RAGDOLL_BOUNDS_UPDATE(p0, p1);
	}

	void LUA_NATIVE_PED_SET_PED_AO_BLOB_RENDERING( Ped ped, bool toggle )
	{
		PED::SET_PED_AO_BLOB_RENDERING(ped, toggle);
	}

	bool LUA_NATIVE_PED_IS_PED_SHELTERED( Ped ped )
	{
		auto retval = (bool)PED::IS_PED_SHELTERED(ped);
		return retval;
	}

	int LUA_NATIVE_PED_CREATE_SYNCHRONIZED_SCENE( float x, float y, float z, float roll, float pitch, float yaw, int p6 )
	{
		auto retval = PED::CREATE_SYNCHRONIZED_SCENE(x, y, z, roll, pitch, yaw, p6);
		return retval;
	}

	int LUA_NATIVE_PED_CREATE_SYNCHRONIZED_SCENE_AT_MAP_OBJECT( float x, float y, float z, float radius, Hash object )
	{
		auto retval = PED::CREATE_SYNCHRONIZED_SCENE_AT_MAP_OBJECT(x, y, z, radius, object);
		return retval;
	}

	bool LUA_NATIVE_PED_IS_SYNCHRONIZED_SCENE_RUNNING( int sceneId )
	{
		auto retval = (bool)PED::IS_SYNCHRONIZED_SCENE_RUNNING(sceneId);
		return retval;
	}

	void LUA_NATIVE_PED_SET_SYNCHRONIZED_SCENE_ORIGIN( int sceneID, float x, float y, float z, float roll, float pitch, float yaw, bool p7 )
	{
		PED::SET_SYNCHRONIZED_SCENE_ORIGIN(sceneID, x, y, z, roll, pitch, yaw, p7);
	}

	void LUA_NATIVE_PED_SET_SYNCHRONIZED_SCENE_PHASE( int sceneID, float phase )
	{
		PED::SET_SYNCHRONIZED_SCENE_PHASE(sceneID, phase);
	}

	float LUA_NATIVE_PED_GET_SYNCHRONIZED_SCENE_PHASE( int sceneID )
	{
		auto retval = PED::GET_SYNCHRONIZED_SCENE_PHASE(sceneID);
		return retval;
	}

	void LUA_NATIVE_PED_SET_SYNCHRONIZED_SCENE_RATE( int sceneID, float rate )
	{
		PED::SET_SYNCHRONIZED_SCENE_RATE(sceneID, rate);
	}

	float LUA_NATIVE_PED_GET_SYNCHRONIZED_SCENE_RATE( int sceneID )
	{
		auto retval = PED::GET_SYNCHRONIZED_SCENE_RATE(sceneID);
		return retval;
	}

	void LUA_NATIVE_PED_SET_SYNCHRONIZED_SCENE_LOOPED( int sceneID, bool toggle )
	{
		PED::SET_SYNCHRONIZED_SCENE_LOOPED(sceneID, toggle);
	}

	bool LUA_NATIVE_PED_IS_SYNCHRONIZED_SCENE_LOOPED( int sceneID )
	{
		auto retval = (bool)PED::IS_SYNCHRONIZED_SCENE_LOOPED(sceneID);
		return retval;
	}

	void LUA_NATIVE_PED_SET_SYNCHRONIZED_SCENE_HOLD_LAST_FRAME( int sceneID, bool toggle )
	{
		PED::SET_SYNCHRONIZED_SCENE_HOLD_LAST_FRAME(sceneID, toggle);
	}

	bool LUA_NATIVE_PED_IS_SYNCHRONIZED_SCENE_HOLD_LAST_FRAME( int sceneID )
	{
		auto retval = (bool)PED::IS_SYNCHRONIZED_SCENE_HOLD_LAST_FRAME(sceneID);
		return retval;
	}

	void LUA_NATIVE_PED_ATTACH_SYNCHRONIZED_SCENE_TO_ENTITY( int sceneID, Entity entity, int boneIndex )
	{
		PED::ATTACH_SYNCHRONIZED_SCENE_TO_ENTITY(sceneID, entity, boneIndex);
	}

	void LUA_NATIVE_PED_DETACH_SYNCHRONIZED_SCENE( int sceneID )
	{
		PED::DETACH_SYNCHRONIZED_SCENE(sceneID);
	}

	void LUA_NATIVE_PED_TAKE_OWNERSHIP_OF_SYNCHRONIZED_SCENE( int scene )
	{
		PED::TAKE_OWNERSHIP_OF_SYNCHRONIZED_SCENE(scene);
	}

	bool LUA_NATIVE_PED_FORCE_PED_MOTION_STATE( Ped ped, Hash motionStateHash, bool p2, int p3, bool p4 )
	{
		auto retval = (bool)PED::FORCE_PED_MOTION_STATE(ped, motionStateHash, p2, p3, p4);
		return retval;
	}

	std::tuple<bool, float, float> LUA_NATIVE_PED_GET_PED_CURRENT_MOVE_BLEND_RATIO( Ped ped, float speedX, float speedY )
	{
		std::tuple<bool, float, float> return_values;
		std::get<0>(return_values) = (bool)PED::GET_PED_CURRENT_MOVE_BLEND_RATIO(ped, &speedX, &speedY);
		std::get<1>(return_values) = speedX;
		std::get<2>(return_values) = speedY;

		return return_values;
	}

	void LUA_NATIVE_PED_SET_PED_MAX_MOVE_BLEND_RATIO( Ped ped, float value )
	{
		PED::SET_PED_MAX_MOVE_BLEND_RATIO(ped, value);
	}

	void LUA_NATIVE_PED_SET_PED_MIN_MOVE_BLEND_RATIO( Ped ped, float value )
	{
		PED::SET_PED_MIN_MOVE_BLEND_RATIO(ped, value);
	}

	void LUA_NATIVE_PED_SET_PED_MOVE_RATE_OVERRIDE( Ped ped, float value )
	{
		PED::SET_PED_MOVE_RATE_OVERRIDE(ped, value);
	}

	void LUA_NATIVE_PED_SET_PED_MOVE_RATE_IN_WATER_OVERRIDE( Ped ped, float p1 )
	{
		PED::SET_PED_MOVE_RATE_IN_WATER_OVERRIDE(ped, p1);
	}

	bool LUA_NATIVE_PED_PED_HAS_SEXINESS_FLAG_SET( Ped ped, int sexinessFlag )
	{
		auto retval = (bool)PED::PED_HAS_SEXINESS_FLAG_SET(ped, sexinessFlag);
		return retval;
	}

	std::tuple<int, Any> LUA_NATIVE_PED_GET_PED_NEARBY_VEHICLES( Ped ped, Any sizeAndVehs )
	{
		std::tuple<int, Any> return_values;
		std::get<0>(return_values) = PED::GET_PED_NEARBY_VEHICLES(ped, &sizeAndVehs);
		std::get<1>(return_values) = sizeAndVehs;

		return return_values;
	}

	std::tuple<int, Any> LUA_NATIVE_PED_GET_PED_NEARBY_PEDS( Ped ped, Any sizeAndPeds, int ignore )
	{
		std::tuple<int, Any> return_values;
		std::get<0>(return_values) = PED::GET_PED_NEARBY_PEDS(ped, &sizeAndPeds, ignore);
		std::get<1>(return_values) = sizeAndPeds;

		return return_values;
	}

	bool LUA_NATIVE_PED_HAVE_ALL_STREAMING_REQUESTS_COMPLETED( Ped ped )
	{
		auto retval = (bool)PED::HAVE_ALL_STREAMING_REQUESTS_COMPLETED(ped);
		return retval;
	}

	bool LUA_NATIVE_PED_IS_PED_USING_ACTION_MODE( Ped ped )
	{
		auto retval = (bool)PED::IS_PED_USING_ACTION_MODE(ped);
		return retval;
	}

	void LUA_NATIVE_PED_SET_PED_USING_ACTION_MODE( Ped ped, bool p1, int p2, const char* action )
	{
		PED::SET_PED_USING_ACTION_MODE(ped, p1, p2, action);
	}

	void LUA_NATIVE_PED_SET_MOVEMENT_MODE_OVERRIDE( Ped ped, const char* name )
	{
		PED::SET_MOVEMENT_MODE_OVERRIDE(ped, name);
	}

	void LUA_NATIVE_PED_SET_PED_CAPSULE( Ped ped, float value )
	{
		PED::SET_PED_CAPSULE(ped, value);
	}

	int LUA_NATIVE_PED_REGISTER_PEDHEADSHOT( Ped ped )
	{
		auto retval = PED::REGISTER_PEDHEADSHOT(ped);
		return retval;
	}

	int LUA_NATIVE_PED_REGISTER_PEDHEADSHOT_HIRES( Ped ped )
	{
		auto retval = PED::REGISTER_PEDHEADSHOT_HIRES(ped);
		return retval;
	}

	int LUA_NATIVE_PED_REGISTER_PEDHEADSHOT_TRANSPARENT( Ped ped )
	{
		auto retval = PED::REGISTER_PEDHEADSHOT_TRANSPARENT(ped);
		return retval;
	}

	void LUA_NATIVE_PED_UNREGISTER_PEDHEADSHOT( int id )
	{
		PED::UNREGISTER_PEDHEADSHOT(id);
	}

	bool LUA_NATIVE_PED_IS_PEDHEADSHOT_VALID( int id )
	{
		auto retval = (bool)PED::IS_PEDHEADSHOT_VALID(id);
		return retval;
	}

	bool LUA_NATIVE_PED_IS_PEDHEADSHOT_READY( int id )
	{
		auto retval = (bool)PED::IS_PEDHEADSHOT_READY(id);
		return retval;
	}

	const char* LUA_NATIVE_PED_GET_PEDHEADSHOT_TXD_STRING( int id )
	{
		auto retval = PED::GET_PEDHEADSHOT_TXD_STRING(id);
		return retval;
	}

	bool LUA_NATIVE_PED_REQUEST_PEDHEADSHOT_IMG_UPLOAD( int id )
	{
		auto retval = (bool)PED::REQUEST_PEDHEADSHOT_IMG_UPLOAD(id);
		return retval;
	}

	void LUA_NATIVE_PED_RELEASE_PEDHEADSHOT_IMG_UPLOAD( int id )
	{
		PED::RELEASE_PEDHEADSHOT_IMG_UPLOAD(id);
	}

	bool LUA_NATIVE_PED_IS_PEDHEADSHOT_IMG_UPLOAD_AVAILABLE(  )
	{
		auto retval = (bool)PED::IS_PEDHEADSHOT_IMG_UPLOAD_AVAILABLE();
		return retval;
	}

	bool LUA_NATIVE_PED_HAS_PEDHEADSHOT_IMG_UPLOAD_FAILED(  )
	{
		auto retval = (bool)PED::HAS_PEDHEADSHOT_IMG_UPLOAD_FAILED();
		return retval;
	}

	bool LUA_NATIVE_PED_HAS_PEDHEADSHOT_IMG_UPLOAD_SUCCEEDED(  )
	{
		auto retval = (bool)PED::HAS_PEDHEADSHOT_IMG_UPLOAD_SUCCEEDED();
		return retval;
	}

	void LUA_NATIVE_PED_SET_PED_HEATSCALE_OVERRIDE( Ped ped, float heatScale )
	{
		PED::SET_PED_HEATSCALE_OVERRIDE(ped, heatScale);
	}

	void LUA_NATIVE_PED_DISABLE_PED_HEATSCALE_OVERRIDE( Ped ped )
	{
		PED::DISABLE_PED_HEATSCALE_OVERRIDE(ped);
	}

	void LUA_NATIVE_PED_SPAWNPOINTS_START_SEARCH( float p0, float p1, float p2, float p3, float p4, int interiorFlags, float scale, int duration )
	{
		PED::SPAWNPOINTS_START_SEARCH(p0, p1, p2, p3, p4, interiorFlags, scale, duration);
	}

	void LUA_NATIVE_PED_SPAWNPOINTS_START_SEARCH_IN_ANGLED_AREA( float x1, float y1, float z1, float x2, float y2, float z2, float width, int interiorFlags, float scale, int duration )
	{
		PED::SPAWNPOINTS_START_SEARCH_IN_ANGLED_AREA(x1, y1, z1, x2, y2, z2, width, interiorFlags, scale, duration);
	}

	void LUA_NATIVE_PED_SPAWNPOINTS_CANCEL_SEARCH(  )
	{
		PED::SPAWNPOINTS_CANCEL_SEARCH();
	}

	bool LUA_NATIVE_PED_SPAWNPOINTS_IS_SEARCH_ACTIVE(  )
	{
		auto retval = (bool)PED::SPAWNPOINTS_IS_SEARCH_ACTIVE();
		return retval;
	}

	bool LUA_NATIVE_PED_SPAWNPOINTS_IS_SEARCH_COMPLETE(  )
	{
		auto retval = (bool)PED::SPAWNPOINTS_IS_SEARCH_COMPLETE();
		return retval;
	}

	bool LUA_NATIVE_PED_SPAWNPOINTS_IS_SEARCH_FAILED(  )
	{
		auto retval = (bool)PED::SPAWNPOINTS_IS_SEARCH_FAILED();
		return retval;
	}

	int LUA_NATIVE_PED_SPAWNPOINTS_GET_NUM_SEARCH_RESULTS(  )
	{
		auto retval = PED::SPAWNPOINTS_GET_NUM_SEARCH_RESULTS();
		return retval;
	}

	std::tuple<float, float, float> LUA_NATIVE_PED_SPAWNPOINTS_GET_SEARCH_RESULT( int randomInt, float x, float y, float z )
	{
		std::tuple<float, float, float> return_values;
		PED::SPAWNPOINTS_GET_SEARCH_RESULT(randomInt, &x, &y, &z);
		std::get<0>(return_values) = x;
		std::get<1>(return_values) = y;
		std::get<2>(return_values) = z;

		return return_values;
	}

	int LUA_NATIVE_PED_SPAWNPOINTS_GET_SEARCH_RESULT_FLAGS( int p0, int p1 )
	{
		PED::SPAWNPOINTS_GET_SEARCH_RESULT_FLAGS(p0, &p1);
		return p1;
	}

	void LUA_NATIVE_PED_SET_IK_TARGET( Ped ped, int ikIndex, Entity entityLookAt, int boneLookAt, float offsetX, float offsetY, float offsetZ, Any p7, int blendInDuration, int blendOutDuration )
	{
		PED::SET_IK_TARGET(ped, ikIndex, entityLookAt, boneLookAt, offsetX, offsetY, offsetZ, p7, blendInDuration, blendOutDuration);
	}

	void LUA_NATIVE_PED_FORCE_INSTANT_LEG_IK_SETUP( Ped ped )
	{
		PED::FORCE_INSTANT_LEG_IK_SETUP(ped);
	}

	void LUA_NATIVE_PED_REQUEST_ACTION_MODE_ASSET( const char* asset )
	{
		PED::REQUEST_ACTION_MODE_ASSET(asset);
	}

	bool LUA_NATIVE_PED_HAS_ACTION_MODE_ASSET_LOADED( const char* asset )
	{
		auto retval = (bool)PED::HAS_ACTION_MODE_ASSET_LOADED(asset);
		return retval;
	}

	void LUA_NATIVE_PED_REMOVE_ACTION_MODE_ASSET( const char* asset )
	{
		PED::REMOVE_ACTION_MODE_ASSET(asset);
	}

	void LUA_NATIVE_PED_REQUEST_STEALTH_MODE_ASSET( const char* asset )
	{
		PED::REQUEST_STEALTH_MODE_ASSET(asset);
	}

	bool LUA_NATIVE_PED_HAS_STEALTH_MODE_ASSET_LOADED( const char* asset )
	{
		auto retval = (bool)PED::HAS_STEALTH_MODE_ASSET_LOADED(asset);
		return retval;
	}

	void LUA_NATIVE_PED_REMOVE_STEALTH_MODE_ASSET( const char* asset )
	{
		PED::REMOVE_STEALTH_MODE_ASSET(asset);
	}

	void LUA_NATIVE_PED_SET_PED_LOD_MULTIPLIER( Ped ped, float multiplier )
	{
		PED::SET_PED_LOD_MULTIPLIER(ped, multiplier);
	}

	void LUA_NATIVE_PED_SET_PED_CAN_LOSE_PROPS_ON_DAMAGE( Ped ped, bool toggle, int p2 )
	{
		PED::SET_PED_CAN_LOSE_PROPS_ON_DAMAGE(ped, toggle, p2);
	}

	void LUA_NATIVE_PED_SET_FORCE_FOOTSTEP_UPDATE( Ped ped, bool toggle )
	{
		PED::SET_FORCE_FOOTSTEP_UPDATE(ped, toggle);
	}

	void LUA_NATIVE_PED_SET_FORCE_STEP_TYPE( Ped ped, bool p1, int type, int p3 )
	{
		PED::SET_FORCE_STEP_TYPE(ped, p1, type, p3);
	}

	bool LUA_NATIVE_PED_IS_ANY_HOSTILE_PED_NEAR_POINT( Ped ped, float x, float y, float z, float radius )
	{
		auto retval = (bool)PED::IS_ANY_HOSTILE_PED_NEAR_POINT(ped, x, y, z, radius);
		return retval;
	}

	void LUA_NATIVE_PED_SET_PED_CAN_PLAY_IN_CAR_IDLES( Ped ped, bool toggle )
	{
		PED::SET_PED_CAN_PLAY_IN_CAR_IDLES(ped, toggle);
	}

	bool LUA_NATIVE_PED_IS_TARGET_PED_IN_PERCEPTION_AREA( Ped ped, Ped targetPed, float p2, float p3, float p4, float p5 )
	{
		auto retval = (bool)PED::IS_TARGET_PED_IN_PERCEPTION_AREA(ped, targetPed, p2, p3, p4, p5);
		return retval;
	}

	void LUA_NATIVE_PED_SET_POP_CONTROL_SPHERE_THIS_FRAME( float x, float y, float z, float min, float max )
	{
		PED::SET_POP_CONTROL_SPHERE_THIS_FRAME(x, y, z, min, max);
	}

	void LUA_NATIVE_PED_FORCE_ZERO_MASS_IN_COLLISIONS( Ped ped )
	{
		PED::FORCE_ZERO_MASS_IN_COLLISIONS(ped);
	}

	void LUA_NATIVE_PED_SET_DISABLE_HIGH_FALL_DEATH( Ped ped, bool toggle )
	{
		PED::SET_DISABLE_HIGH_FALL_DEATH(ped, toggle);
	}

	void LUA_NATIVE_PED_SET_PED_PHONE_PALETTE_IDX( Any p0, Any p1 )
	{
		PED::SET_PED_PHONE_PALETTE_IDX(p0, p1);
	}

	void LUA_NATIVE_PED_SET_PED_STEER_BIAS( Ped ped, float value )
	{
		PED::SET_PED_STEER_BIAS(ped, value);
	}

	bool LUA_NATIVE_PED_IS_PED_SWITCHING_WEAPON( Ped Ped )
	{
		auto retval = (bool)PED::IS_PED_SWITCHING_WEAPON(Ped);
		return retval;
	}

	void LUA_NATIVE_PED_SET_PED_TREATED_AS_FRIENDLY( Any p0, Any p1, Any p2 )
	{
		PED::SET_PED_TREATED_AS_FRIENDLY(p0, p1, p2);
	}

	void LUA_NATIVE_PED_SET_DISABLE_PED_MAP_COLLISION( Ped ped )
	{
		PED::SET_DISABLE_PED_MAP_COLLISION(ped);
	}

	void LUA_NATIVE_PED_ENABLE_MP_LIGHT( Ped ped, bool toggle )
	{
		PED::ENABLE_MP_LIGHT(ped, toggle);
	}

	bool LUA_NATIVE_PED_GET_MP_LIGHT_ENABLED( Ped ped )
	{
		auto retval = (bool)PED::GET_MP_LIGHT_ENABLED(ped);
		return retval;
	}

	void LUA_NATIVE_PED_CLEAR_COVER_POINT_FOR_PED( Ped ped )
	{
		PED::CLEAR_COVER_POINT_FOR_PED(ped);
	}

	void LUA_NATIVE_PED_SET_ALLOW_STUNT_JUMP_CAMERA( Ped ped, bool toggle )
	{
		PED::SET_ALLOW_STUNT_JUMP_CAMERA(ped, toggle);
	}

	std::tuple<int, Any> LUA_NATIVE_PHYSICS_ADD_ROPE( float x, float y, float z, float rotX, float rotY, float rotZ, float length, int ropeType, float maxLength, float minLength, float windingSpeed, bool p11, bool p12, bool rigid, float p14, bool breakWhenShot, Any unkPtr )
	{
		std::tuple<int, Any> return_values;
		std::get<0>(return_values) = PHYSICS::ADD_ROPE(x, y, z, rotX, rotY, rotZ, length, ropeType, maxLength, minLength, windingSpeed, p11, p12, rigid, p14, breakWhenShot, &unkPtr);
		std::get<1>(return_values) = unkPtr;

		return return_values;
	}

	int LUA_NATIVE_PHYSICS_DELETE_ROPE( int ropeId )
	{
		PHYSICS::DELETE_ROPE(&ropeId);
		return ropeId;
	}

	void LUA_NATIVE_PHYSICS_DELETE_CHILD_ROPE( int ropeId )
	{
		PHYSICS::DELETE_CHILD_ROPE(ropeId);
	}

	std::tuple<bool, int> LUA_NATIVE_PHYSICS_DOES_ROPE_EXIST( int ropeId )
	{
		std::tuple<bool, int> return_values;
		std::get<0>(return_values) = (bool)PHYSICS::DOES_ROPE_EXIST(&ropeId);
		std::get<1>(return_values) = ropeId;

		return return_values;
	}

	int LUA_NATIVE_PHYSICS_ROPE_DRAW_ENABLED( int ropeId, bool p1 )
	{
		PHYSICS::ROPE_DRAW_ENABLED(&ropeId, p1);
		return ropeId;
	}

	int LUA_NATIVE_PHYSICS_ROPE_DRAW_SHADOW_ENABLED( int ropeId, bool toggle )
	{
		PHYSICS::ROPE_DRAW_SHADOW_ENABLED(&ropeId, toggle);
		return ropeId;
	}

	void LUA_NATIVE_PHYSICS_LOAD_ROPE_DATA( int ropeId, const char* rope_preset )
	{
		PHYSICS::LOAD_ROPE_DATA(ropeId, rope_preset);
	}

	void LUA_NATIVE_PHYSICS_PIN_ROPE_VERTEX( int ropeId, int vertex, float x, float y, float z )
	{
		PHYSICS::PIN_ROPE_VERTEX(ropeId, vertex, x, y, z);
	}

	void LUA_NATIVE_PHYSICS_UNPIN_ROPE_VERTEX( int ropeId, int vertex )
	{
		PHYSICS::UNPIN_ROPE_VERTEX(ropeId, vertex);
	}

	int LUA_NATIVE_PHYSICS_GET_ROPE_VERTEX_COUNT( int ropeId )
	{
		auto retval = PHYSICS::GET_ROPE_VERTEX_COUNT(ropeId);
		return retval;
	}

	std::tuple<Any, Any> LUA_NATIVE_PHYSICS_ATTACH_ENTITIES_TO_ROPE( int ropeId, Entity ent1, Entity ent2, float ent1_x, float ent1_y, float ent1_z, float ent2_x, float ent2_y, float ent2_z, float length, bool p10, bool p11, Any p12, Any p13 )
	{
		std::tuple<Any, Any> return_values;
		PHYSICS::ATTACH_ENTITIES_TO_ROPE(ropeId, ent1, ent2, ent1_x, ent1_y, ent1_z, ent2_x, ent2_y, ent2_z, length, p10, p11, &p12, &p13);
		std::get<0>(return_values) = p12;
		std::get<1>(return_values) = p13;

		return return_values;
	}

	void LUA_NATIVE_PHYSICS_ATTACH_ROPE_TO_ENTITY( int ropeId, Entity entity, float x, float y, float z, bool p5 )
	{
		PHYSICS::ATTACH_ROPE_TO_ENTITY(ropeId, entity, x, y, z, p5);
	}

	void LUA_NATIVE_PHYSICS_DETACH_ROPE_FROM_ENTITY( int ropeId, Entity entity )
	{
		PHYSICS::DETACH_ROPE_FROM_ENTITY(ropeId, entity);
	}

	void LUA_NATIVE_PHYSICS_ROPE_SET_UPDATE_PINVERTS( int ropeId )
	{
		PHYSICS::ROPE_SET_UPDATE_PINVERTS(ropeId);
	}

	void LUA_NATIVE_PHYSICS_ROPE_SET_UPDATE_ORDER( int ropeId, Any p1 )
	{
		PHYSICS::ROPE_SET_UPDATE_ORDER(ropeId, p1);
	}

	void LUA_NATIVE_PHYSICS_ROPE_SET_SMOOTH_REELIN( int ropeId, bool p1 )
	{
		PHYSICS::ROPE_SET_SMOOTH_REELIN(ropeId, p1);
	}

	std::tuple<bool, int> LUA_NATIVE_PHYSICS_IS_ROPE_ATTACHED_AT_BOTH_ENDS( int ropeId )
	{
		std::tuple<bool, int> return_values;
		std::get<0>(return_values) = (bool)PHYSICS::IS_ROPE_ATTACHED_AT_BOTH_ENDS(&ropeId);
		std::get<1>(return_values) = ropeId;

		return return_values;
	}

	Vector3 LUA_NATIVE_PHYSICS_GET_ROPE_LAST_VERTEX_COORD( int ropeId )
	{
		auto retval = PHYSICS::GET_ROPE_LAST_VERTEX_COORD(ropeId);
		return retval;
	}

	Vector3 LUA_NATIVE_PHYSICS_GET_ROPE_VERTEX_COORD( int ropeId, int vertex )
	{
		auto retval = PHYSICS::GET_ROPE_VERTEX_COORD(ropeId, vertex);
		return retval;
	}

	void LUA_NATIVE_PHYSICS_START_ROPE_WINDING( int ropeId )
	{
		PHYSICS::START_ROPE_WINDING(ropeId);
	}

	void LUA_NATIVE_PHYSICS_STOP_ROPE_WINDING( int ropeId )
	{
		PHYSICS::STOP_ROPE_WINDING(ropeId);
	}

	void LUA_NATIVE_PHYSICS_START_ROPE_UNWINDING_FRONT( int ropeId )
	{
		PHYSICS::START_ROPE_UNWINDING_FRONT(ropeId);
	}

	void LUA_NATIVE_PHYSICS_STOP_ROPE_UNWINDING_FRONT( int ropeId )
	{
		PHYSICS::STOP_ROPE_UNWINDING_FRONT(ropeId);
	}

	void LUA_NATIVE_PHYSICS_ROPE_CONVERT_TO_SIMPLE( int ropeId )
	{
		PHYSICS::ROPE_CONVERT_TO_SIMPLE(ropeId);
	}

	void LUA_NATIVE_PHYSICS_ROPE_LOAD_TEXTURES(  )
	{
		PHYSICS::ROPE_LOAD_TEXTURES();
	}

	bool LUA_NATIVE_PHYSICS_ROPE_ARE_TEXTURES_LOADED(  )
	{
		auto retval = (bool)PHYSICS::ROPE_ARE_TEXTURES_LOADED();
		return retval;
	}

	void LUA_NATIVE_PHYSICS_ROPE_UNLOAD_TEXTURES(  )
	{
		PHYSICS::ROPE_UNLOAD_TEXTURES();
	}

	bool LUA_NATIVE_PHYSICS_DOES_SCRIPT_OWN_ROPE( int ropeId )
	{
		auto retval = (bool)PHYSICS::DOES_SCRIPT_OWN_ROPE(ropeId);
		return retval;
	}

	void LUA_NATIVE_PHYSICS_ROPE_ATTACH_VIRTUAL_BOUND_GEOM( int ropeId, int p1, float p2, float p3, float p4, float p5, float p6, float p7, float p8, float p9, float p10, float p11, float p12, float p13 )
	{
		PHYSICS::ROPE_ATTACH_VIRTUAL_BOUND_GEOM(ropeId, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13);
	}

	void LUA_NATIVE_PHYSICS_ROPE_CHANGE_SCRIPT_OWNER( Any p0, bool p1, bool p2 )
	{
		PHYSICS::ROPE_CHANGE_SCRIPT_OWNER(p0, p1, p2);
	}

	void LUA_NATIVE_PHYSICS_ROPE_SET_REFFRAMEVELOCITY_COLLIDERORDER( int ropeId, int p1 )
	{
		PHYSICS::ROPE_SET_REFFRAMEVELOCITY_COLLIDERORDER(ropeId, p1);
	}

	float LUA_NATIVE_PHYSICS_ROPE_GET_DISTANCE_BETWEEN_ENDS( int ropeId )
	{
		auto retval = PHYSICS::ROPE_GET_DISTANCE_BETWEEN_ENDS(ropeId);
		return retval;
	}

	void LUA_NATIVE_PHYSICS_ROPE_FORCE_LENGTH( int ropeId, float length )
	{
		PHYSICS::ROPE_FORCE_LENGTH(ropeId, length);
	}

	void LUA_NATIVE_PHYSICS_ROPE_RESET_LENGTH( int ropeId, float length )
	{
		PHYSICS::ROPE_RESET_LENGTH(ropeId, length);
	}

	void LUA_NATIVE_PHYSICS_APPLY_IMPULSE_TO_CLOTH( float posX, float posY, float posZ, float vecX, float vecY, float vecZ, float impulse )
	{
		PHYSICS::APPLY_IMPULSE_TO_CLOTH(posX, posY, posZ, vecX, vecY, vecZ, impulse);
	}

	void LUA_NATIVE_PHYSICS_SET_DAMPING( Entity entity, int vertex, float value )
	{
		PHYSICS::SET_DAMPING(entity, vertex, value);
	}

	void LUA_NATIVE_PHYSICS_ACTIVATE_PHYSICS( Entity entity )
	{
		PHYSICS::ACTIVATE_PHYSICS(entity);
	}

	void LUA_NATIVE_PHYSICS_SET_CGOFFSET( Entity entity, float x, float y, float z )
	{
		PHYSICS::SET_CGOFFSET(entity, x, y, z);
	}

	Vector3 LUA_NATIVE_PHYSICS_GET_CGOFFSET( Entity entity )
	{
		auto retval = PHYSICS::GET_CGOFFSET(entity);
		return retval;
	}

	void LUA_NATIVE_PHYSICS_SET_CG_AT_BOUNDCENTER( Entity entity )
	{
		PHYSICS::SET_CG_AT_BOUNDCENTER(entity);
	}

	void LUA_NATIVE_PHYSICS_BREAK_ENTITY_GLASS( Entity entity, float p1, float p2, float p3, float p4, float p5, float p6, float p7, float p8, Any p9, bool p10 )
	{
		PHYSICS::BREAK_ENTITY_GLASS(entity, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
	}

	bool LUA_NATIVE_PHYSICS_GET_IS_ENTITY_A_FRAG( Object object )
	{
		auto retval = (bool)PHYSICS::GET_IS_ENTITY_A_FRAG(object);
		return retval;
	}

	void LUA_NATIVE_PHYSICS_SET_DISABLE_BREAKING( Object object, bool toggle )
	{
		PHYSICS::SET_DISABLE_BREAKING(object, toggle);
	}

	void LUA_NATIVE_PHYSICS_RESET_DISABLE_BREAKING( Object object )
	{
		PHYSICS::RESET_DISABLE_BREAKING(object);
	}

	void LUA_NATIVE_PHYSICS_SET_DISABLE_FRAG_DAMAGE( Object object, bool toggle )
	{
		PHYSICS::SET_DISABLE_FRAG_DAMAGE(object, toggle);
	}

	void LUA_NATIVE_PHYSICS_SET_USE_KINEMATIC_PHYSICS( Entity entity, bool toggle )
	{
		PHYSICS::SET_USE_KINEMATIC_PHYSICS(entity, toggle);
	}

	void LUA_NATIVE_PHYSICS_SET_IN_STUNT_MODE( bool p0 )
	{
		PHYSICS::SET_IN_STUNT_MODE(p0);
	}

	void LUA_NATIVE_PHYSICS_SET_IN_ARENA_MODE( bool toggle )
	{
		PHYSICS::SET_IN_ARENA_MODE(toggle);
	}

	Ped LUA_NATIVE_PLAYER_GET_PLAYER_PED( Player player )
	{
		auto retval = PLAYER::GET_PLAYER_PED(player);
		return retval;
	}

	Ped LUA_NATIVE_PLAYER_GET_PLAYER_PED_SCRIPT_INDEX( Player player )
	{
		auto retval = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(player);
		return retval;
	}

	void LUA_NATIVE_PLAYER_SET_PLAYER_MODEL( Player player, Hash model )
	{
		PLAYER::SET_PLAYER_MODEL(player, model);
	}

	void LUA_NATIVE_PLAYER_CHANGE_PLAYER_PED( Player player, Ped ped, bool p2, bool resetDamage )
	{
		PLAYER::CHANGE_PLAYER_PED(player, ped, p2, resetDamage);
	}

	std::tuple<int, int, int> LUA_NATIVE_PLAYER_GET_PLAYER_RGB_COLOUR( Player player, int r, int g, int b )
	{
		std::tuple<int, int, int> return_values;
		PLAYER::GET_PLAYER_RGB_COLOUR(player, &r, &g, &b);
		std::get<0>(return_values) = r;
		std::get<1>(return_values) = g;
		std::get<2>(return_values) = b;

		return return_values;
	}

	int LUA_NATIVE_PLAYER_GET_NUMBER_OF_PLAYERS(  )
	{
		auto retval = PLAYER::GET_NUMBER_OF_PLAYERS();
		return retval;
	}

	int LUA_NATIVE_PLAYER_GET_PLAYER_TEAM( Player player )
	{
		auto retval = PLAYER::GET_PLAYER_TEAM(player);
		return retval;
	}

	void LUA_NATIVE_PLAYER_SET_PLAYER_TEAM( Player player, int team )
	{
		PLAYER::SET_PLAYER_TEAM(player, team);
	}

	int LUA_NATIVE_PLAYER_GET_NUMBER_OF_PLAYERS_IN_TEAM( int team )
	{
		auto retval = PLAYER::GET_NUMBER_OF_PLAYERS_IN_TEAM(team);
		return retval;
	}

	const char* LUA_NATIVE_PLAYER_GET_PLAYER_NAME( Player player )
	{
		auto retval = PLAYER::GET_PLAYER_NAME(player);
		return retval;
	}

	float LUA_NATIVE_PLAYER_GET_WANTED_LEVEL_RADIUS( Player player )
	{
		auto retval = PLAYER::GET_WANTED_LEVEL_RADIUS(player);
		return retval;
	}

	Vector3 LUA_NATIVE_PLAYER_GET_PLAYER_WANTED_CENTRE_POSITION( Player player )
	{
		auto retval = PLAYER::GET_PLAYER_WANTED_CENTRE_POSITION(player);
		return retval;
	}

	Vector3 LUA_NATIVE_PLAYER_SET_PLAYER_WANTED_CENTRE_POSITION( Player player, Vector3 position, bool p2, bool p3 )
	{
		PLAYER::SET_PLAYER_WANTED_CENTRE_POSITION(player, &position, p2, p3);
		return position;
	}

	int LUA_NATIVE_PLAYER_GET_WANTED_LEVEL_THRESHOLD( int wantedLevel )
	{
		auto retval = PLAYER::GET_WANTED_LEVEL_THRESHOLD(wantedLevel);
		return retval;
	}

	void LUA_NATIVE_PLAYER_SET_PLAYER_WANTED_LEVEL( Player player, int wantedLevel, bool disableNoMission )
	{
		PLAYER::SET_PLAYER_WANTED_LEVEL(player, wantedLevel, disableNoMission);
	}

	void LUA_NATIVE_PLAYER_SET_PLAYER_WANTED_LEVEL_NO_DROP( Player player, int wantedLevel, bool p2 )
	{
		PLAYER::SET_PLAYER_WANTED_LEVEL_NO_DROP(player, wantedLevel, p2);
	}

	void LUA_NATIVE_PLAYER_SET_PLAYER_WANTED_LEVEL_NOW( Player player, bool p1 )
	{
		PLAYER::SET_PLAYER_WANTED_LEVEL_NOW(player, p1);
	}

	bool LUA_NATIVE_PLAYER_ARE_PLAYER_FLASHING_STARS_ABOUT_TO_DROP( Player player )
	{
		auto retval = (bool)PLAYER::ARE_PLAYER_FLASHING_STARS_ABOUT_TO_DROP(player);
		return retval;
	}

	bool LUA_NATIVE_PLAYER_ARE_PLAYER_STARS_GREYED_OUT( Player player )
	{
		auto retval = (bool)PLAYER::ARE_PLAYER_STARS_GREYED_OUT(player);
		return retval;
	}

	bool LUA_NATIVE_PLAYER_IS_WANTED_AND_HAS_BEEN_SEEN_BY_COPS( Player player )
	{
		auto retval = (bool)PLAYER::IS_WANTED_AND_HAS_BEEN_SEEN_BY_COPS(player);
		return retval;
	}

	void LUA_NATIVE_PLAYER_SET_DISPATCH_COPS_FOR_PLAYER( Player player, bool toggle )
	{
		PLAYER::SET_DISPATCH_COPS_FOR_PLAYER(player, toggle);
	}

	bool LUA_NATIVE_PLAYER_IS_PLAYER_WANTED_LEVEL_GREATER( Player player, int wantedLevel )
	{
		auto retval = (bool)PLAYER::IS_PLAYER_WANTED_LEVEL_GREATER(player, wantedLevel);
		return retval;
	}

	void LUA_NATIVE_PLAYER_CLEAR_PLAYER_WANTED_LEVEL( Player player )
	{
		PLAYER::CLEAR_PLAYER_WANTED_LEVEL(player);
	}

	bool LUA_NATIVE_PLAYER_IS_PLAYER_DEAD( Player player )
	{
		auto retval = (bool)PLAYER::IS_PLAYER_DEAD(player);
		return retval;
	}

	bool LUA_NATIVE_PLAYER_IS_PLAYER_PRESSING_HORN( Player player )
	{
		auto retval = (bool)PLAYER::IS_PLAYER_PRESSING_HORN(player);
		return retval;
	}

	void LUA_NATIVE_PLAYER_SET_PLAYER_CONTROL( Player player, bool bHasControl, int flags )
	{
		PLAYER::SET_PLAYER_CONTROL(player, bHasControl, flags);
	}

	int LUA_NATIVE_PLAYER_GET_PLAYER_WANTED_LEVEL( Player player )
	{
		auto retval = PLAYER::GET_PLAYER_WANTED_LEVEL(player);
		return retval;
	}

	void LUA_NATIVE_PLAYER_SET_MAX_WANTED_LEVEL( int maxWantedLevel )
	{
		PLAYER::SET_MAX_WANTED_LEVEL(maxWantedLevel);
	}

	void LUA_NATIVE_PLAYER_SET_POLICE_RADAR_BLIPS( bool toggle )
	{
		PLAYER::SET_POLICE_RADAR_BLIPS(toggle);
	}

	void LUA_NATIVE_PLAYER_SET_POLICE_IGNORE_PLAYER( Player player, bool toggle )
	{
		PLAYER::SET_POLICE_IGNORE_PLAYER(player, toggle);
	}

	bool LUA_NATIVE_PLAYER_IS_PLAYER_PLAYING( Player player )
	{
		auto retval = (bool)PLAYER::IS_PLAYER_PLAYING(player);
		return retval;
	}

	void LUA_NATIVE_PLAYER_SET_EVERYONE_IGNORE_PLAYER( Player player, bool toggle )
	{
		PLAYER::SET_EVERYONE_IGNORE_PLAYER(player, toggle);
	}

	void LUA_NATIVE_PLAYER_SET_ALL_RANDOM_PEDS_FLEE( Player player, bool toggle )
	{
		PLAYER::SET_ALL_RANDOM_PEDS_FLEE(player, toggle);
	}

	void LUA_NATIVE_PLAYER_SET_ALL_RANDOM_PEDS_FLEE_THIS_FRAME( Player player )
	{
		PLAYER::SET_ALL_RANDOM_PEDS_FLEE_THIS_FRAME(player);
	}

	void LUA_NATIVE_PLAYER_SET_ALL_NEUTRAL_RANDOM_PEDS_FLEE( Player player, bool toggle )
	{
		PLAYER::SET_ALL_NEUTRAL_RANDOM_PEDS_FLEE(player, toggle);
	}

	void LUA_NATIVE_PLAYER_SET_ALL_NEUTRAL_RANDOM_PEDS_FLEE_THIS_FRAME( Player player )
	{
		PLAYER::SET_ALL_NEUTRAL_RANDOM_PEDS_FLEE_THIS_FRAME(player);
	}

	void LUA_NATIVE_PLAYER_SET_LAW_PEDS_CAN_ATTACK_NON_WANTED_PLAYER_THIS_FRAME( Player player )
	{
		PLAYER::SET_LAW_PEDS_CAN_ATTACK_NON_WANTED_PLAYER_THIS_FRAME(player);
	}

	void LUA_NATIVE_PLAYER_SET_IGNORE_LOW_PRIORITY_SHOCKING_EVENTS( Player player, bool toggle )
	{
		PLAYER::SET_IGNORE_LOW_PRIORITY_SHOCKING_EVENTS(player, toggle);
	}

	void LUA_NATIVE_PLAYER_SET_WANTED_LEVEL_MULTIPLIER( float multiplier )
	{
		PLAYER::SET_WANTED_LEVEL_MULTIPLIER(multiplier);
	}

	void LUA_NATIVE_PLAYER_SET_WANTED_LEVEL_DIFFICULTY( Player player, float difficulty )
	{
		PLAYER::SET_WANTED_LEVEL_DIFFICULTY(player, difficulty);
	}

	void LUA_NATIVE_PLAYER_RESET_WANTED_LEVEL_DIFFICULTY( Player player )
	{
		PLAYER::RESET_WANTED_LEVEL_DIFFICULTY(player);
	}

	int LUA_NATIVE_PLAYER_GET_WANTED_LEVEL_TIME_TO_ESCAPE(  )
	{
		auto retval = PLAYER::GET_WANTED_LEVEL_TIME_TO_ESCAPE();
		return retval;
	}

	void LUA_NATIVE_PLAYER_SET_WANTED_LEVEL_HIDDEN_ESCAPE_TIME( Player player, int wantedLevel, int lossTime )
	{
		PLAYER::SET_WANTED_LEVEL_HIDDEN_ESCAPE_TIME(player, wantedLevel, lossTime);
	}

	void LUA_NATIVE_PLAYER_RESET_WANTED_LEVEL_HIDDEN_ESCAPE_TIME( Player player )
	{
		PLAYER::RESET_WANTED_LEVEL_HIDDEN_ESCAPE_TIME(player);
	}

	void LUA_NATIVE_PLAYER_START_FIRING_AMNESTY( int duration )
	{
		PLAYER::START_FIRING_AMNESTY(duration);
	}

	void LUA_NATIVE_PLAYER_REPORT_CRIME( Player player, int crimeType, int wantedLvlThresh )
	{
		PLAYER::REPORT_CRIME(player, crimeType, wantedLvlThresh);
	}

	void LUA_NATIVE_PLAYER_SUPPRESS_CRIME_THIS_FRAME( Player player, int crimeType )
	{
		PLAYER::SUPPRESS_CRIME_THIS_FRAME(player, crimeType);
	}

	void LUA_NATIVE_PLAYER_UPDATE_WANTED_POSITION_THIS_FRAME( Player player )
	{
		PLAYER::UPDATE_WANTED_POSITION_THIS_FRAME(player);
	}

	void LUA_NATIVE_PLAYER_SUPPRESS_LOSING_WANTED_LEVEL_IF_HIDDEN_THIS_FRAME( Player player )
	{
		PLAYER::SUPPRESS_LOSING_WANTED_LEVEL_IF_HIDDEN_THIS_FRAME(player);
	}

	void LUA_NATIVE_PLAYER_ALLOW_EVASION_HUD_IF_DISABLING_HIDDEN_EVASION_THIS_FRAME( Player player, Any p1 )
	{
		PLAYER::ALLOW_EVASION_HUD_IF_DISABLING_HIDDEN_EVASION_THIS_FRAME(player, p1);
	}

	void LUA_NATIVE_PLAYER_FORCE_START_HIDDEN_EVASION( Player player )
	{
		PLAYER::FORCE_START_HIDDEN_EVASION(player);
	}

	void LUA_NATIVE_PLAYER_SUPPRESS_WITNESSES_CALLING_POLICE_THIS_FRAME( Player player )
	{
		PLAYER::SUPPRESS_WITNESSES_CALLING_POLICE_THIS_FRAME(player);
	}

	void LUA_NATIVE_PLAYER_REPORT_POLICE_SPOTTED_PLAYER( Player player )
	{
		PLAYER::REPORT_POLICE_SPOTTED_PLAYER(player);
	}

	void LUA_NATIVE_PLAYER_SET_LAW_RESPONSE_DELAY_OVERRIDE( float p0 )
	{
		PLAYER::SET_LAW_RESPONSE_DELAY_OVERRIDE(p0);
	}

	void LUA_NATIVE_PLAYER_RESET_LAW_RESPONSE_DELAY_OVERRIDE(  )
	{
		PLAYER::RESET_LAW_RESPONSE_DELAY_OVERRIDE();
	}

	bool LUA_NATIVE_PLAYER_CAN_PLAYER_START_MISSION( Player player )
	{
		auto retval = (bool)PLAYER::CAN_PLAYER_START_MISSION(player);
		return retval;
	}

	bool LUA_NATIVE_PLAYER_IS_PLAYER_READY_FOR_CUTSCENE( Player player )
	{
		auto retval = (bool)PLAYER::IS_PLAYER_READY_FOR_CUTSCENE(player);
		return retval;
	}

	bool LUA_NATIVE_PLAYER_IS_PLAYER_TARGETTING_ENTITY( Player player, Entity entity )
	{
		auto retval = (bool)PLAYER::IS_PLAYER_TARGETTING_ENTITY(player, entity);
		return retval;
	}

	std::tuple<bool, Entity> LUA_NATIVE_PLAYER_GET_PLAYER_TARGET_ENTITY( Player player, Entity entity )
	{
		std::tuple<bool, Entity> return_values;
		std::get<0>(return_values) = (bool)PLAYER::GET_PLAYER_TARGET_ENTITY(player, &entity);
		std::get<1>(return_values) = entity;

		return return_values;
	}

	bool LUA_NATIVE_PLAYER_IS_PLAYER_FREE_AIMING( Player player )
	{
		auto retval = (bool)PLAYER::IS_PLAYER_FREE_AIMING(player);
		return retval;
	}

	bool LUA_NATIVE_PLAYER_IS_PLAYER_FREE_AIMING_AT_ENTITY( Player player, Entity entity )
	{
		auto retval = (bool)PLAYER::IS_PLAYER_FREE_AIMING_AT_ENTITY(player, entity);
		return retval;
	}

	std::tuple<bool, Entity> LUA_NATIVE_PLAYER_GET_ENTITY_PLAYER_IS_FREE_AIMING_AT( Player player, Entity entity )
	{
		std::tuple<bool, Entity> return_values;
		std::get<0>(return_values) = (bool)PLAYER::GET_ENTITY_PLAYER_IS_FREE_AIMING_AT(player, &entity);
		std::get<1>(return_values) = entity;

		return return_values;
	}

	void LUA_NATIVE_PLAYER_SET_PLAYER_LOCKON_RANGE_OVERRIDE( Player player, float range )
	{
		PLAYER::SET_PLAYER_LOCKON_RANGE_OVERRIDE(player, range);
	}

	void LUA_NATIVE_PLAYER_SET_PLAYER_CAN_DO_DRIVE_BY( Player player, bool toggle )
	{
		PLAYER::SET_PLAYER_CAN_DO_DRIVE_BY(player, toggle);
	}

	void LUA_NATIVE_PLAYER_SET_PLAYER_CAN_BE_HASSLED_BY_GANGS( Player player, bool toggle )
	{
		PLAYER::SET_PLAYER_CAN_BE_HASSLED_BY_GANGS(player, toggle);
	}

	void LUA_NATIVE_PLAYER_SET_PLAYER_CAN_USE_COVER( Player player, bool toggle )
	{
		PLAYER::SET_PLAYER_CAN_USE_COVER(player, toggle);
	}

	int LUA_NATIVE_PLAYER_GET_MAX_WANTED_LEVEL(  )
	{
		auto retval = PLAYER::GET_MAX_WANTED_LEVEL();
		return retval;
	}

	bool LUA_NATIVE_PLAYER_IS_PLAYER_TARGETTING_ANYTHING( Player player )
	{
		auto retval = (bool)PLAYER::IS_PLAYER_TARGETTING_ANYTHING(player);
		return retval;
	}

	void LUA_NATIVE_PLAYER_SET_PLAYER_SPRINT( Player player, bool toggle )
	{
		PLAYER::SET_PLAYER_SPRINT(player, toggle);
	}

	void LUA_NATIVE_PLAYER_RESET_PLAYER_STAMINA( Player player )
	{
		PLAYER::RESET_PLAYER_STAMINA(player);
	}

	void LUA_NATIVE_PLAYER_RESTORE_PLAYER_STAMINA( Player player, float p1 )
	{
		PLAYER::RESTORE_PLAYER_STAMINA(player, p1);
	}

	float LUA_NATIVE_PLAYER_GET_PLAYER_SPRINT_STAMINA_REMAINING( Player player )
	{
		auto retval = PLAYER::GET_PLAYER_SPRINT_STAMINA_REMAINING(player);
		return retval;
	}

	float LUA_NATIVE_PLAYER_GET_PLAYER_SPRINT_TIME_REMAINING( Player player )
	{
		auto retval = PLAYER::GET_PLAYER_SPRINT_TIME_REMAINING(player);
		return retval;
	}

	float LUA_NATIVE_PLAYER_GET_PLAYER_UNDERWATER_TIME_REMAINING( Player player )
	{
		auto retval = PLAYER::GET_PLAYER_UNDERWATER_TIME_REMAINING(player);
		return retval;
	}

	float LUA_NATIVE_PLAYER_SET_PLAYER_UNDERWATER_BREATH_PERCENT_REMAINING( Player player, float time )
	{
		auto retval = PLAYER::SET_PLAYER_UNDERWATER_BREATH_PERCENT_REMAINING(player, time);
		return retval;
	}

	int LUA_NATIVE_PLAYER_GET_PLAYER_GROUP( Player player )
	{
		auto retval = PLAYER::GET_PLAYER_GROUP(player);
		return retval;
	}

	int LUA_NATIVE_PLAYER_GET_PLAYER_MAX_ARMOUR( Player player )
	{
		auto retval = PLAYER::GET_PLAYER_MAX_ARMOUR(player);
		return retval;
	}

	bool LUA_NATIVE_PLAYER_IS_PLAYER_CONTROL_ON( Player player )
	{
		auto retval = (bool)PLAYER::IS_PLAYER_CONTROL_ON(player);
		return retval;
	}

	bool LUA_NATIVE_PLAYER_GET_ARE_CAMERA_CONTROLS_DISABLED(  )
	{
		auto retval = (bool)PLAYER::GET_ARE_CAMERA_CONTROLS_DISABLED();
		return retval;
	}

	bool LUA_NATIVE_PLAYER_IS_PLAYER_SCRIPT_CONTROL_ON( Player player )
	{
		auto retval = (bool)PLAYER::IS_PLAYER_SCRIPT_CONTROL_ON(player);
		return retval;
	}

	bool LUA_NATIVE_PLAYER_IS_PLAYER_CLIMBING( Player player )
	{
		auto retval = (bool)PLAYER::IS_PLAYER_CLIMBING(player);
		return retval;
	}

	bool LUA_NATIVE_PLAYER_IS_PLAYER_BEING_ARRESTED( Player player, bool atArresting )
	{
		auto retval = (bool)PLAYER::IS_PLAYER_BEING_ARRESTED(player, atArresting);
		return retval;
	}

	void LUA_NATIVE_PLAYER_RESET_PLAYER_ARREST_STATE( Player player )
	{
		PLAYER::RESET_PLAYER_ARREST_STATE(player);
	}

	Vehicle LUA_NATIVE_PLAYER_GET_PLAYERS_LAST_VEHICLE(  )
	{
		auto retval = PLAYER::GET_PLAYERS_LAST_VEHICLE();
		return retval;
	}

	Player LUA_NATIVE_PLAYER_GET_PLAYER_INDEX(  )
	{
		auto retval = PLAYER::GET_PLAYER_INDEX();
		return retval;
	}

	Player LUA_NATIVE_PLAYER_INT_TO_PLAYERINDEX( int value )
	{
		auto retval = PLAYER::INT_TO_PLAYERINDEX(value);
		return retval;
	}

	int LUA_NATIVE_PLAYER_INT_TO_PARTICIPANTINDEX( int value )
	{
		auto retval = PLAYER::INT_TO_PARTICIPANTINDEX(value);
		return retval;
	}

	int LUA_NATIVE_PLAYER_GET_TIME_SINCE_PLAYER_HIT_VEHICLE( Player player )
	{
		auto retval = PLAYER::GET_TIME_SINCE_PLAYER_HIT_VEHICLE(player);
		return retval;
	}

	int LUA_NATIVE_PLAYER_GET_TIME_SINCE_PLAYER_HIT_PED( Player player )
	{
		auto retval = PLAYER::GET_TIME_SINCE_PLAYER_HIT_PED(player);
		return retval;
	}

	int LUA_NATIVE_PLAYER_GET_TIME_SINCE_PLAYER_DROVE_ON_PAVEMENT( Player player )
	{
		auto retval = PLAYER::GET_TIME_SINCE_PLAYER_DROVE_ON_PAVEMENT(player);
		return retval;
	}

	int LUA_NATIVE_PLAYER_GET_TIME_SINCE_PLAYER_DROVE_AGAINST_TRAFFIC( Player player )
	{
		auto retval = PLAYER::GET_TIME_SINCE_PLAYER_DROVE_AGAINST_TRAFFIC(player);
		return retval;
	}

	bool LUA_NATIVE_PLAYER_IS_PLAYER_FREE_FOR_AMBIENT_TASK( Player player )
	{
		auto retval = (bool)PLAYER::IS_PLAYER_FREE_FOR_AMBIENT_TASK(player);
		return retval;
	}

	Player LUA_NATIVE_PLAYER_PLAYER_ID(  )
	{
		auto retval = PLAYER::PLAYER_ID();
		return retval;
	}

	Ped LUA_NATIVE_PLAYER_PLAYER_PED_ID(  )
	{
		auto retval = PLAYER::PLAYER_PED_ID();
		return retval;
	}

	int LUA_NATIVE_PLAYER_NETWORK_PLAYER_ID_TO_INT(  )
	{
		auto retval = PLAYER::NETWORK_PLAYER_ID_TO_INT();
		return retval;
	}

	bool LUA_NATIVE_PLAYER_HAS_FORCE_CLEANUP_OCCURRED( int cleanupFlags )
	{
		auto retval = (bool)PLAYER::HAS_FORCE_CLEANUP_OCCURRED(cleanupFlags);
		return retval;
	}

	void LUA_NATIVE_PLAYER_FORCE_CLEANUP( int cleanupFlags )
	{
		PLAYER::FORCE_CLEANUP(cleanupFlags);
	}

	void LUA_NATIVE_PLAYER_FORCE_CLEANUP_FOR_ALL_THREADS_WITH_THIS_NAME( const char* name, int cleanupFlags )
	{
		PLAYER::FORCE_CLEANUP_FOR_ALL_THREADS_WITH_THIS_NAME(name, cleanupFlags);
	}

	void LUA_NATIVE_PLAYER_FORCE_CLEANUP_FOR_THREAD_WITH_THIS_ID( int id, int cleanupFlags )
	{
		PLAYER::FORCE_CLEANUP_FOR_THREAD_WITH_THIS_ID(id, cleanupFlags);
	}

	int LUA_NATIVE_PLAYER_GET_CAUSE_OF_MOST_RECENT_FORCE_CLEANUP(  )
	{
		auto retval = PLAYER::GET_CAUSE_OF_MOST_RECENT_FORCE_CLEANUP();
		return retval;
	}

	void LUA_NATIVE_PLAYER_SET_PLAYER_MAY_ONLY_ENTER_THIS_VEHICLE( Player player, Vehicle vehicle )
	{
		PLAYER::SET_PLAYER_MAY_ONLY_ENTER_THIS_VEHICLE(player, vehicle);
	}

	void LUA_NATIVE_PLAYER_SET_PLAYER_MAY_NOT_ENTER_ANY_VEHICLE( Player player )
	{
		PLAYER::SET_PLAYER_MAY_NOT_ENTER_ANY_VEHICLE(player);
	}

	bool LUA_NATIVE_PLAYER_GIVE_ACHIEVEMENT_TO_PLAYER( int achievementId )
	{
		auto retval = (bool)PLAYER::GIVE_ACHIEVEMENT_TO_PLAYER(achievementId);
		return retval;
	}

	bool LUA_NATIVE_PLAYER_SET_ACHIEVEMENT_PROGRESS( int achievementId, int progress )
	{
		auto retval = (bool)PLAYER::SET_ACHIEVEMENT_PROGRESS(achievementId, progress);
		return retval;
	}

	int LUA_NATIVE_PLAYER_GET_ACHIEVEMENT_PROGRESS( int achievementId )
	{
		auto retval = PLAYER::GET_ACHIEVEMENT_PROGRESS(achievementId);
		return retval;
	}

	bool LUA_NATIVE_PLAYER_HAS_ACHIEVEMENT_BEEN_PASSED( int achievementId )
	{
		auto retval = (bool)PLAYER::HAS_ACHIEVEMENT_BEEN_PASSED(achievementId);
		return retval;
	}

	bool LUA_NATIVE_PLAYER_IS_PLAYER_ONLINE(  )
	{
		auto retval = (bool)PLAYER::IS_PLAYER_ONLINE();
		return retval;
	}

	bool LUA_NATIVE_PLAYER_IS_PLAYER_LOGGING_IN_NP(  )
	{
		auto retval = (bool)PLAYER::IS_PLAYER_LOGGING_IN_NP();
		return retval;
	}

	void LUA_NATIVE_PLAYER_DISPLAY_SYSTEM_SIGNIN_UI( bool p0 )
	{
		PLAYER::DISPLAY_SYSTEM_SIGNIN_UI(p0);
	}

	bool LUA_NATIVE_PLAYER_IS_SYSTEM_UI_BEING_DISPLAYED(  )
	{
		auto retval = (bool)PLAYER::IS_SYSTEM_UI_BEING_DISPLAYED();
		return retval;
	}

	void LUA_NATIVE_PLAYER_SET_PLAYER_INVINCIBLE( Player player, bool toggle )
	{
		PLAYER::SET_PLAYER_INVINCIBLE(player, toggle);
	}

	bool LUA_NATIVE_PLAYER_GET_PLAYER_INVINCIBLE( Player player )
	{
		auto retval = (bool)PLAYER::GET_PLAYER_INVINCIBLE(player);
		return retval;
	}

	bool LUA_NATIVE_PLAYER_GET_PLAYER_DEBUG_INVINCIBLE( Player player )
	{
		auto retval = (bool)PLAYER::GET_PLAYER_DEBUG_INVINCIBLE(player);
		return retval;
	}

	void LUA_NATIVE_PLAYER_SET_PLAYER_INVINCIBLE_BUT_HAS_REACTIONS( Player player, bool toggle )
	{
		PLAYER::SET_PLAYER_INVINCIBLE_BUT_HAS_REACTIONS(player, toggle);
	}

	void LUA_NATIVE_PLAYER_SET_PLAYER_CAN_COLLECT_DROPPED_MONEY( Player player, bool p1 )
	{
		PLAYER::SET_PLAYER_CAN_COLLECT_DROPPED_MONEY(player, p1);
	}

	void LUA_NATIVE_PLAYER_REMOVE_PLAYER_HELMET( Player player, bool p2 )
	{
		PLAYER::REMOVE_PLAYER_HELMET(player, p2);
	}

	void LUA_NATIVE_PLAYER_GIVE_PLAYER_RAGDOLL_CONTROL( Player player, bool toggle )
	{
		PLAYER::GIVE_PLAYER_RAGDOLL_CONTROL(player, toggle);
	}

	void LUA_NATIVE_PLAYER_SET_PLAYER_LOCKON( Player player, bool toggle )
	{
		PLAYER::SET_PLAYER_LOCKON(player, toggle);
	}

	void LUA_NATIVE_PLAYER_SET_PLAYER_TARGETING_MODE( int targetMode )
	{
		PLAYER::SET_PLAYER_TARGETING_MODE(targetMode);
	}

	void LUA_NATIVE_PLAYER_SET_PLAYER_TARGET_LEVEL( int targetLevel )
	{
		PLAYER::SET_PLAYER_TARGET_LEVEL(targetLevel);
	}

	bool LUA_NATIVE_PLAYER_GET_IS_USING_FPS_THIRD_PERSON_COVER(  )
	{
		auto retval = (bool)PLAYER::GET_IS_USING_FPS_THIRD_PERSON_COVER();
		return retval;
	}

	bool LUA_NATIVE_PLAYER_GET_IS_USING_HOOD_CAMERA(  )
	{
		auto retval = (bool)PLAYER::GET_IS_USING_HOOD_CAMERA();
		return retval;
	}

	void LUA_NATIVE_PLAYER_CLEAR_PLAYER_HAS_DAMAGED_AT_LEAST_ONE_PED( Player player )
	{
		PLAYER::CLEAR_PLAYER_HAS_DAMAGED_AT_LEAST_ONE_PED(player);
	}

	bool LUA_NATIVE_PLAYER_HAS_PLAYER_DAMAGED_AT_LEAST_ONE_PED( Player player )
	{
		auto retval = (bool)PLAYER::HAS_PLAYER_DAMAGED_AT_LEAST_ONE_PED(player);
		return retval;
	}

	void LUA_NATIVE_PLAYER_CLEAR_PLAYER_HAS_DAMAGED_AT_LEAST_ONE_NON_ANIMAL_PED( Player player )
	{
		PLAYER::CLEAR_PLAYER_HAS_DAMAGED_AT_LEAST_ONE_NON_ANIMAL_PED(player);
	}

	bool LUA_NATIVE_PLAYER_HAS_PLAYER_DAMAGED_AT_LEAST_ONE_NON_ANIMAL_PED( Player player )
	{
		auto retval = (bool)PLAYER::HAS_PLAYER_DAMAGED_AT_LEAST_ONE_NON_ANIMAL_PED(player);
		return retval;
	}

	void LUA_NATIVE_PLAYER_SET_AIR_DRAG_MULTIPLIER_FOR_PLAYERS_VEHICLE( Player player, float multiplier )
	{
		PLAYER::SET_AIR_DRAG_MULTIPLIER_FOR_PLAYERS_VEHICLE(player, multiplier);
	}

	void LUA_NATIVE_PLAYER_SET_SWIM_MULTIPLIER_FOR_PLAYER( Player player, float multiplier )
	{
		PLAYER::SET_SWIM_MULTIPLIER_FOR_PLAYER(player, multiplier);
	}

	void LUA_NATIVE_PLAYER_SET_RUN_SPRINT_MULTIPLIER_FOR_PLAYER( Player player, float multiplier )
	{
		PLAYER::SET_RUN_SPRINT_MULTIPLIER_FOR_PLAYER(player, multiplier);
	}

	int LUA_NATIVE_PLAYER_GET_TIME_SINCE_LAST_ARREST(  )
	{
		auto retval = PLAYER::GET_TIME_SINCE_LAST_ARREST();
		return retval;
	}

	int LUA_NATIVE_PLAYER_GET_TIME_SINCE_LAST_DEATH(  )
	{
		auto retval = PLAYER::GET_TIME_SINCE_LAST_DEATH();
		return retval;
	}

	void LUA_NATIVE_PLAYER_ASSISTED_MOVEMENT_CLOSE_ROUTE(  )
	{
		PLAYER::ASSISTED_MOVEMENT_CLOSE_ROUTE();
	}

	void LUA_NATIVE_PLAYER_ASSISTED_MOVEMENT_FLUSH_ROUTE(  )
	{
		PLAYER::ASSISTED_MOVEMENT_FLUSH_ROUTE();
	}

	void LUA_NATIVE_PLAYER_SET_PLAYER_FORCED_AIM( Player player, bool toggle )
	{
		PLAYER::SET_PLAYER_FORCED_AIM(player, toggle);
	}

	void LUA_NATIVE_PLAYER_SET_PLAYER_FORCED_ZOOM( Player player, bool toggle )
	{
		PLAYER::SET_PLAYER_FORCED_ZOOM(player, toggle);
	}

	void LUA_NATIVE_PLAYER_SET_PLAYER_FORCE_SKIP_AIM_INTRO( Player player, bool toggle )
	{
		PLAYER::SET_PLAYER_FORCE_SKIP_AIM_INTRO(player, toggle);
	}

	void LUA_NATIVE_PLAYER_DISABLE_PLAYER_FIRING( Player player, bool toggle )
	{
		PLAYER::DISABLE_PLAYER_FIRING(player, toggle);
	}

	void LUA_NATIVE_PLAYER_DISABLE_PLAYER_THROW_GRENADE_WHILE_USING_GUN(  )
	{
		PLAYER::DISABLE_PLAYER_THROW_GRENADE_WHILE_USING_GUN();
	}

	void LUA_NATIVE_PLAYER_SET_DISABLE_AMBIENT_MELEE_MOVE( Player player, bool toggle )
	{
		PLAYER::SET_DISABLE_AMBIENT_MELEE_MOVE(player, toggle);
	}

	void LUA_NATIVE_PLAYER_SET_PLAYER_MAX_ARMOUR( Player player, int value )
	{
		PLAYER::SET_PLAYER_MAX_ARMOUR(player, value);
	}

	void LUA_NATIVE_PLAYER_SPECIAL_ABILITY_ACTIVATE( Player player, int p1 )
	{
		PLAYER::SPECIAL_ABILITY_ACTIVATE(player, p1);
	}

	void LUA_NATIVE_PLAYER_SET_SPECIAL_ABILITY_MP( Player player, int p1, Any p2 )
	{
		PLAYER::SET_SPECIAL_ABILITY_MP(player, p1, p2);
	}

	void LUA_NATIVE_PLAYER_SPECIAL_ABILITY_DEACTIVATE_MP( Player player, int p1 )
	{
		PLAYER::SPECIAL_ABILITY_DEACTIVATE_MP(player, p1);
	}

	void LUA_NATIVE_PLAYER_SPECIAL_ABILITY_DEACTIVATE( Player player, Any p1 )
	{
		PLAYER::SPECIAL_ABILITY_DEACTIVATE(player, p1);
	}

	void LUA_NATIVE_PLAYER_SPECIAL_ABILITY_DEACTIVATE_FAST( Player player, Any p1 )
	{
		PLAYER::SPECIAL_ABILITY_DEACTIVATE_FAST(player, p1);
	}

	void LUA_NATIVE_PLAYER_SPECIAL_ABILITY_RESET( Player player, Any p1 )
	{
		PLAYER::SPECIAL_ABILITY_RESET(player, p1);
	}

	void LUA_NATIVE_PLAYER_SPECIAL_ABILITY_CHARGE_ON_MISSION_FAILED( Player player, Any p1 )
	{
		PLAYER::SPECIAL_ABILITY_CHARGE_ON_MISSION_FAILED(player, p1);
	}

	void LUA_NATIVE_PLAYER_SPECIAL_ABILITY_CHARGE_SMALL( Player player, bool p1, bool p2, Any p3 )
	{
		PLAYER::SPECIAL_ABILITY_CHARGE_SMALL(player, p1, p2, p3);
	}

	void LUA_NATIVE_PLAYER_SPECIAL_ABILITY_CHARGE_MEDIUM( Player player, bool p1, bool p2, Any p3 )
	{
		PLAYER::SPECIAL_ABILITY_CHARGE_MEDIUM(player, p1, p2, p3);
	}

	void LUA_NATIVE_PLAYER_SPECIAL_ABILITY_CHARGE_LARGE( Player player, bool p1, bool p2, Any p3 )
	{
		PLAYER::SPECIAL_ABILITY_CHARGE_LARGE(player, p1, p2, p3);
	}

	void LUA_NATIVE_PLAYER_SPECIAL_ABILITY_CHARGE_CONTINUOUS( Player player, Ped p1, Any p2 )
	{
		PLAYER::SPECIAL_ABILITY_CHARGE_CONTINUOUS(player, p1, p2);
	}

	void LUA_NATIVE_PLAYER_SPECIAL_ABILITY_CHARGE_ABSOLUTE( Player player, int p1, bool p2, Any p3 )
	{
		PLAYER::SPECIAL_ABILITY_CHARGE_ABSOLUTE(player, p1, p2, p3);
	}

	void LUA_NATIVE_PLAYER_SPECIAL_ABILITY_CHARGE_NORMALIZED( Player player, float normalizedValue, bool p2, Any p3 )
	{
		PLAYER::SPECIAL_ABILITY_CHARGE_NORMALIZED(player, normalizedValue, p2, p3);
	}

	void LUA_NATIVE_PLAYER_SPECIAL_ABILITY_FILL_METER( Player player, bool p1, Any p2 )
	{
		PLAYER::SPECIAL_ABILITY_FILL_METER(player, p1, p2);
	}

	void LUA_NATIVE_PLAYER_SPECIAL_ABILITY_DEPLETE_METER( Player player, bool p1, Any p2 )
	{
		PLAYER::SPECIAL_ABILITY_DEPLETE_METER(player, p1, p2);
	}

	void LUA_NATIVE_PLAYER_SPECIAL_ABILITY_LOCK( Hash playerModel, Any p1 )
	{
		PLAYER::SPECIAL_ABILITY_LOCK(playerModel, p1);
	}

	void LUA_NATIVE_PLAYER_SPECIAL_ABILITY_UNLOCK( Hash playerModel, Any p1 )
	{
		PLAYER::SPECIAL_ABILITY_UNLOCK(playerModel, p1);
	}

	bool LUA_NATIVE_PLAYER_IS_SPECIAL_ABILITY_UNLOCKED( Hash playerModel )
	{
		auto retval = (bool)PLAYER::IS_SPECIAL_ABILITY_UNLOCKED(playerModel);
		return retval;
	}

	bool LUA_NATIVE_PLAYER_IS_SPECIAL_ABILITY_ACTIVE( Player player, Any p1 )
	{
		auto retval = (bool)PLAYER::IS_SPECIAL_ABILITY_ACTIVE(player, p1);
		return retval;
	}

	bool LUA_NATIVE_PLAYER_IS_SPECIAL_ABILITY_METER_FULL( Player player, Any p1 )
	{
		auto retval = (bool)PLAYER::IS_SPECIAL_ABILITY_METER_FULL(player, p1);
		return retval;
	}

	void LUA_NATIVE_PLAYER_ENABLE_SPECIAL_ABILITY( Player player, bool toggle, Any p2 )
	{
		PLAYER::ENABLE_SPECIAL_ABILITY(player, toggle, p2);
	}

	bool LUA_NATIVE_PLAYER_IS_SPECIAL_ABILITY_ENABLED( Player player, Any p1 )
	{
		auto retval = (bool)PLAYER::IS_SPECIAL_ABILITY_ENABLED(player, p1);
		return retval;
	}

	void LUA_NATIVE_PLAYER_SET_SPECIAL_ABILITY_MULTIPLIER( float multiplier )
	{
		PLAYER::SET_SPECIAL_ABILITY_MULTIPLIER(multiplier);
	}

	void LUA_NATIVE_PLAYER_UPDATE_SPECIAL_ABILITY_FROM_STAT( Player player, Any p1 )
	{
		PLAYER::UPDATE_SPECIAL_ABILITY_FROM_STAT(player, p1);
	}

	bool LUA_NATIVE_PLAYER_GET_IS_PLAYER_DRIVING_ON_HIGHWAY( Player player )
	{
		auto retval = (bool)PLAYER::GET_IS_PLAYER_DRIVING_ON_HIGHWAY(player);
		return retval;
	}

	bool LUA_NATIVE_PLAYER_GET_IS_PLAYER_DRIVING_WRECKLESS( Player player, int p1 )
	{
		auto retval = (bool)PLAYER::GET_IS_PLAYER_DRIVING_WRECKLESS(player, p1);
		return retval;
	}

	bool LUA_NATIVE_PLAYER_GET_IS_MOPPING_AREA_FREE_IN_FRONT_OF_PLAYER( Player player, float p1 )
	{
		auto retval = (bool)PLAYER::GET_IS_MOPPING_AREA_FREE_IN_FRONT_OF_PLAYER(player, p1);
		return retval;
	}

	void LUA_NATIVE_PLAYER_START_PLAYER_TELEPORT( Player player, float x, float y, float z, float heading, bool p5, bool findCollisionLand, bool p7 )
	{
		PLAYER::START_PLAYER_TELEPORT(player, x, y, z, heading, p5, findCollisionLand, p7);
	}

	bool LUA_NATIVE_PLAYER_UPDATE_PLAYER_TELEPORT( Player player )
	{
		auto retval = (bool)PLAYER::UPDATE_PLAYER_TELEPORT(player);
		return retval;
	}

	void LUA_NATIVE_PLAYER_STOP_PLAYER_TELEPORT(  )
	{
		PLAYER::STOP_PLAYER_TELEPORT();
	}

	bool LUA_NATIVE_PLAYER_IS_PLAYER_TELEPORT_ACTIVE(  )
	{
		auto retval = (bool)PLAYER::IS_PLAYER_TELEPORT_ACTIVE();
		return retval;
	}

	float LUA_NATIVE_PLAYER_GET_PLAYER_CURRENT_STEALTH_NOISE( Player player )
	{
		auto retval = PLAYER::GET_PLAYER_CURRENT_STEALTH_NOISE(player);
		return retval;
	}

	void LUA_NATIVE_PLAYER_SET_PLAYER_HEALTH_RECHARGE_MULTIPLIER( Player player, float regenRate )
	{
		PLAYER::SET_PLAYER_HEALTH_RECHARGE_MULTIPLIER(player, regenRate);
	}

	float LUA_NATIVE_PLAYER_GET_PLAYER_HEALTH_RECHARGE_MAX_PERCENT( Player player )
	{
		auto retval = PLAYER::GET_PLAYER_HEALTH_RECHARGE_MAX_PERCENT(player);
		return retval;
	}

	void LUA_NATIVE_PLAYER_SET_PLAYER_HEALTH_RECHARGE_MAX_PERCENT( Player player, float limit )
	{
		PLAYER::SET_PLAYER_HEALTH_RECHARGE_MAX_PERCENT(player, limit);
	}

	void LUA_NATIVE_PLAYER_DISABLE_PLAYER_HEALTH_RECHARGE( Player player )
	{
		PLAYER::DISABLE_PLAYER_HEALTH_RECHARGE(player);
	}

	void LUA_NATIVE_PLAYER_SET_PLAYER_FALL_DISTANCE_TO_TRIGGER_RAGDOLL_OVERRIDE( Player player, float p1 )
	{
		PLAYER::SET_PLAYER_FALL_DISTANCE_TO_TRIGGER_RAGDOLL_OVERRIDE(player, p1);
	}

	void LUA_NATIVE_PLAYER_SET_PLAYER_WEAPON_DAMAGE_MODIFIER( Player player, float modifier )
	{
		PLAYER::SET_PLAYER_WEAPON_DAMAGE_MODIFIER(player, modifier);
	}

	void LUA_NATIVE_PLAYER_SET_PLAYER_WEAPON_DEFENSE_MODIFIER( Player player, float modifier )
	{
		PLAYER::SET_PLAYER_WEAPON_DEFENSE_MODIFIER(player, modifier);
	}

	void LUA_NATIVE_PLAYER_SET_PLAYER_WEAPON_MINIGUN_DEFENSE_MODIFIER( Player player, float modifier )
	{
		PLAYER::SET_PLAYER_WEAPON_MINIGUN_DEFENSE_MODIFIER(player, modifier);
	}

	void LUA_NATIVE_PLAYER_SET_PLAYER_MELEE_WEAPON_DAMAGE_MODIFIER( Player player, float modifier, bool p2 )
	{
		PLAYER::SET_PLAYER_MELEE_WEAPON_DAMAGE_MODIFIER(player, modifier, p2);
	}

	void LUA_NATIVE_PLAYER_SET_PLAYER_MELEE_WEAPON_DEFENSE_MODIFIER( Player player, float modifier )
	{
		PLAYER::SET_PLAYER_MELEE_WEAPON_DEFENSE_MODIFIER(player, modifier);
	}

	void LUA_NATIVE_PLAYER_SET_PLAYER_VEHICLE_DAMAGE_MODIFIER( Player player, float modifier )
	{
		PLAYER::SET_PLAYER_VEHICLE_DAMAGE_MODIFIER(player, modifier);
	}

	void LUA_NATIVE_PLAYER_SET_PLAYER_VEHICLE_DEFENSE_MODIFIER( Player player, float modifier )
	{
		PLAYER::SET_PLAYER_VEHICLE_DEFENSE_MODIFIER(player, modifier);
	}

	void LUA_NATIVE_PLAYER_SET_PLAYER_MAX_EXPLOSIVE_DAMAGE( Player player, float p1 )
	{
		PLAYER::SET_PLAYER_MAX_EXPLOSIVE_DAMAGE(player, p1);
	}

	void LUA_NATIVE_PLAYER_SET_PLAYER_EXPLOSIVE_DAMAGE_MODIFIER( Player player, Any p1 )
	{
		PLAYER::SET_PLAYER_EXPLOSIVE_DAMAGE_MODIFIER(player, p1);
	}

	void LUA_NATIVE_PLAYER_SET_PLAYER_WEAPON_TAKEDOWN_DEFENSE_MODIFIER( Player player, float p1 )
	{
		PLAYER::SET_PLAYER_WEAPON_TAKEDOWN_DEFENSE_MODIFIER(player, p1);
	}

	void LUA_NATIVE_PLAYER_SET_PLAYER_PARACHUTE_TINT_INDEX( Player player, int tintIndex )
	{
		PLAYER::SET_PLAYER_PARACHUTE_TINT_INDEX(player, tintIndex);
	}

	int LUA_NATIVE_PLAYER_GET_PLAYER_PARACHUTE_TINT_INDEX( Player player, int tintIndex )
	{
		PLAYER::GET_PLAYER_PARACHUTE_TINT_INDEX(player, &tintIndex);
		return tintIndex;
	}

	void LUA_NATIVE_PLAYER_SET_PLAYER_RESERVE_PARACHUTE_TINT_INDEX( Player player, int index )
	{
		PLAYER::SET_PLAYER_RESERVE_PARACHUTE_TINT_INDEX(player, index);
	}

	int LUA_NATIVE_PLAYER_GET_PLAYER_RESERVE_PARACHUTE_TINT_INDEX( Player player, int index )
	{
		PLAYER::GET_PLAYER_RESERVE_PARACHUTE_TINT_INDEX(player, &index);
		return index;
	}

	void LUA_NATIVE_PLAYER_SET_PLAYER_PARACHUTE_PACK_TINT_INDEX( Player player, int tintIndex )
	{
		PLAYER::SET_PLAYER_PARACHUTE_PACK_TINT_INDEX(player, tintIndex);
	}

	int LUA_NATIVE_PLAYER_GET_PLAYER_PARACHUTE_PACK_TINT_INDEX( Player player, int tintIndex )
	{
		PLAYER::GET_PLAYER_PARACHUTE_PACK_TINT_INDEX(player, &tintIndex);
		return tintIndex;
	}

	void LUA_NATIVE_PLAYER_SET_PLAYER_HAS_RESERVE_PARACHUTE( Player player )
	{
		PLAYER::SET_PLAYER_HAS_RESERVE_PARACHUTE(player);
	}

	bool LUA_NATIVE_PLAYER_GET_PLAYER_HAS_RESERVE_PARACHUTE( Player player )
	{
		auto retval = (bool)PLAYER::GET_PLAYER_HAS_RESERVE_PARACHUTE(player);
		return retval;
	}

	void LUA_NATIVE_PLAYER_SET_PLAYER_CAN_LEAVE_PARACHUTE_SMOKE_TRAIL( Player player, bool enabled )
	{
		PLAYER::SET_PLAYER_CAN_LEAVE_PARACHUTE_SMOKE_TRAIL(player, enabled);
	}

	void LUA_NATIVE_PLAYER_SET_PLAYER_PARACHUTE_SMOKE_TRAIL_COLOR( Player player, int r, int g, int b )
	{
		PLAYER::SET_PLAYER_PARACHUTE_SMOKE_TRAIL_COLOR(player, r, g, b);
	}

	std::tuple<int, int, int> LUA_NATIVE_PLAYER_GET_PLAYER_PARACHUTE_SMOKE_TRAIL_COLOR( Player player, int r, int g, int b )
	{
		std::tuple<int, int, int> return_values;
		PLAYER::GET_PLAYER_PARACHUTE_SMOKE_TRAIL_COLOR(player, &r, &g, &b);
		std::get<0>(return_values) = r;
		std::get<1>(return_values) = g;
		std::get<2>(return_values) = b;

		return return_values;
	}

	void LUA_NATIVE_PLAYER_SET_PLAYER_PHONE_PALETTE_IDX( Player player, int flags )
	{
		PLAYER::SET_PLAYER_PHONE_PALETTE_IDX(player, flags);
	}

	void LUA_NATIVE_PLAYER_SET_PLAYER_NOISE_MULTIPLIER( Player player, float multiplier )
	{
		PLAYER::SET_PLAYER_NOISE_MULTIPLIER(player, multiplier);
	}

	void LUA_NATIVE_PLAYER_SET_PLAYER_SNEAKING_NOISE_MULTIPLIER( Player player, float multiplier )
	{
		PLAYER::SET_PLAYER_SNEAKING_NOISE_MULTIPLIER(player, multiplier);
	}

	bool LUA_NATIVE_PLAYER_CAN_PED_HEAR_PLAYER( Player player, Ped ped )
	{
		auto retval = (bool)PLAYER::CAN_PED_HEAR_PLAYER(player, ped);
		return retval;
	}

	void LUA_NATIVE_PLAYER_SIMULATE_PLAYER_INPUT_GAIT( Player player, float amount, int gaitType, float speed, bool p4, bool p5, Any p6 )
	{
		PLAYER::SIMULATE_PLAYER_INPUT_GAIT(player, amount, gaitType, speed, p4, p5, p6);
	}

	void LUA_NATIVE_PLAYER_RESET_PLAYER_INPUT_GAIT( Player player )
	{
		PLAYER::RESET_PLAYER_INPUT_GAIT(player);
	}

	void LUA_NATIVE_PLAYER_SET_AUTO_GIVE_PARACHUTE_WHEN_ENTER_PLANE( Player player, bool toggle )
	{
		PLAYER::SET_AUTO_GIVE_PARACHUTE_WHEN_ENTER_PLANE(player, toggle);
	}

	void LUA_NATIVE_PLAYER_SET_AUTO_GIVE_SCUBA_GEAR_WHEN_EXIT_VEHICLE( Player player, bool toggle )
	{
		PLAYER::SET_AUTO_GIVE_SCUBA_GEAR_WHEN_EXIT_VEHICLE(player, toggle);
	}

	void LUA_NATIVE_PLAYER_SET_PLAYER_STEALTH_PERCEPTION_MODIFIER( Player player, float value )
	{
		PLAYER::SET_PLAYER_STEALTH_PERCEPTION_MODIFIER(player, value);
	}

	bool LUA_NATIVE_PLAYER_IS_REMOTE_PLAYER_IN_NON_CLONED_VEHICLE( Player player )
	{
		auto retval = (bool)PLAYER::IS_REMOTE_PLAYER_IN_NON_CLONED_VEHICLE(player);
		return retval;
	}

	void LUA_NATIVE_PLAYER_INCREASE_PLAYER_JUMP_SUPPRESSION_RANGE( Player player )
	{
		PLAYER::INCREASE_PLAYER_JUMP_SUPPRESSION_RANGE(player);
	}

	void LUA_NATIVE_PLAYER_SET_PLAYER_SIMULATE_AIMING( Player player, bool toggle )
	{
		PLAYER::SET_PLAYER_SIMULATE_AIMING(player, toggle);
	}

	void LUA_NATIVE_PLAYER_SET_PLAYER_CLOTH_PIN_FRAMES( Player player, int p1 )
	{
		PLAYER::SET_PLAYER_CLOTH_PIN_FRAMES(player, p1);
	}

	void LUA_NATIVE_PLAYER_SET_PLAYER_CLOTH_PACKAGE_INDEX( int index )
	{
		PLAYER::SET_PLAYER_CLOTH_PACKAGE_INDEX(index);
	}

	void LUA_NATIVE_PLAYER_SET_PLAYER_CLOTH_LOCK_COUNTER( int value )
	{
		PLAYER::SET_PLAYER_CLOTH_LOCK_COUNTER(value);
	}

	void LUA_NATIVE_PLAYER_PLAYER_ATTACH_VIRTUAL_BOUND( float p0, float p1, float p2, float p3, float p4, float p5, float p6, float p7 )
	{
		PLAYER::PLAYER_ATTACH_VIRTUAL_BOUND(p0, p1, p2, p3, p4, p5, p6, p7);
	}

	void LUA_NATIVE_PLAYER_PLAYER_DETACH_VIRTUAL_BOUND(  )
	{
		PLAYER::PLAYER_DETACH_VIRTUAL_BOUND();
	}

	bool LUA_NATIVE_PLAYER_HAS_PLAYER_BEEN_SPOTTED_IN_STOLEN_VEHICLE( Player player )
	{
		auto retval = (bool)PLAYER::HAS_PLAYER_BEEN_SPOTTED_IN_STOLEN_VEHICLE(player);
		return retval;
	}

	bool LUA_NATIVE_PLAYER_IS_PLAYER_BATTLE_AWARE( Player player )
	{
		auto retval = (bool)PLAYER::IS_PLAYER_BATTLE_AWARE(player);
		return retval;
	}

	bool LUA_NATIVE_PLAYER_GET_PLAYER_RECEIVED_BATTLE_EVENT_RECENTLY( Player player, int p1, bool p2 )
	{
		auto retval = (bool)PLAYER::GET_PLAYER_RECEIVED_BATTLE_EVENT_RECENTLY(player, p1, p2);
		return retval;
	}

	void LUA_NATIVE_PLAYER_EXTEND_WORLD_BOUNDARY_FOR_PLAYER( float x, float y, float z )
	{
		PLAYER::EXTEND_WORLD_BOUNDARY_FOR_PLAYER(x, y, z);
	}

	void LUA_NATIVE_PLAYER_RESET_WORLD_BOUNDARY_FOR_PLAYER(  )
	{
		PLAYER::RESET_WORLD_BOUNDARY_FOR_PLAYER();
	}

	bool LUA_NATIVE_PLAYER_IS_PLAYER_RIDING_TRAIN( Player player )
	{
		auto retval = (bool)PLAYER::IS_PLAYER_RIDING_TRAIN(player);
		return retval;
	}

	bool LUA_NATIVE_PLAYER_HAS_PLAYER_LEFT_THE_WORLD( Player player )
	{
		auto retval = (bool)PLAYER::HAS_PLAYER_LEFT_THE_WORLD(player);
		return retval;
	}

	void LUA_NATIVE_PLAYER_SET_PLAYER_LEAVE_PED_BEHIND( Player player, bool toggle )
	{
		PLAYER::SET_PLAYER_LEAVE_PED_BEHIND(player, toggle);
	}

	void LUA_NATIVE_PLAYER_SET_PLAYER_PARACHUTE_VARIATION_OVERRIDE( Player player, int p1, Any p2, Any p3, bool p4 )
	{
		PLAYER::SET_PLAYER_PARACHUTE_VARIATION_OVERRIDE(player, p1, p2, p3, p4);
	}

	void LUA_NATIVE_PLAYER_CLEAR_PLAYER_PARACHUTE_VARIATION_OVERRIDE( Player player )
	{
		PLAYER::CLEAR_PLAYER_PARACHUTE_VARIATION_OVERRIDE(player);
	}

	void LUA_NATIVE_PLAYER_SET_PLAYER_PARACHUTE_MODEL_OVERRIDE( Player player, Hash model )
	{
		PLAYER::SET_PLAYER_PARACHUTE_MODEL_OVERRIDE(player, model);
	}

	void LUA_NATIVE_PLAYER_SET_PLAYER_RESERVE_PARACHUTE_MODEL_OVERRIDE( Player player, Hash model )
	{
		PLAYER::SET_PLAYER_RESERVE_PARACHUTE_MODEL_OVERRIDE(player, model);
	}

	Hash LUA_NATIVE_PLAYER_GET_PLAYER_PARACHUTE_MODEL_OVERRIDE( Player player )
	{
		auto retval = PLAYER::GET_PLAYER_PARACHUTE_MODEL_OVERRIDE(player);
		return retval;
	}

	Hash LUA_NATIVE_PLAYER_GET_PLAYER_RESERVE_PARACHUTE_MODEL_OVERRIDE( Player player )
	{
		auto retval = PLAYER::GET_PLAYER_RESERVE_PARACHUTE_MODEL_OVERRIDE(player);
		return retval;
	}

	void LUA_NATIVE_PLAYER_CLEAR_PLAYER_PARACHUTE_MODEL_OVERRIDE( Player player )
	{
		PLAYER::CLEAR_PLAYER_PARACHUTE_MODEL_OVERRIDE(player);
	}

	void LUA_NATIVE_PLAYER_CLEAR_PLAYER_RESERVE_PARACHUTE_MODEL_OVERRIDE( Player player )
	{
		PLAYER::CLEAR_PLAYER_RESERVE_PARACHUTE_MODEL_OVERRIDE(player);
	}

	void LUA_NATIVE_PLAYER_SET_PLAYER_PARACHUTE_PACK_MODEL_OVERRIDE( Player player, Hash model )
	{
		PLAYER::SET_PLAYER_PARACHUTE_PACK_MODEL_OVERRIDE(player, model);
	}

	void LUA_NATIVE_PLAYER_CLEAR_PLAYER_PARACHUTE_PACK_MODEL_OVERRIDE( Player player )
	{
		PLAYER::CLEAR_PLAYER_PARACHUTE_PACK_MODEL_OVERRIDE(player);
	}

	void LUA_NATIVE_PLAYER_DISABLE_PLAYER_VEHICLE_REWARDS( Player player )
	{
		PLAYER::DISABLE_PLAYER_VEHICLE_REWARDS(player);
	}

	void LUA_NATIVE_PLAYER_SET_PLAYER_SPECTATED_VEHICLE_RADIO_OVERRIDE( bool p0 )
	{
		PLAYER::SET_PLAYER_SPECTATED_VEHICLE_RADIO_OVERRIDE(p0);
	}

	void LUA_NATIVE_PLAYER_SET_PLAYER_BLUETOOTH_STATE( Player player, bool state )
	{
		PLAYER::SET_PLAYER_BLUETOOTH_STATE(player, state);
	}

	bool LUA_NATIVE_PLAYER_IS_PLAYER_BLUETOOTH_ENABLE( Player player )
	{
		auto retval = (bool)PLAYER::IS_PLAYER_BLUETOOTH_ENABLE(player);
		return retval;
	}

	void LUA_NATIVE_PLAYER_DISABLE_CAMERA_VIEW_MODE_CYCLE( Player player )
	{
		PLAYER::DISABLE_CAMERA_VIEW_MODE_CYCLE(player);
	}

	int LUA_NATIVE_PLAYER_GET_PLAYER_FAKE_WANTED_LEVEL( Player player )
	{
		auto retval = PLAYER::GET_PLAYER_FAKE_WANTED_LEVEL(player);
		return retval;
	}

	void LUA_NATIVE_PLAYER_SET_PLAYER_CAN_DAMAGE_PLAYER( Player player1, Player player2, bool toggle )
	{
		PLAYER::SET_PLAYER_CAN_DAMAGE_PLAYER(player1, player2, toggle);
	}

	void LUA_NATIVE_PLAYER_SET_APPLY_WAYPOINT_OF_PLAYER( Player player, int hudColor )
	{
		PLAYER::SET_APPLY_WAYPOINT_OF_PLAYER(player, hudColor);
	}

	bool LUA_NATIVE_PLAYER_IS_PLAYER_VEHICLE_WEAPON_TOGGLED_TO_NON_HOMING( Any p0 )
	{
		auto retval = (bool)PLAYER::IS_PLAYER_VEHICLE_WEAPON_TOGGLED_TO_NON_HOMING(p0);
		return retval;
	}

	void LUA_NATIVE_PLAYER_SET_PLAYER_VEHICLE_WEAPON_TO_NON_HOMING( Any p0 )
	{
		PLAYER::SET_PLAYER_VEHICLE_WEAPON_TO_NON_HOMING(p0);
	}

	void LUA_NATIVE_PLAYER_SET_PLAYER_HOMING_DISABLED_FOR_ALL_VEHICLE_WEAPONS( Any p0, Any p1 )
	{
		PLAYER::SET_PLAYER_HOMING_DISABLED_FOR_ALL_VEHICLE_WEAPONS(p0, p1);
	}

	void LUA_NATIVE_PLAYER_ADD_PLAYER_TARGETABLE_ENTITY( Player player, Entity entity )
	{
		PLAYER::ADD_PLAYER_TARGETABLE_ENTITY(player, entity);
	}

	void LUA_NATIVE_PLAYER_REMOVE_PLAYER_TARGETABLE_ENTITY( Player player, Entity entity )
	{
		PLAYER::REMOVE_PLAYER_TARGETABLE_ENTITY(player, entity);
	}

	void LUA_NATIVE_PLAYER_SET_PLAYER_PREVIOUS_VARIATION_DATA( Player player, int p1, int p2, Any p3, Any p4, Any p5 )
	{
		PLAYER::SET_PLAYER_PREVIOUS_VARIATION_DATA(player, p1, p2, p3, p4, p5);
	}

	void LUA_NATIVE_PLAYER_REMOVE_SCRIPT_FIRE_POSITION(  )
	{
		PLAYER::REMOVE_SCRIPT_FIRE_POSITION();
	}

	void LUA_NATIVE_PLAYER_SET_SCRIPT_FIRE_POSITION( float coordX, float coordY, float coordZ )
	{
		PLAYER::SET_SCRIPT_FIRE_POSITION(coordX, coordY, coordZ);
	}

	void LUA_NATIVE_RECORDING_REPLAY_START_EVENT( int p0 )
	{
		RECORDING::REPLAY_START_EVENT(p0);
	}

	void LUA_NATIVE_RECORDING_REPLAY_STOP_EVENT(  )
	{
		RECORDING::REPLAY_STOP_EVENT();
	}

	void LUA_NATIVE_RECORDING_REPLAY_CANCEL_EVENT(  )
	{
		RECORDING::REPLAY_CANCEL_EVENT();
	}

	void LUA_NATIVE_RECORDING_REPLAY_RECORD_BACK_FOR_TIME( float p0, float p1, int p2 )
	{
		RECORDING::REPLAY_RECORD_BACK_FOR_TIME(p0, p1, p2);
	}

	void LUA_NATIVE_RECORDING_REPLAY_CHECK_FOR_EVENT_THIS_FRAME( const char* missionNameLabel, Any p1 )
	{
		RECORDING::REPLAY_CHECK_FOR_EVENT_THIS_FRAME(missionNameLabel, p1);
	}

	void LUA_NATIVE_RECORDING_REPLAY_PREVENT_RECORDING_THIS_FRAME(  )
	{
		RECORDING::REPLAY_PREVENT_RECORDING_THIS_FRAME();
	}

	void LUA_NATIVE_RECORDING_REPLAY_RESET_EVENT_INFO(  )
	{
		RECORDING::REPLAY_RESET_EVENT_INFO();
	}

	void LUA_NATIVE_RECORDING_REPLAY_DISABLE_CAMERA_MOVEMENT_THIS_FRAME(  )
	{
		RECORDING::REPLAY_DISABLE_CAMERA_MOVEMENT_THIS_FRAME();
	}

	void LUA_NATIVE_RECORDING_RECORD_GREATEST_MOMENT( int p0, int p1, int p2 )
	{
		RECORDING::RECORD_GREATEST_MOMENT(p0, p1, p2);
	}

	void LUA_NATIVE_RECORDING_START_REPLAY_RECORDING( int mode )
	{
		RECORDING::START_REPLAY_RECORDING(mode);
	}

	void LUA_NATIVE_RECORDING_STOP_REPLAY_RECORDING(  )
	{
		RECORDING::STOP_REPLAY_RECORDING();
	}

	void LUA_NATIVE_RECORDING_CANCEL_REPLAY_RECORDING(  )
	{
		RECORDING::CANCEL_REPLAY_RECORDING();
	}

	bool LUA_NATIVE_RECORDING_SAVE_REPLAY_RECORDING(  )
	{
		auto retval = (bool)RECORDING::SAVE_REPLAY_RECORDING();
		return retval;
	}

	bool LUA_NATIVE_RECORDING_IS_REPLAY_RECORDING(  )
	{
		auto retval = (bool)RECORDING::IS_REPLAY_RECORDING();
		return retval;
	}

	bool LUA_NATIVE_RECORDING_IS_REPLAY_INITIALIZED(  )
	{
		auto retval = (bool)RECORDING::IS_REPLAY_INITIALIZED();
		return retval;
	}

	bool LUA_NATIVE_RECORDING_IS_REPLAY_AVAILABLE(  )
	{
		auto retval = (bool)RECORDING::IS_REPLAY_AVAILABLE();
		return retval;
	}

	bool LUA_NATIVE_RECORDING_IS_REPLAY_RECORD_SPACE_AVAILABLE( bool p0 )
	{
		auto retval = (bool)RECORDING::IS_REPLAY_RECORD_SPACE_AVAILABLE(p0);
		return retval;
	}

	void LUA_NATIVE_REPLAY_REGISTER_EFFECT_FOR_REPLAY_EDITOR( const char* p0, bool p1 )
	{
		REPLAY::REGISTER_EFFECT_FOR_REPLAY_EDITOR(p0, p1);
	}

	bool LUA_NATIVE_REPLAY_REPLAY_SYSTEM_HAS_REQUESTED_A_SCRIPT_CLEANUP(  )
	{
		auto retval = (bool)REPLAY::REPLAY_SYSTEM_HAS_REQUESTED_A_SCRIPT_CLEANUP();
		return retval;
	}

	void LUA_NATIVE_REPLAY_SET_SCRIPTS_HAVE_CLEANED_UP_FOR_REPLAY_SYSTEM(  )
	{
		REPLAY::SET_SCRIPTS_HAVE_CLEANED_UP_FOR_REPLAY_SYSTEM();
	}

	void LUA_NATIVE_REPLAY_SET_REPLAY_SYSTEM_PAUSED_FOR_SAVE( bool p0 )
	{
		REPLAY::SET_REPLAY_SYSTEM_PAUSED_FOR_SAVE(p0);
	}

	void LUA_NATIVE_REPLAY_REPLAY_CONTROL_SHUTDOWN(  )
	{
		REPLAY::REPLAY_CONTROL_SHUTDOWN();
	}

	void LUA_NATIVE_REPLAY_ACTIVATE_ROCKSTAR_EDITOR( int p0 )
	{
		REPLAY::ACTIVATE_ROCKSTAR_EDITOR(p0);
	}

	bool LUA_NATIVE_SAVEMIGRATION_SAVEMIGRATION_IS_MP_ENABLED(  )
	{
		auto retval = (bool)SAVEMIGRATION::SAVEMIGRATION_IS_MP_ENABLED();
		return retval;
	}

	bool LUA_NATIVE_SAVEMIGRATION_SAVEMIGRATION_MP_REQUEST_ACCOUNTS(  )
	{
		auto retval = (bool)SAVEMIGRATION::SAVEMIGRATION_MP_REQUEST_ACCOUNTS();
		return retval;
	}

	int LUA_NATIVE_SAVEMIGRATION_SAVEMIGRATION_MP_GET_ACCOUNTS_STATUS(  )
	{
		auto retval = SAVEMIGRATION::SAVEMIGRATION_MP_GET_ACCOUNTS_STATUS();
		return retval;
	}

	int LUA_NATIVE_SAVEMIGRATION_SAVEMIGRATION_MP_NUM_ACCOUNTS(  )
	{
		auto retval = SAVEMIGRATION::SAVEMIGRATION_MP_NUM_ACCOUNTS();
		return retval;
	}

	std::tuple<bool, Any> LUA_NATIVE_SAVEMIGRATION_SAVEMIGRATION_MP_GET_ACCOUNT( int p0, Any p1 )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)SAVEMIGRATION::SAVEMIGRATION_MP_GET_ACCOUNT(p0, &p1);
		std::get<1>(return_values) = p1;

		return return_values;
	}

	bool LUA_NATIVE_SAVEMIGRATION_SAVEMIGRATION_MP_REQUEST_STATUS(  )
	{
		auto retval = (bool)SAVEMIGRATION::SAVEMIGRATION_MP_REQUEST_STATUS();
		return retval;
	}

	int LUA_NATIVE_SAVEMIGRATION_SAVEMIGRATION_MP_GET_STATUS(  )
	{
		auto retval = SAVEMIGRATION::SAVEMIGRATION_MP_GET_STATUS();
		return retval;
	}

	void LUA_NATIVE_SCRIPT_REQUEST_SCRIPT( const char* scriptName )
	{
		SCRIPT::REQUEST_SCRIPT(scriptName);
	}

	void LUA_NATIVE_SCRIPT_SET_SCRIPT_AS_NO_LONGER_NEEDED( const char* scriptName )
	{
		SCRIPT::SET_SCRIPT_AS_NO_LONGER_NEEDED(scriptName);
	}

	bool LUA_NATIVE_SCRIPT_HAS_SCRIPT_LOADED( const char* scriptName )
	{
		auto retval = (bool)SCRIPT::HAS_SCRIPT_LOADED(scriptName);
		return retval;
	}

	bool LUA_NATIVE_SCRIPT_DOES_SCRIPT_EXIST( const char* scriptName )
	{
		auto retval = (bool)SCRIPT::DOES_SCRIPT_EXIST(scriptName);
		return retval;
	}

	void LUA_NATIVE_SCRIPT_REQUEST_SCRIPT_WITH_NAME_HASH( Hash scriptHash )
	{
		SCRIPT::REQUEST_SCRIPT_WITH_NAME_HASH(scriptHash);
	}

	void LUA_NATIVE_SCRIPT_SET_SCRIPT_WITH_NAME_HASH_AS_NO_LONGER_NEEDED( Hash scriptHash )
	{
		SCRIPT::SET_SCRIPT_WITH_NAME_HASH_AS_NO_LONGER_NEEDED(scriptHash);
	}

	bool LUA_NATIVE_SCRIPT_HAS_SCRIPT_WITH_NAME_HASH_LOADED( Hash scriptHash )
	{
		auto retval = (bool)SCRIPT::HAS_SCRIPT_WITH_NAME_HASH_LOADED(scriptHash);
		return retval;
	}

	bool LUA_NATIVE_SCRIPT_DOES_SCRIPT_WITH_NAME_HASH_EXIST( Hash scriptHash )
	{
		auto retval = (bool)SCRIPT::DOES_SCRIPT_WITH_NAME_HASH_EXIST(scriptHash);
		return retval;
	}

	void LUA_NATIVE_SCRIPT_TERMINATE_THREAD( int threadId )
	{
		SCRIPT::TERMINATE_THREAD(threadId);
	}

	bool LUA_NATIVE_SCRIPT_IS_THREAD_ACTIVE( int threadId )
	{
		auto retval = (bool)SCRIPT::IS_THREAD_ACTIVE(threadId);
		return retval;
	}

	const char* LUA_NATIVE_SCRIPT_GET_NAME_OF_SCRIPT_WITH_THIS_ID( int threadId )
	{
		auto retval = SCRIPT::GET_NAME_OF_SCRIPT_WITH_THIS_ID(threadId);
		return retval;
	}

	void LUA_NATIVE_SCRIPT_SCRIPT_THREAD_ITERATOR_RESET(  )
	{
		SCRIPT::SCRIPT_THREAD_ITERATOR_RESET();
	}

	int LUA_NATIVE_SCRIPT_SCRIPT_THREAD_ITERATOR_GET_NEXT_THREAD_ID(  )
	{
		auto retval = SCRIPT::SCRIPT_THREAD_ITERATOR_GET_NEXT_THREAD_ID();
		return retval;
	}

	int LUA_NATIVE_SCRIPT_GET_ID_OF_THIS_THREAD(  )
	{
		auto retval = SCRIPT::GET_ID_OF_THIS_THREAD();
		return retval;
	}

	void LUA_NATIVE_SCRIPT_TERMINATE_THIS_THREAD(  )
	{
		SCRIPT::TERMINATE_THIS_THREAD();
	}

	int LUA_NATIVE_SCRIPT_GET_NUMBER_OF_THREADS_RUNNING_THE_SCRIPT_WITH_THIS_HASH( Hash scriptHash )
	{
		auto retval = SCRIPT::GET_NUMBER_OF_THREADS_RUNNING_THE_SCRIPT_WITH_THIS_HASH(scriptHash);
		return retval;
	}

	const char* LUA_NATIVE_SCRIPT_GET_THIS_SCRIPT_NAME(  )
	{
		auto retval = SCRIPT::GET_THIS_SCRIPT_NAME();
		return retval;
	}

	Hash LUA_NATIVE_SCRIPT_GET_HASH_OF_THIS_SCRIPT_NAME(  )
	{
		auto retval = SCRIPT::GET_HASH_OF_THIS_SCRIPT_NAME();
		return retval;
	}

	int LUA_NATIVE_SCRIPT_GET_NUMBER_OF_EVENTS( int eventGroup )
	{
		auto retval = SCRIPT::GET_NUMBER_OF_EVENTS(eventGroup);
		return retval;
	}

	bool LUA_NATIVE_SCRIPT_GET_EVENT_EXISTS( int eventGroup, int eventIndex )
	{
		auto retval = (bool)SCRIPT::GET_EVENT_EXISTS(eventGroup, eventIndex);
		return retval;
	}

	int LUA_NATIVE_SCRIPT_GET_EVENT_AT_INDEX( int eventGroup, int eventIndex )
	{
		auto retval = SCRIPT::GET_EVENT_AT_INDEX(eventGroup, eventIndex);
		return retval;
	}

	std::tuple<bool, Any> LUA_NATIVE_SCRIPT_GET_EVENT_DATA( int eventGroup, int eventIndex, Any eventData, int eventDataSize )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)SCRIPT::GET_EVENT_DATA(eventGroup, eventIndex, &eventData, eventDataSize);
		std::get<1>(return_values) = eventData;

		return return_values;
	}

	Any LUA_NATIVE_SCRIPT_TRIGGER_SCRIPT_EVENT( int eventGroup, Any eventData, int eventDataSize, int playerBits )
	{
		SCRIPT::TRIGGER_SCRIPT_EVENT(eventGroup, &eventData, eventDataSize, playerBits);
		return eventData;
	}

	void LUA_NATIVE_SCRIPT_SHUTDOWN_LOADING_SCREEN(  )
	{
		SCRIPT::SHUTDOWN_LOADING_SCREEN();
	}

	void LUA_NATIVE_SCRIPT_SET_NO_LOADING_SCREEN( bool toggle )
	{
		SCRIPT::SET_NO_LOADING_SCREEN(toggle);
	}

	bool LUA_NATIVE_SCRIPT_GET_NO_LOADING_SCREEN(  )
	{
		auto retval = (bool)SCRIPT::GET_NO_LOADING_SCREEN();
		return retval;
	}

	void LUA_NATIVE_SCRIPT_COMMIT_TO_LOADINGSCREEN_SELCTION(  )
	{
		SCRIPT::COMMIT_TO_LOADINGSCREEN_SELCTION();
	}

	bool LUA_NATIVE_SCRIPT_BG_IS_EXITFLAG_SET(  )
	{
		auto retval = (bool)SCRIPT::BG_IS_EXITFLAG_SET();
		return retval;
	}

	void LUA_NATIVE_SCRIPT_BG_SET_EXITFLAG_RESPONSE(  )
	{
		SCRIPT::BG_SET_EXITFLAG_RESPONSE();
	}

	void LUA_NATIVE_SCRIPT_BG_START_CONTEXT_HASH( Hash contextHash )
	{
		SCRIPT::BG_START_CONTEXT_HASH(contextHash);
	}

	void LUA_NATIVE_SCRIPT_BG_END_CONTEXT_HASH( Hash contextHash )
	{
		SCRIPT::BG_END_CONTEXT_HASH(contextHash);
	}

	void LUA_NATIVE_SCRIPT_BG_START_CONTEXT( const char* contextName )
	{
		SCRIPT::BG_START_CONTEXT(contextName);
	}

	void LUA_NATIVE_SCRIPT_BG_END_CONTEXT( const char* contextName )
	{
		SCRIPT::BG_END_CONTEXT(contextName);
	}

	bool LUA_NATIVE_SCRIPT_BG_DOES_LAUNCH_PARAM_EXIST( int scriptIndex, const char* p1 )
	{
		auto retval = (bool)SCRIPT::BG_DOES_LAUNCH_PARAM_EXIST(scriptIndex, p1);
		return retval;
	}

	int LUA_NATIVE_SCRIPT_BG_GET_LAUNCH_PARAM_VALUE( int scriptIndex, const char* p1 )
	{
		auto retval = SCRIPT::BG_GET_LAUNCH_PARAM_VALUE(scriptIndex, p1);
		return retval;
	}

	int LUA_NATIVE_SCRIPT_BG_GET_SCRIPT_ID_FROM_NAME_HASH( Hash p0 )
	{
		auto retval = SCRIPT::BG_GET_SCRIPT_ID_FROM_NAME_HASH(p0);
		return retval;
	}

	Any LUA_NATIVE_SCRIPT_SEND_TU_SCRIPT_EVENT( int eventGroup, Any eventData, int eventDataSize, int playerBits )
	{
		SCRIPT::SEND_TU_SCRIPT_EVENT(eventGroup, &eventData, eventDataSize, playerBits);
		return eventData;
	}

	Any LUA_NATIVE_SECURITY_REGISTER_SCRIPT_VARIABLE( Any variable )
	{
		SECURITY::REGISTER_SCRIPT_VARIABLE(&variable);
		return variable;
	}

	Any LUA_NATIVE_SECURITY_UNREGISTER_SCRIPT_VARIABLE( Any variable )
	{
		SECURITY::UNREGISTER_SCRIPT_VARIABLE(&variable);
		return variable;
	}

	void LUA_NATIVE_SECURITY_FORCE_CHECK_SCRIPT_VARIABLES(  )
	{
		SECURITY::FORCE_CHECK_SCRIPT_VARIABLES();
	}

	int LUA_NATIVE_SHAPETEST_START_SHAPE_TEST_LOS_PROBE( float x1, float y1, float z1, float x2, float y2, float z2, int flags, Entity entity, int p8 )
	{
		auto retval = SHAPETEST::START_SHAPE_TEST_LOS_PROBE(x1, y1, z1, x2, y2, z2, flags, entity, p8);
		return retval;
	}

	int LUA_NATIVE_SHAPETEST_START_EXPENSIVE_SYNCHRONOUS_SHAPE_TEST_LOS_PROBE( float x1, float y1, float z1, float x2, float y2, float z2, int flags, Entity entity, int p8 )
	{
		auto retval = SHAPETEST::START_EXPENSIVE_SYNCHRONOUS_SHAPE_TEST_LOS_PROBE(x1, y1, z1, x2, y2, z2, flags, entity, p8);
		return retval;
	}

	int LUA_NATIVE_SHAPETEST_START_SHAPE_TEST_BOUNDING_BOX( Entity entity, int flags1, int flags2 )
	{
		auto retval = SHAPETEST::START_SHAPE_TEST_BOUNDING_BOX(entity, flags1, flags2);
		return retval;
	}

	int LUA_NATIVE_SHAPETEST_START_SHAPE_TEST_BOX( float x, float y, float z, float dimX, float dimY, float dimZ, float rotX, float rotY, float rotZ, Any p9, int flags, Entity entity, Any p12 )
	{
		auto retval = SHAPETEST::START_SHAPE_TEST_BOX(x, y, z, dimX, dimY, dimZ, rotX, rotY, rotZ, p9, flags, entity, p12);
		return retval;
	}

	int LUA_NATIVE_SHAPETEST_START_SHAPE_TEST_BOUND( Entity entity, int flags1, int flags2 )
	{
		auto retval = SHAPETEST::START_SHAPE_TEST_BOUND(entity, flags1, flags2);
		return retval;
	}

	int LUA_NATIVE_SHAPETEST_START_SHAPE_TEST_CAPSULE( float x1, float y1, float z1, float x2, float y2, float z2, float radius, int flags, Entity entity, int p9 )
	{
		auto retval = SHAPETEST::START_SHAPE_TEST_CAPSULE(x1, y1, z1, x2, y2, z2, radius, flags, entity, p9);
		return retval;
	}

	int LUA_NATIVE_SHAPETEST_START_SHAPE_TEST_SWEPT_SPHERE( float x1, float y1, float z1, float x2, float y2, float z2, float radius, int flags, Entity entity, Any p9 )
	{
		auto retval = SHAPETEST::START_SHAPE_TEST_SWEPT_SPHERE(x1, y1, z1, x2, y2, z2, radius, flags, entity, p9);
		return retval;
	}

	std::tuple<int, Vector3, Vector3> LUA_NATIVE_SHAPETEST_START_SHAPE_TEST_MOUSE_CURSOR_LOS_PROBE( Vector3 pVec1, Vector3 pVec2, int flag, Entity entity, int flag2 )
	{
		std::tuple<int, Vector3, Vector3> return_values;
		std::get<0>(return_values) = SHAPETEST::START_SHAPE_TEST_MOUSE_CURSOR_LOS_PROBE(&pVec1, &pVec2, flag, entity, flag2);
		std::get<1>(return_values) = pVec1;
		std::get<2>(return_values) = pVec2;

		return return_values;
	}

	std::tuple<int, bool, Vector3, Vector3, Entity> LUA_NATIVE_SHAPETEST_GET_SHAPE_TEST_RESULT( int shapeTestHandle, bool hit, Vector3 endCoords, Vector3 surfaceNormal, Entity entityHit )
	{
		std::tuple<int, bool, Vector3, Vector3, Entity> return_values;
		std::get<0>(return_values) = SHAPETEST::GET_SHAPE_TEST_RESULT(shapeTestHandle, (BOOL*)&hit, &endCoords, &surfaceNormal, &entityHit);
		std::get<1>(return_values) = hit;
		std::get<2>(return_values) = endCoords;
		std::get<3>(return_values) = surfaceNormal;
		std::get<4>(return_values) = entityHit;

		return return_values;
	}

	std::tuple<int, bool, Vector3, Vector3, Hash, Entity> LUA_NATIVE_SHAPETEST_GET_SHAPE_TEST_RESULT_INCLUDING_MATERIAL( int shapeTestHandle, bool hit, Vector3 endCoords, Vector3 surfaceNormal, Hash materialHash, Entity entityHit )
	{
		std::tuple<int, bool, Vector3, Vector3, Hash, Entity> return_values;
		std::get<0>(return_values) = SHAPETEST::GET_SHAPE_TEST_RESULT_INCLUDING_MATERIAL(shapeTestHandle, (BOOL*)&hit, &endCoords, &surfaceNormal, &materialHash, &entityHit);
		std::get<1>(return_values) = hit;
		std::get<2>(return_values) = endCoords;
		std::get<3>(return_values) = surfaceNormal;
		std::get<4>(return_values) = materialHash;
		std::get<5>(return_values) = entityHit;

		return return_values;
	}

	void LUA_NATIVE_SHAPETEST_RELEASE_SCRIPT_GUID_FROM_ENTITY( Entity entityHit )
	{
		SHAPETEST::RELEASE_SCRIPT_GUID_FROM_ENTITY(entityHit);
	}

	int LUA_NATIVE_SOCIALCLUB_SC_INBOX_GET_TOTAL_NUM_MESSAGES(  )
	{
		auto retval = SOCIALCLUB::SC_INBOX_GET_TOTAL_NUM_MESSAGES();
		return retval;
	}

	Hash LUA_NATIVE_SOCIALCLUB_SC_INBOX_GET_MESSAGE_TYPE_AT_INDEX( int msgIndex )
	{
		auto retval = SOCIALCLUB::SC_INBOX_GET_MESSAGE_TYPE_AT_INDEX(msgIndex);
		return retval;
	}

	bool LUA_NATIVE_SOCIALCLUB_SC_INBOX_GET_MESSAGE_IS_READ_AT_INDEX( int msgIndex )
	{
		auto retval = (bool)SOCIALCLUB::SC_INBOX_GET_MESSAGE_IS_READ_AT_INDEX(msgIndex);
		return retval;
	}

	bool LUA_NATIVE_SOCIALCLUB_SC_INBOX_SET_MESSAGE_AS_READ_AT_INDEX( int msgIndex )
	{
		auto retval = (bool)SOCIALCLUB::SC_INBOX_SET_MESSAGE_AS_READ_AT_INDEX(msgIndex);
		return retval;
	}

	std::tuple<bool, int> LUA_NATIVE_SOCIALCLUB_SC_INBOX_MESSAGE_GET_DATA_INT( int p0, const char* context, int out )
	{
		std::tuple<bool, int> return_values;
		std::get<0>(return_values) = (bool)SOCIALCLUB::SC_INBOX_MESSAGE_GET_DATA_INT(p0, context, &out);
		std::get<1>(return_values) = out;

		return return_values;
	}

	bool LUA_NATIVE_SOCIALCLUB_SC_INBOX_MESSAGE_GET_DATA_BOOL( int p0, const char* p1 )
	{
		auto retval = (bool)SOCIALCLUB::SC_INBOX_MESSAGE_GET_DATA_BOOL(p0, p1);
		return retval;
	}

	std::tuple<bool, char> LUA_NATIVE_SOCIALCLUB_SC_INBOX_MESSAGE_GET_DATA_STRING( int p0, const char* context, char out )
	{
		std::tuple<bool, char> return_values;
		std::get<0>(return_values) = (bool)SOCIALCLUB::SC_INBOX_MESSAGE_GET_DATA_STRING(p0, context, &out);
		std::get<1>(return_values) = out;

		return return_values;
	}

	bool LUA_NATIVE_SOCIALCLUB_SC_INBOX_MESSAGE_DO_APPLY( int p0 )
	{
		auto retval = (bool)SOCIALCLUB::SC_INBOX_MESSAGE_DO_APPLY(p0);
		return retval;
	}

	const char* LUA_NATIVE_SOCIALCLUB_SC_INBOX_MESSAGE_GET_RAW_TYPE_AT_INDEX( int p0 )
	{
		auto retval = SOCIALCLUB::SC_INBOX_MESSAGE_GET_RAW_TYPE_AT_INDEX(p0);
		return retval;
	}

	Any LUA_NATIVE_SOCIALCLUB_SC_INBOX_MESSAGE_PUSH_GAMER_T0_RECIP_LIST( Any gamerHandle )
	{
		SOCIALCLUB::SC_INBOX_MESSAGE_PUSH_GAMER_T0_RECIP_LIST(&gamerHandle);
		return gamerHandle;
	}

	Any LUA_NATIVE_SOCIALCLUB_SC_INBOX_SEND_UGCSTATUPDATE_TO_RECIP_LIST( Any data )
	{
		SOCIALCLUB::SC_INBOX_SEND_UGCSTATUPDATE_TO_RECIP_LIST(&data);
		return data;
	}

	std::tuple<bool, Any> LUA_NATIVE_SOCIALCLUB_SC_INBOX_MESSAGE_GET_UGCDATA( int p0, Any p1 )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)SOCIALCLUB::SC_INBOX_MESSAGE_GET_UGCDATA(p0, &p1);
		std::get<1>(return_values) = p1;

		return return_values;
	}

	std::tuple<bool, Any> LUA_NATIVE_SOCIALCLUB_SC_INBOX_SEND_BOUNTY_TO_RECIP_LIST( Any data )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)SOCIALCLUB::SC_INBOX_SEND_BOUNTY_TO_RECIP_LIST(&data);
		std::get<1>(return_values) = data;

		return return_values;
	}

	std::tuple<bool, Any> LUA_NATIVE_SOCIALCLUB_SC_INBOX_GET_BOUNTY_DATA_AT_INDEX( int index, Any outData )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)SOCIALCLUB::SC_INBOX_GET_BOUNTY_DATA_AT_INDEX(index, &outData);
		std::get<1>(return_values) = outData;

		return return_values;
	}

	void LUA_NATIVE_SOCIALCLUB_SC_EMAIL_RETRIEVE_EMAILS( int offset, int limit )
	{
		SOCIALCLUB::SC_EMAIL_RETRIEVE_EMAILS(offset, limit);
	}

	int LUA_NATIVE_SOCIALCLUB_SC_EMAIL_GET_RETRIEVAL_STATUS(  )
	{
		auto retval = SOCIALCLUB::SC_EMAIL_GET_RETRIEVAL_STATUS();
		return retval;
	}

	int LUA_NATIVE_SOCIALCLUB_SC_EMAIL_GET_NUM_RETRIEVED_EMAILS(  )
	{
		auto retval = SOCIALCLUB::SC_EMAIL_GET_NUM_RETRIEVED_EMAILS();
		return retval;
	}

	std::tuple<bool, Any> LUA_NATIVE_SOCIALCLUB_SC_EMAIL_GET_EMAIL_AT_INDEX( int p0, Any p1 )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)SOCIALCLUB::SC_EMAIL_GET_EMAIL_AT_INDEX(p0, &p1);
		std::get<1>(return_values) = p1;

		return return_values;
	}

	Any LUA_NATIVE_SOCIALCLUB_SC_EMAIL_DELETE_EMAILS( Any p0, Any p1 )
	{
		SOCIALCLUB::SC_EMAIL_DELETE_EMAILS(&p0, p1);
		return p0;
	}

	Any LUA_NATIVE_SOCIALCLUB_SC_EMAIL_MESSAGE_PUSH_GAMER_TO_RECIP_LIST( Any gamerHandle )
	{
		SOCIALCLUB::SC_EMAIL_MESSAGE_PUSH_GAMER_TO_RECIP_LIST(&gamerHandle);
		return gamerHandle;
	}

	void LUA_NATIVE_SOCIALCLUB_SC_EMAIL_MESSAGE_CLEAR_RECIP_LIST(  )
	{
		SOCIALCLUB::SC_EMAIL_MESSAGE_CLEAR_RECIP_LIST();
	}

	void LUA_NATIVE_SOCIALCLUB_SC_EMAIL_SEND_EMAIL( const char* p0 )
	{
		SOCIALCLUB::SC_EMAIL_SEND_EMAIL(p0);
	}

	bool LUA_NATIVE_SOCIALCLUB_SC_EMAIL_SET_CURRENT_EMAIL_TAG( Any p0 )
	{
		auto retval = (bool)SOCIALCLUB::SC_EMAIL_SET_CURRENT_EMAIL_TAG(p0);
		return retval;
	}

	void LUA_NATIVE_SOCIALCLUB_SC_CACHE_NEW_ROCKSTAR_MSGS( bool toggle )
	{
		SOCIALCLUB::SC_CACHE_NEW_ROCKSTAR_MSGS(toggle);
	}

	bool LUA_NATIVE_SOCIALCLUB_SC_HAS_NEW_ROCKSTAR_MSG(  )
	{
		auto retval = (bool)SOCIALCLUB::SC_HAS_NEW_ROCKSTAR_MSG();
		return retval;
	}

	const char* LUA_NATIVE_SOCIALCLUB_SC_GET_NEW_ROCKSTAR_MSG(  )
	{
		auto retval = SOCIALCLUB::SC_GET_NEW_ROCKSTAR_MSG();
		return retval;
	}

	bool LUA_NATIVE_SOCIALCLUB_SC_PRESENCE_ATTR_SET_INT( Hash attrHash, int value )
	{
		auto retval = (bool)SOCIALCLUB::SC_PRESENCE_ATTR_SET_INT(attrHash, value);
		return retval;
	}

	bool LUA_NATIVE_SOCIALCLUB_SC_PRESENCE_ATTR_SET_FLOAT( Hash attrHash, float value )
	{
		auto retval = (bool)SOCIALCLUB::SC_PRESENCE_ATTR_SET_FLOAT(attrHash, value);
		return retval;
	}

	bool LUA_NATIVE_SOCIALCLUB_SC_PRESENCE_ATTR_SET_STRING( Hash attrHash, const char* value )
	{
		auto retval = (bool)SOCIALCLUB::SC_PRESENCE_ATTR_SET_STRING(attrHash, value);
		return retval;
	}

	bool LUA_NATIVE_SOCIALCLUB_SC_PRESENCE_SET_ACTIVITY_RATING( Any p0, float p1 )
	{
		auto retval = (bool)SOCIALCLUB::SC_PRESENCE_SET_ACTIVITY_RATING(p0, p1);
		return retval;
	}

	std::tuple<bool, int> LUA_NATIVE_SOCIALCLUB_SC_GAMERDATA_GET_INT( const char* name, int value )
	{
		std::tuple<bool, int> return_values;
		std::get<0>(return_values) = (bool)SOCIALCLUB::SC_GAMERDATA_GET_INT(name, &value);
		std::get<1>(return_values) = value;

		return return_values;
	}

	std::tuple<bool, float> LUA_NATIVE_SOCIALCLUB_SC_GAMERDATA_GET_FLOAT( const char* name, float value )
	{
		std::tuple<bool, float> return_values;
		std::get<0>(return_values) = (bool)SOCIALCLUB::SC_GAMERDATA_GET_FLOAT(name, &value);
		std::get<1>(return_values) = value;

		return return_values;
	}

	bool LUA_NATIVE_SOCIALCLUB_SC_GAMERDATA_GET_BOOL( const char* name )
	{
		auto retval = (bool)SOCIALCLUB::SC_GAMERDATA_GET_BOOL(name);
		return retval;
	}

	std::tuple<bool, char> LUA_NATIVE_SOCIALCLUB_SC_GAMERDATA_GET_STRING( const char* name, char value )
	{
		std::tuple<bool, char> return_values;
		std::get<0>(return_values) = (bool)SOCIALCLUB::SC_GAMERDATA_GET_STRING(name, &value);
		std::get<1>(return_values) = value;

		return return_values;
	}

	std::tuple<bool, float> LUA_NATIVE_SOCIALCLUB_SC_GAMERDATA_GET_ACTIVE_XP_BONUS( float value )
	{
		std::tuple<bool, float> return_values;
		std::get<0>(return_values) = (bool)SOCIALCLUB::SC_GAMERDATA_GET_ACTIVE_XP_BONUS(&value);
		std::get<1>(return_values) = value;

		return return_values;
	}

	std::tuple<bool, int> LUA_NATIVE_SOCIALCLUB_SC_PROFANITY_CHECK_STRING( const char* string, int token )
	{
		std::tuple<bool, int> return_values;
		std::get<0>(return_values) = (bool)SOCIALCLUB::SC_PROFANITY_CHECK_STRING(string, &token);
		std::get<1>(return_values) = token;

		return return_values;
	}

	std::tuple<bool, int> LUA_NATIVE_SOCIALCLUB_SC_PROFANITY_CHECK_STRING_UGC( const char* string, int token )
	{
		std::tuple<bool, int> return_values;
		std::get<0>(return_values) = (bool)SOCIALCLUB::SC_PROFANITY_CHECK_STRING_UGC(string, &token);
		std::get<1>(return_values) = token;

		return return_values;
	}

	bool LUA_NATIVE_SOCIALCLUB_SC_PROFANITY_GET_CHECK_IS_VALID( int token )
	{
		auto retval = (bool)SOCIALCLUB::SC_PROFANITY_GET_CHECK_IS_VALID(token);
		return retval;
	}

	bool LUA_NATIVE_SOCIALCLUB_SC_PROFANITY_GET_CHECK_IS_PENDING( int token )
	{
		auto retval = (bool)SOCIALCLUB::SC_PROFANITY_GET_CHECK_IS_PENDING(token);
		return retval;
	}

	bool LUA_NATIVE_SOCIALCLUB_SC_PROFANITY_GET_STRING_PASSED( int token )
	{
		auto retval = (bool)SOCIALCLUB::SC_PROFANITY_GET_STRING_PASSED(token);
		return retval;
	}

	int LUA_NATIVE_SOCIALCLUB_SC_PROFANITY_GET_STRING_STATUS( int token )
	{
		auto retval = SOCIALCLUB::SC_PROFANITY_GET_STRING_STATUS(token);
		return retval;
	}

	std::tuple<bool, int> LUA_NATIVE_SOCIALCLUB_SC_LICENSEPLATE_CHECK_STRING( const char* p0, int p1 )
	{
		std::tuple<bool, int> return_values;
		std::get<0>(return_values) = (bool)SOCIALCLUB::SC_LICENSEPLATE_CHECK_STRING(p0, &p1);
		std::get<1>(return_values) = p1;

		return return_values;
	}

	bool LUA_NATIVE_SOCIALCLUB_SC_LICENSEPLATE_GET_CHECK_IS_VALID( Any p0 )
	{
		auto retval = (bool)SOCIALCLUB::SC_LICENSEPLATE_GET_CHECK_IS_VALID(p0);
		return retval;
	}

	bool LUA_NATIVE_SOCIALCLUB_SC_LICENSEPLATE_GET_CHECK_IS_PENDING( Any p0 )
	{
		auto retval = (bool)SOCIALCLUB::SC_LICENSEPLATE_GET_CHECK_IS_PENDING(p0);
		return retval;
	}

	int LUA_NATIVE_SOCIALCLUB_SC_LICENSEPLATE_GET_COUNT( int token )
	{
		auto retval = SOCIALCLUB::SC_LICENSEPLATE_GET_COUNT(token);
		return retval;
	}

	const char* LUA_NATIVE_SOCIALCLUB_SC_LICENSEPLATE_GET_PLATE( int token, int plateIndex )
	{
		auto retval = SOCIALCLUB::SC_LICENSEPLATE_GET_PLATE(token, plateIndex);
		return retval;
	}

	const char* LUA_NATIVE_SOCIALCLUB_SC_LICENSEPLATE_GET_PLATE_DATA( int token, int plateIndex )
	{
		auto retval = SOCIALCLUB::SC_LICENSEPLATE_GET_PLATE_DATA(token, plateIndex);
		return retval;
	}

	std::tuple<bool, Any> LUA_NATIVE_SOCIALCLUB_SC_LICENSEPLATE_SET_PLATE_DATA( const char* oldPlateText, const char* newPlateText, Any plateData )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)SOCIALCLUB::SC_LICENSEPLATE_SET_PLATE_DATA(oldPlateText, newPlateText, &plateData);
		std::get<1>(return_values) = plateData;

		return return_values;
	}

	std::tuple<bool, Any, int> LUA_NATIVE_SOCIALCLUB_SC_LICENSEPLATE_ADD( const char* plateText, Any plateData, int token )
	{
		std::tuple<bool, Any, int> return_values;
		std::get<0>(return_values) = (bool)SOCIALCLUB::SC_LICENSEPLATE_ADD(plateText, &plateData, &token);
		std::get<1>(return_values) = plateData;
		std::get<2>(return_values) = token;

		return return_values;
	}

	bool LUA_NATIVE_SOCIALCLUB_SC_LICENSEPLATE_GET_ADD_IS_PENDING( int token )
	{
		auto retval = (bool)SOCIALCLUB::SC_LICENSEPLATE_GET_ADD_IS_PENDING(token);
		return retval;
	}

	int LUA_NATIVE_SOCIALCLUB_SC_LICENSEPLATE_GET_ADD_STATUS( int token )
	{
		auto retval = SOCIALCLUB::SC_LICENSEPLATE_GET_ADD_STATUS(token);
		return retval;
	}

	std::tuple<bool, int> LUA_NATIVE_SOCIALCLUB_SC_LICENSEPLATE_ISVALID( const char* plateText, int token )
	{
		std::tuple<bool, int> return_values;
		std::get<0>(return_values) = (bool)SOCIALCLUB::SC_LICENSEPLATE_ISVALID(plateText, &token);
		std::get<1>(return_values) = token;

		return return_values;
	}

	bool LUA_NATIVE_SOCIALCLUB_SC_LICENSEPLATE_GET_ISVALID_IS_PENDING( int token )
	{
		auto retval = (bool)SOCIALCLUB::SC_LICENSEPLATE_GET_ISVALID_IS_PENDING(token);
		return retval;
	}

	int LUA_NATIVE_SOCIALCLUB_SC_LICENSEPLATE_GET_ISVALID_STATUS( int token )
	{
		auto retval = SOCIALCLUB::SC_LICENSEPLATE_GET_ISVALID_STATUS(token);
		return retval;
	}

	bool LUA_NATIVE_SOCIALCLUB_SC_COMMUNITY_EVENT_IS_ACTIVE(  )
	{
		auto retval = (bool)SOCIALCLUB::SC_COMMUNITY_EVENT_IS_ACTIVE();
		return retval;
	}

	int LUA_NATIVE_SOCIALCLUB_SC_COMMUNITY_EVENT_GET_EVENT_ID(  )
	{
		auto retval = SOCIALCLUB::SC_COMMUNITY_EVENT_GET_EVENT_ID();
		return retval;
	}

	std::tuple<bool, int> LUA_NATIVE_SOCIALCLUB_SC_COMMUNITY_EVENT_GET_EXTRA_DATA_INT( const char* p0, int p1 )
	{
		std::tuple<bool, int> return_values;
		std::get<0>(return_values) = (bool)SOCIALCLUB::SC_COMMUNITY_EVENT_GET_EXTRA_DATA_INT(p0, &p1);
		std::get<1>(return_values) = p1;

		return return_values;
	}

	std::tuple<bool, float> LUA_NATIVE_SOCIALCLUB_SC_COMMUNITY_EVENT_GET_EXTRA_DATA_FLOAT( const char* p0, float p1 )
	{
		std::tuple<bool, float> return_values;
		std::get<0>(return_values) = (bool)SOCIALCLUB::SC_COMMUNITY_EVENT_GET_EXTRA_DATA_FLOAT(p0, &p1);
		std::get<1>(return_values) = p1;

		return return_values;
	}

	std::tuple<bool, char> LUA_NATIVE_SOCIALCLUB_SC_COMMUNITY_EVENT_GET_EXTRA_DATA_STRING( const char* p0, char p1 )
	{
		std::tuple<bool, char> return_values;
		std::get<0>(return_values) = (bool)SOCIALCLUB::SC_COMMUNITY_EVENT_GET_EXTRA_DATA_STRING(p0, &p1);
		std::get<1>(return_values) = p1;

		return return_values;
	}

	std::tuple<bool, char> LUA_NATIVE_SOCIALCLUB_SC_COMMUNITY_EVENT_GET_DISPLAY_NAME( char p0 )
	{
		std::tuple<bool, char> return_values;
		std::get<0>(return_values) = (bool)SOCIALCLUB::SC_COMMUNITY_EVENT_GET_DISPLAY_NAME(&p0);
		std::get<1>(return_values) = p0;

		return return_values;
	}

	bool LUA_NATIVE_SOCIALCLUB_SC_COMMUNITY_EVENT_IS_ACTIVE_FOR_TYPE( const char* p0 )
	{
		auto retval = (bool)SOCIALCLUB::SC_COMMUNITY_EVENT_IS_ACTIVE_FOR_TYPE(p0);
		return retval;
	}

	int LUA_NATIVE_SOCIALCLUB_SC_COMMUNITY_EVENT_GET_EVENT_ID_FOR_TYPE( const char* p0 )
	{
		auto retval = SOCIALCLUB::SC_COMMUNITY_EVENT_GET_EVENT_ID_FOR_TYPE(p0);
		return retval;
	}

	std::tuple<bool, int> LUA_NATIVE_SOCIALCLUB_SC_COMMUNITY_EVENT_GET_EXTRA_DATA_INT_FOR_TYPE( const char* p0, int p1, const char* p2 )
	{
		std::tuple<bool, int> return_values;
		std::get<0>(return_values) = (bool)SOCIALCLUB::SC_COMMUNITY_EVENT_GET_EXTRA_DATA_INT_FOR_TYPE(p0, &p1, p2);
		std::get<1>(return_values) = p1;

		return return_values;
	}

	std::tuple<bool, float> LUA_NATIVE_SOCIALCLUB_SC_COMMUNITY_EVENT_GET_EXTRA_DATA_FLOAT_FOR_TYPE( const char* p0, float p1, const char* p2 )
	{
		std::tuple<bool, float> return_values;
		std::get<0>(return_values) = (bool)SOCIALCLUB::SC_COMMUNITY_EVENT_GET_EXTRA_DATA_FLOAT_FOR_TYPE(p0, &p1, p2);
		std::get<1>(return_values) = p1;

		return return_values;
	}

	std::tuple<bool, char> LUA_NATIVE_SOCIALCLUB_SC_COMMUNITY_EVENT_GET_EXTRA_DATA_STRING_FOR_TYPE( const char* p0, char p1, const char* p2 )
	{
		std::tuple<bool, char> return_values;
		std::get<0>(return_values) = (bool)SOCIALCLUB::SC_COMMUNITY_EVENT_GET_EXTRA_DATA_STRING_FOR_TYPE(p0, &p1, p2);
		std::get<1>(return_values) = p1;

		return return_values;
	}

	std::tuple<bool, char> LUA_NATIVE_SOCIALCLUB_SC_COMMUNITY_EVENT_GET_DISPLAY_NAME_FOR_TYPE( char p0, const char* p1 )
	{
		std::tuple<bool, char> return_values;
		std::get<0>(return_values) = (bool)SOCIALCLUB::SC_COMMUNITY_EVENT_GET_DISPLAY_NAME_FOR_TYPE(&p0, p1);
		std::get<1>(return_values) = p0;

		return return_values;
	}

	bool LUA_NATIVE_SOCIALCLUB_SC_COMMUNITY_EVENT_IS_ACTIVE_BY_ID( int p0 )
	{
		auto retval = (bool)SOCIALCLUB::SC_COMMUNITY_EVENT_IS_ACTIVE_BY_ID(p0);
		return retval;
	}

	std::tuple<bool, int> LUA_NATIVE_SOCIALCLUB_SC_COMMUNITY_EVENT_GET_EXTRA_DATA_INT_BY_ID( int p0, const char* p1, int p2 )
	{
		std::tuple<bool, int> return_values;
		std::get<0>(return_values) = (bool)SOCIALCLUB::SC_COMMUNITY_EVENT_GET_EXTRA_DATA_INT_BY_ID(p0, p1, &p2);
		std::get<1>(return_values) = p2;

		return return_values;
	}

	std::tuple<bool, float> LUA_NATIVE_SOCIALCLUB_SC_COMMUNITY_EVENT_GET_EXTRA_DATA_FLOAT_BY_ID( int p0, const char* p1, float p2 )
	{
		std::tuple<bool, float> return_values;
		std::get<0>(return_values) = (bool)SOCIALCLUB::SC_COMMUNITY_EVENT_GET_EXTRA_DATA_FLOAT_BY_ID(p0, p1, &p2);
		std::get<1>(return_values) = p2;

		return return_values;
	}

	std::tuple<bool, char> LUA_NATIVE_SOCIALCLUB_SC_COMMUNITY_EVENT_GET_EXTRA_DATA_STRING_BY_ID( int p0, const char* p1, char p2 )
	{
		std::tuple<bool, char> return_values;
		std::get<0>(return_values) = (bool)SOCIALCLUB::SC_COMMUNITY_EVENT_GET_EXTRA_DATA_STRING_BY_ID(p0, p1, &p2);
		std::get<1>(return_values) = p2;

		return return_values;
	}

	std::tuple<bool, char> LUA_NATIVE_SOCIALCLUB_SC_COMMUNITY_EVENT_GET_DISPLAY_NAME_BY_ID( int p0, char p1 )
	{
		std::tuple<bool, char> return_values;
		std::get<0>(return_values) = (bool)SOCIALCLUB::SC_COMMUNITY_EVENT_GET_DISPLAY_NAME_BY_ID(p0, &p1);
		std::get<1>(return_values) = p1;

		return return_values;
	}

	bool LUA_NATIVE_SOCIALCLUB_SC_TRANSITION_NEWS_SHOW( Any p0 )
	{
		auto retval = (bool)SOCIALCLUB::SC_TRANSITION_NEWS_SHOW(p0);
		return retval;
	}

	bool LUA_NATIVE_SOCIALCLUB_SC_TRANSITION_NEWS_SHOW_TIMED( Any p0, Any p1 )
	{
		auto retval = (bool)SOCIALCLUB::SC_TRANSITION_NEWS_SHOW_TIMED(p0, p1);
		return retval;
	}

	bool LUA_NATIVE_SOCIALCLUB_SC_TRANSITION_NEWS_SHOW_NEXT_ITEM(  )
	{
		auto retval = (bool)SOCIALCLUB::SC_TRANSITION_NEWS_SHOW_NEXT_ITEM();
		return retval;
	}

	bool LUA_NATIVE_SOCIALCLUB_SC_TRANSITION_NEWS_HAS_EXTRA_DATA_TU(  )
	{
		auto retval = (bool)SOCIALCLUB::SC_TRANSITION_NEWS_HAS_EXTRA_DATA_TU();
		return retval;
	}

	std::tuple<bool, int> LUA_NATIVE_SOCIALCLUB_SC_TRANSITION_NEWS_GET_EXTRA_DATA_INT_TU( const char* p0, int p1 )
	{
		std::tuple<bool, int> return_values;
		std::get<0>(return_values) = (bool)SOCIALCLUB::SC_TRANSITION_NEWS_GET_EXTRA_DATA_INT_TU(p0, &p1);
		std::get<1>(return_values) = p1;

		return return_values;
	}

	void LUA_NATIVE_SOCIALCLUB_SC_TRANSITION_NEWS_END(  )
	{
		SOCIALCLUB::SC_TRANSITION_NEWS_END();
	}

	bool LUA_NATIVE_SOCIALCLUB_SC_PAUSE_NEWS_INIT_STARTER_PACK( Any p0 )
	{
		auto retval = (bool)SOCIALCLUB::SC_PAUSE_NEWS_INIT_STARTER_PACK(p0);
		return retval;
	}

	bool LUA_NATIVE_SOCIALCLUB_SC_PAUSE_NEWS_GET_PENDING_STORY( Any p0 )
	{
		auto retval = (bool)SOCIALCLUB::SC_PAUSE_NEWS_GET_PENDING_STORY(p0);
		return retval;
	}

	void LUA_NATIVE_SOCIALCLUB_SC_PAUSE_NEWS_SHUTDOWN(  )
	{
		SOCIALCLUB::SC_PAUSE_NEWS_SHUTDOWN();
	}

	const char* LUA_NATIVE_SOCIALCLUB_SC_ACCOUNT_INFO_GET_NICKNAME(  )
	{
		auto retval = SOCIALCLUB::SC_ACCOUNT_INFO_GET_NICKNAME();
		return retval;
	}

	std::tuple<bool, int> LUA_NATIVE_SOCIALCLUB_SC_ACHIEVEMENT_INFO_STATUS( int p0 )
	{
		std::tuple<bool, int> return_values;
		std::get<0>(return_values) = (bool)SOCIALCLUB::SC_ACHIEVEMENT_INFO_STATUS(&p0);
		std::get<1>(return_values) = p0;

		return return_values;
	}

	bool LUA_NATIVE_SOCIALCLUB_SC_HAS_ACHIEVEMENT_BEEN_PASSED( int achievementId )
	{
		auto retval = (bool)SOCIALCLUB::SC_HAS_ACHIEVEMENT_BEEN_PASSED(achievementId);
		return retval;
	}

	bool LUA_NATIVE_STATS_STAT_CLEAR_SLOT_FOR_RELOAD( int statSlot )
	{
		auto retval = (bool)STATS::STAT_CLEAR_SLOT_FOR_RELOAD(statSlot);
		return retval;
	}

	bool LUA_NATIVE_STATS_STAT_LOAD( int statSlot )
	{
		auto retval = (bool)STATS::STAT_LOAD(statSlot);
		return retval;
	}

	bool LUA_NATIVE_STATS_STAT_SAVE( int p0, bool p1, int p2, bool p3 )
	{
		auto retval = (bool)STATS::STAT_SAVE(p0, p1, p2, p3);
		return retval;
	}

	void LUA_NATIVE_STATS_STAT_SET_OPEN_SAVETYPE_IN_JOB( int p0 )
	{
		STATS::STAT_SET_OPEN_SAVETYPE_IN_JOB(p0);
	}

	bool LUA_NATIVE_STATS_STAT_LOAD_PENDING( int statSlot )
	{
		auto retval = (bool)STATS::STAT_LOAD_PENDING(statSlot);
		return retval;
	}

	bool LUA_NATIVE_STATS_STAT_SAVE_PENDING(  )
	{
		auto retval = (bool)STATS::STAT_SAVE_PENDING();
		return retval;
	}

	bool LUA_NATIVE_STATS_STAT_SAVE_PENDING_OR_REQUESTED(  )
	{
		auto retval = (bool)STATS::STAT_SAVE_PENDING_OR_REQUESTED();
		return retval;
	}

	bool LUA_NATIVE_STATS_STAT_DELETE_SLOT( int p0 )
	{
		auto retval = (bool)STATS::STAT_DELETE_SLOT(p0);
		return retval;
	}

	bool LUA_NATIVE_STATS_STAT_SLOT_IS_LOADED( int statSlot )
	{
		auto retval = (bool)STATS::STAT_SLOT_IS_LOADED(statSlot);
		return retval;
	}

	bool LUA_NATIVE_STATS_STAT_CLOUD_SLOT_LOAD_FAILED( int p0 )
	{
		auto retval = (bool)STATS::STAT_CLOUD_SLOT_LOAD_FAILED(p0);
		return retval;
	}

	int LUA_NATIVE_STATS_STAT_CLOUD_SLOT_LOAD_FAILED_CODE( Any p0 )
	{
		auto retval = STATS::STAT_CLOUD_SLOT_LOAD_FAILED_CODE(p0);
		return retval;
	}

	void LUA_NATIVE_STATS_STAT_SET_BLOCK_SAVES( bool toggle )
	{
		STATS::STAT_SET_BLOCK_SAVES(toggle);
	}

	bool LUA_NATIVE_STATS_STAT_GET_BLOCK_SAVES(  )
	{
		auto retval = (bool)STATS::STAT_GET_BLOCK_SAVES();
		return retval;
	}

	bool LUA_NATIVE_STATS_STAT_CLOUD_SLOT_SAVE_FAILED( Any p0 )
	{
		auto retval = (bool)STATS::STAT_CLOUD_SLOT_SAVE_FAILED(p0);
		return retval;
	}

	void LUA_NATIVE_STATS_STAT_CLEAR_PENDING_SAVES( Any p0 )
	{
		STATS::STAT_CLEAR_PENDING_SAVES(p0);
	}

	bool LUA_NATIVE_STATS_STAT_LOAD_DIRTY_READ_DETECTED(  )
	{
		auto retval = (bool)STATS::STAT_LOAD_DIRTY_READ_DETECTED();
		return retval;
	}

	void LUA_NATIVE_STATS_STAT_CLEAR_DIRTY_READ_DETECTED(  )
	{
		STATS::STAT_CLEAR_DIRTY_READ_DETECTED();
	}

	bool LUA_NATIVE_STATS_STAT_GET_LOAD_SAFE_TO_PROGRESS_TO_MP_FROM_SP(  )
	{
		auto retval = (bool)STATS::STAT_GET_LOAD_SAFE_TO_PROGRESS_TO_MP_FROM_SP();
		return retval;
	}

	Hash LUA_NATIVE_STATS_GET_STAT_HASH_FOR_CHARACTER_STAT_( int dataType, int statIndex, int charSlot )
	{
		auto retval = STATS::GET_STAT_HASH_FOR_CHARACTER_STAT_(dataType, statIndex, charSlot);
		return retval;
	}

	bool LUA_NATIVE_STATS_STAT_SET_INT( Hash statName, int value, bool save )
	{
		auto retval = (bool)STATS::STAT_SET_INT(statName, value, save);
		return retval;
	}

	bool LUA_NATIVE_STATS_STAT_SET_FLOAT( Hash statName, float value, bool save )
	{
		auto retval = (bool)STATS::STAT_SET_FLOAT(statName, value, save);
		return retval;
	}

	bool LUA_NATIVE_STATS_STAT_SET_BOOL( Hash statName, bool value, bool save )
	{
		auto retval = (bool)STATS::STAT_SET_BOOL(statName, value, save);
		return retval;
	}

	bool LUA_NATIVE_STATS_STAT_SET_GXT_LABEL( Hash statName, const char* value, bool save )
	{
		auto retval = (bool)STATS::STAT_SET_GXT_LABEL(statName, value, save);
		return retval;
	}

	std::tuple<bool, Any> LUA_NATIVE_STATS_STAT_SET_DATE( Hash statName, Any value, int numFields, bool save )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)STATS::STAT_SET_DATE(statName, &value, numFields, save);
		std::get<1>(return_values) = value;

		return return_values;
	}

	bool LUA_NATIVE_STATS_STAT_SET_STRING( Hash statName, const char* value, bool save )
	{
		auto retval = (bool)STATS::STAT_SET_STRING(statName, value, save);
		return retval;
	}

	bool LUA_NATIVE_STATS_STAT_SET_POS( Hash statName, float x, float y, float z, bool save )
	{
		auto retval = (bool)STATS::STAT_SET_POS(statName, x, y, z, save);
		return retval;
	}

	bool LUA_NATIVE_STATS_STAT_SET_MASKED_INT( Hash statName, int p1, int p2, int p3, bool save )
	{
		auto retval = (bool)STATS::STAT_SET_MASKED_INT(statName, p1, p2, p3, save);
		return retval;
	}

	bool LUA_NATIVE_STATS_STAT_SET_USER_ID( Hash statName, const char* value, bool save )
	{
		auto retval = (bool)STATS::STAT_SET_USER_ID(statName, value, save);
		return retval;
	}

	bool LUA_NATIVE_STATS_STAT_SET_CURRENT_POSIX_TIME( Hash statName, bool p1 )
	{
		auto retval = (bool)STATS::STAT_SET_CURRENT_POSIX_TIME(statName, p1);
		return retval;
	}

	std::tuple<bool, int> LUA_NATIVE_STATS_STAT_GET_INT( Hash statHash, int outValue, int p2 )
	{
		std::tuple<bool, int> return_values;
		std::get<0>(return_values) = (bool)STATS::STAT_GET_INT(statHash, &outValue, p2);
		std::get<1>(return_values) = outValue;

		return return_values;
	}

	std::tuple<bool, float> LUA_NATIVE_STATS_STAT_GET_FLOAT( Hash statHash, float outValue, Any p2 )
	{
		std::tuple<bool, float> return_values;
		std::get<0>(return_values) = (bool)STATS::STAT_GET_FLOAT(statHash, &outValue, p2);
		std::get<1>(return_values) = outValue;

		return return_values;
	}

	std::tuple<bool, bool> LUA_NATIVE_STATS_STAT_GET_BOOL( Hash statHash, bool outValue, Any p2 )
	{
		std::tuple<bool, bool> return_values;
		std::get<0>(return_values) = (bool)STATS::STAT_GET_BOOL(statHash, (BOOL*)&outValue, p2);
		std::get<1>(return_values) = outValue;

		return return_values;
	}

	std::tuple<bool, Any> LUA_NATIVE_STATS_STAT_GET_DATE( Hash statHash, Any outValue, int numFields, Any p3 )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)STATS::STAT_GET_DATE(statHash, &outValue, numFields, p3);
		std::get<1>(return_values) = outValue;

		return return_values;
	}

	const char* LUA_NATIVE_STATS_STAT_GET_STRING( Hash statHash, int p1 )
	{
		auto retval = STATS::STAT_GET_STRING(statHash, p1);
		return retval;
	}

	std::tuple<bool, float, float, float> LUA_NATIVE_STATS_STAT_GET_POS( Hash statName, float outX, float outY, float outZ, Any p4 )
	{
		std::tuple<bool, float, float, float> return_values;
		std::get<0>(return_values) = (bool)STATS::STAT_GET_POS(statName, &outX, &outY, &outZ, p4);
		std::get<1>(return_values) = outX;
		std::get<2>(return_values) = outY;
		std::get<3>(return_values) = outZ;

		return return_values;
	}

	std::tuple<bool, int> LUA_NATIVE_STATS_STAT_GET_MASKED_INT( Hash statHash, int outValue, int p2, int p3, Any p4 )
	{
		std::tuple<bool, int> return_values;
		std::get<0>(return_values) = (bool)STATS::STAT_GET_MASKED_INT(statHash, &outValue, p2, p3, p4);
		std::get<1>(return_values) = outValue;

		return return_values;
	}

	const char* LUA_NATIVE_STATS_STAT_GET_USER_ID( Hash statHash )
	{
		auto retval = STATS::STAT_GET_USER_ID(statHash);
		return retval;
	}

	const char* LUA_NATIVE_STATS_STAT_GET_LICENSE_PLATE( Hash statName )
	{
		auto retval = STATS::STAT_GET_LICENSE_PLATE(statName);
		return retval;
	}

	bool LUA_NATIVE_STATS_STAT_SET_LICENSE_PLATE( Hash statName, const char* str )
	{
		auto retval = (bool)STATS::STAT_SET_LICENSE_PLATE(statName, str);
		return retval;
	}

	void LUA_NATIVE_STATS_STAT_INCREMENT( Hash statName, float value )
	{
		STATS::STAT_INCREMENT(statName, value);
	}

	bool LUA_NATIVE_STATS_STAT_COMMUNITY_START_SYNCH(  )
	{
		auto retval = (bool)STATS::STAT_COMMUNITY_START_SYNCH();
		return retval;
	}

	bool LUA_NATIVE_STATS_STAT_COMMUNITY_SYNCH_IS_PENDING(  )
	{
		auto retval = (bool)STATS::STAT_COMMUNITY_SYNCH_IS_PENDING();
		return retval;
	}

	std::tuple<bool, float> LUA_NATIVE_STATS_STAT_COMMUNITY_GET_HISTORY( Hash statName, int p1, float outValue )
	{
		std::tuple<bool, float> return_values;
		std::get<0>(return_values) = (bool)STATS::STAT_COMMUNITY_GET_HISTORY(statName, p1, &outValue);
		std::get<1>(return_values) = outValue;

		return return_values;
	}

	void LUA_NATIVE_STATS_STAT_RESET_ALL_ONLINE_CHARACTER_STATS( int p0 )
	{
		STATS::STAT_RESET_ALL_ONLINE_CHARACTER_STATS(p0);
	}

	void LUA_NATIVE_STATS_STAT_LOCAL_RESET_ALL_ONLINE_CHARACTER_STATS( int p0 )
	{
		STATS::STAT_LOCAL_RESET_ALL_ONLINE_CHARACTER_STATS(p0);
	}

	int LUA_NATIVE_STATS_STAT_GET_NUMBER_OF_DAYS( Hash statName )
	{
		auto retval = STATS::STAT_GET_NUMBER_OF_DAYS(statName);
		return retval;
	}

	int LUA_NATIVE_STATS_STAT_GET_NUMBER_OF_HOURS( Hash statName )
	{
		auto retval = STATS::STAT_GET_NUMBER_OF_HOURS(statName);
		return retval;
	}

	int LUA_NATIVE_STATS_STAT_GET_NUMBER_OF_MINUTES( Hash statName )
	{
		auto retval = STATS::STAT_GET_NUMBER_OF_MINUTES(statName);
		return retval;
	}

	int LUA_NATIVE_STATS_STAT_GET_NUMBER_OF_SECONDS( Hash statName )
	{
		auto retval = STATS::STAT_GET_NUMBER_OF_SECONDS(statName);
		return retval;
	}

	void LUA_NATIVE_STATS_STAT_SET_PROFILE_SETTING_VALUE( int profileSetting, int value )
	{
		STATS::STAT_SET_PROFILE_SETTING_VALUE(profileSetting, value);
	}

	void LUA_NATIVE_STATS_STATS_COMPLETED_CHARACTER_CREATION( Any p0 )
	{
		STATS::STATS_COMPLETED_CHARACTER_CREATION(p0);
	}

	int LUA_NATIVE_STATS_PACKED_STAT_GET_INT_STAT_INDEX( int p0 )
	{
		auto retval = STATS::PACKED_STAT_GET_INT_STAT_INDEX(p0);
		return retval;
	}

	Hash LUA_NATIVE_STATS_GET_PACKED_INT_STAT_KEY( int index, bool spStat, bool charStat, int character )
	{
		auto retval = STATS::GET_PACKED_INT_STAT_KEY(index, spStat, charStat, character);
		return retval;
	}

	Hash LUA_NATIVE_STATS_GET_PACKED_TU_INT_STAT_KEY( int index, bool spStat, bool charStat, int character )
	{
		auto retval = STATS::GET_PACKED_TU_INT_STAT_KEY(index, spStat, charStat, character);
		return retval;
	}

	Hash LUA_NATIVE_STATS_GET_PACKED_NG_INT_STAT_KEY( int index, bool spStat, bool charStat, int character, const char* section )
	{
		auto retval = STATS::GET_PACKED_NG_INT_STAT_KEY(index, spStat, charStat, character, section);
		return retval;
	}

	bool LUA_NATIVE_STATS_GET_PACKED_STAT_BOOL_CODE( int index, int characterSlot )
	{
		auto retval = (bool)STATS::GET_PACKED_STAT_BOOL_CODE(index, characterSlot);
		return retval;
	}

	int LUA_NATIVE_STATS_GET_PACKED_STAT_INT_CODE( int index, int characterSlot )
	{
		auto retval = STATS::GET_PACKED_STAT_INT_CODE(index, characterSlot);
		return retval;
	}

	void LUA_NATIVE_STATS_SET_PACKED_STAT_BOOL_CODE( int index, bool value, int characterSlot )
	{
		STATS::SET_PACKED_STAT_BOOL_CODE(index, value, characterSlot);
	}

	void LUA_NATIVE_STATS_SET_PACKED_STAT_INT_CODE( int index, int value, int characterSlot )
	{
		STATS::SET_PACKED_STAT_INT_CODE(index, value, characterSlot);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_BACKGROUND_SCRIPT_ACTION( const char* action, int value )
	{
		STATS::PLAYSTATS_BACKGROUND_SCRIPT_ACTION(action, value);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_FLOW_LOW_( float posX, float posY, float posZ, const char* p3, Any p4, int amount )
	{
		STATS::PLAYSTATS_FLOW_LOW_(posX, posY, posZ, p3, p4, amount);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_NPC_INVITE( const char* p0 )
	{
		STATS::PLAYSTATS_NPC_INVITE(p0);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_AWARD_XP( int amount, Hash type, Hash category )
	{
		STATS::PLAYSTATS_AWARD_XP(amount, type, category);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_RANK_UP( int rank )
	{
		STATS::PLAYSTATS_RANK_UP(rank);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_STARTED_SESSION_IN_OFFLINEMODE(  )
	{
		STATS::PLAYSTATS_STARTED_SESSION_IN_OFFLINEMODE();
	}

	void LUA_NATIVE_STATS_PLAYSTATS_ACTIVITY_DONE( int p0, int activityId )
	{
		STATS::PLAYSTATS_ACTIVITY_DONE(p0, activityId);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_LEAVE_JOB_CHAIN( Any p0, Any p1, Any p2, Any p3, Any p4 )
	{
		STATS::PLAYSTATS_LEAVE_JOB_CHAIN(p0, p1, p2, p3, p4);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_MISSION_STARTED( const char* p0, Any p1, Any p2, bool p3 )
	{
		STATS::PLAYSTATS_MISSION_STARTED(p0, p1, p2, p3);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_MISSION_OVER( const char* p0, Any p1, Any p2, bool p3, bool p4, bool p5 )
	{
		STATS::PLAYSTATS_MISSION_OVER(p0, p1, p2, p3, p4, p5);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_MISSION_CHECKPOINT( const char* p0, Any p1, Any p2, Any p3 )
	{
		STATS::PLAYSTATS_MISSION_CHECKPOINT(p0, p1, p2, p3);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_RANDOM_MISSION_DONE( const char* name, Any p1, Any p2, Any p3 )
	{
		STATS::PLAYSTATS_RANDOM_MISSION_DONE(name, p1, p2, p3);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_ROS_BET( int amount, int act, Player player, float cm )
	{
		STATS::PLAYSTATS_ROS_BET(amount, act, player, cm);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_RACE_CHECKPOINT( Vehicle p0, Any p1, int p2, int p3, Any p4 )
	{
		STATS::PLAYSTATS_RACE_CHECKPOINT(p0, p1, p2, p3, p4);
	}

	std::tuple<bool, int, int> LUA_NATIVE_STATS_PLAYSTATS_CREATE_MATCH_HISTORY_ID_2( int playerAccountId, int posixTime )
	{
		std::tuple<bool, int, int> return_values;
		std::get<0>(return_values) = (bool)STATS::PLAYSTATS_CREATE_MATCH_HISTORY_ID_2(&playerAccountId, &posixTime);
		std::get<1>(return_values) = playerAccountId;
		std::get<2>(return_values) = posixTime;

		return return_values;
	}

	void LUA_NATIVE_STATS_PLAYSTATS_MATCH_STARTED( Any p0, Any p1, Any p2 )
	{
		STATS::PLAYSTATS_MATCH_STARTED(p0, p1, p2);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_SHOP_ITEM( Any p0, Any p1, Any p2, Any p3, Any p4 )
	{
		STATS::PLAYSTATS_SHOP_ITEM(p0, p1, p2, p3, p4);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_CRATE_DROP_MISSION_DONE( Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7 )
	{
		STATS::PLAYSTATS_CRATE_DROP_MISSION_DONE(p0, p1, p2, p3, p4, p5, p6, p7);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_CRATE_CREATED( float p0, float p1, float p2 )
	{
		STATS::PLAYSTATS_CRATE_CREATED(p0, p1, p2);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_HOLD_UP_MISSION_DONE( Any p0, Any p1, Any p2, Any p3 )
	{
		STATS::PLAYSTATS_HOLD_UP_MISSION_DONE(p0, p1, p2, p3);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_IMPORT_EXPORT_MISSION_DONE( Any p0, Any p1, Any p2, Any p3 )
	{
		STATS::PLAYSTATS_IMPORT_EXPORT_MISSION_DONE(p0, p1, p2, p3);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_RACE_TO_POINT_MISSION_DONE( int p0, Any p1, Any p2, Any p3 )
	{
		STATS::PLAYSTATS_RACE_TO_POINT_MISSION_DONE(p0, p1, p2, p3);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_ACQUIRED_HIDDEN_PACKAGE( Any p0 )
	{
		STATS::PLAYSTATS_ACQUIRED_HIDDEN_PACKAGE(p0);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_WEBSITE_VISITED( Hash scaleformHash, int p1 )
	{
		STATS::PLAYSTATS_WEBSITE_VISITED(scaleformHash, p1);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_FRIEND_ACTIVITY( int p0, bool p1 )
	{
		STATS::PLAYSTATS_FRIEND_ACTIVITY(p0, p1);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_ODDJOB_DONE( int totalTimeMs, int p1, bool p2 )
	{
		STATS::PLAYSTATS_ODDJOB_DONE(totalTimeMs, p1, p2);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_PROP_CHANGE( Ped p0, int p1, int p2, int p3 )
	{
		STATS::PLAYSTATS_PROP_CHANGE(p0, p1, p2, p3);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_CLOTH_CHANGE( Ped p0, Any p1, Any p2, Any p3, Any p4 )
	{
		STATS::PLAYSTATS_CLOTH_CHANGE(p0, p1, p2, p3, p4);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_WEAPON_MODE_CHANGE( Hash weaponHash, Hash componentHashTo, Hash componentHashFrom )
	{
		STATS::PLAYSTATS_WEAPON_MODE_CHANGE(weaponHash, componentHashTo, componentHashFrom);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_CHEAT_APPLIED( const char* cheat )
	{
		STATS::PLAYSTATS_CHEAT_APPLIED(cheat);
	}

	std::tuple<Any, Any, Any, Any> LUA_NATIVE_STATS_PLAYSTATS_JOB_ACTIVITY_END( Any p0, Any p1, Any p2, Any p3 )
	{
		std::tuple<Any, Any, Any, Any> return_values;
		STATS::PLAYSTATS_JOB_ACTIVITY_END(&p0, &p1, &p2, &p3);
		std::get<0>(return_values) = p0;
		std::get<1>(return_values) = p1;
		std::get<2>(return_values) = p2;
		std::get<3>(return_values) = p3;

		return return_values;
	}

	std::tuple<Any, Any, Any, Any> LUA_NATIVE_STATS_PLAYSTATS_JOB_BEND( Any p0, Any p1, Any p2, Any p3 )
	{
		std::tuple<Any, Any, Any, Any> return_values;
		STATS::PLAYSTATS_JOB_BEND(&p0, &p1, &p2, &p3);
		std::get<0>(return_values) = p0;
		std::get<1>(return_values) = p1;
		std::get<2>(return_values) = p2;
		std::get<3>(return_values) = p3;

		return return_values;
	}

	std::tuple<Any, Any, Any, Any> LUA_NATIVE_STATS_PLAYSTATS_JOB_LTS_END( Any p0, Any p1, Any p2, Any p3 )
	{
		std::tuple<Any, Any, Any, Any> return_values;
		STATS::PLAYSTATS_JOB_LTS_END(&p0, &p1, &p2, &p3);
		std::get<0>(return_values) = p0;
		std::get<1>(return_values) = p1;
		std::get<2>(return_values) = p2;
		std::get<3>(return_values) = p3;

		return return_values;
	}

	std::tuple<Any, Any, Any, Any> LUA_NATIVE_STATS_PLAYSTATS_JOB_LTS_ROUND_END( Any p0, Any p1, Any p2, Any p3 )
	{
		std::tuple<Any, Any, Any, Any> return_values;
		STATS::PLAYSTATS_JOB_LTS_ROUND_END(&p0, &p1, &p2, &p3);
		std::get<0>(return_values) = p0;
		std::get<1>(return_values) = p1;
		std::get<2>(return_values) = p2;
		std::get<3>(return_values) = p3;

		return return_values;
	}

	void LUA_NATIVE_STATS_PLAYSTATS_QUICKFIX_TOOL( int element, const char* item )
	{
		STATS::PLAYSTATS_QUICKFIX_TOOL(element, item);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_IDLE_KICK( int msStoodIdle )
	{
		STATS::PLAYSTATS_IDLE_KICK(msStoodIdle);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_SET_JOIN_TYPE( int joinType )
	{
		STATS::PLAYSTATS_SET_JOIN_TYPE(joinType);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_HEIST_SAVE_CHEAT( Hash hash, int p1 )
	{
		STATS::PLAYSTATS_HEIST_SAVE_CHEAT(hash, p1);
	}

	Any LUA_NATIVE_STATS_PLAYSTATS_APPEND_DIRECTOR_METRIC( Any p0 )
	{
		STATS::PLAYSTATS_APPEND_DIRECTOR_METRIC(&p0);
		return p0;
	}

	void LUA_NATIVE_STATS_PLAYSTATS_AWARD_BAD_SPORT( int id )
	{
		STATS::PLAYSTATS_AWARD_BAD_SPORT(id);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_PEGASUS_AS_PERSONAL_AIRCRAFT( Hash modelHash )
	{
		STATS::PLAYSTATS_PEGASUS_AS_PERSONAL_AIRCRAFT(modelHash);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_SHOPMENU_NAV_( Any p0, Any p1, Any p2 )
	{
		STATS::PLAYSTATS_SHOPMENU_NAV_(p0, p1, p2);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_FM_EVENT_CHALLENGES( Any p0 )
	{
		STATS::PLAYSTATS_FM_EVENT_CHALLENGES(p0);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_FM_EVENT_VEHICLETARGET( Any p0 )
	{
		STATS::PLAYSTATS_FM_EVENT_VEHICLETARGET(p0);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_FM_EVENT_URBANWARFARE( Any p0 )
	{
		STATS::PLAYSTATS_FM_EVENT_URBANWARFARE(p0);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_FM_EVENT_CHECKPOINTCOLLECTION( Any p0 )
	{
		STATS::PLAYSTATS_FM_EVENT_CHECKPOINTCOLLECTION(p0);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_FM_EVENT_ATOB( Any p0 )
	{
		STATS::PLAYSTATS_FM_EVENT_ATOB(p0);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_FM_EVENT_PENNEDIN( Any p0 )
	{
		STATS::PLAYSTATS_FM_EVENT_PENNEDIN(p0);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_FM_EVENT_PASSTHEPARCEL( Any p0 )
	{
		STATS::PLAYSTATS_FM_EVENT_PASSTHEPARCEL(p0);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_FM_EVENT_HOTPROPERTY( Any p0 )
	{
		STATS::PLAYSTATS_FM_EVENT_HOTPROPERTY(p0);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_FM_EVENT_DEADDROP( Any p0 )
	{
		STATS::PLAYSTATS_FM_EVENT_DEADDROP(p0);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_FM_EVENT_KINGOFTHECASTLE( Any p0 )
	{
		STATS::PLAYSTATS_FM_EVENT_KINGOFTHECASTLE(p0);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_FM_EVENT_CRIMINALDAMAGE( Any p0 )
	{
		STATS::PLAYSTATS_FM_EVENT_CRIMINALDAMAGE(p0);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_FM_EVENT_COMPETITIVEURBANWARFARE( Any p0 )
	{
		STATS::PLAYSTATS_FM_EVENT_COMPETITIVEURBANWARFARE(p0);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_FM_EVENT_HUNTBEAST( Any p0 )
	{
		STATS::PLAYSTATS_FM_EVENT_HUNTBEAST(p0);
	}

	Any LUA_NATIVE_STATS_PLAYSTATS_PIMENU_HIDE_OPTIONS( Any data )
	{
		STATS::PLAYSTATS_PIMENU_HIDE_OPTIONS(&data);
		return data;
	}

	int LUA_NATIVE_STATS_LEADERBOARDS_GET_NUMBER_OF_COLUMNS( int p0, Any p1 )
	{
		auto retval = STATS::LEADERBOARDS_GET_NUMBER_OF_COLUMNS(p0, p1);
		return retval;
	}

	int LUA_NATIVE_STATS_LEADERBOARDS_GET_COLUMN_ID( int p0, int p1, int p2 )
	{
		auto retval = STATS::LEADERBOARDS_GET_COLUMN_ID(p0, p1, p2);
		return retval;
	}

	int LUA_NATIVE_STATS_LEADERBOARDS_GET_COLUMN_TYPE( int p0, Any p1, Any p2 )
	{
		auto retval = STATS::LEADERBOARDS_GET_COLUMN_TYPE(p0, p1, p2);
		return retval;
	}

	int LUA_NATIVE_STATS_LEADERBOARDS_READ_CLEAR_ALL(  )
	{
		auto retval = STATS::LEADERBOARDS_READ_CLEAR_ALL();
		return retval;
	}

	int LUA_NATIVE_STATS_LEADERBOARDS_READ_CLEAR( Any p0, Any p1, Any p2 )
	{
		auto retval = STATS::LEADERBOARDS_READ_CLEAR(p0, p1, p2);
		return retval;
	}

	bool LUA_NATIVE_STATS_LEADERBOARDS_READ_PENDING( Any p0, Any p1, Any p2 )
	{
		auto retval = (bool)STATS::LEADERBOARDS_READ_PENDING(p0, p1, p2);
		return retval;
	}

	bool LUA_NATIVE_STATS_LEADERBOARDS_READ_ANY_PENDING(  )
	{
		auto retval = (bool)STATS::LEADERBOARDS_READ_ANY_PENDING();
		return retval;
	}

	bool LUA_NATIVE_STATS_LEADERBOARDS_READ_SUCCESSFUL( Any p0, Any p1, Any p2 )
	{
		auto retval = (bool)STATS::LEADERBOARDS_READ_SUCCESSFUL(p0, p1, p2);
		return retval;
	}

	std::tuple<bool, Any, Any> LUA_NATIVE_STATS_LEADERBOARDS2_READ_FRIENDS_BY_ROW( Any p0, Any p1, Any p2, bool p3, Any p4, Any p5 )
	{
		std::tuple<bool, Any, Any> return_values;
		std::get<0>(return_values) = (bool)STATS::LEADERBOARDS2_READ_FRIENDS_BY_ROW(&p0, &p1, p2, p3, p4, p5);
		std::get<1>(return_values) = p0;
		std::get<2>(return_values) = p1;

		return return_values;
	}

	std::tuple<bool, Any, Any> LUA_NATIVE_STATS_LEADERBOARDS2_READ_BY_HANDLE( Any p0, Any p1 )
	{
		std::tuple<bool, Any, Any> return_values;
		std::get<0>(return_values) = (bool)STATS::LEADERBOARDS2_READ_BY_HANDLE(&p0, &p1);
		std::get<1>(return_values) = p0;
		std::get<2>(return_values) = p1;

		return return_values;
	}

	std::tuple<bool, Any, Any, Any, Any> LUA_NATIVE_STATS_LEADERBOARDS2_READ_BY_ROW( Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6 )
	{
		std::tuple<bool, Any, Any, Any, Any> return_values;
		std::get<0>(return_values) = (bool)STATS::LEADERBOARDS2_READ_BY_ROW(&p0, &p1, p2, &p3, p4, &p5, p6);
		std::get<1>(return_values) = p0;
		std::get<2>(return_values) = p1;
		std::get<3>(return_values) = p3;
		std::get<4>(return_values) = p5;

		return return_values;
	}

	std::tuple<bool, Any> LUA_NATIVE_STATS_LEADERBOARDS2_READ_BY_RANK( Any p0, Any p1, Any p2 )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)STATS::LEADERBOARDS2_READ_BY_RANK(&p0, p1, p2);
		std::get<1>(return_values) = p0;

		return return_values;
	}

	std::tuple<bool, Any, Any> LUA_NATIVE_STATS_LEADERBOARDS2_READ_BY_RADIUS( Any p0, Any p1, Any p2 )
	{
		std::tuple<bool, Any, Any> return_values;
		std::get<0>(return_values) = (bool)STATS::LEADERBOARDS2_READ_BY_RADIUS(&p0, p1, &p2);
		std::get<1>(return_values) = p0;
		std::get<2>(return_values) = p2;

		return return_values;
	}

	std::tuple<bool, Any> LUA_NATIVE_STATS_LEADERBOARDS2_READ_BY_SCORE_INT( Any p0, Any p1, Any p2 )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)STATS::LEADERBOARDS2_READ_BY_SCORE_INT(&p0, p1, p2);
		std::get<1>(return_values) = p0;

		return return_values;
	}

	std::tuple<bool, Any> LUA_NATIVE_STATS_LEADERBOARDS2_READ_BY_SCORE_FLOAT( Any p0, float p1, Any p2 )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)STATS::LEADERBOARDS2_READ_BY_SCORE_FLOAT(&p0, p1, p2);
		std::get<1>(return_values) = p0;

		return return_values;
	}

	std::tuple<bool, Any, Any, Any> LUA_NATIVE_STATS_LEADERBOARDS2_READ_RANK_PREDICTION( Any p0, Any p1, Any p2 )
	{
		std::tuple<bool, Any, Any, Any> return_values;
		std::get<0>(return_values) = (bool)STATS::LEADERBOARDS2_READ_RANK_PREDICTION(&p0, &p1, &p2);
		std::get<1>(return_values) = p0;
		std::get<2>(return_values) = p1;
		std::get<3>(return_values) = p2;

		return return_values;
	}

	std::tuple<bool, Any> LUA_NATIVE_STATS_LEADERBOARDS2_READ_BY_PLAFORM( Any p0, const char* gamerHandleCsv, const char* platformName )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)STATS::LEADERBOARDS2_READ_BY_PLAFORM(&p0, gamerHandleCsv, platformName);
		std::get<1>(return_values) = p0;

		return return_values;
	}

	std::tuple<bool, Any> LUA_NATIVE_STATS_LEADERBOARDS2_READ_GET_ROW_DATA_START( Any p0 )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)STATS::LEADERBOARDS2_READ_GET_ROW_DATA_START(&p0);
		std::get<1>(return_values) = p0;

		return return_values;
	}

	void LUA_NATIVE_STATS_LEADERBOARDS2_READ_GET_ROW_DATA_END(  )
	{
		STATS::LEADERBOARDS2_READ_GET_ROW_DATA_END();
	}

	std::tuple<bool, Any> LUA_NATIVE_STATS_LEADERBOARDS2_READ_GET_ROW_DATA_INFO( Any p0, Any p1 )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)STATS::LEADERBOARDS2_READ_GET_ROW_DATA_INFO(p0, &p1);
		std::get<1>(return_values) = p1;

		return return_values;
	}

	int LUA_NATIVE_STATS_LEADERBOARDS2_READ_GET_ROW_DATA_INT( Any p0, Any p1 )
	{
		auto retval = STATS::LEADERBOARDS2_READ_GET_ROW_DATA_INT(p0, p1);
		return retval;
	}

	float LUA_NATIVE_STATS_LEADERBOARDS2_READ_GET_ROW_DATA_FLOAT( Any p0, Any p1 )
	{
		auto retval = STATS::LEADERBOARDS2_READ_GET_ROW_DATA_FLOAT(p0, p1);
		return retval;
	}

	std::tuple<bool, Any> LUA_NATIVE_STATS_LEADERBOARDS2_WRITE_DATA( Any p0 )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)STATS::LEADERBOARDS2_WRITE_DATA(&p0);
		std::get<1>(return_values) = p0;

		return return_values;
	}

	void LUA_NATIVE_STATS_LEADERBOARDS_WRITE_ADD_COLUMN( Any p0, Any p1, float p2 )
	{
		STATS::LEADERBOARDS_WRITE_ADD_COLUMN(p0, p1, p2);
	}

	void LUA_NATIVE_STATS_LEADERBOARDS_WRITE_ADD_COLUMN_LONG( Any p0, Any p1, Any p2 )
	{
		STATS::LEADERBOARDS_WRITE_ADD_COLUMN_LONG(p0, p1, p2);
	}

	std::tuple<bool, Any> LUA_NATIVE_STATS_LEADERBOARDS_CACHE_DATA_ROW( Any p0 )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)STATS::LEADERBOARDS_CACHE_DATA_ROW(&p0);
		std::get<1>(return_values) = p0;

		return return_values;
	}

	void LUA_NATIVE_STATS_LEADERBOARDS_CLEAR_CACHE_DATA(  )
	{
		STATS::LEADERBOARDS_CLEAR_CACHE_DATA();
	}

	void LUA_NATIVE_STATS_LEADERBOARDS_CLEAR_CACHE_DATA_ID( Any p0 )
	{
		STATS::LEADERBOARDS_CLEAR_CACHE_DATA_ID(p0);
	}

	bool LUA_NATIVE_STATS_LEADERBOARDS_GET_CACHE_EXISTS( Any p0 )
	{
		auto retval = (bool)STATS::LEADERBOARDS_GET_CACHE_EXISTS(p0);
		return retval;
	}

	int LUA_NATIVE_STATS_LEADERBOARDS_GET_CACHE_TIME( Any p0 )
	{
		auto retval = STATS::LEADERBOARDS_GET_CACHE_TIME(p0);
		return retval;
	}

	int LUA_NATIVE_STATS_LEADERBOARDS_GET_CACHE_NUMBER_OF_ROWS( Any p0 )
	{
		auto retval = STATS::LEADERBOARDS_GET_CACHE_NUMBER_OF_ROWS(p0);
		return retval;
	}

	std::tuple<bool, Any> LUA_NATIVE_STATS_LEADERBOARDS_GET_CACHE_DATA_ROW( Any p0, Any p1, Any p2 )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)STATS::LEADERBOARDS_GET_CACHE_DATA_ROW(p0, p1, &p2);
		std::get<1>(return_values) = p2;

		return return_values;
	}

	void LUA_NATIVE_STATS_PRESENCE_EVENT_UPDATESTAT_INT( Hash statHash, int value, int p2 )
	{
		STATS::PRESENCE_EVENT_UPDATESTAT_INT(statHash, value, p2);
	}

	void LUA_NATIVE_STATS_PRESENCE_EVENT_UPDATESTAT_FLOAT( Hash statHash, float value, int p2 )
	{
		STATS::PRESENCE_EVENT_UPDATESTAT_FLOAT(statHash, value, p2);
	}

	void LUA_NATIVE_STATS_PRESENCE_EVENT_UPDATESTAT_INT_WITH_STRING( Hash statHash, int value, int p2, const char* string )
	{
		STATS::PRESENCE_EVENT_UPDATESTAT_INT_WITH_STRING(statHash, value, p2, string);
	}

	bool LUA_NATIVE_STATS_GET_PLAYER_HAS_DRIVEN_ALL_VEHICLES(  )
	{
		auto retval = (bool)STATS::GET_PLAYER_HAS_DRIVEN_ALL_VEHICLES();
		return retval;
	}

	void LUA_NATIVE_STATS_SET_HAS_POSTED_ALL_VEHICLES_DRIVEN(  )
	{
		STATS::SET_HAS_POSTED_ALL_VEHICLES_DRIVEN();
	}

	void LUA_NATIVE_STATS_SET_PROFILE_SETTING_PROLOGUE_COMPLETE(  )
	{
		STATS::SET_PROFILE_SETTING_PROLOGUE_COMPLETE();
	}

	void LUA_NATIVE_STATS_SET_PROFILE_SETTING_SP_CHOP_MISSION_COMPLETE(  )
	{
		STATS::SET_PROFILE_SETTING_SP_CHOP_MISSION_COMPLETE();
	}

	void LUA_NATIVE_STATS_SET_PROFILE_SETTING_CREATOR_RACES_DONE( int value )
	{
		STATS::SET_PROFILE_SETTING_CREATOR_RACES_DONE(value);
	}

	void LUA_NATIVE_STATS_SET_PROFILE_SETTING_CREATOR_DM_DONE( int value )
	{
		STATS::SET_PROFILE_SETTING_CREATOR_DM_DONE(value);
	}

	void LUA_NATIVE_STATS_SET_PROFILE_SETTING_CREATOR_CTF_DONE( int value )
	{
		STATS::SET_PROFILE_SETTING_CREATOR_CTF_DONE(value);
	}

	void LUA_NATIVE_STATS_SET_JOB_ACTIVITY_ID_STARTED( Any p0, int characterSlot )
	{
		STATS::SET_JOB_ACTIVITY_ID_STARTED(p0, characterSlot);
	}

	void LUA_NATIVE_STATS_SET_FREEMODE_PROLOGUE_DONE( Any p0, int characterSlot )
	{
		STATS::SET_FREEMODE_PROLOGUE_DONE(p0, characterSlot);
	}

	void LUA_NATIVE_STATS_SET_FREEMODE_STRAND_PROGRESSION_STATUS( int profileSetting, int settingValue )
	{
		STATS::SET_FREEMODE_STRAND_PROGRESSION_STATUS(profileSetting, settingValue);
	}

	void LUA_NATIVE_STATS_STAT_NETWORK_INCREMENT_ON_SUICIDE( Any p0, float p1 )
	{
		STATS::STAT_NETWORK_INCREMENT_ON_SUICIDE(p0, p1);
	}

	void LUA_NATIVE_STATS_STAT_SET_CHEAT_IS_ACTIVE(  )
	{
		STATS::STAT_SET_CHEAT_IS_ACTIVE();
	}

	std::tuple<bool, Any, Any> LUA_NATIVE_STATS_LEADERBOARDS2_WRITE_DATA_FOR_EVENT_TYPE( Any p0, Any p1 )
	{
		std::tuple<bool, Any, Any> return_values;
		std::get<0>(return_values) = (bool)STATS::LEADERBOARDS2_WRITE_DATA_FOR_EVENT_TYPE(&p0, &p1);
		std::get<1>(return_values) = p0;
		std::get<2>(return_values) = p1;

		return return_values;
	}

	void LUA_NATIVE_STATS_FORCE_CLOUD_MP_STATS_DOWNLOAD_AND_OVERWRITE_LOCAL_SAVE(  )
	{
		STATS::FORCE_CLOUD_MP_STATS_DOWNLOAD_AND_OVERWRITE_LOCAL_SAVE();
	}

	void LUA_NATIVE_STATS_STAT_MIGRATE_CLEAR_FOR_RESTART(  )
	{
		STATS::STAT_MIGRATE_CLEAR_FOR_RESTART();
	}

	bool LUA_NATIVE_STATS_STAT_MIGRATE_SAVEGAME_START( const char* platformName )
	{
		auto retval = (bool)STATS::STAT_MIGRATE_SAVEGAME_START(platformName);
		return retval;
	}

	int LUA_NATIVE_STATS_STAT_MIGRATE_SAVEGAME_GET_STATUS(  )
	{
		auto retval = STATS::STAT_MIGRATE_SAVEGAME_GET_STATUS();
		return retval;
	}

	bool LUA_NATIVE_STATS_STAT_MIGRATE_CHECK_ALREADY_DONE(  )
	{
		auto retval = (bool)STATS::STAT_MIGRATE_CHECK_ALREADY_DONE();
		return retval;
	}

	bool LUA_NATIVE_STATS_STAT_MIGRATE_CHECK_START(  )
	{
		auto retval = (bool)STATS::STAT_MIGRATE_CHECK_START();
		return retval;
	}

	int LUA_NATIVE_STATS_STAT_MIGRATE_CHECK_GET_IS_PLATFORM_AVAILABLE( int p0 )
	{
		auto retval = STATS::STAT_MIGRATE_CHECK_GET_IS_PLATFORM_AVAILABLE(p0);
		return retval;
	}

	std::tuple<int, Any> LUA_NATIVE_STATS_STAT_MIGRATE_CHECK_GET_PLATFORM_STATUS( int p0, Any p1 )
	{
		std::tuple<int, Any> return_values;
		std::get<0>(return_values) = STATS::STAT_MIGRATE_CHECK_GET_PLATFORM_STATUS(p0, &p1);
		std::get<1>(return_values) = p1;

		return return_values;
	}

	std::tuple<int, Any> LUA_NATIVE_STATS_STAT_GET_SAVE_MIGRATION_STATUS( Any data )
	{
		std::tuple<int, Any> return_values;
		std::get<0>(return_values) = STATS::STAT_GET_SAVE_MIGRATION_STATUS(&data);
		std::get<1>(return_values) = data;

		return return_values;
	}

	bool LUA_NATIVE_STATS_STAT_SAVE_MIGRATION_CANCEL_PENDING_OPERATION(  )
	{
		auto retval = (bool)STATS::STAT_SAVE_MIGRATION_CANCEL_PENDING_OPERATION();
		return retval;
	}

	int LUA_NATIVE_STATS_STAT_GET_CANCEL_SAVE_MIGRATION_STATUS(  )
	{
		auto retval = STATS::STAT_GET_CANCEL_SAVE_MIGRATION_STATUS();
		return retval;
	}

	bool LUA_NATIVE_STATS_STAT_SAVE_MIGRATION_CONSUME_CONTENT( Hash contentId, const char* srcPlatform, const char* srcGamerHandle )
	{
		auto retval = (bool)STATS::STAT_SAVE_MIGRATION_CONSUME_CONTENT(contentId, srcPlatform, srcGamerHandle);
		return retval;
	}

	std::tuple<int, int> LUA_NATIVE_STATS_STAT_GET_SAVE_MIGRATION_CONSUME_CONTENT_STATUS( int p0 )
	{
		std::tuple<int, int> return_values;
		std::get<0>(return_values) = STATS::STAT_GET_SAVE_MIGRATION_CONSUME_CONTENT_STATUS(&p0);
		std::get<1>(return_values) = p0;

		return return_values;
	}

	void LUA_NATIVE_STATS_STAT_ENABLE_STATS_TRACKING(  )
	{
		STATS::STAT_ENABLE_STATS_TRACKING();
	}

	void LUA_NATIVE_STATS_STAT_DISABLE_STATS_TRACKING(  )
	{
		STATS::STAT_DISABLE_STATS_TRACKING();
	}

	bool LUA_NATIVE_STATS_STAT_IS_STATS_TRACKING_ENABLED(  )
	{
		auto retval = (bool)STATS::STAT_IS_STATS_TRACKING_ENABLED();
		return retval;
	}

	bool LUA_NATIVE_STATS_STAT_START_RECORD_STAT( int statType, int valueType )
	{
		auto retval = (bool)STATS::STAT_START_RECORD_STAT(statType, valueType);
		return retval;
	}

	bool LUA_NATIVE_STATS_STAT_STOP_RECORD_STAT(  )
	{
		auto retval = (bool)STATS::STAT_STOP_RECORD_STAT();
		return retval;
	}

	std::tuple<bool, float> LUA_NATIVE_STATS_STAT_GET_RECORDED_VALUE( float value )
	{
		std::tuple<bool, float> return_values;
		std::get<0>(return_values) = (bool)STATS::STAT_GET_RECORDED_VALUE(&value);
		std::get<1>(return_values) = value;

		return return_values;
	}

	bool LUA_NATIVE_STATS_STAT_IS_RECORDING_STAT(  )
	{
		auto retval = (bool)STATS::STAT_IS_RECORDING_STAT();
		return retval;
	}

	int LUA_NATIVE_STATS_STAT_GET_CURRENT_NEAR_MISS_NOCRASH_PRECISE(  )
	{
		auto retval = STATS::STAT_GET_CURRENT_NEAR_MISS_NOCRASH_PRECISE();
		return retval;
	}

	float LUA_NATIVE_STATS_STAT_GET_CURRENT_REAR_WHEEL_DISTANCE(  )
	{
		auto retval = STATS::STAT_GET_CURRENT_REAR_WHEEL_DISTANCE();
		return retval;
	}

	float LUA_NATIVE_STATS_STAT_GET_CURRENT_FRONT_WHEEL_DISTANCE(  )
	{
		auto retval = STATS::STAT_GET_CURRENT_FRONT_WHEEL_DISTANCE();
		return retval;
	}

	float LUA_NATIVE_STATS_STAT_GET_CURRENT_JUMP_DISTANCE(  )
	{
		auto retval = STATS::STAT_GET_CURRENT_JUMP_DISTANCE();
		return retval;
	}

	float LUA_NATIVE_STATS_STAT_GET_CURRENT_DRIVE_NOCRASH_DISTANCE(  )
	{
		auto retval = STATS::STAT_GET_CURRENT_DRIVE_NOCRASH_DISTANCE();
		return retval;
	}

	float LUA_NATIVE_STATS_STAT_GET_CURRENT_SPEED(  )
	{
		auto retval = STATS::STAT_GET_CURRENT_SPEED();
		return retval;
	}

	float LUA_NATIVE_STATS_STAT_GET_CURRENT_DRIVING_REVERSE_DISTANCE(  )
	{
		auto retval = STATS::STAT_GET_CURRENT_DRIVING_REVERSE_DISTANCE();
		return retval;
	}

	float LUA_NATIVE_STATS_STAT_GET_CURRENT_SKYDIVING_DISTANCE(  )
	{
		auto retval = STATS::STAT_GET_CURRENT_SKYDIVING_DISTANCE();
		return retval;
	}

	float LUA_NATIVE_STATS_STAT_GET_CHALLENGE_FLYING_DIST(  )
	{
		auto retval = STATS::STAT_GET_CHALLENGE_FLYING_DIST();
		return retval;
	}

	std::tuple<bool, float> LUA_NATIVE_STATS_STAT_GET_FLYING_ALTITUDE( float outValue )
	{
		std::tuple<bool, float> return_values;
		std::get<0>(return_values) = (bool)STATS::STAT_GET_FLYING_ALTITUDE(&outValue);
		std::get<1>(return_values) = outValue;

		return return_values;
	}

	bool LUA_NATIVE_STATS_STAT_IS_PLAYER_VEHICLE_ABOVE_OCEAN(  )
	{
		auto retval = (bool)STATS::STAT_IS_PLAYER_VEHICLE_ABOVE_OCEAN();
		return retval;
	}

	float LUA_NATIVE_STATS_STAT_GET_VEHICLE_BAIL_DISTANCE(  )
	{
		auto retval = STATS::STAT_GET_VEHICLE_BAIL_DISTANCE();
		return retval;
	}

	bool LUA_NATIVE_STATS_STAT_ROLLBACK_SAVE_MIGRATION(  )
	{
		auto retval = (bool)STATS::STAT_ROLLBACK_SAVE_MIGRATION();
		return retval;
	}

	void LUA_NATIVE_STATS_SET_HAS_SPECIALEDITION_CONTENT( int value )
	{
		STATS::SET_HAS_SPECIALEDITION_CONTENT(value);
	}

	void LUA_NATIVE_STATS_SET_SAVE_MIGRATION_TRANSACTION_ID_WARNING( int transactionId )
	{
		STATS::SET_SAVE_MIGRATION_TRANSACTION_ID_WARNING(transactionId);
	}

	void LUA_NATIVE_STATS_GET_BOSS_GOON_UUID( int characterSlot, Any p1, Any p2 )
	{
		STATS::GET_BOSS_GOON_UUID(characterSlot, p1, p2);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_BW_BOSSONBOSSDEATHMATCH( Any p0 )
	{
		STATS::PLAYSTATS_BW_BOSSONBOSSDEATHMATCH(p0);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_BW_YATCHATTACK( Any p0 )
	{
		STATS::PLAYSTATS_BW_YATCHATTACK(p0);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_BW_HUNT_THE_BOSS( Any p0 )
	{
		STATS::PLAYSTATS_BW_HUNT_THE_BOSS(p0);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_BW_SIGHTSEER( Any p0 )
	{
		STATS::PLAYSTATS_BW_SIGHTSEER(p0);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_BW_ASSAULT( Any p0 )
	{
		STATS::PLAYSTATS_BW_ASSAULT(p0);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_BW_BELLY_OF_THE_BEAST( Any p0 )
	{
		STATS::PLAYSTATS_BW_BELLY_OF_THE_BEAST(p0);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_BW_HEAD_HUNTER( Any p0 )
	{
		STATS::PLAYSTATS_BW_HEAD_HUNTER(p0);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_BW_FRAGILE_GOODS( Any p0 )
	{
		STATS::PLAYSTATS_BW_FRAGILE_GOODS(p0);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_BW_AIR_FREIGHT( Any p0 )
	{
		STATS::PLAYSTATS_BW_AIR_FREIGHT(p0);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_BC_CAR_JACKING( Any p0 )
	{
		STATS::PLAYSTATS_BC_CAR_JACKING(p0);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_BC_SMASH_AND_GRAB( Any p0 )
	{
		STATS::PLAYSTATS_BC_SMASH_AND_GRAB(p0);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_BC_PROTECTION_RACKET( Any p0 )
	{
		STATS::PLAYSTATS_BC_PROTECTION_RACKET(p0);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_BC_MOST_WANTED( Any p0 )
	{
		STATS::PLAYSTATS_BC_MOST_WANTED(p0);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_BC_FINDERS_KEEPERS( Any p0 )
	{
		STATS::PLAYSTATS_BC_FINDERS_KEEPERS(p0);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_BC_POINT_TO_POINT( Any p0 )
	{
		STATS::PLAYSTATS_BC_POINT_TO_POINT(p0);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_BC_CASHING( Any p0 )
	{
		STATS::PLAYSTATS_BC_CASHING(p0);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_BC_SALVAGE( Any p0 )
	{
		STATS::PLAYSTATS_BC_SALVAGE(p0);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_SPENT_PI_CUSTOM_LOADOUT( int amount )
	{
		STATS::PLAYSTATS_SPENT_PI_CUSTOM_LOADOUT(amount);
	}

	Any LUA_NATIVE_STATS_PLAYSTATS_BUY_CONTRABAND_MISSION( Any data )
	{
		STATS::PLAYSTATS_BUY_CONTRABAND_MISSION(&data);
		return data;
	}

	Any LUA_NATIVE_STATS_PLAYSTATS_SELL_CONTRABAND_MISSION( Any data )
	{
		STATS::PLAYSTATS_SELL_CONTRABAND_MISSION(&data);
		return data;
	}

	Any LUA_NATIVE_STATS_PLAYSTATS_DEFEND_CONTRABAND_MISSION( Any data )
	{
		STATS::PLAYSTATS_DEFEND_CONTRABAND_MISSION(&data);
		return data;
	}

	Any LUA_NATIVE_STATS_PLAYSTATS_RECOVER_CONTRABAND_MISSION( Any data )
	{
		STATS::PLAYSTATS_RECOVER_CONTRABAND_MISSION(&data);
		return data;
	}

	void LUA_NATIVE_STATS_PLAYSTATS_HIT_CONTRABAND_DESTROY_LIMIT( Any p0 )
	{
		STATS::PLAYSTATS_HIT_CONTRABAND_DESTROY_LIMIT(p0);
	}

	void LUA_NATIVE_STATS_START_BEING_BOSS( Any p0, Any p1 )
	{
		STATS::START_BEING_BOSS(p0, p1);
	}

	void LUA_NATIVE_STATS_START_BEING_GOON( Any p0, Any p1, Any p2 )
	{
		STATS::START_BEING_GOON(p0, p1, p2);
	}

	void LUA_NATIVE_STATS_END_BEING_BOSS( Any p0, Any p1, Any p2 )
	{
		STATS::END_BEING_BOSS(p0, p1, p2);
	}

	void LUA_NATIVE_STATS_END_BEING_GOON( Any p0, Any p1, Any p2, Any p3, Any p4 )
	{
		STATS::END_BEING_GOON(p0, p1, p2, p3, p4);
	}

	void LUA_NATIVE_STATS_HIRED_LIMO( Any p0, Any p1 )
	{
		STATS::HIRED_LIMO(p0, p1);
	}

	void LUA_NATIVE_STATS_ORDER_BOSS_VEHICLE( Any p0, Any p1, Hash vehicleHash )
	{
		STATS::ORDER_BOSS_VEHICLE(p0, p1, vehicleHash);
	}

	void LUA_NATIVE_STATS_CHANGE_UNIFORM( Any p0, Any p1, Any p2 )
	{
		STATS::CHANGE_UNIFORM(p0, p1, p2);
	}

	void LUA_NATIVE_STATS_CHANGE_GOON_LOOKING_FOR_WORK( Any p0 )
	{
		STATS::CHANGE_GOON_LOOKING_FOR_WORK(p0);
	}

	void LUA_NATIVE_STATS_SEND_METRIC_GHOSTING_TO_PLAYER( Any p0 )
	{
		STATS::SEND_METRIC_GHOSTING_TO_PLAYER(p0);
	}

	void LUA_NATIVE_STATS_SEND_METRIC_VIP_POACH( Any p0, Any p1, Any p2 )
	{
		STATS::SEND_METRIC_VIP_POACH(p0, p1, p2);
	}

	void LUA_NATIVE_STATS_SEND_METRIC_PUNISH_BODYGUARD( Any p0 )
	{
		STATS::SEND_METRIC_PUNISH_BODYGUARD(p0);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_START_TRACKING_STUNTS(  )
	{
		STATS::PLAYSTATS_START_TRACKING_STUNTS();
	}

	void LUA_NATIVE_STATS_PLAYSTATS_STOP_TRACKING_STUNTS(  )
	{
		STATS::PLAYSTATS_STOP_TRACKING_STUNTS();
	}

	void LUA_NATIVE_STATS_PLAYSTATS_MISSION_ENDED( Any p0 )
	{
		STATS::PLAYSTATS_MISSION_ENDED(p0);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_IMPEXP_MISSION_ENDED( Any p0 )
	{
		STATS::PLAYSTATS_IMPEXP_MISSION_ENDED(p0);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_CHANGE_MC_ROLE( Any p0, Any p1, Any p2, Any p3, int role, int p5, Any p6 )
	{
		STATS::PLAYSTATS_CHANGE_MC_ROLE(p0, p1, p2, p3, role, p5, p6);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_CHANGE_MC_OUTFIT( Any p0, Any p1, Any p2, Any p3, Any p4 )
	{
		STATS::PLAYSTATS_CHANGE_MC_OUTFIT(p0, p1, p2, p3, p4);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_SWITCH_MC_EMBLEM( Any p0, Any p1, Any p2, Any p3, Any p4 )
	{
		STATS::PLAYSTATS_SWITCH_MC_EMBLEM(p0, p1, p2, p3, p4);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_MC_REQUEST_BIKE( Any p0, Any p1, Any p2, Any p3, Any p4 )
	{
		STATS::PLAYSTATS_MC_REQUEST_BIKE(p0, p1, p2, p3, p4);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_MC_KILLED_RIVAL_MC_MEMBER( Any p0, Any p1, Any p2, Any p3, Any p4 )
	{
		STATS::PLAYSTATS_MC_KILLED_RIVAL_MC_MEMBER(p0, p1, p2, p3, p4);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_ABANDONED_MC( Any p0, Any p1, Any p2, Any p3, Any p4 )
	{
		STATS::PLAYSTATS_ABANDONED_MC(p0, p1, p2, p3, p4);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_EARNED_MC_POINTS( Any p0, Any p1, Any p2, Any p3, Any p4, Any p5 )
	{
		STATS::PLAYSTATS_EARNED_MC_POINTS(p0, p1, p2, p3, p4, p5);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_MC_FORMATION_ENDS( Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6 )
	{
		STATS::PLAYSTATS_MC_FORMATION_ENDS(p0, p1, p2, p3, p4, p5, p6);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_MC_CLUBHOUSE_ACTIVITY( Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7 )
	{
		STATS::PLAYSTATS_MC_CLUBHOUSE_ACTIVITY(p0, p1, p2, p3, p4, p5, p6, p7);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_RIVAL_BEHAVIOR( Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9 )
	{
		STATS::PLAYSTATS_RIVAL_BEHAVIOR(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_COPY_RANK_INTO_NEW_SLOT( Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6 )
	{
		STATS::PLAYSTATS_COPY_RANK_INTO_NEW_SLOT(p0, p1, p2, p3, p4, p5, p6);
	}

	Any LUA_NATIVE_STATS_PLAYSTATS_DUPE_DETECTED( Any data )
	{
		STATS::PLAYSTATS_DUPE_DETECTED(&data);
		return data;
	}

	void LUA_NATIVE_STATS_PLAYSTATS_BAN_ALERT( int p0 )
	{
		STATS::PLAYSTATS_BAN_ALERT(p0);
	}

	Any LUA_NATIVE_STATS_PLAYSTATS_GUNRUNNING_MISSION_ENDED( Any data )
	{
		STATS::PLAYSTATS_GUNRUNNING_MISSION_ENDED(&data);
		return data;
	}

	void LUA_NATIVE_STATS_PLAYSTATS_GUNRUNNING_RND( Any p0 )
	{
		STATS::PLAYSTATS_GUNRUNNING_RND(p0);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_BUSINESS_BATTLE_ENDED( Any p0 )
	{
		STATS::PLAYSTATS_BUSINESS_BATTLE_ENDED(p0);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_WAREHOUSE_MISSION_ENDED( Any p0 )
	{
		STATS::PLAYSTATS_WAREHOUSE_MISSION_ENDED(p0);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_NIGHTCLUB_MISSION_ENDED( Any p0 )
	{
		STATS::PLAYSTATS_NIGHTCLUB_MISSION_ENDED(p0);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_DJ_USAGE( Any p0, Any p1 )
	{
		STATS::PLAYSTATS_DJ_USAGE(p0, p1);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_MINIGAME_USAGE( Any p0, Any p1, Any p2 )
	{
		STATS::PLAYSTATS_MINIGAME_USAGE(p0, p1, p2);
	}

	Any LUA_NATIVE_STATS_PLAYSTATS_STONE_HATCHET_ENDED( Any data )
	{
		STATS::PLAYSTATS_STONE_HATCHET_ENDED(&data);
		return data;
	}

	Any LUA_NATIVE_STATS_PLAYSTATS_SMUGGLER_MISSION_ENDED( Any data )
	{
		STATS::PLAYSTATS_SMUGGLER_MISSION_ENDED(&data);
		return data;
	}

	Any LUA_NATIVE_STATS_PLAYSTATS_FM_HEIST_PREP_ENDED( Any data )
	{
		STATS::PLAYSTATS_FM_HEIST_PREP_ENDED(&data);
		return data;
	}

	Any LUA_NATIVE_STATS_PLAYSTATS_INSTANCED_HEIST_ENDED( Any data, Any p1, Any p2, Any p3 )
	{
		STATS::PLAYSTATS_INSTANCED_HEIST_ENDED(&data, p1, p2, p3);
		return data;
	}

	Any LUA_NATIVE_STATS_PLAYSTATS_DAR_CHECKPOINT( Any data )
	{
		STATS::PLAYSTATS_DAR_CHECKPOINT(&data);
		return data;
	}

	Any LUA_NATIVE_STATS_PLAYSTATS_ENTER_SESSION_PACK( Any data )
	{
		STATS::PLAYSTATS_ENTER_SESSION_PACK(&data);
		return data;
	}

	void LUA_NATIVE_STATS_PLAYSTATS_DRONE_USAGE( int p0, int p1, int p2 )
	{
		STATS::PLAYSTATS_DRONE_USAGE(p0, p1, p2);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_SPIN_WHEEL( int p0, int p1, int p2, int p3 )
	{
		STATS::PLAYSTATS_SPIN_WHEEL(p0, p1, p2, p3);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_ARENA_WARS_SPECTATOR( int p0, int p1, int p2, int p3, int p4 )
	{
		STATS::PLAYSTATS_ARENA_WARS_SPECTATOR(p0, p1, p2, p3, p4);
	}

	Any LUA_NATIVE_STATS_PLAYSTATS_ARENA_WARS_ENDED( Any data )
	{
		STATS::PLAYSTATS_ARENA_WARS_ENDED(&data);
		return data;
	}

	void LUA_NATIVE_STATS_PLAYSTATS_SWITCH_PASSIVE_MODE( bool p0, int p1, int p2, int p3 )
	{
		STATS::PLAYSTATS_SWITCH_PASSIVE_MODE(p0, p1, p2, p3);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_COLLECTIBLE_PICKED_UP( int p0, Hash objectHash, Any p2, Any p3, int moneyAmount, int rpAmount, int chipsAmount, Any p7, int p8, Any p9, Any p10 )
	{
		STATS::PLAYSTATS_COLLECTIBLE_PICKED_UP(p0, objectHash, p2, p3, moneyAmount, rpAmount, chipsAmount, p7, p8, p9, p10);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_CASINO_STORY_MISSION_ENDED( Any p0, Any p1 )
	{
		STATS::PLAYSTATS_CASINO_STORY_MISSION_ENDED(p0, p1);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_CASINO_CHIP( Any p0 )
	{
		STATS::PLAYSTATS_CASINO_CHIP(p0);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_CASINO_ROULETTE( Any p0 )
	{
		STATS::PLAYSTATS_CASINO_ROULETTE(p0);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_CASINO_BLACKJACK( Any p0 )
	{
		STATS::PLAYSTATS_CASINO_BLACKJACK(p0);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_CASINO_THREE_CARD_POKER( Any p0 )
	{
		STATS::PLAYSTATS_CASINO_THREE_CARD_POKER(p0);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_CASINO_SLOT_MACHINE( Any p0 )
	{
		STATS::PLAYSTATS_CASINO_SLOT_MACHINE(p0);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_CASINO_INSIDE_TRACK( Any p0 )
	{
		STATS::PLAYSTATS_CASINO_INSIDE_TRACK(p0);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_CASINO_LUCKY_SEVEN( Any p0 )
	{
		STATS::PLAYSTATS_CASINO_LUCKY_SEVEN(p0);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_CASINO_ROULETTE_LIGHT( Any p0 )
	{
		STATS::PLAYSTATS_CASINO_ROULETTE_LIGHT(p0);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_CASINO_BLACKJACK_LIGHT( Any p0 )
	{
		STATS::PLAYSTATS_CASINO_BLACKJACK_LIGHT(p0);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_CASINO_THREE_CARD_POKER_LIGHT( Any p0 )
	{
		STATS::PLAYSTATS_CASINO_THREE_CARD_POKER_LIGHT(p0);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_CASINO_SLOT_MACHINE_LIGHT( Any p0 )
	{
		STATS::PLAYSTATS_CASINO_SLOT_MACHINE_LIGHT(p0);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_CASINO_INSIDE_TRACK_LIGHT( Any p0 )
	{
		STATS::PLAYSTATS_CASINO_INSIDE_TRACK_LIGHT(p0);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_ARCADE_GAME( Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6 )
	{
		STATS::PLAYSTATS_ARCADE_GAME(p0, p1, p2, p3, p4, p5, p6);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_ARCADE_LOVE_MATCH( Any p0, Any p1 )
	{
		STATS::PLAYSTATS_ARCADE_LOVE_MATCH(p0, p1);
	}

	Any LUA_NATIVE_STATS_PLAYSTATS_FREEMODE_CASINO_MISSION_ENDED( Any data )
	{
		STATS::PLAYSTATS_FREEMODE_CASINO_MISSION_ENDED(&data);
		return data;
	}

	void LUA_NATIVE_STATS_PLAYSTATS_HEIST3_DRONE( Any p0 )
	{
		STATS::PLAYSTATS_HEIST3_DRONE(p0);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_HEIST3_HACK( Any p0, Any p1, Any p2, Any p3, Any p4, Any p5 )
	{
		STATS::PLAYSTATS_HEIST3_HACK(p0, p1, p2, p3, p4, p5);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_NPC_PHONE( Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9, Any p10, Any p11, Any p12 )
	{
		STATS::PLAYSTATS_NPC_PHONE(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_ARCADE_CABINET( Any p0 )
	{
		STATS::PLAYSTATS_ARCADE_CABINET(p0);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_HEIST3_FINALE( Any p0 )
	{
		STATS::PLAYSTATS_HEIST3_FINALE(p0);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_HEIST3_PREP( Any p0 )
	{
		STATS::PLAYSTATS_HEIST3_PREP(p0);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_MASTER_CONTROL( Any p0, Any p1, Any p2, Any p3 )
	{
		STATS::PLAYSTATS_MASTER_CONTROL(p0, p1, p2, p3);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_QUIT_MODE( Any p0, Any p1, Any p2, Any p3, Any p4 )
	{
		STATS::PLAYSTATS_QUIT_MODE(p0, p1, p2, p3, p4);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_MISSION_VOTE( Any p0 )
	{
		STATS::PLAYSTATS_MISSION_VOTE(p0);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_NJVS_VOTE( Any p0 )
	{
		STATS::PLAYSTATS_NJVS_VOTE(p0);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_KILL_YOURSELF(  )
	{
		STATS::PLAYSTATS_KILL_YOURSELF();
	}

	void LUA_NATIVE_STATS_PLAYSTATS_FM_MISSION_END( Any p0, Any p1, Any p2 )
	{
		STATS::PLAYSTATS_FM_MISSION_END(p0, p1, p2);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_HEIST4_PREP( Any p0 )
	{
		STATS::PLAYSTATS_HEIST4_PREP(p0);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_HEIST4_FINALE( Any p0 )
	{
		STATS::PLAYSTATS_HEIST4_FINALE(p0);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_HEIST4_HACK( Any p0, Any p1, Any p2, Any p3, Any p4 )
	{
		STATS::PLAYSTATS_HEIST4_HACK(p0, p1, p2, p3, p4);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_SUB_WEAP( Any p0, Any p1, Any p2, Any p3 )
	{
		STATS::PLAYSTATS_SUB_WEAP(p0, p1, p2, p3);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_FAST_TRVL( Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9, Any p10 )
	{
		STATS::PLAYSTATS_FAST_TRVL(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_HUB_ENTRY( Any p0 )
	{
		STATS::PLAYSTATS_HUB_ENTRY(p0);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_DJ_MISSION_ENDED( Any p0 )
	{
		STATS::PLAYSTATS_DJ_MISSION_ENDED(p0);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_ROBBERY_PREP( Any p0 )
	{
		STATS::PLAYSTATS_ROBBERY_PREP(p0);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_ROBBERY_FINALE( Any p0 )
	{
		STATS::PLAYSTATS_ROBBERY_FINALE(p0);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_EXTRA_EVENT( Any p0 )
	{
		STATS::PLAYSTATS_EXTRA_EVENT(p0);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_CARCLUB_POINTS( Any p0 )
	{
		STATS::PLAYSTATS_CARCLUB_POINTS(p0);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_CARCLUB_CHALLENGE( Any p0, Any p1, Any p2, Any p3 )
	{
		STATS::PLAYSTATS_CARCLUB_CHALLENGE(p0, p1, p2, p3);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_CARCLUB_PRIZE( int p0, Hash vehicleModel )
	{
		STATS::PLAYSTATS_CARCLUB_PRIZE(p0, vehicleModel);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_AWARD_NAV( Any p0, Any p1, Any p2, Any p3 )
	{
		STATS::PLAYSTATS_AWARD_NAV(p0, p1, p2, p3);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_INST_MISSION_END( Any p0 )
	{
		STATS::PLAYSTATS_INST_MISSION_END(p0);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_HUB_EXIT( Any p0 )
	{
		STATS::PLAYSTATS_HUB_EXIT(p0);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_VEH_DEL( int bossId1, int bossId2, int bossType, int vehicleID, int reason )
	{
		STATS::PLAYSTATS_VEH_DEL(bossId1, bossId2, bossType, vehicleID, reason);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_INVENTORY( Any p0 )
	{
		STATS::PLAYSTATS_INVENTORY(p0);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_ACID_MISSION_END_( Any p0 )
	{
		STATS::PLAYSTATS_ACID_MISSION_END_(p0);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_ACID_RND_( Any p0 )
	{
		STATS::PLAYSTATS_ACID_RND_(p0);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_IDLE_( Any p0, Any p1, Any p2 )
	{
		STATS::PLAYSTATS_IDLE_(p0, p1, p2);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_PLAYER_STYLE_( Any p0 )
	{
		STATS::PLAYSTATS_PLAYER_STYLE_(p0);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_RANDOM_EVENT_( Any p0 )
	{
		STATS::PLAYSTATS_RANDOM_EVENT_(p0);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_ATTRITION_STAGE_END_( Any p0 )
	{
		STATS::PLAYSTATS_ATTRITION_STAGE_END_(p0);
	}

	void LUA_NATIVE_STATS_PLAYSTATS_SHOWROOM_NAV_( Any p0, Any p1, Hash entity )
	{
		STATS::PLAYSTATS_SHOWROOM_NAV_(p0, p1, entity);
	}

	Any LUA_NATIVE_STATS_PLAYSTATS_SHOWROOM_OVERVIEW_( Any data )
	{
		STATS::PLAYSTATS_SHOWROOM_OVERVIEW_(&data);
		return data;
	}

	void LUA_NATIVE_STREAMING_LOAD_ALL_OBJECTS_NOW(  )
	{
		STREAMING::LOAD_ALL_OBJECTS_NOW();
	}

	void LUA_NATIVE_STREAMING_LOAD_SCENE( float x, float y, float z )
	{
		STREAMING::LOAD_SCENE(x, y, z);
	}

	bool LUA_NATIVE_STREAMING_NETWORK_UPDATE_LOAD_SCENE(  )
	{
		auto retval = (bool)STREAMING::NETWORK_UPDATE_LOAD_SCENE();
		return retval;
	}

	bool LUA_NATIVE_STREAMING_IS_NETWORK_LOADING_SCENE(  )
	{
		auto retval = (bool)STREAMING::IS_NETWORK_LOADING_SCENE();
		return retval;
	}

	void LUA_NATIVE_STREAMING_SET_INTERIOR_ACTIVE( int interiorID, bool toggle )
	{
		STREAMING::SET_INTERIOR_ACTIVE(interiorID, toggle);
	}

	void LUA_NATIVE_STREAMING_REQUEST_MODEL( Hash model )
	{
		STREAMING::REQUEST_MODEL(model);
	}

	void LUA_NATIVE_STREAMING_REQUEST_MENU_PED_MODEL( Hash model )
	{
		STREAMING::REQUEST_MENU_PED_MODEL(model);
	}

	bool LUA_NATIVE_STREAMING_HAS_MODEL_LOADED( Hash model )
	{
		auto retval = (bool)STREAMING::HAS_MODEL_LOADED(model);
		return retval;
	}

	void LUA_NATIVE_STREAMING_REQUEST_MODELS_IN_ROOM( Interior interior, const char* roomName )
	{
		STREAMING::REQUEST_MODELS_IN_ROOM(interior, roomName);
	}

	void LUA_NATIVE_STREAMING_SET_MODEL_AS_NO_LONGER_NEEDED( Hash model )
	{
		STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(model);
	}

	bool LUA_NATIVE_STREAMING_IS_MODEL_IN_CDIMAGE( Hash model )
	{
		auto retval = (bool)STREAMING::IS_MODEL_IN_CDIMAGE(model);
		return retval;
	}

	bool LUA_NATIVE_STREAMING_IS_MODEL_VALID( Hash model )
	{
		auto retval = (bool)STREAMING::IS_MODEL_VALID(model);
		return retval;
	}

	bool LUA_NATIVE_STREAMING_IS_MODEL_A_PED( Hash model )
	{
		auto retval = (bool)STREAMING::IS_MODEL_A_PED(model);
		return retval;
	}

	bool LUA_NATIVE_STREAMING_IS_MODEL_A_VEHICLE( Hash model )
	{
		auto retval = (bool)STREAMING::IS_MODEL_A_VEHICLE(model);
		return retval;
	}

	void LUA_NATIVE_STREAMING_REQUEST_COLLISION_AT_COORD( float x, float y, float z )
	{
		STREAMING::REQUEST_COLLISION_AT_COORD(x, y, z);
	}

	void LUA_NATIVE_STREAMING_REQUEST_COLLISION_FOR_MODEL( Hash model )
	{
		STREAMING::REQUEST_COLLISION_FOR_MODEL(model);
	}

	bool LUA_NATIVE_STREAMING_HAS_COLLISION_FOR_MODEL_LOADED( Hash model )
	{
		auto retval = (bool)STREAMING::HAS_COLLISION_FOR_MODEL_LOADED(model);
		return retval;
	}

	void LUA_NATIVE_STREAMING_REQUEST_ADDITIONAL_COLLISION_AT_COORD( float x, float y, float z )
	{
		STREAMING::REQUEST_ADDITIONAL_COLLISION_AT_COORD(x, y, z);
	}

	bool LUA_NATIVE_STREAMING_DOES_ANIM_DICT_EXIST( const char* animDict )
	{
		auto retval = (bool)STREAMING::DOES_ANIM_DICT_EXIST(animDict);
		return retval;
	}

	void LUA_NATIVE_STREAMING_REQUEST_ANIM_DICT( const char* animDict )
	{
		STREAMING::REQUEST_ANIM_DICT(animDict);
	}

	bool LUA_NATIVE_STREAMING_HAS_ANIM_DICT_LOADED( const char* animDict )
	{
		auto retval = (bool)STREAMING::HAS_ANIM_DICT_LOADED(animDict);
		return retval;
	}

	void LUA_NATIVE_STREAMING_REMOVE_ANIM_DICT( const char* animDict )
	{
		STREAMING::REMOVE_ANIM_DICT(animDict);
	}

	void LUA_NATIVE_STREAMING_REQUEST_ANIM_SET( const char* animSet )
	{
		STREAMING::REQUEST_ANIM_SET(animSet);
	}

	bool LUA_NATIVE_STREAMING_HAS_ANIM_SET_LOADED( const char* animSet )
	{
		auto retval = (bool)STREAMING::HAS_ANIM_SET_LOADED(animSet);
		return retval;
	}

	void LUA_NATIVE_STREAMING_REMOVE_ANIM_SET( const char* animSet )
	{
		STREAMING::REMOVE_ANIM_SET(animSet);
	}

	void LUA_NATIVE_STREAMING_REQUEST_CLIP_SET( const char* clipSet )
	{
		STREAMING::REQUEST_CLIP_SET(clipSet);
	}

	bool LUA_NATIVE_STREAMING_HAS_CLIP_SET_LOADED( const char* clipSet )
	{
		auto retval = (bool)STREAMING::HAS_CLIP_SET_LOADED(clipSet);
		return retval;
	}

	void LUA_NATIVE_STREAMING_REMOVE_CLIP_SET( const char* clipSet )
	{
		STREAMING::REMOVE_CLIP_SET(clipSet);
	}

	void LUA_NATIVE_STREAMING_REQUEST_IPL( const char* iplName )
	{
		STREAMING::REQUEST_IPL(iplName);
	}

	void LUA_NATIVE_STREAMING_REMOVE_IPL( const char* iplName )
	{
		STREAMING::REMOVE_IPL(iplName);
	}

	bool LUA_NATIVE_STREAMING_IS_IPL_ACTIVE( const char* iplName )
	{
		auto retval = (bool)STREAMING::IS_IPL_ACTIVE(iplName);
		return retval;
	}

	void LUA_NATIVE_STREAMING_SET_STREAMING( bool toggle )
	{
		STREAMING::SET_STREAMING(toggle);
	}

	void LUA_NATIVE_STREAMING_LOAD_GLOBAL_WATER_FILE( int waterType )
	{
		STREAMING::LOAD_GLOBAL_WATER_FILE(waterType);
	}

	int LUA_NATIVE_STREAMING_GET_GLOBAL_WATER_FILE(  )
	{
		auto retval = STREAMING::GET_GLOBAL_WATER_FILE();
		return retval;
	}

	void LUA_NATIVE_STREAMING_SET_GAME_PAUSES_FOR_STREAMING( bool toggle )
	{
		STREAMING::SET_GAME_PAUSES_FOR_STREAMING(toggle);
	}

	void LUA_NATIVE_STREAMING_SET_REDUCE_PED_MODEL_BUDGET( bool toggle )
	{
		STREAMING::SET_REDUCE_PED_MODEL_BUDGET(toggle);
	}

	void LUA_NATIVE_STREAMING_SET_REDUCE_VEHICLE_MODEL_BUDGET( bool toggle )
	{
		STREAMING::SET_REDUCE_VEHICLE_MODEL_BUDGET(toggle);
	}

	void LUA_NATIVE_STREAMING_SET_DITCH_POLICE_MODELS( bool toggle )
	{
		STREAMING::SET_DITCH_POLICE_MODELS(toggle);
	}

	int LUA_NATIVE_STREAMING_GET_NUMBER_OF_STREAMING_REQUESTS(  )
	{
		auto retval = STREAMING::GET_NUMBER_OF_STREAMING_REQUESTS();
		return retval;
	}

	void LUA_NATIVE_STREAMING_REQUEST_PTFX_ASSET(  )
	{
		STREAMING::REQUEST_PTFX_ASSET();
	}

	bool LUA_NATIVE_STREAMING_HAS_PTFX_ASSET_LOADED(  )
	{
		auto retval = (bool)STREAMING::HAS_PTFX_ASSET_LOADED();
		return retval;
	}

	void LUA_NATIVE_STREAMING_REMOVE_PTFX_ASSET(  )
	{
		STREAMING::REMOVE_PTFX_ASSET();
	}

	void LUA_NATIVE_STREAMING_REQUEST_NAMED_PTFX_ASSET( const char* fxName )
	{
		STREAMING::REQUEST_NAMED_PTFX_ASSET(fxName);
	}

	bool LUA_NATIVE_STREAMING_HAS_NAMED_PTFX_ASSET_LOADED( const char* fxName )
	{
		auto retval = (bool)STREAMING::HAS_NAMED_PTFX_ASSET_LOADED(fxName);
		return retval;
	}

	void LUA_NATIVE_STREAMING_REMOVE_NAMED_PTFX_ASSET( const char* fxName )
	{
		STREAMING::REMOVE_NAMED_PTFX_ASSET(fxName);
	}

	void LUA_NATIVE_STREAMING_SET_VEHICLE_POPULATION_BUDGET( int p0 )
	{
		STREAMING::SET_VEHICLE_POPULATION_BUDGET(p0);
	}

	void LUA_NATIVE_STREAMING_SET_PED_POPULATION_BUDGET( int p0 )
	{
		STREAMING::SET_PED_POPULATION_BUDGET(p0);
	}

	void LUA_NATIVE_STREAMING_CLEAR_FOCUS(  )
	{
		STREAMING::CLEAR_FOCUS();
	}

	void LUA_NATIVE_STREAMING_SET_FOCUS_POS_AND_VEL( float x, float y, float z, float offsetX, float offsetY, float offsetZ )
	{
		STREAMING::SET_FOCUS_POS_AND_VEL(x, y, z, offsetX, offsetY, offsetZ);
	}

	void LUA_NATIVE_STREAMING_SET_FOCUS_ENTITY( Entity entity )
	{
		STREAMING::SET_FOCUS_ENTITY(entity);
	}

	bool LUA_NATIVE_STREAMING_IS_ENTITY_FOCUS( Entity entity )
	{
		auto retval = (bool)STREAMING::IS_ENTITY_FOCUS(entity);
		return retval;
	}

	void LUA_NATIVE_STREAMING_SET_RESTORE_FOCUS_ENTITY( Entity p0 )
	{
		STREAMING::SET_RESTORE_FOCUS_ENTITY(p0);
	}

	void LUA_NATIVE_STREAMING_SET_MAPDATACULLBOX_ENABLED( const char* name, bool toggle )
	{
		STREAMING::SET_MAPDATACULLBOX_ENABLED(name, toggle);
	}

	void LUA_NATIVE_STREAMING_SET_ALL_MAPDATA_CULLED( Any p0 )
	{
		STREAMING::SET_ALL_MAPDATA_CULLED(p0);
	}

	int LUA_NATIVE_STREAMING_STREAMVOL_CREATE_SPHERE( float x, float y, float z, float rad, Any p4, Any p5 )
	{
		auto retval = STREAMING::STREAMVOL_CREATE_SPHERE(x, y, z, rad, p4, p5);
		return retval;
	}

	int LUA_NATIVE_STREAMING_STREAMVOL_CREATE_FRUSTUM( float p0, float p1, float p2, float p3, float p4, float p5, float p6, Any p7, Any p8 )
	{
		auto retval = STREAMING::STREAMVOL_CREATE_FRUSTUM(p0, p1, p2, p3, p4, p5, p6, p7, p8);
		return retval;
	}

	int LUA_NATIVE_STREAMING_STREAMVOL_CREATE_LINE( float p0, float p1, float p2, float p3, float p4, float p5, Any p6 )
	{
		auto retval = STREAMING::STREAMVOL_CREATE_LINE(p0, p1, p2, p3, p4, p5, p6);
		return retval;
	}

	void LUA_NATIVE_STREAMING_STREAMVOL_DELETE( Any unused )
	{
		STREAMING::STREAMVOL_DELETE(unused);
	}

	bool LUA_NATIVE_STREAMING_STREAMVOL_HAS_LOADED( Any unused )
	{
		auto retval = (bool)STREAMING::STREAMVOL_HAS_LOADED(unused);
		return retval;
	}

	bool LUA_NATIVE_STREAMING_STREAMVOL_IS_VALID( Any unused )
	{
		auto retval = (bool)STREAMING::STREAMVOL_IS_VALID(unused);
		return retval;
	}

	bool LUA_NATIVE_STREAMING_IS_STREAMVOL_ACTIVE(  )
	{
		auto retval = (bool)STREAMING::IS_STREAMVOL_ACTIVE();
		return retval;
	}

	bool LUA_NATIVE_STREAMING_NEW_LOAD_SCENE_START( float posX, float posY, float posZ, float offsetX, float offsetY, float offsetZ, float radius, int p7 )
	{
		auto retval = (bool)STREAMING::NEW_LOAD_SCENE_START(posX, posY, posZ, offsetX, offsetY, offsetZ, radius, p7);
		return retval;
	}

	bool LUA_NATIVE_STREAMING_NEW_LOAD_SCENE_START_SPHERE( float x, float y, float z, float radius, Any p4 )
	{
		auto retval = (bool)STREAMING::NEW_LOAD_SCENE_START_SPHERE(x, y, z, radius, p4);
		return retval;
	}

	void LUA_NATIVE_STREAMING_NEW_LOAD_SCENE_STOP(  )
	{
		STREAMING::NEW_LOAD_SCENE_STOP();
	}

	bool LUA_NATIVE_STREAMING_IS_NEW_LOAD_SCENE_ACTIVE(  )
	{
		auto retval = (bool)STREAMING::IS_NEW_LOAD_SCENE_ACTIVE();
		return retval;
	}

	bool LUA_NATIVE_STREAMING_IS_NEW_LOAD_SCENE_LOADED(  )
	{
		auto retval = (bool)STREAMING::IS_NEW_LOAD_SCENE_LOADED();
		return retval;
	}

	bool LUA_NATIVE_STREAMING_IS_SAFE_TO_START_PLAYER_SWITCH(  )
	{
		auto retval = (bool)STREAMING::IS_SAFE_TO_START_PLAYER_SWITCH();
		return retval;
	}

	void LUA_NATIVE_STREAMING_START_PLAYER_SWITCH( Ped from, Ped to, int flags, int switchType )
	{
		STREAMING::START_PLAYER_SWITCH(from, to, flags, switchType);
	}

	void LUA_NATIVE_STREAMING_STOP_PLAYER_SWITCH(  )
	{
		STREAMING::STOP_PLAYER_SWITCH();
	}

	bool LUA_NATIVE_STREAMING_IS_PLAYER_SWITCH_IN_PROGRESS(  )
	{
		auto retval = (bool)STREAMING::IS_PLAYER_SWITCH_IN_PROGRESS();
		return retval;
	}

	int LUA_NATIVE_STREAMING_GET_PLAYER_SWITCH_TYPE(  )
	{
		auto retval = STREAMING::GET_PLAYER_SWITCH_TYPE();
		return retval;
	}

	int LUA_NATIVE_STREAMING_GET_IDEAL_PLAYER_SWITCH_TYPE( float x1, float y1, float z1, float x2, float y2, float z2 )
	{
		auto retval = STREAMING::GET_IDEAL_PLAYER_SWITCH_TYPE(x1, y1, z1, x2, y2, z2);
		return retval;
	}

	int LUA_NATIVE_STREAMING_GET_PLAYER_SWITCH_STATE(  )
	{
		auto retval = STREAMING::GET_PLAYER_SWITCH_STATE();
		return retval;
	}

	int LUA_NATIVE_STREAMING_GET_PLAYER_SHORT_SWITCH_STATE(  )
	{
		auto retval = STREAMING::GET_PLAYER_SHORT_SWITCH_STATE();
		return retval;
	}

	void LUA_NATIVE_STREAMING_SET_PLAYER_SHORT_SWITCH_STYLE( int p0 )
	{
		STREAMING::SET_PLAYER_SHORT_SWITCH_STYLE(p0);
	}

	int LUA_NATIVE_STREAMING_GET_PLAYER_SWITCH_JUMP_CUT_INDEX(  )
	{
		auto retval = STREAMING::GET_PLAYER_SWITCH_JUMP_CUT_INDEX();
		return retval;
	}

	void LUA_NATIVE_STREAMING_SET_PLAYER_SWITCH_OUTRO( float cameraCoordX, float cameraCoordY, float cameraCoordZ, float camRotationX, float camRotationY, float camRotationZ, float camFov, float camFarClip, int rotationOrder )
	{
		STREAMING::SET_PLAYER_SWITCH_OUTRO(cameraCoordX, cameraCoordY, cameraCoordZ, camRotationX, camRotationY, camRotationZ, camFov, camFarClip, rotationOrder);
	}

	void LUA_NATIVE_STREAMING_SET_PLAYER_SWITCH_ESTABLISHING_SHOT( const char* name )
	{
		STREAMING::SET_PLAYER_SWITCH_ESTABLISHING_SHOT(name);
	}

	void LUA_NATIVE_STREAMING_ALLOW_PLAYER_SWITCH_PAN(  )
	{
		STREAMING::ALLOW_PLAYER_SWITCH_PAN();
	}

	void LUA_NATIVE_STREAMING_ALLOW_PLAYER_SWITCH_OUTRO(  )
	{
		STREAMING::ALLOW_PLAYER_SWITCH_OUTRO();
	}

	void LUA_NATIVE_STREAMING_ALLOW_PLAYER_SWITCH_ASCENT(  )
	{
		STREAMING::ALLOW_PLAYER_SWITCH_ASCENT();
	}

	void LUA_NATIVE_STREAMING_ALLOW_PLAYER_SWITCH_DESCENT(  )
	{
		STREAMING::ALLOW_PLAYER_SWITCH_DESCENT();
	}

	bool LUA_NATIVE_STREAMING_IS_SWITCH_READY_FOR_DESCENT(  )
	{
		auto retval = (bool)STREAMING::IS_SWITCH_READY_FOR_DESCENT();
		return retval;
	}

	void LUA_NATIVE_STREAMING_ENABLE_SWITCH_PAUSE_BEFORE_DESCENT(  )
	{
		STREAMING::ENABLE_SWITCH_PAUSE_BEFORE_DESCENT();
	}

	void LUA_NATIVE_STREAMING_DISABLE_SWITCH_OUTRO_FX(  )
	{
		STREAMING::DISABLE_SWITCH_OUTRO_FX();
	}

	void LUA_NATIVE_STREAMING_SWITCH_TO_MULTI_FIRSTPART( Ped ped, int flags, int switchType )
	{
		STREAMING::SWITCH_TO_MULTI_FIRSTPART(ped, flags, switchType);
	}

	void LUA_NATIVE_STREAMING_SWITCH_TO_MULTI_SECONDPART( Ped ped )
	{
		STREAMING::SWITCH_TO_MULTI_SECONDPART(ped);
	}

	bool LUA_NATIVE_STREAMING_IS_SWITCH_TO_MULTI_FIRSTPART_FINISHED(  )
	{
		auto retval = (bool)STREAMING::IS_SWITCH_TO_MULTI_FIRSTPART_FINISHED();
		return retval;
	}

	int LUA_NATIVE_STREAMING_GET_PLAYER_SWITCH_INTERP_OUT_DURATION(  )
	{
		auto retval = STREAMING::GET_PLAYER_SWITCH_INTERP_OUT_DURATION();
		return retval;
	}

	int LUA_NATIVE_STREAMING_GET_PLAYER_SWITCH_INTERP_OUT_CURRENT_TIME(  )
	{
		auto retval = STREAMING::GET_PLAYER_SWITCH_INTERP_OUT_CURRENT_TIME();
		return retval;
	}

	bool LUA_NATIVE_STREAMING_IS_SWITCH_SKIPPING_DESCENT(  )
	{
		auto retval = (bool)STREAMING::IS_SWITCH_SKIPPING_DESCENT();
		return retval;
	}

	void LUA_NATIVE_STREAMING_SET_SCENE_STREAMING_TRACKS_CAM_POS_THIS_FRAME(  )
	{
		STREAMING::SET_SCENE_STREAMING_TRACKS_CAM_POS_THIS_FRAME();
	}

	float LUA_NATIVE_STREAMING_GET_LODSCALE(  )
	{
		auto retval = STREAMING::GET_LODSCALE();
		return retval;
	}

	void LUA_NATIVE_STREAMING_OVERRIDE_LODSCALE_THIS_FRAME( float scaling )
	{
		STREAMING::OVERRIDE_LODSCALE_THIS_FRAME(scaling);
	}

	void LUA_NATIVE_STREAMING_REMAP_LODSCALE_RANGE_THIS_FRAME( float p0, float p1, float p2, float p3 )
	{
		STREAMING::REMAP_LODSCALE_RANGE_THIS_FRAME(p0, p1, p2, p3);
	}

	void LUA_NATIVE_STREAMING_SUPPRESS_HD_MAP_STREAMING_THIS_FRAME(  )
	{
		STREAMING::SUPPRESS_HD_MAP_STREAMING_THIS_FRAME();
	}

	void LUA_NATIVE_STREAMING_SET_RENDER_HD_ONLY( bool toggle )
	{
		STREAMING::SET_RENDER_HD_ONLY(toggle);
	}

	void LUA_NATIVE_STREAMING_FORCE_ALLOW_TIME_BASED_FADING_THIS_FRAME(  )
	{
		STREAMING::FORCE_ALLOW_TIME_BASED_FADING_THIS_FRAME();
	}

	void LUA_NATIVE_STREAMING_IPL_GROUP_SWAP_START( const char* iplName1, const char* iplName2 )
	{
		STREAMING::IPL_GROUP_SWAP_START(iplName1, iplName2);
	}

	void LUA_NATIVE_STREAMING_IPL_GROUP_SWAP_CANCEL(  )
	{
		STREAMING::IPL_GROUP_SWAP_CANCEL();
	}

	bool LUA_NATIVE_STREAMING_IPL_GROUP_SWAP_IS_READY(  )
	{
		auto retval = (bool)STREAMING::IPL_GROUP_SWAP_IS_READY();
		return retval;
	}

	void LUA_NATIVE_STREAMING_IPL_GROUP_SWAP_FINISH(  )
	{
		STREAMING::IPL_GROUP_SWAP_FINISH();
	}

	bool LUA_NATIVE_STREAMING_IPL_GROUP_SWAP_IS_ACTIVE(  )
	{
		auto retval = (bool)STREAMING::IPL_GROUP_SWAP_IS_ACTIVE();
		return retval;
	}

	void LUA_NATIVE_STREAMING_PREFETCH_SRL( const char* srl )
	{
		STREAMING::PREFETCH_SRL(srl);
	}

	bool LUA_NATIVE_STREAMING_IS_SRL_LOADED(  )
	{
		auto retval = (bool)STREAMING::IS_SRL_LOADED();
		return retval;
	}

	void LUA_NATIVE_STREAMING_BEGIN_SRL(  )
	{
		STREAMING::BEGIN_SRL();
	}

	void LUA_NATIVE_STREAMING_END_SRL(  )
	{
		STREAMING::END_SRL();
	}

	void LUA_NATIVE_STREAMING_SET_SRL_TIME( float p0 )
	{
		STREAMING::SET_SRL_TIME(p0);
	}

	void LUA_NATIVE_STREAMING_SET_SRL_POST_CUTSCENE_CAMERA( Any p0, Any p1, Any p2, Any p3, Any p4, Any p5 )
	{
		STREAMING::SET_SRL_POST_CUTSCENE_CAMERA(p0, p1, p2, p3, p4, p5);
	}

	void LUA_NATIVE_STREAMING_SET_SRL_READAHEAD_TIMES( Any p0, Any p1, Any p2, Any p3 )
	{
		STREAMING::SET_SRL_READAHEAD_TIMES(p0, p1, p2, p3);
	}

	void LUA_NATIVE_STREAMING_SET_SRL_LONG_JUMP_MODE( bool p0 )
	{
		STREAMING::SET_SRL_LONG_JUMP_MODE(p0);
	}

	void LUA_NATIVE_STREAMING_SET_SRL_FORCE_PRESTREAM( Any p0 )
	{
		STREAMING::SET_SRL_FORCE_PRESTREAM(p0);
	}

	void LUA_NATIVE_STREAMING_SET_HD_AREA( float x, float y, float z, float radius )
	{
		STREAMING::SET_HD_AREA(x, y, z, radius);
	}

	void LUA_NATIVE_STREAMING_CLEAR_HD_AREA(  )
	{
		STREAMING::CLEAR_HD_AREA();
	}

	void LUA_NATIVE_STREAMING_INIT_CREATOR_BUDGET(  )
	{
		STREAMING::INIT_CREATOR_BUDGET();
	}

	void LUA_NATIVE_STREAMING_SHUTDOWN_CREATOR_BUDGET(  )
	{
		STREAMING::SHUTDOWN_CREATOR_BUDGET();
	}

	bool LUA_NATIVE_STREAMING_ADD_MODEL_TO_CREATOR_BUDGET( Hash modelHash )
	{
		auto retval = (bool)STREAMING::ADD_MODEL_TO_CREATOR_BUDGET(modelHash);
		return retval;
	}

	void LUA_NATIVE_STREAMING_REMOVE_MODEL_FROM_CREATOR_BUDGET( Hash modelHash )
	{
		STREAMING::REMOVE_MODEL_FROM_CREATOR_BUDGET(modelHash);
	}

	float LUA_NATIVE_STREAMING_GET_USED_CREATOR_BUDGET(  )
	{
		auto retval = STREAMING::GET_USED_CREATOR_BUDGET();
		return retval;
	}

	void LUA_NATIVE_STREAMING_SET_ISLAND_ENABLED( const char* name, bool toggle )
	{
		STREAMING::SET_ISLAND_ENABLED(name, toggle);
	}

	void LUA_NATIVE_TASK_TASK_PAUSE( Ped ped, int ms )
	{
		TASK::TASK_PAUSE(ped, ms);
	}

	void LUA_NATIVE_TASK_TASK_STAND_STILL( Ped ped, int time )
	{
		TASK::TASK_STAND_STILL(ped, time);
	}

	void LUA_NATIVE_TASK_TASK_JUMP( Ped ped, bool usePlayerLaunchForce, bool doSuperJump, bool useFullSuperJumpForce )
	{
		TASK::TASK_JUMP(ped, usePlayerLaunchForce, doSuperJump, useFullSuperJumpForce);
	}

	void LUA_NATIVE_TASK_TASK_COWER( Ped ped, int duration )
	{
		TASK::TASK_COWER(ped, duration);
	}

	void LUA_NATIVE_TASK_TASK_HANDS_UP( Ped ped, int duration, Ped facingPed, int timeToFacePed, int flags )
	{
		TASK::TASK_HANDS_UP(ped, duration, facingPed, timeToFacePed, flags);
	}

	void LUA_NATIVE_TASK_UPDATE_TASK_HANDS_UP_DURATION( Ped ped, int duration )
	{
		TASK::UPDATE_TASK_HANDS_UP_DURATION(ped, duration);
	}

	void LUA_NATIVE_TASK_TASK_OPEN_VEHICLE_DOOR( Ped ped, Vehicle vehicle, int timeOut, int seat, float speed )
	{
		TASK::TASK_OPEN_VEHICLE_DOOR(ped, vehicle, timeOut, seat, speed);
	}

	void LUA_NATIVE_TASK_TASK_ENTER_VEHICLE( Ped ped, Vehicle vehicle, int timeout, int seat, float speed, int flag, const char* overrideEntryClipsetName )
	{
		TASK::TASK_ENTER_VEHICLE(ped, vehicle, timeout, seat, speed, flag, overrideEntryClipsetName);
	}

	void LUA_NATIVE_TASK_TASK_LEAVE_VEHICLE( Ped ped, Vehicle vehicle, int flags )
	{
		TASK::TASK_LEAVE_VEHICLE(ped, vehicle, flags);
	}

	void LUA_NATIVE_TASK_TASK_GET_OFF_BOAT( Ped ped, Vehicle boat )
	{
		TASK::TASK_GET_OFF_BOAT(ped, boat);
	}

	void LUA_NATIVE_TASK_TASK_SKY_DIVE( Ped ped, bool instant )
	{
		TASK::TASK_SKY_DIVE(ped, instant);
	}

	void LUA_NATIVE_TASK_TASK_PARACHUTE( Ped ped, bool giveParachuteItem, bool instant )
	{
		TASK::TASK_PARACHUTE(ped, giveParachuteItem, instant);
	}

	void LUA_NATIVE_TASK_TASK_PARACHUTE_TO_TARGET( Ped ped, float x, float y, float z )
	{
		TASK::TASK_PARACHUTE_TO_TARGET(ped, x, y, z);
	}

	void LUA_NATIVE_TASK_SET_PARACHUTE_TASK_TARGET( Ped ped, float x, float y, float z )
	{
		TASK::SET_PARACHUTE_TASK_TARGET(ped, x, y, z);
	}

	void LUA_NATIVE_TASK_SET_PARACHUTE_TASK_THRUST( Ped ped, float thrust )
	{
		TASK::SET_PARACHUTE_TASK_THRUST(ped, thrust);
	}

	void LUA_NATIVE_TASK_TASK_RAPPEL_FROM_HELI( Ped ped, float minHeightAboveGround )
	{
		TASK::TASK_RAPPEL_FROM_HELI(ped, minHeightAboveGround);
	}

	void LUA_NATIVE_TASK_TASK_VEHICLE_DRIVE_TO_COORD( Ped ped, Vehicle vehicle, float x, float y, float z, float speed, Any p6, Hash vehicleModel, int drivingMode, float stopRange, float straightLineDistance )
	{
		TASK::TASK_VEHICLE_DRIVE_TO_COORD(ped, vehicle, x, y, z, speed, p6, vehicleModel, drivingMode, stopRange, straightLineDistance);
	}

	void LUA_NATIVE_TASK_TASK_VEHICLE_DRIVE_TO_COORD_LONGRANGE( Ped ped, Vehicle vehicle, float x, float y, float z, float speed, int driveMode, float stopRange )
	{
		TASK::TASK_VEHICLE_DRIVE_TO_COORD_LONGRANGE(ped, vehicle, x, y, z, speed, driveMode, stopRange);
	}

	void LUA_NATIVE_TASK_TASK_VEHICLE_DRIVE_WANDER( Ped ped, Vehicle vehicle, float speed, int drivingStyle )
	{
		TASK::TASK_VEHICLE_DRIVE_WANDER(ped, vehicle, speed, drivingStyle);
	}

	void LUA_NATIVE_TASK_TASK_FOLLOW_TO_OFFSET_OF_ENTITY( Ped ped, Entity entity, float offsetX, float offsetY, float offsetZ, float movementSpeed, int timeout, float stoppingRange, bool persistFollowing )
	{
		TASK::TASK_FOLLOW_TO_OFFSET_OF_ENTITY(ped, entity, offsetX, offsetY, offsetZ, movementSpeed, timeout, stoppingRange, persistFollowing);
	}

	void LUA_NATIVE_TASK_TASK_GO_STRAIGHT_TO_COORD( Ped ped, float x, float y, float z, float speed, int timeout, float targetHeading, float distanceToSlide )
	{
		TASK::TASK_GO_STRAIGHT_TO_COORD(ped, x, y, z, speed, timeout, targetHeading, distanceToSlide);
	}

	void LUA_NATIVE_TASK_TASK_GO_STRAIGHT_TO_COORD_RELATIVE_TO_ENTITY( Ped ped, Entity entity, float x, float y, float z, float moveBlendRatio, int time )
	{
		TASK::TASK_GO_STRAIGHT_TO_COORD_RELATIVE_TO_ENTITY(ped, entity, x, y, z, moveBlendRatio, time);
	}

	void LUA_NATIVE_TASK_TASK_ACHIEVE_HEADING( Ped ped, float heading, int timeout )
	{
		TASK::TASK_ACHIEVE_HEADING(ped, heading, timeout);
	}

	void LUA_NATIVE_TASK_TASK_FLUSH_ROUTE(  )
	{
		TASK::TASK_FLUSH_ROUTE();
	}

	void LUA_NATIVE_TASK_TASK_EXTEND_ROUTE( float x, float y, float z )
	{
		TASK::TASK_EXTEND_ROUTE(x, y, z);
	}

	void LUA_NATIVE_TASK_TASK_FOLLOW_POINT_ROUTE( Ped ped, float speed, int mode )
	{
		TASK::TASK_FOLLOW_POINT_ROUTE(ped, speed, mode);
	}

	void LUA_NATIVE_TASK_TASK_GO_TO_ENTITY( Entity entity, Entity target, int duration, float distance, float moveBlendRatio, float slowDownDistance, int flags )
	{
		TASK::TASK_GO_TO_ENTITY(entity, target, duration, distance, moveBlendRatio, slowDownDistance, flags);
	}

	void LUA_NATIVE_TASK_TASK_SMART_FLEE_COORD( Ped ped, float x, float y, float z, float distance, int time, bool preferPavements, bool quitIfOutOfRange )
	{
		TASK::TASK_SMART_FLEE_COORD(ped, x, y, z, distance, time, preferPavements, quitIfOutOfRange);
	}

	void LUA_NATIVE_TASK_TASK_SMART_FLEE_PED( Ped ped, Ped fleeTarget, float safeDistance, int fleeTime, bool preferPavements, bool updateToNearestHatedPed )
	{
		TASK::TASK_SMART_FLEE_PED(ped, fleeTarget, safeDistance, fleeTime, preferPavements, updateToNearestHatedPed);
	}

	void LUA_NATIVE_TASK_TASK_REACT_AND_FLEE_PED( Ped ped, Ped fleeTarget )
	{
		TASK::TASK_REACT_AND_FLEE_PED(ped, fleeTarget);
	}

	void LUA_NATIVE_TASK_TASK_SHOCKING_EVENT_REACT( Ped ped, int eventHandle )
	{
		TASK::TASK_SHOCKING_EVENT_REACT(ped, eventHandle);
	}

	void LUA_NATIVE_TASK_TASK_WANDER_IN_AREA( Ped ped, float x, float y, float z, float radius, float minimalLength, float timeBetweenWalks )
	{
		TASK::TASK_WANDER_IN_AREA(ped, x, y, z, radius, minimalLength, timeBetweenWalks);
	}

	void LUA_NATIVE_TASK_TASK_WANDER_STANDARD( Ped ped, float heading, int flags )
	{
		TASK::TASK_WANDER_STANDARD(ped, heading, flags);
	}

	void LUA_NATIVE_TASK_TASK_WANDER_SPECIFIC( Ped ped, const char* conditionalAnimGroupStr, const char* conditionalAnimStr, float heading )
	{
		TASK::TASK_WANDER_SPECIFIC(ped, conditionalAnimGroupStr, conditionalAnimStr, heading);
	}

	void LUA_NATIVE_TASK_TASK_VEHICLE_PARK( Ped ped, Vehicle vehicle, float x, float y, float z, float heading, int mode, float radius, bool keepEngineOn )
	{
		TASK::TASK_VEHICLE_PARK(ped, vehicle, x, y, z, heading, mode, radius, keepEngineOn);
	}

	void LUA_NATIVE_TASK_TASK_STEALTH_KILL( Ped killer, Ped target, Hash stealthKillActionResultHash, float desiredMoveBlendRatio, int stealthFlags )
	{
		TASK::TASK_STEALTH_KILL(killer, target, stealthKillActionResultHash, desiredMoveBlendRatio, stealthFlags);
	}

	void LUA_NATIVE_TASK_TASK_PLANT_BOMB( Ped ped, float x, float y, float z, float heading )
	{
		TASK::TASK_PLANT_BOMB(ped, x, y, z, heading);
	}

	void LUA_NATIVE_TASK_TASK_FOLLOW_NAV_MESH_TO_COORD( Ped ped, float x, float y, float z, float moveBlendRatio, int time, float targetRadius, int flags, float targetHeading )
	{
		TASK::TASK_FOLLOW_NAV_MESH_TO_COORD(ped, x, y, z, moveBlendRatio, time, targetRadius, flags, targetHeading);
	}

	void LUA_NATIVE_TASK_TASK_FOLLOW_NAV_MESH_TO_COORD_ADVANCED( Ped ped, float x, float y, float z, float moveBlendRatio, int time, float targetRadius, int flags, float slideToCoordHeading, float maxSlopeNavigable, float clampMaxSearchDistance, float targetHeading )
	{
		TASK::TASK_FOLLOW_NAV_MESH_TO_COORD_ADVANCED(ped, x, y, z, moveBlendRatio, time, targetRadius, flags, slideToCoordHeading, maxSlopeNavigable, clampMaxSearchDistance, targetHeading);
	}

	void LUA_NATIVE_TASK_SET_PED_PATH_CAN_USE_CLIMBOVERS( Ped ped, bool Toggle )
	{
		TASK::SET_PED_PATH_CAN_USE_CLIMBOVERS(ped, Toggle);
	}

	void LUA_NATIVE_TASK_SET_PED_PATH_CAN_USE_LADDERS( Ped ped, bool Toggle )
	{
		TASK::SET_PED_PATH_CAN_USE_LADDERS(ped, Toggle);
	}

	void LUA_NATIVE_TASK_SET_PED_PATH_CAN_DROP_FROM_HEIGHT( Ped ped, bool Toggle )
	{
		TASK::SET_PED_PATH_CAN_DROP_FROM_HEIGHT(ped, Toggle);
	}

	void LUA_NATIVE_TASK_SET_PED_PATH_CLIMB_COST_MODIFIER( Ped ped, float modifier )
	{
		TASK::SET_PED_PATH_CLIMB_COST_MODIFIER(ped, modifier);
	}

	void LUA_NATIVE_TASK_SET_PED_PATH_MAY_ENTER_WATER( Ped ped, bool mayEnterWater )
	{
		TASK::SET_PED_PATH_MAY_ENTER_WATER(ped, mayEnterWater);
	}

	void LUA_NATIVE_TASK_SET_PED_PATH_PREFER_TO_AVOID_WATER( Ped ped, bool avoidWater )
	{
		TASK::SET_PED_PATH_PREFER_TO_AVOID_WATER(ped, avoidWater);
	}

	void LUA_NATIVE_TASK_SET_PED_PATH_AVOID_FIRE( Ped ped, bool avoidFire )
	{
		TASK::SET_PED_PATH_AVOID_FIRE(ped, avoidFire);
	}

	void LUA_NATIVE_TASK_SET_GLOBAL_MIN_BIRD_FLIGHT_HEIGHT( float height )
	{
		TASK::SET_GLOBAL_MIN_BIRD_FLIGHT_HEIGHT(height);
	}

	std::tuple<int, float, bool> LUA_NATIVE_TASK_GET_NAVMESH_ROUTE_DISTANCE_REMAINING( Ped ped, float distanceRemaining, bool isPathReady )
	{
		std::tuple<int, float, bool> return_values;
		std::get<0>(return_values) = TASK::GET_NAVMESH_ROUTE_DISTANCE_REMAINING(ped, &distanceRemaining, (BOOL*)&isPathReady);
		std::get<1>(return_values) = distanceRemaining;
		std::get<2>(return_values) = isPathReady;

		return return_values;
	}

	int LUA_NATIVE_TASK_GET_NAVMESH_ROUTE_RESULT( Ped ped )
	{
		auto retval = TASK::GET_NAVMESH_ROUTE_RESULT(ped);
		return retval;
	}

	bool LUA_NATIVE_TASK_IS_CONTROLLED_VEHICLE_UNABLE_TO_GET_TO_ROAD( Ped ped )
	{
		auto retval = (bool)TASK::IS_CONTROLLED_VEHICLE_UNABLE_TO_GET_TO_ROAD(ped);
		return retval;
	}

	void LUA_NATIVE_TASK_TASK_GO_TO_COORD_ANY_MEANS( Ped ped, float x, float y, float z, float moveBlendRatio, Vehicle vehicle, bool useLongRangeVehiclePathing, int drivingFlags, float maxRangeToShootTargets )
	{
		TASK::TASK_GO_TO_COORD_ANY_MEANS(ped, x, y, z, moveBlendRatio, vehicle, useLongRangeVehiclePathing, drivingFlags, maxRangeToShootTargets);
	}

	void LUA_NATIVE_TASK_TASK_GO_TO_COORD_ANY_MEANS_EXTRA_PARAMS( Ped ped, float x, float y, float z, float moveBlendRatio, Vehicle vehicle, bool useLongRangeVehiclePathing, int drivingFlags, float maxRangeToShootTargets, float extraVehToTargetDistToPreferVehicle, float driveStraightLineDistance, int extraFlags, float warpTimerMS )
	{
		TASK::TASK_GO_TO_COORD_ANY_MEANS_EXTRA_PARAMS(ped, x, y, z, moveBlendRatio, vehicle, useLongRangeVehiclePathing, drivingFlags, maxRangeToShootTargets, extraVehToTargetDistToPreferVehicle, driveStraightLineDistance, extraFlags, warpTimerMS);
	}

	void LUA_NATIVE_TASK_TASK_GO_TO_COORD_ANY_MEANS_EXTRA_PARAMS_WITH_CRUISE_SPEED( Ped ped, float x, float y, float z, float moveBlendRatio, Vehicle vehicle, bool useLongRangeVehiclePathing, int drivingFlags, float maxRangeToShootTargets, float extraVehToTargetDistToPreferVehicle, float driveStraightLineDistance, int extraFlags, float cruiseSpeed, float targetArriveDist )
	{
		TASK::TASK_GO_TO_COORD_ANY_MEANS_EXTRA_PARAMS_WITH_CRUISE_SPEED(ped, x, y, z, moveBlendRatio, vehicle, useLongRangeVehiclePathing, drivingFlags, maxRangeToShootTargets, extraVehToTargetDistToPreferVehicle, driveStraightLineDistance, extraFlags, cruiseSpeed, targetArriveDist);
	}

	void LUA_NATIVE_TASK_TASK_PLAY_ANIM( Ped ped, const char* animDictionary, const char* animationName, float blendInSpeed, float blendOutSpeed, int duration, int flag, float playbackRate, bool lockX, bool lockY, bool lockZ )
	{
		TASK::TASK_PLAY_ANIM(ped, animDictionary, animationName, blendInSpeed, blendOutSpeed, duration, flag, playbackRate, lockX, lockY, lockZ);
	}

	void LUA_NATIVE_TASK_TASK_PLAY_ANIM_ADVANCED( Ped ped, const char* animDict, const char* animName, float posX, float posY, float posZ, float rotX, float rotY, float rotZ, float animEnterSpeed, float animExitSpeed, int duration, Any flag, float animTime, int rotOrder, int ikFlags )
	{
		TASK::TASK_PLAY_ANIM_ADVANCED(ped, animDict, animName, posX, posY, posZ, rotX, rotY, rotZ, animEnterSpeed, animExitSpeed, duration, flag, animTime, rotOrder, ikFlags);
	}

	void LUA_NATIVE_TASK_STOP_ANIM_TASK( Entity entity, const char* animDictionary, const char* animationName, float blendDelta )
	{
		TASK::STOP_ANIM_TASK(entity, animDictionary, animationName, blendDelta);
	}

	std::tuple<int, int, int> LUA_NATIVE_TASK_TASK_SCRIPTED_ANIMATION( Ped ped, int priorityLowData, int priorityMidData, int priorityHighData, float blendInDelta, float blendOutDelta )
	{
		std::tuple<int, int, int> return_values;
		TASK::TASK_SCRIPTED_ANIMATION(ped, &priorityLowData, &priorityMidData, &priorityHighData, blendInDelta, blendOutDelta);
		std::get<0>(return_values) = priorityLowData;
		std::get<1>(return_values) = priorityMidData;
		std::get<2>(return_values) = priorityHighData;

		return return_values;
	}

	std::tuple<int, int, int> LUA_NATIVE_TASK_PLAY_ENTITY_SCRIPTED_ANIM( Entity entity, int priorityLowData, int priorityMidData, int priorityHighData, float blendInDelta, float blendOutDelta )
	{
		std::tuple<int, int, int> return_values;
		TASK::PLAY_ENTITY_SCRIPTED_ANIM(entity, &priorityLowData, &priorityMidData, &priorityHighData, blendInDelta, blendOutDelta);
		std::get<0>(return_values) = priorityLowData;
		std::get<1>(return_values) = priorityMidData;
		std::get<2>(return_values) = priorityHighData;

		return return_values;
	}

	void LUA_NATIVE_TASK_STOP_ANIM_PLAYBACK( Entity entity, int priority, bool secondary )
	{
		TASK::STOP_ANIM_PLAYBACK(entity, priority, secondary);
	}

	void LUA_NATIVE_TASK_SET_ANIM_WEIGHT( Entity entity, float weight, int priority, int index, bool secondary )
	{
		TASK::SET_ANIM_WEIGHT(entity, weight, priority, index, secondary);
	}

	void LUA_NATIVE_TASK_SET_ANIM_PHASE( Entity entity, float phase, int priority, bool secondary )
	{
		TASK::SET_ANIM_PHASE(entity, phase, priority, secondary);
	}

	void LUA_NATIVE_TASK_SET_ANIM_RATE( Entity entity, float rate, int priority, bool secondary )
	{
		TASK::SET_ANIM_RATE(entity, rate, priority, secondary);
	}

	void LUA_NATIVE_TASK_SET_ANIM_LOOPED( Entity entity, bool looped, int priority, bool secondary )
	{
		TASK::SET_ANIM_LOOPED(entity, looped, priority, secondary);
	}

	void LUA_NATIVE_TASK_TASK_PLAY_PHONE_GESTURE_ANIMATION( Ped ped, const char* animDict, const char* animation, const char* boneMaskType, float blendInDuration, float blendOutDuration, bool isLooping, bool holdLastFrame )
	{
		TASK::TASK_PLAY_PHONE_GESTURE_ANIMATION(ped, animDict, animation, boneMaskType, blendInDuration, blendOutDuration, isLooping, holdLastFrame);
	}

	void LUA_NATIVE_TASK_TASK_STOP_PHONE_GESTURE_ANIMATION( Ped ped, float blendOutOverride )
	{
		TASK::TASK_STOP_PHONE_GESTURE_ANIMATION(ped, blendOutOverride);
	}

	bool LUA_NATIVE_TASK_IS_PLAYING_PHONE_GESTURE_ANIM( Ped ped )
	{
		auto retval = (bool)TASK::IS_PLAYING_PHONE_GESTURE_ANIM(ped);
		return retval;
	}

	float LUA_NATIVE_TASK_GET_PHONE_GESTURE_ANIM_CURRENT_TIME( Ped ped )
	{
		auto retval = TASK::GET_PHONE_GESTURE_ANIM_CURRENT_TIME(ped);
		return retval;
	}

	float LUA_NATIVE_TASK_GET_PHONE_GESTURE_ANIM_TOTAL_TIME( Ped ped )
	{
		auto retval = TASK::GET_PHONE_GESTURE_ANIM_TOTAL_TIME(ped);
		return retval;
	}

	void LUA_NATIVE_TASK_TASK_VEHICLE_PLAY_ANIM( Vehicle vehicle, const char* animationSet, const char* animationName )
	{
		TASK::TASK_VEHICLE_PLAY_ANIM(vehicle, animationSet, animationName);
	}

	void LUA_NATIVE_TASK_TASK_LOOK_AT_COORD( Entity entity, float x, float y, float z, int duration, int flags, int priority )
	{
		TASK::TASK_LOOK_AT_COORD(entity, x, y, z, duration, flags, priority);
	}

	void LUA_NATIVE_TASK_TASK_LOOK_AT_ENTITY( Ped ped, Entity lookAt, int duration, int flags, int priority )
	{
		TASK::TASK_LOOK_AT_ENTITY(ped, lookAt, duration, flags, priority);
	}

	void LUA_NATIVE_TASK_TASK_CLEAR_LOOK_AT( Ped ped )
	{
		TASK::TASK_CLEAR_LOOK_AT(ped);
	}

	int LUA_NATIVE_TASK_OPEN_SEQUENCE_TASK( int taskSequenceId )
	{
		TASK::OPEN_SEQUENCE_TASK(&taskSequenceId);
		return taskSequenceId;
	}

	void LUA_NATIVE_TASK_CLOSE_SEQUENCE_TASK( int taskSequenceId )
	{
		TASK::CLOSE_SEQUENCE_TASK(taskSequenceId);
	}

	void LUA_NATIVE_TASK_TASK_PERFORM_SEQUENCE( Ped ped, int taskSequenceId )
	{
		TASK::TASK_PERFORM_SEQUENCE(ped, taskSequenceId);
	}

	void LUA_NATIVE_TASK_TASK_PERFORM_SEQUENCE_LOCALLY( Ped ped, int taskSequenceId )
	{
		TASK::TASK_PERFORM_SEQUENCE_LOCALLY(ped, taskSequenceId);
	}

	int LUA_NATIVE_TASK_CLEAR_SEQUENCE_TASK( int taskSequenceId )
	{
		TASK::CLEAR_SEQUENCE_TASK(&taskSequenceId);
		return taskSequenceId;
	}

	void LUA_NATIVE_TASK_SET_SEQUENCE_TO_REPEAT( int taskSequenceId, bool repeat )
	{
		TASK::SET_SEQUENCE_TO_REPEAT(taskSequenceId, repeat);
	}

	int LUA_NATIVE_TASK_GET_SEQUENCE_PROGRESS( Ped ped )
	{
		auto retval = TASK::GET_SEQUENCE_PROGRESS(ped);
		return retval;
	}

	bool LUA_NATIVE_TASK_GET_IS_TASK_ACTIVE( Ped ped, int taskIndex )
	{
		auto retval = (bool)TASK::GET_IS_TASK_ACTIVE(ped, taskIndex);
		return retval;
	}

	int LUA_NATIVE_TASK_GET_SCRIPT_TASK_STATUS( Ped ped, Hash taskHash )
	{
		auto retval = TASK::GET_SCRIPT_TASK_STATUS(ped, taskHash);
		return retval;
	}

	int LUA_NATIVE_TASK_GET_ACTIVE_VEHICLE_MISSION_TYPE( Vehicle vehicle )
	{
		auto retval = TASK::GET_ACTIVE_VEHICLE_MISSION_TYPE(vehicle);
		return retval;
	}

	void LUA_NATIVE_TASK_TASK_LEAVE_ANY_VEHICLE( Ped ped, int delayTime, int flags )
	{
		TASK::TASK_LEAVE_ANY_VEHICLE(ped, delayTime, flags);
	}

	void LUA_NATIVE_TASK_TASK_AIM_GUN_SCRIPTED( Ped ped, Hash scriptTask, bool disableBlockingClip, bool instantBlendToAim )
	{
		TASK::TASK_AIM_GUN_SCRIPTED(ped, scriptTask, disableBlockingClip, instantBlendToAim);
	}

	void LUA_NATIVE_TASK_TASK_AIM_GUN_SCRIPTED_WITH_TARGET( Ped ped, Ped target, float x, float y, float z, int gunTaskType, bool disableBlockingClip, bool forceAim )
	{
		TASK::TASK_AIM_GUN_SCRIPTED_WITH_TARGET(ped, target, x, y, z, gunTaskType, disableBlockingClip, forceAim);
	}

	void LUA_NATIVE_TASK_UPDATE_TASK_AIM_GUN_SCRIPTED_TARGET( Ped ped, Ped target, float x, float y, float z, bool disableBlockingClip )
	{
		TASK::UPDATE_TASK_AIM_GUN_SCRIPTED_TARGET(ped, target, x, y, z, disableBlockingClip);
	}

	const char* LUA_NATIVE_TASK_GET_CLIP_SET_FOR_SCRIPTED_GUN_TASK( int gunTaskType )
	{
		auto retval = TASK::GET_CLIP_SET_FOR_SCRIPTED_GUN_TASK(gunTaskType);
		return retval;
	}

	void LUA_NATIVE_TASK_TASK_AIM_GUN_AT_ENTITY( Ped ped, Entity entity, int duration, bool instantBlendToAim )
	{
		TASK::TASK_AIM_GUN_AT_ENTITY(ped, entity, duration, instantBlendToAim);
	}

	void LUA_NATIVE_TASK_TASK_TURN_PED_TO_FACE_ENTITY( Ped ped, Entity entity, int duration )
	{
		TASK::TASK_TURN_PED_TO_FACE_ENTITY(ped, entity, duration);
	}

	void LUA_NATIVE_TASK_TASK_AIM_GUN_AT_COORD( Ped ped, float x, float y, float z, int time, bool instantBlendToAim, bool playAnimIntro )
	{
		TASK::TASK_AIM_GUN_AT_COORD(ped, x, y, z, time, instantBlendToAim, playAnimIntro);
	}

	void LUA_NATIVE_TASK_TASK_SHOOT_AT_COORD( Ped ped, float x, float y, float z, int duration, Hash firingPattern )
	{
		TASK::TASK_SHOOT_AT_COORD(ped, x, y, z, duration, firingPattern);
	}

	void LUA_NATIVE_TASK_TASK_SHUFFLE_TO_NEXT_VEHICLE_SEAT( Ped ped, Vehicle vehicle, bool useAlternateShuffle )
	{
		TASK::TASK_SHUFFLE_TO_NEXT_VEHICLE_SEAT(ped, vehicle, useAlternateShuffle);
	}

	void LUA_NATIVE_TASK_CLEAR_PED_TASKS( Ped ped )
	{
		TASK::CLEAR_PED_TASKS(ped);
	}

	void LUA_NATIVE_TASK_CLEAR_PED_SECONDARY_TASK( Ped ped )
	{
		TASK::CLEAR_PED_SECONDARY_TASK(ped);
	}

	void LUA_NATIVE_TASK_TASK_EVERYONE_LEAVE_VEHICLE( Vehicle vehicle )
	{
		TASK::TASK_EVERYONE_LEAVE_VEHICLE(vehicle);
	}

	void LUA_NATIVE_TASK_TASK_GOTO_ENTITY_OFFSET( Ped ped, Entity entity, int time, float seekRadius, float seekAngleDeg, float moveBlendRatio, int gotoEntityOffsetFlags )
	{
		TASK::TASK_GOTO_ENTITY_OFFSET(ped, entity, time, seekRadius, seekAngleDeg, moveBlendRatio, gotoEntityOffsetFlags);
	}

	void LUA_NATIVE_TASK_TASK_GOTO_ENTITY_OFFSET_XY( Ped ped, Entity entity, int duration, float targetRadius, float offsetX, float offsetY, float moveBlendRatio, int gotoEntityOffsetFlags )
	{
		TASK::TASK_GOTO_ENTITY_OFFSET_XY(ped, entity, duration, targetRadius, offsetX, offsetY, moveBlendRatio, gotoEntityOffsetFlags);
	}

	void LUA_NATIVE_TASK_TASK_TURN_PED_TO_FACE_COORD( Ped ped, float x, float y, float z, int duration )
	{
		TASK::TASK_TURN_PED_TO_FACE_COORD(ped, x, y, z, duration);
	}

	void LUA_NATIVE_TASK_TASK_VEHICLE_TEMP_ACTION( Ped driver, Vehicle vehicle, int action, int time )
	{
		TASK::TASK_VEHICLE_TEMP_ACTION(driver, vehicle, action, time);
	}

	void LUA_NATIVE_TASK_TASK_VEHICLE_MISSION( Ped driver, Vehicle vehicle, Vehicle vehicleTarget, int missionType, float cruiseSpeed, int drivingStyle, float targetReached, float straightLineDistance, bool DriveAgainstTraffic )
	{
		TASK::TASK_VEHICLE_MISSION(driver, vehicle, vehicleTarget, missionType, cruiseSpeed, drivingStyle, targetReached, straightLineDistance, DriveAgainstTraffic);
	}

	void LUA_NATIVE_TASK_TASK_VEHICLE_MISSION_PED_TARGET( Ped ped, Vehicle vehicle, Ped pedTarget, int missionType, float maxSpeed, int drivingStyle, float minDistance, float straightLineDistance, bool DriveAgainstTraffic )
	{
		TASK::TASK_VEHICLE_MISSION_PED_TARGET(ped, vehicle, pedTarget, missionType, maxSpeed, drivingStyle, minDistance, straightLineDistance, DriveAgainstTraffic);
	}

	void LUA_NATIVE_TASK_TASK_VEHICLE_MISSION_COORS_TARGET( Ped ped, Vehicle vehicle, float x, float y, float z, int mission, float cruiseSpeed, int drivingStyle, float targetReached, float straightLineDistance, bool DriveAgainstTraffic )
	{
		TASK::TASK_VEHICLE_MISSION_COORS_TARGET(ped, vehicle, x, y, z, mission, cruiseSpeed, drivingStyle, targetReached, straightLineDistance, DriveAgainstTraffic);
	}

	void LUA_NATIVE_TASK_TASK_VEHICLE_ESCORT( Ped ped, Vehicle vehicle, Vehicle targetVehicle, int mode, float speed, int drivingStyle, float minDistance, int minHeightAboveTerrain, float noRoadsDistance )
	{
		TASK::TASK_VEHICLE_ESCORT(ped, vehicle, targetVehicle, mode, speed, drivingStyle, minDistance, minHeightAboveTerrain, noRoadsDistance);
	}

	void LUA_NATIVE_TASK_TASK_VEHICLE_FOLLOW( Ped driver, Vehicle vehicle, Entity targetEntity, float speed, int drivingStyle, int minDistance )
	{
		TASK::TASK_VEHICLE_FOLLOW(driver, vehicle, targetEntity, speed, drivingStyle, minDistance);
	}

	void LUA_NATIVE_TASK_TASK_VEHICLE_CHASE( Ped driver, Entity targetEnt )
	{
		TASK::TASK_VEHICLE_CHASE(driver, targetEnt);
	}

	void LUA_NATIVE_TASK_TASK_VEHICLE_HELI_PROTECT( Ped pilot, Vehicle vehicle, Entity entityToFollow, float targetSpeed, int drivingFlags, float radius, int altitude, int heliFlags )
	{
		TASK::TASK_VEHICLE_HELI_PROTECT(pilot, vehicle, entityToFollow, targetSpeed, drivingFlags, radius, altitude, heliFlags);
	}

	void LUA_NATIVE_TASK_SET_TASK_VEHICLE_CHASE_BEHAVIOR_FLAG( Ped ped, int flag, bool set )
	{
		TASK::SET_TASK_VEHICLE_CHASE_BEHAVIOR_FLAG(ped, flag, set);
	}

	void LUA_NATIVE_TASK_SET_TASK_VEHICLE_CHASE_IDEAL_PURSUIT_DISTANCE( Ped ped, float distance )
	{
		TASK::SET_TASK_VEHICLE_CHASE_IDEAL_PURSUIT_DISTANCE(ped, distance);
	}

	void LUA_NATIVE_TASK_TASK_HELI_CHASE( Ped pilot, Entity entityToFollow, float x, float y, float z )
	{
		TASK::TASK_HELI_CHASE(pilot, entityToFollow, x, y, z);
	}

	void LUA_NATIVE_TASK_TASK_PLANE_CHASE( Ped pilot, Entity entityToFollow, float x, float y, float z )
	{
		TASK::TASK_PLANE_CHASE(pilot, entityToFollow, x, y, z);
	}

	void LUA_NATIVE_TASK_TASK_PLANE_LAND( Ped pilot, Vehicle plane, float runwayStartX, float runwayStartY, float runwayStartZ, float runwayEndX, float runwayEndY, float runwayEndZ )
	{
		TASK::TASK_PLANE_LAND(pilot, plane, runwayStartX, runwayStartY, runwayStartZ, runwayEndX, runwayEndY, runwayEndZ);
	}

	void LUA_NATIVE_TASK_CLEAR_DEFAULT_PRIMARY_TASK( Ped ped )
	{
		TASK::CLEAR_DEFAULT_PRIMARY_TASK(ped);
	}

	void LUA_NATIVE_TASK_CLEAR_PRIMARY_VEHICLE_TASK( Vehicle vehicle )
	{
		TASK::CLEAR_PRIMARY_VEHICLE_TASK(vehicle);
	}

	void LUA_NATIVE_TASK_CLEAR_VEHICLE_CRASH_TASK( Vehicle vehicle )
	{
		TASK::CLEAR_VEHICLE_CRASH_TASK(vehicle);
	}

	void LUA_NATIVE_TASK_TASK_PLANE_GOTO_PRECISE_VTOL( Ped ped, Vehicle vehicle, float x, float y, float z, int flightHeight, int minHeightAboveTerrain, bool useDesiredOrientation, float desiredOrientation, bool autopilot )
	{
		TASK::TASK_PLANE_GOTO_PRECISE_VTOL(ped, vehicle, x, y, z, flightHeight, minHeightAboveTerrain, useDesiredOrientation, desiredOrientation, autopilot);
	}

	void LUA_NATIVE_TASK_TASK_SUBMARINE_GOTO_AND_STOP( Ped ped, Vehicle submarine, float x, float y, float z, bool autopilot )
	{
		TASK::TASK_SUBMARINE_GOTO_AND_STOP(ped, submarine, x, y, z, autopilot);
	}

	void LUA_NATIVE_TASK_TASK_HELI_MISSION( Ped pilot, Vehicle aircraft, Vehicle targetVehicle, Ped targetPed, float destinationX, float destinationY, float destinationZ, int missionFlag, float maxSpeed, float radius, float targetHeading, int maxHeight, int minHeight, float slowDownDistance, int behaviorFlags )
	{
		TASK::TASK_HELI_MISSION(pilot, aircraft, targetVehicle, targetPed, destinationX, destinationY, destinationZ, missionFlag, maxSpeed, radius, targetHeading, maxHeight, minHeight, slowDownDistance, behaviorFlags);
	}

	void LUA_NATIVE_TASK_TASK_HELI_ESCORT_HELI( Ped pilot, Vehicle heli1, Vehicle heli2, float offsetX, float offsetY, float offsetZ )
	{
		TASK::TASK_HELI_ESCORT_HELI(pilot, heli1, heli2, offsetX, offsetY, offsetZ);
	}

	void LUA_NATIVE_TASK_TASK_PLANE_MISSION( Ped pilot, Vehicle aircraft, Vehicle targetVehicle, Ped targetPed, float destinationX, float destinationY, float destinationZ, int missionFlag, float angularDrag, float targetReached, float targetHeading, float maxZ, float minZ, bool precise )
	{
		TASK::TASK_PLANE_MISSION(pilot, aircraft, targetVehicle, targetPed, destinationX, destinationY, destinationZ, missionFlag, angularDrag, targetReached, targetHeading, maxZ, minZ, precise);
	}

	void LUA_NATIVE_TASK_TASK_PLANE_TAXI( Ped pilot, Vehicle aircraft, float x, float y, float z, float cruiseSpeed, float targetReached )
	{
		TASK::TASK_PLANE_TAXI(pilot, aircraft, x, y, z, cruiseSpeed, targetReached);
	}

	void LUA_NATIVE_TASK_TASK_BOAT_MISSION( Ped pedDriver, Vehicle vehicle, Vehicle targetVehicle, Ped targetPed, float x, float y, float z, int mission, float maxSpeed, int drivingStyle, float targetReached, Any boatFlags )
	{
		TASK::TASK_BOAT_MISSION(pedDriver, vehicle, targetVehicle, targetPed, x, y, z, mission, maxSpeed, drivingStyle, targetReached, boatFlags);
	}

	void LUA_NATIVE_TASK_TASK_DRIVE_BY( Ped driverPed, Ped targetPed, Vehicle targetVehicle, float targetX, float targetY, float targetZ, float distanceToShoot, int pedAccuracy, bool pushUnderneathDrivingTaskIfDriving, Hash firingPattern )
	{
		TASK::TASK_DRIVE_BY(driverPed, targetPed, targetVehicle, targetX, targetY, targetZ, distanceToShoot, pedAccuracy, pushUnderneathDrivingTaskIfDriving, firingPattern);
	}

	void LUA_NATIVE_TASK_SET_DRIVEBY_TASK_TARGET( Ped shootingPed, Ped targetPed, Vehicle targetVehicle, float x, float y, float z )
	{
		TASK::SET_DRIVEBY_TASK_TARGET(shootingPed, targetPed, targetVehicle, x, y, z);
	}

	void LUA_NATIVE_TASK_CLEAR_DRIVEBY_TASK_UNDERNEATH_DRIVING_TASK( Ped ped )
	{
		TASK::CLEAR_DRIVEBY_TASK_UNDERNEATH_DRIVING_TASK(ped);
	}

	bool LUA_NATIVE_TASK_IS_DRIVEBY_TASK_UNDERNEATH_DRIVING_TASK( Ped ped )
	{
		auto retval = (bool)TASK::IS_DRIVEBY_TASK_UNDERNEATH_DRIVING_TASK(ped);
		return retval;
	}

	bool LUA_NATIVE_TASK_CONTROL_MOUNTED_WEAPON( Ped ped )
	{
		auto retval = (bool)TASK::CONTROL_MOUNTED_WEAPON(ped);
		return retval;
	}

	void LUA_NATIVE_TASK_SET_MOUNTED_WEAPON_TARGET( Ped shootingPed, Ped targetPed, Vehicle targetVehicle, float x, float y, float z, int taskMode, bool ignoreTargetVehDeadCheck )
	{
		TASK::SET_MOUNTED_WEAPON_TARGET(shootingPed, targetPed, targetVehicle, x, y, z, taskMode, ignoreTargetVehDeadCheck);
	}

	bool LUA_NATIVE_TASK_IS_MOUNTED_WEAPON_TASK_UNDERNEATH_DRIVING_TASK( Ped ped )
	{
		auto retval = (bool)TASK::IS_MOUNTED_WEAPON_TASK_UNDERNEATH_DRIVING_TASK(ped);
		return retval;
	}

	void LUA_NATIVE_TASK_TASK_USE_MOBILE_PHONE( Ped ped, bool usePhone, int desiredPhoneMode )
	{
		TASK::TASK_USE_MOBILE_PHONE(ped, usePhone, desiredPhoneMode);
	}

	void LUA_NATIVE_TASK_TASK_USE_MOBILE_PHONE_TIMED( Ped ped, int duration )
	{
		TASK::TASK_USE_MOBILE_PHONE_TIMED(ped, duration);
	}

	void LUA_NATIVE_TASK_TASK_CHAT_TO_PED( Ped ped, Ped target, int flags, float goToLocationX, float goToLocationY, float goToLocationZ, float headingDegs, float idleTime )
	{
		TASK::TASK_CHAT_TO_PED(ped, target, flags, goToLocationX, goToLocationY, goToLocationZ, headingDegs, idleTime);
	}

	void LUA_NATIVE_TASK_TASK_WARP_PED_INTO_VEHICLE( Ped ped, Vehicle vehicle, int seat )
	{
		TASK::TASK_WARP_PED_INTO_VEHICLE(ped, vehicle, seat);
	}

	void LUA_NATIVE_TASK_TASK_SHOOT_AT_ENTITY( Entity entity, Entity target, int duration, Hash firingPattern )
	{
		TASK::TASK_SHOOT_AT_ENTITY(entity, target, duration, firingPattern);
	}

	void LUA_NATIVE_TASK_TASK_CLIMB( Ped ped, bool usePlayerLaunchForce )
	{
		TASK::TASK_CLIMB(ped, usePlayerLaunchForce);
	}

	void LUA_NATIVE_TASK_TASK_CLIMB_LADDER( Ped ped, bool fast )
	{
		TASK::TASK_CLIMB_LADDER(ped, fast);
	}

	void LUA_NATIVE_TASK_TASK_RAPPEL_DOWN_WALL_USING_CLIPSET_OVERRIDE( Ped ped, float x1, float y1, float z1, float x2, float y2, float z2, float minZ, int ropeHandle, const char* clipSet, Any p10 )
	{
		TASK::TASK_RAPPEL_DOWN_WALL_USING_CLIPSET_OVERRIDE(ped, x1, y1, z1, x2, y2, z2, minZ, ropeHandle, clipSet, p10);
	}

	int LUA_NATIVE_TASK_GET_TASK_RAPPEL_DOWN_WALL_STATE( Ped ped )
	{
		auto retval = TASK::GET_TASK_RAPPEL_DOWN_WALL_STATE(ped);
		return retval;
	}

	void LUA_NATIVE_TASK_CLEAR_PED_TASKS_IMMEDIATELY( Ped ped )
	{
		TASK::CLEAR_PED_TASKS_IMMEDIATELY(ped);
	}

	void LUA_NATIVE_TASK_TASK_PERFORM_SEQUENCE_FROM_PROGRESS( Ped ped, int taskIndex, int progress1, int progress2 )
	{
		TASK::TASK_PERFORM_SEQUENCE_FROM_PROGRESS(ped, taskIndex, progress1, progress2);
	}

	void LUA_NATIVE_TASK_SET_NEXT_DESIRED_MOVE_STATE( float nextMoveState )
	{
		TASK::SET_NEXT_DESIRED_MOVE_STATE(nextMoveState);
	}

	void LUA_NATIVE_TASK_SET_PED_DESIRED_MOVE_BLEND_RATIO( Ped ped, float newMoveBlendRatio )
	{
		TASK::SET_PED_DESIRED_MOVE_BLEND_RATIO(ped, newMoveBlendRatio);
	}

	float LUA_NATIVE_TASK_GET_PED_DESIRED_MOVE_BLEND_RATIO( Ped ped )
	{
		auto retval = TASK::GET_PED_DESIRED_MOVE_BLEND_RATIO(ped);
		return retval;
	}

	void LUA_NATIVE_TASK_TASK_GOTO_ENTITY_AIMING( Ped ped, Entity target, float distanceToStopAt, float StartAimingDist )
	{
		TASK::TASK_GOTO_ENTITY_AIMING(ped, target, distanceToStopAt, StartAimingDist);
	}

	void LUA_NATIVE_TASK_TASK_SET_DECISION_MAKER( Ped ped, Hash decisionMakerId )
	{
		TASK::TASK_SET_DECISION_MAKER(ped, decisionMakerId);
	}

	void LUA_NATIVE_TASK_TASK_SET_SPHERE_DEFENSIVE_AREA( Ped ped, float x, float y, float z, float radius )
	{
		TASK::TASK_SET_SPHERE_DEFENSIVE_AREA(ped, x, y, z, radius);
	}

	void LUA_NATIVE_TASK_TASK_CLEAR_DEFENSIVE_AREA( Ped ped )
	{
		TASK::TASK_CLEAR_DEFENSIVE_AREA(ped);
	}

	void LUA_NATIVE_TASK_TASK_PED_SLIDE_TO_COORD( Ped ped, float x, float y, float z, float heading, float speed )
	{
		TASK::TASK_PED_SLIDE_TO_COORD(ped, x, y, z, heading, speed);
	}

	void LUA_NATIVE_TASK_TASK_PED_SLIDE_TO_COORD_HDG_RATE( Ped ped, float x, float y, float z, float heading, float speed, float headingChangeRate )
	{
		TASK::TASK_PED_SLIDE_TO_COORD_HDG_RATE(ped, x, y, z, heading, speed, headingChangeRate);
	}

	ScrHandle LUA_NATIVE_TASK_ADD_COVER_POINT( float x, float y, float z, float direction, int usage, int height, int arc, bool isPriority )
	{
		auto retval = TASK::ADD_COVER_POINT(x, y, z, direction, usage, height, arc, isPriority);
		return retval;
	}

	void LUA_NATIVE_TASK_REMOVE_COVER_POINT( ScrHandle coverpoint )
	{
		TASK::REMOVE_COVER_POINT(coverpoint);
	}

	bool LUA_NATIVE_TASK_DOES_SCRIPTED_COVER_POINT_EXIST_AT_COORDS( float x, float y, float z )
	{
		auto retval = (bool)TASK::DOES_SCRIPTED_COVER_POINT_EXIST_AT_COORDS(x, y, z);
		return retval;
	}

	Vector3 LUA_NATIVE_TASK_GET_SCRIPTED_COVER_POINT_COORDS( ScrHandle coverpoint )
	{
		auto retval = TASK::GET_SCRIPTED_COVER_POINT_COORDS(coverpoint);
		return retval;
	}

	void LUA_NATIVE_TASK_ADD_SCRIPTED_COVER_AREA( float x, float y, float z, float radius )
	{
		TASK::ADD_SCRIPTED_COVER_AREA(x, y, z, radius);
	}

	void LUA_NATIVE_TASK_TASK_COMBAT_PED( Ped ped, Ped targetPed, int combatFlags, int threatResponseFlags )
	{
		TASK::TASK_COMBAT_PED(ped, targetPed, combatFlags, threatResponseFlags);
	}

	void LUA_NATIVE_TASK_TASK_COMBAT_PED_TIMED( Ped ped, Ped target, int time, int flags )
	{
		TASK::TASK_COMBAT_PED_TIMED(ped, target, time, flags);
	}

	void LUA_NATIVE_TASK_TASK_SEEK_COVER_FROM_POS( Ped ped, float x, float y, float z, int duration, bool allowPeekingAndFiring )
	{
		TASK::TASK_SEEK_COVER_FROM_POS(ped, x, y, z, duration, allowPeekingAndFiring);
	}

	void LUA_NATIVE_TASK_TASK_SEEK_COVER_FROM_PED( Ped ped, Ped target, int duration, bool allowPeekingAndFiring )
	{
		TASK::TASK_SEEK_COVER_FROM_PED(ped, target, duration, allowPeekingAndFiring);
	}

	void LUA_NATIVE_TASK_TASK_SEEK_COVER_TO_COVER_POINT( Ped ped, ScrHandle coverpoint, float x, float y, float z, int time, bool allowPeekingAndFiring )
	{
		TASK::TASK_SEEK_COVER_TO_COVER_POINT(ped, coverpoint, x, y, z, time, allowPeekingAndFiring);
	}

	void LUA_NATIVE_TASK_TASK_SEEK_COVER_TO_COORDS( Ped ped, float x1, float y1, float z1, float x2, float y2, float z2, int timeout, bool shortRoute )
	{
		TASK::TASK_SEEK_COVER_TO_COORDS(ped, x1, y1, z1, x2, y2, z2, timeout, shortRoute);
	}

	void LUA_NATIVE_TASK_TASK_PUT_PED_DIRECTLY_INTO_COVER( Ped ped, float x, float y, float z, int time, bool allowPeekingAndFiring, float blendInDuration, bool forceInitialFacingDirection, bool forceFaceLeft, int identifier, bool doEntry )
	{
		TASK::TASK_PUT_PED_DIRECTLY_INTO_COVER(ped, x, y, z, time, allowPeekingAndFiring, blendInDuration, forceInitialFacingDirection, forceFaceLeft, identifier, doEntry);
	}

	void LUA_NATIVE_TASK_TASK_WARP_PED_DIRECTLY_INTO_COVER( Ped ped, int time, bool allowPeekingAndFiring, bool forceInitialFacingDirection, bool forceFaceLeft, int identifier )
	{
		TASK::TASK_WARP_PED_DIRECTLY_INTO_COVER(ped, time, allowPeekingAndFiring, forceInitialFacingDirection, forceFaceLeft, identifier);
	}

	void LUA_NATIVE_TASK_TASK_EXIT_COVER( Ped ped, int exitType, float x, float y, float z )
	{
		TASK::TASK_EXIT_COVER(ped, exitType, x, y, z);
	}

	void LUA_NATIVE_TASK_TASK_PUT_PED_DIRECTLY_INTO_MELEE( Ped ped, Ped meleeTarget, float blendInDuration, float timeInMelee, float strafePhaseSync, int aiCombatFlags )
	{
		TASK::TASK_PUT_PED_DIRECTLY_INTO_MELEE(ped, meleeTarget, blendInDuration, timeInMelee, strafePhaseSync, aiCombatFlags);
	}

	void LUA_NATIVE_TASK_TASK_TOGGLE_DUCK( Ped ped, int toggleType )
	{
		TASK::TASK_TOGGLE_DUCK(ped, toggleType);
	}

	void LUA_NATIVE_TASK_TASK_GUARD_CURRENT_POSITION( Ped ped, float maxPatrolProximity, float defensiveAreaRadius, bool setDefensiveArea )
	{
		TASK::TASK_GUARD_CURRENT_POSITION(ped, maxPatrolProximity, defensiveAreaRadius, setDefensiveArea);
	}

	void LUA_NATIVE_TASK_TASK_GUARD_ASSIGNED_DEFENSIVE_AREA( Ped ped, float x, float y, float z, float heading, float maxPatrolProximity, int timer )
	{
		TASK::TASK_GUARD_ASSIGNED_DEFENSIVE_AREA(ped, x, y, z, heading, maxPatrolProximity, timer);
	}

	void LUA_NATIVE_TASK_TASK_GUARD_SPHERE_DEFENSIVE_AREA( Ped ped, float defendPositionX, float defendPositionY, float defendPositionZ, float heading, float maxPatrolProximity, int time, float x, float y, float z, float defensiveAreaRadius )
	{
		TASK::TASK_GUARD_SPHERE_DEFENSIVE_AREA(ped, defendPositionX, defendPositionY, defendPositionZ, heading, maxPatrolProximity, time, x, y, z, defensiveAreaRadius);
	}

	void LUA_NATIVE_TASK_TASK_STAND_GUARD( Ped ped, float x, float y, float z, float heading, const char* scenarioName )
	{
		TASK::TASK_STAND_GUARD(ped, x, y, z, heading, scenarioName);
	}

	void LUA_NATIVE_TASK_SET_DRIVE_TASK_CRUISE_SPEED( Ped driver, float cruiseSpeed )
	{
		TASK::SET_DRIVE_TASK_CRUISE_SPEED(driver, cruiseSpeed);
	}

	void LUA_NATIVE_TASK_SET_DRIVE_TASK_MAX_CRUISE_SPEED( Ped ped, float speed )
	{
		TASK::SET_DRIVE_TASK_MAX_CRUISE_SPEED(ped, speed);
	}

	void LUA_NATIVE_TASK_SET_DRIVE_TASK_DRIVING_STYLE( Ped ped, int drivingStyle )
	{
		TASK::SET_DRIVE_TASK_DRIVING_STYLE(ped, drivingStyle);
	}

	void LUA_NATIVE_TASK_ADD_COVER_BLOCKING_AREA( float startX, float startY, float startZ, float endX, float endY, float endZ, bool blockObjects, bool blockVehicles, bool blockMap, bool blockPlayer )
	{
		TASK::ADD_COVER_BLOCKING_AREA(startX, startY, startZ, endX, endY, endZ, blockObjects, blockVehicles, blockMap, blockPlayer);
	}

	void LUA_NATIVE_TASK_REMOVE_ALL_COVER_BLOCKING_AREAS(  )
	{
		TASK::REMOVE_ALL_COVER_BLOCKING_AREAS();
	}

	void LUA_NATIVE_TASK_REMOVE_COVER_BLOCKING_AREAS_AT_POSITION( float x, float y, float z )
	{
		TASK::REMOVE_COVER_BLOCKING_AREAS_AT_POSITION(x, y, z);
	}

	void LUA_NATIVE_TASK_REMOVE_SPECIFIC_COVER_BLOCKING_AREAS( float startX, float startY, float startZ, float endX, float endY, float endZ, bool blockObjects, bool blockVehicles, bool blockMap, bool blockPlayer )
	{
		TASK::REMOVE_SPECIFIC_COVER_BLOCKING_AREAS(startX, startY, startZ, endX, endY, endZ, blockObjects, blockVehicles, blockMap, blockPlayer);
	}

	void LUA_NATIVE_TASK_TASK_START_SCENARIO_IN_PLACE( Ped ped, const char* scenarioName, int unkDelay, bool playEnterAnim )
	{
		TASK::TASK_START_SCENARIO_IN_PLACE(ped, scenarioName, unkDelay, playEnterAnim);
	}

	void LUA_NATIVE_TASK_TASK_START_SCENARIO_AT_POSITION( Ped ped, const char* scenarioName, float x, float y, float z, float heading, int duration, bool sittingScenario, bool teleport )
	{
		TASK::TASK_START_SCENARIO_AT_POSITION(ped, scenarioName, x, y, z, heading, duration, sittingScenario, teleport);
	}

	void LUA_NATIVE_TASK_TASK_USE_NEAREST_SCENARIO_TO_COORD( Ped ped, float x, float y, float z, float distance, int duration )
	{
		TASK::TASK_USE_NEAREST_SCENARIO_TO_COORD(ped, x, y, z, distance, duration);
	}

	void LUA_NATIVE_TASK_TASK_USE_NEAREST_SCENARIO_TO_COORD_WARP( Ped ped, float x, float y, float z, float radius, int timeToLeave )
	{
		TASK::TASK_USE_NEAREST_SCENARIO_TO_COORD_WARP(ped, x, y, z, radius, timeToLeave);
	}

	void LUA_NATIVE_TASK_TASK_USE_NEAREST_SCENARIO_CHAIN_TO_COORD( Ped ped, float x, float y, float z, float maxRange, int timeToLeave )
	{
		TASK::TASK_USE_NEAREST_SCENARIO_CHAIN_TO_COORD(ped, x, y, z, maxRange, timeToLeave);
	}

	void LUA_NATIVE_TASK_TASK_USE_NEAREST_SCENARIO_CHAIN_TO_COORD_WARP( Ped ped, float x, float y, float z, float radius, int timeToLeave )
	{
		TASK::TASK_USE_NEAREST_SCENARIO_CHAIN_TO_COORD_WARP(ped, x, y, z, radius, timeToLeave);
	}

	bool LUA_NATIVE_TASK_DOES_SCENARIO_EXIST_IN_AREA( float x, float y, float z, float radius, bool mustBeFree )
	{
		auto retval = (bool)TASK::DOES_SCENARIO_EXIST_IN_AREA(x, y, z, radius, mustBeFree);
		return retval;
	}

	bool LUA_NATIVE_TASK_DOES_SCENARIO_OF_TYPE_EXIST_IN_AREA( float x, float y, float z, const char* scenarioName, float radius, bool mustBeFree )
	{
		auto retval = (bool)TASK::DOES_SCENARIO_OF_TYPE_EXIST_IN_AREA(x, y, z, scenarioName, radius, mustBeFree);
		return retval;
	}

	bool LUA_NATIVE_TASK_IS_SCENARIO_OCCUPIED( float x, float y, float z, float maxRange, bool onlyUsersActuallyAtScenario )
	{
		auto retval = (bool)TASK::IS_SCENARIO_OCCUPIED(x, y, z, maxRange, onlyUsersActuallyAtScenario);
		return retval;
	}

	bool LUA_NATIVE_TASK_PED_HAS_USE_SCENARIO_TASK( Ped ped )
	{
		auto retval = (bool)TASK::PED_HAS_USE_SCENARIO_TASK(ped);
		return retval;
	}

	void LUA_NATIVE_TASK_PLAY_ANIM_ON_RUNNING_SCENARIO( Ped ped, const char* animDict, const char* animName )
	{
		TASK::PLAY_ANIM_ON_RUNNING_SCENARIO(ped, animDict, animName);
	}

	bool LUA_NATIVE_TASK_DOES_SCENARIO_GROUP_EXIST( const char* scenarioGroup )
	{
		auto retval = (bool)TASK::DOES_SCENARIO_GROUP_EXIST(scenarioGroup);
		return retval;
	}

	bool LUA_NATIVE_TASK_IS_SCENARIO_GROUP_ENABLED( const char* scenarioGroup )
	{
		auto retval = (bool)TASK::IS_SCENARIO_GROUP_ENABLED(scenarioGroup);
		return retval;
	}

	void LUA_NATIVE_TASK_SET_SCENARIO_GROUP_ENABLED( const char* scenarioGroup, bool enabled )
	{
		TASK::SET_SCENARIO_GROUP_ENABLED(scenarioGroup, enabled);
	}

	void LUA_NATIVE_TASK_RESET_SCENARIO_GROUPS_ENABLED(  )
	{
		TASK::RESET_SCENARIO_GROUPS_ENABLED();
	}

	void LUA_NATIVE_TASK_SET_EXCLUSIVE_SCENARIO_GROUP( const char* scenarioGroup )
	{
		TASK::SET_EXCLUSIVE_SCENARIO_GROUP(scenarioGroup);
	}

	void LUA_NATIVE_TASK_RESET_EXCLUSIVE_SCENARIO_GROUP(  )
	{
		TASK::RESET_EXCLUSIVE_SCENARIO_GROUP();
	}

	bool LUA_NATIVE_TASK_IS_SCENARIO_TYPE_ENABLED( const char* scenarioType )
	{
		auto retval = (bool)TASK::IS_SCENARIO_TYPE_ENABLED(scenarioType);
		return retval;
	}

	void LUA_NATIVE_TASK_SET_SCENARIO_TYPE_ENABLED( const char* scenarioType, bool toggle )
	{
		TASK::SET_SCENARIO_TYPE_ENABLED(scenarioType, toggle);
	}

	void LUA_NATIVE_TASK_RESET_SCENARIO_TYPES_ENABLED(  )
	{
		TASK::RESET_SCENARIO_TYPES_ENABLED();
	}

	bool LUA_NATIVE_TASK_IS_PED_ACTIVE_IN_SCENARIO( Ped ped )
	{
		auto retval = (bool)TASK::IS_PED_ACTIVE_IN_SCENARIO(ped);
		return retval;
	}

	bool LUA_NATIVE_TASK_IS_PED_PLAYING_BASE_CLIP_IN_SCENARIO( Ped ped )
	{
		auto retval = (bool)TASK::IS_PED_PLAYING_BASE_CLIP_IN_SCENARIO(ped);
		return retval;
	}

	void LUA_NATIVE_TASK_SET_PED_CAN_PLAY_AMBIENT_IDLES( Ped ped, bool blockIdleClips, bool removeIdleClipIfPlaying )
	{
		TASK::SET_PED_CAN_PLAY_AMBIENT_IDLES(ped, blockIdleClips, removeIdleClipIfPlaying);
	}

	void LUA_NATIVE_TASK_TASK_COMBAT_HATED_TARGETS_IN_AREA( Ped ped, float x, float y, float z, float radius, int combatFlags )
	{
		TASK::TASK_COMBAT_HATED_TARGETS_IN_AREA(ped, x, y, z, radius, combatFlags);
	}

	void LUA_NATIVE_TASK_TASK_COMBAT_HATED_TARGETS_AROUND_PED( Ped ped, float radius, int combatFlags )
	{
		TASK::TASK_COMBAT_HATED_TARGETS_AROUND_PED(ped, radius, combatFlags);
	}

	void LUA_NATIVE_TASK_TASK_COMBAT_HATED_TARGETS_AROUND_PED_TIMED( Ped ped, float radius, int time, int combatFlags )
	{
		TASK::TASK_COMBAT_HATED_TARGETS_AROUND_PED_TIMED(ped, radius, time, combatFlags);
	}

	void LUA_NATIVE_TASK_TASK_THROW_PROJECTILE( Ped ped, float x, float y, float z, int ignoreCollisionEntityIndex, bool createInvincibleProjectile )
	{
		TASK::TASK_THROW_PROJECTILE(ped, x, y, z, ignoreCollisionEntityIndex, createInvincibleProjectile);
	}

	void LUA_NATIVE_TASK_TASK_SWAP_WEAPON( Ped ped, bool drawWeapon )
	{
		TASK::TASK_SWAP_WEAPON(ped, drawWeapon);
	}

	void LUA_NATIVE_TASK_TASK_RELOAD_WEAPON( Ped ped, bool drawWeapon )
	{
		TASK::TASK_RELOAD_WEAPON(ped, drawWeapon);
	}

	bool LUA_NATIVE_TASK_IS_PED_GETTING_UP( Ped ped )
	{
		auto retval = (bool)TASK::IS_PED_GETTING_UP(ped);
		return retval;
	}

	void LUA_NATIVE_TASK_TASK_WRITHE( Ped ped, Ped target, int minFireLoops, int startState, bool forceShootOnGround, int shootFromGroundTimer )
	{
		TASK::TASK_WRITHE(ped, target, minFireLoops, startState, forceShootOnGround, shootFromGroundTimer);
	}

	bool LUA_NATIVE_TASK_IS_PED_IN_WRITHE( Ped ped )
	{
		auto retval = (bool)TASK::IS_PED_IN_WRITHE(ped);
		return retval;
	}

	void LUA_NATIVE_TASK_OPEN_PATROL_ROUTE( const char* patrolRoute )
	{
		TASK::OPEN_PATROL_ROUTE(patrolRoute);
	}

	void LUA_NATIVE_TASK_CLOSE_PATROL_ROUTE(  )
	{
		TASK::CLOSE_PATROL_ROUTE();
	}

	void LUA_NATIVE_TASK_ADD_PATROL_ROUTE_NODE( int nodeId, const char* nodeType, float posX, float posY, float posZ, float headingX, float headingY, float headingZ, int duration )
	{
		TASK::ADD_PATROL_ROUTE_NODE(nodeId, nodeType, posX, posY, posZ, headingX, headingY, headingZ, duration);
	}

	void LUA_NATIVE_TASK_ADD_PATROL_ROUTE_LINK( int nodeId1, int nodeId2 )
	{
		TASK::ADD_PATROL_ROUTE_LINK(nodeId1, nodeId2);
	}

	void LUA_NATIVE_TASK_CREATE_PATROL_ROUTE(  )
	{
		TASK::CREATE_PATROL_ROUTE();
	}

	void LUA_NATIVE_TASK_DELETE_PATROL_ROUTE( const char* patrolRoute )
	{
		TASK::DELETE_PATROL_ROUTE(patrolRoute);
	}

	std::tuple<bool, int, int> LUA_NATIVE_TASK_GET_PATROL_TASK_INFO( Ped ped, int timeLeftAtNode, int nodeId )
	{
		std::tuple<bool, int, int> return_values;
		std::get<0>(return_values) = (bool)TASK::GET_PATROL_TASK_INFO(ped, &timeLeftAtNode, &nodeId);
		std::get<1>(return_values) = timeLeftAtNode;
		std::get<2>(return_values) = nodeId;

		return return_values;
	}

	void LUA_NATIVE_TASK_TASK_PATROL( Ped ped, const char* patrolRouteName, int alertState, bool canChatToPeds, bool useHeadLookAt )
	{
		TASK::TASK_PATROL(ped, patrolRouteName, alertState, canChatToPeds, useHeadLookAt);
	}

	void LUA_NATIVE_TASK_TASK_STAY_IN_COVER( Ped ped )
	{
		TASK::TASK_STAY_IN_COVER(ped);
	}

	void LUA_NATIVE_TASK_ADD_VEHICLE_SUBTASK_ATTACK_COORD( Ped ped, float x, float y, float z )
	{
		TASK::ADD_VEHICLE_SUBTASK_ATTACK_COORD(ped, x, y, z);
	}

	void LUA_NATIVE_TASK_ADD_VEHICLE_SUBTASK_ATTACK_PED( Ped ped, Ped target )
	{
		TASK::ADD_VEHICLE_SUBTASK_ATTACK_PED(ped, target);
	}

	void LUA_NATIVE_TASK_TASK_VEHICLE_SHOOT_AT_PED( Ped ped, Ped target, float fireTolerance )
	{
		TASK::TASK_VEHICLE_SHOOT_AT_PED(ped, target, fireTolerance);
	}

	void LUA_NATIVE_TASK_TASK_VEHICLE_AIM_AT_PED( Ped ped, Ped target )
	{
		TASK::TASK_VEHICLE_AIM_AT_PED(ped, target);
	}

	void LUA_NATIVE_TASK_TASK_VEHICLE_SHOOT_AT_COORD( Ped ped, float x, float y, float z, float fireTolerance )
	{
		TASK::TASK_VEHICLE_SHOOT_AT_COORD(ped, x, y, z, fireTolerance);
	}

	void LUA_NATIVE_TASK_TASK_VEHICLE_AIM_AT_COORD( Ped ped, float x, float y, float z )
	{
		TASK::TASK_VEHICLE_AIM_AT_COORD(ped, x, y, z);
	}

	void LUA_NATIVE_TASK_TASK_VEHICLE_GOTO_NAVMESH( Ped ped, Vehicle vehicle, float x, float y, float z, float speed, int behaviorFlag, float stoppingRange )
	{
		TASK::TASK_VEHICLE_GOTO_NAVMESH(ped, vehicle, x, y, z, speed, behaviorFlag, stoppingRange);
	}

	void LUA_NATIVE_TASK_TASK_GO_TO_COORD_WHILE_AIMING_AT_COORD( Ped ped, float x, float y, float z, float aimAtX, float aimAtY, float aimAtZ, float moveBlendRatio, bool shoot, float targetRadius, float slowDistance, bool useNavMesh, int navFlags, bool instantBlendToAim, Hash firingPattern )
	{
		TASK::TASK_GO_TO_COORD_WHILE_AIMING_AT_COORD(ped, x, y, z, aimAtX, aimAtY, aimAtZ, moveBlendRatio, shoot, targetRadius, slowDistance, useNavMesh, navFlags, instantBlendToAim, firingPattern);
	}

	void LUA_NATIVE_TASK_TASK_GO_TO_COORD_WHILE_AIMING_AT_ENTITY( Ped ped, float x, float y, float z, Entity aimAtID, float moveBlendRatio, bool shoot, float targetRadius, float slowDistance, bool useNavMesh, int navFlags, bool instantBlendToAim, Hash firingPattern, int time )
	{
		TASK::TASK_GO_TO_COORD_WHILE_AIMING_AT_ENTITY(ped, x, y, z, aimAtID, moveBlendRatio, shoot, targetRadius, slowDistance, useNavMesh, navFlags, instantBlendToAim, firingPattern, time);
	}

	void LUA_NATIVE_TASK_TASK_GO_TO_COORD_AND_AIM_AT_HATED_ENTITIES_NEAR_COORD( Ped pedHandle, float goToLocationX, float goToLocationY, float goToLocationZ, float focusLocationX, float focusLocationY, float focusLocationZ, float speed, bool shootAtEnemies, float distanceToStopAt, float noRoadsDistance, bool useNavMesh, int navFlags, int taskFlags, Hash firingPattern )
	{
		TASK::TASK_GO_TO_COORD_AND_AIM_AT_HATED_ENTITIES_NEAR_COORD(pedHandle, goToLocationX, goToLocationY, goToLocationZ, focusLocationX, focusLocationY, focusLocationZ, speed, shootAtEnemies, distanceToStopAt, noRoadsDistance, useNavMesh, navFlags, taskFlags, firingPattern);
	}

	void LUA_NATIVE_TASK_TASK_GO_TO_ENTITY_WHILE_AIMING_AT_COORD( Ped ped, Entity entity, float aimX, float aimY, float aimZ, float moveBlendRatio, bool shoot, float targetRadius, float slowDistance, bool useNavMesh, bool instantBlendToAim, Hash firingPattern )
	{
		TASK::TASK_GO_TO_ENTITY_WHILE_AIMING_AT_COORD(ped, entity, aimX, aimY, aimZ, moveBlendRatio, shoot, targetRadius, slowDistance, useNavMesh, instantBlendToAim, firingPattern);
	}

	void LUA_NATIVE_TASK_TASK_GO_TO_ENTITY_WHILE_AIMING_AT_ENTITY( Ped ped, Entity entityToWalkTo, Entity entityToAimAt, float speed, bool shootatEntity, float targetRadius, float slowDistance, bool useNavMesh, bool instantBlendToAim, Hash firingPattern )
	{
		TASK::TASK_GO_TO_ENTITY_WHILE_AIMING_AT_ENTITY(ped, entityToWalkTo, entityToAimAt, speed, shootatEntity, targetRadius, slowDistance, useNavMesh, instantBlendToAim, firingPattern);
	}

	void LUA_NATIVE_TASK_SET_HIGH_FALL_TASK( Ped ped, int minTime, int maxTime, int entryType )
	{
		TASK::SET_HIGH_FALL_TASK(ped, minTime, maxTime, entryType);
	}

	void LUA_NATIVE_TASK_REQUEST_WAYPOINT_RECORDING( const char* name )
	{
		TASK::REQUEST_WAYPOINT_RECORDING(name);
	}

	bool LUA_NATIVE_TASK_GET_IS_WAYPOINT_RECORDING_LOADED( const char* name )
	{
		auto retval = (bool)TASK::GET_IS_WAYPOINT_RECORDING_LOADED(name);
		return retval;
	}

	void LUA_NATIVE_TASK_REMOVE_WAYPOINT_RECORDING( const char* name )
	{
		TASK::REMOVE_WAYPOINT_RECORDING(name);
	}

	std::tuple<bool, int> LUA_NATIVE_TASK_WAYPOINT_RECORDING_GET_NUM_POINTS( const char* name, int points )
	{
		std::tuple<bool, int> return_values;
		std::get<0>(return_values) = (bool)TASK::WAYPOINT_RECORDING_GET_NUM_POINTS(name, &points);
		std::get<1>(return_values) = points;

		return return_values;
	}

	std::tuple<bool, Vector3> LUA_NATIVE_TASK_WAYPOINT_RECORDING_GET_COORD( const char* name, int point, Vector3 coord )
	{
		std::tuple<bool, Vector3> return_values;
		std::get<0>(return_values) = (bool)TASK::WAYPOINT_RECORDING_GET_COORD(name, point, &coord);
		std::get<1>(return_values) = coord;

		return return_values;
	}

	float LUA_NATIVE_TASK_WAYPOINT_RECORDING_GET_SPEED_AT_POINT( const char* name, int point )
	{
		auto retval = TASK::WAYPOINT_RECORDING_GET_SPEED_AT_POINT(name, point);
		return retval;
	}

	std::tuple<bool, int> LUA_NATIVE_TASK_WAYPOINT_RECORDING_GET_CLOSEST_WAYPOINT( const char* name, float x, float y, float z, int point )
	{
		std::tuple<bool, int> return_values;
		std::get<0>(return_values) = (bool)TASK::WAYPOINT_RECORDING_GET_CLOSEST_WAYPOINT(name, x, y, z, &point);
		std::get<1>(return_values) = point;

		return return_values;
	}

	void LUA_NATIVE_TASK_TASK_FOLLOW_WAYPOINT_RECORDING( Ped ped, const char* name, int p2, int p3, int p4 )
	{
		TASK::TASK_FOLLOW_WAYPOINT_RECORDING(ped, name, p2, p3, p4);
	}

	bool LUA_NATIVE_TASK_IS_WAYPOINT_PLAYBACK_GOING_ON_FOR_PED( Ped ped )
	{
		auto retval = (bool)TASK::IS_WAYPOINT_PLAYBACK_GOING_ON_FOR_PED(ped);
		return retval;
	}

	int LUA_NATIVE_TASK_GET_PED_WAYPOINT_PROGRESS( Ped ped )
	{
		auto retval = TASK::GET_PED_WAYPOINT_PROGRESS(ped);
		return retval;
	}

	float LUA_NATIVE_TASK_GET_PED_WAYPOINT_DISTANCE( Any p0 )
	{
		auto retval = TASK::GET_PED_WAYPOINT_DISTANCE(p0);
		return retval;
	}

	bool LUA_NATIVE_TASK_SET_PED_WAYPOINT_ROUTE_OFFSET( Ped ped, float x, float y, float z )
	{
		auto retval = (bool)TASK::SET_PED_WAYPOINT_ROUTE_OFFSET(ped, x, y, z);
		return retval;
	}

	float LUA_NATIVE_TASK_GET_WAYPOINT_DISTANCE_ALONG_ROUTE( const char* name, int point )
	{
		auto retval = TASK::GET_WAYPOINT_DISTANCE_ALONG_ROUTE(name, point);
		return retval;
	}

	bool LUA_NATIVE_TASK_WAYPOINT_PLAYBACK_GET_IS_PAUSED( Any p0 )
	{
		auto retval = (bool)TASK::WAYPOINT_PLAYBACK_GET_IS_PAUSED(p0);
		return retval;
	}

	void LUA_NATIVE_TASK_WAYPOINT_PLAYBACK_PAUSE( Any p0, bool p1, bool p2 )
	{
		TASK::WAYPOINT_PLAYBACK_PAUSE(p0, p1, p2);
	}

	void LUA_NATIVE_TASK_WAYPOINT_PLAYBACK_RESUME( Any p0, bool p1, Any p2, Any p3 )
	{
		TASK::WAYPOINT_PLAYBACK_RESUME(p0, p1, p2, p3);
	}

	void LUA_NATIVE_TASK_WAYPOINT_PLAYBACK_OVERRIDE_SPEED( Any p0, float p1, bool p2 )
	{
		TASK::WAYPOINT_PLAYBACK_OVERRIDE_SPEED(p0, p1, p2);
	}

	void LUA_NATIVE_TASK_WAYPOINT_PLAYBACK_USE_DEFAULT_SPEED( Any p0 )
	{
		TASK::WAYPOINT_PLAYBACK_USE_DEFAULT_SPEED(p0);
	}

	void LUA_NATIVE_TASK_USE_WAYPOINT_RECORDING_AS_ASSISTED_MOVEMENT_ROUTE( const char* name, bool p1, float p2, float p3 )
	{
		TASK::USE_WAYPOINT_RECORDING_AS_ASSISTED_MOVEMENT_ROUTE(name, p1, p2, p3);
	}

	void LUA_NATIVE_TASK_WAYPOINT_PLAYBACK_START_AIMING_AT_PED( Ped ped, Ped target, bool p2 )
	{
		TASK::WAYPOINT_PLAYBACK_START_AIMING_AT_PED(ped, target, p2);
	}

	void LUA_NATIVE_TASK_WAYPOINT_PLAYBACK_START_AIMING_AT_COORD( Ped ped, float x, float y, float z, bool p4 )
	{
		TASK::WAYPOINT_PLAYBACK_START_AIMING_AT_COORD(ped, x, y, z, p4);
	}

	void LUA_NATIVE_TASK_WAYPOINT_PLAYBACK_START_SHOOTING_AT_PED( Ped ped, Ped ped2, bool p2, bool p3 )
	{
		TASK::WAYPOINT_PLAYBACK_START_SHOOTING_AT_PED(ped, ped2, p2, p3);
	}

	void LUA_NATIVE_TASK_WAYPOINT_PLAYBACK_START_SHOOTING_AT_COORD( Ped ped, float x, float y, float z, bool p4, Hash firingPattern )
	{
		TASK::WAYPOINT_PLAYBACK_START_SHOOTING_AT_COORD(ped, x, y, z, p4, firingPattern);
	}

	void LUA_NATIVE_TASK_WAYPOINT_PLAYBACK_STOP_AIMING_OR_SHOOTING( Ped ped )
	{
		TASK::WAYPOINT_PLAYBACK_STOP_AIMING_OR_SHOOTING(ped);
	}

	void LUA_NATIVE_TASK_ASSISTED_MOVEMENT_REQUEST_ROUTE( const char* route )
	{
		TASK::ASSISTED_MOVEMENT_REQUEST_ROUTE(route);
	}

	void LUA_NATIVE_TASK_ASSISTED_MOVEMENT_REMOVE_ROUTE( const char* route )
	{
		TASK::ASSISTED_MOVEMENT_REMOVE_ROUTE(route);
	}

	bool LUA_NATIVE_TASK_ASSISTED_MOVEMENT_IS_ROUTE_LOADED( const char* route )
	{
		auto retval = (bool)TASK::ASSISTED_MOVEMENT_IS_ROUTE_LOADED(route);
		return retval;
	}

	void LUA_NATIVE_TASK_ASSISTED_MOVEMENT_SET_ROUTE_PROPERTIES( const char* route, int props )
	{
		TASK::ASSISTED_MOVEMENT_SET_ROUTE_PROPERTIES(route, props);
	}

	void LUA_NATIVE_TASK_ASSISTED_MOVEMENT_OVERRIDE_LOAD_DISTANCE_THIS_FRAME( float dist )
	{
		TASK::ASSISTED_MOVEMENT_OVERRIDE_LOAD_DISTANCE_THIS_FRAME(dist);
	}

	void LUA_NATIVE_TASK_TASK_VEHICLE_FOLLOW_WAYPOINT_RECORDING( Ped ped, Vehicle vehicle, const char* WPRecording, int p3, int p4, int p5, int p6, float p7, bool p8, float p9 )
	{
		TASK::TASK_VEHICLE_FOLLOW_WAYPOINT_RECORDING(ped, vehicle, WPRecording, p3, p4, p5, p6, p7, p8, p9);
	}

	bool LUA_NATIVE_TASK_IS_WAYPOINT_PLAYBACK_GOING_ON_FOR_VEHICLE( Vehicle vehicle )
	{
		auto retval = (bool)TASK::IS_WAYPOINT_PLAYBACK_GOING_ON_FOR_VEHICLE(vehicle);
		return retval;
	}

	int LUA_NATIVE_TASK_GET_VEHICLE_WAYPOINT_PROGRESS( Vehicle vehicle )
	{
		auto retval = TASK::GET_VEHICLE_WAYPOINT_PROGRESS(vehicle);
		return retval;
	}

	int LUA_NATIVE_TASK_GET_VEHICLE_WAYPOINT_TARGET_POINT( Vehicle vehicle )
	{
		auto retval = TASK::GET_VEHICLE_WAYPOINT_TARGET_POINT(vehicle);
		return retval;
	}

	void LUA_NATIVE_TASK_VEHICLE_WAYPOINT_PLAYBACK_PAUSE( Vehicle vehicle )
	{
		TASK::VEHICLE_WAYPOINT_PLAYBACK_PAUSE(vehicle);
	}

	void LUA_NATIVE_TASK_VEHICLE_WAYPOINT_PLAYBACK_RESUME( Vehicle vehicle )
	{
		TASK::VEHICLE_WAYPOINT_PLAYBACK_RESUME(vehicle);
	}

	void LUA_NATIVE_TASK_VEHICLE_WAYPOINT_PLAYBACK_USE_DEFAULT_SPEED( Vehicle vehicle )
	{
		TASK::VEHICLE_WAYPOINT_PLAYBACK_USE_DEFAULT_SPEED(vehicle);
	}

	void LUA_NATIVE_TASK_VEHICLE_WAYPOINT_PLAYBACK_OVERRIDE_SPEED( Vehicle vehicle, float speed )
	{
		TASK::VEHICLE_WAYPOINT_PLAYBACK_OVERRIDE_SPEED(vehicle, speed);
	}

	void LUA_NATIVE_TASK_TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( Ped ped, bool toggle )
	{
		TASK::TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS(ped, toggle);
	}

	void LUA_NATIVE_TASK_TASK_FORCE_MOTION_STATE( Ped ped, Hash state, bool forceRestart )
	{
		TASK::TASK_FORCE_MOTION_STATE(ped, state, forceRestart);
	}

	void LUA_NATIVE_TASK_TASK_MOVE_NETWORK_BY_NAME( Ped ped, const char* task, float multiplier, bool allowOverrideCloneUpdate, const char* animDict, int flags )
	{
		TASK::TASK_MOVE_NETWORK_BY_NAME(ped, task, multiplier, allowOverrideCloneUpdate, animDict, flags);
	}

	void LUA_NATIVE_TASK_TASK_MOVE_NETWORK_ADVANCED_BY_NAME( Ped ped, const char* network, float x, float y, float z, float rotX, float rotY, float rotZ, int rotOrder, float blendDuration, bool allowOverrideCloneUpdate, const char* animDict, int flags )
	{
		TASK::TASK_MOVE_NETWORK_ADVANCED_BY_NAME(ped, network, x, y, z, rotX, rotY, rotZ, rotOrder, blendDuration, allowOverrideCloneUpdate, animDict, flags);
	}

	int LUA_NATIVE_TASK_TASK_MOVE_NETWORK_BY_NAME_WITH_INIT_PARAMS( Ped ped, const char* network, int initialParameters, float blendDuration, bool allowOverrideCloneUpdate, const char* animDict, int flags )
	{
		TASK::TASK_MOVE_NETWORK_BY_NAME_WITH_INIT_PARAMS(ped, network, &initialParameters, blendDuration, allowOverrideCloneUpdate, animDict, flags);
		return initialParameters;
	}

	int LUA_NATIVE_TASK_TASK_MOVE_NETWORK_ADVANCED_BY_NAME_WITH_INIT_PARAMS( Ped ped, const char* network, int initialParameters, float x, float y, float z, float rotX, float rotY, float rotZ, int rotOrder, float blendDuration, bool allowOverrideCloneUpdate, const char* dictionary, int flags )
	{
		TASK::TASK_MOVE_NETWORK_ADVANCED_BY_NAME_WITH_INIT_PARAMS(ped, network, &initialParameters, x, y, z, rotX, rotY, rotZ, rotOrder, blendDuration, allowOverrideCloneUpdate, dictionary, flags);
		return initialParameters;
	}

	bool LUA_NATIVE_TASK_IS_TASK_MOVE_NETWORK_ACTIVE( Ped ped )
	{
		auto retval = (bool)TASK::IS_TASK_MOVE_NETWORK_ACTIVE(ped);
		return retval;
	}

	bool LUA_NATIVE_TASK_IS_TASK_MOVE_NETWORK_READY_FOR_TRANSITION( Ped ped )
	{
		auto retval = (bool)TASK::IS_TASK_MOVE_NETWORK_READY_FOR_TRANSITION(ped);
		return retval;
	}

	bool LUA_NATIVE_TASK_REQUEST_TASK_MOVE_NETWORK_STATE_TRANSITION( Ped ped, const char* name )
	{
		auto retval = (bool)TASK::REQUEST_TASK_MOVE_NETWORK_STATE_TRANSITION(ped, name);
		return retval;
	}

	bool LUA_NATIVE_TASK_SET_EXPECTED_CLONE_NEXT_TASK_MOVE_NETWORK_STATE( Ped ped, const char* state )
	{
		auto retval = (bool)TASK::SET_EXPECTED_CLONE_NEXT_TASK_MOVE_NETWORK_STATE(ped, state);
		return retval;
	}

	const char* LUA_NATIVE_TASK_GET_TASK_MOVE_NETWORK_STATE( Ped ped )
	{
		auto retval = TASK::GET_TASK_MOVE_NETWORK_STATE(ped);
		return retval;
	}

	void LUA_NATIVE_TASK_SET_TASK_MOVE_NETWORK_ANIM_SET( Ped ped, Hash clipSet, Hash variableClipSet )
	{
		TASK::SET_TASK_MOVE_NETWORK_ANIM_SET(ped, clipSet, variableClipSet);
	}

	void LUA_NATIVE_TASK_SET_TASK_MOVE_NETWORK_SIGNAL_FLOAT( Ped ped, const char* signalName, float value )
	{
		TASK::SET_TASK_MOVE_NETWORK_SIGNAL_FLOAT(ped, signalName, value);
	}

	void LUA_NATIVE_TASK_SET_TASK_MOVE_NETWORK_SIGNAL_LOCAL_FLOAT( Ped ped, const char* signalName, float value )
	{
		TASK::SET_TASK_MOVE_NETWORK_SIGNAL_LOCAL_FLOAT(ped, signalName, value);
	}

	void LUA_NATIVE_TASK_SET_TASK_MOVE_NETWORK_SIGNAL_FLOAT_LERP_RATE( Ped ped, const char* signalName, float value )
	{
		TASK::SET_TASK_MOVE_NETWORK_SIGNAL_FLOAT_LERP_RATE(ped, signalName, value);
	}

	void LUA_NATIVE_TASK_SET_TASK_MOVE_NETWORK_SIGNAL_BOOL( Ped ped, const char* signalName, bool value )
	{
		TASK::SET_TASK_MOVE_NETWORK_SIGNAL_BOOL(ped, signalName, value);
	}

	float LUA_NATIVE_TASK_GET_TASK_MOVE_NETWORK_SIGNAL_FLOAT( Ped ped, const char* signalName )
	{
		auto retval = TASK::GET_TASK_MOVE_NETWORK_SIGNAL_FLOAT(ped, signalName);
		return retval;
	}

	bool LUA_NATIVE_TASK_GET_TASK_MOVE_NETWORK_SIGNAL_BOOL( Ped ped, const char* signalName )
	{
		auto retval = (bool)TASK::GET_TASK_MOVE_NETWORK_SIGNAL_BOOL(ped, signalName);
		return retval;
	}

	bool LUA_NATIVE_TASK_GET_TASK_MOVE_NETWORK_EVENT( Ped ped, const char* eventName )
	{
		auto retval = (bool)TASK::GET_TASK_MOVE_NETWORK_EVENT(ped, eventName);
		return retval;
	}

	bool LUA_NATIVE_TASK_SET_TASK_MOVE_NETWORK_ENABLE_COLLISION_ON_NETWORK_CLONE_WHEN_FIXED( Ped ped, bool enable )
	{
		auto retval = (bool)TASK::SET_TASK_MOVE_NETWORK_ENABLE_COLLISION_ON_NETWORK_CLONE_WHEN_FIXED(ped, enable);
		return retval;
	}

	bool LUA_NATIVE_TASK_IS_MOVE_BLEND_RATIO_STILL( Ped ped )
	{
		auto retval = (bool)TASK::IS_MOVE_BLEND_RATIO_STILL(ped);
		return retval;
	}

	bool LUA_NATIVE_TASK_IS_MOVE_BLEND_RATIO_WALKING( Ped ped )
	{
		auto retval = (bool)TASK::IS_MOVE_BLEND_RATIO_WALKING(ped);
		return retval;
	}

	bool LUA_NATIVE_TASK_IS_MOVE_BLEND_RATIO_RUNNING( Ped ped )
	{
		auto retval = (bool)TASK::IS_MOVE_BLEND_RATIO_RUNNING(ped);
		return retval;
	}

	bool LUA_NATIVE_TASK_IS_MOVE_BLEND_RATIO_SPRINTING( Ped ped )
	{
		auto retval = (bool)TASK::IS_MOVE_BLEND_RATIO_SPRINTING(ped);
		return retval;
	}

	bool LUA_NATIVE_TASK_IS_PED_STILL( Ped ped )
	{
		auto retval = (bool)TASK::IS_PED_STILL(ped);
		return retval;
	}

	bool LUA_NATIVE_TASK_IS_PED_WALKING( Ped ped )
	{
		auto retval = (bool)TASK::IS_PED_WALKING(ped);
		return retval;
	}

	bool LUA_NATIVE_TASK_IS_PED_RUNNING( Ped ped )
	{
		auto retval = (bool)TASK::IS_PED_RUNNING(ped);
		return retval;
	}

	bool LUA_NATIVE_TASK_IS_PED_SPRINTING( Ped ped )
	{
		auto retval = (bool)TASK::IS_PED_SPRINTING(ped);
		return retval;
	}

	bool LUA_NATIVE_TASK_IS_PED_STRAFING( Ped ped )
	{
		auto retval = (bool)TASK::IS_PED_STRAFING(ped);
		return retval;
	}

	void LUA_NATIVE_TASK_TASK_SYNCHRONIZED_SCENE( Ped ped, int scene, const char* animDictionary, const char* animationName, float blendIn, float blendOut, int flags, int ragdollBlockingFlags, float moverBlendDelta, int ikFlags )
	{
		TASK::TASK_SYNCHRONIZED_SCENE(ped, scene, animDictionary, animationName, blendIn, blendOut, flags, ragdollBlockingFlags, moverBlendDelta, ikFlags);
	}

	void LUA_NATIVE_TASK_TASK_AGITATED_ACTION_CONFRONT_RESPONSE( Ped ped, Ped ped2 )
	{
		TASK::TASK_AGITATED_ACTION_CONFRONT_RESPONSE(ped, ped2);
	}

	void LUA_NATIVE_TASK_TASK_SWEEP_AIM_ENTITY( Ped ped, const char* animDict, const char* lowAnimName, const char* medAnimName, const char* hiAnimName, int runtime, Entity targetEntity, float turnRate, float blendInDuration )
	{
		TASK::TASK_SWEEP_AIM_ENTITY(ped, animDict, lowAnimName, medAnimName, hiAnimName, runtime, targetEntity, turnRate, blendInDuration);
	}

	void LUA_NATIVE_TASK_UPDATE_TASK_SWEEP_AIM_ENTITY( Ped ped, Entity entity )
	{
		TASK::UPDATE_TASK_SWEEP_AIM_ENTITY(ped, entity);
	}

	void LUA_NATIVE_TASK_TASK_SWEEP_AIM_POSITION( Ped ped, const char* animDict, const char* lowAnimName, const char* medAnimName, const char* hiAnimName, int runtime, float x, float y, float z, float turnRate, float blendInDuration )
	{
		TASK::TASK_SWEEP_AIM_POSITION(ped, animDict, lowAnimName, medAnimName, hiAnimName, runtime, x, y, z, turnRate, blendInDuration);
	}

	void LUA_NATIVE_TASK_UPDATE_TASK_SWEEP_AIM_POSITION( Ped ped, float x, float y, float z )
	{
		TASK::UPDATE_TASK_SWEEP_AIM_POSITION(ped, x, y, z);
	}

	void LUA_NATIVE_TASK_TASK_ARREST_PED( Ped ped, Ped target )
	{
		TASK::TASK_ARREST_PED(ped, target);
	}

	bool LUA_NATIVE_TASK_IS_PED_RUNNING_ARREST_TASK( Ped ped )
	{
		auto retval = (bool)TASK::IS_PED_RUNNING_ARREST_TASK(ped);
		return retval;
	}

	bool LUA_NATIVE_TASK_IS_PED_BEING_ARRESTED( Ped ped )
	{
		auto retval = (bool)TASK::IS_PED_BEING_ARRESTED(ped);
		return retval;
	}

	void LUA_NATIVE_TASK_UNCUFF_PED( Ped ped )
	{
		TASK::UNCUFF_PED(ped);
	}

	bool LUA_NATIVE_TASK_IS_PED_CUFFED( Ped ped )
	{
		auto retval = (bool)TASK::IS_PED_CUFFED(ped);
		return retval;
	}

	Vehicle LUA_NATIVE_VEHICLE_CREATE_VEHICLE( Hash modelHash, float x, float y, float z, float heading, bool isNetwork, bool bScriptHostVeh, bool p7 )
	{
		auto retval = VEHICLE::CREATE_VEHICLE(modelHash, x, y, z, heading, isNetwork, bScriptHostVeh, p7);
		return retval;
	}

	Vehicle LUA_NATIVE_VEHICLE_DELETE_VEHICLE( Vehicle vehicle )
	{
		VEHICLE::DELETE_VEHICLE(&vehicle);
		return vehicle;
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_ALLOW_HOMING_MISSLE_LOCKON( Vehicle vehicle, bool toggle, bool p2 )
	{
		VEHICLE::SET_VEHICLE_ALLOW_HOMING_MISSLE_LOCKON(vehicle, toggle, p2);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_ALLOW_HOMING_MISSLE_LOCKON_SYNCED( Vehicle vehicle, bool canBeLockedOn, bool p2 )
	{
		VEHICLE::SET_VEHICLE_ALLOW_HOMING_MISSLE_LOCKON_SYNCED(vehicle, canBeLockedOn, p2);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_ALLOW_NO_PASSENGERS_LOCKON( Vehicle veh, bool toggle )
	{
		VEHICLE::SET_VEHICLE_ALLOW_NO_PASSENGERS_LOCKON(veh, toggle);
	}

	int LUA_NATIVE_VEHICLE_GET_VEHICLE_HOMING_LOCKON_STATE( Vehicle vehicle )
	{
		auto retval = VEHICLE::GET_VEHICLE_HOMING_LOCKON_STATE(vehicle);
		return retval;
	}

	int LUA_NATIVE_VEHICLE_GET_VEHICLE_HOMING_LOCKEDONTO_STATE( Any p0 )
	{
		auto retval = VEHICLE::GET_VEHICLE_HOMING_LOCKEDONTO_STATE(p0);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_HOMING_LOCKEDONTO_STATE( Any p0, Any p1 )
	{
		VEHICLE::SET_VEHICLE_HOMING_LOCKEDONTO_STATE(p0, p1);
	}

	bool LUA_NATIVE_VEHICLE_IS_VEHICLE_MODEL( Vehicle vehicle, Hash model )
	{
		auto retval = (bool)VEHICLE::IS_VEHICLE_MODEL(vehicle, model);
		return retval;
	}

	bool LUA_NATIVE_VEHICLE_DOES_SCRIPT_VEHICLE_GENERATOR_EXIST( int vehicleGenerator )
	{
		auto retval = (bool)VEHICLE::DOES_SCRIPT_VEHICLE_GENERATOR_EXIST(vehicleGenerator);
		return retval;
	}

	int LUA_NATIVE_VEHICLE_CREATE_SCRIPT_VEHICLE_GENERATOR( float x, float y, float z, float heading, float p4, float p5, Hash modelHash, int p7, int p8, int p9, int p10, bool p11, bool p12, bool p13, bool p14, bool p15, int p16 )
	{
		auto retval = VEHICLE::CREATE_SCRIPT_VEHICLE_GENERATOR(x, y, z, heading, p4, p5, modelHash, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_DELETE_SCRIPT_VEHICLE_GENERATOR( int vehicleGenerator )
	{
		VEHICLE::DELETE_SCRIPT_VEHICLE_GENERATOR(vehicleGenerator);
	}

	void LUA_NATIVE_VEHICLE_SET_SCRIPT_VEHICLE_GENERATOR( int vehicleGenerator, bool enabled )
	{
		VEHICLE::SET_SCRIPT_VEHICLE_GENERATOR(vehicleGenerator, enabled);
	}

	void LUA_NATIVE_VEHICLE_SET_ALL_VEHICLE_GENERATORS_ACTIVE_IN_AREA( float x1, float y1, float z1, float x2, float y2, float z2, bool toggle, bool p7 )
	{
		VEHICLE::SET_ALL_VEHICLE_GENERATORS_ACTIVE_IN_AREA(x1, y1, z1, x2, y2, z2, toggle, p7);
	}

	void LUA_NATIVE_VEHICLE_SET_ALL_VEHICLE_GENERATORS_ACTIVE(  )
	{
		VEHICLE::SET_ALL_VEHICLE_GENERATORS_ACTIVE();
	}

	void LUA_NATIVE_VEHICLE_SET_ALL_LOW_PRIORITY_VEHICLE_GENERATORS_ACTIVE( bool active )
	{
		VEHICLE::SET_ALL_LOW_PRIORITY_VEHICLE_GENERATORS_ACTIVE(active);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_GENERATOR_AREA_OF_INTEREST( float x, float y, float z, float radius )
	{
		VEHICLE::SET_VEHICLE_GENERATOR_AREA_OF_INTEREST(x, y, z, radius);
	}

	void LUA_NATIVE_VEHICLE_CLEAR_VEHICLE_GENERATOR_AREA_OF_INTEREST(  )
	{
		VEHICLE::CLEAR_VEHICLE_GENERATOR_AREA_OF_INTEREST();
	}

	bool LUA_NATIVE_VEHICLE_SET_VEHICLE_ON_GROUND_PROPERLY( Vehicle vehicle, float p1 )
	{
		auto retval = (bool)VEHICLE::SET_VEHICLE_ON_GROUND_PROPERLY(vehicle, p1);
		return retval;
	}

	bool LUA_NATIVE_VEHICLE_SET_VEHICLE_USE_CUTSCENE_WHEEL_COMPRESSION( Vehicle p0, bool p1, bool p2, bool p3 )
	{
		auto retval = (bool)VEHICLE::SET_VEHICLE_USE_CUTSCENE_WHEEL_COMPRESSION(p0, p1, p2, p3);
		return retval;
	}

	bool LUA_NATIVE_VEHICLE_IS_VEHICLE_STUCK_ON_ROOF( Vehicle vehicle )
	{
		auto retval = (bool)VEHICLE::IS_VEHICLE_STUCK_ON_ROOF(vehicle);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_ADD_VEHICLE_UPSIDEDOWN_CHECK( Vehicle vehicle )
	{
		VEHICLE::ADD_VEHICLE_UPSIDEDOWN_CHECK(vehicle);
	}

	void LUA_NATIVE_VEHICLE_REMOVE_VEHICLE_UPSIDEDOWN_CHECK( Vehicle vehicle )
	{
		VEHICLE::REMOVE_VEHICLE_UPSIDEDOWN_CHECK(vehicle);
	}

	bool LUA_NATIVE_VEHICLE_IS_VEHICLE_STOPPED( Vehicle vehicle )
	{
		auto retval = (bool)VEHICLE::IS_VEHICLE_STOPPED(vehicle);
		return retval;
	}

	int LUA_NATIVE_VEHICLE_GET_VEHICLE_NUMBER_OF_PASSENGERS( Vehicle vehicle, bool includeDriver, bool includeDeadOccupants )
	{
		auto retval = VEHICLE::GET_VEHICLE_NUMBER_OF_PASSENGERS(vehicle, includeDriver, includeDeadOccupants);
		return retval;
	}

	int LUA_NATIVE_VEHICLE_GET_VEHICLE_MAX_NUMBER_OF_PASSENGERS( Vehicle vehicle )
	{
		auto retval = VEHICLE::GET_VEHICLE_MAX_NUMBER_OF_PASSENGERS(vehicle);
		return retval;
	}

	int LUA_NATIVE_VEHICLE_GET_VEHICLE_MODEL_NUMBER_OF_SEATS( Hash modelHash )
	{
		auto retval = VEHICLE::GET_VEHICLE_MODEL_NUMBER_OF_SEATS(modelHash);
		return retval;
	}

	bool LUA_NATIVE_VEHICLE_IS_SEAT_WARP_ONLY( Vehicle vehicle, int seatIndex )
	{
		auto retval = (bool)VEHICLE::IS_SEAT_WARP_ONLY(vehicle, seatIndex);
		return retval;
	}

	bool LUA_NATIVE_VEHICLE_IS_TURRET_SEAT( Vehicle vehicle, int seatIndex )
	{
		auto retval = (bool)VEHICLE::IS_TURRET_SEAT(vehicle, seatIndex);
		return retval;
	}

	bool LUA_NATIVE_VEHICLE_DOES_VEHICLE_ALLOW_RAPPEL( Vehicle vehicle )
	{
		auto retval = (bool)VEHICLE::DOES_VEHICLE_ALLOW_RAPPEL(vehicle);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME( float multiplier )
	{
		VEHICLE::SET_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME(multiplier);
	}

	void LUA_NATIVE_VEHICLE_SET_RANDOM_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME( float multiplier )
	{
		VEHICLE::SET_RANDOM_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME(multiplier);
	}

	void LUA_NATIVE_VEHICLE_SET_PARKED_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME( float multiplier )
	{
		VEHICLE::SET_PARKED_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME(multiplier);
	}

	void LUA_NATIVE_VEHICLE_SET_DISABLE_RANDOM_TRAINS_THIS_FRAME( bool toggle )
	{
		VEHICLE::SET_DISABLE_RANDOM_TRAINS_THIS_FRAME(toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_AMBIENT_VEHICLE_RANGE_MULTIPLIER_THIS_FRAME( float value )
	{
		VEHICLE::SET_AMBIENT_VEHICLE_RANGE_MULTIPLIER_THIS_FRAME(value);
	}

	void LUA_NATIVE_VEHICLE_SET_FAR_DRAW_VEHICLES( bool toggle )
	{
		VEHICLE::SET_FAR_DRAW_VEHICLES(toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_NUMBER_OF_PARKED_VEHICLES( int value )
	{
		VEHICLE::SET_NUMBER_OF_PARKED_VEHICLES(value);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_DOORS_LOCKED( Vehicle vehicle, int doorLockStatus )
	{
		VEHICLE::SET_VEHICLE_DOORS_LOCKED(vehicle, doorLockStatus);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_INDIVIDUAL_DOORS_LOCKED( Vehicle vehicle, int doorId, int doorLockStatus )
	{
		VEHICLE::SET_VEHICLE_INDIVIDUAL_DOORS_LOCKED(vehicle, doorId, doorLockStatus);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_HAS_MUTED_SIRENS( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_VEHICLE_HAS_MUTED_SIRENS(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_DOORS_LOCKED_FOR_PLAYER( Vehicle vehicle, Player player, bool toggle )
	{
		VEHICLE::SET_VEHICLE_DOORS_LOCKED_FOR_PLAYER(vehicle, player, toggle);
	}

	bool LUA_NATIVE_VEHICLE_GET_VEHICLE_DOORS_LOCKED_FOR_PLAYER( Vehicle vehicle, Player player )
	{
		auto retval = (bool)VEHICLE::GET_VEHICLE_DOORS_LOCKED_FOR_PLAYER(vehicle, player);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_DOORS_LOCKED_FOR_ALL_PLAYERS( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_VEHICLE_DOORS_LOCKED_FOR_ALL_PLAYERS(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_DOORS_LOCKED_FOR_NON_SCRIPT_PLAYERS( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_VEHICLE_DOORS_LOCKED_FOR_NON_SCRIPT_PLAYERS(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_DOORS_LOCKED_FOR_TEAM( Vehicle vehicle, int team, bool toggle )
	{
		VEHICLE::SET_VEHICLE_DOORS_LOCKED_FOR_TEAM(vehicle, team, toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_DOORS_LOCKED_FOR_ALL_TEAMS( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_VEHICLE_DOORS_LOCKED_FOR_ALL_TEAMS(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_DONT_TERMINATE_TASK_WHEN_ACHIEVED( Vehicle vehicle )
	{
		VEHICLE::SET_VEHICLE_DONT_TERMINATE_TASK_WHEN_ACHIEVED(vehicle);
	}

	void LUA_NATIVE_VEHICLE_EXPLODE_VEHICLE( Vehicle vehicle, bool isAudible, bool isInvisible )
	{
		VEHICLE::EXPLODE_VEHICLE(vehicle, isAudible, isInvisible);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_OUT_OF_CONTROL( Vehicle vehicle, bool killDriver, bool explodeOnImpact )
	{
		VEHICLE::SET_VEHICLE_OUT_OF_CONTROL(vehicle, killDriver, explodeOnImpact);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_TIMED_EXPLOSION( Vehicle vehicle, Ped ped, bool toggle )
	{
		VEHICLE::SET_VEHICLE_TIMED_EXPLOSION(vehicle, ped, toggle);
	}

	void LUA_NATIVE_VEHICLE_ADD_VEHICLE_PHONE_EXPLOSIVE_DEVICE( Vehicle vehicle )
	{
		VEHICLE::ADD_VEHICLE_PHONE_EXPLOSIVE_DEVICE(vehicle);
	}

	void LUA_NATIVE_VEHICLE_CLEAR_VEHICLE_PHONE_EXPLOSIVE_DEVICE(  )
	{
		VEHICLE::CLEAR_VEHICLE_PHONE_EXPLOSIVE_DEVICE();
	}

	bool LUA_NATIVE_VEHICLE_HAS_VEHICLE_PHONE_EXPLOSIVE_DEVICE(  )
	{
		auto retval = (bool)VEHICLE::HAS_VEHICLE_PHONE_EXPLOSIVE_DEVICE();
		return retval;
	}

	void LUA_NATIVE_VEHICLE_DETONATE_VEHICLE_PHONE_EXPLOSIVE_DEVICE(  )
	{
		VEHICLE::DETONATE_VEHICLE_PHONE_EXPLOSIVE_DEVICE();
	}

	bool LUA_NATIVE_VEHICLE_HAVE_VEHICLE_REAR_DOORS_BEEN_BLOWN_OPEN_BY_STICKYBOMB( Vehicle vehicle )
	{
		auto retval = (bool)VEHICLE::HAVE_VEHICLE_REAR_DOORS_BEEN_BLOWN_OPEN_BY_STICKYBOMB(vehicle);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_TAXI_LIGHTS( Vehicle vehicle, bool state )
	{
		VEHICLE::SET_TAXI_LIGHTS(vehicle, state);
	}

	bool LUA_NATIVE_VEHICLE_IS_TAXI_LIGHT_ON( Vehicle vehicle )
	{
		auto retval = (bool)VEHICLE::IS_TAXI_LIGHT_ON(vehicle);
		return retval;
	}

	bool LUA_NATIVE_VEHICLE_IS_VEHICLE_IN_GARAGE_AREA( const char* garageName, Vehicle vehicle )
	{
		auto retval = (bool)VEHICLE::IS_VEHICLE_IN_GARAGE_AREA(garageName, vehicle);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_COLOURS( Vehicle vehicle, int colorPrimary, int colorSecondary )
	{
		VEHICLE::SET_VEHICLE_COLOURS(vehicle, colorPrimary, colorSecondary);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_FULLBEAM( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_VEHICLE_FULLBEAM(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_IS_RACING( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_VEHICLE_IS_RACING(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_CUSTOM_PRIMARY_COLOUR( Vehicle vehicle, int r, int g, int b )
	{
		VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(vehicle, r, g, b);
	}

	std::tuple<int, int, int> LUA_NATIVE_VEHICLE_GET_VEHICLE_CUSTOM_PRIMARY_COLOUR( Vehicle vehicle, int r, int g, int b )
	{
		std::tuple<int, int, int> return_values;
		VEHICLE::GET_VEHICLE_CUSTOM_PRIMARY_COLOUR(vehicle, &r, &g, &b);
		std::get<0>(return_values) = r;
		std::get<1>(return_values) = g;
		std::get<2>(return_values) = b;

		return return_values;
	}

	void LUA_NATIVE_VEHICLE_CLEAR_VEHICLE_CUSTOM_PRIMARY_COLOUR( Vehicle vehicle )
	{
		VEHICLE::CLEAR_VEHICLE_CUSTOM_PRIMARY_COLOUR(vehicle);
	}

	bool LUA_NATIVE_VEHICLE_GET_IS_VEHICLE_PRIMARY_COLOUR_CUSTOM( Vehicle vehicle )
	{
		auto retval = (bool)VEHICLE::GET_IS_VEHICLE_PRIMARY_COLOUR_CUSTOM(vehicle);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_CUSTOM_SECONDARY_COLOUR( Vehicle vehicle, int r, int g, int b )
	{
		VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(vehicle, r, g, b);
	}

	std::tuple<int, int, int> LUA_NATIVE_VEHICLE_GET_VEHICLE_CUSTOM_SECONDARY_COLOUR( Vehicle vehicle, int r, int g, int b )
	{
		std::tuple<int, int, int> return_values;
		VEHICLE::GET_VEHICLE_CUSTOM_SECONDARY_COLOUR(vehicle, &r, &g, &b);
		std::get<0>(return_values) = r;
		std::get<1>(return_values) = g;
		std::get<2>(return_values) = b;

		return return_values;
	}

	void LUA_NATIVE_VEHICLE_CLEAR_VEHICLE_CUSTOM_SECONDARY_COLOUR( Vehicle vehicle )
	{
		VEHICLE::CLEAR_VEHICLE_CUSTOM_SECONDARY_COLOUR(vehicle);
	}

	bool LUA_NATIVE_VEHICLE_GET_IS_VEHICLE_SECONDARY_COLOUR_CUSTOM( Vehicle vehicle )
	{
		auto retval = (bool)VEHICLE::GET_IS_VEHICLE_SECONDARY_COLOUR_CUSTOM(vehicle);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_ENVEFF_SCALE( Vehicle vehicle, float fade )
	{
		VEHICLE::SET_VEHICLE_ENVEFF_SCALE(vehicle, fade);
	}

	float LUA_NATIVE_VEHICLE_GET_VEHICLE_ENVEFF_SCALE( Vehicle vehicle )
	{
		auto retval = VEHICLE::GET_VEHICLE_ENVEFF_SCALE(vehicle);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_CAN_RESPRAY_VEHICLE( Vehicle vehicle, bool state )
	{
		VEHICLE::SET_CAN_RESPRAY_VEHICLE(vehicle, state);
	}

	void LUA_NATIVE_VEHICLE_SET_GOON_BOSS_VEHICLE( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_GOON_BOSS_VEHICLE(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_OPEN_REAR_DOORS_ON_EXPLOSION( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_OPEN_REAR_DOORS_ON_EXPLOSION(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_FORCE_SUBMARINE_SURFACE_MODE( Vehicle vehicle, bool toggle )
	{
		VEHICLE::FORCE_SUBMARINE_SURFACE_MODE(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_FORCE_SUBMARINE_NEURTAL_BUOYANCY( Any p0, Any p1 )
	{
		VEHICLE::FORCE_SUBMARINE_NEURTAL_BUOYANCY(p0, p1);
	}

	void LUA_NATIVE_VEHICLE_SET_SUBMARINE_CRUSH_DEPTHS( Vehicle vehicle, bool p1, float depth1, float depth2, float depth3 )
	{
		VEHICLE::SET_SUBMARINE_CRUSH_DEPTHS(vehicle, p1, depth1, depth2, depth3);
	}

	bool LUA_NATIVE_VEHICLE_GET_SUBMARINE_IS_UNDER_DESIGN_DEPTH( Vehicle submarine )
	{
		auto retval = (bool)VEHICLE::GET_SUBMARINE_IS_UNDER_DESIGN_DEPTH(submarine);
		return retval;
	}

	int LUA_NATIVE_VEHICLE_GET_SUBMARINE_NUMBER_OF_AIR_LEAKS( Vehicle submarine )
	{
		auto retval = VEHICLE::GET_SUBMARINE_NUMBER_OF_AIR_LEAKS(submarine);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_BOAT_IGNORE_LAND_PROBES( Any p0, Any p1 )
	{
		VEHICLE::SET_BOAT_IGNORE_LAND_PROBES(p0, p1);
	}

	void LUA_NATIVE_VEHICLE_SET_BOUNDS_AFFECT_WATER_PROBES_( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_BOUNDS_AFFECT_WATER_PROBES_(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_BOAT_ANCHOR( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_BOAT_ANCHOR(vehicle, toggle);
	}

	bool LUA_NATIVE_VEHICLE_CAN_ANCHOR_BOAT_HERE( Vehicle vehicle )
	{
		auto retval = (bool)VEHICLE::CAN_ANCHOR_BOAT_HERE(vehicle);
		return retval;
	}

	bool LUA_NATIVE_VEHICLE_CAN_ANCHOR_BOAT_HERE_IGNORE_PLAYERS( Vehicle vehicle )
	{
		auto retval = (bool)VEHICLE::CAN_ANCHOR_BOAT_HERE_IGNORE_PLAYERS(vehicle);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_BOAT_REMAINS_ANCHORED_WHILE_PLAYER_IS_DRIVER( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_BOAT_REMAINS_ANCHORED_WHILE_PLAYER_IS_DRIVER(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_FORCE_LOW_LOD_ANCHOR_MODE( Vehicle vehicle, bool p1 )
	{
		VEHICLE::SET_FORCE_LOW_LOD_ANCHOR_MODE(vehicle, p1);
	}

	void LUA_NATIVE_VEHICLE_SET_BOAT_LOW_LOD_ANCHOR_DISTANCE( Vehicle vehicle, float value )
	{
		VEHICLE::SET_BOAT_LOW_LOD_ANCHOR_DISTANCE(vehicle, value);
	}

	bool LUA_NATIVE_VEHICLE_IS_BOAT_ANCHORED( Vehicle vehicle )
	{
		auto retval = (bool)VEHICLE::IS_BOAT_ANCHORED(vehicle);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_BOAT_SINKS_WHEN_WRECKED( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_BOAT_SINKS_WHEN_WRECKED(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_BOAT_WRECKED( Vehicle vehicle )
	{
		VEHICLE::SET_BOAT_WRECKED(vehicle);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_SIREN( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_VEHICLE_SIREN(vehicle, toggle);
	}

	bool LUA_NATIVE_VEHICLE_IS_VEHICLE_SIREN_ON( Vehicle vehicle )
	{
		auto retval = (bool)VEHICLE::IS_VEHICLE_SIREN_ON(vehicle);
		return retval;
	}

	bool LUA_NATIVE_VEHICLE_IS_VEHICLE_SIREN_AUDIO_ON( Vehicle vehicle )
	{
		auto retval = (bool)VEHICLE::IS_VEHICLE_SIREN_AUDIO_ON(vehicle);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_STRONG( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_VEHICLE_STRONG(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_REMOVE_VEHICLE_STUCK_CHECK( Vehicle vehicle )
	{
		VEHICLE::REMOVE_VEHICLE_STUCK_CHECK(vehicle);
	}

	std::tuple<int, int> LUA_NATIVE_VEHICLE_GET_VEHICLE_COLOURS( Vehicle vehicle, int colorPrimary, int colorSecondary )
	{
		std::tuple<int, int> return_values;
		VEHICLE::GET_VEHICLE_COLOURS(vehicle, &colorPrimary, &colorSecondary);
		std::get<0>(return_values) = colorPrimary;
		std::get<1>(return_values) = colorSecondary;

		return return_values;
	}

	bool LUA_NATIVE_VEHICLE_IS_VEHICLE_SEAT_FREE( Vehicle vehicle, int seatIndex, bool isTaskRunning )
	{
		auto retval = (bool)VEHICLE::IS_VEHICLE_SEAT_FREE(vehicle, seatIndex, isTaskRunning);
		return retval;
	}

	Ped LUA_NATIVE_VEHICLE_GET_PED_IN_VEHICLE_SEAT( Vehicle vehicle, int seatIndex, bool p2 )
	{
		auto retval = VEHICLE::GET_PED_IN_VEHICLE_SEAT(vehicle, seatIndex, p2);
		return retval;
	}

	Ped LUA_NATIVE_VEHICLE_GET_LAST_PED_IN_VEHICLE_SEAT( Vehicle vehicle, int seatIndex )
	{
		auto retval = VEHICLE::GET_LAST_PED_IN_VEHICLE_SEAT(vehicle, seatIndex);
		return retval;
	}

	std::tuple<bool, bool, bool> LUA_NATIVE_VEHICLE_GET_VEHICLE_LIGHTS_STATE( Vehicle vehicle, bool lightsOn, bool highbeamsOn )
	{
		std::tuple<bool, bool, bool> return_values;
		std::get<0>(return_values) = (bool)VEHICLE::GET_VEHICLE_LIGHTS_STATE(vehicle, (BOOL*)&lightsOn, (BOOL*)&highbeamsOn);
		std::get<1>(return_values) = lightsOn;
		std::get<2>(return_values) = highbeamsOn;

		return return_values;
	}

	bool LUA_NATIVE_VEHICLE_IS_VEHICLE_TYRE_BURST( Vehicle vehicle, int wheelID, bool completely )
	{
		auto retval = (bool)VEHICLE::IS_VEHICLE_TYRE_BURST(vehicle, wheelID, completely);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_FORWARD_SPEED( Vehicle vehicle, float speed )
	{
		VEHICLE::SET_VEHICLE_FORWARD_SPEED(vehicle, speed);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_FORWARD_SPEED_XY( Vehicle vehicle, float speed )
	{
		VEHICLE::SET_VEHICLE_FORWARD_SPEED_XY(vehicle, speed);
	}

	void LUA_NATIVE_VEHICLE_BRING_VEHICLE_TO_HALT( Vehicle vehicle, float distance, int duration, bool p3 )
	{
		VEHICLE::BRING_VEHICLE_TO_HALT(vehicle, distance, duration, p3);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_STEER_FOR_BUILDINGS( Vehicle vehicle, Any p1 )
	{
		VEHICLE::SET_VEHICLE_STEER_FOR_BUILDINGS(vehicle, p1);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_CAUSES_SWERVING( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_VEHICLE_CAUSES_SWERVING(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_IGNORE_PLANES_SMALL_PITCH_CHANGE( Any p0, Any p1 )
	{
		VEHICLE::SET_IGNORE_PLANES_SMALL_PITCH_CHANGE(p0, p1);
	}

	void LUA_NATIVE_VEHICLE_STOP_BRINGING_VEHICLE_TO_HALT( Vehicle vehicle )
	{
		VEHICLE::STOP_BRINGING_VEHICLE_TO_HALT(vehicle);
	}

	bool LUA_NATIVE_VEHICLE_IS_VEHICLE_BEING_BROUGHT_TO_HALT( Vehicle vehicle )
	{
		auto retval = (bool)VEHICLE::IS_VEHICLE_BEING_BROUGHT_TO_HALT(vehicle);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_LOWER_FORKLIFT_FORKS( Vehicle forklift )
	{
		VEHICLE::LOWER_FORKLIFT_FORKS(forklift);
	}

	void LUA_NATIVE_VEHICLE_SET_FORKLIFT_FORK_HEIGHT( Vehicle vehicle, float height )
	{
		VEHICLE::SET_FORKLIFT_FORK_HEIGHT(vehicle, height);
	}

	bool LUA_NATIVE_VEHICLE_IS_ENTITY_ATTACHED_TO_HANDLER_FRAME( Vehicle vehicle, Entity entity )
	{
		auto retval = (bool)VEHICLE::IS_ENTITY_ATTACHED_TO_HANDLER_FRAME(vehicle, entity);
		return retval;
	}

	bool LUA_NATIVE_VEHICLE_IS_ANY_ENTITY_ATTACHED_TO_HANDLER_FRAME( Vehicle vehicle )
	{
		auto retval = (bool)VEHICLE::IS_ANY_ENTITY_ATTACHED_TO_HANDLER_FRAME(vehicle);
		return retval;
	}

	Vehicle LUA_NATIVE_VEHICLE_FIND_HANDLER_VEHICLE_CONTAINER_IS_ATTACHED_TO( Entity entity )
	{
		auto retval = VEHICLE::FIND_HANDLER_VEHICLE_CONTAINER_IS_ATTACHED_TO(entity);
		return retval;
	}

	bool LUA_NATIVE_VEHICLE_IS_HANDLER_FRAME_LINED_UP_WITH_CONTAINER( Vehicle vehicle, Entity entity )
	{
		auto retval = (bool)VEHICLE::IS_HANDLER_FRAME_LINED_UP_WITH_CONTAINER(vehicle, entity);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_ATTACH_CONTAINER_TO_HANDLER_FRAME_WHEN_LINED_UP( Vehicle vehicle, Entity entity )
	{
		VEHICLE::ATTACH_CONTAINER_TO_HANDLER_FRAME_WHEN_LINED_UP(vehicle, entity);
	}

	void LUA_NATIVE_VEHICLE_DETACH_CONTAINER_FROM_HANDLER_FRAME( Vehicle vehicle )
	{
		VEHICLE::DETACH_CONTAINER_FROM_HANDLER_FRAME(vehicle);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_DISABLE_HEIGHT_MAP_AVOIDANCE( Vehicle vehicle, bool p1 )
	{
		VEHICLE::SET_VEHICLE_DISABLE_HEIGHT_MAP_AVOIDANCE(vehicle, p1);
	}

	void LUA_NATIVE_VEHICLE_SET_BOAT_DISABLE_AVOIDANCE( Vehicle vehicle, bool p1 )
	{
		VEHICLE::SET_BOAT_DISABLE_AVOIDANCE(vehicle, p1);
	}

	bool LUA_NATIVE_VEHICLE_IS_HELI_LANDING_AREA_BLOCKED( Vehicle vehicle )
	{
		auto retval = (bool)VEHICLE::IS_HELI_LANDING_AREA_BLOCKED(vehicle);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_SHORT_SLOWDOWN_FOR_LANDING( Vehicle vehicle )
	{
		VEHICLE::SET_SHORT_SLOWDOWN_FOR_LANDING(vehicle);
	}

	void LUA_NATIVE_VEHICLE_SET_HELI_TURBULENCE_SCALAR( Vehicle vehicle, float p1 )
	{
		VEHICLE::SET_HELI_TURBULENCE_SCALAR(vehicle, p1);
	}

	void LUA_NATIVE_VEHICLE_SET_CAR_BOOT_OPEN( Vehicle vehicle )
	{
		VEHICLE::SET_CAR_BOOT_OPEN(vehicle);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_TYRE_BURST( Vehicle vehicle, int index, bool onRim, float p3 )
	{
		VEHICLE::SET_VEHICLE_TYRE_BURST(vehicle, index, onRim, p3);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_DOORS_SHUT( Vehicle vehicle, bool closeInstantly )
	{
		VEHICLE::SET_VEHICLE_DOORS_SHUT(vehicle, closeInstantly);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_TYRES_CAN_BURST( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_VEHICLE_TYRES_CAN_BURST(vehicle, toggle);
	}

	bool LUA_NATIVE_VEHICLE_GET_VEHICLE_TYRES_CAN_BURST( Vehicle vehicle )
	{
		auto retval = (bool)VEHICLE::GET_VEHICLE_TYRES_CAN_BURST(vehicle);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_WHEELS_CAN_BREAK( Vehicle vehicle, bool enabled )
	{
		VEHICLE::SET_VEHICLE_WHEELS_CAN_BREAK(vehicle, enabled);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_DOOR_OPEN( Vehicle vehicle, int doorId, bool loose, bool openInstantly )
	{
		VEHICLE::SET_VEHICLE_DOOR_OPEN(vehicle, doorId, loose, openInstantly);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_DOOR_AUTO_LOCK( Vehicle vehicle, int doorId, bool toggle )
	{
		VEHICLE::SET_VEHICLE_DOOR_AUTO_LOCK(vehicle, doorId, toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_FLEEING_VEHICLES_USE_SWITCHED_OFF_NODES( Any p0 )
	{
		VEHICLE::SET_FLEEING_VEHICLES_USE_SWITCHED_OFF_NODES(p0);
	}

	void LUA_NATIVE_VEHICLE_REMOVE_VEHICLE_WINDOW( Vehicle vehicle, int windowIndex )
	{
		VEHICLE::REMOVE_VEHICLE_WINDOW(vehicle, windowIndex);
	}

	void LUA_NATIVE_VEHICLE_ROLL_DOWN_WINDOWS( Vehicle vehicle )
	{
		VEHICLE::ROLL_DOWN_WINDOWS(vehicle);
	}

	void LUA_NATIVE_VEHICLE_ROLL_DOWN_WINDOW( Vehicle vehicle, int windowIndex )
	{
		VEHICLE::ROLL_DOWN_WINDOW(vehicle, windowIndex);
	}

	void LUA_NATIVE_VEHICLE_ROLL_UP_WINDOW( Vehicle vehicle, int windowIndex )
	{
		VEHICLE::ROLL_UP_WINDOW(vehicle, windowIndex);
	}

	void LUA_NATIVE_VEHICLE_SMASH_VEHICLE_WINDOW( Vehicle vehicle, int windowIndex )
	{
		VEHICLE::SMASH_VEHICLE_WINDOW(vehicle, windowIndex);
	}

	void LUA_NATIVE_VEHICLE_FIX_VEHICLE_WINDOW( Vehicle vehicle, int windowIndex )
	{
		VEHICLE::FIX_VEHICLE_WINDOW(vehicle, windowIndex);
	}

	void LUA_NATIVE_VEHICLE_POP_OUT_VEHICLE_WINDSCREEN( Vehicle vehicle )
	{
		VEHICLE::POP_OUT_VEHICLE_WINDSCREEN(vehicle);
	}

	void LUA_NATIVE_VEHICLE_POP_OFF_VEHICLE_ROOF_WITH_IMPULSE( Vehicle vehicle, float x, float y, float z )
	{
		VEHICLE::POP_OFF_VEHICLE_ROOF_WITH_IMPULSE(vehicle, x, y, z);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_LIGHTS( Vehicle vehicle, int state )
	{
		VEHICLE::SET_VEHICLE_LIGHTS(vehicle, state);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_USE_PLAYER_LIGHT_SETTINGS( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_VEHICLE_USE_PLAYER_LIGHT_SETTINGS(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_HEADLIGHT_SHADOWS( Vehicle vehicle, int p1 )
	{
		VEHICLE::SET_VEHICLE_HEADLIGHT_SHADOWS(vehicle, p1);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_ALARM( Vehicle vehicle, bool state )
	{
		VEHICLE::SET_VEHICLE_ALARM(vehicle, state);
	}

	void LUA_NATIVE_VEHICLE_START_VEHICLE_ALARM( Vehicle vehicle )
	{
		VEHICLE::START_VEHICLE_ALARM(vehicle);
	}

	bool LUA_NATIVE_VEHICLE_IS_VEHICLE_ALARM_ACTIVATED( Vehicle vehicle )
	{
		auto retval = (bool)VEHICLE::IS_VEHICLE_ALARM_ACTIVATED(vehicle);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_INTERIORLIGHT( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_VEHICLE_INTERIORLIGHT(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_FORCE_INTERIORLIGHT( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_VEHICLE_FORCE_INTERIORLIGHT(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_LIGHT_MULTIPLIER( Vehicle vehicle, float multiplier )
	{
		VEHICLE::SET_VEHICLE_LIGHT_MULTIPLIER(vehicle, multiplier);
	}

	void LUA_NATIVE_VEHICLE_ATTACH_VEHICLE_TO_TRAILER( Vehicle vehicle, Vehicle trailer, float radius )
	{
		VEHICLE::ATTACH_VEHICLE_TO_TRAILER(vehicle, trailer, radius);
	}

	void LUA_NATIVE_VEHICLE_ATTACH_VEHICLE_ON_TO_TRAILER( Vehicle vehicle, Vehicle trailer, float offsetX, float offsetY, float offsetZ, float coordsX, float coordsY, float coordsZ, float rotationX, float rotationY, float rotationZ, float disableCollisions )
	{
		VEHICLE::ATTACH_VEHICLE_ON_TO_TRAILER(vehicle, trailer, offsetX, offsetY, offsetZ, coordsX, coordsY, coordsZ, rotationX, rotationY, rotationZ, disableCollisions);
	}

	void LUA_NATIVE_VEHICLE_STABILISE_ENTITY_ATTACHED_TO_HELI( Vehicle vehicle, Entity entity, float p2 )
	{
		VEHICLE::STABILISE_ENTITY_ATTACHED_TO_HELI(vehicle, entity, p2);
	}

	void LUA_NATIVE_VEHICLE_DETACH_VEHICLE_FROM_TRAILER( Vehicle vehicle )
	{
		VEHICLE::DETACH_VEHICLE_FROM_TRAILER(vehicle);
	}

	bool LUA_NATIVE_VEHICLE_IS_VEHICLE_ATTACHED_TO_TRAILER( Vehicle vehicle )
	{
		auto retval = (bool)VEHICLE::IS_VEHICLE_ATTACHED_TO_TRAILER(vehicle);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_TRAILER_INVERSE_MASS_SCALE( Vehicle vehicle, float p1 )
	{
		VEHICLE::SET_TRAILER_INVERSE_MASS_SCALE(vehicle, p1);
	}

	void LUA_NATIVE_VEHICLE_SET_TRAILER_LEGS_RAISED( Vehicle vehicle )
	{
		VEHICLE::SET_TRAILER_LEGS_RAISED(vehicle);
	}

	void LUA_NATIVE_VEHICLE_SET_TRAILER_LEGS_LOWERED( Vehicle vehicle )
	{
		VEHICLE::SET_TRAILER_LEGS_LOWERED(vehicle);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_TYRE_FIXED( Vehicle vehicle, int tyreIndex )
	{
		VEHICLE::SET_VEHICLE_TYRE_FIXED(vehicle, tyreIndex);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_NUMBER_PLATE_TEXT( Vehicle vehicle, const char* plateText )
	{
		VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT(vehicle, plateText);
	}

	const char* LUA_NATIVE_VEHICLE_GET_VEHICLE_NUMBER_PLATE_TEXT( Vehicle vehicle )
	{
		auto retval = VEHICLE::GET_VEHICLE_NUMBER_PLATE_TEXT(vehicle);
		return retval;
	}

	int LUA_NATIVE_VEHICLE_GET_NUMBER_OF_VEHICLE_NUMBER_PLATES(  )
	{
		auto retval = VEHICLE::GET_NUMBER_OF_VEHICLE_NUMBER_PLATES();
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX( Vehicle vehicle, int plateIndex )
	{
		VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(vehicle, plateIndex);
	}

	int LUA_NATIVE_VEHICLE_GET_VEHICLE_NUMBER_PLATE_TEXT_INDEX( Vehicle vehicle )
	{
		auto retval = VEHICLE::GET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(vehicle);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_RANDOM_TRAINS( bool toggle )
	{
		VEHICLE::SET_RANDOM_TRAINS(toggle);
	}

	Vehicle LUA_NATIVE_VEHICLE_CREATE_MISSION_TRAIN( int variation, float x, float y, float z, bool direction, Any p5, Any p6 )
	{
		auto retval = VEHICLE::CREATE_MISSION_TRAIN(variation, x, y, z, direction, p5, p6);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SWITCH_TRAIN_TRACK( int trackId, bool state )
	{
		VEHICLE::SWITCH_TRAIN_TRACK(trackId, state);
	}

	void LUA_NATIVE_VEHICLE_SET_TRAIN_TRACK_SPAWN_FREQUENCY( int trackIndex, int frequency )
	{
		VEHICLE::SET_TRAIN_TRACK_SPAWN_FREQUENCY(trackIndex, frequency);
	}

	void LUA_NATIVE_VEHICLE_ALLOW_TRAIN_TO_BE_REMOVED_BY_POPULATION( Any p0 )
	{
		VEHICLE::ALLOW_TRAIN_TO_BE_REMOVED_BY_POPULATION(p0);
	}

	void LUA_NATIVE_VEHICLE_DELETE_ALL_TRAINS(  )
	{
		VEHICLE::DELETE_ALL_TRAINS();
	}

	void LUA_NATIVE_VEHICLE_SET_TRAIN_SPEED( Vehicle train, float speed )
	{
		VEHICLE::SET_TRAIN_SPEED(train, speed);
	}

	void LUA_NATIVE_VEHICLE_SET_TRAIN_CRUISE_SPEED( Vehicle train, float speed )
	{
		VEHICLE::SET_TRAIN_CRUISE_SPEED(train, speed);
	}

	void LUA_NATIVE_VEHICLE_SET_RANDOM_BOATS( bool toggle )
	{
		VEHICLE::SET_RANDOM_BOATS(toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_RANDOM_BOATS_MP( bool toggle )
	{
		VEHICLE::SET_RANDOM_BOATS_MP(toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_GARBAGE_TRUCKS( bool toggle )
	{
		VEHICLE::SET_GARBAGE_TRUCKS(toggle);
	}

	bool LUA_NATIVE_VEHICLE_DOES_VEHICLE_HAVE_STUCK_VEHICLE_CHECK( Vehicle vehicle )
	{
		auto retval = (bool)VEHICLE::DOES_VEHICLE_HAVE_STUCK_VEHICLE_CHECK(vehicle);
		return retval;
	}

	int LUA_NATIVE_VEHICLE_GET_VEHICLE_RECORDING_ID( int recording, const char* script )
	{
		auto retval = VEHICLE::GET_VEHICLE_RECORDING_ID(recording, script);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_REQUEST_VEHICLE_RECORDING( int recording, const char* script )
	{
		VEHICLE::REQUEST_VEHICLE_RECORDING(recording, script);
	}

	bool LUA_NATIVE_VEHICLE_HAS_VEHICLE_RECORDING_BEEN_LOADED( int recording, const char* script )
	{
		auto retval = (bool)VEHICLE::HAS_VEHICLE_RECORDING_BEEN_LOADED(recording, script);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_REMOVE_VEHICLE_RECORDING( int recording, const char* script )
	{
		VEHICLE::REMOVE_VEHICLE_RECORDING(recording, script);
	}

	Vector3 LUA_NATIVE_VEHICLE_GET_POSITION_OF_VEHICLE_RECORDING_ID_AT_TIME( int id, float time )
	{
		auto retval = VEHICLE::GET_POSITION_OF_VEHICLE_RECORDING_ID_AT_TIME(id, time);
		return retval;
	}

	Vector3 LUA_NATIVE_VEHICLE_GET_POSITION_OF_VEHICLE_RECORDING_AT_TIME( int recording, float time, const char* script )
	{
		auto retval = VEHICLE::GET_POSITION_OF_VEHICLE_RECORDING_AT_TIME(recording, time, script);
		return retval;
	}

	Vector3 LUA_NATIVE_VEHICLE_GET_ROTATION_OF_VEHICLE_RECORDING_ID_AT_TIME( int id, float time )
	{
		auto retval = VEHICLE::GET_ROTATION_OF_VEHICLE_RECORDING_ID_AT_TIME(id, time);
		return retval;
	}

	Vector3 LUA_NATIVE_VEHICLE_GET_ROTATION_OF_VEHICLE_RECORDING_AT_TIME( int recording, float time, const char* script )
	{
		auto retval = VEHICLE::GET_ROTATION_OF_VEHICLE_RECORDING_AT_TIME(recording, time, script);
		return retval;
	}

	float LUA_NATIVE_VEHICLE_GET_TOTAL_DURATION_OF_VEHICLE_RECORDING_ID( int id )
	{
		auto retval = VEHICLE::GET_TOTAL_DURATION_OF_VEHICLE_RECORDING_ID(id);
		return retval;
	}

	float LUA_NATIVE_VEHICLE_GET_TOTAL_DURATION_OF_VEHICLE_RECORDING( int recording, const char* script )
	{
		auto retval = VEHICLE::GET_TOTAL_DURATION_OF_VEHICLE_RECORDING(recording, script);
		return retval;
	}

	float LUA_NATIVE_VEHICLE_GET_POSITION_IN_RECORDING( Vehicle vehicle )
	{
		auto retval = VEHICLE::GET_POSITION_IN_RECORDING(vehicle);
		return retval;
	}

	float LUA_NATIVE_VEHICLE_GET_TIME_POSITION_IN_RECORDING( Vehicle vehicle )
	{
		auto retval = VEHICLE::GET_TIME_POSITION_IN_RECORDING(vehicle);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_START_PLAYBACK_RECORDED_VEHICLE( Vehicle vehicle, int recording, const char* script, bool p3 )
	{
		VEHICLE::START_PLAYBACK_RECORDED_VEHICLE(vehicle, recording, script, p3);
	}

	void LUA_NATIVE_VEHICLE_START_PLAYBACK_RECORDED_VEHICLE_WITH_FLAGS( Vehicle vehicle, int recording, const char* script, int flags, int time, int drivingStyle )
	{
		VEHICLE::START_PLAYBACK_RECORDED_VEHICLE_WITH_FLAGS(vehicle, recording, script, flags, time, drivingStyle);
	}

	void LUA_NATIVE_VEHICLE_FORCE_PLAYBACK_RECORDED_VEHICLE_UPDATE( Vehicle vehicle, bool p1 )
	{
		VEHICLE::FORCE_PLAYBACK_RECORDED_VEHICLE_UPDATE(vehicle, p1);
	}

	void LUA_NATIVE_VEHICLE_STOP_PLAYBACK_RECORDED_VEHICLE( Vehicle vehicle )
	{
		VEHICLE::STOP_PLAYBACK_RECORDED_VEHICLE(vehicle);
	}

	void LUA_NATIVE_VEHICLE_PAUSE_PLAYBACK_RECORDED_VEHICLE( Vehicle vehicle )
	{
		VEHICLE::PAUSE_PLAYBACK_RECORDED_VEHICLE(vehicle);
	}

	void LUA_NATIVE_VEHICLE_UNPAUSE_PLAYBACK_RECORDED_VEHICLE( Vehicle vehicle )
	{
		VEHICLE::UNPAUSE_PLAYBACK_RECORDED_VEHICLE(vehicle);
	}

	bool LUA_NATIVE_VEHICLE_IS_PLAYBACK_GOING_ON_FOR_VEHICLE( Vehicle vehicle )
	{
		auto retval = (bool)VEHICLE::IS_PLAYBACK_GOING_ON_FOR_VEHICLE(vehicle);
		return retval;
	}

	bool LUA_NATIVE_VEHICLE_IS_PLAYBACK_USING_AI_GOING_ON_FOR_VEHICLE( Vehicle vehicle )
	{
		auto retval = (bool)VEHICLE::IS_PLAYBACK_USING_AI_GOING_ON_FOR_VEHICLE(vehicle);
		return retval;
	}

	int LUA_NATIVE_VEHICLE_GET_CURRENT_PLAYBACK_FOR_VEHICLE( Vehicle vehicle )
	{
		auto retval = VEHICLE::GET_CURRENT_PLAYBACK_FOR_VEHICLE(vehicle);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SKIP_TO_END_AND_STOP_PLAYBACK_RECORDED_VEHICLE( Vehicle vehicle )
	{
		VEHICLE::SKIP_TO_END_AND_STOP_PLAYBACK_RECORDED_VEHICLE(vehicle);
	}

	void LUA_NATIVE_VEHICLE_SET_PLAYBACK_SPEED( Vehicle vehicle, float speed )
	{
		VEHICLE::SET_PLAYBACK_SPEED(vehicle, speed);
	}

	void LUA_NATIVE_VEHICLE_START_PLAYBACK_RECORDED_VEHICLE_USING_AI( Vehicle vehicle, int recording, const char* script, float speed, int drivingStyle )
	{
		VEHICLE::START_PLAYBACK_RECORDED_VEHICLE_USING_AI(vehicle, recording, script, speed, drivingStyle);
	}

	void LUA_NATIVE_VEHICLE_SKIP_TIME_IN_PLAYBACK_RECORDED_VEHICLE( Vehicle vehicle, float time )
	{
		VEHICLE::SKIP_TIME_IN_PLAYBACK_RECORDED_VEHICLE(vehicle, time);
	}

	void LUA_NATIVE_VEHICLE_SET_PLAYBACK_TO_USE_AI( Vehicle vehicle, int drivingStyle )
	{
		VEHICLE::SET_PLAYBACK_TO_USE_AI(vehicle, drivingStyle);
	}

	void LUA_NATIVE_VEHICLE_SET_PLAYBACK_TO_USE_AI_TRY_TO_REVERT_BACK_LATER( Vehicle vehicle, int time, int drivingStyle, bool p3 )
	{
		VEHICLE::SET_PLAYBACK_TO_USE_AI_TRY_TO_REVERT_BACK_LATER(vehicle, time, drivingStyle, p3);
	}

	void LUA_NATIVE_VEHICLE_SET_ADDITIONAL_ROTATION_FOR_RECORDED_VEHICLE_PLAYBACK( Vehicle vehicle, float x, float y, float z, Any p4 )
	{
		VEHICLE::SET_ADDITIONAL_ROTATION_FOR_RECORDED_VEHICLE_PLAYBACK(vehicle, x, y, z, p4);
	}

	void LUA_NATIVE_VEHICLE_SET_POSITION_OFFSET_FOR_RECORDED_VEHICLE_PLAYBACK( Vehicle vehicle, float x, float y, float z )
	{
		VEHICLE::SET_POSITION_OFFSET_FOR_RECORDED_VEHICLE_PLAYBACK(vehicle, x, y, z);
	}

	void LUA_NATIVE_VEHICLE_SET_GLOBAL_POSITION_OFFSET_FOR_RECORDED_VEHICLE_PLAYBACK( Vehicle vehicle, float x, float y, float z )
	{
		VEHICLE::SET_GLOBAL_POSITION_OFFSET_FOR_RECORDED_VEHICLE_PLAYBACK(vehicle, x, y, z);
	}

	void LUA_NATIVE_VEHICLE_SET_SHOULD_LERP_FROM_AI_TO_FULL_RECORDING( Vehicle vehicle, bool p1 )
	{
		VEHICLE::SET_SHOULD_LERP_FROM_AI_TO_FULL_RECORDING(vehicle, p1);
	}

	void LUA_NATIVE_VEHICLE_EXPLODE_VEHICLE_IN_CUTSCENE( Vehicle vehicle, bool p1 )
	{
		VEHICLE::EXPLODE_VEHICLE_IN_CUTSCENE(vehicle, p1);
	}

	void LUA_NATIVE_VEHICLE_ADD_VEHICLE_STUCK_CHECK_WITH_WARP( Any p0, float p1, Any p2, bool p3, bool p4, bool p5, Any p6 )
	{
		VEHICLE::ADD_VEHICLE_STUCK_CHECK_WITH_WARP(p0, p1, p2, p3, p4, p5, p6);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_MODEL_IS_SUPPRESSED( Hash model, bool suppressed )
	{
		VEHICLE::SET_VEHICLE_MODEL_IS_SUPPRESSED(model, suppressed);
	}

	Vehicle LUA_NATIVE_VEHICLE_GET_RANDOM_VEHICLE_IN_SPHERE( float x, float y, float z, float radius, Hash modelHash, int flags )
	{
		auto retval = VEHICLE::GET_RANDOM_VEHICLE_IN_SPHERE(x, y, z, radius, modelHash, flags);
		return retval;
	}

	Vehicle LUA_NATIVE_VEHICLE_GET_RANDOM_VEHICLE_FRONT_BUMPER_IN_SPHERE( float p0, float p1, float p2, float p3, int p4, int p5, int p6 )
	{
		auto retval = VEHICLE::GET_RANDOM_VEHICLE_FRONT_BUMPER_IN_SPHERE(p0, p1, p2, p3, p4, p5, p6);
		return retval;
	}

	Vehicle LUA_NATIVE_VEHICLE_GET_RANDOM_VEHICLE_BACK_BUMPER_IN_SPHERE( float p0, float p1, float p2, float p3, int p4, int p5, int p6 )
	{
		auto retval = VEHICLE::GET_RANDOM_VEHICLE_BACK_BUMPER_IN_SPHERE(p0, p1, p2, p3, p4, p5, p6);
		return retval;
	}

	Vehicle LUA_NATIVE_VEHICLE_GET_CLOSEST_VEHICLE( float x, float y, float z, float radius, Hash modelHash, int flags )
	{
		auto retval = VEHICLE::GET_CLOSEST_VEHICLE(x, y, z, radius, modelHash, flags);
		return retval;
	}

	Vehicle LUA_NATIVE_VEHICLE_GET_TRAIN_CARRIAGE( Vehicle train, int trailerNumber )
	{
		auto retval = VEHICLE::GET_TRAIN_CARRIAGE(train, trailerNumber);
		return retval;
	}

	bool LUA_NATIVE_VEHICLE_IS_MISSION_TRAIN( Vehicle train )
	{
		auto retval = (bool)VEHICLE::IS_MISSION_TRAIN(train);
		return retval;
	}

	Vehicle LUA_NATIVE_VEHICLE_DELETE_MISSION_TRAIN( Vehicle train )
	{
		VEHICLE::DELETE_MISSION_TRAIN(&train);
		return train;
	}

	Vehicle LUA_NATIVE_VEHICLE_SET_MISSION_TRAIN_AS_NO_LONGER_NEEDED( Vehicle train, bool p1 )
	{
		VEHICLE::SET_MISSION_TRAIN_AS_NO_LONGER_NEEDED(&train, p1);
		return train;
	}

	void LUA_NATIVE_VEHICLE_SET_MISSION_TRAIN_COORDS( Vehicle train, float x, float y, float z )
	{
		VEHICLE::SET_MISSION_TRAIN_COORDS(train, x, y, z);
	}

	bool LUA_NATIVE_VEHICLE_IS_THIS_MODEL_A_BOAT( Hash model )
	{
		auto retval = (bool)VEHICLE::IS_THIS_MODEL_A_BOAT(model);
		return retval;
	}

	bool LUA_NATIVE_VEHICLE_IS_THIS_MODEL_A_JETSKI( Hash model )
	{
		auto retval = (bool)VEHICLE::IS_THIS_MODEL_A_JETSKI(model);
		return retval;
	}

	bool LUA_NATIVE_VEHICLE_IS_THIS_MODEL_A_PLANE( Hash model )
	{
		auto retval = (bool)VEHICLE::IS_THIS_MODEL_A_PLANE(model);
		return retval;
	}

	bool LUA_NATIVE_VEHICLE_IS_THIS_MODEL_A_HELI( Hash model )
	{
		auto retval = (bool)VEHICLE::IS_THIS_MODEL_A_HELI(model);
		return retval;
	}

	bool LUA_NATIVE_VEHICLE_IS_THIS_MODEL_A_CAR( Hash model )
	{
		auto retval = (bool)VEHICLE::IS_THIS_MODEL_A_CAR(model);
		return retval;
	}

	bool LUA_NATIVE_VEHICLE_IS_THIS_MODEL_A_TRAIN( Hash model )
	{
		auto retval = (bool)VEHICLE::IS_THIS_MODEL_A_TRAIN(model);
		return retval;
	}

	bool LUA_NATIVE_VEHICLE_IS_THIS_MODEL_A_BIKE( Hash model )
	{
		auto retval = (bool)VEHICLE::IS_THIS_MODEL_A_BIKE(model);
		return retval;
	}

	bool LUA_NATIVE_VEHICLE_IS_THIS_MODEL_A_BICYCLE( Hash model )
	{
		auto retval = (bool)VEHICLE::IS_THIS_MODEL_A_BICYCLE(model);
		return retval;
	}

	bool LUA_NATIVE_VEHICLE_IS_THIS_MODEL_A_QUADBIKE( Hash model )
	{
		auto retval = (bool)VEHICLE::IS_THIS_MODEL_A_QUADBIKE(model);
		return retval;
	}

	bool LUA_NATIVE_VEHICLE_IS_THIS_MODEL_AN_AMPHIBIOUS_CAR( Hash model )
	{
		auto retval = (bool)VEHICLE::IS_THIS_MODEL_AN_AMPHIBIOUS_CAR(model);
		return retval;
	}

	bool LUA_NATIVE_VEHICLE_IS_THIS_MODEL_AN_AMPHIBIOUS_QUADBIKE( Hash model )
	{
		auto retval = (bool)VEHICLE::IS_THIS_MODEL_AN_AMPHIBIOUS_QUADBIKE(model);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_HELI_BLADES_FULL_SPEED( Vehicle vehicle )
	{
		VEHICLE::SET_HELI_BLADES_FULL_SPEED(vehicle);
	}

	void LUA_NATIVE_VEHICLE_SET_HELI_BLADES_SPEED( Vehicle vehicle, float speed )
	{
		VEHICLE::SET_HELI_BLADES_SPEED(vehicle, speed);
	}

	void LUA_NATIVE_VEHICLE_FORCE_SUB_THROTTLE_FOR_TIME( Vehicle vehicle, float p1, float p2 )
	{
		VEHICLE::FORCE_SUB_THROTTLE_FOR_TIME(vehicle, p1, p2);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_CAN_BE_TARGETTED( Vehicle vehicle, bool state )
	{
		VEHICLE::SET_VEHICLE_CAN_BE_TARGETTED(vehicle, state);
	}

	void LUA_NATIVE_VEHICLE_SET_DONT_ALLOW_PLAYER_TO_ENTER_VEHICLE_IF_LOCKED_FOR_PLAYER( Vehicle vehicle, bool p1 )
	{
		VEHICLE::SET_DONT_ALLOW_PLAYER_TO_ENTER_VEHICLE_IF_LOCKED_FOR_PLAYER(vehicle, p1);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_CAN_BE_VISIBLY_DAMAGED( Vehicle vehicle, bool state )
	{
		VEHICLE::SET_VEHICLE_CAN_BE_VISIBLY_DAMAGED(vehicle, state);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_HAS_UNBREAKABLE_LIGHTS( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_VEHICLE_HAS_UNBREAKABLE_LIGHTS(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_RESPECTS_LOCKS_WHEN_HAS_DRIVER( Vehicle vehicle, bool p1 )
	{
		VEHICLE::SET_VEHICLE_RESPECTS_LOCKS_WHEN_HAS_DRIVER(vehicle, p1);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_CAN_EJECT_PASSENGERS_IF_LOCKED( Any p0, Any p1 )
	{
		VEHICLE::SET_VEHICLE_CAN_EJECT_PASSENGERS_IF_LOCKED(p0, p1);
	}

	float LUA_NATIVE_VEHICLE_GET_VEHICLE_DIRT_LEVEL( Vehicle vehicle )
	{
		auto retval = VEHICLE::GET_VEHICLE_DIRT_LEVEL(vehicle);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_DIRT_LEVEL( Vehicle vehicle, float dirtLevel )
	{
		VEHICLE::SET_VEHICLE_DIRT_LEVEL(vehicle, dirtLevel);
	}

	bool LUA_NATIVE_VEHICLE_GET_DOES_VEHICLE_HAVE_DAMAGE_DECALS( Vehicle vehicle )
	{
		auto retval = (bool)VEHICLE::GET_DOES_VEHICLE_HAVE_DAMAGE_DECALS(vehicle);
		return retval;
	}

	bool LUA_NATIVE_VEHICLE_IS_VEHICLE_DOOR_FULLY_OPEN( Vehicle vehicle, int doorId )
	{
		auto retval = (bool)VEHICLE::IS_VEHICLE_DOOR_FULLY_OPEN(vehicle, doorId);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_ENGINE_ON( Vehicle vehicle, bool value, bool instantly, bool disableAutoStart )
	{
		VEHICLE::SET_VEHICLE_ENGINE_ON(vehicle, value, instantly, disableAutoStart);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_UNDRIVEABLE( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_VEHICLE_UNDRIVEABLE(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_PROVIDES_COVER( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_VEHICLE_PROVIDES_COVER(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_DOOR_CONTROL( Vehicle vehicle, int doorId, int speed, float angle )
	{
		VEHICLE::SET_VEHICLE_DOOR_CONTROL(vehicle, doorId, speed, angle);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_DOOR_LATCHED( Vehicle vehicle, int doorId, bool p2, bool p3, bool p4 )
	{
		VEHICLE::SET_VEHICLE_DOOR_LATCHED(vehicle, doorId, p2, p3, p4);
	}

	float LUA_NATIVE_VEHICLE_GET_VEHICLE_DOOR_ANGLE_RATIO( Vehicle vehicle, int doorId )
	{
		auto retval = VEHICLE::GET_VEHICLE_DOOR_ANGLE_RATIO(vehicle, doorId);
		return retval;
	}

	Ped LUA_NATIVE_VEHICLE_GET_PED_USING_VEHICLE_DOOR( Vehicle vehicle, int doord )
	{
		auto retval = VEHICLE::GET_PED_USING_VEHICLE_DOOR(vehicle, doord);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_DOOR_SHUT( Vehicle vehicle, int doorId, bool closeInstantly )
	{
		VEHICLE::SET_VEHICLE_DOOR_SHUT(vehicle, doorId, closeInstantly);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_DOOR_BROKEN( Vehicle vehicle, int doorId, bool deleteDoor )
	{
		VEHICLE::SET_VEHICLE_DOOR_BROKEN(vehicle, doorId, deleteDoor);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_CAN_BREAK( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_VEHICLE_CAN_BREAK(vehicle, toggle);
	}

	bool LUA_NATIVE_VEHICLE_DOES_VEHICLE_HAVE_ROOF( Vehicle vehicle )
	{
		auto retval = (bool)VEHICLE::DOES_VEHICLE_HAVE_ROOF(vehicle);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_REMOVE_AGGRESSIVE_CARJACK_MISSION( Any p0 )
	{
		VEHICLE::SET_VEHICLE_REMOVE_AGGRESSIVE_CARJACK_MISSION(p0);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_AVOID_PLAYER_VEHICLE_RIOT_VAN_MISSION( Any p0 )
	{
		VEHICLE::SET_VEHICLE_AVOID_PLAYER_VEHICLE_RIOT_VAN_MISSION(p0);
	}

	void LUA_NATIVE_VEHICLE_SET_CARJACK_MISSION_REMOVAL_PARAMETERS( Any p0, Any p1 )
	{
		VEHICLE::SET_CARJACK_MISSION_REMOVAL_PARAMETERS(p0, p1);
	}

	bool LUA_NATIVE_VEHICLE_IS_BIG_VEHICLE( Vehicle vehicle )
	{
		auto retval = (bool)VEHICLE::IS_BIG_VEHICLE(vehicle);
		return retval;
	}

	int LUA_NATIVE_VEHICLE_GET_NUMBER_OF_VEHICLE_COLOURS( Vehicle vehicle )
	{
		auto retval = VEHICLE::GET_NUMBER_OF_VEHICLE_COLOURS(vehicle);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_COLOUR_COMBINATION( Vehicle vehicle, int colorCombination )
	{
		VEHICLE::SET_VEHICLE_COLOUR_COMBINATION(vehicle, colorCombination);
	}

	int LUA_NATIVE_VEHICLE_GET_VEHICLE_COLOUR_COMBINATION( Vehicle vehicle )
	{
		auto retval = VEHICLE::GET_VEHICLE_COLOUR_COMBINATION(vehicle);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_XENON_LIGHT_COLOR_INDEX( Vehicle vehicle, int colorIndex )
	{
		VEHICLE::SET_VEHICLE_XENON_LIGHT_COLOR_INDEX(vehicle, colorIndex);
	}

	int LUA_NATIVE_VEHICLE_GET_VEHICLE_XENON_LIGHT_COLOR_INDEX( Vehicle vehicle )
	{
		auto retval = VEHICLE::GET_VEHICLE_XENON_LIGHT_COLOR_INDEX(vehicle);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_IS_CONSIDERED_BY_PLAYER( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_VEHICLE_IS_CONSIDERED_BY_PLAYER(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_WILL_FORCE_OTHER_VEHICLES_TO_STOP( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_VEHICLE_WILL_FORCE_OTHER_VEHICLES_TO_STOP(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_ACT_AS_IF_HAS_SIREN_ON( Vehicle vehicle, bool p1 )
	{
		VEHICLE::SET_VEHICLE_ACT_AS_IF_HAS_SIREN_ON(vehicle, p1);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_USE_MORE_RESTRICTIVE_SPAWN_CHECKS( Vehicle vehicle, bool p1 )
	{
		VEHICLE::SET_VEHICLE_USE_MORE_RESTRICTIVE_SPAWN_CHECKS(vehicle, p1);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_MAY_BE_USED_BY_GOTO_POINT_ANY_MEANS( Vehicle vehicle, bool p1 )
	{
		VEHICLE::SET_VEHICLE_MAY_BE_USED_BY_GOTO_POINT_ANY_MEANS(vehicle, p1);
	}

	std::tuple<Hash, int> LUA_NATIVE_VEHICLE_GET_RANDOM_VEHICLE_MODEL_IN_MEMORY( bool p0, Hash modelHash, int successIndicator )
	{
		std::tuple<Hash, int> return_values;
		VEHICLE::GET_RANDOM_VEHICLE_MODEL_IN_MEMORY(p0, &modelHash, &successIndicator);
		std::get<0>(return_values) = modelHash;
		std::get<1>(return_values) = successIndicator;

		return return_values;
	}

	int LUA_NATIVE_VEHICLE_GET_VEHICLE_DOOR_LOCK_STATUS( Vehicle vehicle )
	{
		auto retval = VEHICLE::GET_VEHICLE_DOOR_LOCK_STATUS(vehicle);
		return retval;
	}

	int LUA_NATIVE_VEHICLE_GET_VEHICLE_INDIVIDUAL_DOOR_LOCK_STATUS( Vehicle vehicle, int doorId )
	{
		auto retval = VEHICLE::GET_VEHICLE_INDIVIDUAL_DOOR_LOCK_STATUS(vehicle, doorId);
		return retval;
	}

	bool LUA_NATIVE_VEHICLE_IS_VEHICLE_DOOR_DAMAGED( Vehicle veh, int doorID )
	{
		auto retval = (bool)VEHICLE::IS_VEHICLE_DOOR_DAMAGED(veh, doorID);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_DOOR_ALLOWED_TO_BE_BROKEN_OFF( Vehicle vehicle, int doorId, bool isBreakable )
	{
		VEHICLE::SET_DOOR_ALLOWED_TO_BE_BROKEN_OFF(vehicle, doorId, isBreakable);
	}

	bool LUA_NATIVE_VEHICLE_IS_VEHICLE_BUMPER_BOUNCING( Vehicle vehicle, bool frontBumper )
	{
		auto retval = (bool)VEHICLE::IS_VEHICLE_BUMPER_BOUNCING(vehicle, frontBumper);
		return retval;
	}

	bool LUA_NATIVE_VEHICLE_IS_VEHICLE_BUMPER_BROKEN_OFF( Vehicle vehicle, bool frontBumper )
	{
		auto retval = (bool)VEHICLE::IS_VEHICLE_BUMPER_BROKEN_OFF(vehicle, frontBumper);
		return retval;
	}

	bool LUA_NATIVE_VEHICLE_IS_COP_VEHICLE_IN_AREA_3D( float x1, float x2, float y1, float y2, float z1, float z2 )
	{
		auto retval = (bool)VEHICLE::IS_COP_VEHICLE_IN_AREA_3D(x1, x2, y1, y2, z1, z2);
		return retval;
	}

	bool LUA_NATIVE_VEHICLE_IS_VEHICLE_ON_ALL_WHEELS( Vehicle vehicle )
	{
		auto retval = (bool)VEHICLE::IS_VEHICLE_ON_ALL_WHEELS(vehicle);
		return retval;
	}

	int LUA_NATIVE_VEHICLE_GET_VEHICLE_MODEL_VALUE( Hash vehicleModel )
	{
		auto retval = VEHICLE::GET_VEHICLE_MODEL_VALUE(vehicleModel);
		return retval;
	}

	Hash LUA_NATIVE_VEHICLE_GET_VEHICLE_LAYOUT_HASH( Vehicle vehicle )
	{
		auto retval = VEHICLE::GET_VEHICLE_LAYOUT_HASH(vehicle);
		return retval;
	}

	Hash LUA_NATIVE_VEHICLE_GET_IN_VEHICLE_CLIPSET_HASH_FOR_SEAT( Vehicle vehicle, int p1 )
	{
		auto retval = VEHICLE::GET_IN_VEHICLE_CLIPSET_HASH_FOR_SEAT(vehicle, p1);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_RENDER_TRAIN_AS_DERAILED( Vehicle train, bool toggle )
	{
		VEHICLE::SET_RENDER_TRAIN_AS_DERAILED(train, toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_EXTRA_COLOURS( Vehicle vehicle, int pearlescentColor, int wheelColor )
	{
		VEHICLE::SET_VEHICLE_EXTRA_COLOURS(vehicle, pearlescentColor, wheelColor);
	}

	std::tuple<int, int> LUA_NATIVE_VEHICLE_GET_VEHICLE_EXTRA_COLOURS( Vehicle vehicle, int pearlescentColor, int wheelColor )
	{
		std::tuple<int, int> return_values;
		VEHICLE::GET_VEHICLE_EXTRA_COLOURS(vehicle, &pearlescentColor, &wheelColor);
		std::get<0>(return_values) = pearlescentColor;
		std::get<1>(return_values) = wheelColor;

		return return_values;
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_EXTRA_COLOUR_5( Vehicle vehicle, int color )
	{
		VEHICLE::SET_VEHICLE_EXTRA_COLOUR_5(vehicle, color);
	}

	int LUA_NATIVE_VEHICLE_GET_VEHICLE_EXTRA_COLOUR_5( Vehicle vehicle, int color )
	{
		VEHICLE::GET_VEHICLE_EXTRA_COLOUR_5(vehicle, &color);
		return color;
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_EXTRA_COLOUR_6( Vehicle vehicle, int color )
	{
		VEHICLE::SET_VEHICLE_EXTRA_COLOUR_6(vehicle, color);
	}

	int LUA_NATIVE_VEHICLE_GET_VEHICLE_EXTRA_COLOUR_6( Vehicle vehicle, int color )
	{
		VEHICLE::GET_VEHICLE_EXTRA_COLOUR_6(vehicle, &color);
		return color;
	}

	void LUA_NATIVE_VEHICLE_STOP_ALL_GARAGE_ACTIVITY(  )
	{
		VEHICLE::STOP_ALL_GARAGE_ACTIVITY();
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_FIXED( Vehicle vehicle )
	{
		VEHICLE::SET_VEHICLE_FIXED(vehicle);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_DEFORMATION_FIXED( Vehicle vehicle )
	{
		VEHICLE::SET_VEHICLE_DEFORMATION_FIXED(vehicle);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_CAN_ENGINE_MISSFIRE( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_VEHICLE_CAN_ENGINE_MISSFIRE(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_CAN_LEAK_OIL( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_VEHICLE_CAN_LEAK_OIL(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_CAN_LEAK_PETROL( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_VEHICLE_CAN_LEAK_PETROL(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_DISABLE_VEHICLE_PETROL_TANK_FIRES( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_DISABLE_VEHICLE_PETROL_TANK_FIRES(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_DISABLE_VEHICLE_PETROL_TANK_DAMAGE( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_DISABLE_VEHICLE_PETROL_TANK_DAMAGE(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_DISABLE_VEHICLE_ENGINE_FIRES( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_DISABLE_VEHICLE_ENGINE_FIRES(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_LIMIT_SPEED_WHEN_PLAYER_INACTIVE( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_VEHICLE_LIMIT_SPEED_WHEN_PLAYER_INACTIVE(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_STOP_INSTANTLY_WHEN_PLAYER_INACTIVE( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_VEHICLE_STOP_INSTANTLY_WHEN_PLAYER_INACTIVE(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_DISABLE_PRETEND_OCCUPANTS( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_DISABLE_PRETEND_OCCUPANTS(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_REMOVE_VEHICLES_FROM_GENERATORS_IN_AREA( float x1, float y1, float z1, float x2, float y2, float z2, Any p6 )
	{
		VEHICLE::REMOVE_VEHICLES_FROM_GENERATORS_IN_AREA(x1, y1, z1, x2, y2, z2, p6);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_STEER_BIAS( Vehicle vehicle, float value )
	{
		VEHICLE::SET_VEHICLE_STEER_BIAS(vehicle, value);
	}

	bool LUA_NATIVE_VEHICLE_IS_VEHICLE_EXTRA_TURNED_ON( Vehicle vehicle, int extraId )
	{
		auto retval = (bool)VEHICLE::IS_VEHICLE_EXTRA_TURNED_ON(vehicle, extraId);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_EXTRA( Vehicle vehicle, int extraId, bool disable )
	{
		VEHICLE::SET_VEHICLE_EXTRA(vehicle, extraId, disable);
	}

	bool LUA_NATIVE_VEHICLE_DOES_EXTRA_EXIST( Vehicle vehicle, int extraId )
	{
		auto retval = (bool)VEHICLE::DOES_EXTRA_EXIST(vehicle, extraId);
		return retval;
	}

	bool LUA_NATIVE_VEHICLE_IS_EXTRA_BROKEN_OFF( Vehicle vehicle, int extraId )
	{
		auto retval = (bool)VEHICLE::IS_EXTRA_BROKEN_OFF(vehicle, extraId);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_CONVERTIBLE_ROOF( Vehicle vehicle, bool p1 )
	{
		VEHICLE::SET_CONVERTIBLE_ROOF(vehicle, p1);
	}

	void LUA_NATIVE_VEHICLE_LOWER_CONVERTIBLE_ROOF( Vehicle vehicle, bool instantlyLower )
	{
		VEHICLE::LOWER_CONVERTIBLE_ROOF(vehicle, instantlyLower);
	}

	void LUA_NATIVE_VEHICLE_RAISE_CONVERTIBLE_ROOF( Vehicle vehicle, bool instantlyRaise )
	{
		VEHICLE::RAISE_CONVERTIBLE_ROOF(vehicle, instantlyRaise);
	}

	int LUA_NATIVE_VEHICLE_GET_CONVERTIBLE_ROOF_STATE( Vehicle vehicle )
	{
		auto retval = VEHICLE::GET_CONVERTIBLE_ROOF_STATE(vehicle);
		return retval;
	}

	bool LUA_NATIVE_VEHICLE_IS_VEHICLE_A_CONVERTIBLE( Vehicle vehicle, bool p1 )
	{
		auto retval = (bool)VEHICLE::IS_VEHICLE_A_CONVERTIBLE(vehicle, p1);
		return retval;
	}

	bool LUA_NATIVE_VEHICLE_TRANSFORM_TO_SUBMARINE( Vehicle vehicle, bool noAnimation )
	{
		auto retval = (bool)VEHICLE::TRANSFORM_TO_SUBMARINE(vehicle, noAnimation);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_TRANSFORM_TO_CAR( Vehicle vehicle, bool noAnimation )
	{
		VEHICLE::TRANSFORM_TO_CAR(vehicle, noAnimation);
	}

	bool LUA_NATIVE_VEHICLE_IS_VEHICLE_IN_SUBMARINE_MODE( Vehicle vehicle )
	{
		auto retval = (bool)VEHICLE::IS_VEHICLE_IN_SUBMARINE_MODE(vehicle);
		return retval;
	}

	bool LUA_NATIVE_VEHICLE_IS_VEHICLE_STOPPED_AT_TRAFFIC_LIGHTS( Vehicle vehicle )
	{
		auto retval = (bool)VEHICLE::IS_VEHICLE_STOPPED_AT_TRAFFIC_LIGHTS(vehicle);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_DAMAGE( Vehicle vehicle, float xOffset, float yOffset, float zOffset, float damage, float radius, bool focusOnModel )
	{
		VEHICLE::SET_VEHICLE_DAMAGE(vehicle, xOffset, yOffset, zOffset, damage, radius, focusOnModel);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_OCCUPANTS_TAKE_EXPLOSIVE_DAMAGE( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_VEHICLE_OCCUPANTS_TAKE_EXPLOSIVE_DAMAGE(vehicle, toggle);
	}

	float LUA_NATIVE_VEHICLE_GET_VEHICLE_ENGINE_HEALTH( Vehicle vehicle )
	{
		auto retval = VEHICLE::GET_VEHICLE_ENGINE_HEALTH(vehicle);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_ENGINE_HEALTH( Vehicle vehicle, float health )
	{
		VEHICLE::SET_VEHICLE_ENGINE_HEALTH(vehicle, health);
	}

	void LUA_NATIVE_VEHICLE_SET_PLANE_ENGINE_HEALTH( Vehicle vehicle, float health )
	{
		VEHICLE::SET_PLANE_ENGINE_HEALTH(vehicle, health);
	}

	float LUA_NATIVE_VEHICLE_GET_VEHICLE_PETROL_TANK_HEALTH( Vehicle vehicle )
	{
		auto retval = VEHICLE::GET_VEHICLE_PETROL_TANK_HEALTH(vehicle);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_PETROL_TANK_HEALTH( Vehicle vehicle, float health )
	{
		VEHICLE::SET_VEHICLE_PETROL_TANK_HEALTH(vehicle, health);
	}

	bool LUA_NATIVE_VEHICLE_IS_VEHICLE_STUCK_TIMER_UP( Vehicle vehicle, int p1, int ms )
	{
		auto retval = (bool)VEHICLE::IS_VEHICLE_STUCK_TIMER_UP(vehicle, p1, ms);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_RESET_VEHICLE_STUCK_TIMER( Vehicle vehicle, int nullAttributes )
	{
		VEHICLE::RESET_VEHICLE_STUCK_TIMER(vehicle, nullAttributes);
	}

	bool LUA_NATIVE_VEHICLE_IS_VEHICLE_DRIVEABLE( Vehicle vehicle, bool isOnFireCheck )
	{
		auto retval = (bool)VEHICLE::IS_VEHICLE_DRIVEABLE(vehicle, isOnFireCheck);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_HAS_BEEN_OWNED_BY_PLAYER( Vehicle vehicle, bool owned )
	{
		VEHICLE::SET_VEHICLE_HAS_BEEN_OWNED_BY_PLAYER(vehicle, owned);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_NEEDS_TO_BE_HOTWIRED( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_VEHICLE_NEEDS_TO_BE_HOTWIRED(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_BLIP_THROTTLE_RANDOMLY( Vehicle vehicle, bool p1 )
	{
		VEHICLE::SET_VEHICLE_BLIP_THROTTLE_RANDOMLY(vehicle, p1);
	}

	void LUA_NATIVE_VEHICLE_SET_POLICE_FOCUS_WILL_TRACK_VEHICLE( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_POLICE_FOCUS_WILL_TRACK_VEHICLE(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_START_VEHICLE_HORN( Vehicle vehicle, int duration, Hash mode, bool forever )
	{
		VEHICLE::START_VEHICLE_HORN(vehicle, duration, mode, forever);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_IN_CAR_MOD_SHOP( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_VEHICLE_IN_CAR_MOD_SHOP(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_HAS_STRONG_AXLES( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_VEHICLE_HAS_STRONG_AXLES(vehicle, toggle);
	}

	const char* LUA_NATIVE_VEHICLE_GET_DISPLAY_NAME_FROM_VEHICLE_MODEL( Hash modelHash )
	{
		auto retval = VEHICLE::GET_DISPLAY_NAME_FROM_VEHICLE_MODEL(modelHash);
		return retval;
	}

	const char* LUA_NATIVE_VEHICLE_GET_MAKE_NAME_FROM_VEHICLE_MODEL( Hash modelHash )
	{
		auto retval = VEHICLE::GET_MAKE_NAME_FROM_VEHICLE_MODEL(modelHash);
		return retval;
	}

	Vector3 LUA_NATIVE_VEHICLE_GET_VEHICLE_DEFORMATION_AT_POS( Vehicle vehicle, float offsetX, float offsetY, float offsetZ )
	{
		auto retval = VEHICLE::GET_VEHICLE_DEFORMATION_AT_POS(vehicle, offsetX, offsetY, offsetZ);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_LIVERY( Vehicle vehicle, int livery )
	{
		VEHICLE::SET_VEHICLE_LIVERY(vehicle, livery);
	}

	int LUA_NATIVE_VEHICLE_GET_VEHICLE_LIVERY( Vehicle vehicle )
	{
		auto retval = VEHICLE::GET_VEHICLE_LIVERY(vehicle);
		return retval;
	}

	int LUA_NATIVE_VEHICLE_GET_VEHICLE_LIVERY_COUNT( Vehicle vehicle )
	{
		auto retval = VEHICLE::GET_VEHICLE_LIVERY_COUNT(vehicle);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_LIVERY2( Vehicle vehicle, int livery )
	{
		VEHICLE::SET_VEHICLE_LIVERY2(vehicle, livery);
	}

	int LUA_NATIVE_VEHICLE_GET_VEHICLE_LIVERY2( Vehicle vehicle )
	{
		auto retval = VEHICLE::GET_VEHICLE_LIVERY2(vehicle);
		return retval;
	}

	int LUA_NATIVE_VEHICLE_GET_VEHICLE_LIVERY2_COUNT( Vehicle vehicle )
	{
		auto retval = VEHICLE::GET_VEHICLE_LIVERY2_COUNT(vehicle);
		return retval;
	}

	bool LUA_NATIVE_VEHICLE_IS_VEHICLE_WINDOW_INTACT( Vehicle vehicle, int windowIndex )
	{
		auto retval = (bool)VEHICLE::IS_VEHICLE_WINDOW_INTACT(vehicle, windowIndex);
		return retval;
	}

	bool LUA_NATIVE_VEHICLE_ARE_ALL_VEHICLE_WINDOWS_INTACT( Vehicle vehicle )
	{
		auto retval = (bool)VEHICLE::ARE_ALL_VEHICLE_WINDOWS_INTACT(vehicle);
		return retval;
	}

	bool LUA_NATIVE_VEHICLE_ARE_ANY_VEHICLE_SEATS_FREE( Vehicle vehicle )
	{
		auto retval = (bool)VEHICLE::ARE_ANY_VEHICLE_SEATS_FREE(vehicle);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_RESET_VEHICLE_WHEELS( Vehicle vehicle, bool toggle )
	{
		VEHICLE::RESET_VEHICLE_WHEELS(vehicle, toggle);
	}

	bool LUA_NATIVE_VEHICLE_IS_HELI_PART_BROKEN( Vehicle vehicle, bool p1, bool p2, bool p3 )
	{
		auto retval = (bool)VEHICLE::IS_HELI_PART_BROKEN(vehicle, p1, p2, p3);
		return retval;
	}

	float LUA_NATIVE_VEHICLE_GET_HELI_MAIN_ROTOR_HEALTH( Vehicle vehicle )
	{
		auto retval = VEHICLE::GET_HELI_MAIN_ROTOR_HEALTH(vehicle);
		return retval;
	}

	float LUA_NATIVE_VEHICLE_GET_HELI_TAIL_ROTOR_HEALTH( Vehicle vehicle )
	{
		auto retval = VEHICLE::GET_HELI_TAIL_ROTOR_HEALTH(vehicle);
		return retval;
	}

	float LUA_NATIVE_VEHICLE_GET_HELI_TAIL_BOOM_HEALTH( Vehicle vehicle )
	{
		auto retval = VEHICLE::GET_HELI_TAIL_BOOM_HEALTH(vehicle);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_HELI_MAIN_ROTOR_HEALTH( Vehicle vehicle, float health )
	{
		VEHICLE::SET_HELI_MAIN_ROTOR_HEALTH(vehicle, health);
	}

	void LUA_NATIVE_VEHICLE_SET_HELI_TAIL_ROTOR_HEALTH( Vehicle vehicle, float health )
	{
		VEHICLE::SET_HELI_TAIL_ROTOR_HEALTH(vehicle, health);
	}

	bool LUA_NATIVE_VEHICLE_SET_HELI_TAIL_BOOM_CAN_BREAK_OFF( Vehicle vehicle, bool toggle )
	{
		auto retval = (bool)VEHICLE::SET_HELI_TAIL_BOOM_CAN_BREAK_OFF(vehicle, toggle);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_NAME_DEBUG( Vehicle vehicle, const char* name )
	{
		VEHICLE::SET_VEHICLE_NAME_DEBUG(vehicle, name);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_EXPLODES_ON_HIGH_EXPLOSION_DAMAGE( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_VEHICLE_EXPLODES_ON_HIGH_EXPLOSION_DAMAGE(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_EXPLODES_ON_EXPLOSION_DAMAGE_AT_ZERO_BODY_HEALTH( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_VEHICLE_EXPLODES_ON_EXPLOSION_DAMAGE_AT_ZERO_BODY_HEALTH(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_ALLOW_VEHICLE_EXPLODES_ON_CONTACT( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_ALLOW_VEHICLE_EXPLODES_ON_CONTACT(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_DISABLE_TOWING( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_VEHICLE_DISABLE_TOWING(vehicle, toggle);
	}

	bool LUA_NATIVE_VEHICLE_GET_VEHICLE_HAS_LANDING_GEAR( Vehicle vehicle )
	{
		auto retval = (bool)VEHICLE::GET_VEHICLE_HAS_LANDING_GEAR(vehicle);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_CONTROL_LANDING_GEAR( Vehicle vehicle, int state )
	{
		VEHICLE::CONTROL_LANDING_GEAR(vehicle, state);
	}

	int LUA_NATIVE_VEHICLE_GET_LANDING_GEAR_STATE( Vehicle vehicle )
	{
		auto retval = VEHICLE::GET_LANDING_GEAR_STATE(vehicle);
		return retval;
	}

	bool LUA_NATIVE_VEHICLE_IS_ANY_VEHICLE_NEAR_POINT( float x, float y, float z, float radius )
	{
		auto retval = (bool)VEHICLE::IS_ANY_VEHICLE_NEAR_POINT(x, y, z, radius);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_REQUEST_VEHICLE_HIGH_DETAIL_MODEL( Vehicle vehicle )
	{
		VEHICLE::REQUEST_VEHICLE_HIGH_DETAIL_MODEL(vehicle);
	}

	void LUA_NATIVE_VEHICLE_REMOVE_VEHICLE_HIGH_DETAIL_MODEL( Vehicle vehicle )
	{
		VEHICLE::REMOVE_VEHICLE_HIGH_DETAIL_MODEL(vehicle);
	}

	bool LUA_NATIVE_VEHICLE_IS_VEHICLE_HIGH_DETAIL( Vehicle vehicle )
	{
		auto retval = (bool)VEHICLE::IS_VEHICLE_HIGH_DETAIL(vehicle);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_REQUEST_VEHICLE_ASSET( Hash vehicleHash, int vehicleAsset )
	{
		VEHICLE::REQUEST_VEHICLE_ASSET(vehicleHash, vehicleAsset);
	}

	bool LUA_NATIVE_VEHICLE_HAS_VEHICLE_ASSET_LOADED( int vehicleAsset )
	{
		auto retval = (bool)VEHICLE::HAS_VEHICLE_ASSET_LOADED(vehicleAsset);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_REMOVE_VEHICLE_ASSET( int vehicleAsset )
	{
		VEHICLE::REMOVE_VEHICLE_ASSET(vehicleAsset);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_TOW_TRUCK_ARM_POSITION( Vehicle vehicle, float position )
	{
		VEHICLE::SET_VEHICLE_TOW_TRUCK_ARM_POSITION(vehicle, position);
	}

	void LUA_NATIVE_VEHICLE_ATTACH_VEHICLE_TO_TOW_TRUCK( Vehicle towTruck, Vehicle vehicle, bool rear, float hookOffsetX, float hookOffsetY, float hookOffsetZ )
	{
		VEHICLE::ATTACH_VEHICLE_TO_TOW_TRUCK(towTruck, vehicle, rear, hookOffsetX, hookOffsetY, hookOffsetZ);
	}

	void LUA_NATIVE_VEHICLE_DETACH_VEHICLE_FROM_TOW_TRUCK( Vehicle towTruck, Vehicle vehicle )
	{
		VEHICLE::DETACH_VEHICLE_FROM_TOW_TRUCK(towTruck, vehicle);
	}

	bool LUA_NATIVE_VEHICLE_DETACH_VEHICLE_FROM_ANY_TOW_TRUCK( Vehicle vehicle )
	{
		auto retval = (bool)VEHICLE::DETACH_VEHICLE_FROM_ANY_TOW_TRUCK(vehicle);
		return retval;
	}

	bool LUA_NATIVE_VEHICLE_IS_VEHICLE_ATTACHED_TO_TOW_TRUCK( Vehicle towTruck, Vehicle vehicle )
	{
		auto retval = (bool)VEHICLE::IS_VEHICLE_ATTACHED_TO_TOW_TRUCK(towTruck, vehicle);
		return retval;
	}

	Entity LUA_NATIVE_VEHICLE_GET_ENTITY_ATTACHED_TO_TOW_TRUCK( Vehicle towTruck )
	{
		auto retval = VEHICLE::GET_ENTITY_ATTACHED_TO_TOW_TRUCK(towTruck);
		return retval;
	}

	Entity LUA_NATIVE_VEHICLE_SET_VEHICLE_AUTOMATICALLY_ATTACHES( Vehicle vehicle, bool p1, Any p2 )
	{
		auto retval = VEHICLE::SET_VEHICLE_AUTOMATICALLY_ATTACHES(vehicle, p1, p2);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_BULLDOZER_ARM_POSITION( Vehicle vehicle, float position, bool p2 )
	{
		VEHICLE::SET_VEHICLE_BULLDOZER_ARM_POSITION(vehicle, position, p2);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_TANK_TURRET_POSITION( Vehicle vehicle, float position, bool p2 )
	{
		VEHICLE::SET_VEHICLE_TANK_TURRET_POSITION(vehicle, position, p2);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_TURRET_TARGET( Vehicle vehicle, bool p1, float x, float y, float z, bool p5 )
	{
		VEHICLE::SET_VEHICLE_TURRET_TARGET(vehicle, p1, x, y, z, p5);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_TANK_STATIONARY( Vehicle vehicle, bool p1 )
	{
		VEHICLE::SET_VEHICLE_TANK_STATIONARY(vehicle, p1);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_TURRET_SPEED_THIS_FRAME( Vehicle vehicle, float speed )
	{
		VEHICLE::SET_VEHICLE_TURRET_SPEED_THIS_FRAME(vehicle, speed);
	}

	void LUA_NATIVE_VEHICLE_DISABLE_VEHICLE_TURRET_MOVEMENT_THIS_FRAME( Vehicle vehicle )
	{
		VEHICLE::DISABLE_VEHICLE_TURRET_MOVEMENT_THIS_FRAME(vehicle);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_FLIGHT_NOZZLE_POSITION( Vehicle vehicle, float angleRatio )
	{
		VEHICLE::SET_VEHICLE_FLIGHT_NOZZLE_POSITION(vehicle, angleRatio);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_FLIGHT_NOZZLE_POSITION_IMMEDIATE( Vehicle vehicle, float angle )
	{
		VEHICLE::SET_VEHICLE_FLIGHT_NOZZLE_POSITION_IMMEDIATE(vehicle, angle);
	}

	float LUA_NATIVE_VEHICLE_GET_VEHICLE_FLIGHT_NOZZLE_POSITION( Vehicle plane )
	{
		auto retval = VEHICLE::GET_VEHICLE_FLIGHT_NOZZLE_POSITION(plane);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_DISABLE_VERTICAL_FLIGHT_MODE_TRANSITION( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_DISABLE_VERTICAL_FLIGHT_MODE_TRANSITION(vehicle, toggle);
	}

	std::tuple<bool, Vector3, Vector3> LUA_NATIVE_VEHICLE_GENERATE_VEHICLE_CREATION_POS_FROM_PATHS( Vector3 outVec, Any p1, Vector3 outVec1, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8 )
	{
		std::tuple<bool, Vector3, Vector3> return_values;
		std::get<0>(return_values) = (bool)VEHICLE::GENERATE_VEHICLE_CREATION_POS_FROM_PATHS(&outVec, p1, &outVec1, p3, p4, p5, p6, p7, p8);
		std::get<1>(return_values) = outVec;
		std::get<2>(return_values) = outVec1;

		return return_values;
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_BURNOUT( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_VEHICLE_BURNOUT(vehicle, toggle);
	}

	bool LUA_NATIVE_VEHICLE_IS_VEHICLE_IN_BURNOUT( Vehicle vehicle )
	{
		auto retval = (bool)VEHICLE::IS_VEHICLE_IN_BURNOUT(vehicle);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_REDUCE_GRIP( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_VEHICLE_REDUCE_GRIP(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_REDUCE_GRIP_LEVEL( Vehicle vehicle, int val )
	{
		VEHICLE::SET_VEHICLE_REDUCE_GRIP_LEVEL(vehicle, val);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_INDICATOR_LIGHTS( Vehicle vehicle, int turnSignal, bool toggle )
	{
		VEHICLE::SET_VEHICLE_INDICATOR_LIGHTS(vehicle, turnSignal, toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_BRAKE_LIGHTS( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_VEHICLE_BRAKE_LIGHTS(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_TAIL_LIGHTS( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_VEHICLE_TAIL_LIGHTS(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_HANDBRAKE( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_VEHICLE_HANDBRAKE(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_BRAKE( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_VEHICLE_BRAKE(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_INSTANTLY_FILL_VEHICLE_POPULATION(  )
	{
		VEHICLE::INSTANTLY_FILL_VEHICLE_POPULATION();
	}

	bool LUA_NATIVE_VEHICLE_HAS_INSTANT_FILL_VEHICLE_POPULATION_FINISHED(  )
	{
		auto retval = (bool)VEHICLE::HAS_INSTANT_FILL_VEHICLE_POPULATION_FINISHED();
		return retval;
	}

	void LUA_NATIVE_VEHICLE_NETWORK_ENABLE_EMPTY_CROWDING_VEHICLES_REMOVAL( bool toggle )
	{
		VEHICLE::NETWORK_ENABLE_EMPTY_CROWDING_VEHICLES_REMOVAL(toggle);
	}

	void LUA_NATIVE_VEHICLE_NETWORK_CAP_EMPTY_CROWDING_VEHICLES_REMOVAL( int p0 )
	{
		VEHICLE::NETWORK_CAP_EMPTY_CROWDING_VEHICLES_REMOVAL(p0);
	}

	std::tuple<bool, Vehicle> LUA_NATIVE_VEHICLE_GET_VEHICLE_TRAILER_VEHICLE( Vehicle vehicle, Vehicle trailer )
	{
		std::tuple<bool, Vehicle> return_values;
		std::get<0>(return_values) = (bool)VEHICLE::GET_VEHICLE_TRAILER_VEHICLE(vehicle, &trailer);
		std::get<1>(return_values) = trailer;

		return return_values;
	}

	Vehicle LUA_NATIVE_VEHICLE_GET_VEHICLE_TRAILER_PARENT_VEHICLE_( Vehicle trailer )
	{
		auto retval = VEHICLE::GET_VEHICLE_TRAILER_PARENT_VEHICLE_(trailer);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_USES_LARGE_REAR_RAMP( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_VEHICLE_USES_LARGE_REAR_RAMP(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_RUDDER_BROKEN( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_VEHICLE_RUDDER_BROKEN(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_CONVERTIBLE_ROOF_LATCH_STATE( Vehicle vehicle, bool state )
	{
		VEHICLE::SET_CONVERTIBLE_ROOF_LATCH_STATE(vehicle, state);
	}

	float LUA_NATIVE_VEHICLE_GET_VEHICLE_ESTIMATED_MAX_SPEED( Vehicle vehicle )
	{
		auto retval = VEHICLE::GET_VEHICLE_ESTIMATED_MAX_SPEED(vehicle);
		return retval;
	}

	float LUA_NATIVE_VEHICLE_GET_VEHICLE_MAX_BRAKING( Vehicle vehicle )
	{
		auto retval = VEHICLE::GET_VEHICLE_MAX_BRAKING(vehicle);
		return retval;
	}

	float LUA_NATIVE_VEHICLE_GET_VEHICLE_MAX_TRACTION( Vehicle vehicle )
	{
		auto retval = VEHICLE::GET_VEHICLE_MAX_TRACTION(vehicle);
		return retval;
	}

	float LUA_NATIVE_VEHICLE_GET_VEHICLE_ACCELERATION( Vehicle vehicle )
	{
		auto retval = VEHICLE::GET_VEHICLE_ACCELERATION(vehicle);
		return retval;
	}

	float LUA_NATIVE_VEHICLE_GET_VEHICLE_MODEL_ESTIMATED_MAX_SPEED( Hash modelHash )
	{
		auto retval = VEHICLE::GET_VEHICLE_MODEL_ESTIMATED_MAX_SPEED(modelHash);
		return retval;
	}

	float LUA_NATIVE_VEHICLE_GET_VEHICLE_MODEL_MAX_BRAKING( Hash modelHash )
	{
		auto retval = VEHICLE::GET_VEHICLE_MODEL_MAX_BRAKING(modelHash);
		return retval;
	}

	float LUA_NATIVE_VEHICLE_GET_VEHICLE_MODEL_MAX_BRAKING_MAX_MODS( Hash modelHash )
	{
		auto retval = VEHICLE::GET_VEHICLE_MODEL_MAX_BRAKING_MAX_MODS(modelHash);
		return retval;
	}

	float LUA_NATIVE_VEHICLE_GET_VEHICLE_MODEL_MAX_TRACTION( Hash modelHash )
	{
		auto retval = VEHICLE::GET_VEHICLE_MODEL_MAX_TRACTION(modelHash);
		return retval;
	}

	float LUA_NATIVE_VEHICLE_GET_VEHICLE_MODEL_ACCELERATION( Hash modelHash )
	{
		auto retval = VEHICLE::GET_VEHICLE_MODEL_ACCELERATION(modelHash);
		return retval;
	}

	float LUA_NATIVE_VEHICLE_GET_VEHICLE_MODEL_ACCELERATION_MAX_MODS( Hash modelHash )
	{
		auto retval = VEHICLE::GET_VEHICLE_MODEL_ACCELERATION_MAX_MODS(modelHash);
		return retval;
	}

	float LUA_NATIVE_VEHICLE_GET_FLYING_VEHICLE_MODEL_AGILITY( Hash modelHash )
	{
		auto retval = VEHICLE::GET_FLYING_VEHICLE_MODEL_AGILITY(modelHash);
		return retval;
	}

	float LUA_NATIVE_VEHICLE_GET_BOAT_VEHICLE_MODEL_AGILITY( Hash modelHash )
	{
		auto retval = VEHICLE::GET_BOAT_VEHICLE_MODEL_AGILITY(modelHash);
		return retval;
	}

	float LUA_NATIVE_VEHICLE_GET_VEHICLE_CLASS_ESTIMATED_MAX_SPEED( int vehicleClass )
	{
		auto retval = VEHICLE::GET_VEHICLE_CLASS_ESTIMATED_MAX_SPEED(vehicleClass);
		return retval;
	}

	float LUA_NATIVE_VEHICLE_GET_VEHICLE_CLASS_MAX_TRACTION( int vehicleClass )
	{
		auto retval = VEHICLE::GET_VEHICLE_CLASS_MAX_TRACTION(vehicleClass);
		return retval;
	}

	float LUA_NATIVE_VEHICLE_GET_VEHICLE_CLASS_MAX_AGILITY( int vehicleClass )
	{
		auto retval = VEHICLE::GET_VEHICLE_CLASS_MAX_AGILITY(vehicleClass);
		return retval;
	}

	float LUA_NATIVE_VEHICLE_GET_VEHICLE_CLASS_MAX_ACCELERATION( int vehicleClass )
	{
		auto retval = VEHICLE::GET_VEHICLE_CLASS_MAX_ACCELERATION(vehicleClass);
		return retval;
	}

	float LUA_NATIVE_VEHICLE_GET_VEHICLE_CLASS_MAX_BRAKING( int vehicleClass )
	{
		auto retval = VEHICLE::GET_VEHICLE_CLASS_MAX_BRAKING(vehicleClass);
		return retval;
	}

	int LUA_NATIVE_VEHICLE_ADD_ROAD_NODE_SPEED_ZONE( float x, float y, float z, float radius, float speed, bool p5 )
	{
		auto retval = VEHICLE::ADD_ROAD_NODE_SPEED_ZONE(x, y, z, radius, speed, p5);
		return retval;
	}

	bool LUA_NATIVE_VEHICLE_REMOVE_ROAD_NODE_SPEED_ZONE( int speedzone )
	{
		auto retval = (bool)VEHICLE::REMOVE_ROAD_NODE_SPEED_ZONE(speedzone);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_OPEN_BOMB_BAY_DOORS( Vehicle vehicle )
	{
		VEHICLE::OPEN_BOMB_BAY_DOORS(vehicle);
	}

	void LUA_NATIVE_VEHICLE_CLOSE_BOMB_BAY_DOORS( Vehicle vehicle )
	{
		VEHICLE::CLOSE_BOMB_BAY_DOORS(vehicle);
	}

	bool LUA_NATIVE_VEHICLE_GET_ARE_BOMB_BAY_DOORS_OPEN( Vehicle aircraft )
	{
		auto retval = (bool)VEHICLE::GET_ARE_BOMB_BAY_DOORS_OPEN(aircraft);
		return retval;
	}

	bool LUA_NATIVE_VEHICLE_IS_VEHICLE_SEARCHLIGHT_ON( Vehicle vehicle )
	{
		auto retval = (bool)VEHICLE::IS_VEHICLE_SEARCHLIGHT_ON(vehicle);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_SEARCHLIGHT( Vehicle heli, bool toggle, bool canBeUsedByAI )
	{
		VEHICLE::SET_VEHICLE_SEARCHLIGHT(heli, toggle, canBeUsedByAI);
	}

	bool LUA_NATIVE_VEHICLE_DOES_VEHICLE_HAVE_SEARCHLIGHT( Vehicle vehicle )
	{
		auto retval = (bool)VEHICLE::DOES_VEHICLE_HAVE_SEARCHLIGHT(vehicle);
		return retval;
	}

	bool LUA_NATIVE_VEHICLE_IS_ENTRY_POINT_FOR_SEAT_CLEAR( Ped ped, Vehicle vehicle, int seatIndex, bool side, bool onEnter )
	{
		auto retval = (bool)VEHICLE::IS_ENTRY_POINT_FOR_SEAT_CLEAR(ped, vehicle, seatIndex, side, onEnter);
		return retval;
	}

	Vector3 LUA_NATIVE_VEHICLE_GET_ENTRY_POINT_POSITION( Vehicle vehicle, int doorId )
	{
		auto retval = VEHICLE::GET_ENTRY_POINT_POSITION(vehicle, doorId);
		return retval;
	}

	bool LUA_NATIVE_VEHICLE_CAN_SHUFFLE_SEAT( Vehicle vehicle, int seatIndex )
	{
		auto retval = (bool)VEHICLE::CAN_SHUFFLE_SEAT(vehicle, seatIndex);
		return retval;
	}

	int LUA_NATIVE_VEHICLE_GET_NUM_MOD_KITS( Vehicle vehicle )
	{
		auto retval = VEHICLE::GET_NUM_MOD_KITS(vehicle);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_MOD_KIT( Vehicle vehicle, int modKit )
	{
		VEHICLE::SET_VEHICLE_MOD_KIT(vehicle, modKit);
	}

	int LUA_NATIVE_VEHICLE_GET_VEHICLE_MOD_KIT( Vehicle vehicle )
	{
		auto retval = VEHICLE::GET_VEHICLE_MOD_KIT(vehicle);
		return retval;
	}

	int LUA_NATIVE_VEHICLE_GET_VEHICLE_MOD_KIT_TYPE( Vehicle vehicle )
	{
		auto retval = VEHICLE::GET_VEHICLE_MOD_KIT_TYPE(vehicle);
		return retval;
	}

	int LUA_NATIVE_VEHICLE_GET_VEHICLE_WHEEL_TYPE( Vehicle vehicle )
	{
		auto retval = VEHICLE::GET_VEHICLE_WHEEL_TYPE(vehicle);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_WHEEL_TYPE( Vehicle vehicle, int WheelType )
	{
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(vehicle, WheelType);
	}

	int LUA_NATIVE_VEHICLE_GET_NUM_MOD_COLORS( int paintType, bool p1 )
	{
		auto retval = VEHICLE::GET_NUM_MOD_COLORS(paintType, p1);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_MOD_COLOR_1( Vehicle vehicle, int paintType, int color, int pearlescentColor )
	{
		VEHICLE::SET_VEHICLE_MOD_COLOR_1(vehicle, paintType, color, pearlescentColor);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_MOD_COLOR_2( Vehicle vehicle, int paintType, int color )
	{
		VEHICLE::SET_VEHICLE_MOD_COLOR_2(vehicle, paintType, color);
	}

	std::tuple<int, int, int> LUA_NATIVE_VEHICLE_GET_VEHICLE_MOD_COLOR_1( Vehicle vehicle, int paintType, int color, int pearlescentColor )
	{
		std::tuple<int, int, int> return_values;
		VEHICLE::GET_VEHICLE_MOD_COLOR_1(vehicle, &paintType, &color, &pearlescentColor);
		std::get<0>(return_values) = paintType;
		std::get<1>(return_values) = color;
		std::get<2>(return_values) = pearlescentColor;

		return return_values;
	}

	std::tuple<int, int> LUA_NATIVE_VEHICLE_GET_VEHICLE_MOD_COLOR_2( Vehicle vehicle, int paintType, int color )
	{
		std::tuple<int, int> return_values;
		VEHICLE::GET_VEHICLE_MOD_COLOR_2(vehicle, &paintType, &color);
		std::get<0>(return_values) = paintType;
		std::get<1>(return_values) = color;

		return return_values;
	}

	const char* LUA_NATIVE_VEHICLE_GET_VEHICLE_MOD_COLOR_1_NAME( Vehicle vehicle, bool p1 )
	{
		auto retval = VEHICLE::GET_VEHICLE_MOD_COLOR_1_NAME(vehicle, p1);
		return retval;
	}

	const char* LUA_NATIVE_VEHICLE_GET_VEHICLE_MOD_COLOR_2_NAME( Vehicle vehicle )
	{
		auto retval = VEHICLE::GET_VEHICLE_MOD_COLOR_2_NAME(vehicle);
		return retval;
	}

	bool LUA_NATIVE_VEHICLE_HAVE_VEHICLE_MODS_STREAMED_IN( Vehicle vehicle )
	{
		auto retval = (bool)VEHICLE::HAVE_VEHICLE_MODS_STREAMED_IN(vehicle);
		return retval;
	}

	bool LUA_NATIVE_VEHICLE_IS_VEHICLE_MOD_GEN9_EXCLUSIVE( Vehicle vehicle, int modType, int modIndex )
	{
		auto retval = (bool)VEHICLE::IS_VEHICLE_MOD_GEN9_EXCLUSIVE(vehicle, modType, modIndex);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_MOD( Vehicle vehicle, int modType, int modIndex, bool customTires )
	{
		VEHICLE::SET_VEHICLE_MOD(vehicle, modType, modIndex, customTires);
	}

	int LUA_NATIVE_VEHICLE_GET_VEHICLE_MOD( Vehicle vehicle, int modType )
	{
		auto retval = VEHICLE::GET_VEHICLE_MOD(vehicle, modType);
		return retval;
	}

	int LUA_NATIVE_VEHICLE_GET_VEHICLE_MOD_VARIATION( Vehicle vehicle, int modType )
	{
		auto retval = VEHICLE::GET_VEHICLE_MOD_VARIATION(vehicle, modType);
		return retval;
	}

	int LUA_NATIVE_VEHICLE_GET_NUM_VEHICLE_MODS( Vehicle vehicle, int modType )
	{
		auto retval = VEHICLE::GET_NUM_VEHICLE_MODS(vehicle, modType);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_REMOVE_VEHICLE_MOD( Vehicle vehicle, int modType )
	{
		VEHICLE::REMOVE_VEHICLE_MOD(vehicle, modType);
	}

	void LUA_NATIVE_VEHICLE_TOGGLE_VEHICLE_MOD( Vehicle vehicle, int modType, bool toggle )
	{
		VEHICLE::TOGGLE_VEHICLE_MOD(vehicle, modType, toggle);
	}

	bool LUA_NATIVE_VEHICLE_IS_TOGGLE_MOD_ON( Vehicle vehicle, int modType )
	{
		auto retval = (bool)VEHICLE::IS_TOGGLE_MOD_ON(vehicle, modType);
		return retval;
	}

	const char* LUA_NATIVE_VEHICLE_GET_MOD_TEXT_LABEL( Vehicle vehicle, int modType, int modValue )
	{
		auto retval = VEHICLE::GET_MOD_TEXT_LABEL(vehicle, modType, modValue);
		return retval;
	}

	const char* LUA_NATIVE_VEHICLE_GET_MOD_SLOT_NAME( Vehicle vehicle, int modType )
	{
		auto retval = VEHICLE::GET_MOD_SLOT_NAME(vehicle, modType);
		return retval;
	}

	const char* LUA_NATIVE_VEHICLE_GET_LIVERY_NAME( Vehicle vehicle, int liveryIndex )
	{
		auto retval = VEHICLE::GET_LIVERY_NAME(vehicle, liveryIndex);
		return retval;
	}

	int LUA_NATIVE_VEHICLE_GET_VEHICLE_MOD_MODIFIER_VALUE( Vehicle vehicle, int modType, int modIndex )
	{
		auto retval = VEHICLE::GET_VEHICLE_MOD_MODIFIER_VALUE(vehicle, modType, modIndex);
		return retval;
	}

	Hash LUA_NATIVE_VEHICLE_GET_VEHICLE_MOD_IDENTIFIER_HASH( Vehicle vehicle, int modType, int modIndex )
	{
		auto retval = VEHICLE::GET_VEHICLE_MOD_IDENTIFIER_HASH(vehicle, modType, modIndex);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_PRELOAD_VEHICLE_MOD( Vehicle vehicle, int modType, int modIndex )
	{
		VEHICLE::PRELOAD_VEHICLE_MOD(vehicle, modType, modIndex);
	}

	bool LUA_NATIVE_VEHICLE_HAS_PRELOAD_MODS_FINISHED( Vehicle vehicle )
	{
		auto retval = (bool)VEHICLE::HAS_PRELOAD_MODS_FINISHED(vehicle);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_RELEASE_PRELOAD_MODS( Vehicle vehicle )
	{
		VEHICLE::RELEASE_PRELOAD_MODS(vehicle);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_TYRE_SMOKE_COLOR( Vehicle vehicle, int r, int g, int b )
	{
		VEHICLE::SET_VEHICLE_TYRE_SMOKE_COLOR(vehicle, r, g, b);
	}

	std::tuple<int, int, int> LUA_NATIVE_VEHICLE_GET_VEHICLE_TYRE_SMOKE_COLOR( Vehicle vehicle, int r, int g, int b )
	{
		std::tuple<int, int, int> return_values;
		VEHICLE::GET_VEHICLE_TYRE_SMOKE_COLOR(vehicle, &r, &g, &b);
		std::get<0>(return_values) = r;
		std::get<1>(return_values) = g;
		std::get<2>(return_values) = b;

		return return_values;
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_WINDOW_TINT( Vehicle vehicle, int tint )
	{
		VEHICLE::SET_VEHICLE_WINDOW_TINT(vehicle, tint);
	}

	int LUA_NATIVE_VEHICLE_GET_VEHICLE_WINDOW_TINT( Vehicle vehicle )
	{
		auto retval = VEHICLE::GET_VEHICLE_WINDOW_TINT(vehicle);
		return retval;
	}

	int LUA_NATIVE_VEHICLE_GET_NUM_VEHICLE_WINDOW_TINTS(  )
	{
		auto retval = VEHICLE::GET_NUM_VEHICLE_WINDOW_TINTS();
		return retval;
	}

	std::tuple<int, int, int> LUA_NATIVE_VEHICLE_GET_VEHICLE_COLOR( Vehicle vehicle, int r, int g, int b )
	{
		std::tuple<int, int, int> return_values;
		VEHICLE::GET_VEHICLE_COLOR(vehicle, &r, &g, &b);
		std::get<0>(return_values) = r;
		std::get<1>(return_values) = g;
		std::get<2>(return_values) = b;

		return return_values;
	}

	int LUA_NATIVE_VEHICLE_GET_VEHICLE_COLOURS_WHICH_CAN_BE_SET( Vehicle vehicle )
	{
		auto retval = VEHICLE::GET_VEHICLE_COLOURS_WHICH_CAN_BE_SET(vehicle);
		return retval;
	}

	Hash LUA_NATIVE_VEHICLE_GET_VEHICLE_CAUSE_OF_DESTRUCTION( Vehicle vehicle )
	{
		auto retval = VEHICLE::GET_VEHICLE_CAUSE_OF_DESTRUCTION(vehicle);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_OVERRIDE_PLANE_DAMAGE_THREHSOLD( Vehicle vehicle, float health )
	{
		VEHICLE::OVERRIDE_PLANE_DAMAGE_THREHSOLD(vehicle, health);
	}

	bool LUA_NATIVE_VEHICLE_GET_IS_LEFT_VEHICLE_HEADLIGHT_DAMAGED( Vehicle vehicle )
	{
		auto retval = (bool)VEHICLE::GET_IS_LEFT_VEHICLE_HEADLIGHT_DAMAGED(vehicle);
		return retval;
	}

	bool LUA_NATIVE_VEHICLE_GET_IS_RIGHT_VEHICLE_HEADLIGHT_DAMAGED( Vehicle vehicle )
	{
		auto retval = (bool)VEHICLE::GET_IS_RIGHT_VEHICLE_HEADLIGHT_DAMAGED(vehicle);
		return retval;
	}

	bool LUA_NATIVE_VEHICLE_GET_BOTH_VEHICLE_HEADLIGHTS_DAMAGED( Vehicle vehicle )
	{
		auto retval = (bool)VEHICLE::GET_BOTH_VEHICLE_HEADLIGHTS_DAMAGED(vehicle);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_MODIFY_VEHICLE_TOP_SPEED( Vehicle vehicle, float value )
	{
		VEHICLE::MODIFY_VEHICLE_TOP_SPEED(vehicle, value);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_MAX_SPEED( Vehicle vehicle, float speed )
	{
		VEHICLE::SET_VEHICLE_MAX_SPEED(vehicle, speed);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_STAYS_FROZEN_WHEN_CLEANED_UP( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_VEHICLE_STAYS_FROZEN_WHEN_CLEANED_UP(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_ACT_AS_IF_HIGH_SPEED_FOR_FRAG_SMASHING( Vehicle vehicle, bool p1 )
	{
		VEHICLE::SET_VEHICLE_ACT_AS_IF_HIGH_SPEED_FOR_FRAG_SMASHING(vehicle, p1);
	}

	void LUA_NATIVE_VEHICLE_SET_PEDS_CAN_FALL_OFF_THIS_VEHICLE_FROM_LARGE_FALL_DAMAGE( Vehicle vehicle, bool toggle, float p2 )
	{
		VEHICLE::SET_PEDS_CAN_FALL_OFF_THIS_VEHICLE_FROM_LARGE_FALL_DAMAGE(vehicle, toggle, p2);
	}

	int LUA_NATIVE_VEHICLE_ADD_VEHICLE_COMBAT_ANGLED_AVOIDANCE_AREA( float p0, float p1, float p2, float p3, float p4, float p5, float p6 )
	{
		auto retval = VEHICLE::ADD_VEHICLE_COMBAT_ANGLED_AVOIDANCE_AREA(p0, p1, p2, p3, p4, p5, p6);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_REMOVE_VEHICLE_COMBAT_AVOIDANCE_AREA( int p0 )
	{
		VEHICLE::REMOVE_VEHICLE_COMBAT_AVOIDANCE_AREA(p0);
	}

	bool LUA_NATIVE_VEHICLE_IS_ANY_PED_RAPPELLING_FROM_HELI( Vehicle vehicle )
	{
		auto retval = (bool)VEHICLE::IS_ANY_PED_RAPPELLING_FROM_HELI(vehicle);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_CHEAT_POWER_INCREASE( Vehicle vehicle, float value )
	{
		VEHICLE::SET_VEHICLE_CHEAT_POWER_INCREASE(vehicle, value);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_INFLUENCES_WANTED_LEVEL( Any p0, bool p1 )
	{
		VEHICLE::SET_VEHICLE_INFLUENCES_WANTED_LEVEL(p0, p1);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_IS_WANTED( Vehicle vehicle, bool state )
	{
		VEHICLE::SET_VEHICLE_IS_WANTED(vehicle, state);
	}

	void LUA_NATIVE_VEHICLE_SWING_BOAT_BOOM_TO_RATIO( Vehicle vehicle, float ratio )
	{
		VEHICLE::SWING_BOAT_BOOM_TO_RATIO(vehicle, ratio);
	}

	void LUA_NATIVE_VEHICLE_SWING_BOAT_BOOM_FREELY( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SWING_BOAT_BOOM_FREELY(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_ALLOW_BOAT_BOOM_TO_ANIMATE( Vehicle vehicle, bool toggle )
	{
		VEHICLE::ALLOW_BOAT_BOOM_TO_ANIMATE(vehicle, toggle);
	}

	float LUA_NATIVE_VEHICLE_GET_BOAT_BOOM_POSITION_RATIO( Vehicle vehicle )
	{
		auto retval = VEHICLE::GET_BOAT_BOOM_POSITION_RATIO(vehicle);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_DISABLE_PLANE_AILERON( Vehicle vehicle, bool p1, bool p2 )
	{
		VEHICLE::DISABLE_PLANE_AILERON(vehicle, p1, p2);
	}

	bool LUA_NATIVE_VEHICLE_GET_IS_VEHICLE_ENGINE_RUNNING( Vehicle vehicle )
	{
		auto retval = (bool)VEHICLE::GET_IS_VEHICLE_ENGINE_RUNNING(vehicle);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_USE_ALTERNATE_HANDLING( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_VEHICLE_USE_ALTERNATE_HANDLING(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_BIKE_ON_STAND( Vehicle vehicle, float x, float y )
	{
		VEHICLE::SET_BIKE_ON_STAND(vehicle, x, y);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_NOT_STEALABLE_AMBIENTLY( Vehicle vehicle, bool p1 )
	{
		VEHICLE::SET_VEHICLE_NOT_STEALABLE_AMBIENTLY(vehicle, p1);
	}

	void LUA_NATIVE_VEHICLE_LOCK_DOORS_WHEN_NO_LONGER_NEEDED( Vehicle vehicle )
	{
		VEHICLE::LOCK_DOORS_WHEN_NO_LONGER_NEEDED(vehicle);
	}

	void LUA_NATIVE_VEHICLE_SET_LAST_DRIVEN_VEHICLE( Vehicle vehicle )
	{
		VEHICLE::SET_LAST_DRIVEN_VEHICLE(vehicle);
	}

	Vehicle LUA_NATIVE_VEHICLE_GET_LAST_DRIVEN_VEHICLE(  )
	{
		auto retval = VEHICLE::GET_LAST_DRIVEN_VEHICLE();
		return retval;
	}

	void LUA_NATIVE_VEHICLE_CLEAR_LAST_DRIVEN_VEHICLE(  )
	{
		VEHICLE::CLEAR_LAST_DRIVEN_VEHICLE();
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_HAS_BEEN_DRIVEN_FLAG( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_VEHICLE_HAS_BEEN_DRIVEN_FLAG(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_TASK_VEHICLE_GOTO_PLANE_MIN_HEIGHT_ABOVE_TERRAIN( Vehicle plane, int height )
	{
		VEHICLE::SET_TASK_VEHICLE_GOTO_PLANE_MIN_HEIGHT_ABOVE_TERRAIN(plane, height);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_LOD_MULTIPLIER( Vehicle vehicle, float multiplier )
	{
		VEHICLE::SET_VEHICLE_LOD_MULTIPLIER(vehicle, multiplier);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_CAN_SAVE_IN_GARAGE( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_VEHICLE_CAN_SAVE_IN_GARAGE(vehicle, toggle);
	}

	int LUA_NATIVE_VEHICLE_GET_VEHICLE_NUM_OF_BROKEN_OFF_PARTS( Vehicle vehicle )
	{
		auto retval = VEHICLE::GET_VEHICLE_NUM_OF_BROKEN_OFF_PARTS(vehicle);
		return retval;
	}

	int LUA_NATIVE_VEHICLE_GET_VEHICLE_NUM_OF_BROKEN_LOOSEN_PARTS( Vehicle vehicle )
	{
		auto retval = VEHICLE::GET_VEHICLE_NUM_OF_BROKEN_LOOSEN_PARTS(vehicle);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_FORCE_VEHICLE_ENGINE_DAMAGE_BY_BULLET( Any p0, bool p1 )
	{
		VEHICLE::SET_FORCE_VEHICLE_ENGINE_DAMAGE_BY_BULLET(p0, p1);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_GENERATES_ENGINE_SHOCKING_EVENTS( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_VEHICLE_GENERATES_ENGINE_SHOCKING_EVENTS(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_COPY_VEHICLE_DAMAGES( Vehicle sourceVehicle, Vehicle targetVehicle )
	{
		VEHICLE::COPY_VEHICLE_DAMAGES(sourceVehicle, targetVehicle);
	}

	void LUA_NATIVE_VEHICLE_DISABLE_VEHICLE_EXPLOSION_BREAK_OFF_PARTS(  )
	{
		VEHICLE::DISABLE_VEHICLE_EXPLOSION_BREAK_OFF_PARTS();
	}

	void LUA_NATIVE_VEHICLE_SET_LIGHTS_CUTOFF_DISTANCE_TWEAK( float distance )
	{
		VEHICLE::SET_LIGHTS_CUTOFF_DISTANCE_TWEAK(distance);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_SHOOT_AT_TARGET( Ped driver, Entity entity, float xTarget, float yTarget, float zTarget )
	{
		VEHICLE::SET_VEHICLE_SHOOT_AT_TARGET(driver, entity, xTarget, yTarget, zTarget);
	}

	std::tuple<bool, Entity> LUA_NATIVE_VEHICLE_GET_VEHICLE_LOCK_ON_TARGET( Vehicle vehicle, Entity entity )
	{
		std::tuple<bool, Entity> return_values;
		std::get<0>(return_values) = (bool)VEHICLE::GET_VEHICLE_LOCK_ON_TARGET(vehicle, &entity);
		std::get<1>(return_values) = entity;

		return return_values;
	}

	void LUA_NATIVE_VEHICLE_SET_FORCE_HD_VEHICLE( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_FORCE_HD_VEHICLE(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_CUSTOM_PATH_NODE_STREAMING_RADIUS( Vehicle vehicle, float p1 )
	{
		VEHICLE::SET_VEHICLE_CUSTOM_PATH_NODE_STREAMING_RADIUS(vehicle, p1);
	}

	int LUA_NATIVE_VEHICLE_GET_VEHICLE_PLATE_TYPE( Vehicle vehicle )
	{
		auto retval = VEHICLE::GET_VEHICLE_PLATE_TYPE(vehicle);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_TRACK_VEHICLE_VISIBILITY( Vehicle vehicle )
	{
		VEHICLE::TRACK_VEHICLE_VISIBILITY(vehicle);
	}

	bool LUA_NATIVE_VEHICLE_IS_VEHICLE_VISIBLE( Vehicle vehicle )
	{
		auto retval = (bool)VEHICLE::IS_VEHICLE_VISIBLE(vehicle);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_GRAVITY( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_VEHICLE_GRAVITY(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_ENABLE_VEHICLE_SLIPSTREAMING( bool toggle )
	{
		VEHICLE::SET_ENABLE_VEHICLE_SLIPSTREAMING(toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_SLIPSTREAMING_SHOULD_TIME_OUT( bool toggle )
	{
		VEHICLE::SET_VEHICLE_SLIPSTREAMING_SHOULD_TIME_OUT(toggle);
	}

	float LUA_NATIVE_VEHICLE_GET_VEHICLE_CURRENT_TIME_IN_SLIP_STREAM( Vehicle vehicle )
	{
		auto retval = VEHICLE::GET_VEHICLE_CURRENT_TIME_IN_SLIP_STREAM(vehicle);
		return retval;
	}

	bool LUA_NATIVE_VEHICLE_IS_VEHICLE_PRODUCING_SLIP_STREAM( Vehicle vehicle )
	{
		auto retval = (bool)VEHICLE::IS_VEHICLE_PRODUCING_SLIP_STREAM(vehicle);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_INACTIVE_DURING_PLAYBACK( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_VEHICLE_INACTIVE_DURING_PLAYBACK(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_ACTIVE_DURING_PLAYBACK( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_VEHICLE_ACTIVE_DURING_PLAYBACK(vehicle, toggle);
	}

	bool LUA_NATIVE_VEHICLE_IS_VEHICLE_SPRAYABLE( Vehicle vehicle )
	{
		auto retval = (bool)VEHICLE::IS_VEHICLE_SPRAYABLE(vehicle);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_ENGINE_CAN_DEGRADE( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_VEHICLE_ENGINE_CAN_DEGRADE(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_DISABLE_VEHCILE_DYNAMIC_AMBIENT_SCALES( Vehicle vehicle, int p1, int p2 )
	{
		VEHICLE::DISABLE_VEHCILE_DYNAMIC_AMBIENT_SCALES(vehicle, p1, p2);
	}

	void LUA_NATIVE_VEHICLE_ENABLE_VEHICLE_DYNAMIC_AMBIENT_SCALES( Vehicle vehicle )
	{
		VEHICLE::ENABLE_VEHICLE_DYNAMIC_AMBIENT_SCALES(vehicle);
	}

	bool LUA_NATIVE_VEHICLE_IS_PLANE_LANDING_GEAR_INTACT( Vehicle plane )
	{
		auto retval = (bool)VEHICLE::IS_PLANE_LANDING_GEAR_INTACT(plane);
		return retval;
	}

	bool LUA_NATIVE_VEHICLE_ARE_PLANE_PROPELLERS_INTACT( Vehicle plane )
	{
		auto retval = (bool)VEHICLE::ARE_PLANE_PROPELLERS_INTACT(plane);
		return retval;
	}

	bool LUA_NATIVE_VEHICLE_SET_PLANE_PROPELLER_HEALTH( Vehicle plane, float health )
	{
		auto retval = (bool)VEHICLE::SET_PLANE_PROPELLER_HEALTH(plane, health);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_CAN_DEFORM_WHEELS( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_VEHICLE_CAN_DEFORM_WHEELS(vehicle, toggle);
	}

	bool LUA_NATIVE_VEHICLE_IS_VEHICLE_STOLEN( Vehicle vehicle )
	{
		auto retval = (bool)VEHICLE::IS_VEHICLE_STOLEN(vehicle);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_IS_STOLEN( Vehicle vehicle, bool isStolen )
	{
		VEHICLE::SET_VEHICLE_IS_STOLEN(vehicle, isStolen);
	}

	void LUA_NATIVE_VEHICLE_SET_PLANE_TURBULENCE_MULTIPLIER( Vehicle vehicle, float multiplier )
	{
		VEHICLE::SET_PLANE_TURBULENCE_MULTIPLIER(vehicle, multiplier);
	}

	bool LUA_NATIVE_VEHICLE_ARE_WINGS_OF_PLANE_INTACT( Vehicle plane )
	{
		auto retval = (bool)VEHICLE::ARE_WINGS_OF_PLANE_INTACT(plane);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_ALLOW_AMBIENT_VEHICLES_TO_AVOID_ADVERSE_CONDITIONS( Vehicle vehicle )
	{
		VEHICLE::ALLOW_AMBIENT_VEHICLES_TO_AVOID_ADVERSE_CONDITIONS(vehicle);
	}

	void LUA_NATIVE_VEHICLE_DETACH_VEHICLE_FROM_CARGOBOB( Vehicle vehicle, Vehicle cargobob )
	{
		VEHICLE::DETACH_VEHICLE_FROM_CARGOBOB(vehicle, cargobob);
	}

	bool LUA_NATIVE_VEHICLE_DETACH_VEHICLE_FROM_ANY_CARGOBOB( Vehicle vehicle )
	{
		auto retval = (bool)VEHICLE::DETACH_VEHICLE_FROM_ANY_CARGOBOB(vehicle);
		return retval;
	}

	bool LUA_NATIVE_VEHICLE_DETACH_ENTITY_FROM_CARGOBOB( Vehicle cargobob, Entity entity )
	{
		auto retval = (bool)VEHICLE::DETACH_ENTITY_FROM_CARGOBOB(cargobob, entity);
		return retval;
	}

	bool LUA_NATIVE_VEHICLE_IS_VEHICLE_ATTACHED_TO_CARGOBOB( Vehicle cargobob, Vehicle vehicleAttached )
	{
		auto retval = (bool)VEHICLE::IS_VEHICLE_ATTACHED_TO_CARGOBOB(cargobob, vehicleAttached);
		return retval;
	}

	Vehicle LUA_NATIVE_VEHICLE_GET_VEHICLE_ATTACHED_TO_CARGOBOB( Vehicle cargobob )
	{
		auto retval = VEHICLE::GET_VEHICLE_ATTACHED_TO_CARGOBOB(cargobob);
		return retval;
	}

	Entity LUA_NATIVE_VEHICLE_GET_ENTITY_ATTACHED_TO_CARGOBOB( Any p0 )
	{
		auto retval = VEHICLE::GET_ENTITY_ATTACHED_TO_CARGOBOB(p0);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_ATTACH_VEHICLE_TO_CARGOBOB( Vehicle vehicle, Vehicle cargobob, int p2, float x, float y, float z )
	{
		VEHICLE::ATTACH_VEHICLE_TO_CARGOBOB(vehicle, cargobob, p2, x, y, z);
	}

	void LUA_NATIVE_VEHICLE_ATTACH_ENTITY_TO_CARGOBOB( Any p0, Any p1, Any p2, Any p3, Any p4, Any p5 )
	{
		VEHICLE::ATTACH_ENTITY_TO_CARGOBOB(p0, p1, p2, p3, p4, p5);
	}

	void LUA_NATIVE_VEHICLE_SET_CARGOBOB_FORCE_DONT_DETACH_VEHICLE( Vehicle cargobob, bool toggle )
	{
		VEHICLE::SET_CARGOBOB_FORCE_DONT_DETACH_VEHICLE(cargobob, toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_CARGOBOB_EXCLUDE_FROM_PICKUP_ENTITY( Any p0, Any p1 )
	{
		VEHICLE::SET_CARGOBOB_EXCLUDE_FROM_PICKUP_ENTITY(p0, p1);
	}

	bool LUA_NATIVE_VEHICLE_CAN_CARGOBOB_PICK_UP_ENTITY( Any p0, Any p1 )
	{
		auto retval = (bool)VEHICLE::CAN_CARGOBOB_PICK_UP_ENTITY(p0, p1);
		return retval;
	}

	Vector3 LUA_NATIVE_VEHICLE_GET_ATTACHED_PICK_UP_HOOK_POSITION( Vehicle cargobob )
	{
		auto retval = VEHICLE::GET_ATTACHED_PICK_UP_HOOK_POSITION(cargobob);
		return retval;
	}

	bool LUA_NATIVE_VEHICLE_DOES_CARGOBOB_HAVE_PICK_UP_ROPE( Vehicle cargobob )
	{
		auto retval = (bool)VEHICLE::DOES_CARGOBOB_HAVE_PICK_UP_ROPE(cargobob);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_CREATE_PICK_UP_ROPE_FOR_CARGOBOB( Vehicle cargobob, int state )
	{
		VEHICLE::CREATE_PICK_UP_ROPE_FOR_CARGOBOB(cargobob, state);
	}

	void LUA_NATIVE_VEHICLE_REMOVE_PICK_UP_ROPE_FOR_CARGOBOB( Vehicle cargobob )
	{
		VEHICLE::REMOVE_PICK_UP_ROPE_FOR_CARGOBOB(cargobob);
	}

	void LUA_NATIVE_VEHICLE_SET_PICKUP_ROPE_LENGTH_FOR_CARGOBOB( Vehicle cargobob, float length1, float length2, bool p3 )
	{
		VEHICLE::SET_PICKUP_ROPE_LENGTH_FOR_CARGOBOB(cargobob, length1, length2, p3);
	}

	void LUA_NATIVE_VEHICLE_SET_PICKUP_ROPE_LENGTH_WITHOUT_CREATING_ROPE_FOR_CARGOBOB( Any p0, Any p1, Any p2 )
	{
		VEHICLE::SET_PICKUP_ROPE_LENGTH_WITHOUT_CREATING_ROPE_FOR_CARGOBOB(p0, p1, p2);
	}

	void LUA_NATIVE_VEHICLE_SET_CARGOBOB_PICKUP_ROPE_DAMPING_MULTIPLIER( Any p0, Any p1 )
	{
		VEHICLE::SET_CARGOBOB_PICKUP_ROPE_DAMPING_MULTIPLIER(p0, p1);
	}

	void LUA_NATIVE_VEHICLE_SET_CARGOBOB_PICKUP_ROPE_TYPE( Any p0, Any p1 )
	{
		VEHICLE::SET_CARGOBOB_PICKUP_ROPE_TYPE(p0, p1);
	}

	bool LUA_NATIVE_VEHICLE_DOES_CARGOBOB_HAVE_PICKUP_MAGNET( Vehicle cargobob )
	{
		auto retval = (bool)VEHICLE::DOES_CARGOBOB_HAVE_PICKUP_MAGNET(cargobob);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_CARGOBOB_PICKUP_MAGNET_ACTIVE( Vehicle cargobob, bool isActive )
	{
		VEHICLE::SET_CARGOBOB_PICKUP_MAGNET_ACTIVE(cargobob, isActive);
	}

	void LUA_NATIVE_VEHICLE_SET_CARGOBOB_PICKUP_MAGNET_STRENGTH( Vehicle cargobob, float strength )
	{
		VEHICLE::SET_CARGOBOB_PICKUP_MAGNET_STRENGTH(cargobob, strength);
	}

	void LUA_NATIVE_VEHICLE_SET_CARGOBOB_PICKUP_MAGNET_FALLOFF( Vehicle cargobob, float p1 )
	{
		VEHICLE::SET_CARGOBOB_PICKUP_MAGNET_FALLOFF(cargobob, p1);
	}

	void LUA_NATIVE_VEHICLE_SET_CARGOBOB_PICKUP_MAGNET_REDUCED_STRENGTH( Vehicle cargobob, float p1 )
	{
		VEHICLE::SET_CARGOBOB_PICKUP_MAGNET_REDUCED_STRENGTH(cargobob, p1);
	}

	void LUA_NATIVE_VEHICLE_SET_CARGOBOB_PICKUP_MAGNET_REDUCED_FALLOFF( Vehicle cargobob, float p1 )
	{
		VEHICLE::SET_CARGOBOB_PICKUP_MAGNET_REDUCED_FALLOFF(cargobob, p1);
	}

	void LUA_NATIVE_VEHICLE_SET_CARGOBOB_PICKUP_MAGNET_PULL_STRENGTH( Vehicle cargobob, float p1 )
	{
		VEHICLE::SET_CARGOBOB_PICKUP_MAGNET_PULL_STRENGTH(cargobob, p1);
	}

	void LUA_NATIVE_VEHICLE_SET_CARGOBOB_PICKUP_MAGNET_PULL_ROPE_LENGTH( Vehicle vehicle, float p1 )
	{
		VEHICLE::SET_CARGOBOB_PICKUP_MAGNET_PULL_ROPE_LENGTH(vehicle, p1);
	}

	void LUA_NATIVE_VEHICLE_SET_CARGOBOB_PICKUP_MAGNET_SET_TARGETED_MODE( Vehicle vehicle, Vehicle cargobob )
	{
		VEHICLE::SET_CARGOBOB_PICKUP_MAGNET_SET_TARGETED_MODE(vehicle, cargobob);
	}

	void LUA_NATIVE_VEHICLE_SET_CARGOBOB_PICKUP_MAGNET_SET_AMBIENT_MODE( Vehicle vehicle, bool p1, bool p2 )
	{
		VEHICLE::SET_CARGOBOB_PICKUP_MAGNET_SET_AMBIENT_MODE(vehicle, p1, p2);
	}

	void LUA_NATIVE_VEHICLE_SET_CARGOBOB_PICKUP_MAGNET_ENSURE_PICKUP_ENTITY_UPRIGHT( Vehicle vehicle, bool p1 )
	{
		VEHICLE::SET_CARGOBOB_PICKUP_MAGNET_ENSURE_PICKUP_ENTITY_UPRIGHT(vehicle, p1);
	}

	bool LUA_NATIVE_VEHICLE_DOES_VEHICLE_HAVE_WEAPONS( Vehicle vehicle )
	{
		auto retval = (bool)VEHICLE::DOES_VEHICLE_HAVE_WEAPONS(vehicle);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_WILL_TELL_OTHERS_TO_HURRY( Vehicle vehicle, bool p1 )
	{
		VEHICLE::SET_VEHICLE_WILL_TELL_OTHERS_TO_HURRY(vehicle, p1);
	}

	void LUA_NATIVE_VEHICLE_DISABLE_VEHICLE_WEAPON( bool disabled, Hash weaponHash, Vehicle vehicle, Ped owner )
	{
		VEHICLE::DISABLE_VEHICLE_WEAPON(disabled, weaponHash, vehicle, owner);
	}

	bool LUA_NATIVE_VEHICLE_IS_VEHICLE_WEAPON_DISABLED( Hash weaponHash, Vehicle vehicle, Ped owner )
	{
		auto retval = (bool)VEHICLE::IS_VEHICLE_WEAPON_DISABLED(weaponHash, vehicle, owner);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_USED_FOR_PILOT_SCHOOL( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_VEHICLE_USED_FOR_PILOT_SCHOOL(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_ACTIVE_FOR_PED_NAVIGATION( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_VEHICLE_ACTIVE_FOR_PED_NAVIGATION(vehicle, toggle);
	}

	int LUA_NATIVE_VEHICLE_GET_VEHICLE_CLASS( Vehicle vehicle )
	{
		auto retval = VEHICLE::GET_VEHICLE_CLASS(vehicle);
		return retval;
	}

	int LUA_NATIVE_VEHICLE_GET_VEHICLE_CLASS_FROM_NAME( Hash modelHash )
	{
		auto retval = VEHICLE::GET_VEHICLE_CLASS_FROM_NAME(modelHash);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_PLAYERS_LAST_VEHICLE( Vehicle vehicle )
	{
		VEHICLE::SET_PLAYERS_LAST_VEHICLE(vehicle);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_CAN_BE_USED_BY_FLEEING_PEDS( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_VEHICLE_CAN_BE_USED_BY_FLEEING_PEDS(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_AIRCRAFT_PILOT_SKILL_NOISE_SCALAR( Vehicle vehicle, float p1 )
	{
		VEHICLE::SET_AIRCRAFT_PILOT_SKILL_NOISE_SCALAR(vehicle, p1);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_DROPS_MONEY_WHEN_BLOWN_UP( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_VEHICLE_DROPS_MONEY_WHEN_BLOWN_UP(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_KEEP_ENGINE_ON_WHEN_ABANDONED( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_VEHICLE_KEEP_ENGINE_ON_WHEN_ABANDONED(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_IMPATIENCE_TIMER( Vehicle vehicle, Any p1 )
	{
		VEHICLE::SET_VEHICLE_IMPATIENCE_TIMER(vehicle, p1);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_HANDLING_OVERRIDE( Vehicle vehicle, Hash hash )
	{
		VEHICLE::SET_VEHICLE_HANDLING_OVERRIDE(vehicle, hash);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_EXTENDED_REMOVAL_RANGE( Vehicle vehicle, int range )
	{
		VEHICLE::SET_VEHICLE_EXTENDED_REMOVAL_RANGE(vehicle, range);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_STEERING_BIAS_SCALAR( Any p0, float p1 )
	{
		VEHICLE::SET_VEHICLE_STEERING_BIAS_SCALAR(p0, p1);
	}

	void LUA_NATIVE_VEHICLE_SET_HELI_CONTROL_LAGGING_RATE_SCALAR( Vehicle helicopter, float multiplier )
	{
		VEHICLE::SET_HELI_CONTROL_LAGGING_RATE_SCALAR(helicopter, multiplier);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_FRICTION_OVERRIDE( Vehicle vehicle, float friction )
	{
		VEHICLE::SET_VEHICLE_FRICTION_OVERRIDE(vehicle, friction);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_WHEELS_CAN_BREAK_OFF_WHEN_BLOW_UP( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_VEHICLE_WHEELS_CAN_BREAK_OFF_WHEN_BLOW_UP(vehicle, toggle);
	}

	bool LUA_NATIVE_VEHICLE_ARE_PLANE_CONTROL_PANELS_INTACT( Vehicle vehicle, bool p1 )
	{
		auto retval = (bool)VEHICLE::ARE_PLANE_CONTROL_PANELS_INTACT(vehicle, p1);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_CEILING_HEIGHT( Vehicle vehicle, float height )
	{
		VEHICLE::SET_VEHICLE_CEILING_HEIGHT(vehicle, height);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_NO_EXPLOSION_DAMAGE_FROM_DRIVER( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_VEHICLE_NO_EXPLOSION_DAMAGE_FROM_DRIVER(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_CLEAR_VEHICLE_ROUTE_HISTORY( Vehicle vehicle )
	{
		VEHICLE::CLEAR_VEHICLE_ROUTE_HISTORY(vehicle);
	}

	Vehicle LUA_NATIVE_VEHICLE_DOES_VEHICLE_EXIST_WITH_DECORATOR( const char* decorator )
	{
		auto retval = VEHICLE::DOES_VEHICLE_EXIST_WITH_DECORATOR(decorator);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_AI_CAN_USE_EXCLUSIVE_SEATS( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_VEHICLE_AI_CAN_USE_EXCLUSIVE_SEATS(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_EXCLUSIVE_DRIVER( Vehicle vehicle, Ped ped, int index )
	{
		VEHICLE::SET_VEHICLE_EXCLUSIVE_DRIVER(vehicle, ped, index);
	}

	std::tuple<bool, int> LUA_NATIVE_VEHICLE_IS_PED_EXCLUSIVE_DRIVER_OF_VEHICLE( Ped ped, Vehicle vehicle, int outIndex )
	{
		std::tuple<bool, int> return_values;
		std::get<0>(return_values) = (bool)VEHICLE::IS_PED_EXCLUSIVE_DRIVER_OF_VEHICLE(ped, vehicle, &outIndex);
		std::get<1>(return_values) = outIndex;

		return return_values;
	}

	void LUA_NATIVE_VEHICLE_DISABLE_INDIVIDUAL_PLANE_PROPELLER( Vehicle vehicle, int propeller )
	{
		VEHICLE::DISABLE_INDIVIDUAL_PLANE_PROPELLER(vehicle, propeller);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_FORCE_AFTERBURNER( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_VEHICLE_FORCE_AFTERBURNER(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_DONT_PROCESS_VEHICLE_GLASS( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_DONT_PROCESS_VEHICLE_GLASS(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_DISABLE_WANTED_CONES_RESPONSE( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_DISABLE_WANTED_CONES_RESPONSE(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_USE_DESIRED_Z_CRUISE_SPEED_FOR_LANDING( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_USE_DESIRED_Z_CRUISE_SPEED_FOR_LANDING(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_ARRIVE_DISTANCE_OVERRIDE_FOR_VEHICLE_PERSUIT_ATTACK( Vehicle vehicle, float p1 )
	{
		VEHICLE::SET_ARRIVE_DISTANCE_OVERRIDE_FOR_VEHICLE_PERSUIT_ATTACK(vehicle, p1);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_READY_FOR_CLEANUP( Any p0 )
	{
		VEHICLE::SET_VEHICLE_READY_FOR_CLEANUP(p0);
	}

	void LUA_NATIVE_VEHICLE_SET_DISTANT_CARS_ENABLED( bool toggle )
	{
		VEHICLE::SET_DISTANT_CARS_ENABLED(toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_NEON_COLOUR( Vehicle vehicle, int r, int g, int b )
	{
		VEHICLE::SET_VEHICLE_NEON_COLOUR(vehicle, r, g, b);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_NEON_INDEX_COLOUR( Vehicle vehicle, int index )
	{
		VEHICLE::SET_VEHICLE_NEON_INDEX_COLOUR(vehicle, index);
	}

	std::tuple<int, int, int> LUA_NATIVE_VEHICLE_GET_VEHICLE_NEON_COLOUR( Vehicle vehicle, int r, int g, int b )
	{
		std::tuple<int, int, int> return_values;
		VEHICLE::GET_VEHICLE_NEON_COLOUR(vehicle, &r, &g, &b);
		std::get<0>(return_values) = r;
		std::get<1>(return_values) = g;
		std::get<2>(return_values) = b;

		return return_values;
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_NEON_ENABLED( Vehicle vehicle, int index, bool toggle )
	{
		VEHICLE::SET_VEHICLE_NEON_ENABLED(vehicle, index, toggle);
	}

	bool LUA_NATIVE_VEHICLE_GET_VEHICLE_NEON_ENABLED( Vehicle vehicle, int index )
	{
		auto retval = (bool)VEHICLE::GET_VEHICLE_NEON_ENABLED(vehicle, index);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_AMBIENT_VEHICLE_NEON_ENABLED( bool p0 )
	{
		VEHICLE::SET_AMBIENT_VEHICLE_NEON_ENABLED(p0);
	}

	void LUA_NATIVE_VEHICLE_SUPPRESS_NEONS_ON_VEHICLE( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SUPPRESS_NEONS_ON_VEHICLE(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_DISABLE_SUPERDUMMY( Vehicle vehicle, bool p1 )
	{
		VEHICLE::SET_DISABLE_SUPERDUMMY(vehicle, p1);
	}

	void LUA_NATIVE_VEHICLE_REQUEST_VEHICLE_DIAL( Vehicle vehicle )
	{
		VEHICLE::REQUEST_VEHICLE_DIAL(vehicle);
	}

	float LUA_NATIVE_VEHICLE_GET_VEHICLE_BODY_HEALTH( Vehicle vehicle )
	{
		auto retval = VEHICLE::GET_VEHICLE_BODY_HEALTH(vehicle);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_BODY_HEALTH( Vehicle vehicle, float value )
	{
		VEHICLE::SET_VEHICLE_BODY_HEALTH(vehicle, value);
	}

	std::tuple<Vector3, Vector3> LUA_NATIVE_VEHICLE_GET_VEHICLE_SIZE( Vehicle vehicle, Vector3 out1, Vector3 out2 )
	{
		std::tuple<Vector3, Vector3> return_values;
		VEHICLE::GET_VEHICLE_SIZE(vehicle, &out1, &out2);
		std::get<0>(return_values) = out1;
		std::get<1>(return_values) = out2;

		return return_values;
	}

	float LUA_NATIVE_VEHICLE_GET_FAKE_SUSPENSION_LOWERING_AMOUNT( Vehicle vehicle )
	{
		auto retval = VEHICLE::GET_FAKE_SUSPENSION_LOWERING_AMOUNT(vehicle);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_CAR_HIGH_SPEED_BUMP_SEVERITY_MULTIPLIER( float multiplier )
	{
		VEHICLE::SET_CAR_HIGH_SPEED_BUMP_SEVERITY_MULTIPLIER(multiplier);
	}

	int LUA_NATIVE_VEHICLE_GET_NUMBER_OF_VEHICLE_DOORS( Vehicle vehicle )
	{
		auto retval = VEHICLE::GET_NUMBER_OF_VEHICLE_DOORS(vehicle);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_HYDRAULICS_CONTROL( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_HYDRAULICS_CONTROL(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_CAN_ADJUST_GROUND_CLEARANCE( Vehicle vehicle, bool p1 )
	{
		VEHICLE::SET_CAN_ADJUST_GROUND_CLEARANCE(vehicle, p1);
	}

	float LUA_NATIVE_VEHICLE_GET_VEHICLE_HEALTH_PERCENTAGE( Vehicle vehicle, float maxEngineHealth, float maxPetrolTankHealth, float maxBodyHealth, float maxMainRotorHealth, float maxTailRotorHealth, float maxUnkHealth )
	{
		auto retval = VEHICLE::GET_VEHICLE_HEALTH_PERCENTAGE(vehicle, maxEngineHealth, maxPetrolTankHealth, maxBodyHealth, maxMainRotorHealth, maxTailRotorHealth, maxUnkHealth);
		return retval;
	}

	bool LUA_NATIVE_VEHICLE_GET_VEHICLE_IS_MERCENARY( Vehicle vehicle )
	{
		auto retval = (bool)VEHICLE::GET_VEHICLE_IS_MERCENARY(vehicle);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_BROKEN_PARTS_DONT_AFFECT_AI_HANDLING( Vehicle vehicle, bool p1 )
	{
		VEHICLE::SET_VEHICLE_BROKEN_PARTS_DONT_AFFECT_AI_HANDLING(vehicle, p1);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_KERS_ALLOWED( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_VEHICLE_KERS_ALLOWED(vehicle, toggle);
	}

	bool LUA_NATIVE_VEHICLE_GET_VEHICLE_HAS_KERS( Vehicle vehicle )
	{
		auto retval = (bool)VEHICLE::GET_VEHICLE_HAS_KERS(vehicle);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_PLANE_RESIST_TO_EXPLOSION( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_PLANE_RESIST_TO_EXPLOSION(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_HELI_RESIST_TO_EXPLOSION( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_HELI_RESIST_TO_EXPLOSION(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_DISABLE_BMX_EXTRA_TRICK_FORCES( Any p0 )
	{
		VEHICLE::SET_DISABLE_BMX_EXTRA_TRICK_FORCES(p0);
	}

	void LUA_NATIVE_VEHICLE_SET_HYDRAULIC_SUSPENSION_RAISE_FACTOR( Vehicle vehicle, int wheelId, float value )
	{
		VEHICLE::SET_HYDRAULIC_SUSPENSION_RAISE_FACTOR(vehicle, wheelId, value);
	}

	float LUA_NATIVE_VEHICLE_GET_HYDRAULIC_SUSPENSION_RAISE_FACTOR( Vehicle vehicle, int wheelId )
	{
		auto retval = VEHICLE::GET_HYDRAULIC_SUSPENSION_RAISE_FACTOR(vehicle, wheelId);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_CAN_USE_HYDRAULICS( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_CAN_USE_HYDRAULICS(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_HYDRAULIC_VEHICLE_STATE( Vehicle vehicle, int state )
	{
		VEHICLE::SET_HYDRAULIC_VEHICLE_STATE(vehicle, state);
	}

	void LUA_NATIVE_VEHICLE_SET_HYDRAULIC_WHEEL_STATE( Vehicle vehicle, int wheelId, int state, float value, Any p4 )
	{
		VEHICLE::SET_HYDRAULIC_WHEEL_STATE(vehicle, wheelId, state, value, p4);
	}

	bool LUA_NATIVE_VEHICLE_HAS_VEHICLE_PETROLTANK_SET_ON_FIRE_BY_ENTITY( Any p0, Any p1 )
	{
		auto retval = (bool)VEHICLE::HAS_VEHICLE_PETROLTANK_SET_ON_FIRE_BY_ENTITY(p0, p1);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_CLEAR_VEHICLE_PETROLTANK_FIRE_CULPRIT( Vehicle vehicle )
	{
		VEHICLE::CLEAR_VEHICLE_PETROLTANK_FIRE_CULPRIT(vehicle);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_BOBBLEHEAD_VELOCITY( float x, float y, float p2 )
	{
		VEHICLE::SET_VEHICLE_BOBBLEHEAD_VELOCITY(x, y, p2);
	}

	bool LUA_NATIVE_VEHICLE_GET_VEHICLE_IS_DUMMY( Any p0 )
	{
		auto retval = (bool)VEHICLE::GET_VEHICLE_IS_DUMMY(p0);
		return retval;
	}

	bool LUA_NATIVE_VEHICLE_SET_VEHICLE_DAMAGE_SCALE( Vehicle vehicle, float p1 )
	{
		auto retval = (bool)VEHICLE::SET_VEHICLE_DAMAGE_SCALE(vehicle, p1);
		return retval;
	}

	bool LUA_NATIVE_VEHICLE_SET_VEHICLE_WEAPON_DAMAGE_SCALE( Vehicle vehicle, float multiplier )
	{
		auto retval = (bool)VEHICLE::SET_VEHICLE_WEAPON_DAMAGE_SCALE(vehicle, multiplier);
		return retval;
	}

	bool LUA_NATIVE_VEHICLE_SET_DISABLE_DAMAGE_WITH_PICKED_UP_ENTITY( Any p0, Any p1 )
	{
		auto retval = (bool)VEHICLE::SET_DISABLE_DAMAGE_WITH_PICKED_UP_ENTITY(p0, p1);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_USES_MP_PLAYER_DAMAGE_MULTIPLIER( Any p0, Any p1 )
	{
		VEHICLE::SET_VEHICLE_USES_MP_PLAYER_DAMAGE_MULTIPLIER(p0, p1);
	}

	void LUA_NATIVE_VEHICLE_SET_BIKE_EASY_TO_LAND( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_BIKE_EASY_TO_LAND(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_INVERT_VEHICLE_CONTROLS( Vehicle vehicle, bool state )
	{
		VEHICLE::SET_INVERT_VEHICLE_CONTROLS(vehicle, state);
	}

	void LUA_NATIVE_VEHICLE_SET_SPEED_BOOST_EFFECT_DISABLED( bool disabled )
	{
		VEHICLE::SET_SPEED_BOOST_EFFECT_DISABLED(disabled);
	}

	void LUA_NATIVE_VEHICLE_SET_SLOW_DOWN_EFFECT_DISABLED( bool disabled )
	{
		VEHICLE::SET_SLOW_DOWN_EFFECT_DISABLED(disabled);
	}

	void LUA_NATIVE_VEHICLE_SET_FORMATION_LEADER( Vehicle vehicle, float x, float y, float z, float p4 )
	{
		VEHICLE::SET_FORMATION_LEADER(vehicle, x, y, z, p4);
	}

	void LUA_NATIVE_VEHICLE_RESET_FORMATION_LEADER(  )
	{
		VEHICLE::RESET_FORMATION_LEADER();
	}

	bool LUA_NATIVE_VEHICLE_GET_IS_BOAT_CAPSIZED( Vehicle vehicle )
	{
		auto retval = (bool)VEHICLE::GET_IS_BOAT_CAPSIZED(vehicle);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_ALLOW_RAMMING_SOOP_OR_RAMP( Any p0, Any p1 )
	{
		VEHICLE::SET_ALLOW_RAMMING_SOOP_OR_RAMP(p0, p1);
	}

	void LUA_NATIVE_VEHICLE_SET_SCRIPT_RAMP_IMPULSE_SCALE( Vehicle vehicle, float impulseScale )
	{
		VEHICLE::SET_SCRIPT_RAMP_IMPULSE_SCALE(vehicle, impulseScale);
	}

	bool LUA_NATIVE_VEHICLE_GET_IS_DOOR_VALID( Vehicle vehicle, int doorId )
	{
		auto retval = (bool)VEHICLE::GET_IS_DOOR_VALID(vehicle, doorId);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_SCRIPT_ROCKET_BOOST_RECHARGE_TIME( Vehicle vehicle, float seconds )
	{
		VEHICLE::SET_SCRIPT_ROCKET_BOOST_RECHARGE_TIME(vehicle, seconds);
	}

	bool LUA_NATIVE_VEHICLE_GET_HAS_ROCKET_BOOST( Vehicle vehicle )
	{
		auto retval = (bool)VEHICLE::GET_HAS_ROCKET_BOOST(vehicle);
		return retval;
	}

	bool LUA_NATIVE_VEHICLE_IS_ROCKET_BOOST_ACTIVE( Vehicle vehicle )
	{
		auto retval = (bool)VEHICLE::IS_ROCKET_BOOST_ACTIVE(vehicle);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_ROCKET_BOOST_ACTIVE( Vehicle vehicle, bool active )
	{
		VEHICLE::SET_ROCKET_BOOST_ACTIVE(vehicle, active);
	}

	bool LUA_NATIVE_VEHICLE_GET_HAS_RETRACTABLE_WHEELS( Vehicle vehicle )
	{
		auto retval = (bool)VEHICLE::GET_HAS_RETRACTABLE_WHEELS(vehicle);
		return retval;
	}

	bool LUA_NATIVE_VEHICLE_GET_IS_WHEELS_RETRACTED( Vehicle vehicle )
	{
		auto retval = (bool)VEHICLE::GET_IS_WHEELS_RETRACTED(vehicle);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_WHEELS_EXTENDED_INSTANTLY( Vehicle vehicle )
	{
		VEHICLE::SET_WHEELS_EXTENDED_INSTANTLY(vehicle);
	}

	void LUA_NATIVE_VEHICLE_SET_WHEELS_RETRACTED_INSTANTLY( Vehicle vehicle )
	{
		VEHICLE::SET_WHEELS_RETRACTED_INSTANTLY(vehicle);
	}

	bool LUA_NATIVE_VEHICLE_GET_CAR_HAS_JUMP( Vehicle vehicle )
	{
		auto retval = (bool)VEHICLE::GET_CAR_HAS_JUMP(vehicle);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_USE_HIGHER_CAR_JUMP( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_USE_HIGHER_CAR_JUMP(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_CLEAR_FREEZE_WAITING_ON_COLLISION_ONCE_PLAYER_ENTERS( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_CLEAR_FREEZE_WAITING_ON_COLLISION_ONCE_PLAYER_ENTERS(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_WEAPON_RESTRICTED_AMMO( Vehicle vehicle, int weaponIndex, int capacity )
	{
		VEHICLE::SET_VEHICLE_WEAPON_RESTRICTED_AMMO(vehicle, weaponIndex, capacity);
	}

	int LUA_NATIVE_VEHICLE_GET_VEHICLE_WEAPON_RESTRICTED_AMMO( Vehicle vehicle, int weaponIndex )
	{
		auto retval = VEHICLE::GET_VEHICLE_WEAPON_RESTRICTED_AMMO(vehicle, weaponIndex);
		return retval;
	}

	bool LUA_NATIVE_VEHICLE_GET_VEHICLE_HAS_PARACHUTE( Vehicle vehicle )
	{
		auto retval = (bool)VEHICLE::GET_VEHICLE_HAS_PARACHUTE(vehicle);
		return retval;
	}

	bool LUA_NATIVE_VEHICLE_GET_VEHICLE_CAN_DEPLOY_PARACHUTE( Vehicle vehicle )
	{
		auto retval = (bool)VEHICLE::GET_VEHICLE_CAN_DEPLOY_PARACHUTE(vehicle);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_VEHICLE_START_PARACHUTING( Vehicle vehicle, bool active )
	{
		VEHICLE::VEHICLE_START_PARACHUTING(vehicle, active);
	}

	bool LUA_NATIVE_VEHICLE_IS_VEHICLE_PARACHUTE_DEPLOYED( Vehicle vehicle )
	{
		auto retval = (bool)VEHICLE::IS_VEHICLE_PARACHUTE_DEPLOYED(vehicle);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_VEHICLE_SET_RAMP_AND_RAMMING_CARS_TAKE_DAMAGE( Vehicle vehicle, bool toggle )
	{
		VEHICLE::VEHICLE_SET_RAMP_AND_RAMMING_CARS_TAKE_DAMAGE(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_VEHICLE_SET_ENABLE_RAMP_CAR_SIDE_IMPULSE( Any p0, Any p1 )
	{
		VEHICLE::VEHICLE_SET_ENABLE_RAMP_CAR_SIDE_IMPULSE(p0, p1);
	}

	void LUA_NATIVE_VEHICLE_VEHICLE_SET_ENABLE_NORMALISE_RAMP_CAR_VERTICAL_VELOCTIY( Any p0, Any p1 )
	{
		VEHICLE::VEHICLE_SET_ENABLE_NORMALISE_RAMP_CAR_VERTICAL_VELOCTIY(p0, p1);
	}

	void LUA_NATIVE_VEHICLE_VEHICLE_SET_JET_WASH_FORCE_ENABLED( Any p0 )
	{
		VEHICLE::VEHICLE_SET_JET_WASH_FORCE_ENABLED(p0);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_WEAPON_CAN_TARGET_OBJECTS( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_VEHICLE_WEAPON_CAN_TARGET_OBJECTS(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_USE_BOOST_BUTTON_FOR_WHEEL_RETRACT( bool toggle )
	{
		VEHICLE::SET_VEHICLE_USE_BOOST_BUTTON_FOR_WHEEL_RETRACT(toggle);
	}

	void LUA_NATIVE_VEHICLE_VEHICLE_SET_PARACHUTE_MODEL_OVERRIDE( Vehicle vehicle, Hash modelHash )
	{
		VEHICLE::VEHICLE_SET_PARACHUTE_MODEL_OVERRIDE(vehicle, modelHash);
	}

	void LUA_NATIVE_VEHICLE_VEHICLE_SET_PARACHUTE_MODEL_TINT_INDEX( Vehicle vehicle, int textureVariation )
	{
		VEHICLE::VEHICLE_SET_PARACHUTE_MODEL_TINT_INDEX(vehicle, textureVariation);
	}

	int LUA_NATIVE_VEHICLE_VEHICLE_SET_OVERRIDE_EXTENABLE_SIDE_RATIO( Any p0, Any p1 )
	{
		auto retval = VEHICLE::VEHICLE_SET_OVERRIDE_EXTENABLE_SIDE_RATIO(p0, p1);
		return retval;
	}

	int LUA_NATIVE_VEHICLE_VEHICLE_SET_EXTENABLE_SIDE_TARGET_RATIO( Any p0, Any p1 )
	{
		auto retval = VEHICLE::VEHICLE_SET_EXTENABLE_SIDE_TARGET_RATIO(p0, p1);
		return retval;
	}

	int LUA_NATIVE_VEHICLE_VEHICLE_SET_OVERRIDE_SIDE_RATIO( Any p0, Any p1 )
	{
		auto retval = VEHICLE::VEHICLE_SET_OVERRIDE_SIDE_RATIO(p0, p1);
		return retval;
	}

	std::tuple<int, Any> LUA_NATIVE_VEHICLE_GET_ALL_VEHICLES( Any vehsStruct )
	{
		std::tuple<int, Any> return_values;
		std::get<0>(return_values) = VEHICLE::GET_ALL_VEHICLES(&vehsStruct);
		std::get<1>(return_values) = vehsStruct;

		return return_values;
	}

	void LUA_NATIVE_VEHICLE_SET_CARGOBOB_EXTA_PICKUP_RANGE( Any p0, Any p1 )
	{
		VEHICLE::SET_CARGOBOB_EXTA_PICKUP_RANGE(p0, p1);
	}

	void LUA_NATIVE_VEHICLE_SET_OVERRIDE_VEHICLE_DOOR_TORQUE( Any p0, Any p1, Any p2 )
	{
		VEHICLE::SET_OVERRIDE_VEHICLE_DOOR_TORQUE(p0, p1, p2);
	}

	void LUA_NATIVE_VEHICLE_SET_WHEELIE_ENABLED( Vehicle vehicle, bool enabled )
	{
		VEHICLE::SET_WHEELIE_ENABLED(vehicle, enabled);
	}

	void LUA_NATIVE_VEHICLE_SET_DISABLE_HELI_EXPLODE_FROM_BODY_DAMAGE( Any p0, Any p1 )
	{
		VEHICLE::SET_DISABLE_HELI_EXPLODE_FROM_BODY_DAMAGE(p0, p1);
	}

	void LUA_NATIVE_VEHICLE_SET_DISABLE_EXPLODE_FROM_BODY_DAMAGE_ON_COLLISION( Vehicle vehicle, float value )
	{
		VEHICLE::SET_DISABLE_EXPLODE_FROM_BODY_DAMAGE_ON_COLLISION(vehicle, value);
	}

	void LUA_NATIVE_VEHICLE_SET_TRAILER_ATTACHMENT_ENABLED( Any p0, Any p1 )
	{
		VEHICLE::SET_TRAILER_ATTACHMENT_ENABLED(p0, p1);
	}

	void LUA_NATIVE_VEHICLE_SET_ROCKET_BOOST_FILL( Vehicle vehicle, float percentage )
	{
		VEHICLE::SET_ROCKET_BOOST_FILL(vehicle, percentage);
	}

	void LUA_NATIVE_VEHICLE_SET_GLIDER_ACTIVE( Vehicle vehicle, bool state )
	{
		VEHICLE::SET_GLIDER_ACTIVE(vehicle, state);
	}

	void LUA_NATIVE_VEHICLE_SET_SHOULD_RESET_TURRET_IN_SCRIPTED_CAMERAS( Vehicle vehicle, bool shouldReset )
	{
		VEHICLE::SET_SHOULD_RESET_TURRET_IN_SCRIPTED_CAMERAS(vehicle, shouldReset);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_DISABLE_COLLISION_UPON_CREATION( Vehicle vehicle, bool disable )
	{
		VEHICLE::SET_VEHICLE_DISABLE_COLLISION_UPON_CREATION(vehicle, disable);
	}

	void LUA_NATIVE_VEHICLE_SET_GROUND_EFFECT_REDUCES_DRAG( bool toggle )
	{
		VEHICLE::SET_GROUND_EFFECT_REDUCES_DRAG(toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_DISABLE_MAP_COLLISION( Vehicle vehicle )
	{
		VEHICLE::SET_DISABLE_MAP_COLLISION(vehicle);
	}

	void LUA_NATIVE_VEHICLE_SET_DISABLE_PED_STAND_ON_TOP( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_DISABLE_PED_STAND_ON_TOP(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_DAMAGE_SCALES( Vehicle vehicle, Any p1, Any p2, Any p3, Any p4 )
	{
		VEHICLE::SET_VEHICLE_DAMAGE_SCALES(vehicle, p1, p2, p3, p4);
	}

	void LUA_NATIVE_VEHICLE_SET_PLANE_SECTION_DAMAGE_SCALE( Vehicle vehicle, Any p1, Any p2 )
	{
		VEHICLE::SET_PLANE_SECTION_DAMAGE_SCALE(vehicle, p1, p2);
	}

	void LUA_NATIVE_VEHICLE_SET_HELI_CAN_PICKUP_ENTITY_THAT_HAS_PICK_UP_DISABLED( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_HELI_CAN_PICKUP_ENTITY_THAT_HAS_PICK_UP_DISABLED(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_BOMB_AMMO( Vehicle vehicle, int bombCount )
	{
		VEHICLE::SET_VEHICLE_BOMB_AMMO(vehicle, bombCount);
	}

	int LUA_NATIVE_VEHICLE_GET_VEHICLE_BOMB_AMMO( Vehicle vehicle )
	{
		auto retval = VEHICLE::GET_VEHICLE_BOMB_AMMO(vehicle);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_COUNTERMEASURE_AMMO( Vehicle vehicle, int counterMeasureCount )
	{
		VEHICLE::SET_VEHICLE_COUNTERMEASURE_AMMO(vehicle, counterMeasureCount);
	}

	int LUA_NATIVE_VEHICLE_GET_VEHICLE_COUNTERMEASURE_AMMO( Vehicle vehicle )
	{
		auto retval = VEHICLE::GET_VEHICLE_COUNTERMEASURE_AMMO(vehicle);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_HELI_COMBAT_OFFSET( Vehicle vehicle, float x, float y, float z )
	{
		VEHICLE::SET_HELI_COMBAT_OFFSET(vehicle, x, y, z);
	}

	bool LUA_NATIVE_VEHICLE_GET_CAN_VEHICLE_BE_PLACED_HERE( Vehicle vehicle, float x, float y, float z, float rotX, float rotY, float rotZ, int p7, Any p8 )
	{
		auto retval = (bool)VEHICLE::GET_CAN_VEHICLE_BE_PLACED_HERE(vehicle, x, y, z, rotX, rotY, rotZ, p7, p8);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_DISABLE_AUTOMATIC_CRASH_TASK( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_DISABLE_AUTOMATIC_CRASH_TASK(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_SPECIAL_FLIGHT_MODE_RATIO( Vehicle vehicle, float ratio )
	{
		VEHICLE::SET_SPECIAL_FLIGHT_MODE_RATIO(vehicle, ratio);
	}

	void LUA_NATIVE_VEHICLE_SET_SPECIAL_FLIGHT_MODE_TARGET_RATIO( Vehicle vehicle, float targetRatio )
	{
		VEHICLE::SET_SPECIAL_FLIGHT_MODE_TARGET_RATIO(vehicle, targetRatio);
	}

	void LUA_NATIVE_VEHICLE_SET_SPECIAL_FLIGHT_MODE_ALLOWED( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_SPECIAL_FLIGHT_MODE_ALLOWED(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_DISABLE_HOVER_MODE_FLIGHT( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_DISABLE_HOVER_MODE_FLIGHT(vehicle, toggle);
	}

	bool LUA_NATIVE_VEHICLE_GET_OUTRIGGERS_DEPLOYED( Vehicle vehicle )
	{
		auto retval = (bool)VEHICLE::GET_OUTRIGGERS_DEPLOYED(vehicle);
		return retval;
	}

	Vector3 LUA_NATIVE_VEHICLE_FIND_SPAWN_COORDINATES_FOR_HELI( Ped ped )
	{
		auto retval = VEHICLE::FIND_SPAWN_COORDINATES_FOR_HELI(ped);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_DEPLOY_FOLDING_WINGS( Vehicle vehicle, bool deploy, bool p2 )
	{
		VEHICLE::SET_DEPLOY_FOLDING_WINGS(vehicle, deploy, p2);
	}

	bool LUA_NATIVE_VEHICLE_ARE_FOLDING_WINGS_DEPLOYED( Vehicle vehicle )
	{
		auto retval = (bool)VEHICLE::ARE_FOLDING_WINGS_DEPLOYED(vehicle);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_DEPLOY_MISSILE_BAYS_( Vehicle vehicle, bool deploy )
	{
		VEHICLE::SET_DEPLOY_MISSILE_BAYS_(vehicle, deploy);
	}

	bool LUA_NATIVE_VEHICLE_ARE_MISSILE_BAYS_DEPLOYED_( Vehicle vehicle )
	{
		auto retval = (bool)VEHICLE::ARE_MISSILE_BAYS_DEPLOYED_(vehicle);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_DIP_STRAIGHT_DOWN_WHEN_CRASHING_PLANE( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_DIP_STRAIGHT_DOWN_WHEN_CRASHING_PLANE(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_TURRET_HIDDEN( Vehicle vehicle, int index, bool toggle )
	{
		VEHICLE::SET_TURRET_HIDDEN(vehicle, index, toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_HOVER_MODE_WING_RATIO( Vehicle vehicle, float ratio )
	{
		VEHICLE::SET_HOVER_MODE_WING_RATIO(vehicle, ratio);
	}

	void LUA_NATIVE_VEHICLE_SET_DISABLE_TURRET_MOVEMENT( Vehicle vehicle, int turretId )
	{
		VEHICLE::SET_DISABLE_TURRET_MOVEMENT(vehicle, turretId);
	}

	void LUA_NATIVE_VEHICLE_SET_FORCE_FIX_LINK_MATRICES( Vehicle vehicle )
	{
		VEHICLE::SET_FORCE_FIX_LINK_MATRICES(vehicle);
	}

	void LUA_NATIVE_VEHICLE_SET_TRANSFORM_RATE_FOR_ANIMATION( Vehicle vehicle, float transformRate )
	{
		VEHICLE::SET_TRANSFORM_RATE_FOR_ANIMATION(vehicle, transformRate);
	}

	void LUA_NATIVE_VEHICLE_SET_TRANSFORM_TO_SUBMARINE_USES_ALTERNATE_INPUT( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_TRANSFORM_TO_SUBMARINE_USES_ALTERNATE_INPUT(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_COMBAT_MODE( bool toggle )
	{
		VEHICLE::SET_VEHICLE_COMBAT_MODE(toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_DETONATION_MODE( bool toggle )
	{
		VEHICLE::SET_VEHICLE_DETONATION_MODE(toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_VEHICLE_SHUNT_ON_STICK( bool toggle )
	{
		VEHICLE::SET_VEHICLE_SHUNT_ON_STICK(toggle);
	}

	bool LUA_NATIVE_VEHICLE_GET_IS_VEHICLE_SHUNTING( Vehicle vehicle )
	{
		auto retval = (bool)VEHICLE::GET_IS_VEHICLE_SHUNTING(vehicle);
		return retval;
	}

	bool LUA_NATIVE_VEHICLE_GET_HAS_VEHICLE_BEEN_HIT_BY_SHUNT( Vehicle vehicle )
	{
		auto retval = (bool)VEHICLE::GET_HAS_VEHICLE_BEEN_HIT_BY_SHUNT(vehicle);
		return retval;
	}

	Vehicle LUA_NATIVE_VEHICLE_GET_LAST_SHUNT_VEHICLE( Vehicle vehicle )
	{
		auto retval = VEHICLE::GET_LAST_SHUNT_VEHICLE(vehicle);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_DISABLE_VEHICLE_EXPLOSIONS_DAMAGE( bool toggle )
	{
		VEHICLE::SET_DISABLE_VEHICLE_EXPLOSIONS_DAMAGE(toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_OVERRIDE_NITROUS_LEVEL( Vehicle vehicle, bool toggle, float level, float power, float rechargeTime, bool disableSound )
	{
		VEHICLE::SET_OVERRIDE_NITROUS_LEVEL(vehicle, toggle, level, power, rechargeTime, disableSound);
	}

	void LUA_NATIVE_VEHICLE_SET_INCREASE_WHEEL_CRUSH_DAMAGE( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_INCREASE_WHEEL_CRUSH_DAMAGE(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_DISABLE_WEAPON_BLADE_FORCES( bool toggle )
	{
		VEHICLE::SET_DISABLE_WEAPON_BLADE_FORCES(toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_USE_DOUBLE_CLICK_FOR_CAR_JUMP( bool toggle )
	{
		VEHICLE::SET_USE_DOUBLE_CLICK_FOR_CAR_JUMP(toggle);
	}

	bool LUA_NATIVE_VEHICLE_GET_DOES_VEHICLE_HAVE_TOMBSTONE( Vehicle vehicle )
	{
		auto retval = (bool)VEHICLE::GET_DOES_VEHICLE_HAVE_TOMBSTONE(vehicle);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_HIDE_TOMBSTONE( Vehicle vehicle, bool toggle )
	{
		VEHICLE::HIDE_TOMBSTONE(vehicle, toggle);
	}

	bool LUA_NATIVE_VEHICLE_GET_IS_VEHICLE_DISABLED_BY_EMP( Vehicle vehicle )
	{
		auto retval = (bool)VEHICLE::GET_IS_VEHICLE_DISABLED_BY_EMP(vehicle);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_DISABLE_RETRACTING_WEAPON_BLADES( bool toggle )
	{
		VEHICLE::SET_DISABLE_RETRACTING_WEAPON_BLADES(toggle);
	}

	float LUA_NATIVE_VEHICLE_GET_TYRE_HEALTH( Vehicle vehicle, int wheelIndex )
	{
		auto retval = VEHICLE::GET_TYRE_HEALTH(vehicle, wheelIndex);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_TYRE_HEALTH( Vehicle vehicle, int wheelIndex, float health )
	{
		VEHICLE::SET_TYRE_HEALTH(vehicle, wheelIndex, health);
	}

	float LUA_NATIVE_VEHICLE_GET_TYRE_WEAR_RATE( Vehicle vehicle, int wheelIndex )
	{
		auto retval = VEHICLE::GET_TYRE_WEAR_RATE(vehicle, wheelIndex);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_SET_TYRE_WEAR_RATE( Vehicle vehicle, int wheelIndex, float multiplier )
	{
		VEHICLE::SET_TYRE_WEAR_RATE(vehicle, wheelIndex, multiplier);
	}

	void LUA_NATIVE_VEHICLE_SET_TYRE_WEAR_RATE_SCALE( Vehicle vehicle, int wheelIndex, float multiplier )
	{
		VEHICLE::SET_TYRE_WEAR_RATE_SCALE(vehicle, wheelIndex, multiplier);
	}

	void LUA_NATIVE_VEHICLE_SET_TYRE_MAXIMUM_GRIP_DIFFERENCE_DUE_TO_WEAR_RATE( Vehicle vehicle, int wheelIndex, float multiplier )
	{
		VEHICLE::SET_TYRE_MAXIMUM_GRIP_DIFFERENCE_DUE_TO_WEAR_RATE(vehicle, wheelIndex, multiplier);
	}

	void LUA_NATIVE_VEHICLE_SET_AIRCRAFT_IGNORE_HIGHTMAP_OPTIMISATION( Vehicle vehicle, int p1 )
	{
		VEHICLE::SET_AIRCRAFT_IGNORE_HIGHTMAP_OPTIMISATION(vehicle, p1);
	}

	void LUA_NATIVE_VEHICLE_SET_REDUCED_SUSPENSION_FORCE( Vehicle vehicle, bool enable )
	{
		VEHICLE::SET_REDUCED_SUSPENSION_FORCE(vehicle, enable);
	}

	void LUA_NATIVE_VEHICLE_SET_DRIFT_TYRES( Vehicle vehicle, bool toggle )
	{
		VEHICLE::SET_DRIFT_TYRES(vehicle, toggle);
	}

	bool LUA_NATIVE_VEHICLE_GET_DRIFT_TYRES_SET( Vehicle vehicle )
	{
		auto retval = (bool)VEHICLE::GET_DRIFT_TYRES_SET(vehicle);
		return retval;
	}

	void LUA_NATIVE_VEHICLE_NETWORK_USE_HIGH_PRECISION_TRAIN_BLENDING( Vehicle vehicle, bool toggle )
	{
		VEHICLE::NETWORK_USE_HIGH_PRECISION_TRAIN_BLENDING(vehicle, toggle);
	}

	void LUA_NATIVE_VEHICLE_SET_CHECK_FOR_ENOUGH_ROOM_FOR_PED( Vehicle vehicle, bool p1 )
	{
		VEHICLE::SET_CHECK_FOR_ENOUGH_ROOM_FOR_PED(vehicle, p1);
	}

	std::tuple<bool, float> LUA_NATIVE_WATER_GET_WATER_HEIGHT( float x, float y, float z, float height )
	{
		std::tuple<bool, float> return_values;
		std::get<0>(return_values) = (bool)WATER::GET_WATER_HEIGHT(x, y, z, &height);
		std::get<1>(return_values) = height;

		return return_values;
	}

	std::tuple<bool, float> LUA_NATIVE_WATER_GET_WATER_HEIGHT_NO_WAVES( float x, float y, float z, float height )
	{
		std::tuple<bool, float> return_values;
		std::get<0>(return_values) = (bool)WATER::GET_WATER_HEIGHT_NO_WAVES(x, y, z, &height);
		std::get<1>(return_values) = height;

		return return_values;
	}

	std::tuple<bool, Vector3> LUA_NATIVE_WATER_TEST_PROBE_AGAINST_WATER( float x1, float y1, float z1, float x2, float y2, float z2, Vector3 result )
	{
		std::tuple<bool, Vector3> return_values;
		std::get<0>(return_values) = (bool)WATER::TEST_PROBE_AGAINST_WATER(x1, y1, z1, x2, y2, z2, &result);
		std::get<1>(return_values) = result;

		return return_values;
	}

	std::tuple<int, float> LUA_NATIVE_WATER_TEST_PROBE_AGAINST_ALL_WATER( float x1, float y1, float z1, float x2, float y2, float z2, int flags, float waterHeight )
	{
		std::tuple<int, float> return_values;
		std::get<0>(return_values) = WATER::TEST_PROBE_AGAINST_ALL_WATER(x1, y1, z1, x2, y2, z2, flags, &waterHeight);
		std::get<1>(return_values) = waterHeight;

		return return_values;
	}

	std::tuple<int, float> LUA_NATIVE_WATER_TEST_VERTICAL_PROBE_AGAINST_ALL_WATER( float x, float y, float z, int flags, float waterHeight )
	{
		std::tuple<int, float> return_values;
		std::get<0>(return_values) = WATER::TEST_VERTICAL_PROBE_AGAINST_ALL_WATER(x, y, z, flags, &waterHeight);
		std::get<1>(return_values) = waterHeight;

		return return_values;
	}

	void LUA_NATIVE_WATER_MODIFY_WATER( float x, float y, float radius, float height )
	{
		WATER::MODIFY_WATER(x, y, radius, height);
	}

	int LUA_NATIVE_WATER_ADD_EXTRA_CALMING_QUAD( float xLow, float yLow, float xHigh, float yHigh, float height )
	{
		auto retval = WATER::ADD_EXTRA_CALMING_QUAD(xLow, yLow, xHigh, yHigh, height);
		return retval;
	}

	void LUA_NATIVE_WATER_REMOVE_EXTRA_CALMING_QUAD( int calmingQuad )
	{
		WATER::REMOVE_EXTRA_CALMING_QUAD(calmingQuad);
	}

	void LUA_NATIVE_WATER_SET_DEEP_OCEAN_SCALER( float intensity )
	{
		WATER::SET_DEEP_OCEAN_SCALER(intensity);
	}

	float LUA_NATIVE_WATER_GET_DEEP_OCEAN_SCALER(  )
	{
		auto retval = WATER::GET_DEEP_OCEAN_SCALER();
		return retval;
	}

	void LUA_NATIVE_WATER_SET_CALMED_WAVE_HEIGHT_SCALER( float height )
	{
		WATER::SET_CALMED_WAVE_HEIGHT_SCALER(height);
	}

	void LUA_NATIVE_WATER_RESET_DEEP_OCEAN_SCALER(  )
	{
		WATER::RESET_DEEP_OCEAN_SCALER();
	}

	void LUA_NATIVE_WEAPON_ENABLE_LASER_SIGHT_RENDERING( bool toggle )
	{
		WEAPON::ENABLE_LASER_SIGHT_RENDERING(toggle);
	}

	Hash LUA_NATIVE_WEAPON_GET_WEAPON_COMPONENT_TYPE_MODEL( Hash componentHash )
	{
		auto retval = WEAPON::GET_WEAPON_COMPONENT_TYPE_MODEL(componentHash);
		return retval;
	}

	Hash LUA_NATIVE_WEAPON_GET_WEAPONTYPE_MODEL( Hash weaponHash )
	{
		auto retval = WEAPON::GET_WEAPONTYPE_MODEL(weaponHash);
		return retval;
	}

	Hash LUA_NATIVE_WEAPON_GET_WEAPONTYPE_SLOT( Hash weaponHash )
	{
		auto retval = WEAPON::GET_WEAPONTYPE_SLOT(weaponHash);
		return retval;
	}

	Hash LUA_NATIVE_WEAPON_GET_WEAPONTYPE_GROUP( Hash weaponHash )
	{
		auto retval = WEAPON::GET_WEAPONTYPE_GROUP(weaponHash);
		return retval;
	}

	int LUA_NATIVE_WEAPON_GET_WEAPON_COMPONENT_VARIANT_EXTRA_COUNT( Hash componentHash )
	{
		auto retval = WEAPON::GET_WEAPON_COMPONENT_VARIANT_EXTRA_COUNT(componentHash);
		return retval;
	}

	Hash LUA_NATIVE_WEAPON_GET_WEAPON_COMPONENT_VARIANT_EXTRA_MODEL( Hash componentHash, int extraComponentIndex )
	{
		auto retval = WEAPON::GET_WEAPON_COMPONENT_VARIANT_EXTRA_MODEL(componentHash, extraComponentIndex);
		return retval;
	}

	void LUA_NATIVE_WEAPON_SET_CURRENT_PED_WEAPON( Ped ped, Hash weaponHash, bool bForceInHand )
	{
		WEAPON::SET_CURRENT_PED_WEAPON(ped, weaponHash, bForceInHand);
	}

	std::tuple<bool, Hash> LUA_NATIVE_WEAPON_GET_CURRENT_PED_WEAPON( Ped ped, Hash weaponHash, bool p2 )
	{
		std::tuple<bool, Hash> return_values;
		std::get<0>(return_values) = (bool)WEAPON::GET_CURRENT_PED_WEAPON(ped, &weaponHash, p2);
		std::get<1>(return_values) = weaponHash;

		return return_values;
	}

	Entity LUA_NATIVE_WEAPON_GET_CURRENT_PED_WEAPON_ENTITY_INDEX( Ped ped, Any p1 )
	{
		auto retval = WEAPON::GET_CURRENT_PED_WEAPON_ENTITY_INDEX(ped, p1);
		return retval;
	}

	Hash LUA_NATIVE_WEAPON_GET_BEST_PED_WEAPON( Ped ped, bool p1 )
	{
		auto retval = WEAPON::GET_BEST_PED_WEAPON(ped, p1);
		return retval;
	}

	bool LUA_NATIVE_WEAPON_SET_CURRENT_PED_VEHICLE_WEAPON( Ped ped, Hash weaponHash )
	{
		auto retval = (bool)WEAPON::SET_CURRENT_PED_VEHICLE_WEAPON(ped, weaponHash);
		return retval;
	}

	std::tuple<bool, Hash> LUA_NATIVE_WEAPON_GET_CURRENT_PED_VEHICLE_WEAPON( Ped ped, Hash weaponHash )
	{
		std::tuple<bool, Hash> return_values;
		std::get<0>(return_values) = (bool)WEAPON::GET_CURRENT_PED_VEHICLE_WEAPON(ped, &weaponHash);
		std::get<1>(return_values) = weaponHash;

		return return_values;
	}

	void LUA_NATIVE_WEAPON_SET_PED_CYCLE_VEHICLE_WEAPONS_ONLY( Ped ped )
	{
		WEAPON::SET_PED_CYCLE_VEHICLE_WEAPONS_ONLY(ped);
	}

	bool LUA_NATIVE_WEAPON_IS_PED_ARMED( Ped ped, int typeFlags )
	{
		auto retval = (bool)WEAPON::IS_PED_ARMED(ped, typeFlags);
		return retval;
	}

	bool LUA_NATIVE_WEAPON_IS_WEAPON_VALID( Hash weaponHash )
	{
		auto retval = (bool)WEAPON::IS_WEAPON_VALID(weaponHash);
		return retval;
	}

	bool LUA_NATIVE_WEAPON_HAS_PED_GOT_WEAPON( Ped ped, Hash weaponHash, bool p2 )
	{
		auto retval = (bool)WEAPON::HAS_PED_GOT_WEAPON(ped, weaponHash, p2);
		return retval;
	}

	bool LUA_NATIVE_WEAPON_IS_PED_WEAPON_READY_TO_SHOOT( Ped ped )
	{
		auto retval = (bool)WEAPON::IS_PED_WEAPON_READY_TO_SHOOT(ped);
		return retval;
	}

	Hash LUA_NATIVE_WEAPON_GET_PED_WEAPONTYPE_IN_SLOT( Ped ped, Hash weaponSlot )
	{
		auto retval = WEAPON::GET_PED_WEAPONTYPE_IN_SLOT(ped, weaponSlot);
		return retval;
	}

	int LUA_NATIVE_WEAPON_GET_AMMO_IN_PED_WEAPON( Ped ped, Hash weaponhash )
	{
		auto retval = WEAPON::GET_AMMO_IN_PED_WEAPON(ped, weaponhash);
		return retval;
	}

	void LUA_NATIVE_WEAPON_ADD_AMMO_TO_PED( Ped ped, Hash weaponHash, int ammo )
	{
		WEAPON::ADD_AMMO_TO_PED(ped, weaponHash, ammo);
	}

	void LUA_NATIVE_WEAPON_SET_PED_AMMO( Ped ped, Hash weaponHash, int ammo, bool p3 )
	{
		WEAPON::SET_PED_AMMO(ped, weaponHash, ammo, p3);
	}

	void LUA_NATIVE_WEAPON_SET_PED_INFINITE_AMMO( Ped ped, bool toggle, Hash weaponHash )
	{
		WEAPON::SET_PED_INFINITE_AMMO(ped, toggle, weaponHash);
	}

	void LUA_NATIVE_WEAPON_SET_PED_INFINITE_AMMO_CLIP( Ped ped, bool toggle )
	{
		WEAPON::SET_PED_INFINITE_AMMO_CLIP(ped, toggle);
	}

	void LUA_NATIVE_WEAPON_SET_PED_STUN_GUN_FINITE_AMMO( Any p0, Any p1 )
	{
		WEAPON::SET_PED_STUN_GUN_FINITE_AMMO(p0, p1);
	}

	void LUA_NATIVE_WEAPON_GIVE_WEAPON_TO_PED( Ped ped, Hash weaponHash, int ammoCount, bool isHidden, bool bForceInHand )
	{
		WEAPON::GIVE_WEAPON_TO_PED(ped, weaponHash, ammoCount, isHidden, bForceInHand);
	}

	void LUA_NATIVE_WEAPON_GIVE_DELAYED_WEAPON_TO_PED( Ped ped, Hash weaponHash, int ammoCount, bool bForceInHand )
	{
		WEAPON::GIVE_DELAYED_WEAPON_TO_PED(ped, weaponHash, ammoCount, bForceInHand);
	}

	void LUA_NATIVE_WEAPON_REMOVE_ALL_PED_WEAPONS( Ped ped, bool p1 )
	{
		WEAPON::REMOVE_ALL_PED_WEAPONS(ped, p1);
	}

	void LUA_NATIVE_WEAPON_REMOVE_WEAPON_FROM_PED( Ped ped, Hash weaponHash )
	{
		WEAPON::REMOVE_WEAPON_FROM_PED(ped, weaponHash);
	}

	void LUA_NATIVE_WEAPON_HIDE_PED_WEAPON_FOR_SCRIPTED_CUTSCENE( Ped ped, bool toggle )
	{
		WEAPON::HIDE_PED_WEAPON_FOR_SCRIPTED_CUTSCENE(ped, toggle);
	}

	void LUA_NATIVE_WEAPON_SET_PED_CURRENT_WEAPON_VISIBLE( Ped ped, bool visible, bool deselectWeapon, bool p3, bool p4 )
	{
		WEAPON::SET_PED_CURRENT_WEAPON_VISIBLE(ped, visible, deselectWeapon, p3, p4);
	}

	void LUA_NATIVE_WEAPON_SET_PED_DROPS_WEAPONS_WHEN_DEAD( Ped ped, bool toggle )
	{
		WEAPON::SET_PED_DROPS_WEAPONS_WHEN_DEAD(ped, toggle);
	}

	bool LUA_NATIVE_WEAPON_HAS_PED_BEEN_DAMAGED_BY_WEAPON( Ped ped, Hash weaponHash, int weaponType )
	{
		auto retval = (bool)WEAPON::HAS_PED_BEEN_DAMAGED_BY_WEAPON(ped, weaponHash, weaponType);
		return retval;
	}

	void LUA_NATIVE_WEAPON_CLEAR_PED_LAST_WEAPON_DAMAGE( Ped ped )
	{
		WEAPON::CLEAR_PED_LAST_WEAPON_DAMAGE(ped);
	}

	bool LUA_NATIVE_WEAPON_HAS_ENTITY_BEEN_DAMAGED_BY_WEAPON( Entity entity, Hash weaponHash, int weaponType )
	{
		auto retval = (bool)WEAPON::HAS_ENTITY_BEEN_DAMAGED_BY_WEAPON(entity, weaponHash, weaponType);
		return retval;
	}

	void LUA_NATIVE_WEAPON_CLEAR_ENTITY_LAST_WEAPON_DAMAGE( Entity entity )
	{
		WEAPON::CLEAR_ENTITY_LAST_WEAPON_DAMAGE(entity);
	}

	void LUA_NATIVE_WEAPON_SET_PED_DROPS_WEAPON( Ped ped )
	{
		WEAPON::SET_PED_DROPS_WEAPON(ped);
	}

	void LUA_NATIVE_WEAPON_SET_PED_DROPS_INVENTORY_WEAPON( Ped ped, Hash weaponHash, float xOffset, float yOffset, float zOffset, int ammoCount )
	{
		WEAPON::SET_PED_DROPS_INVENTORY_WEAPON(ped, weaponHash, xOffset, yOffset, zOffset, ammoCount);
	}

	int LUA_NATIVE_WEAPON_GET_MAX_AMMO_IN_CLIP( Ped ped, Hash weaponHash, bool p2 )
	{
		auto retval = WEAPON::GET_MAX_AMMO_IN_CLIP(ped, weaponHash, p2);
		return retval;
	}

	std::tuple<bool, int> LUA_NATIVE_WEAPON_GET_AMMO_IN_CLIP( Ped ped, Hash weaponHash, int ammo )
	{
		std::tuple<bool, int> return_values;
		std::get<0>(return_values) = (bool)WEAPON::GET_AMMO_IN_CLIP(ped, weaponHash, &ammo);
		std::get<1>(return_values) = ammo;

		return return_values;
	}

	bool LUA_NATIVE_WEAPON_SET_AMMO_IN_CLIP( Ped ped, Hash weaponHash, int ammo )
	{
		auto retval = (bool)WEAPON::SET_AMMO_IN_CLIP(ped, weaponHash, ammo);
		return retval;
	}

	std::tuple<bool, int> LUA_NATIVE_WEAPON_GET_MAX_AMMO( Ped ped, Hash weaponHash, int ammo )
	{
		std::tuple<bool, int> return_values;
		std::get<0>(return_values) = (bool)WEAPON::GET_MAX_AMMO(ped, weaponHash, &ammo);
		std::get<1>(return_values) = ammo;

		return return_values;
	}

	std::tuple<bool, int> LUA_NATIVE_WEAPON_GET_MAX_AMMO_BY_TYPE( Ped ped, Hash ammoTypeHash, int ammo )
	{
		std::tuple<bool, int> return_values;
		std::get<0>(return_values) = (bool)WEAPON::GET_MAX_AMMO_BY_TYPE(ped, ammoTypeHash, &ammo);
		std::get<1>(return_values) = ammo;

		return return_values;
	}

	void LUA_NATIVE_WEAPON_ADD_PED_AMMO_BY_TYPE( Ped ped, Hash ammoTypeHash, int ammo )
	{
		WEAPON::ADD_PED_AMMO_BY_TYPE(ped, ammoTypeHash, ammo);
	}

	void LUA_NATIVE_WEAPON_SET_PED_AMMO_BY_TYPE( Ped ped, Hash ammoTypeHash, int ammo )
	{
		WEAPON::SET_PED_AMMO_BY_TYPE(ped, ammoTypeHash, ammo);
	}

	int LUA_NATIVE_WEAPON_GET_PED_AMMO_BY_TYPE( Ped ped, Hash ammoTypeHash )
	{
		auto retval = WEAPON::GET_PED_AMMO_BY_TYPE(ped, ammoTypeHash);
		return retval;
	}

	void LUA_NATIVE_WEAPON_SET_PED_AMMO_TO_DROP( Ped ped, int p1 )
	{
		WEAPON::SET_PED_AMMO_TO_DROP(ped, p1);
	}

	void LUA_NATIVE_WEAPON_SET_PICKUP_AMMO_AMOUNT_SCALER( float p0 )
	{
		WEAPON::SET_PICKUP_AMMO_AMOUNT_SCALER(p0);
	}

	Hash LUA_NATIVE_WEAPON_GET_PED_AMMO_TYPE_FROM_WEAPON( Ped ped, Hash weaponHash )
	{
		auto retval = WEAPON::GET_PED_AMMO_TYPE_FROM_WEAPON(ped, weaponHash);
		return retval;
	}

	Hash LUA_NATIVE_WEAPON_GET_PED_ORIGINAL_AMMO_TYPE_FROM_WEAPON( Ped ped, Hash weaponHash )
	{
		auto retval = WEAPON::GET_PED_ORIGINAL_AMMO_TYPE_FROM_WEAPON(ped, weaponHash);
		return retval;
	}

	std::tuple<bool, Vector3> LUA_NATIVE_WEAPON_GET_PED_LAST_WEAPON_IMPACT_COORD( Ped ped, Vector3 coords )
	{
		std::tuple<bool, Vector3> return_values;
		std::get<0>(return_values) = (bool)WEAPON::GET_PED_LAST_WEAPON_IMPACT_COORD(ped, &coords);
		std::get<1>(return_values) = coords;

		return return_values;
	}

	void LUA_NATIVE_WEAPON_SET_PED_GADGET( Ped ped, Hash gadgetHash, bool p2 )
	{
		WEAPON::SET_PED_GADGET(ped, gadgetHash, p2);
	}

	bool LUA_NATIVE_WEAPON_GET_IS_PED_GADGET_EQUIPPED( Ped ped, Hash gadgetHash )
	{
		auto retval = (bool)WEAPON::GET_IS_PED_GADGET_EQUIPPED(ped, gadgetHash);
		return retval;
	}

	Hash LUA_NATIVE_WEAPON_GET_SELECTED_PED_WEAPON( Ped ped )
	{
		auto retval = WEAPON::GET_SELECTED_PED_WEAPON(ped);
		return retval;
	}

	void LUA_NATIVE_WEAPON_EXPLODE_PROJECTILES( Ped ped, Hash weaponHash, bool p2 )
	{
		WEAPON::EXPLODE_PROJECTILES(ped, weaponHash, p2);
	}

	void LUA_NATIVE_WEAPON_REMOVE_ALL_PROJECTILES_OF_TYPE( Hash weaponHash, bool explode )
	{
		WEAPON::REMOVE_ALL_PROJECTILES_OF_TYPE(weaponHash, explode);
	}

	float LUA_NATIVE_WEAPON_GET_LOCKON_DISTANCE_OF_CURRENT_PED_WEAPON( Ped ped )
	{
		auto retval = WEAPON::GET_LOCKON_DISTANCE_OF_CURRENT_PED_WEAPON(ped);
		return retval;
	}

	float LUA_NATIVE_WEAPON_GET_MAX_RANGE_OF_CURRENT_PED_WEAPON( Ped ped )
	{
		auto retval = WEAPON::GET_MAX_RANGE_OF_CURRENT_PED_WEAPON(ped);
		return retval;
	}

	bool LUA_NATIVE_WEAPON_HAS_VEHICLE_GOT_PROJECTILE_ATTACHED( Ped driver, Vehicle vehicle, Hash weaponHash, Any p3 )
	{
		auto retval = (bool)WEAPON::HAS_VEHICLE_GOT_PROJECTILE_ATTACHED(driver, vehicle, weaponHash, p3);
		return retval;
	}

	void LUA_NATIVE_WEAPON_GIVE_WEAPON_COMPONENT_TO_PED( Ped ped, Hash weaponHash, Hash componentHash )
	{
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(ped, weaponHash, componentHash);
	}

	void LUA_NATIVE_WEAPON_REMOVE_WEAPON_COMPONENT_FROM_PED( Ped ped, Hash weaponHash, Hash componentHash )
	{
		WEAPON::REMOVE_WEAPON_COMPONENT_FROM_PED(ped, weaponHash, componentHash);
	}

	bool LUA_NATIVE_WEAPON_HAS_PED_GOT_WEAPON_COMPONENT( Ped ped, Hash weaponHash, Hash componentHash )
	{
		auto retval = (bool)WEAPON::HAS_PED_GOT_WEAPON_COMPONENT(ped, weaponHash, componentHash);
		return retval;
	}

	bool LUA_NATIVE_WEAPON_IS_PED_WEAPON_COMPONENT_ACTIVE( Ped ped, Hash weaponHash, Hash componentHash )
	{
		auto retval = (bool)WEAPON::IS_PED_WEAPON_COMPONENT_ACTIVE(ped, weaponHash, componentHash);
		return retval;
	}

	bool LUA_NATIVE_WEAPON_REFILL_AMMO_INSTANTLY( Ped ped )
	{
		auto retval = (bool)WEAPON::REFILL_AMMO_INSTANTLY(ped);
		return retval;
	}

	bool LUA_NATIVE_WEAPON_MAKE_PED_RELOAD( Ped ped )
	{
		auto retval = (bool)WEAPON::MAKE_PED_RELOAD(ped);
		return retval;
	}

	void LUA_NATIVE_WEAPON_REQUEST_WEAPON_ASSET( Hash weaponHash, int p1, int p2 )
	{
		WEAPON::REQUEST_WEAPON_ASSET(weaponHash, p1, p2);
	}

	bool LUA_NATIVE_WEAPON_HAS_WEAPON_ASSET_LOADED( Hash weaponHash )
	{
		auto retval = (bool)WEAPON::HAS_WEAPON_ASSET_LOADED(weaponHash);
		return retval;
	}

	void LUA_NATIVE_WEAPON_REMOVE_WEAPON_ASSET( Hash weaponHash )
	{
		WEAPON::REMOVE_WEAPON_ASSET(weaponHash);
	}

	Object LUA_NATIVE_WEAPON_CREATE_WEAPON_OBJECT( Hash weaponHash, int ammoCount, float x, float y, float z, bool showWorldModel, float scale, Any p7, Any p8, Any p9 )
	{
		auto retval = WEAPON::CREATE_WEAPON_OBJECT(weaponHash, ammoCount, x, y, z, showWorldModel, scale, p7, p8, p9);
		return retval;
	}

	void LUA_NATIVE_WEAPON_GIVE_WEAPON_COMPONENT_TO_WEAPON_OBJECT( Object weaponObject, Hash componentHash )
	{
		WEAPON::GIVE_WEAPON_COMPONENT_TO_WEAPON_OBJECT(weaponObject, componentHash);
	}

	void LUA_NATIVE_WEAPON_REMOVE_WEAPON_COMPONENT_FROM_WEAPON_OBJECT( Object object, Hash componentHash )
	{
		WEAPON::REMOVE_WEAPON_COMPONENT_FROM_WEAPON_OBJECT(object, componentHash);
	}

	bool LUA_NATIVE_WEAPON_HAS_WEAPON_GOT_WEAPON_COMPONENT( Object weapon, Hash componentHash )
	{
		auto retval = (bool)WEAPON::HAS_WEAPON_GOT_WEAPON_COMPONENT(weapon, componentHash);
		return retval;
	}

	void LUA_NATIVE_WEAPON_GIVE_WEAPON_OBJECT_TO_PED( Object weaponObject, Ped ped )
	{
		WEAPON::GIVE_WEAPON_OBJECT_TO_PED(weaponObject, ped);
	}

	bool LUA_NATIVE_WEAPON_DOES_WEAPON_TAKE_WEAPON_COMPONENT( Hash weaponHash, Hash componentHash )
	{
		auto retval = (bool)WEAPON::DOES_WEAPON_TAKE_WEAPON_COMPONENT(weaponHash, componentHash);
		return retval;
	}

	Object LUA_NATIVE_WEAPON_GET_WEAPON_OBJECT_FROM_PED( Ped ped, bool p1 )
	{
		auto retval = WEAPON::GET_WEAPON_OBJECT_FROM_PED(ped, p1);
		return retval;
	}

	void LUA_NATIVE_WEAPON_GIVE_LOADOUT_TO_PED( Ped ped, Hash loadoutHash )
	{
		WEAPON::GIVE_LOADOUT_TO_PED(ped, loadoutHash);
	}

	void LUA_NATIVE_WEAPON_SET_PED_WEAPON_TINT_INDEX( Ped ped, Hash weaponHash, int tintIndex )
	{
		WEAPON::SET_PED_WEAPON_TINT_INDEX(ped, weaponHash, tintIndex);
	}

	int LUA_NATIVE_WEAPON_GET_PED_WEAPON_TINT_INDEX( Ped ped, Hash weaponHash )
	{
		auto retval = WEAPON::GET_PED_WEAPON_TINT_INDEX(ped, weaponHash);
		return retval;
	}

	void LUA_NATIVE_WEAPON_SET_WEAPON_OBJECT_TINT_INDEX( Object weapon, int tintIndex )
	{
		WEAPON::SET_WEAPON_OBJECT_TINT_INDEX(weapon, tintIndex);
	}

	int LUA_NATIVE_WEAPON_GET_WEAPON_OBJECT_TINT_INDEX( Object weapon )
	{
		auto retval = WEAPON::GET_WEAPON_OBJECT_TINT_INDEX(weapon);
		return retval;
	}

	int LUA_NATIVE_WEAPON_GET_WEAPON_TINT_COUNT( Hash weaponHash )
	{
		auto retval = WEAPON::GET_WEAPON_TINT_COUNT(weaponHash);
		return retval;
	}

	void LUA_NATIVE_WEAPON_SET_PED_WEAPON_COMPONENT_TINT_INDEX( Ped ped, Hash weaponHash, Hash camoComponentHash, int colorIndex )
	{
		WEAPON::SET_PED_WEAPON_COMPONENT_TINT_INDEX(ped, weaponHash, camoComponentHash, colorIndex);
	}

	int LUA_NATIVE_WEAPON_GET_PED_WEAPON_COMPONENT_TINT_INDEX( Ped ped, Hash weaponHash, Hash camoComponentHash )
	{
		auto retval = WEAPON::GET_PED_WEAPON_COMPONENT_TINT_INDEX(ped, weaponHash, camoComponentHash);
		return retval;
	}

	void LUA_NATIVE_WEAPON_SET_WEAPON_OBJECT_COMPONENT_TINT_INDEX( Object weaponObject, Hash camoComponentHash, int colorIndex )
	{
		WEAPON::SET_WEAPON_OBJECT_COMPONENT_TINT_INDEX(weaponObject, camoComponentHash, colorIndex);
	}

	int LUA_NATIVE_WEAPON_GET_WEAPON_OBJECT_COMPONENT_TINT_INDEX( Object weaponObject, Hash camoComponentHash )
	{
		auto retval = WEAPON::GET_WEAPON_OBJECT_COMPONENT_TINT_INDEX(weaponObject, camoComponentHash);
		return retval;
	}

	int LUA_NATIVE_WEAPON_GET_PED_WEAPON_CAMO_INDEX( Ped ped, Hash weaponHash )
	{
		auto retval = WEAPON::GET_PED_WEAPON_CAMO_INDEX(ped, weaponHash);
		return retval;
	}

	void LUA_NATIVE_WEAPON_SET_WEAPON_OBJECT_CAMO_INDEX( Object weaponObject, int p1 )
	{
		WEAPON::SET_WEAPON_OBJECT_CAMO_INDEX(weaponObject, p1);
	}

	std::tuple<bool, Any> LUA_NATIVE_WEAPON_GET_WEAPON_HUD_STATS( Hash weaponHash, Any outData )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)WEAPON::GET_WEAPON_HUD_STATS(weaponHash, &outData);
		std::get<1>(return_values) = outData;

		return return_values;
	}

	std::tuple<bool, Any> LUA_NATIVE_WEAPON_GET_WEAPON_COMPONENT_HUD_STATS( Hash componentHash, Any outData )
	{
		std::tuple<bool, Any> return_values;
		std::get<0>(return_values) = (bool)WEAPON::GET_WEAPON_COMPONENT_HUD_STATS(componentHash, &outData);
		std::get<1>(return_values) = outData;

		return return_values;
	}

	float LUA_NATIVE_WEAPON_GET_WEAPON_DAMAGE( Hash weaponHash, Hash componentHash )
	{
		auto retval = WEAPON::GET_WEAPON_DAMAGE(weaponHash, componentHash);
		return retval;
	}

	int LUA_NATIVE_WEAPON_GET_WEAPON_CLIP_SIZE( Hash weaponHash )
	{
		auto retval = WEAPON::GET_WEAPON_CLIP_SIZE(weaponHash);
		return retval;
	}

	float LUA_NATIVE_WEAPON_GET_WEAPON_TIME_BETWEEN_SHOTS( Hash weaponHash )
	{
		auto retval = WEAPON::GET_WEAPON_TIME_BETWEEN_SHOTS(weaponHash);
		return retval;
	}

	void LUA_NATIVE_WEAPON_SET_PED_CHANCE_OF_FIRING_BLANKS( Ped ped, float xBias, float yBias )
	{
		WEAPON::SET_PED_CHANCE_OF_FIRING_BLANKS(ped, xBias, yBias);
	}

	Object LUA_NATIVE_WEAPON_SET_PED_SHOOT_ORDNANCE_WEAPON( Ped ped, float p1 )
	{
		auto retval = WEAPON::SET_PED_SHOOT_ORDNANCE_WEAPON(ped, p1);
		return retval;
	}

	void LUA_NATIVE_WEAPON_REQUEST_WEAPON_HIGH_DETAIL_MODEL( Entity weaponObject )
	{
		WEAPON::REQUEST_WEAPON_HIGH_DETAIL_MODEL(weaponObject);
	}

	void LUA_NATIVE_WEAPON_SET_WEAPON_DAMAGE_MODIFIER( Hash weaponHash, float damageMultiplier )
	{
		WEAPON::SET_WEAPON_DAMAGE_MODIFIER(weaponHash, damageMultiplier);
	}

	void LUA_NATIVE_WEAPON_SET_WEAPON_AOE_MODIFIER( Hash weaponHash, float multiplier )
	{
		WEAPON::SET_WEAPON_AOE_MODIFIER(weaponHash, multiplier);
	}

	void LUA_NATIVE_WEAPON_SET_WEAPON_EFFECT_DURATION_MODIFIER( Hash p0, float p1 )
	{
		WEAPON::SET_WEAPON_EFFECT_DURATION_MODIFIER(p0, p1);
	}

	bool LUA_NATIVE_WEAPON_IS_PED_CURRENT_WEAPON_SILENCED( Ped ped )
	{
		auto retval = (bool)WEAPON::IS_PED_CURRENT_WEAPON_SILENCED(ped);
		return retval;
	}

	bool LUA_NATIVE_WEAPON_IS_FLASH_LIGHT_ON( Ped ped )
	{
		auto retval = (bool)WEAPON::IS_FLASH_LIGHT_ON(ped);
		return retval;
	}

	bool LUA_NATIVE_WEAPON_SET_FLASH_LIGHT_FADE_DISTANCE( float distance )
	{
		auto retval = (bool)WEAPON::SET_FLASH_LIGHT_FADE_DISTANCE(distance);
		return retval;
	}

	void LUA_NATIVE_WEAPON_SET_FLASH_LIGHT_ACTIVE_HISTORY( Ped ped, bool toggle )
	{
		WEAPON::SET_FLASH_LIGHT_ACTIVE_HISTORY(ped, toggle);
	}

	void LUA_NATIVE_WEAPON_SET_WEAPON_ANIMATION_OVERRIDE( Ped ped, Hash animStyle )
	{
		WEAPON::SET_WEAPON_ANIMATION_OVERRIDE(ped, animStyle);
	}

	int LUA_NATIVE_WEAPON_GET_WEAPON_DAMAGE_TYPE( Hash weaponHash )
	{
		auto retval = WEAPON::GET_WEAPON_DAMAGE_TYPE(weaponHash);
		return retval;
	}

	void LUA_NATIVE_WEAPON_SET_EQIPPED_WEAPON_START_SPINNING_AT_FULL_SPEED( Ped ped )
	{
		WEAPON::SET_EQIPPED_WEAPON_START_SPINNING_AT_FULL_SPEED(ped);
	}

	bool LUA_NATIVE_WEAPON_CAN_USE_WEAPON_ON_PARACHUTE( Hash weaponHash )
	{
		auto retval = (bool)WEAPON::CAN_USE_WEAPON_ON_PARACHUTE(weaponHash);
		return retval;
	}

	int LUA_NATIVE_WEAPON_CREATE_AIR_DEFENCE_SPHERE( float x, float y, float z, float radius, float p4, float p5, float p6, Hash weaponHash )
	{
		auto retval = WEAPON::CREATE_AIR_DEFENCE_SPHERE(x, y, z, radius, p4, p5, p6, weaponHash);
		return retval;
	}

	int LUA_NATIVE_WEAPON_CREATE_AIR_DEFENCE_ANGLED_AREA( float p0, float p1, float p2, float p3, float p4, float p5, float p6, float p7, float p8, float radius, Hash weaponHash )
	{
		auto retval = WEAPON::CREATE_AIR_DEFENCE_ANGLED_AREA(p0, p1, p2, p3, p4, p5, p6, p7, p8, radius, weaponHash);
		return retval;
	}

	bool LUA_NATIVE_WEAPON_REMOVE_AIR_DEFENCE_SPHERE( int zoneId )
	{
		auto retval = (bool)WEAPON::REMOVE_AIR_DEFENCE_SPHERE(zoneId);
		return retval;
	}

	void LUA_NATIVE_WEAPON_REMOVE_ALL_AIR_DEFENCE_SPHERES(  )
	{
		WEAPON::REMOVE_ALL_AIR_DEFENCE_SPHERES();
	}

	void LUA_NATIVE_WEAPON_SET_PLAYER_TARGETTABLE_FOR_AIR_DEFENCE_SPHERE( Player player, int zoneId, bool enable )
	{
		WEAPON::SET_PLAYER_TARGETTABLE_FOR_AIR_DEFENCE_SPHERE(player, zoneId, enable);
	}

	std::tuple<bool, int> LUA_NATIVE_WEAPON_IS_AIR_DEFENCE_SPHERE_IN_AREA( float x, float y, float z, float radius, int outZoneId )
	{
		std::tuple<bool, int> return_values;
		std::get<0>(return_values) = (bool)WEAPON::IS_AIR_DEFENCE_SPHERE_IN_AREA(x, y, z, radius, &outZoneId);
		std::get<1>(return_values) = outZoneId;

		return return_values;
	}

	void LUA_NATIVE_WEAPON_FIRE_AIR_DEFENCE_SPHERE_WEAPON_AT_POSITION( int zoneId, float x, float y, float z )
	{
		WEAPON::FIRE_AIR_DEFENCE_SPHERE_WEAPON_AT_POSITION(zoneId, x, y, z);
	}

	bool LUA_NATIVE_WEAPON_DOES_AIR_DEFENCE_SPHERE_EXIST( int zoneId )
	{
		auto retval = (bool)WEAPON::DOES_AIR_DEFENCE_SPHERE_EXIST(zoneId);
		return retval;
	}

	void LUA_NATIVE_WEAPON_SET_CAN_PED_SELECT_INVENTORY_WEAPON( Ped ped, Hash weaponHash, bool toggle )
	{
		WEAPON::SET_CAN_PED_SELECT_INVENTORY_WEAPON(ped, weaponHash, toggle);
	}

	void LUA_NATIVE_WEAPON_SET_CAN_PED_SELECT_ALL_WEAPONS( Ped ped, bool toggle )
	{
		WEAPON::SET_CAN_PED_SELECT_ALL_WEAPONS(ped, toggle);
	}

	int LUA_NATIVE_ZONE_GET_ZONE_AT_COORDS( float x, float y, float z )
	{
		auto retval = ZONE::GET_ZONE_AT_COORDS(x, y, z);
		return retval;
	}

	int LUA_NATIVE_ZONE_GET_ZONE_FROM_NAME_ID( const char* zoneName )
	{
		auto retval = ZONE::GET_ZONE_FROM_NAME_ID(zoneName);
		return retval;
	}

	int LUA_NATIVE_ZONE_GET_ZONE_POPSCHEDULE( int zoneId )
	{
		auto retval = ZONE::GET_ZONE_POPSCHEDULE(zoneId);
		return retval;
	}

	const char* LUA_NATIVE_ZONE_GET_NAME_OF_ZONE( float x, float y, float z )
	{
		auto retval = ZONE::GET_NAME_OF_ZONE(x, y, z);
		return retval;
	}

	void LUA_NATIVE_ZONE_SET_ZONE_ENABLED( int zoneId, bool toggle )
	{
		ZONE::SET_ZONE_ENABLED(zoneId, toggle);
	}

	int LUA_NATIVE_ZONE_GET_ZONE_SCUMMINESS( int zoneId )
	{
		auto retval = ZONE::GET_ZONE_SCUMMINESS(zoneId);
		return retval;
	}

	void LUA_NATIVE_ZONE_OVERRIDE_POPSCHEDULE_VEHICLE_MODEL( int scheduleId, Hash vehicleHash )
	{
		ZONE::OVERRIDE_POPSCHEDULE_VEHICLE_MODEL(scheduleId, vehicleHash);
	}

	void LUA_NATIVE_ZONE_CLEAR_POPSCHEDULE_OVERRIDE_VEHICLE_MODEL( int scheduleId )
	{
		ZONE::CLEAR_POPSCHEDULE_OVERRIDE_VEHICLE_MODEL(scheduleId);
	}

	Hash LUA_NATIVE_ZONE_GET_HASH_OF_MAP_AREA_AT_COORDS( float x, float y, float z )
	{
		auto retval = ZONE::GET_HASH_OF_MAP_AREA_AT_COORDS(x, y, z);
		return retval;
	}

}
