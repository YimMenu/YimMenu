import json

natives = json.load(open("natives.json"))
out_file : str = ""

def sanitize_param(name):
    if name in ["repeat", "end"]:
        return "_"+name
    else:
        return name

def make_param_listing(params):
    pms = ""
    for param in params:
        pms += sanitize_param(param["name"])
        pms += ","
    pms = pms.rstrip(",")
    return pms

def is_string(type: str):
    return type.find("char*") != -1

def is_pointer(type: str):
    """also returns true for string"""
    return type.find('*') != -1

def get_begin_call_args(params):
    num_strs = 0
    num_ptrs = 0

    for param in params:
        if (is_string(param["type"])):
            num_strs += 1
        elif (is_pointer(param["type"])):
            num_ptrs += 1

    return num_strs, num_ptrs


def write_native(name, hash, params, return_type):
    global out_file

    out_file += f"{name}=function({make_param_listing(params)})"
    args = get_begin_call_args(params)
    out_file += f"_natives.begin_call({args[0]}, {args[1]});"
    for param in params:
        if (is_string(param["type"])):
            out_file += f"_natives.push_string({sanitize_param(param['name'])});"
        elif (is_pointer(param["type"])):
            out_file += f"_natives.push_pointer({sanitize_param(param['name'])});"
        else:
            out_file += f"_natives.push_arg({sanitize_param(param['name'])});"

    if is_string(return_type):
        out_file += f"return _natives.end_call_string({hash});end;\n"
    elif return_type != "void":
        out_file += f"return _natives.end_call({hash});end;\n"
    else:
        out_file += f"_natives.end_call({hash});end;\n"

def write_namespace(name, data):
    global out_file

    out_file += f"{name} = {{\n"

    for (hash, more) in data.items():
        write_native(more["name"], hash, more["params"], more["return_type"])
    
    out_file += "};\n"

def write_file():
    for (namespace, data) in natives.items():
        write_namespace(namespace, data)

def convert_and_write_hpp_file():
    global out_file

    hpp_data = "#pragma once\n// clang-format off\n// Generated by natives_gen.py. DO NOT EDIT\nchar natives_data[] = \n"

    lines = out_file.rstrip('\n').splitlines()
    for line in lines:
        hpp_data += f"\"{line}\\n\"\\\n"
    
    hpp_data = hpp_data.rstrip('\n\\')
    hpp_data += ";\n// clang-format on"
    open("natives_data.hpp", "w+").write(hpp_data)

def write_lua_file():
    open("natives.lua", "w+").write(out_file)

if __name__ == "__main__":
    write_file()
    convert_and_write_hpp_file()